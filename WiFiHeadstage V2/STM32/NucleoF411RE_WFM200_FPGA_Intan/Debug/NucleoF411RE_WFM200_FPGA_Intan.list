
NucleoF411RE_WFM200_FPGA_Intan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e54c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004fe8c  0801e6f0  0801e6f0  0001f6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806e57c  0806e57c  0007028c  2**0
                  CONTENTS
  4 .ARM          00000008  0806e57c  0806e57c  0006f57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806e584  0806e584  0007028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806e584  0806e584  0006f584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806e588  0806e588  0006f588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  0806e58c  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013da0  2000028c  0806e818  0007028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001402c  0806e818  0007102c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0007028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003222f  00000000  00000000  000702bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000970a  00000000  00000000  000a24eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002468  00000000  00000000  000abbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c85  00000000  00000000  000ae060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ccf  00000000  00000000  000afce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003bc4f  00000000  00000000  000d79b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b76a6  00000000  00000000  00113603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001caca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a208  00000000  00000000  001cad30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001d4f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000028c 	.word	0x2000028c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801e6d4 	.word	0x0801e6d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000290 	.word	0x20000290
 80001dc:	0801e6d4 	.word	0x0801e6d4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <binary_string>:
uint8_t reg_address;
uint8_t cmd_selector;
uint16_t lsb_value;


char* binary_string(uint32_t value) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
    static char buffer[40];  // 32 bits + 7 spaces + null terminator
    int index = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]

    for (int i = 31; i >= 0; i--) {
 8000ed4:	231f      	movs	r3, #31
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	e021      	b.n	8000f1e <binary_string+0x56>
        buffer[index++] = (value & (1 << i)) ? '1' : '0';
 8000eda:	2201      	movs	r2, #1
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <binary_string+0x28>
 8000eec:	2131      	movs	r1, #49	@ 0x31
 8000eee:	e000      	b.n	8000ef2 <binary_string+0x2a>
 8000ef0:	2130      	movs	r1, #48	@ 0x30
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	60fa      	str	r2, [r7, #12]
 8000ef8:	4a10      	ldr	r2, [pc, #64]	@ (8000f3c <binary_string+0x74>)
 8000efa:	54d1      	strb	r1, [r2, r3]
        if (i % 8 == 0 && i != 0) {
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d108      	bne.n	8000f18 <binary_string+0x50>
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d005      	beq.n	8000f18 <binary_string+0x50>
            buffer[index++] = ' ';
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	60fa      	str	r2, [r7, #12]
 8000f12:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <binary_string+0x74>)
 8000f14:	2120      	movs	r1, #32
 8000f16:	54d1      	strb	r1, [r2, r3]
    for (int i = 31; i >= 0; i--) {
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	dada      	bge.n	8000eda <binary_string+0x12>
        }
    }
    buffer[index] = '\0';
 8000f24:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <binary_string+0x74>)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]

    return buffer;
 8000f2e:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <binary_string+0x74>)
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	200002b4 	.word	0x200002b4

08000f40 <print_debug_binary>:

void print_debug_binary(uint16_t *rx_vector){
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	if (PRINT_DEBUG_BINARY){
		printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
		printf("------------------------------------------------  \r\n");
	}
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <print_configuration>:

void print_configuration(uint8_t cmd_selector, uint8_t reg_address, uint16_t lsb_value) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	71bb      	strb	r3, [r7, #6]
 8000f62:	4613      	mov	r3, r2
 8000f64:	80bb      	strh	r3, [r7, #4]
    const char *cmd_type = "Unknown";
 8000f66:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <print_configuration+0xc4>)
 8000f68:	60fb      	str	r3, [r7, #12]
    if ((cmd_selector & 0b11000000) == CONVERT_CMD) {
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <print_configuration+0x26>
        cmd_type = "CONVERT";
 8000f74:	4b29      	ldr	r3, [pc, #164]	@ (800101c <print_configuration+0xc8>)
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	e014      	b.n	8000fa4 <print_configuration+0x50>
    } else if ((cmd_selector & 0b11000000) == WRITE_CMD) {
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f80:	2b80      	cmp	r3, #128	@ 0x80
 8000f82:	d102      	bne.n	8000f8a <print_configuration+0x36>
        cmd_type = "WRITE";
 8000f84:	4b26      	ldr	r3, [pc, #152]	@ (8001020 <print_configuration+0xcc>)
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e00c      	b.n	8000fa4 <print_configuration+0x50>
    } else if ((cmd_selector & 0b11000000) == READ_CMD) {
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f90:	2bc0      	cmp	r3, #192	@ 0xc0
 8000f92:	d102      	bne.n	8000f9a <print_configuration+0x46>
        cmd_type = "READ";
 8000f94:	4b23      	ldr	r3, [pc, #140]	@ (8001024 <print_configuration+0xd0>)
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e004      	b.n	8000fa4 <print_configuration+0x50>
    } else if (cmd_selector == CLEAR_CMD) {
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b6a      	cmp	r3, #106	@ 0x6a
 8000f9e:	d101      	bne.n	8000fa4 <print_configuration+0x50>
        cmd_type = "CLEAR";
 8000fa0:	4b21      	ldr	r3, [pc, #132]	@ (8001028 <print_configuration+0xd4>)
 8000fa2:	60fb      	str	r3, [r7, #12]
    }

    const char *flag_info = "";
 8000fa4:	4b21      	ldr	r3, [pc, #132]	@ (800102c <print_configuration+0xd8>)
 8000fa6:	60bb      	str	r3, [r7, #8]
    if (cmd_selector & 0b00010000) { // Binary equivalent for M_Flag
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <print_configuration+0x62>
        flag_info = "M_FLAG";
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <print_configuration+0xdc>)
 8000fb4:	60bb      	str	r3, [r7, #8]
    }
    if (cmd_selector & 0b00100000) { // Binary equivalent for U_Flag
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f003 0320 	and.w	r3, r3, #32
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d015      	beq.n	8000fec <print_configuration+0x98>
        if (*flag_info) {
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00f      	beq.n	8000fe8 <print_configuration+0x94>
            flag_info = strcat(flag_info, " | U_FLAG");
 8000fc8:	68b8      	ldr	r0, [r7, #8]
 8000fca:	f7ff f969 	bl	80002a0 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4917      	ldr	r1, [pc, #92]	@ (8001034 <print_configuration+0xe0>)
 8000fd8:	461a      	mov	r2, r3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	cb03      	ldmia	r3!, {r0, r1}
 8000fde:	6010      	str	r0, [r2, #0]
 8000fe0:	6051      	str	r1, [r2, #4]
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	8113      	strh	r3, [r2, #8]
 8000fe6:	e001      	b.n	8000fec <print_configuration+0x98>
        } else {
            flag_info = "U_FLAG";
 8000fe8:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <print_configuration+0xe4>)
 8000fea:	60bb      	str	r3, [r7, #8]
        }
    }
    if (!*flag_info) {
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <print_configuration+0xa4>
        flag_info = "None";
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <print_configuration+0xe8>)
 8000ff6:	60bb      	str	r3, [r7, #8]
    }

    if (PRINT_COMMAND_INFO){
    	printf("Command: %s | Register: %d | LSB : 0x%04X | Flags: %s \r\n", cmd_type, reg_address, lsb_value, flag_info);
 8000ff8:	79ba      	ldrb	r2, [r7, #6]
 8000ffa:	88b9      	ldrh	r1, [r7, #4]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	460b      	mov	r3, r1
 8001002:	68f9      	ldr	r1, [r7, #12]
 8001004:	480e      	ldr	r0, [pc, #56]	@ (8001040 <print_configuration+0xec>)
 8001006:	f01b fc13 	bl	801c830 <iprintf>
		printf("------------------------------------------------  \r\n");
 800100a:	480e      	ldr	r0, [pc, #56]	@ (8001044 <print_configuration+0xf0>)
 800100c:	f01b fc78 	bl	801c900 <puts>
    }

}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	0801e6f0 	.word	0x0801e6f0
 800101c:	0801e6f8 	.word	0x0801e6f8
 8001020:	0801e700 	.word	0x0801e700
 8001024:	0801e708 	.word	0x0801e708
 8001028:	0801e710 	.word	0x0801e710
 800102c:	0801e718 	.word	0x0801e718
 8001030:	0801e71c 	.word	0x0801e71c
 8001034:	0801e724 	.word	0x0801e724
 8001038:	0801e730 	.word	0x0801e730
 800103c:	0801e738 	.word	0x0801e738
 8001040:	0801e740 	.word	0x0801e740
 8001044:	0801e77c 	.word	0x0801e77c

08001048 <RHS2116_Read_Register>:


void RHS2116_Read_Register(SPI_HandleTypeDef *hspi, uint8_t Register){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
	// Register 255 - Read Dummy
	cmd_selector = READ_CMD;
 8001054:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <RHS2116_Read_Register+0x6c>)
 8001056:	22c0      	movs	r2, #192	@ 0xc0
 8001058:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 800105a:	4a17      	ldr	r2, [pc, #92]	@ (80010b8 <RHS2116_Read_Register+0x70>)
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	7013      	strb	r3, [r2, #0]
	lsb_value = 0b0000000000000000;
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <RHS2116_Read_Register+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <RHS2116_Read_Register+0x6c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <RHS2116_Read_Register+0x70>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21b      	sxth	r3, r3
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <RHS2116_Read_Register+0x78>)
 800107c:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 800107e:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <RHS2116_Read_Register+0x74>)
 8001080:	881a      	ldrh	r2, [r3, #0]
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <RHS2116_Read_Register+0x78>)
 8001084:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <RHS2116_Read_Register+0x7c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4a0f      	ldr	r2, [pc, #60]	@ (80010c8 <RHS2116_Read_Register+0x80>)
 800108c:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <RHS2116_Read_Register+0x78>)
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f001 fa1e 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <RHS2116_Read_Register+0x80>)
 8001096:	f7ff ff53 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <RHS2116_Read_Register+0x6c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <RHS2116_Read_Register+0x70>)
 80010a0:	7811      	ldrb	r1, [r2, #0]
 80010a2:	4a06      	ldr	r2, [pc, #24]	@ (80010bc <RHS2116_Read_Register+0x74>)
 80010a4:	8812      	ldrh	r2, [r2, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff54 	bl	8000f54 <print_configuration>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200002b1 	.word	0x200002b1
 80010b8:	200002b0 	.word	0x200002b0
 80010bc:	200002b2 	.word	0x200002b2
 80010c0:	200002a8 	.word	0x200002a8
 80010c4:	20000000 	.word	0x20000000
 80010c8:	200002ac 	.word	0x200002ac

080010cc <RHS2116_Clear_Command>:


void RHS2116_Clear_Command(SPI_HandleTypeDef *hspi){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	// Clear Command
	cmd_selector = CLEAR_CMD;
 80010d4:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <RHS2116_Clear_Command+0x68>)
 80010d6:	226a      	movs	r2, #106	@ 0x6a
 80010d8:	701a      	strb	r2, [r3, #0]
	reg_address = 0b00000000;
 80010da:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <RHS2116_Clear_Command+0x6c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <RHS2116_Clear_Command+0x70>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <RHS2116_Clear_Command+0x68>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <RHS2116_Clear_Command+0x6c>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <RHS2116_Clear_Command+0x74>)
 80010fc:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <RHS2116_Clear_Command+0x70>)
 8001100:	881a      	ldrh	r2, [r3, #0]
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <RHS2116_Clear_Command+0x74>)
 8001104:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <RHS2116_Clear_Command+0x78>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4a0f      	ldr	r2, [pc, #60]	@ (8001148 <RHS2116_Clear_Command+0x7c>)
 800110c:	490c      	ldr	r1, [pc, #48]	@ (8001140 <RHS2116_Clear_Command+0x74>)
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f001 f9de 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <RHS2116_Clear_Command+0x7c>)
 8001116:	f7ff ff13 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <RHS2116_Clear_Command+0x68>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <RHS2116_Clear_Command+0x6c>)
 8001120:	7811      	ldrb	r1, [r2, #0]
 8001122:	4a06      	ldr	r2, [pc, #24]	@ (800113c <RHS2116_Clear_Command+0x70>)
 8001124:	8812      	ldrh	r2, [r2, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff14 	bl	8000f54 <print_configuration>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200002b1 	.word	0x200002b1
 8001138:	200002b0 	.word	0x200002b0
 800113c:	200002b2 	.word	0x200002b2
 8001140:	200002a8 	.word	0x200002a8
 8001144:	20000000 	.word	0x20000000
 8001148:	200002ac 	.word	0x200002ac

0800114c <RHS2116_Disable_Stim>:


void RHS2116_Disable_Stim(SPI_HandleTypeDef *hspi, uint8_t Register){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	// Register 32 - Write Disable Stim A
	// Register 33 - Write Disable Stim B
	cmd_selector = WRITE_CMD;
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <RHS2116_Disable_Stim+0x6c>)
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 800115e:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <RHS2116_Disable_Stim+0x70>)
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	7013      	strb	r3, [r2, #0]
	lsb_value = 0b0000000000000000;
 8001164:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <RHS2116_Disable_Stim+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <RHS2116_Disable_Stim+0x6c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <RHS2116_Disable_Stim+0x70>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	b21b      	sxth	r3, r3
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <RHS2116_Disable_Stim+0x78>)
 8001180:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <RHS2116_Disable_Stim+0x74>)
 8001184:	881a      	ldrh	r2, [r3, #0]
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <RHS2116_Disable_Stim+0x78>)
 8001188:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <RHS2116_Disable_Stim+0x7c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4a0f      	ldr	r2, [pc, #60]	@ (80011cc <RHS2116_Disable_Stim+0x80>)
 8001190:	490c      	ldr	r1, [pc, #48]	@ (80011c4 <RHS2116_Disable_Stim+0x78>)
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f001 f99c 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001198:	480c      	ldr	r0, [pc, #48]	@ (80011cc <RHS2116_Disable_Stim+0x80>)
 800119a:	f7ff fed1 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <RHS2116_Disable_Stim+0x6c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4a06      	ldr	r2, [pc, #24]	@ (80011bc <RHS2116_Disable_Stim+0x70>)
 80011a4:	7811      	ldrb	r1, [r2, #0]
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <RHS2116_Disable_Stim+0x74>)
 80011a8:	8812      	ldrh	r2, [r2, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fed2 	bl	8000f54 <print_configuration>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200002b1 	.word	0x200002b1
 80011bc:	200002b0 	.word	0x200002b0
 80011c0:	200002b2 	.word	0x200002b2
 80011c4:	200002a8 	.word	0x200002a8
 80011c8:	20000000 	.word	0x20000000
 80011cc:	200002ac 	.word	0x200002ac

080011d0 <RHS2116_PowerUp_DCCouple_LowGain_Amp>:


void RHS2116_PowerUp_DCCouple_LowGain_Amp(SPI_HandleTypeDef *hspi, uint8_t Register){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
	// Register 38 - Power Up DC-couple low-gain amplifiers
	cmd_selector = WRITE_CMD;
 80011dc:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x70>)
 80011de:	2280      	movs	r2, #128	@ 0x80
 80011e0:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 80011e2:	4a18      	ldr	r2, [pc, #96]	@ (8001244 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x74>)
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	7013      	strb	r3, [r2, #0]
	lsb_value = 0b1111111111111111;
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x78>)
 80011ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ee:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x70>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x74>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21b      	sxth	r3, r3
 8001202:	b29a      	uxth	r2, r3
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x7c>)
 8001206:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x78>)
 800120a:	881a      	ldrh	r2, [r3, #0]
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x7c>)
 800120e:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x80>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x84>)
 8001216:	490d      	ldr	r1, [pc, #52]	@ (800124c <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x7c>)
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f001 f959 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 800121e:	480d      	ldr	r0, [pc, #52]	@ (8001254 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x84>)
 8001220:	f7ff fe8e 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x70>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4a06      	ldr	r2, [pc, #24]	@ (8001244 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x74>)
 800122a:	7811      	ldrb	r1, [r2, #0]
 800122c:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x78>)
 800122e:	8812      	ldrh	r2, [r2, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fe8f 	bl	8000f54 <print_configuration>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200002b1 	.word	0x200002b1
 8001244:	200002b0 	.word	0x200002b0
 8001248:	200002b2 	.word	0x200002b2
 800124c:	200002a8 	.word	0x200002a8
 8001250:	20000000 	.word	0x20000000
 8001254:	200002ac 	.word	0x200002ac

08001258 <RHS2116_Configure_ADC_Sampling_Rate>:


void RHS2116_Configure_ADC_Sampling_Rate(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t adc_buffer_bias, uint8_t mux_bias){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	4608      	mov	r0, r1
 8001262:	4611      	mov	r1, r2
 8001264:	461a      	mov	r2, r3
 8001266:	4603      	mov	r3, r0
 8001268:	70fb      	strb	r3, [r7, #3]
 800126a:	460b      	mov	r3, r1
 800126c:	70bb      	strb	r3, [r7, #2]
 800126e:	4613      	mov	r3, r2
 8001270:	707b      	strb	r3, [r7, #1]
	// Register 0 - Configure the ADC and analog MUX for a total ADC sampling rate of... EXEMPLE : 480 kS/s ( 16 × 30 kS/s)
	cmd_selector = WRITE_CMD;
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <RHS2116_Configure_ADC_Sampling_Rate+0x88>)
 8001274:	2280      	movs	r2, #128	@ 0x80
 8001276:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8001278:	4a1a      	ldr	r2, [pc, #104]	@ (80012e4 <RHS2116_Configure_ADC_Sampling_Rate+0x8c>)
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	7013      	strb	r3, [r2, #0]
	lsb_value = (adc_buffer_bias << 6) | mux_bias;
 800127e:	78bb      	ldrb	r3, [r7, #2]
 8001280:	019b      	lsls	r3, r3, #6
 8001282:	b21a      	sxth	r2, r3
 8001284:	787b      	ldrb	r3, [r7, #1]
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b21b      	sxth	r3, r3
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <RHS2116_Configure_ADC_Sampling_Rate+0x90>)
 8001290:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001292:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <RHS2116_Configure_ADC_Sampling_Rate+0x88>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <RHS2116_Configure_ADC_Sampling_Rate+0x8c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <RHS2116_Configure_ADC_Sampling_Rate+0x94>)
 80012a8:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <RHS2116_Configure_ADC_Sampling_Rate+0x90>)
 80012ac:	881a      	ldrh	r2, [r3, #0]
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <RHS2116_Configure_ADC_Sampling_Rate+0x94>)
 80012b0:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <RHS2116_Configure_ADC_Sampling_Rate+0x98>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <RHS2116_Configure_ADC_Sampling_Rate+0x9c>)
 80012b8:	490c      	ldr	r1, [pc, #48]	@ (80012ec <RHS2116_Configure_ADC_Sampling_Rate+0x94>)
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f001 f908 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <RHS2116_Configure_ADC_Sampling_Rate+0x9c>)
 80012c2:	f7ff fe3d 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <RHS2116_Configure_ADC_Sampling_Rate+0x88>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4a06      	ldr	r2, [pc, #24]	@ (80012e4 <RHS2116_Configure_ADC_Sampling_Rate+0x8c>)
 80012cc:	7811      	ldrb	r1, [r2, #0]
 80012ce:	4a06      	ldr	r2, [pc, #24]	@ (80012e8 <RHS2116_Configure_ADC_Sampling_Rate+0x90>)
 80012d0:	8812      	ldrh	r2, [r2, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fe3e 	bl	8000f54 <print_configuration>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200002b1 	.word	0x200002b1
 80012e4:	200002b0 	.word	0x200002b0
 80012e8:	200002b2 	.word	0x200002b2
 80012ec:	200002a8 	.word	0x200002a8
 80012f0:	20000000 	.word	0x20000000
 80012f4:	200002ac 	.word	0x200002ac

080012f8 <RHS2116_ADCFormat_DSPSetting_AuxOutput>:


void RHS2116_ADCFormat_DSPSetting_AuxOutput(SPI_HandleTypeDef *hspi, uint8_t Register,
		uint8_t DSPcutoffFreq, uint8_t DSPenable, uint8_t ABSmode, uint8_t TWOScomp, uint8_t weakMISO,
		uint8_t digout1_HiZ, uint8_t digout1, uint8_t digout2_HiZ, uint8_t digout2, uint8_t digoutOD){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	4608      	mov	r0, r1
 8001302:	4611      	mov	r1, r2
 8001304:	461a      	mov	r2, r3
 8001306:	4603      	mov	r3, r0
 8001308:	70fb      	strb	r3, [r7, #3]
 800130a:	460b      	mov	r3, r1
 800130c:	70bb      	strb	r3, [r7, #2]
 800130e:	4613      	mov	r3, r2
 8001310:	707b      	strb	r3, [r7, #1]

	// Register 1 - Set all auxiliary digital outputs to a high-impedance state. Set DSP high-pass filter to 4.665 Hz.
	// IN EXEMPLE : 0x051A --> 0bxxx 0 0 1 0 1 0 0 0 1 1010
	cmd_selector = WRITE_CMD;
 8001312:	4b31      	ldr	r3, [pc, #196]	@ (80013d8 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe0>)
 8001314:	2280      	movs	r2, #128	@ 0x80
 8001316:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8001318:	4a30      	ldr	r2, [pc, #192]	@ (80013dc <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe4>)
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	7013      	strb	r3, [r2, #0]
	lsb_value = (digoutOD << 12) | (digout2 << 11)    | (digout2_HiZ << 10)
 800131e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001322:	031b      	lsls	r3, r3, #12
 8001324:	b21a      	sxth	r2, r3
 8001326:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800132a:	02db      	lsls	r3, r3, #11
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21a      	sxth	r2, r3
 8001332:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21a      	sxth	r2, r3
			  | (digout1 << 9)   | (digout1_HiZ << 8) | (weakMISO << 7)
 800133e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001342:	025b      	lsls	r3, r3, #9
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21a      	sxth	r2, r3
 800134a:	7f3b      	ldrb	r3, [r7, #28]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21a      	sxth	r2, r3
 8001354:	7e3b      	ldrb	r3, [r7, #24]
 8001356:	01db      	lsls	r3, r3, #7
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b21a      	sxth	r2, r3
			  | (TWOScomp << 6)  | (ABSmode << 5)  | (DSPenable << 4) | DSPcutoffFreq;
 800135e:	7d3b      	ldrb	r3, [r7, #20]
 8001360:	019b      	lsls	r3, r3, #6
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21a      	sxth	r2, r3
 8001368:	7c3b      	ldrb	r3, [r7, #16]
 800136a:	015b      	lsls	r3, r3, #5
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b21a      	sxth	r2, r3
 8001372:	787b      	ldrb	r3, [r7, #1]
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21a      	sxth	r2, r3
 800137c:	78bb      	ldrb	r3, [r7, #2]
 800137e:	b21b      	sxth	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b21b      	sxth	r3, r3
 8001384:	b29a      	uxth	r2, r3
	lsb_value = (digoutOD << 12) | (digout2 << 11)    | (digout2_HiZ << 10)
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe8>)
 8001388:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe0>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	b21a      	sxth	r2, r3
 8001392:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe4>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b21b      	sxth	r3, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xec>)
 80013a0:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe8>)
 80013a4:	881a      	ldrh	r2, [r3, #0]
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xec>)
 80013a8:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xf0>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4a0f      	ldr	r2, [pc, #60]	@ (80013ec <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xf4>)
 80013b0:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xec>)
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f001 f88c 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xf4>)
 80013ba:	f7ff fdc1 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe0>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4a06      	ldr	r2, [pc, #24]	@ (80013dc <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe4>)
 80013c4:	7811      	ldrb	r1, [r2, #0]
 80013c6:	4a06      	ldr	r2, [pc, #24]	@ (80013e0 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe8>)
 80013c8:	8812      	ldrh	r2, [r2, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fdc2 	bl	8000f54 <print_configuration>


}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200002b1 	.word	0x200002b1
 80013dc:	200002b0 	.word	0x200002b0
 80013e0:	200002b2 	.word	0x200002b2
 80013e4:	200002a8 	.word	0x200002a8
 80013e8:	20000000 	.word	0x20000000
 80013ec:	200002ac 	.word	0x200002ac

080013f0 <RHS2116_Impedance_Check_Control>:


void RHS2116_Impedance_Check_Control(SPI_HandleTypeDef *hspi, uint8_t Register,
									uint8_t Zcheck_en, uint8_t Zcheck_scale, uint8_t Zcheck_load,
									uint8_t Zcheck_DAC_power, uint8_t Zcheck_select){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4603      	mov	r3, r0
 8001400:	70fb      	strb	r3, [r7, #3]
 8001402:	460b      	mov	r3, r1
 8001404:	70bb      	strb	r3, [r7, #2]
 8001406:	4613      	mov	r3, r2
 8001408:	707b      	strb	r3, [r7, #1]
	// Register 2 - Power up DAC used for impedance testing, but disable impedance testing for now.
	// IN EXEMPLE : 0x0040 --> 0bxx 000000 x 1 0 00 xx 0
	cmd_selector = WRITE_CMD;
 800140a:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <RHS2116_Impedance_Check_Control+0xa8>)
 800140c:	2280      	movs	r2, #128	@ 0x80
 800140e:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8001410:	4a22      	ldr	r2, [pc, #136]	@ (800149c <RHS2116_Impedance_Check_Control+0xac>)
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	7013      	strb	r3, [r2, #0]
	lsb_value = (Zcheck_select << 8)  | (Zcheck_DAC_power << 6)  | (Zcheck_load << 5)  | (Zcheck_scale << 4) | Zcheck_en;
 8001416:	7e3b      	ldrb	r3, [r7, #24]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b21a      	sxth	r2, r3
 800141c:	7d3b      	ldrb	r3, [r7, #20]
 800141e:	019b      	lsls	r3, r3, #6
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b21a      	sxth	r2, r3
 8001426:	7c3b      	ldrb	r3, [r7, #16]
 8001428:	015b      	lsls	r3, r3, #5
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21a      	sxth	r2, r3
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	b21b      	sxth	r3, r3
 8001436:	4313      	orrs	r3, r2
 8001438:	b21a      	sxth	r2, r3
 800143a:	78bb      	ldrb	r3, [r7, #2]
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21b      	sxth	r3, r3
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <RHS2116_Impedance_Check_Control+0xb0>)
 8001446:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001448:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <RHS2116_Impedance_Check_Control+0xa8>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <RHS2116_Impedance_Check_Control+0xac>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21b      	sxth	r3, r3
 800145a:	b29a      	uxth	r2, r3
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <RHS2116_Impedance_Check_Control+0xb4>)
 800145e:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <RHS2116_Impedance_Check_Control+0xb0>)
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <RHS2116_Impedance_Check_Control+0xb4>)
 8001466:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <RHS2116_Impedance_Check_Control+0xb8>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <RHS2116_Impedance_Check_Control+0xbc>)
 800146e:	490d      	ldr	r1, [pc, #52]	@ (80014a4 <RHS2116_Impedance_Check_Control+0xb4>)
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f001 f82d 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001476:	480d      	ldr	r0, [pc, #52]	@ (80014ac <RHS2116_Impedance_Check_Control+0xbc>)
 8001478:	f7ff fd62 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <RHS2116_Impedance_Check_Control+0xa8>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4a06      	ldr	r2, [pc, #24]	@ (800149c <RHS2116_Impedance_Check_Control+0xac>)
 8001482:	7811      	ldrb	r1, [r2, #0]
 8001484:	4a06      	ldr	r2, [pc, #24]	@ (80014a0 <RHS2116_Impedance_Check_Control+0xb0>)
 8001486:	8812      	ldrh	r2, [r2, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fd63 	bl	8000f54 <print_configuration>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200002b1 	.word	0x200002b1
 800149c:	200002b0 	.word	0x200002b0
 80014a0:	200002b2 	.word	0x200002b2
 80014a4:	200002a8 	.word	0x200002a8
 80014a8:	20000000 	.word	0x20000000
 80014ac:	200002ac 	.word	0x200002ac

080014b0 <RHS2116_Impedence_Check_DAC>:


void RHS2116_Impedence_Check_DAC(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t Zcheck_DAC){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
 80014bc:	4613      	mov	r3, r2
 80014be:	70bb      	strb	r3, [r7, #2]
	// Register 3 - Initialize impedance check DAC to midrange value
	// IN EXEMPLE : 0x0080 --> 0bxxxxxxxx 10000000
	cmd_selector = WRITE_CMD;
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <RHS2116_Impedence_Check_DAC+0x74>)
 80014c2:	2280      	movs	r2, #128	@ 0x80
 80014c4:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 80014c6:	4a18      	ldr	r2, [pc, #96]	@ (8001528 <RHS2116_Impedence_Check_DAC+0x78>)
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	7013      	strb	r3, [r2, #0]
	lsb_value = Zcheck_DAC;
 80014cc:	78bb      	ldrb	r3, [r7, #2]
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <RHS2116_Impedence_Check_DAC+0x7c>)
 80014d2:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <RHS2116_Impedence_Check_DAC+0x74>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	b21a      	sxth	r2, r3
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <RHS2116_Impedence_Check_DAC+0x78>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <RHS2116_Impedence_Check_DAC+0x80>)
 80014ea:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <RHS2116_Impedence_Check_DAC+0x7c>)
 80014ee:	881a      	ldrh	r2, [r3, #0]
 80014f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <RHS2116_Impedence_Check_DAC+0x80>)
 80014f2:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <RHS2116_Impedence_Check_DAC+0x84>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001538 <RHS2116_Impedence_Check_DAC+0x88>)
 80014fa:	490d      	ldr	r1, [pc, #52]	@ (8001530 <RHS2116_Impedence_Check_DAC+0x80>)
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 ffe7 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001502:	480d      	ldr	r0, [pc, #52]	@ (8001538 <RHS2116_Impedence_Check_DAC+0x88>)
 8001504:	f7ff fd1c 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <RHS2116_Impedence_Check_DAC+0x74>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4a06      	ldr	r2, [pc, #24]	@ (8001528 <RHS2116_Impedence_Check_DAC+0x78>)
 800150e:	7811      	ldrb	r1, [r2, #0]
 8001510:	4a06      	ldr	r2, [pc, #24]	@ (800152c <RHS2116_Impedence_Check_DAC+0x7c>)
 8001512:	8812      	ldrh	r2, [r2, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fd1d 	bl	8000f54 <print_configuration>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200002b1 	.word	0x200002b1
 8001528:	200002b0 	.word	0x200002b0
 800152c:	200002b2 	.word	0x200002b2
 8001530:	200002a8 	.word	0x200002a8
 8001534:	20000000 	.word	0x20000000
 8001538:	200002ac 	.word	0x200002ac

0800153c <RHS2116_Amplifier_Bandwidth_Select_Upper>:


void RHS2116_Amplifier_Bandwidth_Select_Upper(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t RH_sel1, uint8_t RH_sel2){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	4608      	mov	r0, r1
 8001546:	4611      	mov	r1, r2
 8001548:	461a      	mov	r2, r3
 800154a:	4603      	mov	r3, r0
 800154c:	70fb      	strb	r3, [r7, #3]
 800154e:	460b      	mov	r3, r1
 8001550:	70bb      	strb	r3, [r7, #2]
 8001552:	4613      	mov	r3, r2
 8001554:	707b      	strb	r3, [r7, #1]
	// Register 4 - Set upper cutoff frequency of AC-coupled high-gain amplifiers to 7.5 kHz.
	// IN EXEMPLE : 0x0016 --> 0bxxxxx 00000 010110

	// Register 5 - Set upper cutoff frequency of AC-coupled high-gain amplifiers to 7.5 kHz.
	// IN EXEMPLE : 0x0017 --> 0bxxxxx 00000 010111
	cmd_selector = WRITE_CMD;
 8001556:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x88>)
 8001558:	2280      	movs	r2, #128	@ 0x80
 800155a:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 800155c:	4a1a      	ldr	r2, [pc, #104]	@ (80015c8 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x8c>)
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	7013      	strb	r3, [r2, #0]
	lsb_value = (RH_sel2 << 6) | RH_sel1;
 8001562:	787b      	ldrb	r3, [r7, #1]
 8001564:	019b      	lsls	r3, r3, #6
 8001566:	b21a      	sxth	r2, r3
 8001568:	78bb      	ldrb	r3, [r7, #2]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21b      	sxth	r3, r3
 8001570:	b29a      	uxth	r2, r3
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <RHS2116_Amplifier_Bandwidth_Select_Upper+0x90>)
 8001574:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001576:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x88>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21a      	sxth	r2, r3
 800157e:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x8c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b21b      	sxth	r3, r3
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x94>)
 800158c:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <RHS2116_Amplifier_Bandwidth_Select_Upper+0x90>)
 8001590:	881a      	ldrh	r2, [r3, #0]
 8001592:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x94>)
 8001594:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x98>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	4a0f      	ldr	r2, [pc, #60]	@ (80015d8 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x9c>)
 800159c:	490c      	ldr	r1, [pc, #48]	@ (80015d0 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x94>)
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 ff96 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80015a4:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x9c>)
 80015a6:	f7ff fccb 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x88>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4a06      	ldr	r2, [pc, #24]	@ (80015c8 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x8c>)
 80015b0:	7811      	ldrb	r1, [r2, #0]
 80015b2:	4a06      	ldr	r2, [pc, #24]	@ (80015cc <RHS2116_Amplifier_Bandwidth_Select_Upper+0x90>)
 80015b4:	8812      	ldrh	r2, [r2, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fccc 	bl	8000f54 <print_configuration>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200002b1 	.word	0x200002b1
 80015c8:	200002b0 	.word	0x200002b0
 80015cc:	200002b2 	.word	0x200002b2
 80015d0:	200002a8 	.word	0x200002a8
 80015d4:	20000000 	.word	0x20000000
 80015d8:	200002ac 	.word	0x200002ac

080015dc <RHS2116_Amplifier_Bandwidth_Select_Lower>:


void RHS2116_Amplifier_Bandwidth_Select_Lower(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t RL_sel1, uint8_t RL_sel2, uint8_t RL_sel3){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	70fb      	strb	r3, [r7, #3]
 80015ee:	460b      	mov	r3, r1
 80015f0:	70bb      	strb	r3, [r7, #2]
 80015f2:	4613      	mov	r3, r2
 80015f4:	707b      	strb	r3, [r7, #1]
	// Register 6 - Set lower cutoff frequency of AC-coupled high-gain amplifiers to 5 Hz
	// IN EXEMPLE : 0x00A8 --> 0bxx 0 000001 0101000
	cmd_selector = WRITE_CMD;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x94>)
 80015f8:	2280      	movs	r2, #128	@ 0x80
 80015fa:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 80015fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001674 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x98>)
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	7013      	strb	r3, [r2, #0]
	lsb_value = (RL_sel3 << 13) | (RL_sel2 << 7) | RL_sel1;
 8001602:	7c3b      	ldrb	r3, [r7, #16]
 8001604:	035b      	lsls	r3, r3, #13
 8001606:	b21a      	sxth	r2, r3
 8001608:	787b      	ldrb	r3, [r7, #1]
 800160a:	01db      	lsls	r3, r3, #7
 800160c:	b21b      	sxth	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b21a      	sxth	r2, r3
 8001612:	78bb      	ldrb	r3, [r7, #2]
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21b      	sxth	r3, r3
 800161a:	b29a      	uxth	r2, r3
 800161c:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x9c>)
 800161e:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x94>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21a      	sxth	r2, r3
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x98>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21b      	sxth	r3, r3
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa0>)
 8001636:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x9c>)
 800163a:	881a      	ldrh	r2, [r3, #0]
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa0>)
 800163e:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa4>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4a0f      	ldr	r2, [pc, #60]	@ (8001684 <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa8>)
 8001646:	490d      	ldr	r1, [pc, #52]	@ (800167c <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa0>)
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 ff41 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 800164e:	480d      	ldr	r0, [pc, #52]	@ (8001684 <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa8>)
 8001650:	f7ff fc76 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x94>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4a06      	ldr	r2, [pc, #24]	@ (8001674 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x98>)
 800165a:	7811      	ldrb	r1, [r2, #0]
 800165c:	4a06      	ldr	r2, [pc, #24]	@ (8001678 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x9c>)
 800165e:	8812      	ldrh	r2, [r2, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fc77 	bl	8000f54 <print_configuration>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200002b1 	.word	0x200002b1
 8001674:	200002b0 	.word	0x200002b0
 8001678:	200002b2 	.word	0x200002b2
 800167c:	200002a8 	.word	0x200002a8
 8001680:	20000000 	.word	0x20000000
 8001684:	200002ac 	.word	0x200002ac

08001688 <RHS2116_Amplifier_Power_Up>:

void  RHS2116_Amplifier_Power_Up(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t AC_amp_power){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
 8001694:	4613      	mov	r3, r2
 8001696:	70bb      	strb	r3, [r7, #2]
	// Register 8 - Power up all AC-coupled high-gain amplifiers.
	// IN EXEMPLE : 0xFFFF
	cmd_selector = WRITE_CMD;
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <RHS2116_Amplifier_Power_Up+0x74>)
 800169a:	2280      	movs	r2, #128	@ 0x80
 800169c:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 800169e:	4a18      	ldr	r2, [pc, #96]	@ (8001700 <RHS2116_Amplifier_Power_Up+0x78>)
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	7013      	strb	r3, [r2, #0]
	lsb_value = AC_amp_power;
 80016a4:	78bb      	ldrb	r3, [r7, #2]
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <RHS2116_Amplifier_Power_Up+0x7c>)
 80016aa:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <RHS2116_Amplifier_Power_Up+0x74>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <RHS2116_Amplifier_Power_Up+0x78>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b21b      	sxth	r3, r3
 80016be:	b29a      	uxth	r2, r3
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <RHS2116_Amplifier_Power_Up+0x80>)
 80016c2:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <RHS2116_Amplifier_Power_Up+0x7c>)
 80016c6:	881a      	ldrh	r2, [r3, #0]
 80016c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <RHS2116_Amplifier_Power_Up+0x80>)
 80016ca:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <RHS2116_Amplifier_Power_Up+0x84>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001710 <RHS2116_Amplifier_Power_Up+0x88>)
 80016d2:	490d      	ldr	r1, [pc, #52]	@ (8001708 <RHS2116_Amplifier_Power_Up+0x80>)
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fefb 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80016da:	480d      	ldr	r0, [pc, #52]	@ (8001710 <RHS2116_Amplifier_Power_Up+0x88>)
 80016dc:	f7ff fc30 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <RHS2116_Amplifier_Power_Up+0x74>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4a06      	ldr	r2, [pc, #24]	@ (8001700 <RHS2116_Amplifier_Power_Up+0x78>)
 80016e6:	7811      	ldrb	r1, [r2, #0]
 80016e8:	4a06      	ldr	r2, [pc, #24]	@ (8001704 <RHS2116_Amplifier_Power_Up+0x7c>)
 80016ea:	8812      	ldrh	r2, [r2, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fc31 	bl	8000f54 <print_configuration>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200002b1 	.word	0x200002b1
 8001700:	200002b0 	.word	0x200002b0
 8001704:	200002b2 	.word	0x200002b2
 8001708:	200002a8 	.word	0x200002a8
 800170c:	20000000 	.word	0x20000000
 8001710:	200002ac 	.word	0x200002ac

08001714 <RHS2116_Fast_Settle>:

void RHS2116_Fast_Settle(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t amp_fast_settle){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
 8001720:	4613      	mov	r3, r2
 8001722:	70bb      	strb	r3, [r7, #2]
	// Register 10 - Turn off fast settle function on all channels. (This command does not take effect until the U flag is asserted since Register 10 is a triggered register.)
	// IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <RHS2116_Fast_Settle+0x80>)
 8001726:	2280      	movs	r2, #128	@ 0x80
 8001728:	701a      	strb	r2, [r3, #0]
	cmd_selector |= (1 << U_FLAG);
 800172a:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <RHS2116_Fast_Settle+0x80>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	f043 0320 	orr.w	r3, r3, #32
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <RHS2116_Fast_Settle+0x80>)
 8001736:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8001738:	4a17      	ldr	r2, [pc, #92]	@ (8001798 <RHS2116_Fast_Settle+0x84>)
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	7013      	strb	r3, [r2, #0]
	lsb_value = amp_fast_settle;
 800173e:	78bb      	ldrb	r3, [r7, #2]
 8001740:	b29a      	uxth	r2, r3
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <RHS2116_Fast_Settle+0x88>)
 8001744:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001746:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <RHS2116_Fast_Settle+0x80>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <RHS2116_Fast_Settle+0x84>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b21b      	sxth	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b21b      	sxth	r3, r3
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <RHS2116_Fast_Settle+0x8c>)
 800175c:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 800175e:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <RHS2116_Fast_Settle+0x88>)
 8001760:	881a      	ldrh	r2, [r3, #0]
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <RHS2116_Fast_Settle+0x8c>)
 8001764:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001766:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <RHS2116_Fast_Settle+0x90>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4a0f      	ldr	r2, [pc, #60]	@ (80017a8 <RHS2116_Fast_Settle+0x94>)
 800176c:	490c      	ldr	r1, [pc, #48]	@ (80017a0 <RHS2116_Fast_Settle+0x8c>)
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 feae 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001774:	480c      	ldr	r0, [pc, #48]	@ (80017a8 <RHS2116_Fast_Settle+0x94>)
 8001776:	f7ff fbe3 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <RHS2116_Fast_Settle+0x80>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	4a06      	ldr	r2, [pc, #24]	@ (8001798 <RHS2116_Fast_Settle+0x84>)
 8001780:	7811      	ldrb	r1, [r2, #0]
 8001782:	4a06      	ldr	r2, [pc, #24]	@ (800179c <RHS2116_Fast_Settle+0x88>)
 8001784:	8812      	ldrh	r2, [r2, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fbe4 	bl	8000f54 <print_configuration>

}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200002b1 	.word	0x200002b1
 8001798:	200002b0 	.word	0x200002b0
 800179c:	200002b2 	.word	0x200002b2
 80017a0:	200002a8 	.word	0x200002a8
 80017a4:	20000000 	.word	0x20000000
 80017a8:	200002ac 	.word	0x200002ac

080017ac <RHS2116_Amplifier_Lower_Cutoff>:


void RHS2116_Amplifier_Lower_Cutoff(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t amp_fL_select){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
 80017b8:	4613      	mov	r3, r2
 80017ba:	70bb      	strb	r3, [r7, #2]
	// Register 12 - Set all amplifiers to the lower cutoff frequency set by Register 6. Bits in this register can be set to zero during and immediately following stimulation
	// pulses to rapidly recover from stimulation artifacts. (This command does not take effect until the U flag is asserted since Register 10 is a triggered register.)
	// IN EXEMPLE : 0xFFFF --> 0xFFFF
	cmd_selector = WRITE_CMD;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <RHS2116_Amplifier_Lower_Cutoff+0x80>)
 80017be:	2280      	movs	r2, #128	@ 0x80
 80017c0:	701a      	strb	r2, [r3, #0]
	cmd_selector |= (1 << U_FLAG);
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <RHS2116_Amplifier_Lower_Cutoff+0x80>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	f043 0320 	orr.w	r3, r3, #32
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4b17      	ldr	r3, [pc, #92]	@ (800182c <RHS2116_Amplifier_Lower_Cutoff+0x80>)
 80017ce:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 80017d0:	4a17      	ldr	r2, [pc, #92]	@ (8001830 <RHS2116_Amplifier_Lower_Cutoff+0x84>)
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	7013      	strb	r3, [r2, #0]
	lsb_value = amp_fL_select;
 80017d6:	78bb      	ldrb	r3, [r7, #2]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <RHS2116_Amplifier_Lower_Cutoff+0x88>)
 80017dc:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80017de:	4b13      	ldr	r3, [pc, #76]	@ (800182c <RHS2116_Amplifier_Lower_Cutoff+0x80>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <RHS2116_Amplifier_Lower_Cutoff+0x84>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <RHS2116_Amplifier_Lower_Cutoff+0x8c>)
 80017f4:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <RHS2116_Amplifier_Lower_Cutoff+0x88>)
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <RHS2116_Amplifier_Lower_Cutoff+0x8c>)
 80017fc:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <RHS2116_Amplifier_Lower_Cutoff+0x90>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	4a0f      	ldr	r2, [pc, #60]	@ (8001840 <RHS2116_Amplifier_Lower_Cutoff+0x94>)
 8001804:	490c      	ldr	r1, [pc, #48]	@ (8001838 <RHS2116_Amplifier_Lower_Cutoff+0x8c>)
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fe62 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 800180c:	480c      	ldr	r0, [pc, #48]	@ (8001840 <RHS2116_Amplifier_Lower_Cutoff+0x94>)
 800180e:	f7ff fb97 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <RHS2116_Amplifier_Lower_Cutoff+0x80>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4a06      	ldr	r2, [pc, #24]	@ (8001830 <RHS2116_Amplifier_Lower_Cutoff+0x84>)
 8001818:	7811      	ldrb	r1, [r2, #0]
 800181a:	4a06      	ldr	r2, [pc, #24]	@ (8001834 <RHS2116_Amplifier_Lower_Cutoff+0x88>)
 800181c:	8812      	ldrh	r2, [r2, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fb98 	bl	8000f54 <print_configuration>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200002b1 	.word	0x200002b1
 8001830:	200002b0 	.word	0x200002b0
 8001834:	200002b2 	.word	0x200002b2
 8001838:	200002a8 	.word	0x200002a8
 800183c:	20000000 	.word	0x20000000
 8001840:	200002ac 	.word	0x200002ac

08001844 <INIT_RHS>:

void INIT_RHS(SPI_HandleTypeDef *hspi){
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b0a8      	sub	sp, #160	@ 0xa0
 8001848:	af08      	add	r7, sp, #32
 800184a:	6078      	str	r0, [r7, #4]

	//SET CS_PIN
	RHS_SPI_CS_Port->BSRR = RHS_SPI_CS_Pin;
 800184c:	4bc3      	ldr	r3, [pc, #780]	@ (8001b5c <INIT_RHS+0x318>)
 800184e:	2204      	movs	r2, #4
 8001850:	619a      	str	r2, [r3, #24]



	RHS2116_Read_Register(hspi, REGISTER_255);
 8001852:	21ff      	movs	r1, #255	@ 0xff
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fbf7 	bl	8001048 <RHS2116_Read_Register>
	RHS2116_Disable_Stim(hspi, REGISTER_32);
 800185a:	2120      	movs	r1, #32
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fc75 	bl	800114c <RHS2116_Disable_Stim>
	RHS2116_Disable_Stim(hspi, REGISTER_33);
 8001862:	2121      	movs	r1, #33	@ 0x21
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fc71 	bl	800114c <RHS2116_Disable_Stim>
	RHS2116_PowerUp_DCCouple_LowGain_Amp(hspi, REGISTER_38);
 800186a:	2126      	movs	r1, #38	@ 0x26
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fcaf 	bl	80011d0 <RHS2116_PowerUp_DCCouple_LowGain_Amp>
	RHS2116_Clear_Command(hspi);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fc2a 	bl	80010cc <RHS2116_Clear_Command>
	RHS2116_Configure_ADC_Sampling_Rate(hspi, REGISTER_0, 32, 40);
 8001878:	2328      	movs	r3, #40	@ 0x28
 800187a:	2220      	movs	r2, #32
 800187c:	2100      	movs	r1, #0
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fcea 	bl	8001258 <RHS2116_Configure_ADC_Sampling_Rate>

	// Register 1 - Set all auxiliary digital outputs to a high-impedance state. Set DSP high-pass filter to 4.665 Hz.
	// IN EXEMPLE : 0x051A --> 0bxxx 0 0 1 0 1 0 0 0 1 1010
	uint8_t DSPcutoffFreq = 0b1010;
 8001884:	230a      	movs	r3, #10
 8001886:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	uint8_t DSPenable = 0b1;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
	uint8_t ABSmode = 0b0;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
	uint8_t TWOScomp = 0b0;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
	uint8_t weakMISO = 0b0;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint8_t digout1_HiZ = 0b1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
	uint8_t digout1 = 0b0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	uint8_t digout2_HiZ = 0b1;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	uint8_t digout2 = 0b0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	uint8_t digoutOD = 0b0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
	RHS2116_ADCFormat_DSPSetting_AuxOutput(hspi, REGISTER_1,
 80018c0:	f897 107a 	ldrb.w	r1, [r7, #122]	@ 0x7a
 80018c4:	f897 207b 	ldrb.w	r2, [r7, #123]	@ 0x7b
 80018c8:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80018cc:	9307      	str	r3, [sp, #28]
 80018ce:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80018d2:	9306      	str	r3, [sp, #24]
 80018d4:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80018d8:	9305      	str	r3, [sp, #20]
 80018da:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80018de:	9304      	str	r3, [sp, #16]
 80018e0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80018e4:	9303      	str	r3, [sp, #12]
 80018e6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	460b      	mov	r3, r1
 80018fa:	2101      	movs	r1, #1
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fcfb 	bl	80012f8 <RHS2116_ADCFormat_DSPSetting_AuxOutput>
											DSPcutoffFreq, DSPenable,ABSmode, TWOScomp,weakMISO,
											digout1_HiZ, digout1, digout2_HiZ, digout2, digoutOD);
	// Register 2 - Power up DAC used for impedance testing, but disable impedance testing for now.
	// IN EXEMPLE : 0x0040 --> 0bxx 000000 x 1 0 00 xx 0
	uint8_t Zcheck_en = 0b0;
 8001902:	2300      	movs	r3, #0
 8001904:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
	uint8_t Zcheck_scale = 0b00;
 8001908:	2300      	movs	r3, #0
 800190a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
	uint8_t Zcheck_load = 0b0;
 800190e:	2300      	movs	r3, #0
 8001910:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t Zcheck_DAC_power = 0b1;
 8001914:	2301      	movs	r3, #1
 8001916:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	uint8_t Zcheck_select = 0b000000;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
	RHS2116_Impedance_Check_Control(hspi, REGISTER_2, Zcheck_en, Zcheck_scale, Zcheck_load, Zcheck_DAC_power, Zcheck_select);
 8001920:	f897 1070 	ldrb.w	r1, [r7, #112]	@ 0x70
 8001924:	f897 2071 	ldrb.w	r2, [r7, #113]	@ 0x71
 8001928:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	460b      	mov	r3, r1
 800193c:	2102      	movs	r1, #2
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fd56 	bl	80013f0 <RHS2116_Impedance_Check_Control>

	// Register 3 - Initialize impedance check DAC to midrange value
	// IN EXEMPLE : 0x0080 --> 0bxxxxxxxx 10000000
	uint8_t Zcheck_DAC = 0b10000000;
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
	RHS2116_Impedence_Check_DAC(hspi, REGISTER_3, Zcheck_DAC);
 800194a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800194e:	461a      	mov	r2, r3
 8001950:	2103      	movs	r1, #3
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fdac 	bl	80014b0 <RHS2116_Impedence_Check_DAC>

	// Register 4 - Set upper cutoff frequency of AC-coupled high-gain amplifiers to 7.5 kHz.
	// IN EXEMPLE : 0x0016 --> 0bxxxxx 00000 010110
	uint8_t RH1_sel1  = 0b010110;
 8001958:	2316      	movs	r3, #22
 800195a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	uint8_t RH1_sel2  = 0b00000;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
	RHS2116_Amplifier_Bandwidth_Select_Upper(hspi, REGISTER_4, RH1_sel1, RH1_sel2);
 8001964:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001968:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800196c:	2104      	movs	r1, #4
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fde4 	bl	800153c <RHS2116_Amplifier_Bandwidth_Select_Upper>

	// Register 5 - Set upper cutoff frequency of AC-coupled high-gain amplifiers to 7.5 kHz.
	// IN EXEMPLE : 0x0017 --> 0bxxxxx 00000 010111
	uint8_t RH2_sel1  = 0b010111;
 8001974:	2317      	movs	r3, #23
 8001976:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
	uint8_t RH2_sel2  = 0b00000;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
	RHS2116_Amplifier_Bandwidth_Select_Upper(hspi, REGISTER_5, RH2_sel1, RH2_sel2);
 8001980:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001984:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 8001988:	2105      	movs	r1, #5
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fdd6 	bl	800153c <RHS2116_Amplifier_Bandwidth_Select_Upper>

	// Register 6 - Set lower cutoff frequency of AC-coupled high-gain amplifiers to 5 Hz
	// IN EXEMPLE : 0x00A8 --> 0bxx 0 000001 0101000
	uint8_t RL_Asel1  = 0b0101000;
 8001990:	2328      	movs	r3, #40	@ 0x28
 8001992:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint8_t RL_Asel2  = 0b000001;
 8001996:	2301      	movs	r3, #1
 8001998:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	uint8_t RL_Asel3  = 0b0;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	RHS2116_Amplifier_Bandwidth_Select_Lower(hspi, REGISTER_6, RL_Asel1, RL_Asel2, RL_Asel3);
 80019a2:	f897 1066 	ldrb.w	r1, [r7, #102]	@ 0x66
 80019a6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80019aa:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	460b      	mov	r3, r1
 80019b2:	2106      	movs	r1, #6
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fe11 	bl	80015dc <RHS2116_Amplifier_Bandwidth_Select_Lower>

	// Register 7 - Set alternate lower cutoff frequency (to be used for stimulation artifact recovery) to 1000 Hz
	// IN EXEMPLE : 0x000A --> 0bxx 0 000000 0001010
	uint8_t RL_Bsel1  = 0b0001010;
 80019ba:	230a      	movs	r3, #10
 80019bc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	uint8_t RL_Bsel2  = 0b000000;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	uint8_t RL_Bsel3  = 0b0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	RHS2116_Amplifier_Bandwidth_Select_Lower(hspi, REGISTER_7, RL_Bsel1, RL_Bsel2, RL_Bsel3);
 80019cc:	f897 1063 	ldrb.w	r1, [r7, #99]	@ 0x63
 80019d0:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80019d4:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	460b      	mov	r3, r1
 80019dc:	2107      	movs	r1, #7
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fdfc 	bl	80015dc <RHS2116_Amplifier_Bandwidth_Select_Lower>

	// Register 8 - Power up all AC-coupled high-gain amplifiers.
	// IN EXEMPLE : 0xFFFF
	uint16_t AC_amp_power  = 0b1111111111111111;
 80019e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019e8:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
	RHS2116_Amplifier_Power_Up(hspi, REGISTER_8, AC_amp_power);
 80019ec:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	2108      	movs	r1, #8
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fe46 	bl	8001688 <RHS2116_Amplifier_Power_Up>

	// Register 10 - Turn off fast settle function on all channels. (This command does not take effect until the U flag is asserted since Register 10 is a triggered register.)
	// IN EXEMPLE : 0x0000
	uint16_t amp_fast_settle  = 0b0000000000000000;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	RHS2116_Fast_Settle(hspi, REGISTER_10, amp_fast_settle);
 8001a02:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	210a      	movs	r1, #10
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fe81 	bl	8001714 <RHS2116_Fast_Settle>

	// Register 12 - Set all amplifiers to the lower cutoff frequency set by Register 6. Bits in this register can be set to zero during and immediately following stimulation
	// pulses to rapidly recover from stimulation artifacts. (This command does not take effect until the U flag is asserted since Register 10 is a triggered register.)
	// IN EXEMPLE : 0xFFFF --> 0xFFFF
	uint16_t amp_fL_select  = 0b1111111111111111;
 8001a12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a16:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
	RHS2116_Amplifier_Lower_Cutoff(hspi, REGISTER_12, amp_fL_select);
 8001a1a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	210c      	movs	r1, #12
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fec1 	bl	80017ac <RHS2116_Amplifier_Lower_Cutoff>


	// Register 34 - Set up a stimulation step size of 1 µA, giving us a stimulation range of ±255 µA on each channel.
	//IN EXEMPLE : 0x00E2 --> Obx 00 000001 1100010
	cmd_selector = WRITE_CMD;
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	@ (8001b60 <INIT_RHS+0x31c>)
 8001a2c:	2280      	movs	r2, #128	@ 0x80
 8001a2e:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_34;
 8001a30:	4b4c      	ldr	r3, [pc, #304]	@ (8001b64 <INIT_RHS+0x320>)
 8001a32:	2222      	movs	r2, #34	@ 0x22
 8001a34:	701a      	strb	r2, [r3, #0]
	uint8_t step_sel1 = 0b1100010;
 8001a36:	2362      	movs	r3, #98	@ 0x62
 8001a38:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	uint8_t step_sel2 = 0b000001;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	uint8_t step_sel3 = 0b00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	lsb_value = (step_sel3 << 13) | (step_sel2 << 7) | (step_sel1);
 8001a48:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001a4c:	035b      	lsls	r3, r3, #13
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001a54:	01db      	lsls	r3, r3, #7
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	4b3f      	ldr	r3, [pc, #252]	@ (8001b68 <INIT_RHS+0x324>)
 8001a6a:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b60 <INIT_RHS+0x31c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	4b3b      	ldr	r3, [pc, #236]	@ (8001b64 <INIT_RHS+0x320>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b3a      	ldr	r3, [pc, #232]	@ (8001b6c <INIT_RHS+0x328>)
 8001a82:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8001a84:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <INIT_RHS+0x324>)
 8001a86:	881a      	ldrh	r2, [r3, #0]
 8001a88:	4b38      	ldr	r3, [pc, #224]	@ (8001b6c <INIT_RHS+0x328>)
 8001a8a:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001a8c:	4b38      	ldr	r3, [pc, #224]	@ (8001b70 <INIT_RHS+0x32c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4a38      	ldr	r2, [pc, #224]	@ (8001b74 <INIT_RHS+0x330>)
 8001a92:	4936      	ldr	r1, [pc, #216]	@ (8001b6c <INIT_RHS+0x328>)
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fd1b 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001a9a:	4836      	ldr	r0, [pc, #216]	@ (8001b74 <INIT_RHS+0x330>)
 8001a9c:	f7ff fa50 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b60 <INIT_RHS+0x31c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8001b64 <INIT_RHS+0x320>)
 8001aa6:	7811      	ldrb	r1, [r2, #0]
 8001aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8001b68 <INIT_RHS+0x324>)
 8001aaa:	8812      	ldrh	r2, [r2, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fa51 	bl	8000f54 <print_configuration>

	// Register 35 - Set stimulation bias voltages appropriate for a 1 µA step size.
	//IN EXEMPLE : 0x00AA --> Obxxxxxxxx 1010 1010
	cmd_selector = WRITE_CMD;
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b60 <INIT_RHS+0x31c>)
 8001ab4:	2280      	movs	r2, #128	@ 0x80
 8001ab6:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_35;
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <INIT_RHS+0x320>)
 8001aba:	2223      	movs	r2, #35	@ 0x23
 8001abc:	701a      	strb	r2, [r3, #0]
	uint8_t stim_nbias = 0b1010;
 8001abe:	230a      	movs	r3, #10
 8001ac0:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
	uint8_t stim_Pbias = 0b1010;
 8001ac4:	230a      	movs	r3, #10
 8001ac6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	lsb_value = (stim_Pbias << 4) | (stim_nbias);
 8001aca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	b21a      	sxth	r2, r3
 8001ad2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <INIT_RHS+0x324>)
 8001ae0:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b60 <INIT_RHS+0x31c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <INIT_RHS+0x320>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <INIT_RHS+0x328>)
 8001af8:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8001afa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <INIT_RHS+0x324>)
 8001afc:	881a      	ldrh	r2, [r3, #0]
 8001afe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <INIT_RHS+0x328>)
 8001b00:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001b02:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <INIT_RHS+0x32c>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4a1b      	ldr	r2, [pc, #108]	@ (8001b74 <INIT_RHS+0x330>)
 8001b08:	4918      	ldr	r1, [pc, #96]	@ (8001b6c <INIT_RHS+0x328>)
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fce0 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001b10:	4818      	ldr	r0, [pc, #96]	@ (8001b74 <INIT_RHS+0x330>)
 8001b12:	f7ff fa15 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <INIT_RHS+0x31c>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <INIT_RHS+0x320>)
 8001b1c:	7811      	ldrb	r1, [r2, #0]
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <INIT_RHS+0x324>)
 8001b20:	8812      	ldrh	r2, [r2, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fa16 	bl	8000f54 <print_configuration>

	// Register 36 - Set stimulation bias voltages appropriate for a 1 µA step size.
	//IN EXEMPLE : 0x0080 --> Obxxxxxxxx 10000000
	cmd_selector = WRITE_CMD;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <INIT_RHS+0x31c>)
 8001b2a:	2280      	movs	r2, #128	@ 0x80
 8001b2c:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_36;
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <INIT_RHS+0x320>)
 8001b30:	2224      	movs	r2, #36	@ 0x24
 8001b32:	701a      	strb	r2, [r3, #0]
	uint8_t charge_recovery_DAC = 0b10000000;
 8001b34:	2380      	movs	r3, #128	@ 0x80
 8001b36:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	lsb_value = charge_recovery_DAC;
 8001b3a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <INIT_RHS+0x324>)
 8001b42:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <INIT_RHS+0x31c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <INIT_RHS+0x320>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	e00e      	b.n	8001b78 <INIT_RHS+0x334>
 8001b5a:	bf00      	nop
 8001b5c:	40020c00 	.word	0x40020c00
 8001b60:	200002b1 	.word	0x200002b1
 8001b64:	200002b0 	.word	0x200002b0
 8001b68:	200002b2 	.word	0x200002b2
 8001b6c:	200002a8 	.word	0x200002a8
 8001b70:	20000000 	.word	0x20000000
 8001b74:	200002ac 	.word	0x200002ac
 8001b78:	4b9e      	ldr	r3, [pc, #632]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001b7a:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8001b7c:	4b9e      	ldr	r3, [pc, #632]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	4b9c      	ldr	r3, [pc, #624]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001b82:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001b84:	4b9d      	ldr	r3, [pc, #628]	@ (8001dfc <INIT_RHS+0x5b8>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4a9d      	ldr	r2, [pc, #628]	@ (8001e00 <INIT_RHS+0x5bc>)
 8001b8a:	499a      	ldr	r1, [pc, #616]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fc9f 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001b92:	489b      	ldr	r0, [pc, #620]	@ (8001e00 <INIT_RHS+0x5bc>)
 8001b94:	f7ff f9d4 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001b98:	4b9a      	ldr	r3, [pc, #616]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4a9a      	ldr	r2, [pc, #616]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001b9e:	7811      	ldrb	r1, [r2, #0]
 8001ba0:	4a95      	ldr	r2, [pc, #596]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001ba2:	8812      	ldrh	r2, [r2, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f9d5 	bl	8000f54 <print_configuration>

	// Register 37 - Set charge recovery current limit to 1 nA.
	//IN EXEMPLE : 0x4F00 --> Obx 10 011110 0000000
	cmd_selector = WRITE_CMD;
 8001baa:	4b96      	ldr	r3, [pc, #600]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001bac:	2280      	movs	r2, #128	@ 0x80
 8001bae:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_37;
 8001bb0:	4b95      	ldr	r3, [pc, #596]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001bb2:	2225      	movs	r2, #37	@ 0x25
 8001bb4:	701a      	strb	r2, [r3, #0]
	uint8_t Imax_sel1 = 0b0000000;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	uint8_t Imax_sel2 = 0b011110;
 8001bbc:	231e      	movs	r3, #30
 8001bbe:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	uint8_t Imax_sel3 = 0b10;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	lsb_value = (Imax_sel3 << 13) | (Imax_sel2 << 7) | (Imax_sel1);
 8001bc8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001bcc:	035b      	lsls	r3, r3, #13
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001bd4:	01db      	lsls	r3, r3, #7
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b21a      	sxth	r2, r3
 8001bdc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	4313      	orrs	r3, r2
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	4b83      	ldr	r3, [pc, #524]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001bea:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001bec:	4b85      	ldr	r3, [pc, #532]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	4b84      	ldr	r3, [pc, #528]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b7c      	ldr	r3, [pc, #496]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001c02:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8001c04:	4b7c      	ldr	r3, [pc, #496]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001c06:	881a      	ldrh	r2, [r3, #0]
 8001c08:	4b7a      	ldr	r3, [pc, #488]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001c0a:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001c0c:	4b7b      	ldr	r3, [pc, #492]	@ (8001dfc <INIT_RHS+0x5b8>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4a7b      	ldr	r2, [pc, #492]	@ (8001e00 <INIT_RHS+0x5bc>)
 8001c12:	4978      	ldr	r1, [pc, #480]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fc5b 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001c1a:	4879      	ldr	r0, [pc, #484]	@ (8001e00 <INIT_RHS+0x5bc>)
 8001c1c:	f7ff f990 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001c20:	4b78      	ldr	r3, [pc, #480]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4a78      	ldr	r2, [pc, #480]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001c26:	7811      	ldrb	r1, [r2, #0]
 8001c28:	4a73      	ldr	r2, [pc, #460]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001c2a:	8812      	ldrh	r2, [r2, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f991 	bl	8000f54 <print_configuration>

	// Register 42 - Turn all stimulators off. (This command does not take effect until the U flag is asserted since Register 42 is a triggered register.)
	//IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 8001c32:	4b74      	ldr	r3, [pc, #464]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001c34:	2280      	movs	r2, #128	@ 0x80
 8001c36:	701a      	strb	r2, [r3, #0]
	cmd_selector |= (1 << U_FLAG);
 8001c38:	4b72      	ldr	r3, [pc, #456]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	f043 0320 	orr.w	r3, r3, #32
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4b70      	ldr	r3, [pc, #448]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001c44:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_42;
 8001c46:	4b70      	ldr	r3, [pc, #448]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001c48:	222a      	movs	r2, #42	@ 0x2a
 8001c4a:	701a      	strb	r2, [r3, #0]
	uint16_t stim_on = 0x0000;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	lsb_value = stim_on;
 8001c52:	4a69      	ldr	r2, [pc, #420]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001c54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c58:	8013      	strh	r3, [r2, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	4b69      	ldr	r3, [pc, #420]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b61      	ldr	r3, [pc, #388]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001c70:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8001c72:	4b61      	ldr	r3, [pc, #388]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001c74:	881a      	ldrh	r2, [r3, #0]
 8001c76:	4b5f      	ldr	r3, [pc, #380]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001c78:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001c7a:	4b60      	ldr	r3, [pc, #384]	@ (8001dfc <INIT_RHS+0x5b8>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4a60      	ldr	r2, [pc, #384]	@ (8001e00 <INIT_RHS+0x5bc>)
 8001c80:	495c      	ldr	r1, [pc, #368]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fc24 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001c88:	485d      	ldr	r0, [pc, #372]	@ (8001e00 <INIT_RHS+0x5bc>)
 8001c8a:	f7ff f959 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	4a5d      	ldr	r2, [pc, #372]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001c94:	7811      	ldrb	r1, [r2, #0]
 8001c96:	4a58      	ldr	r2, [pc, #352]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001c98:	8812      	ldrh	r2, [r2, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f95a 	bl	8000f54 <print_configuration>

	// Register 44 - Set all stimulators to negative polarity. (This command does not take effect until the U flag is asserted since Register 44 is a triggered register.)
	//IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 8001ca0:	4b58      	ldr	r3, [pc, #352]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001ca2:	2280      	movs	r2, #128	@ 0x80
 8001ca4:	701a      	strb	r2, [r3, #0]
	cmd_selector |= (1 << U_FLAG);
 8001ca6:	4b57      	ldr	r3, [pc, #348]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	f043 0320 	orr.w	r3, r3, #32
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	4b54      	ldr	r3, [pc, #336]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001cb2:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_44;
 8001cb4:	4b54      	ldr	r3, [pc, #336]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001cb6:	222c      	movs	r2, #44	@ 0x2c
 8001cb8:	701a      	strb	r2, [r3, #0]
	uint16_t stim_pol = 0x0000;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	lsb_value = stim_pol;
 8001cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001cc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001cc6:	8013      	strh	r3, [r2, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001cc8:	4b4e      	ldr	r3, [pc, #312]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	4b45      	ldr	r3, [pc, #276]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001cde:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8001ce0:	4b45      	ldr	r3, [pc, #276]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001ce2:	881a      	ldrh	r2, [r3, #0]
 8001ce4:	4b43      	ldr	r3, [pc, #268]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001ce6:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001ce8:	4b44      	ldr	r3, [pc, #272]	@ (8001dfc <INIT_RHS+0x5b8>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4a44      	ldr	r2, [pc, #272]	@ (8001e00 <INIT_RHS+0x5bc>)
 8001cee:	4941      	ldr	r1, [pc, #260]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fbed 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001cf6:	4842      	ldr	r0, [pc, #264]	@ (8001e00 <INIT_RHS+0x5bc>)
 8001cf8:	f7ff f922 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001cfc:	4b41      	ldr	r3, [pc, #260]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4a41      	ldr	r2, [pc, #260]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001d02:	7811      	ldrb	r1, [r2, #0]
 8001d04:	4a3c      	ldr	r2, [pc, #240]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001d06:	8812      	ldrh	r2, [r2, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff f923 	bl	8000f54 <print_configuration>

	// Register 46 - Open all charge recovery switches. (This command does not take effect until the U flag is asserted since Register 46 is a triggered register.)
	//IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001d10:	2280      	movs	r2, #128	@ 0x80
 8001d12:	701a      	strb	r2, [r3, #0]
	cmd_selector |= (1 << U_FLAG);
 8001d14:	4b3b      	ldr	r3, [pc, #236]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	f043 0320 	orr.w	r3, r3, #32
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b39      	ldr	r3, [pc, #228]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001d20:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_46;
 8001d22:	4b39      	ldr	r3, [pc, #228]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001d24:	222e      	movs	r2, #46	@ 0x2e
 8001d26:	701a      	strb	r2, [r3, #0]
	uint16_t charge_recovery_switch = 0x0000;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	lsb_value = charge_recovery_switch;
 8001d2e:	4a32      	ldr	r2, [pc, #200]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001d30:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001d34:	8013      	strh	r3, [r2, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001d36:	4b33      	ldr	r3, [pc, #204]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	4b32      	ldr	r3, [pc, #200]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001d4c:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001d50:	881a      	ldrh	r2, [r3, #0]
 8001d52:	4b28      	ldr	r3, [pc, #160]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001d54:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001d56:	4b29      	ldr	r3, [pc, #164]	@ (8001dfc <INIT_RHS+0x5b8>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	4a29      	ldr	r2, [pc, #164]	@ (8001e00 <INIT_RHS+0x5bc>)
 8001d5c:	4925      	ldr	r1, [pc, #148]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fbb6 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001d64:	4826      	ldr	r0, [pc, #152]	@ (8001e00 <INIT_RHS+0x5bc>)
 8001d66:	f7ff f8eb 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001d6a:	4b26      	ldr	r3, [pc, #152]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	4a26      	ldr	r2, [pc, #152]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001d70:	7811      	ldrb	r1, [r2, #0]
 8001d72:	4a21      	ldr	r2, [pc, #132]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001d74:	8812      	ldrh	r2, [r2, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f8ec 	bl	8000f54 <print_configuration>

	// Register 48 - Disable all current-limited charge recovery circuits. (This command does not take effect until the U flag is asserted since Register 48 is a triggered register.)
	//IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 8001d7c:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001d7e:	2280      	movs	r2, #128	@ 0x80
 8001d80:	701a      	strb	r2, [r3, #0]
	cmd_selector |= (1 << U_FLAG);
 8001d82:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	f043 0320 	orr.w	r3, r3, #32
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001d8e:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_48;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001d92:	2230      	movs	r2, #48	@ 0x30
 8001d94:	701a      	strb	r2, [r3, #0]
	uint16_t CL_charge_recovery_enable = 0x0000;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	lsb_value = CL_charge_recovery_enable;
 8001d9c:	4a16      	ldr	r2, [pc, #88]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001d9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001da2:	8013      	strh	r3, [r2, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001da4:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	4313      	orrs	r3, r2
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001dba:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001dbe:	881a      	ldrh	r2, [r3, #0]
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001dc2:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <INIT_RHS+0x5b8>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e00 <INIT_RHS+0x5bc>)
 8001dca:	490a      	ldr	r1, [pc, #40]	@ (8001df4 <INIT_RHS+0x5b0>)
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fb7f 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001dd2:	480b      	ldr	r0, [pc, #44]	@ (8001e00 <INIT_RHS+0x5bc>)
 8001dd4:	f7ff f8b4 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <INIT_RHS+0x5c0>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <INIT_RHS+0x5c4>)
 8001dde:	7811      	ldrb	r1, [r2, #0]
 8001de0:	4a05      	ldr	r2, [pc, #20]	@ (8001df8 <INIT_RHS+0x5b4>)
 8001de2:	8812      	ldrh	r2, [r2, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f8b5 	bl	8000f54 <print_configuration>

	// Write to registers 64-79, setting the negative stimulation current magnitudes to zero and the current
	// trims to the center point. (These commands do not take effect until the U flag is asserted since Registers 64-79 are triggered registers.)
	// Register 64
	//IN EXEMPLE : 0x8000 --> 0b1000000000000000
	uint16_t register_addresses[] = {
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <INIT_RHS+0x5c8>)
 8001dec:	f107 0408 	add.w	r4, r7, #8
 8001df0:	461d      	mov	r5, r3
 8001df2:	e00d      	b.n	8001e10 <INIT_RHS+0x5cc>
 8001df4:	200002a8 	.word	0x200002a8
 8001df8:	200002b2 	.word	0x200002b2
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	200002ac 	.word	0x200002ac
 8001e04:	200002b1 	.word	0x200002b1
 8001e08:	200002b0 	.word	0x200002b0
 8001e0c:	0801e880 	.word	0x0801e880
 8001e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		REGISTER_102, REGISTER_103, REGISTER_104, REGISTER_105, REGISTER_106, REGISTER_107,
		REGISTER_108, REGISTER_109, REGISTER_110, REGISTER_111
	};

	// Define the common values for negative current trim and magnitude
	uint8_t negative_current_trim = 0b10000000;
 8001e24:	2380      	movs	r3, #128	@ 0x80
 8001e26:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	uint8_t negative_current_magnitude = 0b00000000;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

	for (int i = 0; i < sizeof(register_addresses) / sizeof(register_addresses[0]); i++) {
 8001e30:	2300      	movs	r3, #0
 8001e32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e34:	e03d      	b.n	8001eb2 <INIT_RHS+0x66e>
	    reg_address = register_addresses[i];
 8001e36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	3380      	adds	r3, #128	@ 0x80
 8001e3c:	443b      	add	r3, r7
 8001e3e:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b97      	ldr	r3, [pc, #604]	@ (80020a4 <INIT_RHS+0x860>)
 8001e46:	701a      	strb	r2, [r3, #0]
	    cmd_selector = WRITE_CMD | (1 << U_FLAG);
 8001e48:	4b97      	ldr	r3, [pc, #604]	@ (80020a8 <INIT_RHS+0x864>)
 8001e4a:	22a0      	movs	r2, #160	@ 0xa0
 8001e4c:	701a      	strb	r2, [r3, #0]
	    lsb_value = (negative_current_trim << 8) | negative_current_magnitude;
 8001e4e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	4b92      	ldr	r3, [pc, #584]	@ (80020ac <INIT_RHS+0x868>)
 8001e64:	801a      	strh	r2, [r3, #0]
	    tx_vector[0] = (cmd_selector << 8) | reg_address;
 8001e66:	4b90      	ldr	r3, [pc, #576]	@ (80020a8 <INIT_RHS+0x864>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	4b8d      	ldr	r3, [pc, #564]	@ (80020a4 <INIT_RHS+0x860>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	4313      	orrs	r3, r2
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80020b0 <INIT_RHS+0x86c>)
 8001e7c:	801a      	strh	r2, [r3, #0]
	    tx_vector[1] = lsb_value;
 8001e7e:	4b8b      	ldr	r3, [pc, #556]	@ (80020ac <INIT_RHS+0x868>)
 8001e80:	881a      	ldrh	r2, [r3, #0]
 8001e82:	4b8b      	ldr	r3, [pc, #556]	@ (80020b0 <INIT_RHS+0x86c>)
 8001e84:	805a      	strh	r2, [r3, #2]
	    SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001e86:	4b8b      	ldr	r3, [pc, #556]	@ (80020b4 <INIT_RHS+0x870>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	4a8b      	ldr	r2, [pc, #556]	@ (80020b8 <INIT_RHS+0x874>)
 8001e8c:	4988      	ldr	r1, [pc, #544]	@ (80020b0 <INIT_RHS+0x86c>)
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fb1e 	bl	80024d0 <SPI_SEND_RECV>
	    print_debug_binary(rx_vector);
 8001e94:	4888      	ldr	r0, [pc, #544]	@ (80020b8 <INIT_RHS+0x874>)
 8001e96:	f7ff f853 	bl	8000f40 <print_debug_binary>
	    print_configuration(cmd_selector, reg_address, lsb_value);
 8001e9a:	4b83      	ldr	r3, [pc, #524]	@ (80020a8 <INIT_RHS+0x864>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4a81      	ldr	r2, [pc, #516]	@ (80020a4 <INIT_RHS+0x860>)
 8001ea0:	7811      	ldrb	r1, [r2, #0]
 8001ea2:	4a82      	ldr	r2, [pc, #520]	@ (80020ac <INIT_RHS+0x868>)
 8001ea4:	8812      	ldrh	r2, [r2, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f854 	bl	8000f54 <print_configuration>
	for (int i = 0; i < sizeof(register_addresses) / sizeof(register_addresses[0]); i++) {
 8001eac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001eae:	3301      	adds	r3, #1
 8001eb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001eb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001eb4:	2b1f      	cmp	r3, #31
 8001eb6:	d9be      	bls.n	8001e36 <INIT_RHS+0x5f2>
	}


	// Register 251 - Read I and N
	cmd_selector = READ_CMD;
 8001eb8:	4b7b      	ldr	r3, [pc, #492]	@ (80020a8 <INIT_RHS+0x864>)
 8001eba:	22c0      	movs	r2, #192	@ 0xc0
 8001ebc:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_251;
 8001ebe:	4b79      	ldr	r3, [pc, #484]	@ (80020a4 <INIT_RHS+0x860>)
 8001ec0:	22fb      	movs	r2, #251	@ 0xfb
 8001ec2:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 8001ec4:	4b79      	ldr	r3, [pc, #484]	@ (80020ac <INIT_RHS+0x868>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001eca:	4b77      	ldr	r3, [pc, #476]	@ (80020a8 <INIT_RHS+0x864>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	4b74      	ldr	r3, [pc, #464]	@ (80020a4 <INIT_RHS+0x860>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	b21b      	sxth	r3, r3
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b74      	ldr	r3, [pc, #464]	@ (80020b0 <INIT_RHS+0x86c>)
 8001ee0:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8001ee2:	4b72      	ldr	r3, [pc, #456]	@ (80020ac <INIT_RHS+0x868>)
 8001ee4:	881a      	ldrh	r2, [r3, #0]
 8001ee6:	4b72      	ldr	r3, [pc, #456]	@ (80020b0 <INIT_RHS+0x86c>)
 8001ee8:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001eea:	4b72      	ldr	r3, [pc, #456]	@ (80020b4 <INIT_RHS+0x870>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	4a72      	ldr	r2, [pc, #456]	@ (80020b8 <INIT_RHS+0x874>)
 8001ef0:	496f      	ldr	r1, [pc, #444]	@ (80020b0 <INIT_RHS+0x86c>)
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 faec 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001ef8:	486f      	ldr	r0, [pc, #444]	@ (80020b8 <INIT_RHS+0x874>)
 8001efa:	f7ff f821 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001efe:	4b6a      	ldr	r3, [pc, #424]	@ (80020a8 <INIT_RHS+0x864>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	4a68      	ldr	r2, [pc, #416]	@ (80020a4 <INIT_RHS+0x860>)
 8001f04:	7811      	ldrb	r1, [r2, #0]
 8001f06:	4a69      	ldr	r2, [pc, #420]	@ (80020ac <INIT_RHS+0x868>)
 8001f08:	8812      	ldrh	r2, [r2, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f822 	bl	8000f54 <print_configuration>


	// Register 252 - Read T and A
	cmd_selector = READ_CMD;
 8001f10:	4b65      	ldr	r3, [pc, #404]	@ (80020a8 <INIT_RHS+0x864>)
 8001f12:	22c0      	movs	r2, #192	@ 0xc0
 8001f14:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_252;
 8001f16:	4b63      	ldr	r3, [pc, #396]	@ (80020a4 <INIT_RHS+0x860>)
 8001f18:	22fc      	movs	r2, #252	@ 0xfc
 8001f1a:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 8001f1c:	4b63      	ldr	r3, [pc, #396]	@ (80020ac <INIT_RHS+0x868>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001f22:	4b61      	ldr	r3, [pc, #388]	@ (80020a8 <INIT_RHS+0x864>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	b21a      	sxth	r2, r3
 8001f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80020a4 <INIT_RHS+0x860>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	4b5e      	ldr	r3, [pc, #376]	@ (80020b0 <INIT_RHS+0x86c>)
 8001f38:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8001f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80020ac <INIT_RHS+0x868>)
 8001f3c:	881a      	ldrh	r2, [r3, #0]
 8001f3e:	4b5c      	ldr	r3, [pc, #368]	@ (80020b0 <INIT_RHS+0x86c>)
 8001f40:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001f42:	4b5c      	ldr	r3, [pc, #368]	@ (80020b4 <INIT_RHS+0x870>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	4a5c      	ldr	r2, [pc, #368]	@ (80020b8 <INIT_RHS+0x874>)
 8001f48:	4959      	ldr	r1, [pc, #356]	@ (80020b0 <INIT_RHS+0x86c>)
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fac0 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001f50:	4859      	ldr	r0, [pc, #356]	@ (80020b8 <INIT_RHS+0x874>)
 8001f52:	f7fe fff5 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001f56:	4b54      	ldr	r3, [pc, #336]	@ (80020a8 <INIT_RHS+0x864>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4a52      	ldr	r2, [pc, #328]	@ (80020a4 <INIT_RHS+0x860>)
 8001f5c:	7811      	ldrb	r1, [r2, #0]
 8001f5e:	4a53      	ldr	r2, [pc, #332]	@ (80020ac <INIT_RHS+0x868>)
 8001f60:	8812      	ldrh	r2, [r2, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fff6 	bl	8000f54 <print_configuration>

	// Register 251 - Read N and 0
	cmd_selector = READ_CMD;
 8001f68:	4b4f      	ldr	r3, [pc, #316]	@ (80020a8 <INIT_RHS+0x864>)
 8001f6a:	22c0      	movs	r2, #192	@ 0xc0
 8001f6c:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_253;
 8001f6e:	4b4d      	ldr	r3, [pc, #308]	@ (80020a4 <INIT_RHS+0x860>)
 8001f70:	22fd      	movs	r2, #253	@ 0xfd
 8001f72:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 8001f74:	4b4d      	ldr	r3, [pc, #308]	@ (80020ac <INIT_RHS+0x868>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80020a8 <INIT_RHS+0x864>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	b21a      	sxth	r2, r3
 8001f82:	4b48      	ldr	r3, [pc, #288]	@ (80020a4 <INIT_RHS+0x860>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	4b48      	ldr	r3, [pc, #288]	@ (80020b0 <INIT_RHS+0x86c>)
 8001f90:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8001f92:	4b46      	ldr	r3, [pc, #280]	@ (80020ac <INIT_RHS+0x868>)
 8001f94:	881a      	ldrh	r2, [r3, #0]
 8001f96:	4b46      	ldr	r3, [pc, #280]	@ (80020b0 <INIT_RHS+0x86c>)
 8001f98:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001f9a:	4b46      	ldr	r3, [pc, #280]	@ (80020b4 <INIT_RHS+0x870>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	4a46      	ldr	r2, [pc, #280]	@ (80020b8 <INIT_RHS+0x874>)
 8001fa0:	4943      	ldr	r1, [pc, #268]	@ (80020b0 <INIT_RHS+0x86c>)
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fa94 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8001fa8:	4843      	ldr	r0, [pc, #268]	@ (80020b8 <INIT_RHS+0x874>)
 8001faa:	f7fe ffc9 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001fae:	4b3e      	ldr	r3, [pc, #248]	@ (80020a8 <INIT_RHS+0x864>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4a3c      	ldr	r2, [pc, #240]	@ (80020a4 <INIT_RHS+0x860>)
 8001fb4:	7811      	ldrb	r1, [r2, #0]
 8001fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80020ac <INIT_RHS+0x868>)
 8001fb8:	8812      	ldrh	r2, [r2, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe ffca 	bl	8000f54 <print_configuration>
	printf("Should be I and N:  %c   %c\r\n", (rx_vector[1] >> 8) & 0xFF, rx_vector[1] & 0xFF);
 8001fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80020b8 <INIT_RHS+0x874>)
 8001fc2:	885b      	ldrh	r3, [r3, #2]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	4a3b      	ldr	r2, [pc, #236]	@ (80020b8 <INIT_RHS+0x874>)
 8001fcc:	8852      	ldrh	r2, [r2, #2]
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	483a      	ldr	r0, [pc, #232]	@ (80020bc <INIT_RHS+0x878>)
 8001fd4:	f01a fc2c 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 8001fd8:	4839      	ldr	r0, [pc, #228]	@ (80020c0 <INIT_RHS+0x87c>)
 8001fda:	f01a fc91 	bl	801c900 <puts>

	// Register 254 - Read Number of Channel and Die Revision
	cmd_selector = READ_CMD;
 8001fde:	4b32      	ldr	r3, [pc, #200]	@ (80020a8 <INIT_RHS+0x864>)
 8001fe0:	22c0      	movs	r2, #192	@ 0xc0
 8001fe2:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_254;
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80020a4 <INIT_RHS+0x860>)
 8001fe6:	22fe      	movs	r2, #254	@ 0xfe
 8001fe8:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 8001fea:	4b30      	ldr	r3, [pc, #192]	@ (80020ac <INIT_RHS+0x868>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <INIT_RHS+0x864>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	b21a      	sxth	r2, r3
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80020a4 <INIT_RHS+0x860>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b21b      	sxth	r3, r3
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b2a      	ldr	r3, [pc, #168]	@ (80020b0 <INIT_RHS+0x86c>)
 8002006:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8002008:	4b28      	ldr	r3, [pc, #160]	@ (80020ac <INIT_RHS+0x868>)
 800200a:	881a      	ldrh	r2, [r3, #0]
 800200c:	4b28      	ldr	r3, [pc, #160]	@ (80020b0 <INIT_RHS+0x86c>)
 800200e:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002010:	4b28      	ldr	r3, [pc, #160]	@ (80020b4 <INIT_RHS+0x870>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4a28      	ldr	r2, [pc, #160]	@ (80020b8 <INIT_RHS+0x874>)
 8002016:	4926      	ldr	r1, [pc, #152]	@ (80020b0 <INIT_RHS+0x86c>)
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fa59 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 800201e:	4826      	ldr	r0, [pc, #152]	@ (80020b8 <INIT_RHS+0x874>)
 8002020:	f7fe ff8e 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8002024:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <INIT_RHS+0x864>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4a1e      	ldr	r2, [pc, #120]	@ (80020a4 <INIT_RHS+0x860>)
 800202a:	7811      	ldrb	r1, [r2, #0]
 800202c:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <INIT_RHS+0x868>)
 800202e:	8812      	ldrh	r2, [r2, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe ff8f 	bl	8000f54 <print_configuration>
	printf("Should be T and A:  %c   %c\r\n", (rx_vector[1] >> 8) & 0xFF, rx_vector[1] & 0xFF);
 8002036:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <INIT_RHS+0x874>)
 8002038:	885b      	ldrh	r3, [r3, #2]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	b29b      	uxth	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <INIT_RHS+0x874>)
 8002042:	8852      	ldrh	r2, [r2, #2]
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	4619      	mov	r1, r3
 8002048:	481e      	ldr	r0, [pc, #120]	@ (80020c4 <INIT_RHS+0x880>)
 800204a:	f01a fbf1 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 800204e:	481c      	ldr	r0, [pc, #112]	@ (80020c0 <INIT_RHS+0x87c>)
 8002050:	f01a fc56 	bl	801c900 <puts>



	// Register 255 - Read Dummy
	cmd_selector = READ_CMD;
 8002054:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <INIT_RHS+0x864>)
 8002056:	22c0      	movs	r2, #192	@ 0xc0
 8002058:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_255;
 800205a:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <INIT_RHS+0x860>)
 800205c:	22ff      	movs	r2, #255	@ 0xff
 800205e:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 8002060:	4b12      	ldr	r3, [pc, #72]	@ (80020ac <INIT_RHS+0x868>)
 8002062:	2200      	movs	r2, #0
 8002064:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <INIT_RHS+0x864>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	b21a      	sxth	r2, r3
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <INIT_RHS+0x860>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b21b      	sxth	r3, r3
 8002074:	4313      	orrs	r3, r2
 8002076:	b21b      	sxth	r3, r3
 8002078:	b29a      	uxth	r2, r3
 800207a:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <INIT_RHS+0x86c>)
 800207c:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 800207e:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <INIT_RHS+0x868>)
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <INIT_RHS+0x86c>)
 8002084:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002086:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <INIT_RHS+0x870>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	4a0b      	ldr	r2, [pc, #44]	@ (80020b8 <INIT_RHS+0x874>)
 800208c:	4908      	ldr	r1, [pc, #32]	@ (80020b0 <INIT_RHS+0x86c>)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fa1e 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002094:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <INIT_RHS+0x874>)
 8002096:	f7fe ff53 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 800209a:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <INIT_RHS+0x864>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	4a01      	ldr	r2, [pc, #4]	@ (80020a4 <INIT_RHS+0x860>)
 80020a0:	7811      	ldrb	r1, [r2, #0]
 80020a2:	e011      	b.n	80020c8 <INIT_RHS+0x884>
 80020a4:	200002b0 	.word	0x200002b0
 80020a8:	200002b1 	.word	0x200002b1
 80020ac:	200002b2 	.word	0x200002b2
 80020b0:	200002a8 	.word	0x200002a8
 80020b4:	20000000 	.word	0x20000000
 80020b8:	200002ac 	.word	0x200002ac
 80020bc:	0801e7b0 	.word	0x0801e7b0
 80020c0:	0801e77c 	.word	0x0801e77c
 80020c4:	0801e7d0 	.word	0x0801e7d0
 80020c8:	4a9c      	ldr	r2, [pc, #624]	@ (800233c <INIT_RHS+0xaf8>)
 80020ca:	8812      	ldrh	r2, [r2, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe ff41 	bl	8000f54 <print_configuration>
	printf("Should be N and 0:  %c   %01X\r\n", (rx_vector[1] >> 8) & 0xFF, rx_vector[1] & 0xFF);
 80020d2:	4b9b      	ldr	r3, [pc, #620]	@ (8002340 <INIT_RHS+0xafc>)
 80020d4:	885b      	ldrh	r3, [r3, #2]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	4a98      	ldr	r2, [pc, #608]	@ (8002340 <INIT_RHS+0xafc>)
 80020de:	8852      	ldrh	r2, [r2, #2]
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	4619      	mov	r1, r3
 80020e4:	4897      	ldr	r0, [pc, #604]	@ (8002344 <INIT_RHS+0xb00>)
 80020e6:	f01a fba3 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 80020ea:	4897      	ldr	r0, [pc, #604]	@ (8002348 <INIT_RHS+0xb04>)
 80020ec:	f01a fc08 	bl	801c900 <puts>

	// Register 255 - Read Dummy
	cmd_selector = READ_CMD;
 80020f0:	4b96      	ldr	r3, [pc, #600]	@ (800234c <INIT_RHS+0xb08>)
 80020f2:	22c0      	movs	r2, #192	@ 0xc0
 80020f4:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_255;
 80020f6:	4b96      	ldr	r3, [pc, #600]	@ (8002350 <INIT_RHS+0xb0c>)
 80020f8:	22ff      	movs	r2, #255	@ 0xff
 80020fa:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 80020fc:	4b8f      	ldr	r3, [pc, #572]	@ (800233c <INIT_RHS+0xaf8>)
 80020fe:	2200      	movs	r2, #0
 8002100:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002102:	4b92      	ldr	r3, [pc, #584]	@ (800234c <INIT_RHS+0xb08>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	b21a      	sxth	r2, r3
 800210a:	4b91      	ldr	r3, [pc, #580]	@ (8002350 <INIT_RHS+0xb0c>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b21b      	sxth	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b21b      	sxth	r3, r3
 8002114:	b29a      	uxth	r2, r3
 8002116:	4b8f      	ldr	r3, [pc, #572]	@ (8002354 <INIT_RHS+0xb10>)
 8002118:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 800211a:	4b88      	ldr	r3, [pc, #544]	@ (800233c <INIT_RHS+0xaf8>)
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	4b8d      	ldr	r3, [pc, #564]	@ (8002354 <INIT_RHS+0xb10>)
 8002120:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002122:	4b8d      	ldr	r3, [pc, #564]	@ (8002358 <INIT_RHS+0xb14>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4a86      	ldr	r2, [pc, #536]	@ (8002340 <INIT_RHS+0xafc>)
 8002128:	498a      	ldr	r1, [pc, #552]	@ (8002354 <INIT_RHS+0xb10>)
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f9d0 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002130:	4883      	ldr	r0, [pc, #524]	@ (8002340 <INIT_RHS+0xafc>)
 8002132:	f7fe ff05 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8002136:	4b85      	ldr	r3, [pc, #532]	@ (800234c <INIT_RHS+0xb08>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4a85      	ldr	r2, [pc, #532]	@ (8002350 <INIT_RHS+0xb0c>)
 800213c:	7811      	ldrb	r1, [r2, #0]
 800213e:	4a7f      	ldr	r2, [pc, #508]	@ (800233c <INIT_RHS+0xaf8>)
 8002140:	8812      	ldrh	r2, [r2, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe ff06 	bl	8000f54 <print_configuration>
	printf("Die Revision : %d | #channel: %d\r\n", (rx_vector[1] >> 8) & 0xFF, rx_vector[1] & 0xFF);
 8002148:	4b7d      	ldr	r3, [pc, #500]	@ (8002340 <INIT_RHS+0xafc>)
 800214a:	885b      	ldrh	r3, [r3, #2]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	b29b      	uxth	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4a7b      	ldr	r2, [pc, #492]	@ (8002340 <INIT_RHS+0xafc>)
 8002154:	8852      	ldrh	r2, [r2, #2]
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	4619      	mov	r1, r3
 800215a:	4880      	ldr	r0, [pc, #512]	@ (800235c <INIT_RHS+0xb18>)
 800215c:	f01a fb68 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002160:	4879      	ldr	r0, [pc, #484]	@ (8002348 <INIT_RHS+0xb04>)
 8002162:	f01a fbcd 	bl	801c900 <puts>

	// Register 255 - Read Dummy
	cmd_selector = READ_CMD;
 8002166:	4b79      	ldr	r3, [pc, #484]	@ (800234c <INIT_RHS+0xb08>)
 8002168:	22c0      	movs	r2, #192	@ 0xc0
 800216a:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_255;
 800216c:	4b78      	ldr	r3, [pc, #480]	@ (8002350 <INIT_RHS+0xb0c>)
 800216e:	22ff      	movs	r2, #255	@ 0xff
 8002170:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 8002172:	4b72      	ldr	r3, [pc, #456]	@ (800233c <INIT_RHS+0xaf8>)
 8002174:	2200      	movs	r2, #0
 8002176:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002178:	4b74      	ldr	r3, [pc, #464]	@ (800234c <INIT_RHS+0xb08>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b21a      	sxth	r2, r3
 8002180:	4b73      	ldr	r3, [pc, #460]	@ (8002350 <INIT_RHS+0xb0c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b21b      	sxth	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	b21b      	sxth	r3, r3
 800218a:	b29a      	uxth	r2, r3
 800218c:	4b71      	ldr	r3, [pc, #452]	@ (8002354 <INIT_RHS+0xb10>)
 800218e:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8002190:	4b6a      	ldr	r3, [pc, #424]	@ (800233c <INIT_RHS+0xaf8>)
 8002192:	881a      	ldrh	r2, [r3, #0]
 8002194:	4b6f      	ldr	r3, [pc, #444]	@ (8002354 <INIT_RHS+0xb10>)
 8002196:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002198:	4b6f      	ldr	r3, [pc, #444]	@ (8002358 <INIT_RHS+0xb14>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4a68      	ldr	r2, [pc, #416]	@ (8002340 <INIT_RHS+0xafc>)
 800219e:	496d      	ldr	r1, [pc, #436]	@ (8002354 <INIT_RHS+0xb10>)
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f995 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80021a6:	4866      	ldr	r0, [pc, #408]	@ (8002340 <INIT_RHS+0xafc>)
 80021a8:	f7fe feca 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 80021ac:	4b67      	ldr	r3, [pc, #412]	@ (800234c <INIT_RHS+0xb08>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4a67      	ldr	r2, [pc, #412]	@ (8002350 <INIT_RHS+0xb0c>)
 80021b2:	7811      	ldrb	r1, [r2, #0]
 80021b4:	4a61      	ldr	r2, [pc, #388]	@ (800233c <INIT_RHS+0xaf8>)
 80021b6:	8812      	ldrh	r2, [r2, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fecb 	bl	8000f54 <print_configuration>
	printf("Char Receiving Data - CHIP ID : %d \r\n", (rx_vector[1] & 0xFF));
 80021be:	4b60      	ldr	r3, [pc, #384]	@ (8002340 <INIT_RHS+0xafc>)
 80021c0:	885b      	ldrh	r3, [r3, #2]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4619      	mov	r1, r3
 80021c6:	4866      	ldr	r0, [pc, #408]	@ (8002360 <INIT_RHS+0xb1c>)
 80021c8:	f01a fb32 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 80021cc:	485e      	ldr	r0, [pc, #376]	@ (8002348 <INIT_RHS+0xb04>)
 80021ce:	f01a fb97 	bl	801c900 <puts>

	// Register 0
	cmd_selector = CONVERT_CMD;
 80021d2:	4b5e      	ldr	r3, [pc, #376]	@ (800234c <INIT_RHS+0xb08>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_0;
 80021d8:	4b5d      	ldr	r3, [pc, #372]	@ (8002350 <INIT_RHS+0xb0c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 80021de:	4b57      	ldr	r3, [pc, #348]	@ (800233c <INIT_RHS+0xaf8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 12) | (reg_address);
 80021e4:	4b59      	ldr	r3, [pc, #356]	@ (800234c <INIT_RHS+0xb08>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	031b      	lsls	r3, r3, #12
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	4b58      	ldr	r3, [pc, #352]	@ (8002350 <INIT_RHS+0xb0c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	4b56      	ldr	r3, [pc, #344]	@ (8002354 <INIT_RHS+0xb10>)
 80021fa:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 80021fc:	4b4f      	ldr	r3, [pc, #316]	@ (800233c <INIT_RHS+0xaf8>)
 80021fe:	881a      	ldrh	r2, [r3, #0]
 8002200:	4b54      	ldr	r3, [pc, #336]	@ (8002354 <INIT_RHS+0xb10>)
 8002202:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002204:	4b54      	ldr	r3, [pc, #336]	@ (8002358 <INIT_RHS+0xb14>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	4a4d      	ldr	r2, [pc, #308]	@ (8002340 <INIT_RHS+0xafc>)
 800220a:	4952      	ldr	r1, [pc, #328]	@ (8002354 <INIT_RHS+0xb10>)
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f95f 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002212:	484b      	ldr	r0, [pc, #300]	@ (8002340 <INIT_RHS+0xafc>)
 8002214:	f7fe fe94 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8002218:	4b4c      	ldr	r3, [pc, #304]	@ (800234c <INIT_RHS+0xb08>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4a4c      	ldr	r2, [pc, #304]	@ (8002350 <INIT_RHS+0xb0c>)
 800221e:	7811      	ldrb	r1, [r2, #0]
 8002220:	4a46      	ldr	r2, [pc, #280]	@ (800233c <INIT_RHS+0xaf8>)
 8002222:	8812      	ldrh	r2, [r2, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fe95 	bl	8000f54 <print_configuration>
	printf("Receiving Data : 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
 800222a:	4b45      	ldr	r3, [pc, #276]	@ (8002340 <INIT_RHS+0xafc>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	461c      	mov	r4, r3
 8002230:	4b43      	ldr	r3, [pc, #268]	@ (8002340 <INIT_RHS+0xafc>)
 8002232:	885b      	ldrh	r3, [r3, #2]
 8002234:	461d      	mov	r5, r3
 8002236:	4b42      	ldr	r3, [pc, #264]	@ (8002340 <INIT_RHS+0xafc>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	041b      	lsls	r3, r3, #16
 800223c:	4a40      	ldr	r2, [pc, #256]	@ (8002340 <INIT_RHS+0xafc>)
 800223e:	8852      	ldrh	r2, [r2, #2]
 8002240:	4313      	orrs	r3, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fe40 	bl	8000ec8 <binary_string>
 8002248:	4603      	mov	r3, r0
 800224a:	462a      	mov	r2, r5
 800224c:	4621      	mov	r1, r4
 800224e:	4845      	ldr	r0, [pc, #276]	@ (8002364 <INIT_RHS+0xb20>)
 8002250:	f01a faee 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002254:	483c      	ldr	r0, [pc, #240]	@ (8002348 <INIT_RHS+0xb04>)
 8002256:	f01a fb53 	bl	801c900 <puts>


	// Register 0
	cmd_selector = CONVERT_CMD;
 800225a:	4b3c      	ldr	r3, [pc, #240]	@ (800234c <INIT_RHS+0xb08>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_63;
 8002260:	4b3b      	ldr	r3, [pc, #236]	@ (8002350 <INIT_RHS+0xb0c>)
 8002262:	223f      	movs	r2, #63	@ 0x3f
 8002264:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 8002266:	4b35      	ldr	r3, [pc, #212]	@ (800233c <INIT_RHS+0xaf8>)
 8002268:	2200      	movs	r2, #0
 800226a:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 12) | (reg_address);
 800226c:	4b37      	ldr	r3, [pc, #220]	@ (800234c <INIT_RHS+0xb08>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	031b      	lsls	r3, r3, #12
 8002272:	b21a      	sxth	r2, r3
 8002274:	4b36      	ldr	r3, [pc, #216]	@ (8002350 <INIT_RHS+0xb0c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b21b      	sxth	r3, r3
 800227a:	4313      	orrs	r3, r2
 800227c:	b21b      	sxth	r3, r3
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b34      	ldr	r3, [pc, #208]	@ (8002354 <INIT_RHS+0xb10>)
 8002282:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8002284:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <INIT_RHS+0xaf8>)
 8002286:	881a      	ldrh	r2, [r3, #0]
 8002288:	4b32      	ldr	r3, [pc, #200]	@ (8002354 <INIT_RHS+0xb10>)
 800228a:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 800228c:	4b32      	ldr	r3, [pc, #200]	@ (8002358 <INIT_RHS+0xb14>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4a2b      	ldr	r2, [pc, #172]	@ (8002340 <INIT_RHS+0xafc>)
 8002292:	4930      	ldr	r1, [pc, #192]	@ (8002354 <INIT_RHS+0xb10>)
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f91b 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 800229a:	4829      	ldr	r0, [pc, #164]	@ (8002340 <INIT_RHS+0xafc>)
 800229c:	f7fe fe50 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 80022a0:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <INIT_RHS+0xb08>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002350 <INIT_RHS+0xb0c>)
 80022a6:	7811      	ldrb	r1, [r2, #0]
 80022a8:	4a24      	ldr	r2, [pc, #144]	@ (800233c <INIT_RHS+0xaf8>)
 80022aa:	8812      	ldrh	r2, [r2, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fe51 	bl	8000f54 <print_configuration>
	printf("Receiving Data : 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
 80022b2:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <INIT_RHS+0xafc>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	461c      	mov	r4, r3
 80022b8:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <INIT_RHS+0xafc>)
 80022ba:	885b      	ldrh	r3, [r3, #2]
 80022bc:	461d      	mov	r5, r3
 80022be:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <INIT_RHS+0xafc>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002340 <INIT_RHS+0xafc>)
 80022c6:	8852      	ldrh	r2, [r2, #2]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fdfc 	bl	8000ec8 <binary_string>
 80022d0:	4603      	mov	r3, r0
 80022d2:	462a      	mov	r2, r5
 80022d4:	4621      	mov	r1, r4
 80022d6:	4823      	ldr	r0, [pc, #140]	@ (8002364 <INIT_RHS+0xb20>)
 80022d8:	f01a faaa 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 80022dc:	481a      	ldr	r0, [pc, #104]	@ (8002348 <INIT_RHS+0xb04>)
 80022de:	f01a fb0f 	bl	801c900 <puts>


	// Register 0
	cmd_selector = CONVERT_CMD;
 80022e2:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <INIT_RHS+0xb08>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_63;
 80022e8:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <INIT_RHS+0xb0c>)
 80022ea:	223f      	movs	r2, #63	@ 0x3f
 80022ec:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 80022ee:	4b13      	ldr	r3, [pc, #76]	@ (800233c <INIT_RHS+0xaf8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 12) | (reg_address);
 80022f4:	4b15      	ldr	r3, [pc, #84]	@ (800234c <INIT_RHS+0xb08>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	031b      	lsls	r3, r3, #12
 80022fa:	b21a      	sxth	r2, r3
 80022fc:	4b14      	ldr	r3, [pc, #80]	@ (8002350 <INIT_RHS+0xb0c>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b21b      	sxth	r3, r3
 8002302:	4313      	orrs	r3, r2
 8002304:	b21b      	sxth	r3, r3
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <INIT_RHS+0xb10>)
 800230a:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <INIT_RHS+0xaf8>)
 800230e:	881a      	ldrh	r2, [r3, #0]
 8002310:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <INIT_RHS+0xb10>)
 8002312:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002314:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <INIT_RHS+0xb14>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4a09      	ldr	r2, [pc, #36]	@ (8002340 <INIT_RHS+0xafc>)
 800231a:	490e      	ldr	r1, [pc, #56]	@ (8002354 <INIT_RHS+0xb10>)
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f8d7 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002322:	4807      	ldr	r0, [pc, #28]	@ (8002340 <INIT_RHS+0xafc>)
 8002324:	f7fe fe0c 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8002328:	4b08      	ldr	r3, [pc, #32]	@ (800234c <INIT_RHS+0xb08>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4a08      	ldr	r2, [pc, #32]	@ (8002350 <INIT_RHS+0xb0c>)
 800232e:	7811      	ldrb	r1, [r2, #0]
 8002330:	4a02      	ldr	r2, [pc, #8]	@ (800233c <INIT_RHS+0xaf8>)
 8002332:	8812      	ldrh	r2, [r2, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fe0d 	bl	8000f54 <print_configuration>
 800233a:	e015      	b.n	8002368 <INIT_RHS+0xb24>
 800233c:	200002b2 	.word	0x200002b2
 8002340:	200002ac 	.word	0x200002ac
 8002344:	0801e7f0 	.word	0x0801e7f0
 8002348:	0801e77c 	.word	0x0801e77c
 800234c:	200002b1 	.word	0x200002b1
 8002350:	200002b0 	.word	0x200002b0
 8002354:	200002a8 	.word	0x200002a8
 8002358:	20000000 	.word	0x20000000
 800235c:	0801e810 	.word	0x0801e810
 8002360:	0801e834 	.word	0x0801e834
 8002364:	0801e85c 	.word	0x0801e85c
	printf("Receiving Data : 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
 8002368:	4b51      	ldr	r3, [pc, #324]	@ (80024b0 <INIT_RHS+0xc6c>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	461c      	mov	r4, r3
 800236e:	4b50      	ldr	r3, [pc, #320]	@ (80024b0 <INIT_RHS+0xc6c>)
 8002370:	885b      	ldrh	r3, [r3, #2]
 8002372:	461d      	mov	r5, r3
 8002374:	4b4e      	ldr	r3, [pc, #312]	@ (80024b0 <INIT_RHS+0xc6c>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	041b      	lsls	r3, r3, #16
 800237a:	4a4d      	ldr	r2, [pc, #308]	@ (80024b0 <INIT_RHS+0xc6c>)
 800237c:	8852      	ldrh	r2, [r2, #2]
 800237e:	4313      	orrs	r3, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fda1 	bl	8000ec8 <binary_string>
 8002386:	4603      	mov	r3, r0
 8002388:	462a      	mov	r2, r5
 800238a:	4621      	mov	r1, r4
 800238c:	4849      	ldr	r0, [pc, #292]	@ (80024b4 <INIT_RHS+0xc70>)
 800238e:	f01a fa4f 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002392:	4849      	ldr	r0, [pc, #292]	@ (80024b8 <INIT_RHS+0xc74>)
 8002394:	f01a fab4 	bl	801c900 <puts>

	// Register 0
	cmd_selector = CONVERT_CMD;
 8002398:	4b48      	ldr	r3, [pc, #288]	@ (80024bc <INIT_RHS+0xc78>)
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_63;
 800239e:	4b48      	ldr	r3, [pc, #288]	@ (80024c0 <INIT_RHS+0xc7c>)
 80023a0:	223f      	movs	r2, #63	@ 0x3f
 80023a2:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 80023a4:	4b47      	ldr	r3, [pc, #284]	@ (80024c4 <INIT_RHS+0xc80>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 12) | (reg_address);
 80023aa:	4b44      	ldr	r3, [pc, #272]	@ (80024bc <INIT_RHS+0xc78>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	031b      	lsls	r3, r3, #12
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	4b43      	ldr	r3, [pc, #268]	@ (80024c0 <INIT_RHS+0xc7c>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	4313      	orrs	r3, r2
 80023ba:	b21b      	sxth	r3, r3
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4b42      	ldr	r3, [pc, #264]	@ (80024c8 <INIT_RHS+0xc84>)
 80023c0:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 80023c2:	4b40      	ldr	r3, [pc, #256]	@ (80024c4 <INIT_RHS+0xc80>)
 80023c4:	881a      	ldrh	r2, [r3, #0]
 80023c6:	4b40      	ldr	r3, [pc, #256]	@ (80024c8 <INIT_RHS+0xc84>)
 80023c8:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80023ca:	4b40      	ldr	r3, [pc, #256]	@ (80024cc <INIT_RHS+0xc88>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	4a38      	ldr	r2, [pc, #224]	@ (80024b0 <INIT_RHS+0xc6c>)
 80023d0:	493d      	ldr	r1, [pc, #244]	@ (80024c8 <INIT_RHS+0xc84>)
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f87c 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80023d8:	4835      	ldr	r0, [pc, #212]	@ (80024b0 <INIT_RHS+0xc6c>)
 80023da:	f7fe fdb1 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 80023de:	4b37      	ldr	r3, [pc, #220]	@ (80024bc <INIT_RHS+0xc78>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	4a37      	ldr	r2, [pc, #220]	@ (80024c0 <INIT_RHS+0xc7c>)
 80023e4:	7811      	ldrb	r1, [r2, #0]
 80023e6:	4a37      	ldr	r2, [pc, #220]	@ (80024c4 <INIT_RHS+0xc80>)
 80023e8:	8812      	ldrh	r2, [r2, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fdb2 	bl	8000f54 <print_configuration>
	printf("Receiving Data : 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
 80023f0:	4b2f      	ldr	r3, [pc, #188]	@ (80024b0 <INIT_RHS+0xc6c>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	461c      	mov	r4, r3
 80023f6:	4b2e      	ldr	r3, [pc, #184]	@ (80024b0 <INIT_RHS+0xc6c>)
 80023f8:	885b      	ldrh	r3, [r3, #2]
 80023fa:	461d      	mov	r5, r3
 80023fc:	4b2c      	ldr	r3, [pc, #176]	@ (80024b0 <INIT_RHS+0xc6c>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	4a2b      	ldr	r2, [pc, #172]	@ (80024b0 <INIT_RHS+0xc6c>)
 8002404:	8852      	ldrh	r2, [r2, #2]
 8002406:	4313      	orrs	r3, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fd5d 	bl	8000ec8 <binary_string>
 800240e:	4603      	mov	r3, r0
 8002410:	462a      	mov	r2, r5
 8002412:	4621      	mov	r1, r4
 8002414:	4827      	ldr	r0, [pc, #156]	@ (80024b4 <INIT_RHS+0xc70>)
 8002416:	f01a fa0b 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 800241a:	4827      	ldr	r0, [pc, #156]	@ (80024b8 <INIT_RHS+0xc74>)
 800241c:	f01a fa70 	bl	801c900 <puts>

	// Register 0
	cmd_selector = CONVERT_CMD;
 8002420:	4b26      	ldr	r3, [pc, #152]	@ (80024bc <INIT_RHS+0xc78>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_63;
 8002426:	4b26      	ldr	r3, [pc, #152]	@ (80024c0 <INIT_RHS+0xc7c>)
 8002428:	223f      	movs	r2, #63	@ 0x3f
 800242a:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 800242c:	4b25      	ldr	r3, [pc, #148]	@ (80024c4 <INIT_RHS+0xc80>)
 800242e:	2200      	movs	r2, #0
 8002430:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 12) | (reg_address);
 8002432:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <INIT_RHS+0xc78>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	031b      	lsls	r3, r3, #12
 8002438:	b21a      	sxth	r2, r3
 800243a:	4b21      	ldr	r3, [pc, #132]	@ (80024c0 <INIT_RHS+0xc7c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	b21b      	sxth	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b21b      	sxth	r3, r3
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <INIT_RHS+0xc84>)
 8002448:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 800244a:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <INIT_RHS+0xc80>)
 800244c:	881a      	ldrh	r2, [r3, #0]
 800244e:	4b1e      	ldr	r3, [pc, #120]	@ (80024c8 <INIT_RHS+0xc84>)
 8002450:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002452:	4b1e      	ldr	r3, [pc, #120]	@ (80024cc <INIT_RHS+0xc88>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	4a16      	ldr	r2, [pc, #88]	@ (80024b0 <INIT_RHS+0xc6c>)
 8002458:	491b      	ldr	r1, [pc, #108]	@ (80024c8 <INIT_RHS+0xc84>)
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f838 	bl	80024d0 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002460:	4813      	ldr	r0, [pc, #76]	@ (80024b0 <INIT_RHS+0xc6c>)
 8002462:	f7fe fd6d 	bl	8000f40 <print_debug_binary>
	print_configuration(cmd_selector, reg_address, lsb_value);
 8002466:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <INIT_RHS+0xc78>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4a15      	ldr	r2, [pc, #84]	@ (80024c0 <INIT_RHS+0xc7c>)
 800246c:	7811      	ldrb	r1, [r2, #0]
 800246e:	4a15      	ldr	r2, [pc, #84]	@ (80024c4 <INIT_RHS+0xc80>)
 8002470:	8812      	ldrh	r2, [r2, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fd6e 	bl	8000f54 <print_configuration>
	printf("Receiving Data : 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
 8002478:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <INIT_RHS+0xc6c>)
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	461c      	mov	r4, r3
 800247e:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <INIT_RHS+0xc6c>)
 8002480:	885b      	ldrh	r3, [r3, #2]
 8002482:	461d      	mov	r5, r3
 8002484:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <INIT_RHS+0xc6c>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	041b      	lsls	r3, r3, #16
 800248a:	4a09      	ldr	r2, [pc, #36]	@ (80024b0 <INIT_RHS+0xc6c>)
 800248c:	8852      	ldrh	r2, [r2, #2]
 800248e:	4313      	orrs	r3, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fd19 	bl	8000ec8 <binary_string>
 8002496:	4603      	mov	r3, r0
 8002498:	462a      	mov	r2, r5
 800249a:	4621      	mov	r1, r4
 800249c:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <INIT_RHS+0xc70>)
 800249e:	f01a f9c7 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 80024a2:	4805      	ldr	r0, [pc, #20]	@ (80024b8 <INIT_RHS+0xc74>)
 80024a4:	f01a fa2c 	bl	801c900 <puts>

}
 80024a8:	bf00      	nop
 80024aa:	3780      	adds	r7, #128	@ 0x80
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bdb0      	pop	{r4, r5, r7, pc}
 80024b0:	200002ac 	.word	0x200002ac
 80024b4:	0801e85c 	.word	0x0801e85c
 80024b8:	0801e77c 	.word	0x0801e77c
 80024bc:	200002b1 	.word	0x200002b1
 80024c0:	200002b0 	.word	0x200002b0
 80024c4:	200002b2 	.word	0x200002b2
 80024c8:	200002a8 	.word	0x200002a8
 80024cc:	20000000 	.word	0x20000000

080024d0 <SPI_SEND_RECV>:

#include "Task_Apps_Start.h"
#include "SPI_communication.h"


void SPI_SEND_RECV(SPI_HandleTypeDef *hspi, uint16_t *tx_ptr, uint16_t *rx_ptr, uint8_t size) {
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	70fb      	strb	r3, [r7, #3]
    uint16_t Size = size;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	827b      	strh	r3, [r7, #18]

    /* Variable used to alternate Rx and Tx during transfer */
    uint32_t txallowed = 1U;
 80024e2:	2301      	movs	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]

    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d003      	beq.n	80024fa <SPI_SEND_RECV+0x2a>
        hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2205      	movs	r2, #5
 80024f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    }

    /* Set the transaction information */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	655a      	str	r2, [r3, #84]	@ 0x54
    hspi->pRxBuffPtr = (uint8_t *)rx_ptr;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->RxXferCount = Size;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8a7a      	ldrh	r2, [r7, #18]
 800250a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferSize = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8a7a      	ldrh	r2, [r7, #18]
 8002510:	879a      	strh	r2, [r3, #60]	@ 0x3c
    hspi->pTxBuffPtr = (uint8_t *)tx_ptr;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->TxXferCount = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8a7a      	ldrh	r2, [r7, #18]
 800251c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->TxXferSize = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8a7a      	ldrh	r2, [r7, #18]
 8002522:	869a      	strh	r2, [r3, #52]	@ 0x34

    /* Init field not used in handle to zero */
    hspi->RxISR = NULL;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR = NULL;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Check if the SPI is already enabled */
    if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800253a:	2b40      	cmp	r3, #64	@ 0x40
 800253c:	d007      	beq.n	800254e <SPI_SEND_RECV+0x7e>
        /* Enable SPI peripheral */
        __HAL_SPI_ENABLE(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800254c:	601a      	str	r2, [r3, #0]
    }

    // RESET CS_PIN
    if (hspi->Instance == SPI3) {
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a3c      	ldr	r2, [pc, #240]	@ (8002644 <SPI_SEND_RECV+0x174>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d104      	bne.n	8002562 <SPI_SEND_RECV+0x92>
    	RHS_SPI_CS_Port->BSRR = (uint32_t)RHS_SPI_CS_Pin << 16U;
 8002558:	4b3b      	ldr	r3, [pc, #236]	@ (8002648 <SPI_SEND_RECV+0x178>)
 800255a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800255e:	619a      	str	r2, [r3, #24]
 8002560:	e04d      	b.n	80025fe <SPI_SEND_RECV+0x12e>
    } else if (hspi->Instance == SPI4) {
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a39      	ldr	r2, [pc, #228]	@ (800264c <SPI_SEND_RECV+0x17c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d148      	bne.n	80025fe <SPI_SEND_RECV+0x12e>
        RHD_SPI_CS_Port->BSRR = (uint32_t)RHD_SPI_CS_Pin << 16U;
 800256c:	4b38      	ldr	r3, [pc, #224]	@ (8002650 <SPI_SEND_RECV+0x180>)
 800256e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002572:	619a      	str	r2, [r3, #24]
    }

    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8002574:	e043      	b.n	80025fe <SPI_SEND_RECV+0x12e>
        /* Check TXE flag */
        if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b02      	cmp	r3, #2
 8002582:	d11b      	bne.n	80025bc <SPI_SEND_RECV+0xec>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <SPI_SEND_RECV+0xec>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d113      	bne.n	80025bc <SPI_SEND_RECV+0xec>
            hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	881a      	ldrh	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60da      	str	r2, [r3, #12]
            hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	1c9a      	adds	r2, r3, #2
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	631a      	str	r2, [r3, #48]	@ 0x30
            hspi->TxXferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	86da      	strh	r2, [r3, #54]	@ 0x36
            /* Next Data is a reception (Rx). Tx not allowed */
            txallowed = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
        }

        /* Check RXNE flag */
        if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U)) {
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d119      	bne.n	80025fe <SPI_SEND_RECV+0x12e>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d014      	beq.n	80025fe <SPI_SEND_RECV+0x12e>
            *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025de:	b292      	uxth	r2, r2
 80025e0:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e6:	1c9a      	adds	r2, r3, #2
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	639a      	str	r2, [r3, #56]	@ 0x38
            hspi->RxXferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
            /* Next Data is a Transmission (Tx). Tx is allowed */
            txallowed = 1U;
 80025fa:	2301      	movs	r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1b6      	bne.n	8002576 <SPI_SEND_RECV+0xa6>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1b1      	bne.n	8002576 <SPI_SEND_RECV+0xa6>
        }
    }

    // SET CS_PIN
    if (hspi->Instance == SPI3){
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a0b      	ldr	r2, [pc, #44]	@ (8002644 <SPI_SEND_RECV+0x174>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d103      	bne.n	8002624 <SPI_SEND_RECV+0x154>
        RHS_SPI_CS_Port->BSRR = RHS_SPI_CS_Pin;
 800261c:	4b0a      	ldr	r3, [pc, #40]	@ (8002648 <SPI_SEND_RECV+0x178>)
 800261e:	2204      	movs	r2, #4
 8002620:	619a      	str	r2, [r3, #24]
    } else if (hspi->Instance == SPI4) {
        RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
    }
}
 8002622:	e008      	b.n	8002636 <SPI_SEND_RECV+0x166>
    } else if (hspi->Instance == SPI4) {
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a08      	ldr	r2, [pc, #32]	@ (800264c <SPI_SEND_RECV+0x17c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d103      	bne.n	8002636 <SPI_SEND_RECV+0x166>
        RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
 800262e:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <SPI_SEND_RECV+0x180>)
 8002630:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002634:	619a      	str	r2, [r3, #24]
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40003c00 	.word	0x40003c00
 8002648:	40020c00 	.word	0x40020c00
 800264c:	40013400 	.word	0x40013400
 8002650:	40020400 	.word	0x40020400

08002654 <start_app_task>:




void start_app_task(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
//	INIT_TCP();

//	osTimerDef(periodicTimer, PTCallback);
//	periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);

	spi_to_wifi_queue = xQueueCreate(SPI_EVENTS_NB_MAX, sizeof(spi_to_udp_t));
 8002658:	2200      	movs	r2, #0
 800265a:	210c      	movs	r1, #12
 800265c:	2014      	movs	r0, #20
 800265e:	f009 fbc9 	bl	800bdf4 <xQueueGenericCreate>
 8002662:	4603      	mov	r3, r0
 8002664:	4a07      	ldr	r2, [pc, #28]	@ (8002684 <start_app_task+0x30>)
 8002666:	6013      	str	r3, [r2, #0]
  	if (spi_to_wifi_queue == NULL){
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <start_app_task+0x30>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <start_app_task+0x22>
  		printf("booboo Queue \r\n");
 8002670:	4805      	ldr	r0, [pc, #20]	@ (8002688 <start_app_task+0x34>)
 8002672:	f01a f945 	bl	801c900 <puts>
//  	}
//  	WIFI_MENU_INIT();
//  	TASK_UDP_TRANSMIT_INIT((void*) spi_to_wifi_queue);
//  	TASK_TCP_TRANSMIT_INIT((void*) spi_to_wifi_queue);

  	TASK_RHD_SPI_COMMUNICATION_INIT((void*) spi_to_wifi_queue);
 8002676:	4b03      	ldr	r3, [pc, #12]	@ (8002684 <start_app_task+0x30>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fbd6 	bl	8002e2c <TASK_RHD_SPI_COMMUNICATION_INIT>

//  	TASK_FPGA_COMMUNICATION_INIT((void*) spi_to_wifi_queue);

}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200002dc 	.word	0x200002dc
 8002688:	0801e8c0 	.word	0x0801e8c0

0800268c <INIT_RHD>:


void RHD_SPI_COMMUNICATION_task_entry(void const *p_arg);


void INIT_RHD(SPI_HandleTypeDef *hspi){
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	@ 0x30
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	uint16_t tx_vector;
	uint16_t rx_vector[1] = {0xFFFF};
 8002694:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002698:	82bb      	strh	r3, [r7, #20]
	uint8_t data_size = 1; //Number of Bytes to send
 800269a:	2301      	movs	r3, #1
 800269c:	77fb      	strb	r3, [r7, #31]
	uint8_t reg_address;
	uint8_t reg_value;
	uint16_t formated_value;
	uint8_t bit_shifting = 1;
 800269e:	2301      	movs	r3, #1
 80026a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	const char *rhd_versions[] = {"RHD2132", "RHD2216", "RHD2164"};
 80026a4:	4a07      	ldr	r2, [pc, #28]	@ (80026c4 <INIT_RHD+0x38>)
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const char *rhd_detected = rhd_versions[2];
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	//SET CS_PIN
	RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <INIT_RHD+0x3c>)
 80026b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026ba:	619a      	str	r2, [r3, #24]

	for (int i = 0; i<10 ; i++){
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c0:	e012      	b.n	80026e8 <INIT_RHD+0x5c>
 80026c2:	bf00      	nop
 80026c4:	0801ea78 	.word	0x0801ea78
 80026c8:	40020400 	.word	0x40020400
		// Register 63 for DUMMY READ on BOOT
		tx_vector = 0b1111111100000000;
 80026cc:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80026d0:	833b      	strh	r3, [r7, #24]
		SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80026d2:	7ffb      	ldrb	r3, [r7, #31]
 80026d4:	f107 0214 	add.w	r2, r7, #20
 80026d8:	f107 0118 	add.w	r1, r7, #24
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff fef7 	bl	80024d0 <SPI_SEND_RECV>
	for (int i = 0; i<10 ; i++){
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	3301      	adds	r3, #1
 80026e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	2b09      	cmp	r3, #9
 80026ec:	ddee      	ble.n	80026cc <INIT_RHD+0x40>

	}

	// Register 0 - ADC config.
	reg_address = 0b10000000;
 80026ee:	2380      	movs	r3, #128	@ 0x80
 80026f0:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11011110;
 80026f2:	23de      	movs	r3, #222	@ 0xde
 80026f4:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80026f6:	7fbb      	ldrb	r3, [r7, #30]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	7f7b      	ldrb	r3, [r7, #29]
 80026fe:	b21b      	sxth	r3, r3
 8002700:	4313      	orrs	r3, r2
 8002702:	b21b      	sxth	r3, r3
 8002704:	b29b      	uxth	r3, r3
 8002706:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002708:	7ffb      	ldrb	r3, [r7, #31]
 800270a:	f107 0214 	add.w	r2, r7, #20
 800270e:	f107 0118 	add.w	r1, r7, #24
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff fedc 	bl	80024d0 <SPI_SEND_RECV>

	// Register 1 - Supply sensor & ADC buffer bias current
	reg_address = 0b10000001;
 8002718:	2381      	movs	r3, #129	@ 0x81
 800271a:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00100000; //(ADC BUFFER BIAS AT 32)
 800271c:	2320      	movs	r3, #32
 800271e:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002720:	7fbb      	ldrb	r3, [r7, #30]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	b21a      	sxth	r2, r3
 8002726:	7f7b      	ldrb	r3, [r7, #29]
 8002728:	b21b      	sxth	r3, r3
 800272a:	4313      	orrs	r3, r2
 800272c:	b21b      	sxth	r3, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002732:	7ffb      	ldrb	r3, [r7, #31]
 8002734:	f107 0214 	add.w	r2, r7, #20
 8002738:	f107 0118 	add.w	r1, r7, #24
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff fec7 	bl	80024d0 <SPI_SEND_RECV>

	// Register 2 - MUX bias current
	reg_address = 0b10000010;
 8002742:	2382      	movs	r3, #130	@ 0x82
 8002744:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00101000; //(MUX BIAS AT 40)
 8002746:	2328      	movs	r3, #40	@ 0x28
 8002748:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800274a:	7fbb      	ldrb	r3, [r7, #30]
 800274c:	021b      	lsls	r3, r3, #8
 800274e:	b21a      	sxth	r2, r3
 8002750:	7f7b      	ldrb	r3, [r7, #29]
 8002752:	b21b      	sxth	r3, r3
 8002754:	4313      	orrs	r3, r2
 8002756:	b21b      	sxth	r3, r3
 8002758:	b29b      	uxth	r3, r3
 800275a:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800275c:	7ffb      	ldrb	r3, [r7, #31]
 800275e:	f107 0214 	add.w	r2, r7, #20
 8002762:	f107 0118 	add.w	r1, r7, #24
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff feb2 	bl	80024d0 <SPI_SEND_RECV>

	// Register 3 - MUX Load, Temp sensor, Aux digital output
	reg_address = 0b10000011;
 800276c:	2383      	movs	r3, #131	@ 0x83
 800276e:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000010;
 8002770:	2302      	movs	r3, #2
 8002772:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002774:	7fbb      	ldrb	r3, [r7, #30]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	b21a      	sxth	r2, r3
 800277a:	7f7b      	ldrb	r3, [r7, #29]
 800277c:	b21b      	sxth	r3, r3
 800277e:	4313      	orrs	r3, r2
 8002780:	b21b      	sxth	r3, r3
 8002782:	b29b      	uxth	r3, r3
 8002784:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002786:	7ffb      	ldrb	r3, [r7, #31]
 8002788:	f107 0214 	add.w	r2, r7, #20
 800278c:	f107 0118 	add.w	r1, r7, #24
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff fe9d 	bl	80024d0 <SPI_SEND_RECV>

	// Register 4 - ADC output format & DSP offset removal
	reg_address = 0b10000100;
 8002796:	2384      	movs	r3, #132	@ 0x84
 8002798:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11010110;
 800279a:	23d6      	movs	r3, #214	@ 0xd6
 800279c:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800279e:	7fbb      	ldrb	r3, [r7, #30]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	b21a      	sxth	r2, r3
 80027a4:	7f7b      	ldrb	r3, [r7, #29]
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80027b0:	7ffb      	ldrb	r3, [r7, #31]
 80027b2:	f107 0214 	add.w	r2, r7, #20
 80027b6:	f107 0118 	add.w	r1, r7, #24
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff fe88 	bl	80024d0 <SPI_SEND_RECV>

	// Register 5 - Impedance check control
	reg_address = 0b10000101;
 80027c0:	2385      	movs	r3, #133	@ 0x85
 80027c2:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80027c4:	2300      	movs	r3, #0
 80027c6:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80027c8:	7fbb      	ldrb	r3, [r7, #30]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	b21a      	sxth	r2, r3
 80027ce:	7f7b      	ldrb	r3, [r7, #29]
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	4313      	orrs	r3, r2
 80027d4:	b21b      	sxth	r3, r3
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80027da:	7ffb      	ldrb	r3, [r7, #31]
 80027dc:	f107 0214 	add.w	r2, r7, #20
 80027e0:	f107 0118 	add.w	r1, r7, #24
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff fe73 	bl	80024d0 <SPI_SEND_RECV>

	// Register 6 - Impedance check DAC [unchanged]
	reg_address = 0b10000110;
 80027ea:	2386      	movs	r3, #134	@ 0x86
 80027ec:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80027ee:	2300      	movs	r3, #0
 80027f0:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80027f2:	7fbb      	ldrb	r3, [r7, #30]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	7f7b      	ldrb	r3, [r7, #29]
 80027fa:	b21b      	sxth	r3, r3
 80027fc:	4313      	orrs	r3, r2
 80027fe:	b21b      	sxth	r3, r3
 8002800:	b29b      	uxth	r3, r3
 8002802:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002804:	7ffb      	ldrb	r3, [r7, #31]
 8002806:	f107 0214 	add.w	r2, r7, #20
 800280a:	f107 0118 	add.w	r1, r7, #24
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff fe5e 	bl	80024d0 <SPI_SEND_RECV>

	// Register 7 - Impedance check amplifier select [unchanged]
	reg_address = 0b10000111;
 8002814:	2387      	movs	r3, #135	@ 0x87
 8002816:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002818:	2300      	movs	r3, #0
 800281a:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800281c:	7fbb      	ldrb	r3, [r7, #30]
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	b21a      	sxth	r2, r3
 8002822:	7f7b      	ldrb	r3, [r7, #29]
 8002824:	b21b      	sxth	r3, r3
 8002826:	4313      	orrs	r3, r2
 8002828:	b21b      	sxth	r3, r3
 800282a:	b29b      	uxth	r3, r3
 800282c:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800282e:	7ffb      	ldrb	r3, [r7, #31]
 8002830:	f107 0214 	add.w	r2, r7, #20
 8002834:	f107 0118 	add.w	r1, r7, #24
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fe49 	bl	80024d0 <SPI_SEND_RECV>

	// Register 8-13 - On-chip amplifier bandwidth select
	// 	Reg. 8 -> 30
	reg_address = 0b10001000;
 800283e:	2388      	movs	r3, #136	@ 0x88
 8002840:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00011110;
 8002842:	231e      	movs	r3, #30
 8002844:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002846:	7fbb      	ldrb	r3, [r7, #30]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	b21a      	sxth	r2, r3
 800284c:	7f7b      	ldrb	r3, [r7, #29]
 800284e:	b21b      	sxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b21b      	sxth	r3, r3
 8002854:	b29b      	uxth	r3, r3
 8002856:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002858:	7ffb      	ldrb	r3, [r7, #31]
 800285a:	f107 0214 	add.w	r2, r7, #20
 800285e:	f107 0118 	add.w	r1, r7, #24
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fe34 	bl	80024d0 <SPI_SEND_RECV>

	// 	Reg. 9 -> 5
	reg_address = 0b10001001;
 8002868:	2389      	movs	r3, #137	@ 0x89
 800286a:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000101;
 800286c:	2305      	movs	r3, #5
 800286e:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002870:	7fbb      	ldrb	r3, [r7, #30]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	b21a      	sxth	r2, r3
 8002876:	7f7b      	ldrb	r3, [r7, #29]
 8002878:	b21b      	sxth	r3, r3
 800287a:	4313      	orrs	r3, r2
 800287c:	b21b      	sxth	r3, r3
 800287e:	b29b      	uxth	r3, r3
 8002880:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002882:	7ffb      	ldrb	r3, [r7, #31]
 8002884:	f107 0214 	add.w	r2, r7, #20
 8002888:	f107 0118 	add.w	r1, r7, #24
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fe1f 	bl	80024d0 <SPI_SEND_RECV>

	//	Reg. 10 -> 43
	reg_address = 0b10001010;
 8002892:	238a      	movs	r3, #138	@ 0x8a
 8002894:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00101011;
 8002896:	232b      	movs	r3, #43	@ 0x2b
 8002898:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800289a:	7fbb      	ldrb	r3, [r7, #30]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	b21a      	sxth	r2, r3
 80028a0:	7f7b      	ldrb	r3, [r7, #29]
 80028a2:	b21b      	sxth	r3, r3
 80028a4:	4313      	orrs	r3, r2
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80028ac:	7ffb      	ldrb	r3, [r7, #31]
 80028ae:	f107 0214 	add.w	r2, r7, #20
 80028b2:	f107 0118 	add.w	r1, r7, #24
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff fe0a 	bl	80024d0 <SPI_SEND_RECV>

	//	Reg. 11 -> 6
	reg_address = 0b10001011;
 80028bc:	238b      	movs	r3, #139	@ 0x8b
 80028be:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000110;
 80028c0:	2306      	movs	r3, #6
 80028c2:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80028c4:	7fbb      	ldrb	r3, [r7, #30]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	b21a      	sxth	r2, r3
 80028ca:	7f7b      	ldrb	r3, [r7, #29]
 80028cc:	b21b      	sxth	r3, r3
 80028ce:	4313      	orrs	r3, r2
 80028d0:	b21b      	sxth	r3, r3
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80028d6:	7ffb      	ldrb	r3, [r7, #31]
 80028d8:	f107 0214 	add.w	r2, r7, #20
 80028dc:	f107 0118 	add.w	r1, r7, #24
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff fdf5 	bl	80024d0 <SPI_SEND_RECV>

	// 	Reg. 12 -> 54
	reg_address = 0b10001100;
 80028e6:	238c      	movs	r3, #140	@ 0x8c
 80028e8:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00110110;
 80028ea:	2336      	movs	r3, #54	@ 0x36
 80028ec:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80028ee:	7fbb      	ldrb	r3, [r7, #30]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	b21a      	sxth	r2, r3
 80028f4:	7f7b      	ldrb	r3, [r7, #29]
 80028f6:	b21b      	sxth	r3, r3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	b21b      	sxth	r3, r3
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002900:	7ffb      	ldrb	r3, [r7, #31]
 8002902:	f107 0214 	add.w	r2, r7, #20
 8002906:	f107 0118 	add.w	r1, r7, #24
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fde0 	bl	80024d0 <SPI_SEND_RECV>

	// 	Reg. 13 -> 0
	reg_address = 0b10001101;
 8002910:	238d      	movs	r3, #141	@ 0x8d
 8002912:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002914:	2300      	movs	r3, #0
 8002916:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002918:	7fbb      	ldrb	r3, [r7, #30]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	b21a      	sxth	r2, r3
 800291e:	7f7b      	ldrb	r3, [r7, #29]
 8002920:	b21b      	sxth	r3, r3
 8002922:	4313      	orrs	r3, r2
 8002924:	b21b      	sxth	r3, r3
 8002926:	b29b      	uxth	r3, r3
 8002928:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800292a:	7ffb      	ldrb	r3, [r7, #31]
 800292c:	f107 0214 	add.w	r2, r7, #20
 8002930:	f107 0118 	add.w	r1, r7, #24
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff fdcb 	bl	80024d0 <SPI_SEND_RECV>

	// Register 14-21 - Individual amplifier power
	//	Reg. 14
	reg_address = 0b10001110;
 800293a:	238e      	movs	r3, #142	@ 0x8e
 800293c:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b111111111;
 800293e:	23ff      	movs	r3, #255	@ 0xff
 8002940:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002942:	7fbb      	ldrb	r3, [r7, #30]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	b21a      	sxth	r2, r3
 8002948:	7f7b      	ldrb	r3, [r7, #29]
 800294a:	b21b      	sxth	r3, r3
 800294c:	4313      	orrs	r3, r2
 800294e:	b21b      	sxth	r3, r3
 8002950:	b29b      	uxth	r3, r3
 8002952:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002954:	7ffb      	ldrb	r3, [r7, #31]
 8002956:	f107 0214 	add.w	r2, r7, #20
 800295a:	f107 0118 	add.w	r1, r7, #24
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff fdb6 	bl	80024d0 <SPI_SEND_RECV>

	//	Reg. 15
	reg_address = 0b10001111;
 8002964:	238f      	movs	r3, #143	@ 0x8f
 8002966:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8002968:	23ff      	movs	r3, #255	@ 0xff
 800296a:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800296c:	7fbb      	ldrb	r3, [r7, #30]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	b21a      	sxth	r2, r3
 8002972:	7f7b      	ldrb	r3, [r7, #29]
 8002974:	b21b      	sxth	r3, r3
 8002976:	4313      	orrs	r3, r2
 8002978:	b21b      	sxth	r3, r3
 800297a:	b29b      	uxth	r3, r3
 800297c:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800297e:	7ffb      	ldrb	r3, [r7, #31]
 8002980:	f107 0214 	add.w	r2, r7, #20
 8002984:	f107 0118 	add.w	r1, r7, #24
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff fda1 	bl	80024d0 <SPI_SEND_RECV>

	//	Reg. 16
	reg_address = 0b10010000;
 800298e:	2390      	movs	r3, #144	@ 0x90
 8002990:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8002992:	23ff      	movs	r3, #255	@ 0xff
 8002994:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002996:	7fbb      	ldrb	r3, [r7, #30]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	b21a      	sxth	r2, r3
 800299c:	7f7b      	ldrb	r3, [r7, #29]
 800299e:	b21b      	sxth	r3, r3
 80029a0:	4313      	orrs	r3, r2
 80029a2:	b21b      	sxth	r3, r3
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80029a8:	7ffb      	ldrb	r3, [r7, #31]
 80029aa:	f107 0214 	add.w	r2, r7, #20
 80029ae:	f107 0118 	add.w	r1, r7, #24
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fd8c 	bl	80024d0 <SPI_SEND_RECV>

	//	Reg. 17
	reg_address = 0b10010001;
 80029b8:	2391      	movs	r3, #145	@ 0x91
 80029ba:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 80029bc:	23ff      	movs	r3, #255	@ 0xff
 80029be:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80029c0:	7fbb      	ldrb	r3, [r7, #30]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	b21a      	sxth	r2, r3
 80029c6:	7f7b      	ldrb	r3, [r7, #29]
 80029c8:	b21b      	sxth	r3, r3
 80029ca:	4313      	orrs	r3, r2
 80029cc:	b21b      	sxth	r3, r3
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80029d2:	7ffb      	ldrb	r3, [r7, #31]
 80029d4:	f107 0214 	add.w	r2, r7, #20
 80029d8:	f107 0118 	add.w	r1, r7, #24
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff fd77 	bl	80024d0 <SPI_SEND_RECV>

	//	Reg. 18
	reg_address = 0b10010010;
 80029e2:	2392      	movs	r3, #146	@ 0x92
 80029e4:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 80029e6:	23ff      	movs	r3, #255	@ 0xff
 80029e8:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80029ea:	7fbb      	ldrb	r3, [r7, #30]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	b21a      	sxth	r2, r3
 80029f0:	7f7b      	ldrb	r3, [r7, #29]
 80029f2:	b21b      	sxth	r3, r3
 80029f4:	4313      	orrs	r3, r2
 80029f6:	b21b      	sxth	r3, r3
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80029fc:	7ffb      	ldrb	r3, [r7, #31]
 80029fe:	f107 0214 	add.w	r2, r7, #20
 8002a02:	f107 0118 	add.w	r1, r7, #24
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fd62 	bl	80024d0 <SPI_SEND_RECV>

	//	Reg. 19
	reg_address = 0b10010011;
 8002a0c:	2393      	movs	r3, #147	@ 0x93
 8002a0e:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8002a10:	23ff      	movs	r3, #255	@ 0xff
 8002a12:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002a14:	7fbb      	ldrb	r3, [r7, #30]
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	b21a      	sxth	r2, r3
 8002a1a:	7f7b      	ldrb	r3, [r7, #29]
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002a26:	7ffb      	ldrb	r3, [r7, #31]
 8002a28:	f107 0214 	add.w	r2, r7, #20
 8002a2c:	f107 0118 	add.w	r1, r7, #24
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fd4d 	bl	80024d0 <SPI_SEND_RECV>

	//	Reg. 20
	reg_address = 0b10010100;
 8002a36:	2394      	movs	r3, #148	@ 0x94
 8002a38:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8002a3a:	23ff      	movs	r3, #255	@ 0xff
 8002a3c:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002a3e:	7fbb      	ldrb	r3, [r7, #30]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	b21a      	sxth	r2, r3
 8002a44:	7f7b      	ldrb	r3, [r7, #29]
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	b21b      	sxth	r3, r3
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002a50:	7ffb      	ldrb	r3, [r7, #31]
 8002a52:	f107 0214 	add.w	r2, r7, #20
 8002a56:	f107 0118 	add.w	r1, r7, #24
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff fd38 	bl	80024d0 <SPI_SEND_RECV>

	//	Reg. 21
	reg_address = 0b10010101;
 8002a60:	2395      	movs	r3, #149	@ 0x95
 8002a62:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8002a64:	23ff      	movs	r3, #255	@ 0xff
 8002a66:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002a68:	7fbb      	ldrb	r3, [r7, #30]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	b21a      	sxth	r2, r3
 8002a6e:	7f7b      	ldrb	r3, [r7, #29]
 8002a70:	b21b      	sxth	r3, r3
 8002a72:	4313      	orrs	r3, r2
 8002a74:	b21b      	sxth	r3, r3
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002a7a:	7ffb      	ldrb	r3, [r7, #31]
 8002a7c:	f107 0214 	add.w	r2, r7, #20
 8002a80:	f107 0118 	add.w	r1, r7, #24
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff fd23 	bl	80024d0 <SPI_SEND_RECV>

	// Calibrate ADC
	HAL_Delay(100);
 8002a8a:	2064      	movs	r0, #100	@ 0x64
 8002a8c:	f003 f8f8 	bl	8005c80 <HAL_Delay>
	reg_address = 0b01010101;
 8002a90:	2355      	movs	r3, #85	@ 0x55
 8002a92:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002a94:	2300      	movs	r3, #0
 8002a96:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002a98:	7fbb      	ldrb	r3, [r7, #30]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	b21a      	sxth	r2, r3
 8002a9e:	7f7b      	ldrb	r3, [r7, #29]
 8002aa0:	b21b      	sxth	r3, r3
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b21b      	sxth	r3, r3
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002aaa:	7ffb      	ldrb	r3, [r7, #31]
 8002aac:	f107 0214 	add.w	r2, r7, #20
 8002ab0:	f107 0118 	add.w	r1, r7, #24
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff fd0b 	bl	80024d0 <SPI_SEND_RECV>

	for (int i = 0; i<9 ; i++){
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	e017      	b.n	8002af0 <INIT_RHD+0x464>
		// Register 63 for DUMMY READ on BOOT
		reg_address = 0b11111111;
 8002ac0:	23ff      	movs	r3, #255	@ 0xff
 8002ac2:	77bb      	strb	r3, [r7, #30]
		reg_value = 0b00000000;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	777b      	strb	r3, [r7, #29]
		tx_vector = (reg_address << 8) | reg_value;
 8002ac8:	7fbb      	ldrb	r3, [r7, #30]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	b21a      	sxth	r2, r3
 8002ace:	7f7b      	ldrb	r3, [r7, #29]
 8002ad0:	b21b      	sxth	r3, r3
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	b21b      	sxth	r3, r3
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	833b      	strh	r3, [r7, #24]
		SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002ada:	7ffb      	ldrb	r3, [r7, #31]
 8002adc:	f107 0214 	add.w	r2, r7, #20
 8002ae0:	f107 0118 	add.w	r1, r7, #24
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fcf3 	bl	80024d0 <SPI_SEND_RECV>
	for (int i = 0; i<9 ; i++){
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	3301      	adds	r3, #1
 8002aee:	623b      	str	r3, [r7, #32]
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	dde4      	ble.n	8002ac0 <INIT_RHD+0x434>

	}

	//Read Register 59 MISO MARKER
	reg_address = 0b11111011;
 8002af6:	23fb      	movs	r3, #251	@ 0xfb
 8002af8:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002afa:	2300      	movs	r3, #0
 8002afc:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002afe:	7fbb      	ldrb	r3, [r7, #30]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	b21a      	sxth	r2, r3
 8002b04:	7f7b      	ldrb	r3, [r7, #29]
 8002b06:	b21b      	sxth	r3, r3
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	b21b      	sxth	r3, r3
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002b10:	7ffb      	ldrb	r3, [r7, #31]
 8002b12:	f107 0214 	add.w	r2, r7, #20
 8002b16:	f107 0118 	add.w	r1, r7, #24
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fcd8 	bl	80024d0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002b20:	8abb      	ldrh	r3, [r7, #20]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	837b      	strh	r3, [r7, #26]

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 8002b2e:	23ff      	movs	r3, #255	@ 0xff
 8002b30:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002b32:	2300      	movs	r3, #0
 8002b34:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002b36:	7fbb      	ldrb	r3, [r7, #30]
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	b21a      	sxth	r2, r3
 8002b3c:	7f7b      	ldrb	r3, [r7, #29]
 8002b3e:	b21b      	sxth	r3, r3
 8002b40:	4313      	orrs	r3, r2
 8002b42:	b21b      	sxth	r3, r3
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002b48:	7ffb      	ldrb	r3, [r7, #31]
 8002b4a:	f107 0214 	add.w	r2, r7, #20
 8002b4e:	f107 0118 	add.w	r1, r7, #24
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fcbc 	bl	80024d0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002b58:	8abb      	ldrh	r3, [r7, #20]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	837b      	strh	r3, [r7, #26]

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 8002b66:	23ff      	movs	r3, #255	@ 0xff
 8002b68:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002b6e:	7fbb      	ldrb	r3, [r7, #30]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	b21a      	sxth	r2, r3
 8002b74:	7f7b      	ldrb	r3, [r7, #29]
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
 8002b82:	f107 0214 	add.w	r2, r7, #20
 8002b86:	f107 0118 	add.w	r1, r7, #24
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff fca0 	bl	80024d0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002b90:	8abb      	ldrh	r3, [r7, #20]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - MISO MARKER :   %c - 0x%04X \r\n", (int)formated_value, formated_value);
 8002b9e:	8b7b      	ldrh	r3, [r7, #26]
 8002ba0:	8b7a      	ldrh	r2, [r7, #26]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4899      	ldr	r0, [pc, #612]	@ (8002e0c <INIT_RHD+0x780>)
 8002ba6:	f019 fe43 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002baa:	4899      	ldr	r0, [pc, #612]	@ (8002e10 <INIT_RHD+0x784>)
 8002bac:	f019 fea8 	bl	801c900 <puts>

	if (formated_value == 0x00){
 8002bb0:	8b7b      	ldrh	r3, [r7, #26]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d108      	bne.n	8002bc8 <INIT_RHD+0x53c>
		bit_shifting = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		printf("Shifting Bit to 0 \r\n");
 8002bbc:	4895      	ldr	r0, [pc, #596]	@ (8002e14 <INIT_RHD+0x788>)
 8002bbe:	f019 fe9f 	bl	801c900 <puts>
		printf("------------------------------------------------  \r\n");
 8002bc2:	4893      	ldr	r0, [pc, #588]	@ (8002e10 <INIT_RHD+0x784>)
 8002bc4:	f019 fe9c 	bl	801c900 <puts>
	}

	//Read Register 40
	reg_address = 0b11101000;
 8002bc8:	23e8      	movs	r3, #232	@ 0xe8
 8002bca:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002bd0:	7fbb      	ldrb	r3, [r7, #30]
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	b21a      	sxth	r2, r3
 8002bd6:	7f7b      	ldrb	r3, [r7, #29]
 8002bd8:	b21b      	sxth	r3, r3
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	b21b      	sxth	r3, r3
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	833b      	strh	r3, [r7, #24]
 	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002be2:	7ffb      	ldrb	r3, [r7, #31]
 8002be4:	f107 0214 	add.w	r2, r7, #20
 8002be8:	f107 0118 	add.w	r1, r7, #24
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fc6f 	bl	80024d0 <SPI_SEND_RECV>

	//Read Register 41
	reg_address = 0b11101001;
 8002bf2:	23e9      	movs	r3, #233	@ 0xe9
 8002bf4:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002bfa:	7fbb      	ldrb	r3, [r7, #30]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	b21a      	sxth	r2, r3
 8002c00:	7f7b      	ldrb	r3, [r7, #29]
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	b21b      	sxth	r3, r3
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);;
 8002c0c:	7ffb      	ldrb	r3, [r7, #31]
 8002c0e:	f107 0214 	add.w	r2, r7, #20
 8002c12:	f107 0118 	add.w	r1, r7, #24
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fc5a 	bl	80024d0 <SPI_SEND_RECV>

	//Read Register 42
	reg_address = 0b11101010;
 8002c1c:	23ea      	movs	r3, #234	@ 0xea
 8002c1e:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002c20:	2300      	movs	r3, #0
 8002c22:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002c24:	7fbb      	ldrb	r3, [r7, #30]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	b21a      	sxth	r2, r3
 8002c2a:	7f7b      	ldrb	r3, [r7, #29]
 8002c2c:	b21b      	sxth	r3, r3
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	b21b      	sxth	r3, r3
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002c36:	7ffb      	ldrb	r3, [r7, #31]
 8002c38:	f107 0214 	add.w	r2, r7, #20
 8002c3c:	f107 0118 	add.w	r1, r7, #24
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff fc45 	bl	80024d0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002c46:	8abb      	ldrh	r3, [r7, #20]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be I :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8002c54:	8b7b      	ldrh	r3, [r7, #26]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	4619      	mov	r1, r3
 8002c5a:	8b7b      	ldrh	r3, [r7, #26]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	486e      	ldr	r0, [pc, #440]	@ (8002e18 <INIT_RHD+0x78c>)
 8002c60:	f019 fde6 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002c64:	486a      	ldr	r0, [pc, #424]	@ (8002e10 <INIT_RHD+0x784>)
 8002c66:	f019 fe4b 	bl	801c900 <puts>

	//Read Register 43
	reg_address = 0b11101011;
 8002c6a:	23eb      	movs	r3, #235	@ 0xeb
 8002c6c:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002c72:	7fbb      	ldrb	r3, [r7, #30]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	b21a      	sxth	r2, r3
 8002c78:	7f7b      	ldrb	r3, [r7, #29]
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	b21b      	sxth	r3, r3
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002c84:	7ffb      	ldrb	r3, [r7, #31]
 8002c86:	f107 0214 	add.w	r2, r7, #20
 8002c8a:	f107 0118 	add.w	r1, r7, #24
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff fc1e 	bl	80024d0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002c94:	8abb      	ldrh	r3, [r7, #20]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be N :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8002ca2:	8b7b      	ldrh	r3, [r7, #26]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	8b7b      	ldrh	r3, [r7, #26]
 8002caa:	461a      	mov	r2, r3
 8002cac:	485b      	ldr	r0, [pc, #364]	@ (8002e1c <INIT_RHD+0x790>)
 8002cae:	f019 fdbf 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002cb2:	4857      	ldr	r0, [pc, #348]	@ (8002e10 <INIT_RHD+0x784>)
 8002cb4:	f019 fe24 	bl	801c900 <puts>

	//Read Register 44
	reg_address = 0b11101100;
 8002cb8:	23ec      	movs	r3, #236	@ 0xec
 8002cba:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002cc0:	7fbb      	ldrb	r3, [r7, #30]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	b21a      	sxth	r2, r3
 8002cc6:	7f7b      	ldrb	r3, [r7, #29]
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002cd2:	7ffb      	ldrb	r3, [r7, #31]
 8002cd4:	f107 0214 	add.w	r2, r7, #20
 8002cd8:	f107 0118 	add.w	r1, r7, #24
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff fbf7 	bl	80024d0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002ce2:	8abb      	ldrh	r3, [r7, #20]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be T :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8002cf0:	8b7b      	ldrh	r3, [r7, #26]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	8b7b      	ldrh	r3, [r7, #26]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4849      	ldr	r0, [pc, #292]	@ (8002e20 <INIT_RHD+0x794>)
 8002cfc:	f019 fd98 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002d00:	4843      	ldr	r0, [pc, #268]	@ (8002e10 <INIT_RHD+0x784>)
 8002d02:	f019 fdfd 	bl	801c900 <puts>


	//Read Register 63
	reg_address = 0b11111111;
 8002d06:	23ff      	movs	r3, #255	@ 0xff
 8002d08:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002d0e:	7fbb      	ldrb	r3, [r7, #30]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	b21a      	sxth	r2, r3
 8002d14:	7f7b      	ldrb	r3, [r7, #29]
 8002d16:	b21b      	sxth	r3, r3
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	b21b      	sxth	r3, r3
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002d20:	7ffb      	ldrb	r3, [r7, #31]
 8002d22:	f107 0214 	add.w	r2, r7, #20
 8002d26:	f107 0118 	add.w	r1, r7, #24
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff fbd0 	bl	80024d0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002d30:	8abb      	ldrh	r3, [r7, #20]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be A :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8002d3e:	8b7b      	ldrh	r3, [r7, #26]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	4619      	mov	r1, r3
 8002d44:	8b7b      	ldrh	r3, [r7, #26]
 8002d46:	461a      	mov	r2, r3
 8002d48:	4836      	ldr	r0, [pc, #216]	@ (8002e24 <INIT_RHD+0x798>)
 8002d4a:	f019 fd71 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002d4e:	4830      	ldr	r0, [pc, #192]	@ (8002e10 <INIT_RHD+0x784>)
 8002d50:	f019 fdd6 	bl	801c900 <puts>

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 8002d54:	23ff      	movs	r3, #255	@ 0xff
 8002d56:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002d5c:	7fbb      	ldrb	r3, [r7, #30]
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	b21a      	sxth	r2, r3
 8002d62:	7f7b      	ldrb	r3, [r7, #29]
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002d6e:	7ffb      	ldrb	r3, [r7, #31]
 8002d70:	f107 0214 	add.w	r2, r7, #20
 8002d74:	f107 0118 	add.w	r1, r7, #24
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff fba9 	bl	80024d0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002d7e:	8abb      	ldrh	r3, [r7, #20]
 8002d80:	461a      	mov	r2, r3
 8002d82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be N :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8002d8c:	8b7b      	ldrh	r3, [r7, #26]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	4619      	mov	r1, r3
 8002d92:	8b7b      	ldrh	r3, [r7, #26]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4821      	ldr	r0, [pc, #132]	@ (8002e1c <INIT_RHD+0x790>)
 8002d98:	f019 fd4a 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002d9c:	481c      	ldr	r0, [pc, #112]	@ (8002e10 <INIT_RHD+0x784>)
 8002d9e:	f019 fdaf 	bl	801c900 <puts>

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 8002da2:	23ff      	movs	r3, #255	@ 0xff
 8002da4:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002da6:	2300      	movs	r3, #0
 8002da8:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002daa:	7fbb      	ldrb	r3, [r7, #30]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	b21a      	sxth	r2, r3
 8002db0:	7f7b      	ldrb	r3, [r7, #29]
 8002db2:	b21b      	sxth	r3, r3
 8002db4:	4313      	orrs	r3, r2
 8002db6:	b21b      	sxth	r3, r3
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
 8002dbe:	f107 0214 	add.w	r2, r7, #20
 8002dc2:	f107 0118 	add.w	r1, r7, #24
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff fb82 	bl	80024d0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002dcc:	8abb      	ldrh	r3, [r7, #20]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	837b      	strh	r3, [r7, #26]

	if (formated_value == 0x01){
 8002dda:	8b7b      	ldrh	r3, [r7, #26]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d102      	bne.n	8002de6 <INIT_RHD+0x75a>
		rhd_detected = rhd_versions[0];
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002de4:	e004      	b.n	8002df0 <INIT_RHD+0x764>
	}
	else if (formated_value == 0x02){
 8002de6:	8b7b      	ldrh	r3, [r7, #26]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d101      	bne.n	8002df0 <INIT_RHD+0x764>
		rhd_detected = rhd_versions[1];
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	printf("Char Receiving Data - CHIP ID : %s - 0x%04X \r\n", rhd_detected, formated_value);
 8002df0:	8b7b      	ldrh	r3, [r7, #26]
 8002df2:	461a      	mov	r2, r3
 8002df4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002df6:	480c      	ldr	r0, [pc, #48]	@ (8002e28 <INIT_RHD+0x79c>)
 8002df8:	f019 fd1a 	bl	801c830 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002dfc:	4804      	ldr	r0, [pc, #16]	@ (8002e10 <INIT_RHD+0x784>)
 8002dfe:	f019 fd7f 	bl	801c900 <puts>

 }
 8002e02:	bf00      	nop
 8002e04:	3730      	adds	r7, #48	@ 0x30
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	0801e8d0 	.word	0x0801e8d0
 8002e10:	0801e908 	.word	0x0801e908
 8002e14:	0801e93c 	.word	0x0801e93c
 8002e18:	0801e950 	.word	0x0801e950
 8002e1c:	0801e988 	.word	0x0801e988
 8002e20:	0801e9c0 	.word	0x0801e9c0
 8002e24:	0801e9f8 	.word	0x0801e9f8
 8002e28:	0801ea30 	.word	0x0801ea30

08002e2c <TASK_RHD_SPI_COMMUNICATION_INIT>:




void TASK_RHD_SPI_COMMUNICATION_INIT (void *arg) {
 8002e2c:	b5b0      	push	{r4, r5, r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	//CREATE xQueue
	printf("Starting RHD Task \r\n");
 8002e34:	480d      	ldr	r0, [pc, #52]	@ (8002e6c <TASK_RHD_SPI_COMMUNICATION_INIT+0x40>)
 8002e36:	f019 fd63 	bl	801c900 <puts>
	osThreadDef(RHD64_SPI_handle, RHD_SPI_COMMUNICATION_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*10);
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e70 <TASK_RHD_SPI_COMMUNICATION_INIT+0x44>)
 8002e3c:	f107 040c 	add.w	r4, r7, #12
 8002e40:	461d      	mov	r5, r3
 8002e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e46:	682b      	ldr	r3, [r5, #0]
 8002e48:	6023      	str	r3, [r4, #0]

	if (osThreadCreate(osThread(RHD64_SPI_handle), (void *)arg) == NULL){
 8002e4a:	f107 030c 	add.w	r3, r7, #12
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f008 fb4c 	bl	800b4ee <osThreadCreate>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <TASK_RHD_SPI_COMMUNICATION_INIT+0x36>
		printf("Booboo created SPI task \r\n");
 8002e5c:	4805      	ldr	r0, [pc, #20]	@ (8002e74 <TASK_RHD_SPI_COMMUNICATION_INIT+0x48>)
 8002e5e:	f019 fd4f 	bl	801c900 <puts>
	}
}
 8002e62:	bf00      	nop
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bdb0      	pop	{r4, r5, r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	0801ea84 	.word	0x0801ea84
 8002e70:	0801eac8 	.word	0x0801eac8
 8002e74:	0801ea98 	.word	0x0801ea98

08002e78 <RHD_SPI_COMMUNICATION_task_entry>:

void RHD_SPI_COMMUNICATION_task_entry(void const *arg){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b0ac      	sub	sp, #176	@ 0xb0
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	uint8_t DATA_CH0[2];
	uint8_t DATA_CH32[2];

	uint16_t UDP_vector[32][2];

	uint16_t counter = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

	spi_to_udp_t spi_message = {0};
 8002e86:	f107 0308 	add.w	r3, r7, #8
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]

	SPI_HandleTypeDef *hspi;

	printf("Init RHD \r\n");
 8002e92:	482a      	ldr	r0, [pc, #168]	@ (8002f3c <RHD_SPI_COMMUNICATION_task_entry+0xc4>)
 8002e94:	f019 fd34 	bl	801c900 <puts>
	hspi = &hspi4;
 8002e98:	4b29      	ldr	r3, [pc, #164]	@ (8002f40 <RHD_SPI_COMMUNICATION_task_entry+0xc8>)
 8002e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	//Activate SPI
	SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8002e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eb0:	601a      	str	r2, [r3, #0]
	//Activating the 16bit data mode
	hspi->Instance->CR1 |= SPI_CR1_DFF;
 8002eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ec4:	601a      	str	r2, [r3, #0]
	INIT_RHD(hspi);
 8002ec6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002eca:	f7ff fbdf 	bl	800268c <INIT_RHD>


	printf("Init RHS \r\n");
 8002ece:	481d      	ldr	r0, [pc, #116]	@ (8002f44 <RHD_SPI_COMMUNICATION_task_entry+0xcc>)
 8002ed0:	f019 fd16 	bl	801c900 <puts>
	hspi = &hspi3;
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <RHD_SPI_COMMUNICATION_task_entry+0xd0>)
 8002ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8002eda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eec:	601a      	str	r2, [r3, #0]
	hspi->Instance->CR1 |= SPI_CR1_DFF;
 8002eee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f00:	601a      	str	r2, [r3, #0]
	INIT_RHS(hspi);
 8002f02:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002f06:	f7fe fc9d 	bl	8001844 <INIT_RHS>
//		FULL_TASK_SCOPE_Port->BSRR = FULL_TASK_SCOPE_Pin;
//		//SET SPI_TASK_Scope_Pin
//		SPI_TASK_SCOPE_Port->BSRR = SPI_TASK_SCOPE_Pin;
//
//		spi_message.buffer = (void*)transmit_vector;
		if (spi_flag){
 8002f0a:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <RHD_SPI_COMMUNICATION_task_entry+0xd4>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d010      	beq.n	8002f34 <RHD_SPI_COMMUNICATION_task_entry+0xbc>
			if (arg != 0){
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f8      	beq.n	8002f0a <RHD_SPI_COMMUNICATION_task_entry+0x92>

				if(xQueueSend((QueueHandle_t)arg,
 8002f18:	f107 0108 	add.w	r1, r7, #8
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	220a      	movs	r2, #10
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f008 ffef 	bl	800bf04 <xQueueGenericSend>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d0ee      	beq.n	8002f0a <RHD_SPI_COMMUNICATION_task_entry+0x92>
							 (void *)&spi_message,
							 (TickType_t)10) != pdPASS)
				{
					printf("problem in queueSend \r\n");
 8002f2c:	4808      	ldr	r0, [pc, #32]	@ (8002f50 <RHD_SPI_COMMUNICATION_task_entry+0xd8>)
 8002f2e:	f019 fce7 	bl	801c900 <puts>
 8002f32:	e7ea      	b.n	8002f0a <RHD_SPI_COMMUNICATION_task_entry+0x92>
				//RESET SPI_TASK_Scope_Pin
//				SPI_TASK_SCOPE_Port->BSRR = (uint32_t)SPI_TASK_SCOPE_Pin << 16U;
			}
		}
		else{
			vTaskDelay(1);
 8002f34:	2001      	movs	r0, #1
 8002f36:	f00a f81d 	bl	800cf74 <vTaskDelay>
		if (spi_flag){
 8002f3a:	e7e6      	b.n	8002f0a <RHD_SPI_COMMUNICATION_task_entry+0x92>
 8002f3c:	0801eadc 	.word	0x0801eadc
 8002f40:	200009ac 	.word	0x200009ac
 8002f44:	0801eae8 	.word	0x0801eae8
 8002f48:	20000954 	.word	0x20000954
 8002f4c:	200002e0 	.word	0x200002e0
 8002f50:	0801eaf4 	.word	0x0801eaf4

08002f54 <from_hex>:
 *
 * @param ch Character to convert to integer.
 * @returns Returns integer result.
 ******************************************************************************/
char from_hex(char ch)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) ? ch - '0' : tolower(ch) - 'a' + 10;
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	3301      	adds	r3, #1
 8002f62:	4a11      	ldr	r2, [pc, #68]	@ (8002fa8 <from_hex+0x54>)
 8002f64:	4413      	add	r3, r2
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <from_hex+0x24>
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	3b30      	subs	r3, #48	@ 0x30
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e011      	b.n	8002f9c <from_hex+0x48>
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	4a09      	ldr	r2, [pc, #36]	@ (8002fa8 <from_hex+0x54>)
 8002f82:	4413      	add	r3, r2
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d102      	bne.n	8002f94 <from_hex+0x40>
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	3320      	adds	r3, #32
 8002f92:	e000      	b.n	8002f96 <from_hex+0x42>
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	3b57      	subs	r3, #87	@ 0x57
 8002f9a:	b2db      	uxtb	r3, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	0806e21f 	.word	0x0806e21f

08002fac <url_decode>:
 *
 * @param str String to decode.
 * @returns Success or fail.
 ******************************************************************************/
sl_status_t url_decode(char *str)
{
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b095      	sub	sp, #84	@ 0x54
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  char *pstr = str, rstr[64];
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int i = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (strlen(str) > 64) {
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7fd f96f 	bl	80002a0 <strlen>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b40      	cmp	r3, #64	@ 0x40
 8002fc6:	d947      	bls.n	8003058 <url_decode+0xac>
    return SL_STATUS_FAIL;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e056      	b.n	800307a <url_decode+0xce>
  }

  while (*pstr) {
    if (*pstr == '%') {
 8002fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b25      	cmp	r3, #37	@ 0x25
 8002fd2:	d128      	bne.n	8003026 <url_decode+0x7a>
      if (pstr[1] && pstr[2]) {
 8002fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d039      	beq.n	8003052 <url_decode+0xa6>
 8002fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d034      	beq.n	8003052 <url_decode+0xa6>
        rstr[i++] = from_hex(pstr[1]) << 4 | from_hex(pstr[2]);
 8002fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fea:	3301      	adds	r3, #1
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ffb0 	bl	8002f54 <from_hex>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	b25c      	sxtb	r4, r3
 8002ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ffa7 	bl	8002f54 <from_hex>
 8003006:	4603      	mov	r3, r0
 8003008:	b25b      	sxtb	r3, r3
 800300a:	4323      	orrs	r3, r4
 800300c:	b259      	sxtb	r1, r3
 800300e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003014:	b2ca      	uxtb	r2, r1
 8003016:	3350      	adds	r3, #80	@ 0x50
 8003018:	443b      	add	r3, r7
 800301a:	f803 2c48 	strb.w	r2, [r3, #-72]
        pstr += 2;
 800301e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003020:	3302      	adds	r3, #2
 8003022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003024:	e015      	b.n	8003052 <url_decode+0xa6>
      }
    } else if (*pstr == '+') {
 8003026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b2b      	cmp	r3, #43	@ 0x2b
 800302c:	d108      	bne.n	8003040 <url_decode+0x94>
      rstr[i++]  = ' ';
 800302e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003034:	3350      	adds	r3, #80	@ 0x50
 8003036:	443b      	add	r3, r7
 8003038:	2220      	movs	r2, #32
 800303a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800303e:	e008      	b.n	8003052 <url_decode+0xa6>
    } else {
      rstr[i++] = *pstr;
 8003040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003046:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003048:	7812      	ldrb	r2, [r2, #0]
 800304a:	3350      	adds	r3, #80	@ 0x50
 800304c:	443b      	add	r3, r7
 800304e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
    pstr++;
 8003052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003054:	3301      	adds	r3, #1
 8003056:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (*pstr) {
 8003058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1b5      	bne.n	8002fcc <url_decode+0x20>
  }
  rstr[i] = '\0';
 8003060:	f107 0208 	add.w	r2, r7, #8
 8003064:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003066:	4413      	add	r3, r2
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
  strcpy(str, &rstr[0]);
 800306c:	f107 0308 	add.w	r3, r7, #8
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f019 fdf3 	bl	801cc5e <strcpy>
  return SL_STATUS_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3754      	adds	r7, #84	@ 0x54
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}
	...

08003084 <wifi_autoconnexion_init>:



void wifi_autoconnexion_init(void)
{
 8003084:	b5b0      	push	{r4, r5, r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0

	osThreadDef(autoconnect_task, wifi_station_connect_task_entry, osPriorityBelowNormal, 0, 1024);
 800308a:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <wifi_autoconnexion_init+0x28>)
 800308c:	1d3c      	adds	r4, r7, #4
 800308e:	461d      	mov	r5, r3
 8003090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003094:	682b      	ldr	r3, [r5, #0]
 8003096:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(autoconnect_task), NULL);
 8003098:	1d3b      	adds	r3, r7, #4
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f008 fa26 	bl	800b4ee <osThreadCreate>

}
 80030a2:	bf00      	nop
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bdb0      	pop	{r4, r5, r7, pc}
 80030aa:	bf00      	nop
 80030ac:	0801eb20 	.word	0x0801eb20

080030b0 <wifi_station_connect_task_entry>:

/***************************************************************************//**
 * @brief Web server CGI handler to start the station interface.
 ******************************************************************************/
void wifi_station_connect_task_entry(const void *args)
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b097      	sub	sp, #92	@ 0x5c
 80030b4:	af08      	add	r7, sp, #32
 80030b6:	6078      	str	r0, [r7, #4]
  sl_status_t status;
  int num_params = 3;
 80030b8:	2303      	movs	r3, #3
 80030ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  char *pc_param[] ={"ssid", "pwd", "secu"," "};
 80030bc:	4b58      	ldr	r3, [pc, #352]	@ (8003220 <wifi_station_connect_task_entry+0x170>)
 80030be:	f107 0418 	add.w	r4, r7, #24
 80030c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char *pc_value[] ={WLAN_SSID_DEFAULT, WLAN_PASSKEY_DEFAULT, "WPA2"," "};
 80030c8:	4b56      	ldr	r3, [pc, #344]	@ (8003224 <wifi_station_connect_task_entry+0x174>)
 80030ca:	f107 0408 	add.w	r4, r7, #8
 80030ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  int ssid_length = 0, passkey_length = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80030d8:	2300      	movs	r3, #0
 80030da:	633b      	str	r3, [r7, #48]	@ 0x30

  if (num_params == 3) {
 80030dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030de:	2b03      	cmp	r3, #3
 80030e0:	f040 8096 	bne.w	8003210 <wifi_station_connect_task_entry+0x160>
    if (strcmp(pc_param[0], "ssid") == 0)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	4950      	ldr	r1, [pc, #320]	@ (8003228 <wifi_station_connect_task_entry+0x178>)
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd f879 	bl	80001e0 <strcmp>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d114      	bne.n	800311e <wifi_station_connect_task_entry+0x6e>
    {
      url_decode(pc_value[0]);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff ff58 	bl	8002fac <url_decode>
      ssid_length = strlen(pc_value[0]);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd f8ce 	bl	80002a0 <strlen>
 8003104:	4603      	mov	r3, r0
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34
      memset(wlan_ssid, 0, 32);
 8003108:	2220      	movs	r2, #32
 800310a:	2100      	movs	r1, #0
 800310c:	4847      	ldr	r0, [pc, #284]	@ (800322c <wifi_station_connect_task_entry+0x17c>)
 800310e:	f019 fcf1 	bl	801caf4 <memset>
      strncpy(wlan_ssid, pc_value[0], ssid_length);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003116:	4619      	mov	r1, r3
 8003118:	4844      	ldr	r0, [pc, #272]	@ (800322c <wifi_station_connect_task_entry+0x17c>)
 800311a:	f019 fd05 	bl	801cb28 <strncpy>
    }
    if (strcmp(pc_param[1], "pwd") == 0)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	4943      	ldr	r1, [pc, #268]	@ (8003230 <wifi_station_connect_task_entry+0x180>)
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd f85c 	bl	80001e0 <strcmp>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d114      	bne.n	8003158 <wifi_station_connect_task_entry+0xa8>
    {
      url_decode(pc_value[1]);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff3b 	bl	8002fac <url_decode>
      passkey_length = strlen(pc_value[1]);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd f8b1 	bl	80002a0 <strlen>
 800313e:	4603      	mov	r3, r0
 8003140:	633b      	str	r3, [r7, #48]	@ 0x30
      memset(wlan_passkey, 0, 64);
 8003142:	2240      	movs	r2, #64	@ 0x40
 8003144:	2100      	movs	r1, #0
 8003146:	483b      	ldr	r0, [pc, #236]	@ (8003234 <wifi_station_connect_task_entry+0x184>)
 8003148:	f019 fcd4 	bl	801caf4 <memset>
      strncpy(wlan_passkey, pc_value[1], passkey_length);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003150:	4619      	mov	r1, r3
 8003152:	4838      	ldr	r0, [pc, #224]	@ (8003234 <wifi_station_connect_task_entry+0x184>)
 8003154:	f019 fce8 	bl	801cb28 <strncpy>
    }
    if (strcmp(pc_param[2], "secu") == 0)
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	4937      	ldr	r1, [pc, #220]	@ (8003238 <wifi_station_connect_task_entry+0x188>)
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd f83f 	bl	80001e0 <strcmp>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d12e      	bne.n	80031c6 <wifi_station_connect_task_entry+0x116>
    {
      url_decode(pc_value[2]);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ff1e 	bl	8002fac <url_decode>
      if ((strcmp(pc_value[2], "WPA2") == 0) || (strcmp(pc_value[2], "WPA") == 0))
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4932      	ldr	r1, [pc, #200]	@ (800323c <wifi_station_connect_task_entry+0x18c>)
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f833 	bl	80001e0 <strcmp>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <wifi_station_connect_task_entry+0xe0>
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	492f      	ldr	r1, [pc, #188]	@ (8003240 <wifi_station_connect_task_entry+0x190>)
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f82b 	bl	80001e0 <strcmp>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <wifi_station_connect_task_entry+0xe8>
      {
        wlan_security = WFM_SECURITY_MODE_WPA2_WPA1_PSK;
 8003190:	4b2c      	ldr	r3, [pc, #176]	@ (8003244 <wifi_station_connect_task_entry+0x194>)
 8003192:	2202      	movs	r2, #2
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	e016      	b.n	80031c6 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "WEP") == 0)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	492b      	ldr	r1, [pc, #172]	@ (8003248 <wifi_station_connect_task_entry+0x198>)
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd f81f 	bl	80001e0 <strcmp>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <wifi_station_connect_task_entry+0x100>
      {
        wlan_security = WFM_SECURITY_MODE_WEP;
 80031a8:	4b26      	ldr	r3, [pc, #152]	@ (8003244 <wifi_station_connect_task_entry+0x194>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e00a      	b.n	80031c6 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "OPEN") == 0)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4926      	ldr	r1, [pc, #152]	@ (800324c <wifi_station_connect_task_entry+0x19c>)
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd f813 	bl	80001e0 <strcmp>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <wifi_station_connect_task_entry+0x116>
      {
        wlan_security = WFM_SECURITY_MODE_OPEN;
 80031c0:	4b20      	ldr	r3, [pc, #128]	@ (8003244 <wifi_station_connect_task_entry+0x194>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
      }
    }
    if (!(wifi.state & SL_WFX_STA_INTERFACE_CONNECTED))
 80031c6:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <wifi_station_connect_task_entry+0x1a0>)
 80031c8:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d120      	bne.n	8003216 <wifi_station_connect_task_entry+0x166>
    {

      status = sl_wfx_send_join_command((uint8_t*) wlan_ssid, ssid_length,
 80031d4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80031d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003244 <wifi_station_connect_task_entry+0x194>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031dc:	b292      	uxth	r2, r2
 80031de:	2000      	movs	r0, #0
 80031e0:	9006      	str	r0, [sp, #24]
 80031e2:	2000      	movs	r0, #0
 80031e4:	9005      	str	r0, [sp, #20]
 80031e6:	9204      	str	r2, [sp, #16]
 80031e8:	4a12      	ldr	r2, [pc, #72]	@ (8003234 <wifi_station_connect_task_entry+0x184>)
 80031ea:	9203      	str	r2, [sp, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	9202      	str	r2, [sp, #8]
 80031f0:	2200      	movs	r2, #0
 80031f2:	9201      	str	r2, [sp, #4]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	2300      	movs	r3, #0
 80031f8:	2200      	movs	r2, #0
 80031fa:	480c      	ldr	r0, [pc, #48]	@ (800322c <wifi_station_connect_task_entry+0x17c>)
 80031fc:	f006 f91c 	bl	8009438 <sl_wfx_send_join_command>
 8003200:	62b8      	str	r0, [r7, #40]	@ 0x28
                                        NULL, 0, wlan_security, 0, 0,
                                        (uint8_t*) wlan_passkey, passkey_length,
                                        NULL, 0);\

      if(status != SL_STATUS_OK)
 8003202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	d006      	beq.n	8003216 <wifi_station_connect_task_entry+0x166>
      {
        printf("Connection command error\r\n");
 8003208:	4812      	ldr	r0, [pc, #72]	@ (8003254 <wifi_station_connect_task_entry+0x1a4>)
 800320a:	f019 fb79 	bl	801c900 <puts>
 800320e:	e002      	b.n	8003216 <wifi_station_connect_task_entry+0x166>
        //strcpy(event_log, "Connection command error");
      }
    }
  }else{
    printf("Invalid Connection Request\r\n");
 8003210:	4811      	ldr	r0, [pc, #68]	@ (8003258 <wifi_station_connect_task_entry+0x1a8>)
 8003212:	f019 fb75 	bl	801c900 <puts>
  }

  // Delete the init thread.
  while(1){
	  osThreadTerminate(NULL);
 8003216:	2000      	movs	r0, #0
 8003218:	f008 f990 	bl	800b53c <osThreadTerminate>
 800321c:	e7fb      	b.n	8003216 <wifi_station_connect_task_entry+0x166>
 800321e:	bf00      	nop
 8003220:	0801eb9c 	.word	0x0801eb9c
 8003224:	0801ebc8 	.word	0x0801ebc8
 8003228:	0801eb34 	.word	0x0801eb34
 800322c:	20000004 	.word	0x20000004
 8003230:	0801eb3c 	.word	0x0801eb3c
 8003234:	20000028 	.word	0x20000028
 8003238:	0801eb40 	.word	0x0801eb40
 800323c:	0801eb48 	.word	0x0801eb48
 8003240:	0801eb50 	.word	0x0801eb50
 8003244:	20000069 	.word	0x20000069
 8003248:	0801eb54 	.word	0x0801eb54
 800324c:	0801eb58 	.word	0x0801eb58
 8003250:	200003e4 	.word	0x200003e4
 8003254:	0801eb60 	.word	0x0801eb60
 8003258:	0801eb7c 	.word	0x0801eb7c

0800325c <dhcpclient_set_link_state>:
 * Notify DHCP client task about the wifi status
 *
 * @param link_up link status
 ******************************************************************************/
void dhcpclient_set_link_state(int link_up)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  if (link_up) {
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <dhcpclient_set_link_state+0x16>
    dhcp_state = DHCP_START;
 800326a:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <dhcpclient_set_link_state+0x28>)
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
  } else {
    /* Update DHCP state machine */
    dhcp_state = DHCP_LINK_DOWN;
  }
}
 8003270:	e002      	b.n	8003278 <dhcpclient_set_link_state+0x1c>
    dhcp_state = DHCP_LINK_DOWN;
 8003272:	4b04      	ldr	r3, [pc, #16]	@ (8003284 <dhcpclient_set_link_state+0x28>)
 8003274:	2205      	movs	r2, #5
 8003276:	701a      	strb	r2, [r3, #0]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	20000608 	.word	0x20000608

08003288 <dhcpclient_start>:
 * DHCP client task.
 *
 * @param arg Network interface
 ******************************************************************************/
void dhcpclient_start(void const * argument)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	@ 0x28
 800328c:	af02      	add	r7, sp, #8
 800328e:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp;

  for (;;)
  {

    switch (dhcp_state)
 8003294:	4b9a      	ldr	r3, [pc, #616]	@ (8003500 <dhcpclient_start+0x278>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b05      	cmp	r3, #5
 800329c:	f000 811f 	beq.w	80034de <dhcpclient_start+0x256>
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	f300 8125 	bgt.w	80034f0 <dhcpclient_start+0x268>
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d002      	beq.n	80032b0 <dhcpclient_start+0x28>
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d012      	beq.n	80032d4 <dhcpclient_start+0x4c>
      /* Stop DHCP */
      netifapi_dhcp_stop(netif);
      dhcp_state = DHCP_OFF; 
    }
    break;
    default: break;
 80032ae:	e11f      	b.n	80034f0 <dhcpclient_start+0x268>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2200      	movs	r2, #0
 80032b4:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);       
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2200      	movs	r2, #0
 80032c0:	60da      	str	r2, [r3, #12]
        netifapi_dhcp_start(netif);
 80032c2:	4a90      	ldr	r2, [pc, #576]	@ (8003504 <dhcpclient_start+0x27c>)
 80032c4:	2100      	movs	r1, #0
 80032c6:	69f8      	ldr	r0, [r7, #28]
 80032c8:	f00b fd44 	bl	800ed54 <netifapi_netif_common>
        dhcp_state = DHCP_WAIT_ADDRESS;
 80032cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003500 <dhcpclient_start+0x278>)
 80032ce:	2202      	movs	r2, #2
 80032d0:	701a      	strb	r2, [r3, #0]
      break;
 80032d2:	e110      	b.n	80034f6 <dhcpclient_start+0x26e>
        if (dhcp_supplied_address(netif)) 
 80032d4:	69f8      	ldr	r0, [r7, #28]
 80032d6:	f015 fec1 	bl	801905c <dhcp_supplied_address>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d018      	beq.n	8003312 <dhcpclient_start+0x8a>
          dhcp_state = DHCP_ADDRESS_ASSIGNED;	
 80032e0:	4b87      	ldr	r3, [pc, #540]	@ (8003500 <dhcpclient_start+0x278>)
 80032e2:	2203      	movs	r2, #3
 80032e4:	701a      	strb	r2, [r3, #0]
                  sta_netif.ip_addr.addr & 0xff,
 80032e6:	4b88      	ldr	r3, [pc, #544]	@ (8003508 <dhcpclient_start+0x280>)
 80032e8:	685b      	ldr	r3, [r3, #4]
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 80032ea:	b2d9      	uxtb	r1, r3
                  (sta_netif.ip_addr.addr >> 8) & 0xff,
 80032ec:	4b86      	ldr	r3, [pc, #536]	@ (8003508 <dhcpclient_start+0x280>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	0a1b      	lsrs	r3, r3, #8
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 80032f2:	b2da      	uxtb	r2, r3
                  (sta_netif.ip_addr.addr >> 16) & 0xff,
 80032f4:	4b84      	ldr	r3, [pc, #528]	@ (8003508 <dhcpclient_start+0x280>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	0c1b      	lsrs	r3, r3, #16
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 80032fa:	b2d8      	uxtb	r0, r3
                  (sta_netif.ip_addr.addr >> 24) & 0xff);
 80032fc:	4b82      	ldr	r3, [pc, #520]	@ (8003508 <dhcpclient_start+0x280>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	0e1b      	lsrs	r3, r3, #24
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	4603      	mov	r3, r0
 8003306:	4881      	ldr	r0, [pc, #516]	@ (800350c <dhcpclient_start+0x284>)
 8003308:	f019 fa92 	bl	801c830 <iprintf>
          start_app_task();
 800330c:	f7ff f9a2 	bl	8002654 <start_app_task>
      break;
 8003310:	e0f0      	b.n	80034f4 <dhcpclient_start+0x26c>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	799b      	ldrb	r3, [r3, #6]
 800331c:	2b04      	cmp	r3, #4
 800331e:	f240 80e9 	bls.w	80034f4 <dhcpclient_start+0x26c>
            dhcp_state = DHCP_TIMEOUT;
 8003322:	4b77      	ldr	r3, [pc, #476]	@ (8003500 <dhcpclient_start+0x278>)
 8003324:	2204      	movs	r2, #4
 8003326:	701a      	strb	r2, [r3, #0]
            netifapi_dhcp_stop(netif);
 8003328:	2200      	movs	r2, #0
 800332a:	4979      	ldr	r1, [pc, #484]	@ (8003510 <dhcpclient_start+0x288>)
 800332c:	69f8      	ldr	r0, [r7, #28]
 800332e:	f00b fd11 	bl	800ed54 <netifapi_netif_common>
            IP_ADDR4(&ipaddr, sta_ip_addr0 , sta_ip_addr1 , sta_ip_addr2 , sta_ip_addr3 );
 8003332:	4b78      	ldr	r3, [pc, #480]	@ (8003514 <dhcpclient_start+0x28c>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	061a      	lsls	r2, r3, #24
 8003338:	4b77      	ldr	r3, [pc, #476]	@ (8003518 <dhcpclient_start+0x290>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	431a      	orrs	r2, r3
 8003340:	4b76      	ldr	r3, [pc, #472]	@ (800351c <dhcpclient_start+0x294>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	4313      	orrs	r3, r2
 8003348:	4a75      	ldr	r2, [pc, #468]	@ (8003520 <dhcpclient_start+0x298>)
 800334a:	7812      	ldrb	r2, [r2, #0]
 800334c:	4313      	orrs	r3, r2
 800334e:	061a      	lsls	r2, r3, #24
 8003350:	4b70      	ldr	r3, [pc, #448]	@ (8003514 <dhcpclient_start+0x28c>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	0619      	lsls	r1, r3, #24
 8003356:	4b70      	ldr	r3, [pc, #448]	@ (8003518 <dhcpclient_start+0x290>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	041b      	lsls	r3, r3, #16
 800335c:	4319      	orrs	r1, r3
 800335e:	4b6f      	ldr	r3, [pc, #444]	@ (800351c <dhcpclient_start+0x294>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	430b      	orrs	r3, r1
 8003366:	496e      	ldr	r1, [pc, #440]	@ (8003520 <dhcpclient_start+0x298>)
 8003368:	7809      	ldrb	r1, [r1, #0]
 800336a:	430b      	orrs	r3, r1
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003372:	431a      	orrs	r2, r3
 8003374:	4b67      	ldr	r3, [pc, #412]	@ (8003514 <dhcpclient_start+0x28c>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	0619      	lsls	r1, r3, #24
 800337a:	4b67      	ldr	r3, [pc, #412]	@ (8003518 <dhcpclient_start+0x290>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	4319      	orrs	r1, r3
 8003382:	4b66      	ldr	r3, [pc, #408]	@ (800351c <dhcpclient_start+0x294>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	430b      	orrs	r3, r1
 800338a:	4965      	ldr	r1, [pc, #404]	@ (8003520 <dhcpclient_start+0x298>)
 800338c:	7809      	ldrb	r1, [r1, #0]
 800338e:	430b      	orrs	r3, r1
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003396:	431a      	orrs	r2, r3
 8003398:	4b5e      	ldr	r3, [pc, #376]	@ (8003514 <dhcpclient_start+0x28c>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	0619      	lsls	r1, r3, #24
 800339e:	4b5e      	ldr	r3, [pc, #376]	@ (8003518 <dhcpclient_start+0x290>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	4319      	orrs	r1, r3
 80033a6:	4b5d      	ldr	r3, [pc, #372]	@ (800351c <dhcpclient_start+0x294>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	430b      	orrs	r3, r1
 80033ae:	495c      	ldr	r1, [pc, #368]	@ (8003520 <dhcpclient_start+0x298>)
 80033b0:	7809      	ldrb	r1, [r1, #0]
 80033b2:	430b      	orrs	r3, r1
 80033b4:	0e1b      	lsrs	r3, r3, #24
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, sta_netmask_addr0, sta_netmask_addr1, sta_netmask_addr2, sta_netmask_addr3);
 80033ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003524 <dhcpclient_start+0x29c>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	061a      	lsls	r2, r3, #24
 80033c0:	4b59      	ldr	r3, [pc, #356]	@ (8003528 <dhcpclient_start+0x2a0>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	041b      	lsls	r3, r3, #16
 80033c6:	431a      	orrs	r2, r3
 80033c8:	4b58      	ldr	r3, [pc, #352]	@ (800352c <dhcpclient_start+0x2a4>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	4313      	orrs	r3, r2
 80033d0:	4a57      	ldr	r2, [pc, #348]	@ (8003530 <dhcpclient_start+0x2a8>)
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	061a      	lsls	r2, r3, #24
 80033d8:	4b52      	ldr	r3, [pc, #328]	@ (8003524 <dhcpclient_start+0x29c>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	0619      	lsls	r1, r3, #24
 80033de:	4b52      	ldr	r3, [pc, #328]	@ (8003528 <dhcpclient_start+0x2a0>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	4319      	orrs	r1, r3
 80033e6:	4b51      	ldr	r3, [pc, #324]	@ (800352c <dhcpclient_start+0x2a4>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	430b      	orrs	r3, r1
 80033ee:	4950      	ldr	r1, [pc, #320]	@ (8003530 <dhcpclient_start+0x2a8>)
 80033f0:	7809      	ldrb	r1, [r1, #0]
 80033f2:	430b      	orrs	r3, r1
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80033fa:	431a      	orrs	r2, r3
 80033fc:	4b49      	ldr	r3, [pc, #292]	@ (8003524 <dhcpclient_start+0x29c>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	0619      	lsls	r1, r3, #24
 8003402:	4b49      	ldr	r3, [pc, #292]	@ (8003528 <dhcpclient_start+0x2a0>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	4319      	orrs	r1, r3
 800340a:	4b48      	ldr	r3, [pc, #288]	@ (800352c <dhcpclient_start+0x2a4>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	430b      	orrs	r3, r1
 8003412:	4947      	ldr	r1, [pc, #284]	@ (8003530 <dhcpclient_start+0x2a8>)
 8003414:	7809      	ldrb	r1, [r1, #0]
 8003416:	430b      	orrs	r3, r1
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800341e:	431a      	orrs	r2, r3
 8003420:	4b40      	ldr	r3, [pc, #256]	@ (8003524 <dhcpclient_start+0x29c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	0619      	lsls	r1, r3, #24
 8003426:	4b40      	ldr	r3, [pc, #256]	@ (8003528 <dhcpclient_start+0x2a0>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	041b      	lsls	r3, r3, #16
 800342c:	4319      	orrs	r1, r3
 800342e:	4b3f      	ldr	r3, [pc, #252]	@ (800352c <dhcpclient_start+0x2a4>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	430b      	orrs	r3, r1
 8003436:	493e      	ldr	r1, [pc, #248]	@ (8003530 <dhcpclient_start+0x2a8>)
 8003438:	7809      	ldrb	r1, [r1, #0]
 800343a:	430b      	orrs	r3, r1
 800343c:	0e1b      	lsrs	r3, r3, #24
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, sta_gw_addr0, sta_gw_addr1, sta_gw_addr2, sta_gw_addr3);
 8003442:	4b3c      	ldr	r3, [pc, #240]	@ (8003534 <dhcpclient_start+0x2ac>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	061a      	lsls	r2, r3, #24
 8003448:	4b3b      	ldr	r3, [pc, #236]	@ (8003538 <dhcpclient_start+0x2b0>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	4b3a      	ldr	r3, [pc, #232]	@ (800353c <dhcpclient_start+0x2b4>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	4313      	orrs	r3, r2
 8003458:	4a39      	ldr	r2, [pc, #228]	@ (8003540 <dhcpclient_start+0x2b8>)
 800345a:	7812      	ldrb	r2, [r2, #0]
 800345c:	4313      	orrs	r3, r2
 800345e:	061a      	lsls	r2, r3, #24
 8003460:	4b34      	ldr	r3, [pc, #208]	@ (8003534 <dhcpclient_start+0x2ac>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	0619      	lsls	r1, r3, #24
 8003466:	4b34      	ldr	r3, [pc, #208]	@ (8003538 <dhcpclient_start+0x2b0>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	4319      	orrs	r1, r3
 800346e:	4b33      	ldr	r3, [pc, #204]	@ (800353c <dhcpclient_start+0x2b4>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	430b      	orrs	r3, r1
 8003476:	4932      	ldr	r1, [pc, #200]	@ (8003540 <dhcpclient_start+0x2b8>)
 8003478:	7809      	ldrb	r1, [r1, #0]
 800347a:	430b      	orrs	r3, r1
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003482:	431a      	orrs	r2, r3
 8003484:	4b2b      	ldr	r3, [pc, #172]	@ (8003534 <dhcpclient_start+0x2ac>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	0619      	lsls	r1, r3, #24
 800348a:	4b2b      	ldr	r3, [pc, #172]	@ (8003538 <dhcpclient_start+0x2b0>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	4319      	orrs	r1, r3
 8003492:	4b2a      	ldr	r3, [pc, #168]	@ (800353c <dhcpclient_start+0x2b4>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	430b      	orrs	r3, r1
 800349a:	4929      	ldr	r1, [pc, #164]	@ (8003540 <dhcpclient_start+0x2b8>)
 800349c:	7809      	ldrb	r1, [r1, #0]
 800349e:	430b      	orrs	r3, r1
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80034a6:	431a      	orrs	r2, r3
 80034a8:	4b22      	ldr	r3, [pc, #136]	@ (8003534 <dhcpclient_start+0x2ac>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	0619      	lsls	r1, r3, #24
 80034ae:	4b22      	ldr	r3, [pc, #136]	@ (8003538 <dhcpclient_start+0x2b0>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	041b      	lsls	r3, r3, #16
 80034b4:	4319      	orrs	r1, r3
 80034b6:	4b21      	ldr	r3, [pc, #132]	@ (800353c <dhcpclient_start+0x2b4>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	430b      	orrs	r3, r1
 80034be:	4920      	ldr	r1, [pc, #128]	@ (8003540 <dhcpclient_start+0x2b8>)
 80034c0:	7809      	ldrb	r1, [r1, #0]
 80034c2:	430b      	orrs	r3, r1
 80034c4:	0e1b      	lsrs	r3, r3, #24
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 80034ca:	f107 030c 	add.w	r3, r7, #12
 80034ce:	f107 0210 	add.w	r2, r7, #16
 80034d2:	f107 0114 	add.w	r1, r7, #20
 80034d6:	69f8      	ldr	r0, [r7, #28]
 80034d8:	f00c fe6c 	bl	80101b4 <netif_set_addr>
      break;
 80034dc:	e00a      	b.n	80034f4 <dhcpclient_start+0x26c>
      netifapi_dhcp_stop(netif);
 80034de:	2200      	movs	r2, #0
 80034e0:	490b      	ldr	r1, [pc, #44]	@ (8003510 <dhcpclient_start+0x288>)
 80034e2:	69f8      	ldr	r0, [r7, #28]
 80034e4:	f00b fc36 	bl	800ed54 <netifapi_netif_common>
      dhcp_state = DHCP_OFF; 
 80034e8:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <dhcpclient_start+0x278>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
    break;
 80034ee:	e002      	b.n	80034f6 <dhcpclient_start+0x26e>
    default: break;
 80034f0:	bf00      	nop
 80034f2:	e000      	b.n	80034f6 <dhcpclient_start+0x26e>
      break;
 80034f4:	bf00      	nop
    }
    
    /* wait 1000 ms THIS IS AN INTERRUPT THAT COULD BE DELETED*/
    vTaskDelay(1000);
 80034f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034fa:	f009 fd3b 	bl	800cf74 <vTaskDelay>
    switch (dhcp_state)
 80034fe:	e6c9      	b.n	8003294 <dhcpclient_start+0xc>
 8003500:	20000608 	.word	0x20000608
 8003504:	08017a59 	.word	0x08017a59
 8003508:	20000864 	.word	0x20000864
 800350c:	0801ebd8 	.word	0x0801ebd8
 8003510:	0801850d 	.word	0x0801850d
 8003514:	20000094 	.word	0x20000094
 8003518:	20000095 	.word	0x20000095
 800351c:	20000906 	.word	0x20000906
 8003520:	20000096 	.word	0x20000096
 8003524:	20000097 	.word	0x20000097
 8003528:	20000098 	.word	0x20000098
 800352c:	20000099 	.word	0x20000099
 8003530:	20000907 	.word	0x20000907
 8003534:	20000908 	.word	0x20000908
 8003538:	20000909 	.word	0x20000909
 800353c:	2000090a 	.word	0x2000090a
 8003540:	2000090b 	.word	0x2000090b

08003544 <dhcpserver_remove_mac>:
 * Remove mac address from list of clients.
 *
 * @param mac MAC address to remove.
 ******************************************************************************/
void dhcpserver_remove_mac(struct eth_addr *mac)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e08a      	b.n	8003668 <dhcpserver_remove_mac+0x124>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8003552:	494b      	ldr	r1, [pc, #300]	@ (8003680 <dhcpserver_remove_mac+0x13c>)
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	440b      	add	r3, r1
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d17b      	bne.n	8003662 <dhcpserver_remove_mac+0x11e>
 800356a:	4945      	ldr	r1, [pc, #276]	@ (8003680 <dhcpserver_remove_mac+0x13c>)
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	440b      	add	r3, r1
 8003578:	3301      	adds	r3, #1
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	785b      	ldrb	r3, [r3, #1]
 8003580:	429a      	cmp	r2, r3
 8003582:	d16e      	bne.n	8003662 <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8003584:	493e      	ldr	r1, [pc, #248]	@ (8003680 <dhcpserver_remove_mac+0x13c>)
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	440b      	add	r3, r1
 8003592:	3302      	adds	r3, #2
 8003594:	781a      	ldrb	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	789b      	ldrb	r3, [r3, #2]
 800359a:	429a      	cmp	r2, r3
 800359c:	d161      	bne.n	8003662 <dhcpserver_remove_mac+0x11e>
 800359e:	4938      	ldr	r1, [pc, #224]	@ (8003680 <dhcpserver_remove_mac+0x13c>)
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	440b      	add	r3, r1
 80035ac:	3303      	adds	r3, #3
 80035ae:	781a      	ldrb	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	78db      	ldrb	r3, [r3, #3]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d154      	bne.n	8003662 <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 80035b8:	4931      	ldr	r1, [pc, #196]	@ (8003680 <dhcpserver_remove_mac+0x13c>)
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	440b      	add	r3, r1
 80035c6:	3304      	adds	r3, #4
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	791b      	ldrb	r3, [r3, #4]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d147      	bne.n	8003662 <dhcpserver_remove_mac+0x11e>
 80035d2:	492b      	ldr	r1, [pc, #172]	@ (8003680 <dhcpserver_remove_mac+0x13c>)
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	440b      	add	r3, r1
 80035e0:	3305      	adds	r3, #5
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	795b      	ldrb	r3, [r3, #5]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d13a      	bne.n	8003662 <dhcpserver_remove_mac+0x11e>
      saved_mac[i].addr[0] = 0;
 80035ec:	4924      	ldr	r1, [pc, #144]	@ (8003680 <dhcpserver_remove_mac+0x13c>)
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	440b      	add	r3, r1
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = 0;
 80035fe:	4920      	ldr	r1, [pc, #128]	@ (8003680 <dhcpserver_remove_mac+0x13c>)
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4613      	mov	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4413      	add	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	440b      	add	r3, r1
 800360c:	3301      	adds	r3, #1
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = 0;
 8003612:	491b      	ldr	r1, [pc, #108]	@ (8003680 <dhcpserver_remove_mac+0x13c>)
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	440b      	add	r3, r1
 8003620:	3302      	adds	r3, #2
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = 0;
 8003626:	4916      	ldr	r1, [pc, #88]	@ (8003680 <dhcpserver_remove_mac+0x13c>)
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4613      	mov	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	440b      	add	r3, r1
 8003634:	3303      	adds	r3, #3
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = 0;
 800363a:	4911      	ldr	r1, [pc, #68]	@ (8003680 <dhcpserver_remove_mac+0x13c>)
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4613      	mov	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	4413      	add	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	440b      	add	r3, r1
 8003648:	3304      	adds	r3, #4
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = 0;
 800364e:	490c      	ldr	r1, [pc, #48]	@ (8003680 <dhcpserver_remove_mac+0x13c>)
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	440b      	add	r3, r1
 800365c:	3305      	adds	r3, #5
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3301      	adds	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b07      	cmp	r3, #7
 800366c:	f67f af71 	bls.w	8003552 <dhcpserver_remove_mac+0xe>
    }
  }
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000610 	.word	0x20000610

08003684 <dhcpserver_save_mac>:

/***************************************************************************//**
 * Save mac address in list of clients.
 ******************************************************************************/
static void dhcpserver_save_mac(struct eth_addr *mac)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  // Remove previous listing of MAC.
  dhcpserver_remove_mac(mac);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ff59 	bl	8003544 <dhcpserver_remove_mac>

  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	e08b      	b.n	80037b0 <dhcpserver_save_mac+0x12c>
    if (saved_mac[i].addr[0] == 0 && saved_mac[i].addr[1] == 0
 8003698:	7bfa      	ldrb	r2, [r7, #15]
 800369a:	494a      	ldr	r1, [pc, #296]	@ (80037c4 <dhcpserver_save_mac+0x140>)
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	440b      	add	r3, r1
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d17e      	bne.n	80037aa <dhcpserver_save_mac+0x126>
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	4945      	ldr	r1, [pc, #276]	@ (80037c4 <dhcpserver_save_mac+0x140>)
 80036b0:	4613      	mov	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4413      	add	r3, r2
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	440b      	add	r3, r1
 80036ba:	3301      	adds	r3, #1
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d173      	bne.n	80037aa <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	493f      	ldr	r1, [pc, #252]	@ (80037c4 <dhcpserver_save_mac+0x140>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	440b      	add	r3, r1
 80036d0:	3302      	adds	r3, #2
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d168      	bne.n	80037aa <dhcpserver_save_mac+0x126>
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	493a      	ldr	r1, [pc, #232]	@ (80037c4 <dhcpserver_save_mac+0x140>)
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	440b      	add	r3, r1
 80036e6:	3303      	adds	r3, #3
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d15d      	bne.n	80037aa <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[4] == 0 && saved_mac[i].addr[5] == 0) {
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	4934      	ldr	r1, [pc, #208]	@ (80037c4 <dhcpserver_save_mac+0x140>)
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	440b      	add	r3, r1
 80036fc:	3304      	adds	r3, #4
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d152      	bne.n	80037aa <dhcpserver_save_mac+0x126>
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	492f      	ldr	r1, [pc, #188]	@ (80037c4 <dhcpserver_save_mac+0x140>)
 8003708:	4613      	mov	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4413      	add	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	440b      	add	r3, r1
 8003712:	3305      	adds	r3, #5
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d147      	bne.n	80037aa <dhcpserver_save_mac+0x126>
      saved_mac[i].addr[0] = mac->addr[0];
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7818      	ldrb	r0, [r3, #0]
 8003720:	4928      	ldr	r1, [pc, #160]	@ (80037c4 <dhcpserver_save_mac+0x140>)
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	440b      	add	r3, r1
 800372c:	4602      	mov	r2, r0
 800372e:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = mac->addr[1];
 8003730:	7bfa      	ldrb	r2, [r7, #15]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7858      	ldrb	r0, [r3, #1]
 8003736:	4923      	ldr	r1, [pc, #140]	@ (80037c4 <dhcpserver_save_mac+0x140>)
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	440b      	add	r3, r1
 8003742:	3301      	adds	r3, #1
 8003744:	4602      	mov	r2, r0
 8003746:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = mac->addr[2];
 8003748:	7bfa      	ldrb	r2, [r7, #15]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	7898      	ldrb	r0, [r3, #2]
 800374e:	491d      	ldr	r1, [pc, #116]	@ (80037c4 <dhcpserver_save_mac+0x140>)
 8003750:	4613      	mov	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4413      	add	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	440b      	add	r3, r1
 800375a:	3302      	adds	r3, #2
 800375c:	4602      	mov	r2, r0
 800375e:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = mac->addr[3];
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	78d8      	ldrb	r0, [r3, #3]
 8003766:	4917      	ldr	r1, [pc, #92]	@ (80037c4 <dhcpserver_save_mac+0x140>)
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	440b      	add	r3, r1
 8003772:	3303      	adds	r3, #3
 8003774:	4602      	mov	r2, r0
 8003776:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = mac->addr[4];
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	7918      	ldrb	r0, [r3, #4]
 800377e:	4911      	ldr	r1, [pc, #68]	@ (80037c4 <dhcpserver_save_mac+0x140>)
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	440b      	add	r3, r1
 800378a:	3304      	adds	r3, #4
 800378c:	4602      	mov	r2, r0
 800378e:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = mac->addr[5];
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	7958      	ldrb	r0, [r3, #5]
 8003796:	490b      	ldr	r1, [pc, #44]	@ (80037c4 <dhcpserver_save_mac+0x140>)
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	440b      	add	r3, r1
 80037a2:	3305      	adds	r3, #5
 80037a4:	4602      	mov	r2, r0
 80037a6:	701a      	strb	r2, [r3, #0]
      break;
 80037a8:	e007      	b.n	80037ba <dhcpserver_save_mac+0x136>
  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	3301      	adds	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b07      	cmp	r3, #7
 80037b4:	f67f af70 	bls.w	8003698 <dhcpserver_save_mac+0x14>
    }
  }
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000610 	.word	0x20000610

080037c8 <dhcpserver_get_ip>:
 *
 * @param mac MAC address of client.
 * @returns IP address
 ******************************************************************************/
ip_addr_t dhcpserver_get_ip(struct eth_addr *mac)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  ip_addr_t offer_ip = { 0 };
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]

  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	e060      	b.n	800389c <dhcpserver_get_ip+0xd4>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 80037da:	4935      	ldr	r1, [pc, #212]	@ (80038b0 <dhcpserver_get_ip+0xe8>)
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	440b      	add	r3, r1
 80037e8:	781a      	ldrb	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d151      	bne.n	8003896 <dhcpserver_get_ip+0xce>
 80037f2:	492f      	ldr	r1, [pc, #188]	@ (80038b0 <dhcpserver_get_ip+0xe8>)
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4613      	mov	r3, r2
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	4413      	add	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	440b      	add	r3, r1
 8003800:	3301      	adds	r3, #1
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	785b      	ldrb	r3, [r3, #1]
 8003808:	429a      	cmp	r2, r3
 800380a:	d144      	bne.n	8003896 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 800380c:	4928      	ldr	r1, [pc, #160]	@ (80038b0 <dhcpserver_get_ip+0xe8>)
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4613      	mov	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	440b      	add	r3, r1
 800381a:	3302      	adds	r3, #2
 800381c:	781a      	ldrb	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	789b      	ldrb	r3, [r3, #2]
 8003822:	429a      	cmp	r2, r3
 8003824:	d137      	bne.n	8003896 <dhcpserver_get_ip+0xce>
 8003826:	4922      	ldr	r1, [pc, #136]	@ (80038b0 <dhcpserver_get_ip+0xe8>)
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4613      	mov	r3, r2
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	4413      	add	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	440b      	add	r3, r1
 8003834:	3303      	adds	r3, #3
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	78db      	ldrb	r3, [r3, #3]
 800383c:	429a      	cmp	r2, r3
 800383e:	d12a      	bne.n	8003896 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8003840:	491b      	ldr	r1, [pc, #108]	@ (80038b0 <dhcpserver_get_ip+0xe8>)
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4613      	mov	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	440b      	add	r3, r1
 800384e:	3304      	adds	r3, #4
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	791b      	ldrb	r3, [r3, #4]
 8003856:	429a      	cmp	r2, r3
 8003858:	d11d      	bne.n	8003896 <dhcpserver_get_ip+0xce>
 800385a:	4915      	ldr	r1, [pc, #84]	@ (80038b0 <dhcpserver_get_ip+0xe8>)
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	440b      	add	r3, r1
 8003868:	3305      	adds	r3, #5
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	795b      	ldrb	r3, [r3, #5]
 8003870:	429a      	cmp	r2, r3
 8003872:	d110      	bne.n	8003896 <dhcpserver_get_ip+0xce>
      /* index is used to increment IP address. */
      offer_ip.addr = ((10 + i) << 24) + ap_ip_addr0 + (ap_ip_addr1 << 8) + (ap_ip_addr2 << 16);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	330a      	adds	r3, #10
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	4a0e      	ldr	r2, [pc, #56]	@ (80038b4 <dhcpserver_get_ip+0xec>)
 800387c:	7812      	ldrb	r2, [r2, #0]
 800387e:	441a      	add	r2, r3
 8003880:	4b0d      	ldr	r3, [pc, #52]	@ (80038b8 <dhcpserver_get_ip+0xf0>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	441a      	add	r2, r3
 8003888:	4b0c      	ldr	r3, [pc, #48]	@ (80038bc <dhcpserver_get_ip+0xf4>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	4413      	add	r3, r2
 8003890:	60bb      	str	r3, [r7, #8]
      return offer_ip;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	e006      	b.n	80038a4 <dhcpserver_get_ip+0xdc>
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3301      	adds	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b07      	cmp	r3, #7
 80038a0:	d99b      	bls.n	80037da <dhcpserver_get_ip+0x12>
    }
  }

  return offer_ip;
 80038a2:	68bb      	ldr	r3, [r7, #8]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	20000610 	.word	0x20000610
 80038b4:	2000009a 	.word	0x2000009a
 80038b8:	2000009b 	.word	0x2000009b
 80038bc:	2000009c 	.word	0x2000009c

080038c0 <dhcpserver_clear_stored_mac>:

/***************************************************************************//**
 * Clear stored mac addresses in client list.
 ******************************************************************************/
void dhcpserver_clear_stored_mac(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	e03d      	b.n	8003948 <dhcpserver_clear_stored_mac+0x88>
    saved_mac[i].addr[0] = 0;
 80038cc:	4923      	ldr	r1, [pc, #140]	@ (800395c <dhcpserver_clear_stored_mac+0x9c>)
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4413      	add	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	440b      	add	r3, r1
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 80038de:	491f      	ldr	r1, [pc, #124]	@ (800395c <dhcpserver_clear_stored_mac+0x9c>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	440b      	add	r3, r1
 80038ec:	3301      	adds	r3, #1
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 80038f2:	491a      	ldr	r1, [pc, #104]	@ (800395c <dhcpserver_clear_stored_mac+0x9c>)
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4413      	add	r3, r2
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	440b      	add	r3, r1
 8003900:	3302      	adds	r3, #2
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8003906:	4915      	ldr	r1, [pc, #84]	@ (800395c <dhcpserver_clear_stored_mac+0x9c>)
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	440b      	add	r3, r1
 8003914:	3303      	adds	r3, #3
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 800391a:	4910      	ldr	r1, [pc, #64]	@ (800395c <dhcpserver_clear_stored_mac+0x9c>)
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4413      	add	r3, r2
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	440b      	add	r3, r1
 8003928:	3304      	adds	r3, #4
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 800392e:	490b      	ldr	r1, [pc, #44]	@ (800395c <dhcpserver_clear_stored_mac+0x9c>)
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4413      	add	r3, r2
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	440b      	add	r3, r1
 800393c:	3305      	adds	r3, #5
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3301      	adds	r3, #1
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b07      	cmp	r3, #7
 800394c:	d9be      	bls.n	80038cc <dhcpserver_clear_stored_mac+0xc>
  }
}
 800394e:	bf00      	nop
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	20000610 	.word	0x20000610

08003960 <dhcpserver_find_requested_ip>:
 * @param pbuf_in The pbuf containing the a DHCP packet.
 * @param ipaddr IP address result.
 * @returns 1 if found, 0 if not found.
 ******************************************************************************/
static uint16_t dhcpserver_find_requested_ip(struct pbuf * pbuf_in, uint8_t * ipaddr)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t index = UDP_DHCP_OPTIONS_OFS;
 800396a:	23f0      	movs	r3, #240	@ 0xf0
 800396c:	617b      	str	r3, [r7, #20]
  uint8_t optionID = DHCP_OPTION_REQUESTED_IP;
 800396e:	2332      	movs	r3, #50	@ 0x32
 8003970:	743b      	strb	r3, [r7, #16]
  uint16_t found = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	827b      	strh	r3, [r7, #18]
  uint8_t val = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	747b      	strb	r3, [r7, #17]
  uint8_t size;

  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 800397a:	e036      	b.n	80039ea <dhcpserver_find_requested_ip+0x8a>
    val = pbuf_get_at(pbuf_in, index);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	b29b      	uxth	r3, r3
 8003980:	4619      	mov	r1, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f00d fbfc 	bl	8011180 <pbuf_get_at>
 8003988:	4603      	mov	r3, r0
 800398a:	747b      	strb	r3, [r7, #17]
    if (val == optionID) {
 800398c:	7c7a      	ldrb	r2, [r7, #17]
 800398e:	7c3b      	ldrb	r3, [r7, #16]
 8003990:	429a      	cmp	r2, r3
 8003992:	d11b      	bne.n	80039cc <dhcpserver_find_requested_ip+0x6c>
      index++;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3301      	adds	r3, #1
 8003998:	617b      	str	r3, [r7, #20]
      size = pbuf_get_at(pbuf_in, index);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	b29b      	uxth	r3, r3
 800399e:	4619      	mov	r1, r3
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f00d fbed 	bl	8011180 <pbuf_get_at>
 80039a6:	4603      	mov	r3, r0
 80039a8:	73fb      	strb	r3, [r7, #15]
      index++;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	3301      	adds	r3, #1
 80039ae:	617b      	str	r3, [r7, #20]
      pbuf_copy_partial(pbuf_in, ipaddr, size, index);
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	6839      	ldr	r1, [r7, #0]
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f00d fb00 	bl	8010fc0 <pbuf_copy_partial>
      index += size;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4413      	add	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
      found = 1;
 80039c8:	2301      	movs	r3, #1
 80039ca:	827b      	strh	r3, [r7, #18]
    }
    index++;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3301      	adds	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
    index += ((pbuf_get_at(pbuf_in, index)) + 1);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f00d fbd1 	bl	8011180 <pbuf_get_at>
 80039de:	4603      	mov	r3, r0
 80039e0:	3301      	adds	r3, #1
 80039e2:	461a      	mov	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	4413      	add	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 80039ea:	7c7b      	ldrb	r3, [r7, #17]
 80039ec:	2bff      	cmp	r3, #255	@ 0xff
 80039ee:	d005      	beq.n	80039fc <dhcpserver_find_requested_ip+0x9c>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	891b      	ldrh	r3, [r3, #8]
 80039f4:	461a      	mov	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d3bf      	bcc.n	800397c <dhcpserver_find_requested_ip+0x1c>
  }

  return found;
 80039fc:	8a7b      	ldrh	r3, [r7, #18]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <dhcpserver_fn>:
/***************************************************************************//**
 * DHCP server main function.
 ******************************************************************************/
static void dhcpserver_fn(void *arg, struct udp_pcb *dhcp_pcb_recv,
		struct pbuf *pbuf_in, const ip_addr_t *client_addr, uint16_t port)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08c      	sub	sp, #48	@ 0x30
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  struct pbuf * pbuf_out = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t i;
  uint8_t flags = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  struct eth_addr ethaddr;

  uint32_t options_offset = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t client_requested_addr = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61bb      	str	r3, [r7, #24]
  uint8_t val = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  ip_addr_t client_ip_addr;
  ip_addr_t r;

  if ((NULL == pbuf_in) || ((pbuf_in->tot_len) <= UDP_DHCP_OPTIONS_OFS)) {
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 85b8 	beq.w	80045a6 <dhcpserver_fn+0xb9e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	891b      	ldrh	r3, [r3, #8]
 8003a3a:	2bf0      	cmp	r3, #240	@ 0xf0
 8003a3c:	f240 85b3 	bls.w	80045a6 <dhcpserver_fn+0xb9e>
    goto end_of_fcn;
  }

  pbuf_out = pbuf_alloc(PBUF_TRANSPORT, DHCP_RESPONSE_DEFAULT_SIZE, PBUF_POOL);
 8003a40:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8003a44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a48:	2036      	movs	r0, #54	@ 0x36
 8003a4a:	f00c fdcb 	bl	80105e4 <pbuf_alloc>
 8003a4e:	62f8      	str	r0, [r7, #44]	@ 0x2c

  if ((NULL == pbuf_out) || ((pbuf_out->tot_len) < UDP_DHCP_OPTIONS_OFS)) {
 8003a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 85a9 	beq.w	80045aa <dhcpserver_fn+0xba2>
 8003a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5a:	891b      	ldrh	r3, [r3, #8]
 8003a5c:	2bef      	cmp	r3, #239	@ 0xef
 8003a5e:	f240 85a4 	bls.w	80045aa <dhcpserver_fn+0xba2>
    goto end_of_fcn;
  }
  pbuf_copy(pbuf_out, pbuf_in);
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a66:	f00d f9d9 	bl	8010e1c <pbuf_copy>

#if DHCPS_DBG
  printf("mac ");
#endif
  // Read MAC address.
  for (i = 0; i < 6; ++i) {
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a6e:	e014      	b.n	8003a9a <dhcpserver_fn+0x92>
    val = pbuf_get_at(pbuf_in, DHCP_CHADDR_OFS + i);
 8003a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	331c      	adds	r3, #28
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f00d fb80 	bl	8011180 <pbuf_get_at>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    ethaddr.addr[i] = val;
 8003a86:	f107 021c 	add.w	r2, r7, #28
 8003a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003a92:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 6; ++i) {
 8003a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a96:	3301      	adds	r3, #1
 8003a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d9e7      	bls.n	8003a70 <dhcpserver_fn+0x68>
  }
#if DHCPS_DBG
  printf("\r\n");
#endif
  // Register MAC address and get an IP address.
  dhcpserver_save_mac(&ethaddr);
 8003aa0:	f107 031c 	add.w	r3, r7, #28
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fded 	bl	8003684 <dhcpserver_save_mac>
  client_ip_addr = dhcpserver_get_ip(&ethaddr);
 8003aaa:	f107 031c 	add.w	r3, r7, #28
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fe8a 	bl	80037c8 <dhcpserver_get_ip>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	617b      	str	r3, [r7, #20]
  if (0 == client_ip_addr.addr) {
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8577 	beq.w	80045ae <dhcpserver_fn+0xba6>
    goto end_of_fcn;
  }
#if DHCPS_DBG
  printf("ip %d.%d.%d.%d\r\n", client_ip_addr.addr & 0xff, (client_ip_addr.addr >> 8) & 0xff, (client_ip_addr.addr >> 16) & 0xff, (client_ip_addr.addr >> 24) & 0xff);
#endif
  etharp_add_static_entry(&client_ip_addr, &ethaddr);   //add ARP table entry
 8003ac0:	f107 021c 	add.w	r2, r7, #28
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f015 fe38 	bl	8019740 <etharp_add_static_entry>
  /* request type. */
  val = pbuf_get_at(pbuf_in, UDP_DHCP_OPTIONS_OFS + 2);
 8003ad0:	21f2      	movs	r1, #242	@ 0xf2
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f00d fb54 	bl	8011180 <pbuf_get_at>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  switch (val) {
 8003ade:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d004      	beq.n	8003af0 <dhcpserver_fn+0xe8>
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	f000 826a 	beq.w	8003fc0 <dhcpserver_fn+0x5b8>
      }

      break;
    // do nothing if not defined above
    default:
      break;
 8003aec:	f000 bd62 	b.w	80045b4 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 8003af0:	2202      	movs	r2, #2
 8003af2:	2100      	movs	r1, #0
 8003af4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003af6:	f00d fb7c 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2108      	movs	r1, #8
 8003afe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b00:	f00d fb77 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, 0x0);       //unicast
 8003b04:	2200      	movs	r2, #0
 8003b06:	210a      	movs	r1, #10
 8003b08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b0a:	f00d fb72 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
 8003b14:	2110      	movs	r1, #16
 8003b16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b18:	f00d fb6b 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	0a1b      	lsrs	r3, r3, #8
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	2111      	movs	r1, #17
 8003b26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b28:	f00d fb63 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	0c1b      	lsrs	r3, r3, #16
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	2112      	movs	r1, #18
 8003b36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b38:	f00d fb5b 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	0e1b      	lsrs	r3, r3, #24
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	2113      	movs	r1, #19
 8003b46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b48:	f00d fb53 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2114      	movs	r1, #20
 8003b50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b52:	f00d fb4e 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 8003b56:	2200      	movs	r2, #0
 8003b58:	2115      	movs	r1, #21
 8003b5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b5c:	f00d fb49 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 8003b60:	2200      	movs	r2, #0
 8003b62:	2116      	movs	r1, #22
 8003b64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b66:	f00d fb44 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2117      	movs	r1, #23
 8003b6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b70:	f00d fb3f 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8003b74:	2263      	movs	r2, #99	@ 0x63
 8003b76:	21ec      	movs	r1, #236	@ 0xec
 8003b78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b7a:	f00d fb3a 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8003b7e:	2282      	movs	r2, #130	@ 0x82
 8003b80:	21ed      	movs	r1, #237	@ 0xed
 8003b82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b84:	f00d fb35 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8003b88:	2253      	movs	r2, #83	@ 0x53
 8003b8a:	21ee      	movs	r1, #238	@ 0xee
 8003b8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b8e:	f00d fb30 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8003b92:	2263      	movs	r2, #99	@ 0x63
 8003b94:	21ef      	movs	r1, #239	@ 0xef
 8003b96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b98:	f00d fb2b 	bl	80111f2 <pbuf_put_at>
      options_offset = UDP_DHCP_OPTIONS_OFS;
 8003b9c:	23f0      	movs	r3, #240	@ 0xf0
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2235      	movs	r2, #53	@ 0x35
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003baa:	f00d fb22 	bl	80111f2 <pbuf_put_at>
      options_offset++;
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 1);
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2201      	movs	r2, #1
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bbe:	f00d fb18 	bl	80111f2 <pbuf_put_at>
      options_offset++;
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OFFER);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2202      	movs	r2, #2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bd2:	f00d fb0e 	bl	80111f2 <pbuf_put_at>
      options_offset++;
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	3301      	adds	r3, #1
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2201      	movs	r2, #1
 8003be2:	4619      	mov	r1, r3
 8003be4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003be6:	f00d fb04 	bl	80111f2 <pbuf_put_at>
      options_offset++;
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	3301      	adds	r3, #1
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bfa:	f00d fafa 	bl	80111f2 <pbuf_put_at>
      options_offset++;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	3301      	adds	r3, #1
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8003c04:	4ba8      	ldr	r3, [pc, #672]	@ (8003ea8 <dhcpserver_fn+0x4a0>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	061a      	lsls	r2, r3, #24
 8003c0a:	4ba8      	ldr	r3, [pc, #672]	@ (8003eac <dhcpserver_fn+0x4a4>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	431a      	orrs	r2, r3
 8003c12:	4ba7      	ldr	r3, [pc, #668]	@ (8003eb0 <dhcpserver_fn+0x4a8>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	4aa6      	ldr	r2, [pc, #664]	@ (8003eb4 <dhcpserver_fn+0x4ac>)
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	061a      	lsls	r2, r3, #24
 8003c22:	4ba1      	ldr	r3, [pc, #644]	@ (8003ea8 <dhcpserver_fn+0x4a0>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	0619      	lsls	r1, r3, #24
 8003c28:	4ba0      	ldr	r3, [pc, #640]	@ (8003eac <dhcpserver_fn+0x4a4>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	4319      	orrs	r1, r3
 8003c30:	4b9f      	ldr	r3, [pc, #636]	@ (8003eb0 <dhcpserver_fn+0x4a8>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	430b      	orrs	r3, r1
 8003c38:	499e      	ldr	r1, [pc, #632]	@ (8003eb4 <dhcpserver_fn+0x4ac>)
 8003c3a:	7809      	ldrb	r1, [r1, #0]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003c44:	431a      	orrs	r2, r3
 8003c46:	4b98      	ldr	r3, [pc, #608]	@ (8003ea8 <dhcpserver_fn+0x4a0>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	0619      	lsls	r1, r3, #24
 8003c4c:	4b97      	ldr	r3, [pc, #604]	@ (8003eac <dhcpserver_fn+0x4a4>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	4319      	orrs	r1, r3
 8003c54:	4b96      	ldr	r3, [pc, #600]	@ (8003eb0 <dhcpserver_fn+0x4a8>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	4995      	ldr	r1, [pc, #596]	@ (8003eb4 <dhcpserver_fn+0x4ac>)
 8003c5e:	7809      	ldrb	r1, [r1, #0]
 8003c60:	430b      	orrs	r3, r1
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	4b8f      	ldr	r3, [pc, #572]	@ (8003ea8 <dhcpserver_fn+0x4a0>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	0619      	lsls	r1, r3, #24
 8003c70:	4b8e      	ldr	r3, [pc, #568]	@ (8003eac <dhcpserver_fn+0x4a4>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	4319      	orrs	r1, r3
 8003c78:	4b8d      	ldr	r3, [pc, #564]	@ (8003eb0 <dhcpserver_fn+0x4a8>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	498c      	ldr	r1, [pc, #560]	@ (8003eb4 <dhcpserver_fn+0x4ac>)
 8003c82:	7809      	ldrb	r1, [r1, #0]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	0e1b      	lsrs	r3, r3, #24
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c98:	f00d faab 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	b299      	uxth	r1, r3
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003cae:	f00d faa0 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	b299      	uxth	r1, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003cc4:	f00d fa95 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3303      	adds	r3, #3
 8003cce:	b299      	uxth	r1, r3
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	0e1b      	lsrs	r3, r3, #24
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003cda:	f00d fa8a 	bl	80111f2 <pbuf_put_at>
      options_offset += 4;
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2203      	movs	r2, #3
 8003cea:	4619      	mov	r1, r3
 8003cec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003cee:	f00d fa80 	bl	80111f2 <pbuf_put_at>
      options_offset++;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d02:	f00d fa76 	bl	80111f2 <pbuf_put_at>
      options_offset++;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	3301      	adds	r3, #1
 8003d0a:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8003d0c:	4b6a      	ldr	r3, [pc, #424]	@ (8003eb8 <dhcpserver_fn+0x4b0>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	061a      	lsls	r2, r3, #24
 8003d12:	4b6a      	ldr	r3, [pc, #424]	@ (8003ebc <dhcpserver_fn+0x4b4>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	4b69      	ldr	r3, [pc, #420]	@ (8003ec0 <dhcpserver_fn+0x4b8>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	4313      	orrs	r3, r2
 8003d22:	4a68      	ldr	r2, [pc, #416]	@ (8003ec4 <dhcpserver_fn+0x4bc>)
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	061a      	lsls	r2, r3, #24
 8003d2a:	4b63      	ldr	r3, [pc, #396]	@ (8003eb8 <dhcpserver_fn+0x4b0>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	0619      	lsls	r1, r3, #24
 8003d30:	4b62      	ldr	r3, [pc, #392]	@ (8003ebc <dhcpserver_fn+0x4b4>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	4319      	orrs	r1, r3
 8003d38:	4b61      	ldr	r3, [pc, #388]	@ (8003ec0 <dhcpserver_fn+0x4b8>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	430b      	orrs	r3, r1
 8003d40:	4960      	ldr	r1, [pc, #384]	@ (8003ec4 <dhcpserver_fn+0x4bc>)
 8003d42:	7809      	ldrb	r1, [r1, #0]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb8 <dhcpserver_fn+0x4b0>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	0619      	lsls	r1, r3, #24
 8003d54:	4b59      	ldr	r3, [pc, #356]	@ (8003ebc <dhcpserver_fn+0x4b4>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	4319      	orrs	r1, r3
 8003d5c:	4b58      	ldr	r3, [pc, #352]	@ (8003ec0 <dhcpserver_fn+0x4b8>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	430b      	orrs	r3, r1
 8003d64:	4957      	ldr	r1, [pc, #348]	@ (8003ec4 <dhcpserver_fn+0x4bc>)
 8003d66:	7809      	ldrb	r1, [r1, #0]
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003d70:	431a      	orrs	r2, r3
 8003d72:	4b51      	ldr	r3, [pc, #324]	@ (8003eb8 <dhcpserver_fn+0x4b0>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	0619      	lsls	r1, r3, #24
 8003d78:	4b50      	ldr	r3, [pc, #320]	@ (8003ebc <dhcpserver_fn+0x4b4>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	4319      	orrs	r1, r3
 8003d80:	4b4f      	ldr	r3, [pc, #316]	@ (8003ec0 <dhcpserver_fn+0x4b8>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	430b      	orrs	r3, r1
 8003d88:	494e      	ldr	r1, [pc, #312]	@ (8003ec4 <dhcpserver_fn+0x4bc>)
 8003d8a:	7809      	ldrb	r1, [r1, #0]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	0e1b      	lsrs	r3, r3, #24
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003da0:	f00d fa27 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	b299      	uxth	r1, r3
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003db6:	f00d fa1c 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	b299      	uxth	r1, r3
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dcc:	f00d fa11 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3303      	adds	r3, #3
 8003dd6:	b299      	uxth	r1, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	0e1b      	lsrs	r3, r3, #24
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003de2:	f00d fa06 	bl	80111f2 <pbuf_put_at>
      options_offset += 4;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	3304      	adds	r3, #4
 8003dea:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8003dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2233      	movs	r2, #51	@ 0x33
 8003df2:	4619      	mov	r1, r3
 8003df4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003df6:	f00d f9fc 	bl	80111f2 <pbuf_put_at>
      options_offset++;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2204      	movs	r2, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e0a:	f00d f9f2 	bl	80111f2 <pbuf_put_at>
      options_offset++;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	3301      	adds	r3, #1
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e1e:	f00d f9e8 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3301      	adds	r3, #1
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e30:	f00d f9df 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3302      	adds	r3, #2
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2251      	movs	r2, #81	@ 0x51
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e42:	f00d f9d6 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3303      	adds	r3, #3
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2280      	movs	r2, #128	@ 0x80
 8003e50:	4619      	mov	r1, r3
 8003e52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e54:	f00d f9cd 	bl	80111f2 <pbuf_put_at>
      options_offset += 4;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2236      	movs	r2, #54	@ 0x36
 8003e64:	4619      	mov	r1, r3
 8003e66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e68:	f00d f9c3 	bl	80111f2 <pbuf_put_at>
      options_offset++;
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	3301      	adds	r3, #1
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2204      	movs	r2, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e7c:	f00d f9b9 	bl	80111f2 <pbuf_put_at>
      options_offset++;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	3301      	adds	r3, #1
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8003e86:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb8 <dhcpserver_fn+0x4b0>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	061a      	lsls	r2, r3, #24
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ebc <dhcpserver_fn+0x4b4>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	041b      	lsls	r3, r3, #16
 8003e92:	431a      	orrs	r2, r3
 8003e94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec0 <dhcpserver_fn+0x4b8>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	4a09      	ldr	r2, [pc, #36]	@ (8003ec4 <dhcpserver_fn+0x4bc>)
 8003e9e:	7812      	ldrb	r2, [r2, #0]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	061a      	lsls	r2, r3, #24
 8003ea4:	e010      	b.n	8003ec8 <dhcpserver_fn+0x4c0>
 8003ea6:	bf00      	nop
 8003ea8:	2000009e 	.word	0x2000009e
 8003eac:	2000009f 	.word	0x2000009f
 8003eb0:	200000a0 	.word	0x200000a0
 8003eb4:	2000090c 	.word	0x2000090c
 8003eb8:	2000009a 	.word	0x2000009a
 8003ebc:	2000009b 	.word	0x2000009b
 8003ec0:	2000009c 	.word	0x2000009c
 8003ec4:	2000009d 	.word	0x2000009d
 8003ec8:	4b54      	ldr	r3, [pc, #336]	@ (800401c <dhcpserver_fn+0x614>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	0619      	lsls	r1, r3, #24
 8003ece:	4b54      	ldr	r3, [pc, #336]	@ (8004020 <dhcpserver_fn+0x618>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	4319      	orrs	r1, r3
 8003ed6:	4b53      	ldr	r3, [pc, #332]	@ (8004024 <dhcpserver_fn+0x61c>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	430b      	orrs	r3, r1
 8003ede:	4952      	ldr	r1, [pc, #328]	@ (8004028 <dhcpserver_fn+0x620>)
 8003ee0:	7809      	ldrb	r1, [r1, #0]
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003eea:	431a      	orrs	r2, r3
 8003eec:	4b4b      	ldr	r3, [pc, #300]	@ (800401c <dhcpserver_fn+0x614>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	0619      	lsls	r1, r3, #24
 8003ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8004020 <dhcpserver_fn+0x618>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	4319      	orrs	r1, r3
 8003efa:	4b4a      	ldr	r3, [pc, #296]	@ (8004024 <dhcpserver_fn+0x61c>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	430b      	orrs	r3, r1
 8003f02:	4949      	ldr	r1, [pc, #292]	@ (8004028 <dhcpserver_fn+0x620>)
 8003f04:	7809      	ldrb	r1, [r1, #0]
 8003f06:	430b      	orrs	r3, r1
 8003f08:	0a1b      	lsrs	r3, r3, #8
 8003f0a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	4b42      	ldr	r3, [pc, #264]	@ (800401c <dhcpserver_fn+0x614>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	0619      	lsls	r1, r3, #24
 8003f16:	4b42      	ldr	r3, [pc, #264]	@ (8004020 <dhcpserver_fn+0x618>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	4319      	orrs	r1, r3
 8003f1e:	4b41      	ldr	r3, [pc, #260]	@ (8004024 <dhcpserver_fn+0x61c>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	430b      	orrs	r3, r1
 8003f26:	4940      	ldr	r1, [pc, #256]	@ (8004028 <dhcpserver_fn+0x620>)
 8003f28:	7809      	ldrb	r1, [r1, #0]
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	0e1b      	lsrs	r3, r3, #24
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8003f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f3e:	f00d f958 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3301      	adds	r3, #1
 8003f48:	b299      	uxth	r1, r3
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f54:	f00d f94d 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	b299      	uxth	r1, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	0c1b      	lsrs	r3, r3, #16
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f6a:	f00d f942 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3303      	adds	r3, #3
 8003f74:	b299      	uxth	r1, r3
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	0e1b      	lsrs	r3, r3, #24
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f80:	f00d f937 	bl	80111f2 <pbuf_put_at>
      options_offset += 4;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	3304      	adds	r3, #4
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	22ff      	movs	r2, #255	@ 0xff
 8003f90:	4619      	mov	r1, r3
 8003f92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f94:	f00d f92d 	bl	80111f2 <pbuf_put_at>
      options_offset++;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_realloc(pbuf_out, options_offset);
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fa6:	f00c fc7f 	bl	80108a8 <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8003faa:	4b20      	ldr	r3, [pc, #128]	@ (800402c <dhcpserver_fn+0x624>)
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	f107 0214 	add.w	r2, r7, #20
 8003fb2:	2344      	movs	r3, #68	@ 0x44
 8003fb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fb6:	f012 fe3b 	bl	8016c30 <udp_sendto>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
      break;
 8003fbe:	e2f9      	b.n	80045b4 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fc6:	f00d f914 	bl	80111f2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2108      	movs	r1, #8
 8003fce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fd0:	f00d f90f 	bl	80111f2 <pbuf_put_at>
      flags = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      flags = pbuf_get_at(pbuf_in, DHCP_FLAGS_OFS);
 8003fda:	210a      	movs	r1, #10
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f00d f8cf 	bl	8011180 <pbuf_get_at>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      if (flags & 0x80) {
 8003fe8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da1f      	bge.n	8004030 <dhcpserver_fn+0x628>
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 8003ff0:	210a      	movs	r1, #10
 8003ff2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ff4:	f00d f8c4 	bl	8011180 <pbuf_get_at>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        flags |= 0x80;
 8003ffe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004002:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 800400a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800400e:	461a      	mov	r2, r3
 8004010:	210a      	movs	r1, #10
 8004012:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004014:	f00d f8ed 	bl	80111f2 <pbuf_put_at>
 8004018:	e01e      	b.n	8004058 <dhcpserver_fn+0x650>
 800401a:	bf00      	nop
 800401c:	2000009a 	.word	0x2000009a
 8004020:	2000009b 	.word	0x2000009b
 8004024:	2000009c 	.word	0x2000009c
 8004028:	2000009d 	.word	0x2000009d
 800402c:	2000060c 	.word	0x2000060c
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 8004030:	210a      	movs	r1, #10
 8004032:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004034:	f00d f8a4 	bl	8011180 <pbuf_get_at>
 8004038:	4603      	mov	r3, r0
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        flags &= ~0x80;
 800403e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 800404a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800404e:	461a      	mov	r2, r3
 8004050:	210a      	movs	r1, #10
 8004052:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004054:	f00d f8cd 	bl	80111f2 <pbuf_put_at>
      if (0 == dhcpserver_find_requested_ip(pbuf_in, (uint8_t *)&client_requested_addr)) {
 8004058:	f107 0318 	add.w	r3, r7, #24
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fc7e 	bl	8003960 <dhcpserver_find_requested_ip>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 82a3 	beq.w	80045b2 <dhcpserver_fn+0xbaa>
      if (client_requested_addr == client_ip_addr.addr) {
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	429a      	cmp	r2, r3
 8004072:	f040 8249 	bne.w	8004508 <dhcpserver_fn+0xb00>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	2110      	movs	r1, #16
 800407e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004080:	f00d f8b7 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	0a1b      	lsrs	r3, r3, #8
 8004088:	b2db      	uxtb	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	2111      	movs	r1, #17
 800408e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004090:	f00d f8af 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	0c1b      	lsrs	r3, r3, #16
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	2112      	movs	r1, #18
 800409e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040a0:	f00d f8a7 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	0e1b      	lsrs	r3, r3, #24
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	2113      	movs	r1, #19
 80040ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040b0:	f00d f89f 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 80040b4:	2200      	movs	r2, #0
 80040b6:	2114      	movs	r1, #20
 80040b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040ba:	f00d f89a 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 80040be:	2200      	movs	r2, #0
 80040c0:	2115      	movs	r1, #21
 80040c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040c4:	f00d f895 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 80040c8:	2200      	movs	r2, #0
 80040ca:	2116      	movs	r1, #22
 80040cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040ce:	f00d f890 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 80040d2:	2200      	movs	r2, #0
 80040d4:	2117      	movs	r1, #23
 80040d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040d8:	f00d f88b 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 80040dc:	2263      	movs	r2, #99	@ 0x63
 80040de:	21ec      	movs	r1, #236	@ 0xec
 80040e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040e2:	f00d f886 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 80040e6:	2282      	movs	r2, #130	@ 0x82
 80040e8:	21ed      	movs	r1, #237	@ 0xed
 80040ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040ec:	f00d f881 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 80040f0:	2253      	movs	r2, #83	@ 0x53
 80040f2:	21ee      	movs	r1, #238	@ 0xee
 80040f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040f6:	f00d f87c 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 80040fa:	2263      	movs	r2, #99	@ 0x63
 80040fc:	21ef      	movs	r1, #239	@ 0xef
 80040fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004100:	f00d f877 	bl	80111f2 <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8004104:	23f0      	movs	r3, #240	@ 0xf0
 8004106:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8004108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410a:	b29b      	uxth	r3, r3
 800410c:	2235      	movs	r2, #53	@ 0x35
 800410e:	4619      	mov	r1, r3
 8004110:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004112:	f00d f86e 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	3301      	adds	r3, #1
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	b29b      	uxth	r3, r3
 8004120:	2201      	movs	r2, #1
 8004122:	4619      	mov	r1, r3
 8004124:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004126:	f00d f864 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	3301      	adds	r3, #1
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_ACK);
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	b29b      	uxth	r3, r3
 8004134:	2205      	movs	r2, #5
 8004136:	4619      	mov	r1, r3
 8004138:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800413a:	f00d f85a 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	3301      	adds	r3, #1
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	b29b      	uxth	r3, r3
 8004148:	2201      	movs	r2, #1
 800414a:	4619      	mov	r1, r3
 800414c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800414e:	f00d f850 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	3301      	adds	r3, #1
 8004156:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	b29b      	uxth	r3, r3
 800415c:	2204      	movs	r2, #4
 800415e:	4619      	mov	r1, r3
 8004160:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004162:	f00d f846 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	3301      	adds	r3, #1
 800416a:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 800416c:	4ba8      	ldr	r3, [pc, #672]	@ (8004410 <dhcpserver_fn+0xa08>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	061a      	lsls	r2, r3, #24
 8004172:	4ba8      	ldr	r3, [pc, #672]	@ (8004414 <dhcpserver_fn+0xa0c>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	041b      	lsls	r3, r3, #16
 8004178:	431a      	orrs	r2, r3
 800417a:	4ba7      	ldr	r3, [pc, #668]	@ (8004418 <dhcpserver_fn+0xa10>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	4313      	orrs	r3, r2
 8004182:	4aa6      	ldr	r2, [pc, #664]	@ (800441c <dhcpserver_fn+0xa14>)
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	061a      	lsls	r2, r3, #24
 800418a:	4ba1      	ldr	r3, [pc, #644]	@ (8004410 <dhcpserver_fn+0xa08>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	0619      	lsls	r1, r3, #24
 8004190:	4ba0      	ldr	r3, [pc, #640]	@ (8004414 <dhcpserver_fn+0xa0c>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	041b      	lsls	r3, r3, #16
 8004196:	4319      	orrs	r1, r3
 8004198:	4b9f      	ldr	r3, [pc, #636]	@ (8004418 <dhcpserver_fn+0xa10>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	430b      	orrs	r3, r1
 80041a0:	499e      	ldr	r1, [pc, #632]	@ (800441c <dhcpserver_fn+0xa14>)
 80041a2:	7809      	ldrb	r1, [r1, #0]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80041ac:	431a      	orrs	r2, r3
 80041ae:	4b98      	ldr	r3, [pc, #608]	@ (8004410 <dhcpserver_fn+0xa08>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	0619      	lsls	r1, r3, #24
 80041b4:	4b97      	ldr	r3, [pc, #604]	@ (8004414 <dhcpserver_fn+0xa0c>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	4319      	orrs	r1, r3
 80041bc:	4b96      	ldr	r3, [pc, #600]	@ (8004418 <dhcpserver_fn+0xa10>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	430b      	orrs	r3, r1
 80041c4:	4995      	ldr	r1, [pc, #596]	@ (800441c <dhcpserver_fn+0xa14>)
 80041c6:	7809      	ldrb	r1, [r1, #0]
 80041c8:	430b      	orrs	r3, r1
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80041d0:	431a      	orrs	r2, r3
 80041d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004410 <dhcpserver_fn+0xa08>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	0619      	lsls	r1, r3, #24
 80041d8:	4b8e      	ldr	r3, [pc, #568]	@ (8004414 <dhcpserver_fn+0xa0c>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	4319      	orrs	r1, r3
 80041e0:	4b8d      	ldr	r3, [pc, #564]	@ (8004418 <dhcpserver_fn+0xa10>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	430b      	orrs	r3, r1
 80041e8:	498c      	ldr	r1, [pc, #560]	@ (800441c <dhcpserver_fn+0xa14>)
 80041ea:	7809      	ldrb	r1, [r1, #0]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	0e1b      	lsrs	r3, r3, #24
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004200:	f00c fff7 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8004204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004206:	b29b      	uxth	r3, r3
 8004208:	3301      	adds	r3, #1
 800420a:	b299      	uxth	r1, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004216:	f00c ffec 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	b29b      	uxth	r3, r3
 800421e:	3302      	adds	r3, #2
 8004220:	b299      	uxth	r1, r3
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	0c1b      	lsrs	r3, r3, #16
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800422c:	f00c ffe1 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	b29b      	uxth	r3, r3
 8004234:	3303      	adds	r3, #3
 8004236:	b299      	uxth	r1, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	0e1b      	lsrs	r3, r3, #24
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004242:	f00c ffd6 	bl	80111f2 <pbuf_put_at>
        options_offset += 4;
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	3304      	adds	r3, #4
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	b29b      	uxth	r3, r3
 8004250:	2203      	movs	r2, #3
 8004252:	4619      	mov	r1, r3
 8004254:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004256:	f00c ffcc 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	3301      	adds	r3, #1
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	b29b      	uxth	r3, r3
 8004264:	2204      	movs	r2, #4
 8004266:	4619      	mov	r1, r3
 8004268:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800426a:	f00c ffc2 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	3301      	adds	r3, #1
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8004274:	4b6a      	ldr	r3, [pc, #424]	@ (8004420 <dhcpserver_fn+0xa18>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	061a      	lsls	r2, r3, #24
 800427a:	4b6a      	ldr	r3, [pc, #424]	@ (8004424 <dhcpserver_fn+0xa1c>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	041b      	lsls	r3, r3, #16
 8004280:	431a      	orrs	r2, r3
 8004282:	4b69      	ldr	r3, [pc, #420]	@ (8004428 <dhcpserver_fn+0xa20>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	4313      	orrs	r3, r2
 800428a:	4a68      	ldr	r2, [pc, #416]	@ (800442c <dhcpserver_fn+0xa24>)
 800428c:	7812      	ldrb	r2, [r2, #0]
 800428e:	4313      	orrs	r3, r2
 8004290:	061a      	lsls	r2, r3, #24
 8004292:	4b63      	ldr	r3, [pc, #396]	@ (8004420 <dhcpserver_fn+0xa18>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	0619      	lsls	r1, r3, #24
 8004298:	4b62      	ldr	r3, [pc, #392]	@ (8004424 <dhcpserver_fn+0xa1c>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	041b      	lsls	r3, r3, #16
 800429e:	4319      	orrs	r1, r3
 80042a0:	4b61      	ldr	r3, [pc, #388]	@ (8004428 <dhcpserver_fn+0xa20>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	430b      	orrs	r3, r1
 80042a8:	4960      	ldr	r1, [pc, #384]	@ (800442c <dhcpserver_fn+0xa24>)
 80042aa:	7809      	ldrb	r1, [r1, #0]
 80042ac:	430b      	orrs	r3, r1
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80042b4:	431a      	orrs	r2, r3
 80042b6:	4b5a      	ldr	r3, [pc, #360]	@ (8004420 <dhcpserver_fn+0xa18>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	0619      	lsls	r1, r3, #24
 80042bc:	4b59      	ldr	r3, [pc, #356]	@ (8004424 <dhcpserver_fn+0xa1c>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	4319      	orrs	r1, r3
 80042c4:	4b58      	ldr	r3, [pc, #352]	@ (8004428 <dhcpserver_fn+0xa20>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	430b      	orrs	r3, r1
 80042cc:	4957      	ldr	r1, [pc, #348]	@ (800442c <dhcpserver_fn+0xa24>)
 80042ce:	7809      	ldrb	r1, [r1, #0]
 80042d0:	430b      	orrs	r3, r1
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80042d8:	431a      	orrs	r2, r3
 80042da:	4b51      	ldr	r3, [pc, #324]	@ (8004420 <dhcpserver_fn+0xa18>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	0619      	lsls	r1, r3, #24
 80042e0:	4b50      	ldr	r3, [pc, #320]	@ (8004424 <dhcpserver_fn+0xa1c>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	041b      	lsls	r3, r3, #16
 80042e6:	4319      	orrs	r1, r3
 80042e8:	4b4f      	ldr	r3, [pc, #316]	@ (8004428 <dhcpserver_fn+0xa20>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	430b      	orrs	r3, r1
 80042f0:	494e      	ldr	r1, [pc, #312]	@ (800442c <dhcpserver_fn+0xa24>)
 80042f2:	7809      	ldrb	r1, [r1, #0]
 80042f4:	430b      	orrs	r3, r1
 80042f6:	0e1b      	lsrs	r3, r3, #24
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	b29b      	uxth	r3, r3
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	4619      	mov	r1, r3
 8004306:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004308:	f00c ff73 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	b29b      	uxth	r3, r3
 8004310:	3301      	adds	r3, #1
 8004312:	b299      	uxth	r1, r3
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800431e:	f00c ff68 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	b29b      	uxth	r3, r3
 8004326:	3302      	adds	r3, #2
 8004328:	b299      	uxth	r1, r3
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	b2db      	uxtb	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004334:	f00c ff5d 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	b29b      	uxth	r3, r3
 800433c:	3303      	adds	r3, #3
 800433e:	b299      	uxth	r1, r3
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	0e1b      	lsrs	r3, r3, #24
 8004344:	b2db      	uxtb	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800434a:	f00c ff52 	bl	80111f2 <pbuf_put_at>
        options_offset += 4;
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	3304      	adds	r3, #4
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8004354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004356:	b29b      	uxth	r3, r3
 8004358:	2233      	movs	r2, #51	@ 0x33
 800435a:	4619      	mov	r1, r3
 800435c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800435e:	f00c ff48 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	3301      	adds	r3, #1
 8004366:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	b29b      	uxth	r3, r3
 800436c:	2204      	movs	r2, #4
 800436e:	4619      	mov	r1, r3
 8004370:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004372:	f00c ff3e 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	3301      	adds	r3, #1
 800437a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	b29b      	uxth	r3, r3
 8004380:	2200      	movs	r2, #0
 8004382:	4619      	mov	r1, r3
 8004384:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004386:	f00c ff34 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	b29b      	uxth	r3, r3
 800438e:	3301      	adds	r3, #1
 8004390:	b29b      	uxth	r3, r3
 8004392:	2201      	movs	r2, #1
 8004394:	4619      	mov	r1, r3
 8004396:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004398:	f00c ff2b 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3302      	adds	r3, #2
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2251      	movs	r2, #81	@ 0x51
 80043a6:	4619      	mov	r1, r3
 80043a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043aa:	f00c ff22 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3303      	adds	r3, #3
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2280      	movs	r2, #128	@ 0x80
 80043b8:	4619      	mov	r1, r3
 80043ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043bc:	f00c ff19 	bl	80111f2 <pbuf_put_at>
        options_offset += 4;
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	3304      	adds	r3, #4
 80043c4:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2236      	movs	r2, #54	@ 0x36
 80043cc:	4619      	mov	r1, r3
 80043ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043d0:	f00c ff0f 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	3301      	adds	r3, #1
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2204      	movs	r2, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043e4:	f00c ff05 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ea:	3301      	adds	r3, #1
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 80043ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004420 <dhcpserver_fn+0xa18>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	061a      	lsls	r2, r3, #24
 80043f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004424 <dhcpserver_fn+0xa1c>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	041b      	lsls	r3, r3, #16
 80043fa:	431a      	orrs	r2, r3
 80043fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <dhcpserver_fn+0xa20>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	4313      	orrs	r3, r2
 8004404:	4a09      	ldr	r2, [pc, #36]	@ (800442c <dhcpserver_fn+0xa24>)
 8004406:	7812      	ldrb	r2, [r2, #0]
 8004408:	4313      	orrs	r3, r2
 800440a:	061a      	lsls	r2, r3, #24
 800440c:	e010      	b.n	8004430 <dhcpserver_fn+0xa28>
 800440e:	bf00      	nop
 8004410:	2000009e 	.word	0x2000009e
 8004414:	2000009f 	.word	0x2000009f
 8004418:	200000a0 	.word	0x200000a0
 800441c:	2000090c 	.word	0x2000090c
 8004420:	2000009a 	.word	0x2000009a
 8004424:	2000009b 	.word	0x2000009b
 8004428:	2000009c 	.word	0x2000009c
 800442c:	2000009d 	.word	0x2000009d
 8004430:	4b67      	ldr	r3, [pc, #412]	@ (80045d0 <dhcpserver_fn+0xbc8>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	0619      	lsls	r1, r3, #24
 8004436:	4b67      	ldr	r3, [pc, #412]	@ (80045d4 <dhcpserver_fn+0xbcc>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	4319      	orrs	r1, r3
 800443e:	4b66      	ldr	r3, [pc, #408]	@ (80045d8 <dhcpserver_fn+0xbd0>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	430b      	orrs	r3, r1
 8004446:	4965      	ldr	r1, [pc, #404]	@ (80045dc <dhcpserver_fn+0xbd4>)
 8004448:	7809      	ldrb	r1, [r1, #0]
 800444a:	430b      	orrs	r3, r1
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004452:	431a      	orrs	r2, r3
 8004454:	4b5e      	ldr	r3, [pc, #376]	@ (80045d0 <dhcpserver_fn+0xbc8>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	0619      	lsls	r1, r3, #24
 800445a:	4b5e      	ldr	r3, [pc, #376]	@ (80045d4 <dhcpserver_fn+0xbcc>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	041b      	lsls	r3, r3, #16
 8004460:	4319      	orrs	r1, r3
 8004462:	4b5d      	ldr	r3, [pc, #372]	@ (80045d8 <dhcpserver_fn+0xbd0>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	430b      	orrs	r3, r1
 800446a:	495c      	ldr	r1, [pc, #368]	@ (80045dc <dhcpserver_fn+0xbd4>)
 800446c:	7809      	ldrb	r1, [r1, #0]
 800446e:	430b      	orrs	r3, r1
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004476:	431a      	orrs	r2, r3
 8004478:	4b55      	ldr	r3, [pc, #340]	@ (80045d0 <dhcpserver_fn+0xbc8>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	0619      	lsls	r1, r3, #24
 800447e:	4b55      	ldr	r3, [pc, #340]	@ (80045d4 <dhcpserver_fn+0xbcc>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	041b      	lsls	r3, r3, #16
 8004484:	4319      	orrs	r1, r3
 8004486:	4b54      	ldr	r3, [pc, #336]	@ (80045d8 <dhcpserver_fn+0xbd0>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	430b      	orrs	r3, r1
 800448e:	4953      	ldr	r1, [pc, #332]	@ (80045dc <dhcpserver_fn+0xbd4>)
 8004490:	7809      	ldrb	r1, [r1, #0]
 8004492:	430b      	orrs	r3, r1
 8004494:	0e1b      	lsrs	r3, r3, #24
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	b29b      	uxth	r3, r3
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044a6:	f00c fea4 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3301      	adds	r3, #1
 80044b0:	b299      	uxth	r1, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044bc:	f00c fe99 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3302      	adds	r3, #2
 80044c6:	b299      	uxth	r1, r3
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044d2:	f00c fe8e 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3303      	adds	r3, #3
 80044dc:	b299      	uxth	r1, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	0e1b      	lsrs	r3, r3, #24
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044e8:	f00c fe83 	bl	80111f2 <pbuf_put_at>
        options_offset += 4;
 80044ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ee:	3304      	adds	r3, #4
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	22ff      	movs	r2, #255	@ 0xff
 80044f8:	4619      	mov	r1, r3
 80044fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044fc:	f00c fe79 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 8004500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004502:	3301      	adds	r3, #1
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
 8004506:	e03d      	b.n	8004584 <dhcpserver_fn+0xb7c>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8004508:	2263      	movs	r2, #99	@ 0x63
 800450a:	21ec      	movs	r1, #236	@ 0xec
 800450c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800450e:	f00c fe70 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8004512:	2282      	movs	r2, #130	@ 0x82
 8004514:	21ed      	movs	r1, #237	@ 0xed
 8004516:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004518:	f00c fe6b 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 800451c:	2253      	movs	r2, #83	@ 0x53
 800451e:	21ee      	movs	r1, #238	@ 0xee
 8004520:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004522:	f00c fe66 	bl	80111f2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8004526:	2263      	movs	r2, #99	@ 0x63
 8004528:	21ef      	movs	r1, #239	@ 0xef
 800452a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800452c:	f00c fe61 	bl	80111f2 <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8004530:	23f0      	movs	r3, #240	@ 0xf0
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	b29b      	uxth	r3, r3
 8004538:	2235      	movs	r2, #53	@ 0x35
 800453a:	4619      	mov	r1, r3
 800453c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800453e:	f00c fe58 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	3301      	adds	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8004548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454a:	b29b      	uxth	r3, r3
 800454c:	2201      	movs	r2, #1
 800454e:	4619      	mov	r1, r3
 8004550:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004552:	f00c fe4e 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	3301      	adds	r3, #1
 800455a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_NAK);
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	b29b      	uxth	r3, r3
 8004560:	2206      	movs	r2, #6
 8004562:	4619      	mov	r1, r3
 8004564:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004566:	f00c fe44 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	3301      	adds	r3, #1
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	b29b      	uxth	r3, r3
 8004574:	22ff      	movs	r2, #255	@ 0xff
 8004576:	4619      	mov	r1, r3
 8004578:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800457a:	f00c fe3a 	bl	80111f2 <pbuf_put_at>
        options_offset++;
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	3301      	adds	r3, #1
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_realloc(pbuf_out, options_offset);
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	b29b      	uxth	r3, r3
 8004588:	4619      	mov	r1, r3
 800458a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800458c:	f00c f98c 	bl	80108a8 <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8004590:	4b13      	ldr	r3, [pc, #76]	@ (80045e0 <dhcpserver_fn+0xbd8>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	f107 0214 	add.w	r2, r7, #20
 8004598:	2344      	movs	r3, #68	@ 0x44
 800459a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800459c:	f012 fb48 	bl	8016c30 <udp_sendto>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
      break;
 80045a4:	e006      	b.n	80045b4 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 80045a6:	bf00      	nop
 80045a8:	e004      	b.n	80045b4 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 80045aa:	bf00      	nop
 80045ac:	e002      	b.n	80045b4 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 80045ae:	bf00      	nop
 80045b0:	e000      	b.n	80045b4 <dhcpserver_fn+0xbac>
        goto end_of_fcn;
 80045b2:	bf00      	nop
  }

  end_of_fcn:
  if (pbuf_out) {
 80045b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <dhcpserver_fn+0xbb8>
    pbuf_free(pbuf_out);
 80045ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045bc:	f00c fafa 	bl	8010bb4 <pbuf_free>
  }
  pbuf_free(pbuf_in);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f00c faf7 	bl	8010bb4 <pbuf_free>
}
 80045c6:	bf00      	nop
 80045c8:	3730      	adds	r7, #48	@ 0x30
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	2000009a 	.word	0x2000009a
 80045d4:	2000009b 	.word	0x2000009b
 80045d8:	2000009c 	.word	0x2000009c
 80045dc:	2000009d 	.word	0x2000009d
 80045e0:	2000060c 	.word	0x2000060c

080045e4 <dhcpserver_start_prv>:

/***************************************************************************//**
 * Start DHCP server callback.
 ******************************************************************************/
static void dhcpserver_start_prv(void * arg)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e03d      	b.n	800466e <dhcpserver_start_prv+0x8a>
    saved_mac[i].addr[0] = 0;
 80045f2:	4933      	ldr	r1, [pc, #204]	@ (80046c0 <dhcpserver_start_prv+0xdc>)
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	440b      	add	r3, r1
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8004604:	492e      	ldr	r1, [pc, #184]	@ (80046c0 <dhcpserver_start_prv+0xdc>)
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	440b      	add	r3, r1
 8004612:	3301      	adds	r3, #1
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8004618:	4929      	ldr	r1, [pc, #164]	@ (80046c0 <dhcpserver_start_prv+0xdc>)
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4613      	mov	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4413      	add	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	440b      	add	r3, r1
 8004626:	3302      	adds	r3, #2
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 800462c:	4924      	ldr	r1, [pc, #144]	@ (80046c0 <dhcpserver_start_prv+0xdc>)
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	440b      	add	r3, r1
 800463a:	3303      	adds	r3, #3
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 8004640:	491f      	ldr	r1, [pc, #124]	@ (80046c0 <dhcpserver_start_prv+0xdc>)
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4613      	mov	r3, r2
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	4413      	add	r3, r2
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	440b      	add	r3, r1
 800464e:	3304      	adds	r3, #4
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 8004654:	491a      	ldr	r1, [pc, #104]	@ (80046c0 <dhcpserver_start_prv+0xdc>)
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4613      	mov	r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	4413      	add	r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	440b      	add	r3, r1
 8004662:	3305      	adds	r3, #5
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3301      	adds	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b07      	cmp	r3, #7
 8004672:	d9be      	bls.n	80045f2 <dhcpserver_start_prv+0xe>
  }

  if (NULL == dhcp_pcb) {
 8004674:	4b13      	ldr	r3, [pc, #76]	@ (80046c4 <dhcpserver_start_prv+0xe0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d11e      	bne.n	80046ba <dhcpserver_start_prv+0xd6>
    dhcp_pcb = udp_new();
 800467c:	f012 fe28 	bl	80172d0 <udp_new>
 8004680:	4603      	mov	r3, r0
 8004682:	4a10      	ldr	r2, [pc, #64]	@ (80046c4 <dhcpserver_start_prv+0xe0>)
 8004684:	6013      	str	r3, [r2, #0]
    if (NULL == dhcp_pcb) {
 8004686:	4b0f      	ldr	r3, [pc, #60]	@ (80046c4 <dhcpserver_start_prv+0xe0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d014      	beq.n	80046b8 <dhcpserver_start_prv+0xd4>
      return;
    }

    udp_bind(dhcp_pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <dhcpserver_start_prv+0xe0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2243      	movs	r2, #67	@ 0x43
 8004694:	490c      	ldr	r1, [pc, #48]	@ (80046c8 <dhcpserver_start_prv+0xe4>)
 8004696:	4618      	mov	r0, r3
 8004698:	f012 fc80 	bl	8016f9c <udp_bind>
    udp_bind_netif(dhcp_pcb, &ap_netif);
 800469c:	4b09      	ldr	r3, [pc, #36]	@ (80046c4 <dhcpserver_start_prv+0xe0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	490a      	ldr	r1, [pc, #40]	@ (80046cc <dhcpserver_start_prv+0xe8>)
 80046a2:	4618      	mov	r0, r3
 80046a4:	f012 fd02 	bl	80170ac <udp_bind_netif>
    udp_recv(dhcp_pcb, dhcpserver_fn, 0);
 80046a8:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <dhcpserver_start_prv+0xe0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2200      	movs	r2, #0
 80046ae:	4908      	ldr	r1, [pc, #32]	@ (80046d0 <dhcpserver_start_prv+0xec>)
 80046b0:	4618      	mov	r0, r3
 80046b2:	f012 fdab 	bl	801720c <udp_recv>
 80046b6:	e000      	b.n	80046ba <dhcpserver_start_prv+0xd6>
      return;
 80046b8:	bf00      	nop
  }
}
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000610 	.word	0x20000610
 80046c4:	2000060c 	.word	0x2000060c
 80046c8:	0806e194 	.word	0x0806e194
 80046cc:	2000089c 	.word	0x2000089c
 80046d0:	08003a09 	.word	0x08003a09

080046d4 <dhcpserver_start>:

/***************************************************************************//**
 * Start DHCP server.
 ******************************************************************************/
void dhcpserver_start(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_start_prv, 0);
 80046d8:	2100      	movs	r1, #0
 80046da:	4802      	ldr	r0, [pc, #8]	@ (80046e4 <dhcpserver_start+0x10>)
 80046dc:	f00a fc70 	bl	800efc0 <tcpip_callback>
}
 80046e0:	bf00      	nop
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	080045e5 	.word	0x080045e5

080046e8 <dhcpserver_stop_prv>:

/***************************************************************************//**
 * Stop DHCP server callback.
 ******************************************************************************/
static void dhcpserver_stop_prv(void * arg)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  if (dhcp_pcb != NULL) {
 80046f0:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <dhcpserver_stop_prv+0x34>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00c      	beq.n	8004712 <dhcpserver_stop_prv+0x2a>
    udp_disconnect(dhcp_pcb);
 80046f8:	4b08      	ldr	r3, [pc, #32]	@ (800471c <dhcpserver_stop_prv+0x34>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f012 fd5d 	bl	80171bc <udp_disconnect>
    udp_remove(dhcp_pcb);
 8004702:	4b06      	ldr	r3, [pc, #24]	@ (800471c <dhcpserver_stop_prv+0x34>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f012 fda0 	bl	801724c <udp_remove>
    dhcp_pcb = NULL;
 800470c:	4b03      	ldr	r3, [pc, #12]	@ (800471c <dhcpserver_stop_prv+0x34>)
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
  }
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	2000060c 	.word	0x2000060c

08004720 <dhcpserver_stop>:

/***************************************************************************//**
 * Stop DHCP server.
 ******************************************************************************/
void dhcpserver_stop(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_stop_prv, 0);
 8004724:	2100      	movs	r1, #0
 8004726:	4802      	ldr	r0, [pc, #8]	@ (8004730 <dhcpserver_stop+0x10>)
 8004728:	f00a fc4a 	bl	800efc0 <tcpip_callback>
}
 800472c:	bf00      	nop
 800472e:	bd80      	pop	{r7, pc}
 8004730:	080046e9 	.word	0x080046e9

08004734 <low_level_init>:
 * @param[in] netif: the already initialized lwip network interface structure
 *
 * @return
 *    None
 ******************************************************************************/
static void low_level_init (struct netif *netif) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* set netif MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2206      	movs	r2, #6
 8004740:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  
  /* Check which netif is initialized and set netif MAC hardware address */
  if (memcmp(netif->name, STATION_NETIF, 2) == 0) {
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3332      	adds	r3, #50	@ 0x32
 8004748:	2202      	movs	r2, #2
 800474a:	491b      	ldr	r1, [pc, #108]	@ (80047b8 <low_level_init+0x84>)
 800474c:	4618      	mov	r0, r3
 800474e:	f018 f9c1 	bl	801cad4 <memcmp>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <low_level_init+0x3a>
    memcpy(netif->hwaddr, wifi_context.mac_addr_0.octet, 6);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800475e:	4b17      	ldr	r3, [pc, #92]	@ (80047bc <low_level_init+0x88>)
 8004760:	f203 2316 	addw	r3, r3, #534	@ 0x216
 8004764:	6819      	ldr	r1, [r3, #0]
 8004766:	6011      	str	r1, [r2, #0]
 8004768:	889b      	ldrh	r3, [r3, #4]
 800476a:	8093      	strh	r3, [r2, #4]
 800476c:	e009      	b.n	8004782 <low_level_init+0x4e>
  } else {
    memcpy(netif->hwaddr, wifi_context.mac_addr_1.octet, 6);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8004774:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <low_level_init+0x88>)
 8004776:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	6010      	str	r0, [r2, #0]
 800477e:	889b      	ldrh	r3, [r3, #4]
 8004780:	8093      	strh	r3, [r2, #4]
  }

  /* Set netif maximum transfer unit */
  netif->mtu = 1500;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004788:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004790:	f043 030a 	orr.w	r3, r3, #10
 8004794:	b2da      	uxtb	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Set netif link flag */
  netif->flags |= NETIF_FLAG_LINK_UP;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80047a2:	f043 0304 	orr.w	r3, r3, #4
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	0801ebf8 	.word	0x0801ebf8
 80047bc:	20000640 	.word	0x20000640

080047c0 <low_level_output>:
 * @param[in] p: the packet to send
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
static err_t low_level_output (struct netif *netif, struct pbuf *p) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint8_t *buffer;
  sl_wfx_packet_queue_item_t *queue_item;
  sl_status_t result;
  
  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 80047ca:	4b37      	ldr	r3, [pc, #220]	@ (80048a8 <low_level_output+0xe8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f04f 31ff 	mov.w	r1, #4294967295
 80047d2:	4618      	mov	r0, r3
 80047d4:	f007 fea8 	bl	800c528 <xQueueSemaphoreTake>

  /* Allocate a buffer for a queue item */
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
                                          SL_WFX_SEND_FRAME_REQ_ID,
                                          SL_WFX_TX_FRAME_BUFFER,
                                          p->tot_len + sizeof(sl_wfx_packet_queue_item_t));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	891b      	ldrh	r3, [r3, #8]
 80047dc:	3318      	adds	r3, #24
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
 80047de:	f107 0008 	add.w	r0, r7, #8
 80047e2:	2200      	movs	r2, #0
 80047e4:	214a      	movs	r1, #74	@ 0x4a
 80047e6:	f005 fd1b 	bl	800a220 <sl_wfx_allocate_command_buffer>
 80047ea:	60f8      	str	r0, [r7, #12]
  
  if ((result != SL_STATUS_OK) || (queue_item == NULL)) {
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d102      	bne.n	80047f8 <low_level_output+0x38>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <low_level_output+0x4c>
	  /* Release TX queue mutex */
	    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 80047f8:	4b2b      	ldr	r3, [pc, #172]	@ (80048a8 <low_level_output+0xe8>)
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	2300      	movs	r3, #0
 80047fe:	2200      	movs	r2, #0
 8004800:	2100      	movs	r1, #0
 8004802:	f007 fb7f 	bl	800bf04 <xQueueGenericSend>
    return ERR_MEM;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	e049      	b.n	80048a0 <low_level_output+0xe0>
  }

  buffer = queue_item->buffer.body.packet_data;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	3318      	adds	r3, #24
 8004810:	613b      	str	r3, [r7, #16]
  
  for (q = p; q != NULL; q = q->next) {
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e010      	b.n	800483a <low_level_output+0x7a>
    /* Copy the bytes */
    memcpy(buffer, q->payload, q->len);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	895b      	ldrh	r3, [r3, #10]
 8004820:	461a      	mov	r2, r3
 8004822:	6938      	ldr	r0, [r7, #16]
 8004824:	f018 fa23 	bl	801cc6e <memcpy>
    buffer += q->len;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	895b      	ldrh	r3, [r3, #10]
 800482c:	461a      	mov	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4413      	add	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
  for (q = p; q != NULL; q = q->next) {
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1eb      	bne.n	8004818 <low_level_output+0x58>
  }

  /* Provide the data length the interface information to the pbuf */
  queue_item->interface = (memcmp(netif->name, STATION_NETIF, 2) == 0)?  SL_WFX_STA_INTERFACE : SL_WFX_SOFTAP_INTERFACE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3332      	adds	r3, #50	@ 0x32
 8004844:	2202      	movs	r2, #2
 8004846:	4919      	ldr	r1, [pc, #100]	@ (80048ac <low_level_output+0xec>)
 8004848:	4618      	mov	r0, r3
 800484a:	f018 f943 	bl	801cad4 <memcmp>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2da      	uxtb	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	711a      	strb	r2, [r3, #4]
  queue_item->data_length = p->tot_len;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	891a      	ldrh	r2, [r3, #8]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	609a      	str	r2, [r3, #8]
  
  /* Determine if there is anything on the tx packet queue */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 8004866:	4b12      	ldr	r3, [pc, #72]	@ (80048b0 <low_level_output+0xf0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <low_level_output+0xb8>
    sl_wfx_tx_queue_context.tail_ptr->next = queue_item;
 800486e:	4b10      	ldr	r3, [pc, #64]	@ (80048b0 <low_level_output+0xf0>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e002      	b.n	800487e <low_level_output+0xbe>
  } else {
    /* If tx packet queue is empty, setup head & tail pointers */
    sl_wfx_tx_queue_context.head_ptr = queue_item;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4a0d      	ldr	r2, [pc, #52]	@ (80048b0 <low_level_output+0xf0>)
 800487c:	6013      	str	r3, [r2, #0]
  }
  
  /* Update the tail pointer */
  sl_wfx_tx_queue_context.tail_ptr = queue_item;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4a0b      	ldr	r2, [pc, #44]	@ (80048b0 <low_level_output+0xf0>)
 8004882:	6053      	str	r3, [r2, #4]
  
  /* Notify that a TX frame is ready */
  xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8004884:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <low_level_output+0xf4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2101      	movs	r1, #1
 800488a:	4618      	mov	r0, r3
 800488c:	f007 f8d8 	bl	800ba40 <xEventGroupSetBits>
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8004890:	4b05      	ldr	r3, [pc, #20]	@ (80048a8 <low_level_output+0xe8>)
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	2200      	movs	r2, #0
 8004898:	2100      	movs	r1, #0
 800489a:	f007 fb33 	bl	800bf04 <xQueueGenericSend>
  
  return ERR_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	200014e8 	.word	0x200014e8
 80048ac:	0801ebf8 	.word	0x0801ebf8
 80048b0:	200014ec 	.word	0x200014ec
 80048b4:	200014e4 	.word	0x200014e4

080048b8 <low_level_input>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    LwIP pbuf filled with received packet, or NULL on error
 ******************************************************************************/
static struct pbuf *low_level_input (struct netif *netif, sl_wfx_received_ind_t* rx_buffer) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p, *q;
  uint8_t *buffer;
  
  /* Obtain the packet by removing the padding. */
  buffer = (uint8_t *)&(rx_buffer->body.frame[rx_buffer->body.frame_padding]);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	795b      	ldrb	r3, [r3, #5]
 80048c6:	461a      	mov	r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	4413      	add	r3, r2
 80048cc:	3308      	adds	r3, #8
 80048ce:	60fb      	str	r3, [r7, #12]
 
  if (rx_buffer->body.frame_length > 0) {
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	88db      	ldrh	r3, [r3, #6]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <low_level_input+0x36>
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, rx_buffer->body.frame_length, PBUF_POOL);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	88db      	ldrh	r3, [r3, #6]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 80048e4:	4619      	mov	r1, r3
 80048e6:	2000      	movs	r0, #0
 80048e8:	f00b fe7c 	bl	80105e4 <pbuf_alloc>
 80048ec:	6178      	str	r0, [r7, #20]
  }
  
  if (p != NULL) {
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d016      	beq.n	8004922 <low_level_input+0x6a>
    for (q = p; q != NULL; q = q->next) {
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	e010      	b.n	800491c <low_level_input+0x64>
      /* Copy remaining data in pbuf */
      memcpy(q->payload, buffer, q->len);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	6858      	ldr	r0, [r3, #4]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	895b      	ldrh	r3, [r3, #10]
 8004902:	461a      	mov	r2, r3
 8004904:	68f9      	ldr	r1, [r7, #12]
 8004906:	f018 f9b2 	bl	801cc6e <memcpy>
      buffer += q->len;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	895b      	ldrh	r3, [r3, #10]
 800490e:	461a      	mov	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
    for (q = p; q != NULL; q = q->next) {
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1eb      	bne.n	80048fa <low_level_input+0x42>
    }
  }  
   
  return p;
 8004922:	697b      	ldr	r3, [r7, #20]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <sl_wfx_host_received_frame_callback>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    None
******************************************************************************/
void sl_wfx_host_received_frame_callback (sl_wfx_received_ind_t* rx_buffer) {
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif;
  
  /* Check packet interface to send to AP or STA interface */
  if ((rx_buffer->header.info & SL_WFX_MSG_INFO_INTERFACE_MASK) == 
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	78db      	ldrb	r3, [r3, #3]
 8004938:	f003 0306 	and.w	r3, r3, #6
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <sl_wfx_host_received_frame_callback+0x1a>
     (SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET)) {
    /* Send to station interface */
    netif = &sta_netif;
 8004940:	4b0f      	ldr	r3, [pc, #60]	@ (8004980 <sl_wfx_host_received_frame_callback+0x54>)
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	e001      	b.n	800494a <sl_wfx_host_received_frame_callback+0x1e>
  } else {
    /* Send to softAP interface */
    netif = &ap_netif;
 8004946:	4b0f      	ldr	r3, [pc, #60]	@ (8004984 <sl_wfx_host_received_frame_callback+0x58>)
 8004948:	60fb      	str	r3, [r7, #12]
  }

  if (netif != NULL) {
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d012      	beq.n	8004976 <sl_wfx_host_received_frame_callback+0x4a>
    p = low_level_input(netif, rx_buffer);
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff ffb0 	bl	80048b8 <low_level_input>
 8004958:	60b8      	str	r0, [r7, #8]
    if (p != NULL) {
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <sl_wfx_host_received_frame_callback+0x4a>
      if (netif->input(p, netif) != ERR_OK) {
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	68b8      	ldr	r0, [r7, #8]
 8004968:	4798      	blx	r3
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <sl_wfx_host_received_frame_callback+0x4a>
        pbuf_free(p);
 8004970:	68b8      	ldr	r0, [r7, #8]
 8004972:	f00c f91f 	bl	8010bb4 <pbuf_free>
      }
    }
  }
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000864 	.word	0x20000864
 8004984:	2000089c 	.word	0x2000089c

08004988 <sta_ethernetif_init>:
 * @param[in] netif: the lwip network interface structure
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
err_t sta_ethernetif_init (struct netif *netif) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d105      	bne.n	80049a2 <sta_ethernetif_init+0x1a>
 8004996:	4b0d      	ldr	r3, [pc, #52]	@ (80049cc <sta_ethernetif_init+0x44>)
 8004998:	22dc      	movs	r2, #220	@ 0xdc
 800499a:	490d      	ldr	r1, [pc, #52]	@ (80049d0 <sta_ethernetif_init+0x48>)
 800499c:	480d      	ldr	r0, [pc, #52]	@ (80049d4 <sta_ethernetif_init+0x4c>)
 800499e:	f017 ff47 	bl	801c830 <iprintf>

  /* Set the netif name to identify the interface */
  memcpy(netif->name, STATION_NETIF, 2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3332      	adds	r3, #50	@ 0x32
 80049a6:	2202      	movs	r2, #2
 80049a8:	490b      	ldr	r1, [pc, #44]	@ (80049d8 <sta_ethernetif_init+0x50>)
 80049aa:	4618      	mov	r0, r3
 80049ac:	f018 f95f 	bl	801cc6e <memcpy>

  netif->output = etharp_output;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a0a      	ldr	r2, [pc, #40]	@ (80049dc <sta_ethernetif_init+0x54>)
 80049b4:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a09      	ldr	r2, [pc, #36]	@ (80049e0 <sta_ethernetif_init+0x58>)
 80049ba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff feb9 	bl	8004734 <low_level_init>
  
  return ERR_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	0801ebfc 	.word	0x0801ebfc
 80049d0:	0801ec18 	.word	0x0801ec18
 80049d4:	0801ec28 	.word	0x0801ec28
 80049d8:	0801ebf8 	.word	0x0801ebf8
 80049dc:	08019a25 	.word	0x08019a25
 80049e0:	080047c1 	.word	0x080047c1

080049e4 <sys_now>:
  low_level_init(netif);
  
  return ERR_OK;
}

u32_t sys_now (void) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80049e8:	f001 f93e 	bl	8005c68 <HAL_GetTick>
 80049ec:	4603      	mov	r3, r0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <lwip_start_task_entry>:
 *    not used
 *
 * @return
 *    none
 ******************************************************************************/
static void lwip_start_task_entry (void const * argument) {
 80049f4:	b5b0      	push	{r4, r5, r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 80049fc:	2100      	movs	r1, #0
 80049fe:	2000      	movs	r0, #0
 8004a00:	f00a fb6c 	bl	800f0dc <tcpip_init>

  /* Initialize the LwIP stack */
  netif_config();
 8004a04:	f000 f886 	bl	8004b14 <netif_config>
#endif
#ifdef LWIP_IPERF_SERVER
  lwiperf_start_tcp_server_default(lwip_iperf_results,0);
#endif

  if (use_dhcp_client) {
 8004a08:	4b0b      	ldr	r3, [pc, #44]	@ (8004a38 <lwip_start_task_entry+0x44>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00d      	beq.n	8004a2c <lwip_start_task_entry+0x38>
    /* Start DHCP Client */
    osThreadDef(DHCP, dhcpclient_start, osPriorityLow, 0, configMINIMAL_STACK_SIZE * 2);
 8004a10:	4b0a      	ldr	r3, [pc, #40]	@ (8004a3c <lwip_start_task_entry+0x48>)
 8004a12:	f107 040c 	add.w	r4, r7, #12
 8004a16:	461d      	mov	r5, r3
 8004a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(DHCP), &sta_netif);
 8004a20:	f107 030c 	add.w	r3, r7, #12
 8004a24:	4906      	ldr	r1, [pc, #24]	@ (8004a40 <lwip_start_task_entry+0x4c>)
 8004a26:	4618      	mov	r0, r3
 8004a28:	f006 fd61 	bl	800b4ee <osThreadCreate>
  }

  wifi_autoconnexion_init();
 8004a2c:	f7fe fb2a 	bl	8003084 <wifi_autoconnexion_init>

	while(1) {
    /* Delete the Init Thread */
    osThreadTerminate(NULL);
 8004a30:	2000      	movs	r0, #0
 8004a32:	f006 fd83 	bl	800b53c <osThreadTerminate>
 8004a36:	e7fb      	b.n	8004a30 <lwip_start_task_entry+0x3c>
 8004a38:	20000090 	.word	0x20000090
 8004a3c:	0801ec5c 	.word	0x0801ec5c
 8004a40:	20000864 	.word	0x20000864

08004a44 <lwip_set_sta_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_sta_link_up (void) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&sta_netif);
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4909      	ldr	r1, [pc, #36]	@ (8004a70 <lwip_set_sta_link_up+0x2c>)
 8004a4c:	4809      	ldr	r0, [pc, #36]	@ (8004a74 <lwip_set_sta_link_up+0x30>)
 8004a4e:	f00a f981 	bl	800ed54 <netifapi_netif_common>
  netifapi_netif_set_link_up(&sta_netif);
 8004a52:	2200      	movs	r2, #0
 8004a54:	4908      	ldr	r1, [pc, #32]	@ (8004a78 <lwip_set_sta_link_up+0x34>)
 8004a56:	4807      	ldr	r0, [pc, #28]	@ (8004a74 <lwip_set_sta_link_up+0x30>)
 8004a58:	f00a f97c 	bl	800ed54 <netifapi_netif_common>
  if (use_dhcp_client) {
 8004a5c:	4b07      	ldr	r3, [pc, #28]	@ (8004a7c <lwip_set_sta_link_up+0x38>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <lwip_set_sta_link_up+0x26>
    dhcpclient_set_link_state(1);
 8004a64:	2001      	movs	r0, #1
 8004a66:	f7fe fbf9 	bl	800325c <dhcpclient_set_link_state>
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	08010269 	.word	0x08010269
 8004a74:	20000864 	.word	0x20000864
 8004a78:	080103a5 	.word	0x080103a5
 8004a7c:	20000090 	.word	0x20000090

08004a80 <lwip_set_sta_link_down>:
 *    none
 *
 * @return
 *    none
******************************************************************************/
void lwip_set_sta_link_down (void) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  if (use_dhcp_client) {
 8004a84:	4b09      	ldr	r3, [pc, #36]	@ (8004aac <lwip_set_sta_link_down+0x2c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <lwip_set_sta_link_down+0x12>
    dhcpclient_set_link_state(0);
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	f7fe fbe5 	bl	800325c <dhcpclient_set_link_state>
  }
  netifapi_netif_set_link_down(&sta_netif);
 8004a92:	2200      	movs	r2, #0
 8004a94:	4906      	ldr	r1, [pc, #24]	@ (8004ab0 <lwip_set_sta_link_down+0x30>)
 8004a96:	4807      	ldr	r0, [pc, #28]	@ (8004ab4 <lwip_set_sta_link_down+0x34>)
 8004a98:	f00a f95c 	bl	800ed54 <netifapi_netif_common>
  netifapi_netif_set_down(&sta_netif);
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4906      	ldr	r1, [pc, #24]	@ (8004ab8 <lwip_set_sta_link_down+0x38>)
 8004aa0:	4804      	ldr	r0, [pc, #16]	@ (8004ab4 <lwip_set_sta_link_down+0x34>)
 8004aa2:	f00a f957 	bl	800ed54 <netifapi_netif_common>
}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000090 	.word	0x20000090
 8004ab0:	08010415 	.word	0x08010415
 8004ab4:	20000864 	.word	0x20000864
 8004ab8:	08010341 	.word	0x08010341

08004abc <lwip_set_ap_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_up (void) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&ap_netif);
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	4906      	ldr	r1, [pc, #24]	@ (8004adc <lwip_set_ap_link_up+0x20>)
 8004ac4:	4806      	ldr	r0, [pc, #24]	@ (8004ae0 <lwip_set_ap_link_up+0x24>)
 8004ac6:	f00a f945 	bl	800ed54 <netifapi_netif_common>
  netifapi_netif_set_link_up(&ap_netif);
 8004aca:	2200      	movs	r2, #0
 8004acc:	4905      	ldr	r1, [pc, #20]	@ (8004ae4 <lwip_set_ap_link_up+0x28>)
 8004ace:	4804      	ldr	r0, [pc, #16]	@ (8004ae0 <lwip_set_ap_link_up+0x24>)
 8004ad0:	f00a f940 	bl	800ed54 <netifapi_netif_common>
  dhcpserver_start();
 8004ad4:	f7ff fdfe 	bl	80046d4 <dhcpserver_start>
}
 8004ad8:	bf00      	nop
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	08010269 	.word	0x08010269
 8004ae0:	2000089c 	.word	0x2000089c
 8004ae4:	080103a5 	.word	0x080103a5

08004ae8 <lwip_set_ap_link_down>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_down (void) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  dhcpserver_stop();
 8004aec:	f7ff fe18 	bl	8004720 <dhcpserver_stop>
  netifapi_netif_set_link_down(&ap_netif);
 8004af0:	2200      	movs	r2, #0
 8004af2:	4905      	ldr	r1, [pc, #20]	@ (8004b08 <lwip_set_ap_link_down+0x20>)
 8004af4:	4805      	ldr	r0, [pc, #20]	@ (8004b0c <lwip_set_ap_link_down+0x24>)
 8004af6:	f00a f92d 	bl	800ed54 <netifapi_netif_common>
  netifapi_netif_set_down(&ap_netif);
 8004afa:	2200      	movs	r2, #0
 8004afc:	4904      	ldr	r1, [pc, #16]	@ (8004b10 <lwip_set_ap_link_down+0x28>)
 8004afe:	4803      	ldr	r0, [pc, #12]	@ (8004b0c <lwip_set_ap_link_down+0x24>)
 8004b00:	f00a f928 	bl	800ed54 <netifapi_netif_common>
}
 8004b04:	bf00      	nop
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	08010415 	.word	0x08010415
 8004b0c:	2000089c 	.word	0x2000089c
 8004b10:	08010341 	.word	0x08010341

08004b14 <netif_config>:
 *    none
 *
 * @return
*    0: initialization success, -1: an error occurred
 ******************************************************************************/
static int netif_config(void) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08a      	sub	sp, #40	@ 0x28
 8004b18:	af04      	add	r7, sp, #16
  sl_status_t status;
  ip_addr_t sta_ipaddr;
  ip_addr_t sta_netmask;
  ip_addr_t sta_gw;
  int res = -1;
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Initialize the Station information */
  if (use_dhcp_client) {
 8004b20:	4b9e      	ldr	r3, [pc, #632]	@ (8004d9c <netif_config+0x288>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d006      	beq.n	8004b36 <netif_config+0x22>
    ip_addr_set_zero_ip4(&sta_ipaddr);
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]
    ip_addr_set_zero_ip4(&sta_netmask);
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60bb      	str	r3, [r7, #8]
    ip_addr_set_zero_ip4(&sta_gw);
 8004b30:	2300      	movs	r3, #0
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	e0cb      	b.n	8004cce <netif_config+0x1ba>
  } else {
    IP_ADDR4(&sta_ipaddr,sta_ip_addr0,sta_ip_addr1,sta_ip_addr2,sta_ip_addr3);
 8004b36:	4b9a      	ldr	r3, [pc, #616]	@ (8004da0 <netif_config+0x28c>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	061a      	lsls	r2, r3, #24
 8004b3c:	4b99      	ldr	r3, [pc, #612]	@ (8004da4 <netif_config+0x290>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	041b      	lsls	r3, r3, #16
 8004b42:	431a      	orrs	r2, r3
 8004b44:	4b98      	ldr	r3, [pc, #608]	@ (8004da8 <netif_config+0x294>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	4a97      	ldr	r2, [pc, #604]	@ (8004dac <netif_config+0x298>)
 8004b4e:	7812      	ldrb	r2, [r2, #0]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	061a      	lsls	r2, r3, #24
 8004b54:	4b92      	ldr	r3, [pc, #584]	@ (8004da0 <netif_config+0x28c>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	0619      	lsls	r1, r3, #24
 8004b5a:	4b92      	ldr	r3, [pc, #584]	@ (8004da4 <netif_config+0x290>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	4319      	orrs	r1, r3
 8004b62:	4b91      	ldr	r3, [pc, #580]	@ (8004da8 <netif_config+0x294>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	4990      	ldr	r1, [pc, #576]	@ (8004dac <netif_config+0x298>)
 8004b6c:	7809      	ldrb	r1, [r1, #0]
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004b76:	431a      	orrs	r2, r3
 8004b78:	4b89      	ldr	r3, [pc, #548]	@ (8004da0 <netif_config+0x28c>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	0619      	lsls	r1, r3, #24
 8004b7e:	4b89      	ldr	r3, [pc, #548]	@ (8004da4 <netif_config+0x290>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	041b      	lsls	r3, r3, #16
 8004b84:	4319      	orrs	r1, r3
 8004b86:	4b88      	ldr	r3, [pc, #544]	@ (8004da8 <netif_config+0x294>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	4987      	ldr	r1, [pc, #540]	@ (8004dac <netif_config+0x298>)
 8004b90:	7809      	ldrb	r1, [r1, #0]
 8004b92:	430b      	orrs	r3, r1
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	4b80      	ldr	r3, [pc, #512]	@ (8004da0 <netif_config+0x28c>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	0619      	lsls	r1, r3, #24
 8004ba2:	4b80      	ldr	r3, [pc, #512]	@ (8004da4 <netif_config+0x290>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	041b      	lsls	r3, r3, #16
 8004ba8:	4319      	orrs	r1, r3
 8004baa:	4b7f      	ldr	r3, [pc, #508]	@ (8004da8 <netif_config+0x294>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	497e      	ldr	r1, [pc, #504]	@ (8004dac <netif_config+0x298>)
 8004bb4:	7809      	ldrb	r1, [r1, #0]
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	0e1b      	lsrs	r3, r3, #24
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
    IP_ADDR4(&sta_netmask,sta_netmask_addr0,sta_netmask_addr1,sta_netmask_addr2,sta_netmask_addr3);
 8004bbe:	4b7c      	ldr	r3, [pc, #496]	@ (8004db0 <netif_config+0x29c>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	061a      	lsls	r2, r3, #24
 8004bc4:	4b7b      	ldr	r3, [pc, #492]	@ (8004db4 <netif_config+0x2a0>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	4b7a      	ldr	r3, [pc, #488]	@ (8004db8 <netif_config+0x2a4>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	4a79      	ldr	r2, [pc, #484]	@ (8004dbc <netif_config+0x2a8>)
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	061a      	lsls	r2, r3, #24
 8004bdc:	4b74      	ldr	r3, [pc, #464]	@ (8004db0 <netif_config+0x29c>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	0619      	lsls	r1, r3, #24
 8004be2:	4b74      	ldr	r3, [pc, #464]	@ (8004db4 <netif_config+0x2a0>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	4319      	orrs	r1, r3
 8004bea:	4b73      	ldr	r3, [pc, #460]	@ (8004db8 <netif_config+0x2a4>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	4972      	ldr	r1, [pc, #456]	@ (8004dbc <netif_config+0x2a8>)
 8004bf4:	7809      	ldrb	r1, [r1, #0]
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	4b6b      	ldr	r3, [pc, #428]	@ (8004db0 <netif_config+0x29c>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	0619      	lsls	r1, r3, #24
 8004c06:	4b6b      	ldr	r3, [pc, #428]	@ (8004db4 <netif_config+0x2a0>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	4319      	orrs	r1, r3
 8004c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8004db8 <netif_config+0x2a4>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	430b      	orrs	r3, r1
 8004c16:	4969      	ldr	r1, [pc, #420]	@ (8004dbc <netif_config+0x2a8>)
 8004c18:	7809      	ldrb	r1, [r1, #0]
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	0a1b      	lsrs	r3, r3, #8
 8004c1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004c22:	431a      	orrs	r2, r3
 8004c24:	4b62      	ldr	r3, [pc, #392]	@ (8004db0 <netif_config+0x29c>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	0619      	lsls	r1, r3, #24
 8004c2a:	4b62      	ldr	r3, [pc, #392]	@ (8004db4 <netif_config+0x2a0>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	4319      	orrs	r1, r3
 8004c32:	4b61      	ldr	r3, [pc, #388]	@ (8004db8 <netif_config+0x2a4>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	4960      	ldr	r1, [pc, #384]	@ (8004dbc <netif_config+0x2a8>)
 8004c3c:	7809      	ldrb	r1, [r1, #0]
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	0e1b      	lsrs	r3, r3, #24
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60bb      	str	r3, [r7, #8]
    IP_ADDR4(&sta_gw,sta_gw_addr0,sta_gw_addr1,sta_gw_addr2,sta_gw_addr3);
 8004c46:	4b5e      	ldr	r3, [pc, #376]	@ (8004dc0 <netif_config+0x2ac>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	061a      	lsls	r2, r3, #24
 8004c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8004dc4 <netif_config+0x2b0>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	041b      	lsls	r3, r3, #16
 8004c52:	431a      	orrs	r2, r3
 8004c54:	4b5c      	ldr	r3, [pc, #368]	@ (8004dc8 <netif_config+0x2b4>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	4a5b      	ldr	r2, [pc, #364]	@ (8004dcc <netif_config+0x2b8>)
 8004c5e:	7812      	ldrb	r2, [r2, #0]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	061a      	lsls	r2, r3, #24
 8004c64:	4b56      	ldr	r3, [pc, #344]	@ (8004dc0 <netif_config+0x2ac>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	0619      	lsls	r1, r3, #24
 8004c6a:	4b56      	ldr	r3, [pc, #344]	@ (8004dc4 <netif_config+0x2b0>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	041b      	lsls	r3, r3, #16
 8004c70:	4319      	orrs	r1, r3
 8004c72:	4b55      	ldr	r3, [pc, #340]	@ (8004dc8 <netif_config+0x2b4>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	4954      	ldr	r1, [pc, #336]	@ (8004dcc <netif_config+0x2b8>)
 8004c7c:	7809      	ldrb	r1, [r1, #0]
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004c86:	431a      	orrs	r2, r3
 8004c88:	4b4d      	ldr	r3, [pc, #308]	@ (8004dc0 <netif_config+0x2ac>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	0619      	lsls	r1, r3, #24
 8004c8e:	4b4d      	ldr	r3, [pc, #308]	@ (8004dc4 <netif_config+0x2b0>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	4319      	orrs	r1, r3
 8004c96:	4b4c      	ldr	r3, [pc, #304]	@ (8004dc8 <netif_config+0x2b4>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	494b      	ldr	r1, [pc, #300]	@ (8004dcc <netif_config+0x2b8>)
 8004ca0:	7809      	ldrb	r1, [r1, #0]
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	0a1b      	lsrs	r3, r3, #8
 8004ca6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004caa:	431a      	orrs	r2, r3
 8004cac:	4b44      	ldr	r3, [pc, #272]	@ (8004dc0 <netif_config+0x2ac>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	0619      	lsls	r1, r3, #24
 8004cb2:	4b44      	ldr	r3, [pc, #272]	@ (8004dc4 <netif_config+0x2b0>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	041b      	lsls	r3, r3, #16
 8004cb8:	4319      	orrs	r1, r3
 8004cba:	4b43      	ldr	r3, [pc, #268]	@ (8004dc8 <netif_config+0x2b4>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	4942      	ldr	r1, [pc, #264]	@ (8004dcc <netif_config+0x2b8>)
 8004cc4:	7809      	ldrb	r1, [r1, #0]
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	0e1b      	lsrs	r3, r3, #24
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	607b      	str	r3, [r7, #4]
  }


  /* Initialize the WF200 used by the two interfaces */
  status = sl_wfx_init(&wifi_context);
 8004cce:	4840      	ldr	r0, [pc, #256]	@ (8004dd0 <netif_config+0x2bc>)
 8004cd0:	f004 fae4 	bl	800929c <sl_wfx_init>
 8004cd4:	6138      	str	r0, [r7, #16]
  switch (status) {
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f640 3202 	movw	r2, #2818	@ 0xb02
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d034      	beq.n	8004d4a <netif_config+0x236>
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f640 3202 	movw	r2, #2818	@ 0xb02
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d83b      	bhi.n	8004d62 <netif_config+0x24e>
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f640 3201 	movw	r2, #2817	@ 0xb01
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d026      	beq.n	8004d42 <netif_config+0x22e>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f640 3201 	movw	r2, #2817	@ 0xb01
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d831      	bhi.n	8004d62 <netif_config+0x24e>
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b07      	cmp	r3, #7
 8004d02:	d026      	beq.n	8004d52 <netif_config+0x23e>
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b07      	cmp	r3, #7
 8004d08:	d82b      	bhi.n	8004d62 <netif_config+0x24e>
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <netif_config+0x204>
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d021      	beq.n	8004d5a <netif_config+0x246>
 8004d16:	e024      	b.n	8004d62 <netif_config+0x24e>
  case SL_STATUS_OK:
    wifi_context.state = SL_WFX_STARTED;
 8004d18:	4b2d      	ldr	r3, [pc, #180]	@ (8004dd0 <netif_config+0x2bc>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8004d20:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd0 <netif_config+0x2bc>)
 8004d22:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8004d26:	4619      	mov	r1, r3
    		wifi_context.firmware_minor,
 8004d28:	4b29      	ldr	r3, [pc, #164]	@ (8004dd0 <netif_config+0x2bc>)
 8004d2a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8004d2e:	461a      	mov	r2, r3
			wifi_context.firmware_build);
 8004d30:	4b27      	ldr	r3, [pc, #156]	@ (8004dd0 <netif_config+0x2bc>)
 8004d32:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8004d36:	4827      	ldr	r0, [pc, #156]	@ (8004dd4 <netif_config+0x2c0>)
 8004d38:	f017 fd7a 	bl	801c830 <iprintf>
    res = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]
    break;
 8004d40:	e012      	b.n	8004d68 <netif_config+0x254>
  case SL_STATUS_WIFI_INVALID_KEY:
    printf("Failed to init WF200: Firmware keyset invalid\r\n");
 8004d42:	4825      	ldr	r0, [pc, #148]	@ (8004dd8 <netif_config+0x2c4>)
 8004d44:	f017 fddc 	bl	801c900 <puts>
    break;
 8004d48:	e00e      	b.n	8004d68 <netif_config+0x254>
  case SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT:
    printf("Failed to init WF200: Firmware download timeout\r\n");
 8004d4a:	4824      	ldr	r0, [pc, #144]	@ (8004ddc <netif_config+0x2c8>)
 8004d4c:	f017 fdd8 	bl	801c900 <puts>
    break;
 8004d50:	e00a      	b.n	8004d68 <netif_config+0x254>
  case SL_STATUS_TIMEOUT:
    printf("Failed to init WF200: Poll for value timeout\r\n");
 8004d52:	4823      	ldr	r0, [pc, #140]	@ (8004de0 <netif_config+0x2cc>)
 8004d54:	f017 fdd4 	bl	801c900 <puts>
    break;
 8004d58:	e006      	b.n	8004d68 <netif_config+0x254>
  case SL_STATUS_FAIL:
    printf("Failed to init WF200: Error\r\n");
 8004d5a:	4822      	ldr	r0, [pc, #136]	@ (8004de4 <netif_config+0x2d0>)
 8004d5c:	f017 fdd0 	bl	801c900 <puts>
    break;
 8004d60:	e002      	b.n	8004d68 <netif_config+0x254>
  default :
    printf("Failed to init WF200: Unknown error\r\n");
 8004d62:	4821      	ldr	r0, [pc, #132]	@ (8004de8 <netif_config+0x2d4>)
 8004d64:	f017 fdcc 	bl	801c900 <puts>
  }

  if (res == 0) {
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d110      	bne.n	8004d90 <netif_config+0x27c>
    /* Add station and softAP interfaces */
    netif_add(&sta_netif, &sta_ipaddr, &sta_netmask, &sta_gw, NULL, &sta_ethernetif_init, &tcpip_input);
 8004d6e:	1d3b      	adds	r3, r7, #4
 8004d70:	f107 0208 	add.w	r2, r7, #8
 8004d74:	f107 010c 	add.w	r1, r7, #12
 8004d78:	481c      	ldr	r0, [pc, #112]	@ (8004dec <netif_config+0x2d8>)
 8004d7a:	9002      	str	r0, [sp, #8]
 8004d7c:	481c      	ldr	r0, [pc, #112]	@ (8004df0 <netif_config+0x2dc>)
 8004d7e:	9001      	str	r0, [sp, #4]
 8004d80:	2000      	movs	r0, #0
 8004d82:	9000      	str	r0, [sp, #0]
 8004d84:	481b      	ldr	r0, [pc, #108]	@ (8004df4 <netif_config+0x2e0>)
 8004d86:	f00b f8a5 	bl	800fed4 <netif_add>
    //netif_add(&ap_netif, &ap_ipaddr, &ap_netmask, &ap_gw, NULL, &ap_ethernetif_init, &tcpip_input);

    /* Registers the default network interface */
    netif_set_default(&sta_netif);
 8004d8a:	481a      	ldr	r0, [pc, #104]	@ (8004df4 <netif_config+0x2e0>)
 8004d8c:	f00b fa5c 	bl	8010248 <netif_set_default>
  wifi_cli_cfg_dialog();
#else
  //sl_wfx_start_ap_command(softap_channel, (uint8_t*) softap_ssid, strlen(softap_ssid), 0, 0, softap_security, 0, (uint8_t*) softap_passkey, strlen(softap_passkey), NULL, 0, NULL, 0);
#endif
  
  return res;
 8004d90:	697b      	ldr	r3, [r7, #20]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000090 	.word	0x20000090
 8004da0:	20000094 	.word	0x20000094
 8004da4:	20000095 	.word	0x20000095
 8004da8:	20000906 	.word	0x20000906
 8004dac:	20000096 	.word	0x20000096
 8004db0:	20000097 	.word	0x20000097
 8004db4:	20000098 	.word	0x20000098
 8004db8:	20000099 	.word	0x20000099
 8004dbc:	20000907 	.word	0x20000907
 8004dc0:	20000908 	.word	0x20000908
 8004dc4:	20000909 	.word	0x20000909
 8004dc8:	2000090a 	.word	0x2000090a
 8004dcc:	2000090b 	.word	0x2000090b
 8004dd0:	20000640 	.word	0x20000640
 8004dd4:	0801ec70 	.word	0x0801ec70
 8004dd8:	0801ec9c 	.word	0x0801ec9c
 8004ddc:	0801eccc 	.word	0x0801eccc
 8004de0:	0801ed00 	.word	0x0801ed00
 8004de4:	0801ed30 	.word	0x0801ed30
 8004de8:	0801ed50 	.word	0x0801ed50
 8004dec:	0800ef7d 	.word	0x0800ef7d
 8004df0:	08004989 	.word	0x08004989
 8004df4:	20000864 	.word	0x20000864

08004df8 <lwip_start>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_start (void) {
 8004df8:	b5b0      	push	{r4, r5, r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
  osThreadDef(lwip_start, lwip_start_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*5);
 8004dfe:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <lwip_start+0x28>)
 8004e00:	1d3c      	adds	r4, r7, #4
 8004e02:	461d      	mov	r5, r3
 8004e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(lwip_start), NULL);
 8004e0c:	1d3b      	adds	r3, r7, #4
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f006 fb6c 	bl	800b4ee <osThreadCreate>
}
 8004e16:	bf00      	nop
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	0801ed84 	.word	0x0801ed84

08004e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e28:	f000 feb8 	bl	8005b9c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8004e2c:	f000 f822 	bl	8004e74 <SystemClock_Config>

    /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e30:	f000 f958 	bl	80050e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004e34:	f000 f936 	bl	80050a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004e38:	f000 f90a 	bl	8005050 <MX_USART2_UART_Init>
  //MX_SPI1_Init(); THIS WILL BE HANDLE BY THE SL_WFX_DRIVER --> SL_WFX_INIT()

  //THIS INIT TAKES CARE OF MOSI,MISO AND CLK GPIO
  MX_SPI3_Init();
 8004e3c:	f000 f8d0 	bl	8004fe0 <MX_SPI3_Init>
  MX_SPI4_Init();
 8004e40:	f000 f896 	bl	8004f70 <MX_SPI4_Init>
  /* Clear the console and buffer */
  printf("\033\143");
 8004e44:	4809      	ldr	r0, [pc, #36]	@ (8004e6c <main+0x48>)
 8004e46:	f017 fcf3 	bl	801c830 <iprintf>
//  printf("\033[3J");
  printf("Hello, welcome to the WFM200 driver \r\n");
 8004e4a:	4809      	ldr	r0, [pc, #36]	@ (8004e70 <main+0x4c>)
 8004e4c:	f017 fd58 	bl	801c900 <puts>
  HAL_Delay(100);
 8004e50:	2064      	movs	r0, #100	@ 0x64
 8004e52:	f000 ff15 	bl	8005c80 <HAL_Delay>


#ifndef spi_mode_only
  /* Task init */
//  vTraceEnable(TRC_START);
  sl_wfx_task_start();
 8004e56:	f006 fa31 	bl	800b2bc <sl_wfx_task_start>
  wifi_events_start();
 8004e5a:	f006 f8c1 	bl	800afe0 <wifi_events_start>
  //wifi_cli_start();					/*NOT GOING TO USE THE CLI SINCE THERE WILL NOT BE ANY USART CONNECTION*/
  lwip_start();
 8004e5e:	f7ff ffcb 	bl	8004df8 <lwip_start>

#endif


  /* Start scheduler */
  osKernelStart();
 8004e62:	f006 fb2d 	bl	800b4c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004e66:	bf00      	nop
 8004e68:	e7fd      	b.n	8004e66 <main+0x42>
 8004e6a:	bf00      	nop
 8004e6c:	0801ed98 	.word	0x0801ed98
 8004e70:	0801ed9c 	.word	0x0801ed9c

08004e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b094      	sub	sp, #80	@ 0x50
 8004e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e7a:	f107 0320 	add.w	r3, r7, #32
 8004e7e:	2230      	movs	r2, #48	@ 0x30
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f017 fe36 	bl	801caf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e88:	f107 030c 	add.w	r3, r7, #12
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	4b31      	ldr	r3, [pc, #196]	@ (8004f64 <SystemClock_Config+0xf0>)
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea0:	4a30      	ldr	r2, [pc, #192]	@ (8004f64 <SystemClock_Config+0xf0>)
 8004ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ea6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8004f64 <SystemClock_Config+0xf0>)
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	60bb      	str	r3, [r7, #8]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f68 <SystemClock_Config+0xf4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8004f68 <SystemClock_Config+0xf4>)
 8004ebe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	4b28      	ldr	r3, [pc, #160]	@ (8004f68 <SystemClock_Config+0xf4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
//  RCC_OscInitStruct.PLL.PLLN = 400;
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
//  RCC_OscInitStruct.PLL.PLLQ = 4;

  //SETUP FOR 96MHz
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004ed4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004eda:	2302      	movs	r3, #2
 8004edc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ede:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004ee4:	2308      	movs	r3, #8
 8004ee6:	643b      	str	r3, [r7, #64]	@ 0x40
//  RCC_OscInitStruct.PLL.PLLN = 280; //70MHz
//  RCC_OscInitStruct.PLL.PLLN = 260; //65MHz
//  RCC_OscInitStruct.PLL.PLLN = 240; //60MHz
//  RCC_OscInitStruct.PLL.PLLN = 200; //55MHz

  RCC_OscInitStruct.PLL.PLLN = 400;
 8004ee8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004eec:	647b      	str	r3, [r7, #68]	@ 0x44

  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004eee:	2304      	movs	r3, #4
 8004ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ef6:	f107 0320 	add.w	r3, r7, #32
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 feda 	bl	8006cb4 <HAL_RCC_OscConfig>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004f06:	f000 f991 	bl	800522c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f0a:	230f      	movs	r3, #15
 8004f0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004f20:	f107 030c 	add.w	r3, r7, #12
 8004f24:	2103      	movs	r1, #3
 8004f26:	4618      	mov	r0, r3
 8004f28:	f002 f93c 	bl	80071a4 <HAL_RCC_ClockConfig>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004f32:	f000 f97b 	bl	800522c <Error_Handler>
  }

  /**Configure the Systick interrupt time*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004f36:	f002 fb21 	bl	800757c <HAL_RCC_GetHCLKFreq>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8004f6c <SystemClock_Config+0xf8>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	099b      	lsrs	r3, r3, #6
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fff6 	bl	8005f36 <HAL_SYSTICK_Config>
	  /**Configure the Systick */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004f4a:	2004      	movs	r0, #4
 8004f4c:	f001 f800 	bl	8005f50 <HAL_SYSTICK_CLKSourceConfig>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004f50:	2200      	movs	r2, #0
 8004f52:	210f      	movs	r1, #15
 8004f54:	f04f 30ff 	mov.w	r0, #4294967295
 8004f58:	f000 ffb5 	bl	8005ec6 <HAL_NVIC_SetPriority>

}
 8004f5c:	bf00      	nop
 8004f5e:	3750      	adds	r7, #80	@ 0x50
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40023800 	.word	0x40023800
 8004f68:	40007000 	.word	0x40007000
 8004f6c:	10624dd3 	.word	0x10624dd3

08004f70 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* SPI4 parameter configuration */
  hspi4.Instance = SPI4;
 8004f74:	4b18      	ldr	r3, [pc, #96]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004f76:	4a19      	ldr	r2, [pc, #100]	@ (8004fdc <MX_SPI4_Init+0x6c>)
 8004f78:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004f7a:	4b17      	ldr	r3, [pc, #92]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004f7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004f80:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004f82:	4b15      	ldr	r3, [pc, #84]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8004f88:	4b13      	ldr	r3, [pc, #76]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004f8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f8e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;  // Set CPOL = 0
 8004f90:	4b11      	ldr	r3, [pc, #68]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;       // Set CPHA = 0
 8004f96:	4b10      	ldr	r3, [pc, #64]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fa2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004fa6:	2210      	movs	r2, #16
 8004fa8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004faa:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004fb0:	4b09      	ldr	r3, [pc, #36]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fb6:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8004fbc:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004fbe:	220a      	movs	r2, #10
 8004fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004fc2:	4805      	ldr	r0, [pc, #20]	@ (8004fd8 <MX_SPI4_Init+0x68>)
 8004fc4:	f002 fb0e 	bl	80075e4 <HAL_SPI_Init>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <MX_SPI4_Init+0x62>
  {
    Error_Handler();
 8004fce:	f000 f92d 	bl	800522c <Error_Handler>
  }
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200009ac 	.word	0x200009ac
 8004fdc:	40013400 	.word	0x40013400

08004fe0 <MX_SPI3_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0

  /* SPI4 parameter configuration*/
  hspi3.Instance = SPI3;
 8004fe4:	4b18      	ldr	r3, [pc, #96]	@ (8005048 <MX_SPI3_Init+0x68>)
 8004fe6:	4a19      	ldr	r2, [pc, #100]	@ (800504c <MX_SPI3_Init+0x6c>)
 8004fe8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004fea:	4b17      	ldr	r3, [pc, #92]	@ (8005048 <MX_SPI3_Init+0x68>)
 8004fec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004ff0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004ff2:	4b15      	ldr	r3, [pc, #84]	@ (8005048 <MX_SPI3_Init+0x68>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8004ff8:	4b13      	ldr	r3, [pc, #76]	@ (8005048 <MX_SPI3_Init+0x68>)
 8004ffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ffe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005000:	4b11      	ldr	r3, [pc, #68]	@ (8005048 <MX_SPI3_Init+0x68>)
 8005002:	2200      	movs	r2, #0
 8005004:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005006:	4b10      	ldr	r3, [pc, #64]	@ (8005048 <MX_SPI3_Init+0x68>)
 8005008:	2200      	movs	r2, #0
 800500a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800500c:	4b0e      	ldr	r3, [pc, #56]	@ (8005048 <MX_SPI3_Init+0x68>)
 800500e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005012:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005014:	4b0c      	ldr	r3, [pc, #48]	@ (8005048 <MX_SPI3_Init+0x68>)
 8005016:	2220      	movs	r2, #32
 8005018:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800501a:	4b0b      	ldr	r3, [pc, #44]	@ (8005048 <MX_SPI3_Init+0x68>)
 800501c:	2200      	movs	r2, #0
 800501e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005020:	4b09      	ldr	r3, [pc, #36]	@ (8005048 <MX_SPI3_Init+0x68>)
 8005022:	2200      	movs	r2, #0
 8005024:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005026:	4b08      	ldr	r3, [pc, #32]	@ (8005048 <MX_SPI3_Init+0x68>)
 8005028:	2200      	movs	r2, #0
 800502a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800502c:	4b06      	ldr	r3, [pc, #24]	@ (8005048 <MX_SPI3_Init+0x68>)
 800502e:	220a      	movs	r2, #10
 8005030:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005032:	4805      	ldr	r0, [pc, #20]	@ (8005048 <MX_SPI3_Init+0x68>)
 8005034:	f002 fad6 	bl	80075e4 <HAL_SPI_Init>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <MX_SPI3_Init+0x62>
  {
	Error_Handler();
 800503e:	f000 f8f5 	bl	800522c <Error_Handler>
  }
}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000954 	.word	0x20000954
 800504c:	40003c00 	.word	0x40003c00

08005050 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005054:	4b11      	ldr	r3, [pc, #68]	@ (800509c <MX_USART2_UART_Init+0x4c>)
 8005056:	4a12      	ldr	r2, [pc, #72]	@ (80050a0 <MX_USART2_UART_Init+0x50>)
 8005058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800505a:	4b10      	ldr	r3, [pc, #64]	@ (800509c <MX_USART2_UART_Init+0x4c>)
 800505c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8005060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005062:	4b0e      	ldr	r3, [pc, #56]	@ (800509c <MX_USART2_UART_Init+0x4c>)
 8005064:	2200      	movs	r2, #0
 8005066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005068:	4b0c      	ldr	r3, [pc, #48]	@ (800509c <MX_USART2_UART_Init+0x4c>)
 800506a:	2200      	movs	r2, #0
 800506c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800506e:	4b0b      	ldr	r3, [pc, #44]	@ (800509c <MX_USART2_UART_Init+0x4c>)
 8005070:	2200      	movs	r2, #0
 8005072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005074:	4b09      	ldr	r3, [pc, #36]	@ (800509c <MX_USART2_UART_Init+0x4c>)
 8005076:	220c      	movs	r2, #12
 8005078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800507a:	4b08      	ldr	r3, [pc, #32]	@ (800509c <MX_USART2_UART_Init+0x4c>)
 800507c:	2200      	movs	r2, #0
 800507e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005080:	4b06      	ldr	r3, [pc, #24]	@ (800509c <MX_USART2_UART_Init+0x4c>)
 8005082:	2200      	movs	r2, #0
 8005084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005086:	4805      	ldr	r0, [pc, #20]	@ (800509c <MX_USART2_UART_Init+0x4c>)
 8005088:	f003 fab8 	bl	80085fc <HAL_UART_Init>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005092:	f000 f8cb 	bl	800522c <Error_Handler>
  }
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000910 	.word	0x20000910
 80050a0:	40004400 	.word	0x40004400

080050a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	4b0c      	ldr	r3, [pc, #48]	@ (80050e0 <MX_DMA_Init+0x3c>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	4a0b      	ldr	r2, [pc, #44]	@ (80050e0 <MX_DMA_Init+0x3c>)
 80050b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ba:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <MX_DMA_Init+0x3c>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c2:	607b      	str	r3, [r7, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */


  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80050c6:	2200      	movs	r2, #0
 80050c8:	2100      	movs	r1, #0
 80050ca:	203b      	movs	r0, #59	@ 0x3b
 80050cc:	f000 fefb 	bl	8005ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80050d0:	203b      	movs	r0, #59	@ 0x3b
 80050d2:	f000 ff14 	bl	8005efe <HAL_NVIC_EnableIRQ>

}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40023800 	.word	0x40023800

080050e4 <MX_GPIO_Init>:


//INIT THE WFM PINs THAT ARE NOT SPI RELATED
static void MX_GPIO_Init(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	@ 0x28
 80050e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ea:	f107 0314 	add.w	r3, r7, #20
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	605a      	str	r2, [r3, #4]
 80050f4:	609a      	str	r2, [r3, #8]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	4b3e      	ldr	r3, [pc, #248]	@ (80051f8 <MX_GPIO_Init+0x114>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005102:	4a3d      	ldr	r2, [pc, #244]	@ (80051f8 <MX_GPIO_Init+0x114>)
 8005104:	f043 0304 	orr.w	r3, r3, #4
 8005108:	6313      	str	r3, [r2, #48]	@ 0x30
 800510a:	4b3b      	ldr	r3, [pc, #236]	@ (80051f8 <MX_GPIO_Init+0x114>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	4b37      	ldr	r3, [pc, #220]	@ (80051f8 <MX_GPIO_Init+0x114>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511e:	4a36      	ldr	r2, [pc, #216]	@ (80051f8 <MX_GPIO_Init+0x114>)
 8005120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005124:	6313      	str	r3, [r2, #48]	@ 0x30
 8005126:	4b34      	ldr	r3, [pc, #208]	@ (80051f8 <MX_GPIO_Init+0x114>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	4b30      	ldr	r3, [pc, #192]	@ (80051f8 <MX_GPIO_Init+0x114>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513a:	4a2f      	ldr	r2, [pc, #188]	@ (80051f8 <MX_GPIO_Init+0x114>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	6313      	str	r3, [r2, #48]	@ 0x30
 8005142:	4b2d      	ldr	r3, [pc, #180]	@ (80051f8 <MX_GPIO_Init+0x114>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	607b      	str	r3, [r7, #4]
 8005152:	4b29      	ldr	r3, [pc, #164]	@ (80051f8 <MX_GPIO_Init+0x114>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	4a28      	ldr	r2, [pc, #160]	@ (80051f8 <MX_GPIO_Init+0x114>)
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	6313      	str	r3, [r2, #48]	@ 0x30
 800515e:	4b26      	ldr	r3, [pc, #152]	@ (80051f8 <MX_GPIO_Init+0x114>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	607b      	str	r3, [r7, #4]
 8005168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 800516a:	2201      	movs	r2, #1
 800516c:	2110      	movs	r1, #16
 800516e:	4823      	ldr	r0, [pc, #140]	@ (80051fc <MX_GPIO_Init+0x118>)
 8005170:	f001 fd62 	bl	8006c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8005174:	2200      	movs	r2, #0
 8005176:	2101      	movs	r1, #1
 8005178:	4821      	ldr	r0, [pc, #132]	@ (8005200 <MX_GPIO_Init+0x11c>)
 800517a:	f001 fd5d 	bl	8006c38 <HAL_GPIO_WritePin>

  //  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(WFM_GPIO_WIRQ_Port, WFM_GPIO_WIRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : WFM_NSS_Pin */
  GPIO_InitStruct.Pin = WFM_NSS_Pin;
 800517e:	2310      	movs	r3, #16
 8005180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005182:	2301      	movs	r3, #1
 8005184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800518a:	2303      	movs	r3, #3
 800518c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_NSS_GPIO_Port, &GPIO_InitStruct);
 800518e:	f107 0314 	add.w	r3, r7, #20
 8005192:	4619      	mov	r1, r3
 8005194:	4819      	ldr	r0, [pc, #100]	@ (80051fc <MX_GPIO_Init+0x118>)
 8005196:	f001 fae7 	bl	8006768 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
  GPIO_InitStruct.Pin = WFM_RESET_Pin;
 800519a:	2301      	movs	r3, #1
 800519c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800519e:	2301      	movs	r3, #1
 80051a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a6:	2303      	movs	r3, #3
 80051a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_RESET_GPIO_Port, &GPIO_InitStruct);
 80051aa:	f107 0314 	add.w	r3, r7, #20
 80051ae:	4619      	mov	r1, r3
 80051b0:	4813      	ldr	r0, [pc, #76]	@ (8005200 <MX_GPIO_Init+0x11c>)
 80051b2:	f001 fad9 	bl	8006768 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_WUP_Pin */
   GPIO_InitStruct.Pin = WFM_WUP_Pin;
 80051b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051ba:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051bc:	2301      	movs	r3, #1
 80051be:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c4:	2303      	movs	r3, #3
 80051c6:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(WFM_WUP_GPIO_Port, &GPIO_InitStruct);
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	4619      	mov	r1, r3
 80051ce:	480d      	ldr	r0, [pc, #52]	@ (8005204 <MX_GPIO_Init+0x120>)
 80051d0:	f001 faca 	bl	8006768 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_SPI_WIRQ_Pin */
  GPIO_InitStruct.Pin = WFM_SPI_WIRQ_Pin;
 80051d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80051da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80051de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WFM_SPI_WIRQ_Port, &GPIO_InitStruct);
 80051e4:	f107 0314 	add.w	r3, r7, #20
 80051e8:	4619      	mov	r1, r3
 80051ea:	4806      	ldr	r0, [pc, #24]	@ (8005204 <MX_GPIO_Init+0x120>)
 80051ec:	f001 fabc 	bl	8006768 <HAL_GPIO_Init>
//
//  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 80051f0:	bf00      	nop
 80051f2:	3728      	adds	r7, #40	@ 0x28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40020000 	.word	0x40020000
 8005200:	40020800 	.word	0x40020800
 8005204:	40020400 	.word	0x40020400

08005208 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8005210:	1d39      	adds	r1, r7, #4
 8005212:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005216:	2201      	movs	r2, #1
 8005218:	4803      	ldr	r0, [pc, #12]	@ (8005228 <__io_putchar+0x20>)
 800521a:	f003 fa3c 	bl	8008696 <HAL_UART_Transmit>

  return ch;
 800521e:	687b      	ldr	r3, [r7, #4]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000910 	.word	0x20000910

0800522c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005230:	b672      	cpsid	i
}
 8005232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <Error_Handler+0x8>

08005238 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_spi4_rx;
extern DMA_HandleTypeDef hdma_spi3_rx;


void HAL_MspInit(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	4b25      	ldr	r3, [pc, #148]	@ (80052d8 <HAL_MspInit+0xa0>)
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	4a24      	ldr	r2, [pc, #144]	@ (80052d8 <HAL_MspInit+0xa0>)
 8005248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800524c:	6453      	str	r3, [r2, #68]	@ 0x44
 800524e:	4b22      	ldr	r3, [pc, #136]	@ (80052d8 <HAL_MspInit+0xa0>)
 8005250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005256:	607b      	str	r3, [r7, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	4b1e      	ldr	r3, [pc, #120]	@ (80052d8 <HAL_MspInit+0xa0>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	4a1d      	ldr	r2, [pc, #116]	@ (80052d8 <HAL_MspInit+0xa0>)
 8005264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005268:	6413      	str	r3, [r2, #64]	@ 0x40
 800526a:	4b1b      	ldr	r3, [pc, #108]	@ (80052d8 <HAL_MspInit+0xa0>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	683b      	ldr	r3, [r7, #0]

	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005276:	2003      	movs	r0, #3
 8005278:	f000 fe1a 	bl	8005eb0 <HAL_NVIC_SetPriorityGrouping>

	  /* System interrupt init*/
	  /* MemoryManagement_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800527c:	2200      	movs	r2, #0
 800527e:	2100      	movs	r1, #0
 8005280:	f06f 000b 	mvn.w	r0, #11
 8005284:	f000 fe1f 	bl	8005ec6 <HAL_NVIC_SetPriority>
	  /* BusFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005288:	2200      	movs	r2, #0
 800528a:	2100      	movs	r1, #0
 800528c:	f06f 000a 	mvn.w	r0, #10
 8005290:	f000 fe19 	bl	8005ec6 <HAL_NVIC_SetPriority>
	  /* UsageFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005294:	2200      	movs	r2, #0
 8005296:	2100      	movs	r1, #0
 8005298:	f06f 0009 	mvn.w	r0, #9
 800529c:	f000 fe13 	bl	8005ec6 <HAL_NVIC_SetPriority>
	  /* SVCall_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80052a0:	2200      	movs	r2, #0
 80052a2:	2100      	movs	r1, #0
 80052a4:	f06f 0004 	mvn.w	r0, #4
 80052a8:	f000 fe0d 	bl	8005ec6 <HAL_NVIC_SetPriority>
	  /* DebugMonitor_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80052ac:	2200      	movs	r2, #0
 80052ae:	2100      	movs	r1, #0
 80052b0:	f06f 0003 	mvn.w	r0, #3
 80052b4:	f000 fe07 	bl	8005ec6 <HAL_NVIC_SetPriority>
	  /* PendSV_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80052b8:	2200      	movs	r2, #0
 80052ba:	210f      	movs	r1, #15
 80052bc:	f06f 0001 	mvn.w	r0, #1
 80052c0:	f000 fe01 	bl	8005ec6 <HAL_NVIC_SetPriority>
	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80052c4:	2200      	movs	r2, #0
 80052c6:	210f      	movs	r1, #15
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
 80052cc:	f000 fdfb 	bl	8005ec6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40023800 	.word	0x40023800

080052dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b090      	sub	sp, #64	@ 0x40
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	60da      	str	r2, [r3, #12]
 80052f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4aa7      	ldr	r2, [pc, #668]	@ (8005598 <HAL_SPI_MspInit+0x2bc>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	f040 80a1 	bne.w	8005442 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005300:	2300      	movs	r3, #0
 8005302:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005304:	4ba5      	ldr	r3, [pc, #660]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 8005306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005308:	4aa4      	ldr	r2, [pc, #656]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 800530a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800530e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005310:	4ba2      	ldr	r3, [pc, #648]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 8005312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800531a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800531c:	2300      	movs	r3, #0
 800531e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005320:	4b9e      	ldr	r3, [pc, #632]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 8005322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005324:	4a9d      	ldr	r2, [pc, #628]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	6313      	str	r3, [r2, #48]	@ 0x30
 800532c:	4b9b      	ldr	r3, [pc, #620]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 800532e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin;
 8005338:	23e0      	movs	r3, #224	@ 0xe0
 800533a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533c:	2302      	movs	r3, #2
 800533e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005340:	2300      	movs	r3, #0
 8005342:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005344:	2303      	movs	r3, #3
 8005346:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005348:	2305      	movs	r3, #5
 800534a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800534c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005350:	4619      	mov	r1, r3
 8005352:	4893      	ldr	r0, [pc, #588]	@ (80055a0 <HAL_SPI_MspInit+0x2c4>)
 8005354:	f001 fa08 	bl	8006768 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8005358:	4b92      	ldr	r3, [pc, #584]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 800535a:	4a93      	ldr	r2, [pc, #588]	@ (80055a8 <HAL_SPI_MspInit+0x2cc>)
 800535c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800535e:	4b91      	ldr	r3, [pc, #580]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 8005360:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8005364:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005366:	4b8f      	ldr	r3, [pc, #572]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 8005368:	2200      	movs	r2, #0
 800536a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800536c:	4b8d      	ldr	r3, [pc, #564]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 800536e:	2200      	movs	r2, #0
 8005370:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005372:	4b8c      	ldr	r3, [pc, #560]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 8005374:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005378:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800537a:	4b8a      	ldr	r3, [pc, #552]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 800537c:	2200      	movs	r2, #0
 800537e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005380:	4b88      	ldr	r3, [pc, #544]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 8005382:	2200      	movs	r2, #0
 8005384:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8005386:	4b87      	ldr	r3, [pc, #540]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 8005388:	2200      	movs	r2, #0
 800538a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800538c:	4b85      	ldr	r3, [pc, #532]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 800538e:	2200      	movs	r2, #0
 8005390:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005392:	4b84      	ldr	r3, [pc, #528]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 8005394:	2200      	movs	r2, #0
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8005398:	4882      	ldr	r0, [pc, #520]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 800539a:	f000 fdf5 	bl	8005f88 <HAL_DMA_Init>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80053a4:	f7ff ff42 	bl	800522c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a7e      	ldr	r2, [pc, #504]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 80053ac:	64da      	str	r2, [r3, #76]	@ 0x4c
 80053ae:	4a7d      	ldr	r2, [pc, #500]	@ (80055a4 <HAL_SPI_MspInit+0x2c8>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80053b4:	4b7d      	ldr	r3, [pc, #500]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 80053b6:	4a7e      	ldr	r2, [pc, #504]	@ (80055b0 <HAL_SPI_MspInit+0x2d4>)
 80053b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80053ba:	4b7c      	ldr	r3, [pc, #496]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 80053bc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80053c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053c2:	4b7a      	ldr	r3, [pc, #488]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 80053c4:	2240      	movs	r2, #64	@ 0x40
 80053c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053c8:	4b78      	ldr	r3, [pc, #480]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053ce:	4b77      	ldr	r3, [pc, #476]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 80053d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053d6:	4b75      	ldr	r3, [pc, #468]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 80053d8:	2200      	movs	r2, #0
 80053da:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053dc:	4b73      	ldr	r3, [pc, #460]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 80053de:	2200      	movs	r2, #0
 80053e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80053e2:	4b72      	ldr	r3, [pc, #456]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80053e8:	4b70      	ldr	r3, [pc, #448]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053ee:	4b6f      	ldr	r3, [pc, #444]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80053f4:	486d      	ldr	r0, [pc, #436]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 80053f6:	f000 fdc7 	bl	8005f88 <HAL_DMA_Init>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8005400:	f7ff ff14 	bl	800522c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a69      	ldr	r2, [pc, #420]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 8005408:	649a      	str	r2, [r3, #72]	@ 0x48
 800540a:	4a68      	ldr	r2, [pc, #416]	@ (80055ac <HAL_SPI_MspInit+0x2d0>)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn RX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 1);
 8005410:	2201      	movs	r2, #1
 8005412:	210a      	movs	r1, #10
 8005414:	2038      	movs	r0, #56	@ 0x38
 8005416:	f000 fd56 	bl	8005ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800541a:	2038      	movs	r0, #56	@ 0x38
 800541c:	f000 fd6f 	bl	8005efe <HAL_NVIC_EnableIRQ>

    /* DMA2_Stream2_IRQn TX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 10, 0);
 8005420:	2200      	movs	r2, #0
 8005422:	210a      	movs	r1, #10
 8005424:	203a      	movs	r0, #58	@ 0x3a
 8005426:	f000 fd4e 	bl	8005ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800542a:	203a      	movs	r0, #58	@ 0x3a
 800542c:	f000 fd67 	bl	8005efe <HAL_NVIC_EnableIRQ>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 10, 2);
 8005430:	2202      	movs	r2, #2
 8005432:	210a      	movs	r1, #10
 8005434:	2023      	movs	r0, #35	@ 0x23
 8005436:	f000 fd46 	bl	8005ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800543a:	2023      	movs	r0, #35	@ 0x23
 800543c:	f000 fd5f 	bl	8005efe <HAL_NVIC_EnableIRQ>
          /* USER CODE BEGIN SPI3_MspInit 1 */

          /* USER CODE END SPI3_MspInit 1 */
      }

}
 8005440:	e10e      	b.n	8005660 <HAL_SPI_MspInit+0x384>
  else if(hspi->Instance==SPI4)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a5b      	ldr	r2, [pc, #364]	@ (80055b4 <HAL_SPI_MspInit+0x2d8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	f040 80bb 	bne.w	80055c4 <HAL_SPI_MspInit+0x2e8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800544e:	2300      	movs	r3, #0
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	4b52      	ldr	r3, [pc, #328]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005456:	4a51      	ldr	r2, [pc, #324]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 8005458:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800545c:	6453      	str	r3, [r2, #68]	@ 0x44
 800545e:	4b4f      	ldr	r3, [pc, #316]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 8005460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005466:	623b      	str	r3, [r7, #32]
 8005468:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	4b4b      	ldr	r3, [pc, #300]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	4a4a      	ldr	r2, [pc, #296]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	6313      	str	r3, [r2, #48]	@ 0x30
 800547a:	4b48      	ldr	r3, [pc, #288]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005486:	2300      	movs	r3, #0
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	4b44      	ldr	r3, [pc, #272]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 800548c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548e:	4a43      	ldr	r2, [pc, #268]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 8005490:	f043 0302 	orr.w	r3, r3, #2
 8005494:	6313      	str	r3, [r2, #48]	@ 0x30
 8005496:	4b41      	ldr	r3, [pc, #260]	@ (800559c <HAL_SPI_MspInit+0x2c0>)
 8005498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RHD_SPI_MOSI_Pin;
 80054a2:	2302      	movs	r3, #2
 80054a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a6:	2302      	movs	r3, #2
 80054a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ae:	2303      	movs	r3, #3
 80054b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80054b2:	2305      	movs	r3, #5
 80054b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_MOSI_Port, &GPIO_InitStruct);
 80054b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80054ba:	4619      	mov	r1, r3
 80054bc:	4838      	ldr	r0, [pc, #224]	@ (80055a0 <HAL_SPI_MspInit+0x2c4>)
 80054be:	f001 f953 	bl	8006768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RHD_SPI_MISO_Pin;
 80054c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80054c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c8:	2302      	movs	r3, #2
 80054ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d0:	2303      	movs	r3, #3
 80054d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 80054d4:	2306      	movs	r3, #6
 80054d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_MISO_Port, &GPIO_InitStruct);
 80054d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80054dc:	4619      	mov	r1, r3
 80054de:	4830      	ldr	r0, [pc, #192]	@ (80055a0 <HAL_SPI_MspInit+0x2c4>)
 80054e0:	f001 f942 	bl	8006768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CLK_Pin;
 80054e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80054e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 80054ea:	2302      	movs	r3, #2
 80054ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f2:	2303      	movs	r3, #3
 80054f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 80054f6:	2306      	movs	r3, #6
 80054f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_CLK_Port, &GPIO_InitStruct);
 80054fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80054fe:	4619      	mov	r1, r3
 8005500:	482d      	ldr	r0, [pc, #180]	@ (80055b8 <HAL_SPI_MspInit+0x2dc>)
 8005502:	f001 f931 	bl	8006768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CS_Pin;
 8005506:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800550a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800550c:	2301      	movs	r3, #1
 800550e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8005510:	2300      	movs	r3, #0
 8005512:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005514:	2303      	movs	r3, #3
 8005516:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(RHD_SPI_CS_Port, &GPIO_InitStruct);
 8005518:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800551c:	4619      	mov	r1, r3
 800551e:	4826      	ldr	r0, [pc, #152]	@ (80055b8 <HAL_SPI_MspInit+0x2dc>)
 8005520:	f001 f922 	bl	8006768 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8005524:	4b25      	ldr	r3, [pc, #148]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 8005526:	4a26      	ldr	r2, [pc, #152]	@ (80055c0 <HAL_SPI_MspInit+0x2e4>)
 8005528:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 800552a:	4b24      	ldr	r3, [pc, #144]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 800552c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8005530:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005532:	4b22      	ldr	r3, [pc, #136]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 8005534:	2200      	movs	r2, #0
 8005536:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005538:	4b20      	ldr	r3, [pc, #128]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 800553a:	2200      	movs	r2, #0
 800553c:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800553e:	4b1f      	ldr	r3, [pc, #124]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 8005540:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005544:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005546:	4b1d      	ldr	r3, [pc, #116]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 8005548:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800554c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800554e:	4b1b      	ldr	r3, [pc, #108]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 8005550:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005554:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8005556:	4b19      	ldr	r3, [pc, #100]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 8005558:	2200      	movs	r2, #0
 800555a:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800555c:	4b17      	ldr	r3, [pc, #92]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 800555e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005562:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005564:	4b15      	ldr	r3, [pc, #84]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 8005566:	2200      	movs	r2, #0
 8005568:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800556a:	4814      	ldr	r0, [pc, #80]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 800556c:	f000 fd0c 	bl	8005f88 <HAL_DMA_Init>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_SPI_MspInit+0x29e>
      Error_Handler();
 8005576:	f7ff fe59 	bl	800522c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a0f      	ldr	r2, [pc, #60]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 800557e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005580:	4a0e      	ldr	r2, [pc, #56]	@ (80055bc <HAL_SPI_MspInit+0x2e0>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005586:	2200      	movs	r2, #0
 8005588:	2100      	movs	r1, #0
 800558a:	203b      	movs	r0, #59	@ 0x3b
 800558c:	f000 fc9b 	bl	8005ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005590:	203b      	movs	r0, #59	@ 0x3b
 8005592:	f000 fcb4 	bl	8005efe <HAL_NVIC_EnableIRQ>
}
 8005596:	e063      	b.n	8005660 <HAL_SPI_MspInit+0x384>
 8005598:	40013000 	.word	0x40013000
 800559c:	40023800 	.word	0x40023800
 80055a0:	40020000 	.word	0x40020000
 80055a4:	2000147c 	.word	0x2000147c
 80055a8:	40026410 	.word	0x40026410
 80055ac:	2000141c 	.word	0x2000141c
 80055b0:	40026440 	.word	0x40026440
 80055b4:	40013400 	.word	0x40013400
 80055b8:	40020400 	.word	0x40020400
 80055bc:	20000a04 	.word	0x20000a04
 80055c0:	40026458 	.word	0x40026458
  else if (hspi->Instance == SPI3)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a27      	ldr	r2, [pc, #156]	@ (8005668 <HAL_SPI_MspInit+0x38c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d148      	bne.n	8005660 <HAL_SPI_MspInit+0x384>
	  __HAL_RCC_SPI3_CLK_ENABLE();
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	4b26      	ldr	r3, [pc, #152]	@ (800566c <HAL_SPI_MspInit+0x390>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	4a25      	ldr	r2, [pc, #148]	@ (800566c <HAL_SPI_MspInit+0x390>)
 80055d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80055de:	4b23      	ldr	r3, [pc, #140]	@ (800566c <HAL_SPI_MspInit+0x390>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	4b1f      	ldr	r3, [pc, #124]	@ (800566c <HAL_SPI_MspInit+0x390>)
 80055f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f2:	4a1e      	ldr	r2, [pc, #120]	@ (800566c <HAL_SPI_MspInit+0x390>)
 80055f4:	f043 0304 	orr.w	r3, r3, #4
 80055f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80055fa:	4b1c      	ldr	r3, [pc, #112]	@ (800566c <HAL_SPI_MspInit+0x390>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	4b18      	ldr	r3, [pc, #96]	@ (800566c <HAL_SPI_MspInit+0x390>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560e:	4a17      	ldr	r2, [pc, #92]	@ (800566c <HAL_SPI_MspInit+0x390>)
 8005610:	f043 0308 	orr.w	r3, r3, #8
 8005614:	6313      	str	r3, [r2, #48]	@ 0x30
 8005616:	4b15      	ldr	r3, [pc, #84]	@ (800566c <HAL_SPI_MspInit+0x390>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
	  GPIO_InitStruct.Pin = RHS_SPI_CLK_Pin | RHS_SPI_MISO_Pin | RHS_SPI_MOSI_Pin;
 8005622:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8005626:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005628:	2302      	movs	r3, #2
 800562a:	633b      	str	r3, [r7, #48]	@ 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562c:	2300      	movs	r3, #0
 800562e:	637b      	str	r3, [r7, #52]	@ 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005630:	2303      	movs	r3, #3
 8005632:	63bb      	str	r3, [r7, #56]	@ 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005634:	2306      	movs	r3, #6
 8005636:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005638:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800563c:	4619      	mov	r1, r3
 800563e:	480c      	ldr	r0, [pc, #48]	@ (8005670 <HAL_SPI_MspInit+0x394>)
 8005640:	f001 f892 	bl	8006768 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin   = RHS_SPI_CS_Pin;
 8005644:	2304      	movs	r3, #4
 8005646:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8005648:	2301      	movs	r3, #1
 800564a:	633b      	str	r3, [r7, #48]	@ 0x30
	  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800564c:	2300      	movs	r3, #0
 800564e:	637b      	str	r3, [r7, #52]	@ 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005650:	2303      	movs	r3, #3
 8005652:	63bb      	str	r3, [r7, #56]	@ 0x38
	  HAL_GPIO_Init(RHS_SPI_CS_Port, &GPIO_InitStruct);
 8005654:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005658:	4619      	mov	r1, r3
 800565a:	4806      	ldr	r0, [pc, #24]	@ (8005674 <HAL_SPI_MspInit+0x398>)
 800565c:	f001 f884 	bl	8006768 <HAL_GPIO_Init>
}
 8005660:	bf00      	nop
 8005662:	3740      	adds	r7, #64	@ 0x40
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40003c00 	.word	0x40003c00
 800566c:	40023800 	.word	0x40023800
 8005670:	40020800 	.word	0x40020800
 8005674:	40020c00 	.word	0x40020c00

08005678 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1c      	ldr	r2, [pc, #112]	@ (80056f8 <HAL_SPI_MspDeInit+0x80>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d114      	bne.n	80056b4 <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800568a:	4b1c      	ldr	r3, [pc, #112]	@ (80056fc <HAL_SPI_MspDeInit+0x84>)
 800568c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568e:	4a1b      	ldr	r2, [pc, #108]	@ (80056fc <HAL_SPI_MspDeInit+0x84>)
 8005690:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005694:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin);
 8005696:	21e0      	movs	r1, #224	@ 0xe0
 8005698:	4819      	ldr	r0, [pc, #100]	@ (8005700 <HAL_SPI_MspDeInit+0x88>)
 800569a:	f001 f9e9 	bl	8006a70 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fd1e 	bl	80060e4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fd19 	bl	80060e4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 80056b2:	e01d      	b.n	80056f0 <HAL_SPI_MspDeInit+0x78>
  else if(hspi->Instance==SPI4)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a12      	ldr	r2, [pc, #72]	@ (8005704 <HAL_SPI_MspDeInit+0x8c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d118      	bne.n	80056f0 <HAL_SPI_MspDeInit+0x78>
    __HAL_RCC_SPI4_CLK_DISABLE();
 80056be:	4b0f      	ldr	r3, [pc, #60]	@ (80056fc <HAL_SPI_MspDeInit+0x84>)
 80056c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c2:	4a0e      	ldr	r2, [pc, #56]	@ (80056fc <HAL_SPI_MspDeInit+0x84>)
 80056c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056c8:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(RHD_SPI_MOSI_Port, RHD_SPI_MOSI_Pin);
 80056ca:	2102      	movs	r1, #2
 80056cc:	480c      	ldr	r0, [pc, #48]	@ (8005700 <HAL_SPI_MspDeInit+0x88>)
 80056ce:	f001 f9cf 	bl	8006a70 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(RHD_SPI_CS_Port  , RHD_SPI_CS_Pin | RHD_SPI_CLK_Pin);
 80056d2:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80056d6:	480c      	ldr	r0, [pc, #48]	@ (8005708 <HAL_SPI_MspDeInit+0x90>)
 80056d8:	f001 f9ca 	bl	8006a70 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fcff 	bl	80060e4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fcfa 	bl	80060e4 <HAL_DMA_DeInit>
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40013000 	.word	0x40013000
 80056fc:	40023800 	.word	0x40023800
 8005700:	40020000 	.word	0x40020000
 8005704:	40013400 	.word	0x40013400
 8005708:	40020400 	.word	0x40020400

0800570c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08a      	sub	sp, #40	@ 0x28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005714:	f107 0314 	add.w	r3, r7, #20
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	609a      	str	r2, [r3, #8]
 8005720:	60da      	str	r2, [r3, #12]
 8005722:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a19      	ldr	r2, [pc, #100]	@ (8005790 <HAL_UART_MspInit+0x84>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d12b      	bne.n	8005786 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	4b18      	ldr	r3, [pc, #96]	@ (8005794 <HAL_UART_MspInit+0x88>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	4a17      	ldr	r2, [pc, #92]	@ (8005794 <HAL_UART_MspInit+0x88>)
 8005738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800573c:	6413      	str	r3, [r2, #64]	@ 0x40
 800573e:	4b15      	ldr	r3, [pc, #84]	@ (8005794 <HAL_UART_MspInit+0x88>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	4b11      	ldr	r3, [pc, #68]	@ (8005794 <HAL_UART_MspInit+0x88>)
 8005750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005752:	4a10      	ldr	r2, [pc, #64]	@ (8005794 <HAL_UART_MspInit+0x88>)
 8005754:	f043 0301 	orr.w	r3, r3, #1
 8005758:	6313      	str	r3, [r2, #48]	@ 0x30
 800575a:	4b0e      	ldr	r3, [pc, #56]	@ (8005794 <HAL_UART_MspInit+0x88>)
 800575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005766:	230c      	movs	r3, #12
 8005768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800576a:	2302      	movs	r3, #2
 800576c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005772:	2303      	movs	r3, #3
 8005774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005776:	2307      	movs	r3, #7
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800577a:	f107 0314 	add.w	r3, r7, #20
 800577e:	4619      	mov	r1, r3
 8005780:	4805      	ldr	r0, [pc, #20]	@ (8005798 <HAL_UART_MspInit+0x8c>)
 8005782:	f000 fff1 	bl	8006768 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005786:	bf00      	nop
 8005788:	3728      	adds	r7, #40	@ 0x28
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40004400 	.word	0x40004400
 8005794:	40023800 	.word	0x40023800
 8005798:	40020000 	.word	0x40020000

0800579c <SPI1_IRQHandler>:

/* USER CODE BEGIN EV */
/**************************************************************************//**
 * Handle SPI1 global interrupt
 *****************************************************************************/
void SPI1_IRQHandler (void) {
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 80057a0:	4802      	ldr	r0, [pc, #8]	@ (80057ac <SPI1_IRQHandler+0x10>)
 80057a2:	f002 fb87 	bl	8007eb4 <HAL_SPI_IRQHandler>
}
 80057a6:	bf00      	nop
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	200013c4 	.word	0x200013c4

080057b0 <HAL_SPI_TxCpltCallback>:


/**************************************************************************//**
 * SPI transmit complete callback
 *****************************************************************************/
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 80057bc:	4b0b      	ldr	r3, [pc, #44]	@ (80057ec <HAL_SPI_TxCpltCallback+0x3c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f107 020c 	add.w	r2, r7, #12
 80057c4:	4611      	mov	r1, r2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f006 fd3c 	bl	800c244 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <HAL_SPI_TxCpltCallback+0x32>
 80057d2:	4b07      	ldr	r3, [pc, #28]	@ (80057f0 <HAL_SPI_TxCpltCallback+0x40>)
 80057d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	f3bf 8f6f 	isb	sy
}
 80057e2:	bf00      	nop
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	200014dc 	.word	0x200014dc
 80057f0:	e000ed04 	.word	0xe000ed04

080057f4 <HAL_SPI_RxCpltCallback>:

/**************************************************************************//**
 * SPI receive complete callback
 *****************************************************************************/
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef *hspi) {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
	if(hspi->Instance==SPI1){
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1c      	ldr	r2, [pc, #112]	@ (8005878 <HAL_SPI_RxCpltCallback+0x84>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d112      	bne.n	8005830 <HAL_SPI_RxCpltCallback+0x3c>
		  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 800580a:	4b1c      	ldr	r3, [pc, #112]	@ (800587c <HAL_SPI_RxCpltCallback+0x88>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f107 020c 	add.w	r2, r7, #12
 8005812:	4611      	mov	r1, r2
 8005814:	4618      	mov	r0, r3
 8005816:	f006 fd15 	bl	800c244 <xQueueGiveFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <HAL_SPI_RxCpltCallback+0x3c>
 8005820:	4b17      	ldr	r3, [pc, #92]	@ (8005880 <HAL_SPI_RxCpltCallback+0x8c>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
	}

	if(hspi->Instance==SPI4){
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a13      	ldr	r2, [pc, #76]	@ (8005884 <HAL_SPI_RxCpltCallback+0x90>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d119      	bne.n	800586e <HAL_SPI_RxCpltCallback+0x7a>
		current_buffer = (current_buffer + 1) % NUM_BUFFERS;
 800583a:	4b13      	ldr	r3, [pc, #76]	@ (8005888 <HAL_SPI_RxCpltCallback+0x94>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	3301      	adds	r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	bfb8      	it	lt
 800584a:	425b      	neglt	r3, r3
 800584c:	b2da      	uxtb	r2, r3
 800584e:	4b0e      	ldr	r3, [pc, #56]	@ (8005888 <HAL_SPI_RxCpltCallback+0x94>)
 8005850:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Receive_DMA(hspi, (uint8_t *)rx_buffers[current_buffer], SPI_BUFFER_SIZE);
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <HAL_SPI_RxCpltCallback+0x94>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	01db      	lsls	r3, r3, #7
 800585a:	4a0c      	ldr	r2, [pc, #48]	@ (800588c <HAL_SPI_RxCpltCallback+0x98>)
 800585c:	4413      	add	r3, r2
 800585e:	2240      	movs	r2, #64	@ 0x40
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f002 f962 	bl	8007b2c <HAL_SPI_Receive_DMA>
		spi_flag = 1;
 8005868:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <HAL_SPI_RxCpltCallback+0x9c>)
 800586a:	2201      	movs	r2, #1
 800586c:	701a      	strb	r2, [r3, #0]
	}
}
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40013000 	.word	0x40013000
 800587c:	200014dc 	.word	0x200014dc
 8005880:	e000ed04 	.word	0xe000ed04
 8005884:	40013400 	.word	0x40013400
 8005888:	200002e1 	.word	0x200002e1
 800588c:	200002e4 	.word	0x200002e4
 8005890:	200002e0 	.word	0x200002e0

08005894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005898:	bf00      	nop
 800589a:	e7fd      	b.n	8005898 <NMI_Handler+0x4>

0800589c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058a0:	bf00      	nop
 80058a2:	e7fd      	b.n	80058a0 <HardFault_Handler+0x4>

080058a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <MemManage_Handler+0x4>

080058ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058b0:	bf00      	nop
 80058b2:	e7fd      	b.n	80058b0 <BusFault_Handler+0x4>

080058b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058b8:	bf00      	nop
 80058ba:	e7fd      	b.n	80058b8 <UsageFault_Handler+0x4>

080058bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058c0:	bf00      	nop
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058ce:	f000 f9b7 	bl	8005c40 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80058d2:	f008 f84b 	bl	800d96c <xTaskGetSchedulerState>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d001      	beq.n	80058e0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80058dc:	f008 ff9c 	bl	800e818 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
 80058e0:	f005 ffba 	bl	800b858 <osSystickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80058e4:	bf00      	nop
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <EXTI15_10_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI15_10_IRQHandler(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0

  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80058ee:	2300      	movs	r3, #0
 80058f0:	607b      	str	r3, [r7, #4]

  if (__HAL_GPIO_EXTI_GET_IT(WFM_SPI_WIRQ_Pin) != RESET) {
 80058f2:	4b15      	ldr	r3, [pc, #84]	@ (8005948 <EXTI15_10_IRQHandler+0x60>)
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d011      	beq.n	8005922 <EXTI15_10_IRQHandler+0x3a>
	  if(sl_wfx_wake_up_sem){
 80058fe:	4b13      	ldr	r3, [pc, #76]	@ (800594c <EXTI15_10_IRQHandler+0x64>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d006      	beq.n	8005914 <EXTI15_10_IRQHandler+0x2c>
		  xSemaphoreGiveFromISR(sl_wfx_wake_up_sem, &xHigherPriorityTaskWoken);
 8005906:	4b11      	ldr	r3, [pc, #68]	@ (800594c <EXTI15_10_IRQHandler+0x64>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	1d3a      	adds	r2, r7, #4
 800590c:	4611      	mov	r1, r2
 800590e:	4618      	mov	r0, r3
 8005910:	f006 fc98 	bl	800c244 <xQueueGiveFromISR>
	   }

	xEventGroupSetBitsFromISR(sl_wfx_event_group,
 8005914:	4b0e      	ldr	r3, [pc, #56]	@ (8005950 <EXTI15_10_IRQHandler+0x68>)
 8005916:	6819      	ldr	r1, [r3, #0]
 8005918:	1d3b      	adds	r3, r7, #4
 800591a:	2202      	movs	r2, #2
 800591c:	480d      	ldr	r0, [pc, #52]	@ (8005954 <EXTI15_10_IRQHandler+0x6c>)
 800591e:	f008 fd9b 	bl	800e458 <xTimerPendFunctionCallFromISR>
							  SL_WFX_RX_PACKET_AVAILABLE,
							  &xHigherPriorityTaskWoken);
  }

  HAL_GPIO_EXTI_IRQHandler(WFM_SPI_WIRQ_Pin);
 8005922:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005926:	f001 f9a1 	bl	8006c6c <HAL_GPIO_EXTI_IRQHandler>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <EXTI15_10_IRQHandler+0x58>
 8005930:	4b09      	ldr	r3, [pc, #36]	@ (8005958 <EXTI15_10_IRQHandler+0x70>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy

}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	40013c00 	.word	0x40013c00
 800594c:	200013a8 	.word	0x200013a8
 8005950:	200014e4 	.word	0x200014e4
 8005954:	0800bb59 	.word	0x0800bb59
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005960:	4802      	ldr	r0, [pc, #8]	@ (800596c <DMA2_Stream0_IRQHandler+0x10>)
 8005962:	f000 fc97 	bl	8006294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005966:	bf00      	nop
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	2000147c 	.word	0x2000147c

08005970 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005974:	4802      	ldr	r0, [pc, #8]	@ (8005980 <DMA2_Stream2_IRQHandler+0x10>)
 8005976:	f000 fc8d 	bl	8006294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800597a:	bf00      	nop
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	2000141c 	.word	0x2000141c

08005984 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8005988:	4802      	ldr	r0, [pc, #8]	@ (8005994 <DMA2_Stream3_IRQHandler+0x10>)
 800598a:	f000 fc83 	bl	8006294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000a04 	.word	0x20000a04

08005998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
	return 1;
 800599c:	2301      	movs	r3, #1
}
 800599e:	4618      	mov	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <_kill>:

int _kill(int pid, int sig)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80059b2:	f017 f927 	bl	801cc04 <__errno>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2216      	movs	r2, #22
 80059ba:	601a      	str	r2, [r3, #0]
	return -1;
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <_exit>:

void _exit (int status)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80059d0:	f04f 31ff 	mov.w	r1, #4294967295
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff ffe7 	bl	80059a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <_exit+0x12>

080059de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b086      	sub	sp, #24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	e00a      	b.n	8005a06 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80059f0:	f3af 8000 	nop.w
 80059f4:	4601      	mov	r1, r0
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	60ba      	str	r2, [r7, #8]
 80059fc:	b2ca      	uxtb	r2, r1
 80059fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	3301      	adds	r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	dbf0      	blt.n	80059f0 <_read+0x12>
	}

return len;
 8005a0e:	687b      	ldr	r3, [r7, #4]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	e009      	b.n	8005a3e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	60ba      	str	r2, [r7, #8]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fbe8 	bl	8005208 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	dbf1      	blt.n	8005a2a <_write+0x12>
	}
	return len;
 8005a46:	687b      	ldr	r3, [r7, #4]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_close>:

int _close(int file)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
	return -1;
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a78:	605a      	str	r2, [r3, #4]
	return 0;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <_isatty>:

int _isatty(int file)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	return 1;
 8005a90:	2301      	movs	r3, #1
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
	return 0;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ac0:	4a14      	ldr	r2, [pc, #80]	@ (8005b14 <_sbrk+0x5c>)
 8005ac2:	4b15      	ldr	r3, [pc, #84]	@ (8005b18 <_sbrk+0x60>)
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005acc:	4b13      	ldr	r3, [pc, #76]	@ (8005b1c <_sbrk+0x64>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ad4:	4b11      	ldr	r3, [pc, #68]	@ (8005b1c <_sbrk+0x64>)
 8005ad6:	4a12      	ldr	r2, [pc, #72]	@ (8005b20 <_sbrk+0x68>)
 8005ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ada:	4b10      	ldr	r3, [pc, #64]	@ (8005b1c <_sbrk+0x64>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d207      	bcs.n	8005af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ae8:	f017 f88c 	bl	801cc04 <__errno>
 8005aec:	4603      	mov	r3, r0
 8005aee:	220c      	movs	r2, #12
 8005af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295
 8005af6:	e009      	b.n	8005b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005af8:	4b08      	ldr	r3, [pc, #32]	@ (8005b1c <_sbrk+0x64>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005afe:	4b07      	ldr	r3, [pc, #28]	@ (8005b1c <_sbrk+0x64>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4413      	add	r3, r2
 8005b06:	4a05      	ldr	r2, [pc, #20]	@ (8005b1c <_sbrk+0x64>)
 8005b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20020000 	.word	0x20020000
 8005b18:	00000400 	.word	0x00000400
 8005b1c:	20000a64 	.word	0x20000a64
 8005b20:	20014030 	.word	0x20014030

08005b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b28:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <SystemInit+0x20>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	4a05      	ldr	r2, [pc, #20]	@ (8005b44 <SystemInit+0x20>)
 8005b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b38:	bf00      	nop
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	e000ed00 	.word	0xe000ed00

08005b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005b80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b4c:	480d      	ldr	r0, [pc, #52]	@ (8005b84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005b4e:	490e      	ldr	r1, [pc, #56]	@ (8005b88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005b50:	4a0e      	ldr	r2, [pc, #56]	@ (8005b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b54:	e002      	b.n	8005b5c <LoopCopyDataInit>

08005b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b5a:	3304      	adds	r3, #4

08005b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b60:	d3f9      	bcc.n	8005b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b62:	4a0b      	ldr	r2, [pc, #44]	@ (8005b90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005b64:	4c0b      	ldr	r4, [pc, #44]	@ (8005b94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b68:	e001      	b.n	8005b6e <LoopFillZerobss>

08005b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b6c:	3204      	adds	r2, #4

08005b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b70:	d3fb      	bcc.n	8005b6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b72:	f7ff ffd7 	bl	8005b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b76:	f017 f84b 	bl	801cc10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b7a:	f7ff f953 	bl	8004e24 <main>
  bx  lr    
 8005b7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005b80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b88:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8005b8c:	0806e58c 	.word	0x0806e58c
  ldr r2, =_sbss
 8005b90:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 8005b94:	2001402c 	.word	0x2001402c

08005b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b98:	e7fe      	b.n	8005b98 <ADC_IRQHandler>
	...

08005b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8005bdc <HAL_Init+0x40>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8005bdc <HAL_Init+0x40>)
 8005ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005bac:	4b0b      	ldr	r3, [pc, #44]	@ (8005bdc <HAL_Init+0x40>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bdc <HAL_Init+0x40>)
 8005bb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005bb8:	4b08      	ldr	r3, [pc, #32]	@ (8005bdc <HAL_Init+0x40>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a07      	ldr	r2, [pc, #28]	@ (8005bdc <HAL_Init+0x40>)
 8005bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bc4:	2003      	movs	r0, #3
 8005bc6:	f000 f973 	bl	8005eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bca:	200f      	movs	r0, #15
 8005bcc:	f000 f808 	bl	8005be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bd0:	f7ff fb32 	bl	8005238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40023c00 	.word	0x40023c00

08005be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005be8:	4b12      	ldr	r3, [pc, #72]	@ (8005c34 <HAL_InitTick+0x54>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	4b12      	ldr	r3, [pc, #72]	@ (8005c38 <HAL_InitTick+0x58>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 f999 	bl	8005f36 <HAL_SYSTICK_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e00e      	b.n	8005c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b0f      	cmp	r3, #15
 8005c12:	d80a      	bhi.n	8005c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c14:	2200      	movs	r2, #0
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	f000 f953 	bl	8005ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c20:	4a06      	ldr	r2, [pc, #24]	@ (8005c3c <HAL_InitTick+0x5c>)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e000      	b.n	8005c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	200000a4 	.word	0x200000a4
 8005c38:	200000ac 	.word	0x200000ac
 8005c3c:	200000a8 	.word	0x200000a8

08005c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <HAL_IncTick+0x20>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4b06      	ldr	r3, [pc, #24]	@ (8005c64 <HAL_IncTick+0x24>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4413      	add	r3, r2
 8005c50:	4a04      	ldr	r2, [pc, #16]	@ (8005c64 <HAL_IncTick+0x24>)
 8005c52:	6013      	str	r3, [r2, #0]
}
 8005c54:	bf00      	nop
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	200000ac 	.word	0x200000ac
 8005c64:	20000a68 	.word	0x20000a68

08005c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c6c:	4b03      	ldr	r3, [pc, #12]	@ (8005c7c <HAL_GetTick+0x14>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	20000a68 	.word	0x20000a68

08005c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c88:	f7ff ffee 	bl	8005c68 <HAL_GetTick>
 8005c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d005      	beq.n	8005ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc4 <HAL_Delay+0x44>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005ca6:	bf00      	nop
 8005ca8:	f7ff ffde 	bl	8005c68 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d8f7      	bhi.n	8005ca8 <HAL_Delay+0x28>
  {
  }
}
 8005cb8:	bf00      	nop
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	200000ac 	.word	0x200000ac

08005cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d0c <__NVIC_SetPriorityGrouping+0x44>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cfa:	4a04      	ldr	r2, [pc, #16]	@ (8005d0c <__NVIC_SetPriorityGrouping+0x44>)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	60d3      	str	r3, [r2, #12]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	e000ed00 	.word	0xe000ed00

08005d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d14:	4b04      	ldr	r3, [pc, #16]	@ (8005d28 <__NVIC_GetPriorityGrouping+0x18>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	0a1b      	lsrs	r3, r3, #8
 8005d1a:	f003 0307 	and.w	r3, r3, #7
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	e000ed00 	.word	0xe000ed00

08005d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	db0b      	blt.n	8005d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	f003 021f 	and.w	r2, r3, #31
 8005d44:	4907      	ldr	r1, [pc, #28]	@ (8005d64 <__NVIC_EnableIRQ+0x38>)
 8005d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	2001      	movs	r0, #1
 8005d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	e000e100 	.word	0xe000e100

08005d68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	db12      	blt.n	8005da0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	f003 021f 	and.w	r2, r3, #31
 8005d80:	490a      	ldr	r1, [pc, #40]	@ (8005dac <__NVIC_DisableIRQ+0x44>)
 8005d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	2001      	movs	r0, #1
 8005d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d8e:	3320      	adds	r3, #32
 8005d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005d94:	f3bf 8f4f 	dsb	sy
}
 8005d98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d9a:	f3bf 8f6f 	isb	sy
}
 8005d9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	e000e100 	.word	0xe000e100

08005db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	6039      	str	r1, [r7, #0]
 8005dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	db0a      	blt.n	8005dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	490c      	ldr	r1, [pc, #48]	@ (8005dfc <__NVIC_SetPriority+0x4c>)
 8005dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dce:	0112      	lsls	r2, r2, #4
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dd8:	e00a      	b.n	8005df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	4908      	ldr	r1, [pc, #32]	@ (8005e00 <__NVIC_SetPriority+0x50>)
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	3b04      	subs	r3, #4
 8005de8:	0112      	lsls	r2, r2, #4
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	440b      	add	r3, r1
 8005dee:	761a      	strb	r2, [r3, #24]
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	e000e100 	.word	0xe000e100
 8005e00:	e000ed00 	.word	0xe000ed00

08005e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b089      	sub	sp, #36	@ 0x24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f1c3 0307 	rsb	r3, r3, #7
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	bf28      	it	cs
 8005e22:	2304      	movcs	r3, #4
 8005e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	2b06      	cmp	r3, #6
 8005e2c:	d902      	bls.n	8005e34 <NVIC_EncodePriority+0x30>
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	3b03      	subs	r3, #3
 8005e32:	e000      	b.n	8005e36 <NVIC_EncodePriority+0x32>
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e38:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	43da      	mvns	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	401a      	ands	r2, r3
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	fa01 f303 	lsl.w	r3, r1, r3
 8005e56:	43d9      	mvns	r1, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e5c:	4313      	orrs	r3, r2
         );
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3724      	adds	r7, #36	@ 0x24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e7c:	d301      	bcc.n	8005e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e00f      	b.n	8005ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e82:	4a0a      	ldr	r2, [pc, #40]	@ (8005eac <SysTick_Config+0x40>)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e8a:	210f      	movs	r1, #15
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e90:	f7ff ff8e 	bl	8005db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e94:	4b05      	ldr	r3, [pc, #20]	@ (8005eac <SysTick_Config+0x40>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e9a:	4b04      	ldr	r3, [pc, #16]	@ (8005eac <SysTick_Config+0x40>)
 8005e9c:	2207      	movs	r2, #7
 8005e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	e000e010 	.word	0xe000e010

08005eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff ff05 	bl	8005cc8 <__NVIC_SetPriorityGrouping>
}
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b086      	sub	sp, #24
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	4603      	mov	r3, r0
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ed8:	f7ff ff1a 	bl	8005d10 <__NVIC_GetPriorityGrouping>
 8005edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	6978      	ldr	r0, [r7, #20]
 8005ee4:	f7ff ff8e 	bl	8005e04 <NVIC_EncodePriority>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff ff5d 	bl	8005db0 <__NVIC_SetPriority>
}
 8005ef6:	bf00      	nop
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	4603      	mov	r3, r0
 8005f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff ff0d 	bl	8005d2c <__NVIC_EnableIRQ>
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	4603      	mov	r3, r0
 8005f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff ff1d 	bl	8005d68 <__NVIC_DisableIRQ>
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ff94 	bl	8005e6c <SysTick_Config>
 8005f44:	4603      	mov	r3, r0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d106      	bne.n	8005f6c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8005f5e:	4b09      	ldr	r3, [pc, #36]	@ (8005f84 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a08      	ldr	r2, [pc, #32]	@ (8005f84 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005f64:	f043 0304 	orr.w	r3, r3, #4
 8005f68:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8005f6a:	e005      	b.n	8005f78 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8005f6c:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a04      	ldr	r2, [pc, #16]	@ (8005f84 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005f72:	f023 0304 	bic.w	r3, r3, #4
 8005f76:	6013      	str	r3, [r2, #0]
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	e000e010 	.word	0xe000e010

08005f88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005f94:	f7ff fe68 	bl	8005c68 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e099      	b.n	80060d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0201 	bic.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fc4:	e00f      	b.n	8005fe6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fc6:	f7ff fe4f 	bl	8005c68 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b05      	cmp	r3, #5
 8005fd2:	d908      	bls.n	8005fe6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2203      	movs	r2, #3
 8005fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e078      	b.n	80060d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e8      	bne.n	8005fc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4b38      	ldr	r3, [pc, #224]	@ (80060e0 <HAL_DMA_Init+0x158>)
 8006000:	4013      	ands	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006012:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800601e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800602a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	2b04      	cmp	r3, #4
 800603e:	d107      	bne.n	8006050 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006048:	4313      	orrs	r3, r2
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f023 0307 	bic.w	r3, r3, #7
 8006066:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	2b04      	cmp	r3, #4
 8006078:	d117      	bne.n	80060aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00e      	beq.n	80060aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 faef 	bl	8006670 <DMA_CheckFifoParam>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2240      	movs	r2, #64	@ 0x40
 800609c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80060a6:	2301      	movs	r3, #1
 80060a8:	e016      	b.n	80060d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 faa6 	bl	8006604 <DMA_CalcBaseAndBitshift>
 80060b8:	4603      	mov	r3, r0
 80060ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c0:	223f      	movs	r2, #63	@ 0x3f
 80060c2:	409a      	lsls	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	f010803f 	.word	0xf010803f

080060e4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e050      	b.n	8006198 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d101      	bne.n	8006106 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006102:	2302      	movs	r3, #2
 8006104:	e048      	b.n	8006198 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2200      	movs	r2, #0
 8006124:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2200      	movs	r2, #0
 800612c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2200      	movs	r2, #0
 8006134:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2200      	movs	r2, #0
 800613c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2221      	movs	r2, #33	@ 0x21
 8006144:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fa5c 	bl	8006604 <DMA_CalcBaseAndBitshift>
 800614c:	4603      	mov	r3, r0
 800614e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006178:	223f      	movs	r2, #63	@ 0x3f
 800617a:	409a      	lsls	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_DMA_Start_IT+0x26>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e040      	b.n	8006248 <HAL_DMA_Start_IT+0xa8>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d12f      	bne.n	800623a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2202      	movs	r2, #2
 80061de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f9da 	bl	80065a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f8:	223f      	movs	r2, #63	@ 0x3f
 80061fa:	409a      	lsls	r2, r3
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0216 	orr.w	r2, r2, #22
 800620e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0208 	orr.w	r2, r2, #8
 8006226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e005      	b.n	8006246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006242:	2302      	movs	r3, #2
 8006244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d004      	beq.n	800626e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2280      	movs	r2, #128	@ 0x80
 8006268:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e00c      	b.n	8006288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2205      	movs	r2, #5
 8006272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0201 	bic.w	r2, r2, #1
 8006284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062a0:	4b8e      	ldr	r3, [pc, #568]	@ (80064dc <HAL_DMA_IRQHandler+0x248>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a8e      	ldr	r2, [pc, #568]	@ (80064e0 <HAL_DMA_IRQHandler+0x24c>)
 80062a6:	fba2 2303 	umull	r2, r3, r2, r3
 80062aa:	0a9b      	lsrs	r3, r3, #10
 80062ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062be:	2208      	movs	r2, #8
 80062c0:	409a      	lsls	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01a      	beq.n	8006300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d013      	beq.n	8006300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0204 	bic.w	r2, r2, #4
 80062e6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ec:	2208      	movs	r2, #8
 80062ee:	409a      	lsls	r2, r3
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f8:	f043 0201 	orr.w	r2, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006304:	2201      	movs	r2, #1
 8006306:	409a      	lsls	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d012      	beq.n	8006336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00b      	beq.n	8006336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006322:	2201      	movs	r2, #1
 8006324:	409a      	lsls	r2, r3
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632e:	f043 0202 	orr.w	r2, r3, #2
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800633a:	2204      	movs	r2, #4
 800633c:	409a      	lsls	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4013      	ands	r3, r2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d012      	beq.n	800636c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006358:	2204      	movs	r2, #4
 800635a:	409a      	lsls	r2, r3
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006364:	f043 0204 	orr.w	r2, r3, #4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006370:	2210      	movs	r2, #16
 8006372:	409a      	lsls	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d043      	beq.n	8006404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d03c      	beq.n	8006404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800638e:	2210      	movs	r2, #16
 8006390:	409a      	lsls	r2, r3
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	609a      	str	r2, [r3, #8]

      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d018      	beq.n	80063d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d108      	bne.n	80063c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d024      	beq.n	8006404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
 80063c2:	e01f      	b.n	8006404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01b      	beq.n	8006404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
 80063d4:	e016      	b.n	8006404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d107      	bne.n	80063f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0208 	bic.w	r2, r2, #8
 80063f2:	601a      	str	r2, [r3, #0]
        }

        if(hdma->XferHalfCpltCallback != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006408:	2220      	movs	r2, #32
 800640a:	409a      	lsls	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4013      	ands	r3, r2
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 808f 	beq.w	8006534 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8087 	beq.w	8006534 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800642a:	2220      	movs	r2, #32
 800642c:	409a      	lsls	r2, r3
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b05      	cmp	r3, #5
 800643c:	d136      	bne.n	80064ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0216 	bic.w	r2, r2, #22
 800644c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695a      	ldr	r2, [r3, #20]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800645c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d103      	bne.n	800646e <HAL_DMA_IRQHandler+0x1da>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800646a:	2b00      	cmp	r3, #0
 800646c:	d007      	beq.n	800647e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0208 	bic.w	r2, r2, #8
 800647c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006482:	223f      	movs	r2, #63	@ 0x3f
 8006484:	409a      	lsls	r2, r3
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d07e      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
        }
        return;
 80064aa:	e079      	b.n	80065a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01d      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10d      	bne.n	80064e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d031      	beq.n	8006534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	4798      	blx	r3
 80064d8:	e02c      	b.n	8006534 <HAL_DMA_IRQHandler+0x2a0>
 80064da:	bf00      	nop
 80064dc:	200000a4 	.word	0x200000a4
 80064e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d023      	beq.n	8006534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4798      	blx	r3
 80064f4:	e01e      	b.n	8006534 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10f      	bne.n	8006524 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0210 	bic.w	r2, r2, #16
 8006512:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006538:	2b00      	cmp	r3, #0
 800653a:	d032      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d022      	beq.n	800658e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2205      	movs	r2, #5
 800654c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	3301      	adds	r3, #1
 8006564:	60bb      	str	r3, [r7, #8]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	429a      	cmp	r2, r3
 800656a:	d307      	bcc.n	800657c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f2      	bne.n	8006560 <HAL_DMA_IRQHandler+0x2cc>
 800657a:	e000      	b.n	800657e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800657c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
 800659e:	e000      	b.n	80065a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80065a0:	bf00      	nop
    }
  }
}
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80065c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	2b40      	cmp	r3, #64	@ 0x40
 80065d4:	d108      	bne.n	80065e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80065e6:	e007      	b.n	80065f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	60da      	str	r2, [r3, #12]
}
 80065f8:	bf00      	nop
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	3b10      	subs	r3, #16
 8006614:	4a14      	ldr	r2, [pc, #80]	@ (8006668 <DMA_CalcBaseAndBitshift+0x64>)
 8006616:	fba2 2303 	umull	r2, r3, r2, r3
 800661a:	091b      	lsrs	r3, r3, #4
 800661c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800661e:	4a13      	ldr	r2, [pc, #76]	@ (800666c <DMA_CalcBaseAndBitshift+0x68>)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b03      	cmp	r3, #3
 8006630:	d909      	bls.n	8006646 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800663a:	f023 0303 	bic.w	r3, r3, #3
 800663e:	1d1a      	adds	r2, r3, #4
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	659a      	str	r2, [r3, #88]	@ 0x58
 8006644:	e007      	b.n	8006656 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800664e:	f023 0303 	bic.w	r3, r3, #3
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	aaaaaaab 	.word	0xaaaaaaab
 800666c:	080223b8 	.word	0x080223b8

08006670 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d11f      	bne.n	80066ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b03      	cmp	r3, #3
 800668e:	d856      	bhi.n	800673e <DMA_CheckFifoParam+0xce>
 8006690:	a201      	add	r2, pc, #4	@ (adr r2, 8006698 <DMA_CheckFifoParam+0x28>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	080066a9 	.word	0x080066a9
 800669c:	080066bb 	.word	0x080066bb
 80066a0:	080066a9 	.word	0x080066a9
 80066a4:	0800673f 	.word	0x0800673f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d046      	beq.n	8006742 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066b8:	e043      	b.n	8006742 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80066c2:	d140      	bne.n	8006746 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066c8:	e03d      	b.n	8006746 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d2:	d121      	bne.n	8006718 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d837      	bhi.n	800674a <DMA_CheckFifoParam+0xda>
 80066da:	a201      	add	r2, pc, #4	@ (adr r2, 80066e0 <DMA_CheckFifoParam+0x70>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	080066f1 	.word	0x080066f1
 80066e4:	080066f7 	.word	0x080066f7
 80066e8:	080066f1 	.word	0x080066f1
 80066ec:	08006709 	.word	0x08006709
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
      break;
 80066f4:	e030      	b.n	8006758 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d025      	beq.n	800674e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006706:	e022      	b.n	800674e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006710:	d11f      	bne.n	8006752 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006716:	e01c      	b.n	8006752 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b02      	cmp	r3, #2
 800671c:	d903      	bls.n	8006726 <DMA_CheckFifoParam+0xb6>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b03      	cmp	r3, #3
 8006722:	d003      	beq.n	800672c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006724:	e018      	b.n	8006758 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]
      break;
 800672a:	e015      	b.n	8006758 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006730:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00e      	beq.n	8006756 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	73fb      	strb	r3, [r7, #15]
      break;
 800673c:	e00b      	b.n	8006756 <DMA_CheckFifoParam+0xe6>
      break;
 800673e:	bf00      	nop
 8006740:	e00a      	b.n	8006758 <DMA_CheckFifoParam+0xe8>
      break;
 8006742:	bf00      	nop
 8006744:	e008      	b.n	8006758 <DMA_CheckFifoParam+0xe8>
      break;
 8006746:	bf00      	nop
 8006748:	e006      	b.n	8006758 <DMA_CheckFifoParam+0xe8>
      break;
 800674a:	bf00      	nop
 800674c:	e004      	b.n	8006758 <DMA_CheckFifoParam+0xe8>
      break;
 800674e:	bf00      	nop
 8006750:	e002      	b.n	8006758 <DMA_CheckFifoParam+0xe8>
      break;   
 8006752:	bf00      	nop
 8006754:	e000      	b.n	8006758 <DMA_CheckFifoParam+0xe8>
      break;
 8006756:	bf00      	nop
    }
  } 
  
  return status; 
 8006758:	7bfb      	ldrb	r3, [r7, #15]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop

08006768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006768:	b480      	push	{r7}
 800676a:	b089      	sub	sp, #36	@ 0x24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006776:	2300      	movs	r3, #0
 8006778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800677a:	2300      	movs	r3, #0
 800677c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800677e:	2300      	movs	r3, #0
 8006780:	61fb      	str	r3, [r7, #28]
 8006782:	e159      	b.n	8006a38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006784:	2201      	movs	r2, #1
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4013      	ands	r3, r2
 8006796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	429a      	cmp	r2, r3
 800679e:	f040 8148 	bne.w	8006a32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d005      	beq.n	80067ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d130      	bne.n	800681c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	2203      	movs	r2, #3
 80067c6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ca:	43db      	mvns	r3, r3
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	4013      	ands	r3, r2
 80067d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80067f0:	2201      	movs	r2, #1
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	fa02 f303 	lsl.w	r3, r2, r3
 80067f8:	43db      	mvns	r3, r3
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	4013      	ands	r3, r2
 80067fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	091b      	lsrs	r3, r3, #4
 8006806:	f003 0201 	and.w	r2, r3, #1
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	fa02 f303 	lsl.w	r3, r2, r3
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	4313      	orrs	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	2b03      	cmp	r3, #3
 8006826:	d017      	beq.n	8006858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	2203      	movs	r2, #3
 8006834:	fa02 f303 	lsl.w	r3, r2, r3
 8006838:	43db      	mvns	r3, r3
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	4013      	ands	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	fa02 f303 	lsl.w	r3, r2, r3
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	4313      	orrs	r3, r2
 8006850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f003 0303 	and.w	r3, r3, #3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d123      	bne.n	80068ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	08da      	lsrs	r2, r3, #3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3208      	adds	r2, #8
 800686c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	220f      	movs	r2, #15
 800687c:	fa02 f303 	lsl.w	r3, r2, r3
 8006880:	43db      	mvns	r3, r3
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	4013      	ands	r3, r2
 8006886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	fa02 f303 	lsl.w	r3, r2, r3
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	4313      	orrs	r3, r2
 800689c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	08da      	lsrs	r2, r3, #3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3208      	adds	r2, #8
 80068a6:	69b9      	ldr	r1, [r7, #24]
 80068a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	2203      	movs	r2, #3
 80068b8:	fa02 f303 	lsl.w	r3, r2, r3
 80068bc:	43db      	mvns	r3, r3
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	4013      	ands	r3, r2
 80068c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f003 0203 	and.w	r2, r3, #3
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 80a2 	beq.w	8006a32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	4b57      	ldr	r3, [pc, #348]	@ (8006a50 <HAL_GPIO_Init+0x2e8>)
 80068f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f6:	4a56      	ldr	r2, [pc, #344]	@ (8006a50 <HAL_GPIO_Init+0x2e8>)
 80068f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80068fe:	4b54      	ldr	r3, [pc, #336]	@ (8006a50 <HAL_GPIO_Init+0x2e8>)
 8006900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800690a:	4a52      	ldr	r2, [pc, #328]	@ (8006a54 <HAL_GPIO_Init+0x2ec>)
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	089b      	lsrs	r3, r3, #2
 8006910:	3302      	adds	r3, #2
 8006912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	220f      	movs	r2, #15
 8006922:	fa02 f303 	lsl.w	r3, r2, r3
 8006926:	43db      	mvns	r3, r3
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	4013      	ands	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a49      	ldr	r2, [pc, #292]	@ (8006a58 <HAL_GPIO_Init+0x2f0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d019      	beq.n	800696a <HAL_GPIO_Init+0x202>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a48      	ldr	r2, [pc, #288]	@ (8006a5c <HAL_GPIO_Init+0x2f4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d013      	beq.n	8006966 <HAL_GPIO_Init+0x1fe>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a47      	ldr	r2, [pc, #284]	@ (8006a60 <HAL_GPIO_Init+0x2f8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00d      	beq.n	8006962 <HAL_GPIO_Init+0x1fa>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a46      	ldr	r2, [pc, #280]	@ (8006a64 <HAL_GPIO_Init+0x2fc>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d007      	beq.n	800695e <HAL_GPIO_Init+0x1f6>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a45      	ldr	r2, [pc, #276]	@ (8006a68 <HAL_GPIO_Init+0x300>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d101      	bne.n	800695a <HAL_GPIO_Init+0x1f2>
 8006956:	2304      	movs	r3, #4
 8006958:	e008      	b.n	800696c <HAL_GPIO_Init+0x204>
 800695a:	2307      	movs	r3, #7
 800695c:	e006      	b.n	800696c <HAL_GPIO_Init+0x204>
 800695e:	2303      	movs	r3, #3
 8006960:	e004      	b.n	800696c <HAL_GPIO_Init+0x204>
 8006962:	2302      	movs	r3, #2
 8006964:	e002      	b.n	800696c <HAL_GPIO_Init+0x204>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <HAL_GPIO_Init+0x204>
 800696a:	2300      	movs	r3, #0
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	f002 0203 	and.w	r2, r2, #3
 8006972:	0092      	lsls	r2, r2, #2
 8006974:	4093      	lsls	r3, r2
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	4313      	orrs	r3, r2
 800697a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800697c:	4935      	ldr	r1, [pc, #212]	@ (8006a54 <HAL_GPIO_Init+0x2ec>)
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	089b      	lsrs	r3, r3, #2
 8006982:	3302      	adds	r3, #2
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800698a:	4b38      	ldr	r3, [pc, #224]	@ (8006a6c <HAL_GPIO_Init+0x304>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	43db      	mvns	r3, r3
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	4013      	ands	r3, r2
 8006998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80069ae:	4a2f      	ldr	r2, [pc, #188]	@ (8006a6c <HAL_GPIO_Init+0x304>)
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80069b4:	4b2d      	ldr	r3, [pc, #180]	@ (8006a6c <HAL_GPIO_Init+0x304>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	43db      	mvns	r3, r3
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	4013      	ands	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80069d8:	4a24      	ldr	r2, [pc, #144]	@ (8006a6c <HAL_GPIO_Init+0x304>)
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80069de:	4b23      	ldr	r3, [pc, #140]	@ (8006a6c <HAL_GPIO_Init+0x304>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	43db      	mvns	r3, r3
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	4013      	ands	r3, r2
 80069ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a02:	4a1a      	ldr	r2, [pc, #104]	@ (8006a6c <HAL_GPIO_Init+0x304>)
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a08:	4b18      	ldr	r3, [pc, #96]	@ (8006a6c <HAL_GPIO_Init+0x304>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	43db      	mvns	r3, r3
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	4013      	ands	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8006a6c <HAL_GPIO_Init+0x304>)
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	3301      	adds	r3, #1
 8006a36:	61fb      	str	r3, [r7, #28]
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	2b0f      	cmp	r3, #15
 8006a3c:	f67f aea2 	bls.w	8006784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
 8006a44:	3724      	adds	r7, #36	@ 0x24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40023800 	.word	0x40023800
 8006a54:	40013800 	.word	0x40013800
 8006a58:	40020000 	.word	0x40020000
 8006a5c:	40020400 	.word	0x40020400
 8006a60:	40020800 	.word	0x40020800
 8006a64:	40020c00 	.word	0x40020c00
 8006a68:	40021000 	.word	0x40021000
 8006a6c:	40013c00 	.word	0x40013c00

08006a70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	e0bb      	b.n	8006c04 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	f040 80ab 	bne.w	8006bfe <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006aa8:	4a5c      	ldr	r2, [pc, #368]	@ (8006c1c <HAL_GPIO_DeInit+0x1ac>)
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	089b      	lsrs	r3, r3, #2
 8006aae:	3302      	adds	r3, #2
 8006ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ab4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f003 0303 	and.w	r3, r3, #3
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	220f      	movs	r2, #15
 8006ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a54      	ldr	r2, [pc, #336]	@ (8006c20 <HAL_GPIO_DeInit+0x1b0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d019      	beq.n	8006b06 <HAL_GPIO_DeInit+0x96>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a53      	ldr	r2, [pc, #332]	@ (8006c24 <HAL_GPIO_DeInit+0x1b4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d013      	beq.n	8006b02 <HAL_GPIO_DeInit+0x92>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a52      	ldr	r2, [pc, #328]	@ (8006c28 <HAL_GPIO_DeInit+0x1b8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00d      	beq.n	8006afe <HAL_GPIO_DeInit+0x8e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a51      	ldr	r2, [pc, #324]	@ (8006c2c <HAL_GPIO_DeInit+0x1bc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d007      	beq.n	8006afa <HAL_GPIO_DeInit+0x8a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a50      	ldr	r2, [pc, #320]	@ (8006c30 <HAL_GPIO_DeInit+0x1c0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d101      	bne.n	8006af6 <HAL_GPIO_DeInit+0x86>
 8006af2:	2304      	movs	r3, #4
 8006af4:	e008      	b.n	8006b08 <HAL_GPIO_DeInit+0x98>
 8006af6:	2307      	movs	r3, #7
 8006af8:	e006      	b.n	8006b08 <HAL_GPIO_DeInit+0x98>
 8006afa:	2303      	movs	r3, #3
 8006afc:	e004      	b.n	8006b08 <HAL_GPIO_DeInit+0x98>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e002      	b.n	8006b08 <HAL_GPIO_DeInit+0x98>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <HAL_GPIO_DeInit+0x98>
 8006b06:	2300      	movs	r3, #0
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	f002 0203 	and.w	r2, r2, #3
 8006b0e:	0092      	lsls	r2, r2, #2
 8006b10:	4093      	lsls	r3, r2
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d132      	bne.n	8006b7e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006b18:	4b46      	ldr	r3, [pc, #280]	@ (8006c34 <HAL_GPIO_DeInit+0x1c4>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	43db      	mvns	r3, r3
 8006b20:	4944      	ldr	r1, [pc, #272]	@ (8006c34 <HAL_GPIO_DeInit+0x1c4>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006b26:	4b43      	ldr	r3, [pc, #268]	@ (8006c34 <HAL_GPIO_DeInit+0x1c4>)
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	4941      	ldr	r1, [pc, #260]	@ (8006c34 <HAL_GPIO_DeInit+0x1c4>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006b34:	4b3f      	ldr	r3, [pc, #252]	@ (8006c34 <HAL_GPIO_DeInit+0x1c4>)
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	43db      	mvns	r3, r3
 8006b3c:	493d      	ldr	r1, [pc, #244]	@ (8006c34 <HAL_GPIO_DeInit+0x1c4>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006b42:	4b3c      	ldr	r3, [pc, #240]	@ (8006c34 <HAL_GPIO_DeInit+0x1c4>)
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	43db      	mvns	r3, r3
 8006b4a:	493a      	ldr	r1, [pc, #232]	@ (8006c34 <HAL_GPIO_DeInit+0x1c4>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	220f      	movs	r2, #15
 8006b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006b60:	4a2e      	ldr	r2, [pc, #184]	@ (8006c1c <HAL_GPIO_DeInit+0x1ac>)
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	089b      	lsrs	r3, r3, #2
 8006b66:	3302      	adds	r3, #2
 8006b68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	43da      	mvns	r2, r3
 8006b70:	482a      	ldr	r0, [pc, #168]	@ (8006c1c <HAL_GPIO_DeInit+0x1ac>)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	089b      	lsrs	r3, r3, #2
 8006b76:	400a      	ands	r2, r1
 8006b78:	3302      	adds	r3, #2
 8006b7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	2103      	movs	r1, #3
 8006b88:	fa01 f303 	lsl.w	r3, r1, r3
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	401a      	ands	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	08da      	lsrs	r2, r3, #3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3208      	adds	r2, #8
 8006b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	220f      	movs	r2, #15
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	08d2      	lsrs	r2, r2, #3
 8006bb4:	4019      	ands	r1, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3208      	adds	r2, #8
 8006bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	2103      	movs	r1, #3
 8006bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bcc:	43db      	mvns	r3, r3
 8006bce:	401a      	ands	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	2101      	movs	r1, #1
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006be0:	43db      	mvns	r3, r3
 8006be2:	401a      	ands	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	2103      	movs	r1, #3
 8006bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	401a      	ands	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	3301      	adds	r3, #1
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2b0f      	cmp	r3, #15
 8006c08:	f67f af40 	bls.w	8006a8c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	40013800 	.word	0x40013800
 8006c20:	40020000 	.word	0x40020000
 8006c24:	40020400 	.word	0x40020400
 8006c28:	40020800 	.word	0x40020800
 8006c2c:	40020c00 	.word	0x40020c00
 8006c30:	40021000 	.word	0x40021000
 8006c34:	40013c00 	.word	0x40013c00

08006c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	807b      	strh	r3, [r7, #2]
 8006c44:	4613      	mov	r3, r2
 8006c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c48:	787b      	ldrb	r3, [r7, #1]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c4e:	887a      	ldrh	r2, [r7, #2]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c54:	e003      	b.n	8006c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c56:	887b      	ldrh	r3, [r7, #2]
 8006c58:	041a      	lsls	r2, r3, #16
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	619a      	str	r2, [r3, #24]
}
 8006c5e:	bf00      	nop
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
	...

08006c6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006c76:	4b08      	ldr	r3, [pc, #32]	@ (8006c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c78:	695a      	ldr	r2, [r3, #20]
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d006      	beq.n	8006c90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c82:	4a05      	ldr	r2, [pc, #20]	@ (8006c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c84:	88fb      	ldrh	r3, [r7, #6]
 8006c86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 f806 	bl	8006c9c <HAL_GPIO_EXTI_Callback>
  }
}
 8006c90:	bf00      	nop
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	40013c00 	.word	0x40013c00

08006c9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006ca6:	bf00      	nop
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
	...

08006cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e267      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d075      	beq.n	8006dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cd2:	4b88      	ldr	r3, [pc, #544]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 030c 	and.w	r3, r3, #12
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d00c      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cde:	4b85      	ldr	r3, [pc, #532]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	d112      	bne.n	8006d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cea:	4b82      	ldr	r3, [pc, #520]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cf6:	d10b      	bne.n	8006d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf8:	4b7e      	ldr	r3, [pc, #504]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d05b      	beq.n	8006dbc <HAL_RCC_OscConfig+0x108>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d157      	bne.n	8006dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e242      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d18:	d106      	bne.n	8006d28 <HAL_RCC_OscConfig+0x74>
 8006d1a:	4b76      	ldr	r3, [pc, #472]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a75      	ldr	r2, [pc, #468]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	e01d      	b.n	8006d64 <HAL_RCC_OscConfig+0xb0>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d30:	d10c      	bne.n	8006d4c <HAL_RCC_OscConfig+0x98>
 8006d32:	4b70      	ldr	r3, [pc, #448]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a6f      	ldr	r2, [pc, #444]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a6c      	ldr	r2, [pc, #432]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	e00b      	b.n	8006d64 <HAL_RCC_OscConfig+0xb0>
 8006d4c:	4b69      	ldr	r3, [pc, #420]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a68      	ldr	r2, [pc, #416]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	4b66      	ldr	r3, [pc, #408]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a65      	ldr	r2, [pc, #404]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d013      	beq.n	8006d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d6c:	f7fe ff7c 	bl	8005c68 <HAL_GetTick>
 8006d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d74:	f7fe ff78 	bl	8005c68 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b64      	cmp	r3, #100	@ 0x64
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e207      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d86:	4b5b      	ldr	r3, [pc, #364]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0f0      	beq.n	8006d74 <HAL_RCC_OscConfig+0xc0>
 8006d92:	e014      	b.n	8006dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d94:	f7fe ff68 	bl	8005c68 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d9c:	f7fe ff64 	bl	8005c68 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b64      	cmp	r3, #100	@ 0x64
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e1f3      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dae:	4b51      	ldr	r3, [pc, #324]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1f0      	bne.n	8006d9c <HAL_RCC_OscConfig+0xe8>
 8006dba:	e000      	b.n	8006dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d063      	beq.n	8006e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dca:	4b4a      	ldr	r3, [pc, #296]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 030c 	and.w	r3, r3, #12
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00b      	beq.n	8006dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dd6:	4b47      	ldr	r3, [pc, #284]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d11c      	bne.n	8006e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006de2:	4b44      	ldr	r3, [pc, #272]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d116      	bne.n	8006e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dee:	4b41      	ldr	r3, [pc, #260]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <HAL_RCC_OscConfig+0x152>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d001      	beq.n	8006e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e1c7      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e06:	4b3b      	ldr	r3, [pc, #236]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4937      	ldr	r1, [pc, #220]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e1a:	e03a      	b.n	8006e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d020      	beq.n	8006e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e24:	4b34      	ldr	r3, [pc, #208]	@ (8006ef8 <HAL_RCC_OscConfig+0x244>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2a:	f7fe ff1d 	bl	8005c68 <HAL_GetTick>
 8006e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e30:	e008      	b.n	8006e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e32:	f7fe ff19 	bl	8005c68 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e1a8      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e44:	4b2b      	ldr	r3, [pc, #172]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0f0      	beq.n	8006e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e50:	4b28      	ldr	r3, [pc, #160]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	4925      	ldr	r1, [pc, #148]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	600b      	str	r3, [r1, #0]
 8006e64:	e015      	b.n	8006e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e66:	4b24      	ldr	r3, [pc, #144]	@ (8006ef8 <HAL_RCC_OscConfig+0x244>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6c:	f7fe fefc 	bl	8005c68 <HAL_GetTick>
 8006e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e72:	e008      	b.n	8006e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e74:	f7fe fef8 	bl	8005c68 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e187      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e86:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1f0      	bne.n	8006e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0308 	and.w	r3, r3, #8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d036      	beq.n	8006f0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d016      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ea6:	4b15      	ldr	r3, [pc, #84]	@ (8006efc <HAL_RCC_OscConfig+0x248>)
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eac:	f7fe fedc 	bl	8005c68 <HAL_GetTick>
 8006eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eb4:	f7fe fed8 	bl	8005c68 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e167      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef4 <HAL_RCC_OscConfig+0x240>)
 8006ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0f0      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x200>
 8006ed2:	e01b      	b.n	8006f0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ed4:	4b09      	ldr	r3, [pc, #36]	@ (8006efc <HAL_RCC_OscConfig+0x248>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eda:	f7fe fec5 	bl	8005c68 <HAL_GetTick>
 8006ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ee0:	e00e      	b.n	8006f00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ee2:	f7fe fec1 	bl	8005c68 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d907      	bls.n	8006f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e150      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	42470000 	.word	0x42470000
 8006efc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f00:	4b88      	ldr	r3, [pc, #544]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1ea      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 8097 	beq.w	8007048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f1e:	4b81      	ldr	r3, [pc, #516]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10f      	bne.n	8006f4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60bb      	str	r3, [r7, #8]
 8006f2e:	4b7d      	ldr	r3, [pc, #500]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f32:	4a7c      	ldr	r2, [pc, #496]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f42:	60bb      	str	r3, [r7, #8]
 8006f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f46:	2301      	movs	r3, #1
 8006f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f4a:	4b77      	ldr	r3, [pc, #476]	@ (8007128 <HAL_RCC_OscConfig+0x474>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d118      	bne.n	8006f88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f56:	4b74      	ldr	r3, [pc, #464]	@ (8007128 <HAL_RCC_OscConfig+0x474>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a73      	ldr	r2, [pc, #460]	@ (8007128 <HAL_RCC_OscConfig+0x474>)
 8006f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f62:	f7fe fe81 	bl	8005c68 <HAL_GetTick>
 8006f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f6a:	f7fe fe7d 	bl	8005c68 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e10c      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f7c:	4b6a      	ldr	r3, [pc, #424]	@ (8007128 <HAL_RCC_OscConfig+0x474>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0f0      	beq.n	8006f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d106      	bne.n	8006f9e <HAL_RCC_OscConfig+0x2ea>
 8006f90:	4b64      	ldr	r3, [pc, #400]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f94:	4a63      	ldr	r2, [pc, #396]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006f96:	f043 0301 	orr.w	r3, r3, #1
 8006f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f9c:	e01c      	b.n	8006fd8 <HAL_RCC_OscConfig+0x324>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b05      	cmp	r3, #5
 8006fa4:	d10c      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x30c>
 8006fa6:	4b5f      	ldr	r3, [pc, #380]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006faa:	4a5e      	ldr	r2, [pc, #376]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006fac:	f043 0304 	orr.w	r3, r3, #4
 8006fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fb2:	4b5c      	ldr	r3, [pc, #368]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006fb8:	f043 0301 	orr.w	r3, r3, #1
 8006fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fbe:	e00b      	b.n	8006fd8 <HAL_RCC_OscConfig+0x324>
 8006fc0:	4b58      	ldr	r3, [pc, #352]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc4:	4a57      	ldr	r2, [pc, #348]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006fc6:	f023 0301 	bic.w	r3, r3, #1
 8006fca:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fcc:	4b55      	ldr	r3, [pc, #340]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fd0:	4a54      	ldr	r2, [pc, #336]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8006fd2:	f023 0304 	bic.w	r3, r3, #4
 8006fd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d015      	beq.n	800700c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fe0:	f7fe fe42 	bl	8005c68 <HAL_GetTick>
 8006fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe6:	e00a      	b.n	8006ffe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fe8:	f7fe fe3e 	bl	8005c68 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e0cb      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ffe:	4b49      	ldr	r3, [pc, #292]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8007000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0ee      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x334>
 800700a:	e014      	b.n	8007036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800700c:	f7fe fe2c 	bl	8005c68 <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007012:	e00a      	b.n	800702a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007014:	f7fe fe28 	bl	8005c68 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007022:	4293      	cmp	r3, r2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e0b5      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800702a:	4b3e      	ldr	r3, [pc, #248]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 800702c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1ee      	bne.n	8007014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007036:	7dfb      	ldrb	r3, [r7, #23]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d105      	bne.n	8007048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800703c:	4b39      	ldr	r3, [pc, #228]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 800703e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007040:	4a38      	ldr	r2, [pc, #224]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8007042:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007046:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 80a1 	beq.w	8007194 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007052:	4b34      	ldr	r3, [pc, #208]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 030c 	and.w	r3, r3, #12
 800705a:	2b08      	cmp	r3, #8
 800705c:	d05c      	beq.n	8007118 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d141      	bne.n	80070ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007066:	4b31      	ldr	r3, [pc, #196]	@ (800712c <HAL_RCC_OscConfig+0x478>)
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800706c:	f7fe fdfc 	bl	8005c68 <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007074:	f7fe fdf8 	bl	8005c68 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e087      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007086:	4b27      	ldr	r3, [pc, #156]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f0      	bne.n	8007074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	69da      	ldr	r2, [r3, #28]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a0:	019b      	lsls	r3, r3, #6
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a8:	085b      	lsrs	r3, r3, #1
 80070aa:	3b01      	subs	r3, #1
 80070ac:	041b      	lsls	r3, r3, #16
 80070ae:	431a      	orrs	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	061b      	lsls	r3, r3, #24
 80070b6:	491b      	ldr	r1, [pc, #108]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070bc:	4b1b      	ldr	r3, [pc, #108]	@ (800712c <HAL_RCC_OscConfig+0x478>)
 80070be:	2201      	movs	r2, #1
 80070c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c2:	f7fe fdd1 	bl	8005c68 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070c8:	e008      	b.n	80070dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070ca:	f7fe fdcd 	bl	8005c68 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e05c      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070dc:	4b11      	ldr	r3, [pc, #68]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0f0      	beq.n	80070ca <HAL_RCC_OscConfig+0x416>
 80070e8:	e054      	b.n	8007194 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ea:	4b10      	ldr	r3, [pc, #64]	@ (800712c <HAL_RCC_OscConfig+0x478>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f0:	f7fe fdba 	bl	8005c68 <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070f8:	f7fe fdb6 	bl	8005c68 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e045      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800710a:	4b06      	ldr	r3, [pc, #24]	@ (8007124 <HAL_RCC_OscConfig+0x470>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f0      	bne.n	80070f8 <HAL_RCC_OscConfig+0x444>
 8007116:	e03d      	b.n	8007194 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d107      	bne.n	8007130 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e038      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
 8007124:	40023800 	.word	0x40023800
 8007128:	40007000 	.word	0x40007000
 800712c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007130:	4b1b      	ldr	r3, [pc, #108]	@ (80071a0 <HAL_RCC_OscConfig+0x4ec>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d028      	beq.n	8007190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007148:	429a      	cmp	r2, r3
 800714a:	d121      	bne.n	8007190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007156:	429a      	cmp	r2, r3
 8007158:	d11a      	bne.n	8007190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007160:	4013      	ands	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007168:	4293      	cmp	r3, r2
 800716a:	d111      	bne.n	8007190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007176:	085b      	lsrs	r3, r3, #1
 8007178:	3b01      	subs	r3, #1
 800717a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800717c:	429a      	cmp	r2, r3
 800717e:	d107      	bne.n	8007190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800718c:	429a      	cmp	r2, r3
 800718e:	d001      	beq.n	8007194 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e000      	b.n	8007196 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	40023800 	.word	0x40023800

080071a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e0cc      	b.n	8007352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071b8:	4b68      	ldr	r3, [pc, #416]	@ (800735c <HAL_RCC_ClockConfig+0x1b8>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d90c      	bls.n	80071e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071c6:	4b65      	ldr	r3, [pc, #404]	@ (800735c <HAL_RCC_ClockConfig+0x1b8>)
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	b2d2      	uxtb	r2, r2
 80071cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ce:	4b63      	ldr	r3, [pc, #396]	@ (800735c <HAL_RCC_ClockConfig+0x1b8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d001      	beq.n	80071e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e0b8      	b.n	8007352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d020      	beq.n	800722e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071f8:	4b59      	ldr	r3, [pc, #356]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	4a58      	ldr	r2, [pc, #352]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 80071fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007210:	4b53      	ldr	r3, [pc, #332]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	4a52      	ldr	r2, [pc, #328]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 8007216:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800721a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800721c:	4b50      	ldr	r3, [pc, #320]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	494d      	ldr	r1, [pc, #308]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 800722a:	4313      	orrs	r3, r2
 800722c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d044      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d107      	bne.n	8007252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007242:	4b47      	ldr	r3, [pc, #284]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d119      	bne.n	8007282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e07f      	b.n	8007352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d003      	beq.n	8007262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800725e:	2b03      	cmp	r3, #3
 8007260:	d107      	bne.n	8007272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007262:	4b3f      	ldr	r3, [pc, #252]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e06f      	b.n	8007352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007272:	4b3b      	ldr	r3, [pc, #236]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e067      	b.n	8007352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007282:	4b37      	ldr	r3, [pc, #220]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f023 0203 	bic.w	r2, r3, #3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	4934      	ldr	r1, [pc, #208]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 8007290:	4313      	orrs	r3, r2
 8007292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007294:	f7fe fce8 	bl	8005c68 <HAL_GetTick>
 8007298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800729a:	e00a      	b.n	80072b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800729c:	f7fe fce4 	bl	8005c68 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e04f      	b.n	8007352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072b2:	4b2b      	ldr	r3, [pc, #172]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 020c 	and.w	r2, r3, #12
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d1eb      	bne.n	800729c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072c4:	4b25      	ldr	r3, [pc, #148]	@ (800735c <HAL_RCC_ClockConfig+0x1b8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d20c      	bcs.n	80072ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072d2:	4b22      	ldr	r3, [pc, #136]	@ (800735c <HAL_RCC_ClockConfig+0x1b8>)
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072da:	4b20      	ldr	r3, [pc, #128]	@ (800735c <HAL_RCC_ClockConfig+0x1b8>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d001      	beq.n	80072ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e032      	b.n	8007352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0304 	and.w	r3, r3, #4
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d008      	beq.n	800730a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072f8:	4b19      	ldr	r3, [pc, #100]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	4916      	ldr	r1, [pc, #88]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 8007306:	4313      	orrs	r3, r2
 8007308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007316:	4b12      	ldr	r3, [pc, #72]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	490e      	ldr	r1, [pc, #56]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 8007326:	4313      	orrs	r3, r2
 8007328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800732a:	f000 f821 	bl	8007370 <HAL_RCC_GetSysClockFreq>
 800732e:	4602      	mov	r2, r0
 8007330:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <HAL_RCC_ClockConfig+0x1bc>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	091b      	lsrs	r3, r3, #4
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	490a      	ldr	r1, [pc, #40]	@ (8007364 <HAL_RCC_ClockConfig+0x1c0>)
 800733c:	5ccb      	ldrb	r3, [r1, r3]
 800733e:	fa22 f303 	lsr.w	r3, r2, r3
 8007342:	4a09      	ldr	r2, [pc, #36]	@ (8007368 <HAL_RCC_ClockConfig+0x1c4>)
 8007344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007346:	4b09      	ldr	r3, [pc, #36]	@ (800736c <HAL_RCC_ClockConfig+0x1c8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe fc48 	bl	8005be0 <HAL_InitTick>

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	40023c00 	.word	0x40023c00
 8007360:	40023800 	.word	0x40023800
 8007364:	080223a0 	.word	0x080223a0
 8007368:	200000a4 	.word	0x200000a4
 800736c:	200000a8 	.word	0x200000a8

08007370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007374:	b094      	sub	sp, #80	@ 0x50
 8007376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	647b      	str	r3, [r7, #68]	@ 0x44
 800737c:	2300      	movs	r3, #0
 800737e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007380:	2300      	movs	r3, #0
 8007382:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007388:	4b79      	ldr	r3, [pc, #484]	@ (8007570 <HAL_RCC_GetSysClockFreq+0x200>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f003 030c 	and.w	r3, r3, #12
 8007390:	2b08      	cmp	r3, #8
 8007392:	d00d      	beq.n	80073b0 <HAL_RCC_GetSysClockFreq+0x40>
 8007394:	2b08      	cmp	r3, #8
 8007396:	f200 80e1 	bhi.w	800755c <HAL_RCC_GetSysClockFreq+0x1ec>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_RCC_GetSysClockFreq+0x34>
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d003      	beq.n	80073aa <HAL_RCC_GetSysClockFreq+0x3a>
 80073a2:	e0db      	b.n	800755c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073a4:	4b73      	ldr	r3, [pc, #460]	@ (8007574 <HAL_RCC_GetSysClockFreq+0x204>)
 80073a6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80073a8:	e0db      	b.n	8007562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073aa:	4b73      	ldr	r3, [pc, #460]	@ (8007578 <HAL_RCC_GetSysClockFreq+0x208>)
 80073ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073ae:	e0d8      	b.n	8007562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073b0:	4b6f      	ldr	r3, [pc, #444]	@ (8007570 <HAL_RCC_GetSysClockFreq+0x200>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073ba:	4b6d      	ldr	r3, [pc, #436]	@ (8007570 <HAL_RCC_GetSysClockFreq+0x200>)
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d063      	beq.n	800748e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007570 <HAL_RCC_GetSysClockFreq+0x200>)
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	099b      	lsrs	r3, r3, #6
 80073cc:	2200      	movs	r2, #0
 80073ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80073d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80073da:	2300      	movs	r3, #0
 80073dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80073de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80073e2:	4622      	mov	r2, r4
 80073e4:	462b      	mov	r3, r5
 80073e6:	f04f 0000 	mov.w	r0, #0
 80073ea:	f04f 0100 	mov.w	r1, #0
 80073ee:	0159      	lsls	r1, r3, #5
 80073f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073f4:	0150      	lsls	r0, r2, #5
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4621      	mov	r1, r4
 80073fc:	1a51      	subs	r1, r2, r1
 80073fe:	6139      	str	r1, [r7, #16]
 8007400:	4629      	mov	r1, r5
 8007402:	eb63 0301 	sbc.w	r3, r3, r1
 8007406:	617b      	str	r3, [r7, #20]
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	f04f 0300 	mov.w	r3, #0
 8007410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007414:	4659      	mov	r1, fp
 8007416:	018b      	lsls	r3, r1, #6
 8007418:	4651      	mov	r1, sl
 800741a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800741e:	4651      	mov	r1, sl
 8007420:	018a      	lsls	r2, r1, #6
 8007422:	4651      	mov	r1, sl
 8007424:	ebb2 0801 	subs.w	r8, r2, r1
 8007428:	4659      	mov	r1, fp
 800742a:	eb63 0901 	sbc.w	r9, r3, r1
 800742e:	f04f 0200 	mov.w	r2, #0
 8007432:	f04f 0300 	mov.w	r3, #0
 8007436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800743a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800743e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007442:	4690      	mov	r8, r2
 8007444:	4699      	mov	r9, r3
 8007446:	4623      	mov	r3, r4
 8007448:	eb18 0303 	adds.w	r3, r8, r3
 800744c:	60bb      	str	r3, [r7, #8]
 800744e:	462b      	mov	r3, r5
 8007450:	eb49 0303 	adc.w	r3, r9, r3
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	f04f 0200 	mov.w	r2, #0
 800745a:	f04f 0300 	mov.w	r3, #0
 800745e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007462:	4629      	mov	r1, r5
 8007464:	024b      	lsls	r3, r1, #9
 8007466:	4621      	mov	r1, r4
 8007468:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800746c:	4621      	mov	r1, r4
 800746e:	024a      	lsls	r2, r1, #9
 8007470:	4610      	mov	r0, r2
 8007472:	4619      	mov	r1, r3
 8007474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007476:	2200      	movs	r2, #0
 8007478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800747a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800747c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007480:	f7f9 fbaa 	bl	8000bd8 <__aeabi_uldivmod>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4613      	mov	r3, r2
 800748a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800748c:	e058      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800748e:	4b38      	ldr	r3, [pc, #224]	@ (8007570 <HAL_RCC_GetSysClockFreq+0x200>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	099b      	lsrs	r3, r3, #6
 8007494:	2200      	movs	r2, #0
 8007496:	4618      	mov	r0, r3
 8007498:	4611      	mov	r1, r2
 800749a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800749e:	623b      	str	r3, [r7, #32]
 80074a0:	2300      	movs	r3, #0
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80074a8:	4642      	mov	r2, r8
 80074aa:	464b      	mov	r3, r9
 80074ac:	f04f 0000 	mov.w	r0, #0
 80074b0:	f04f 0100 	mov.w	r1, #0
 80074b4:	0159      	lsls	r1, r3, #5
 80074b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074ba:	0150      	lsls	r0, r2, #5
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4641      	mov	r1, r8
 80074c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80074c6:	4649      	mov	r1, r9
 80074c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80074d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80074dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80074e0:	ebb2 040a 	subs.w	r4, r2, sl
 80074e4:	eb63 050b 	sbc.w	r5, r3, fp
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	00eb      	lsls	r3, r5, #3
 80074f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074f6:	00e2      	lsls	r2, r4, #3
 80074f8:	4614      	mov	r4, r2
 80074fa:	461d      	mov	r5, r3
 80074fc:	4643      	mov	r3, r8
 80074fe:	18e3      	adds	r3, r4, r3
 8007500:	603b      	str	r3, [r7, #0]
 8007502:	464b      	mov	r3, r9
 8007504:	eb45 0303 	adc.w	r3, r5, r3
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007516:	4629      	mov	r1, r5
 8007518:	028b      	lsls	r3, r1, #10
 800751a:	4621      	mov	r1, r4
 800751c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007520:	4621      	mov	r1, r4
 8007522:	028a      	lsls	r2, r1, #10
 8007524:	4610      	mov	r0, r2
 8007526:	4619      	mov	r1, r3
 8007528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800752a:	2200      	movs	r2, #0
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	61fa      	str	r2, [r7, #28]
 8007530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007534:	f7f9 fb50 	bl	8000bd8 <__aeabi_uldivmod>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4613      	mov	r3, r2
 800753e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007540:	4b0b      	ldr	r3, [pc, #44]	@ (8007570 <HAL_RCC_GetSysClockFreq+0x200>)
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	0c1b      	lsrs	r3, r3, #16
 8007546:	f003 0303 	and.w	r3, r3, #3
 800754a:	3301      	adds	r3, #1
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007550:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007554:	fbb2 f3f3 	udiv	r3, r2, r3
 8007558:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800755a:	e002      	b.n	8007562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800755c:	4b05      	ldr	r3, [pc, #20]	@ (8007574 <HAL_RCC_GetSysClockFreq+0x204>)
 800755e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007564:	4618      	mov	r0, r3
 8007566:	3750      	adds	r7, #80	@ 0x50
 8007568:	46bd      	mov	sp, r7
 800756a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800756e:	bf00      	nop
 8007570:	40023800 	.word	0x40023800
 8007574:	00f42400 	.word	0x00f42400
 8007578:	007a1200 	.word	0x007a1200

0800757c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007580:	4b03      	ldr	r3, [pc, #12]	@ (8007590 <HAL_RCC_GetHCLKFreq+0x14>)
 8007582:	681b      	ldr	r3, [r3, #0]
}
 8007584:	4618      	mov	r0, r3
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	200000a4 	.word	0x200000a4

08007594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007598:	f7ff fff0 	bl	800757c <HAL_RCC_GetHCLKFreq>
 800759c:	4602      	mov	r2, r0
 800759e:	4b05      	ldr	r3, [pc, #20]	@ (80075b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	0a9b      	lsrs	r3, r3, #10
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	4903      	ldr	r1, [pc, #12]	@ (80075b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075aa:	5ccb      	ldrb	r3, [r1, r3]
 80075ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40023800 	.word	0x40023800
 80075b8:	080223b0 	.word	0x080223b0

080075bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075c0:	f7ff ffdc 	bl	800757c <HAL_RCC_GetHCLKFreq>
 80075c4:	4602      	mov	r2, r0
 80075c6:	4b05      	ldr	r3, [pc, #20]	@ (80075dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	0b5b      	lsrs	r3, r3, #13
 80075cc:	f003 0307 	and.w	r3, r3, #7
 80075d0:	4903      	ldr	r1, [pc, #12]	@ (80075e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075d2:	5ccb      	ldrb	r3, [r1, r3]
 80075d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075d8:	4618      	mov	r0, r3
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	40023800 	.word	0x40023800
 80075e0:	080223b0 	.word	0x080223b0

080075e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e07b      	b.n	80076ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d108      	bne.n	8007610 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007606:	d009      	beq.n	800761c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	61da      	str	r2, [r3, #28]
 800760e:	e005      	b.n	800761c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d106      	bne.n	800763c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7fd fe50 	bl	80052dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007652:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	431a      	orrs	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800768c:	431a      	orrs	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a0:	ea42 0103 	orr.w	r1, r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	0c1b      	lsrs	r3, r3, #16
 80076ba:	f003 0104 	and.w	r1, r3, #4
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c2:	f003 0210 	and.w	r2, r3, #16
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69da      	ldr	r2, [r3, #28]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e01a      	b.n	800773e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800771e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7fd ffa9 	bl	8005678 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b088      	sub	sp, #32
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	603b      	str	r3, [r7, #0]
 8007752:	4613      	mov	r3, r2
 8007754:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_SPI_Transmit+0x22>
 8007764:	2302      	movs	r3, #2
 8007766:	e126      	b.n	80079b6 <HAL_SPI_Transmit+0x270>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007770:	f7fe fa7a 	bl	8005c68 <HAL_GetTick>
 8007774:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007776:	88fb      	ldrh	r3, [r7, #6]
 8007778:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b01      	cmp	r3, #1
 8007784:	d002      	beq.n	800778c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007786:	2302      	movs	r3, #2
 8007788:	77fb      	strb	r3, [r7, #31]
    goto error;
 800778a:	e10b      	b.n	80079a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <HAL_SPI_Transmit+0x52>
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800779c:	e102      	b.n	80079a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2203      	movs	r2, #3
 80077a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077e4:	d10f      	bne.n	8007806 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007804:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007810:	2b40      	cmp	r3, #64	@ 0x40
 8007812:	d007      	beq.n	8007824 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800782c:	d14b      	bne.n	80078c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <HAL_SPI_Transmit+0xf6>
 8007836:	8afb      	ldrh	r3, [r7, #22]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d13e      	bne.n	80078ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007840:	881a      	ldrh	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784c:	1c9a      	adds	r2, r3, #2
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007860:	e02b      	b.n	80078ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b02      	cmp	r3, #2
 800786e:	d112      	bne.n	8007896 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007874:	881a      	ldrh	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007880:	1c9a      	adds	r2, r3, #2
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800788a:	b29b      	uxth	r3, r3
 800788c:	3b01      	subs	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007894:	e011      	b.n	80078ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007896:	f7fe f9e7 	bl	8005c68 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d803      	bhi.n	80078ae <HAL_SPI_Transmit+0x168>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ac:	d102      	bne.n	80078b4 <HAL_SPI_Transmit+0x16e>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078b8:	e074      	b.n	80079a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1ce      	bne.n	8007862 <HAL_SPI_Transmit+0x11c>
 80078c4:	e04c      	b.n	8007960 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <HAL_SPI_Transmit+0x18e>
 80078ce:	8afb      	ldrh	r3, [r7, #22]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d140      	bne.n	8007956 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	330c      	adds	r3, #12
 80078de:	7812      	ldrb	r2, [r2, #0]
 80078e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	3b01      	subs	r3, #1
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078fa:	e02c      	b.n	8007956 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b02      	cmp	r3, #2
 8007908:	d113      	bne.n	8007932 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	330c      	adds	r3, #12
 8007914:	7812      	ldrb	r2, [r2, #0]
 8007916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007930:	e011      	b.n	8007956 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007932:	f7fe f999 	bl	8005c68 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d803      	bhi.n	800794a <HAL_SPI_Transmit+0x204>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007948:	d102      	bne.n	8007950 <HAL_SPI_Transmit+0x20a>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d102      	bne.n	8007956 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007954:	e026      	b.n	80079a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800795a:	b29b      	uxth	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1cd      	bne.n	80078fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 fe07 	bl	8008578 <SPI_EndRxTxTransaction>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2220      	movs	r2, #32
 8007974:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800797e:	2300      	movs	r3, #0
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	e000      	b.n	80079a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80079a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80079b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3720      	adds	r7, #32
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4613      	mov	r3, r2
 80079cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d101      	bne.n	80079e0 <HAL_SPI_Transmit_DMA+0x20>
 80079dc:	2302      	movs	r3, #2
 80079de:	e09b      	b.n	8007b18 <HAL_SPI_Transmit_DMA+0x158>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d002      	beq.n	80079fa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80079f4:	2302      	movs	r3, #2
 80079f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079f8:	e089      	b.n	8007b0e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <HAL_SPI_Transmit_DMA+0x46>
 8007a00:	88fb      	ldrh	r3, [r7, #6]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d102      	bne.n	8007a0c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a0a:	e080      	b.n	8007b0e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2203      	movs	r2, #3
 8007a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	88fa      	ldrh	r2, [r7, #6]
 8007a24:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	88fa      	ldrh	r2, [r7, #6]
 8007a2a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a52:	d10f      	bne.n	8007a74 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a78:	4a29      	ldr	r2, [pc, #164]	@ (8007b20 <HAL_SPI_Transmit_DMA+0x160>)
 8007a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a80:	4a28      	ldr	r2, [pc, #160]	@ (8007b24 <HAL_SPI_Transmit_DMA+0x164>)
 8007a82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a88:	4a27      	ldr	r2, [pc, #156]	@ (8007b28 <HAL_SPI_Transmit_DMA+0x168>)
 8007a8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a90:	2200      	movs	r2, #0
 8007a92:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	330c      	adds	r3, #12
 8007aa4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aaa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007aac:	f7fe fb78 	bl	80061a0 <HAL_DMA_Start_IT>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00c      	beq.n	8007ad0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aba:	f043 0210 	orr.w	r2, r3, #16
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007ace:	e01e      	b.n	8007b0e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ada:	2b40      	cmp	r3, #64	@ 0x40
 8007adc:	d007      	beq.n	8007aee <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007aec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f042 0220 	orr.w	r2, r2, #32
 8007afc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f042 0202 	orr.w	r2, r2, #2
 8007b0c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	080082e1 	.word	0x080082e1
 8007b24:	08008101 	.word	0x08008101
 8007b28:	08008335 	.word	0x08008335

08007b2c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4613      	mov	r3, r2
 8007b38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d110      	bne.n	8007b68 <HAL_SPI_Receive_DMA+0x3c>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b4e:	d10b      	bne.n	8007b68 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2204      	movs	r2, #4
 8007b54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007b58:	88fb      	ldrh	r3, [r7, #6]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	68b9      	ldr	r1, [r7, #8]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 f8a6 	bl	8007cb0 <HAL_SPI_TransmitReceive_DMA>
 8007b64:	4603      	mov	r3, r0
 8007b66:	e09b      	b.n	8007ca0 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_SPI_Receive_DMA+0x4a>
 8007b72:	2302      	movs	r3, #2
 8007b74:	e094      	b.n	8007ca0 <HAL_SPI_Receive_DMA+0x174>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d002      	beq.n	8007b90 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b8e:	e082      	b.n	8007c96 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_SPI_Receive_DMA+0x70>
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d102      	bne.n	8007ba2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ba0:	e079      	b.n	8007c96 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2204      	movs	r2, #4
 8007ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	88fa      	ldrh	r2, [r7, #6]
 8007bba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007be2:	d10f      	bne.n	8007c04 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c02:	601a      	str	r2, [r3, #0]

//  /* Set the SPI RxDMA Half transfer complete callback */
//  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c08:	4a27      	ldr	r2, [pc, #156]	@ (8007ca8 <HAL_SPI_Receive_DMA+0x17c>)
 8007c0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c10:	4a26      	ldr	r2, [pc, #152]	@ (8007cac <HAL_SPI_Receive_DMA+0x180>)
 8007c12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c18:	2200      	movs	r2, #0
 8007c1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	330c      	adds	r3, #12
 8007c26:	4619      	mov	r1, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c32:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007c34:	f7fe fab4 	bl	80061a0 <HAL_DMA_Start_IT>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00c      	beq.n	8007c58 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c42:	f043 0210 	orr.w	r2, r3, #16
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007c56:	e01e      	b.n	8007c96 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c62:	2b40      	cmp	r3, #64	@ 0x40
 8007c64:	d007      	beq.n	8007c76 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c74:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f042 0220 	orr.w	r2, r2, #32
 8007c84:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 0201 	orr.w	r2, r2, #1
 8007c94:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	080081a9 	.word	0x080081a9
 8007cac:	08008335 	.word	0x08008335

08007cb0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e0e3      	b.n	8007e98 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cde:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007ce6:	7dbb      	ldrb	r3, [r7, #22]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d00d      	beq.n	8007d08 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cf2:	d106      	bne.n	8007d02 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d102      	bne.n	8007d02 <HAL_SPI_TransmitReceive_DMA+0x52>
 8007cfc:	7dbb      	ldrb	r3, [r7, #22]
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d002      	beq.n	8007d08 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007d02:	2302      	movs	r3, #2
 8007d04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d06:	e0c2      	b.n	8007e8e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007d14:	887b      	ldrh	r3, [r7, #2]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d102      	bne.n	8007d20 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d1e:	e0b6      	b.n	8007e8e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d003      	beq.n	8007d34 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2205      	movs	r2, #5
 8007d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	887a      	ldrh	r2, [r7, #2]
 8007d44:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	887a      	ldrh	r2, [r7, #2]
 8007d4a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	887a      	ldrh	r2, [r7, #2]
 8007d56:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	887a      	ldrh	r2, [r7, #2]
 8007d5c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d108      	bne.n	8007d88 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d7a:	4a49      	ldr	r2, [pc, #292]	@ (8007ea0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007d7c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d82:	4a48      	ldr	r2, [pc, #288]	@ (8007ea4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007d84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007d86:	e007      	b.n	8007d98 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d8c:	4a46      	ldr	r2, [pc, #280]	@ (8007ea8 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8007d8e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d94:	4a45      	ldr	r2, [pc, #276]	@ (8007eac <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8007d96:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d9c:	4a44      	ldr	r2, [pc, #272]	@ (8007eb0 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8007d9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da4:	2200      	movs	r2, #0
 8007da6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	330c      	adds	r3, #12
 8007db2:	4619      	mov	r1, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dbe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007dc0:	f7fe f9ee 	bl	80061a0 <HAL_DMA_Start_IT>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00c      	beq.n	8007de4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dce:	f043 0210 	orr.w	r2, r3, #16
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007de2:	e054      	b.n	8007e8e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f042 0201 	orr.w	r2, r2, #1
 8007df2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007df8:	2200      	movs	r2, #0
 8007dfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e00:	2200      	movs	r2, #0
 8007e02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e08:	2200      	movs	r2, #0
 8007e0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e10:	2200      	movs	r2, #0
 8007e12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	330c      	adds	r3, #12
 8007e24:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e2a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007e2c:	f7fe f9b8 	bl	80061a0 <HAL_DMA_Start_IT>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00c      	beq.n	8007e50 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e3a:	f043 0210 	orr.w	r2, r3, #16
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007e4e:	e01e      	b.n	8007e8e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5a:	2b40      	cmp	r3, #64	@ 0x40
 8007e5c:	d007      	beq.n	8007e6e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e6c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0220 	orr.w	r2, r2, #32
 8007e7c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f042 0202 	orr.w	r2, r2, #2
 8007e8c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	080082fd 	.word	0x080082fd
 8007ea4:	080081a9 	.word	0x080081a9
 8007ea8:	08008319 	.word	0x08008319
 8007eac:	08008251 	.word	0x08008251
 8007eb0:	08008335 	.word	0x08008335

08007eb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10e      	bne.n	8007ef4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d009      	beq.n	8007ef4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
    return;
 8007ef2:	e0ce      	b.n	8008092 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d009      	beq.n	8007f12 <HAL_SPI_IRQHandler+0x5e>
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d004      	beq.n	8007f12 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	4798      	blx	r3
    return;
 8007f10:	e0bf      	b.n	8008092 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <HAL_SPI_IRQHandler+0x7e>
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d105      	bne.n	8007f32 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 80b0 	beq.w	8008092 <HAL_SPI_IRQHandler+0x1de>
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 80aa 	beq.w	8008092 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d023      	beq.n	8007f90 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d011      	beq.n	8007f78 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f58:	f043 0204 	orr.w	r2, r3, #4
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	617b      	str	r3, [r7, #20]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	e00b      	b.n	8007f90 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f78:	2300      	movs	r3, #0
 8007f7a:	613b      	str	r3, [r7, #16]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	613b      	str	r3, [r7, #16]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	613b      	str	r3, [r7, #16]
 8007f8c:	693b      	ldr	r3, [r7, #16]
        return;
 8007f8e:	e080      	b.n	8008092 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d014      	beq.n	8007fc4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9e:	f043 0201 	orr.w	r2, r3, #1
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60fb      	str	r3, [r7, #12]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00c      	beq.n	8007fe8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd2:	f043 0208 	orr.w	r2, r3, #8
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60bb      	str	r3, [r7, #8]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	60bb      	str	r3, [r7, #8]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d04f      	beq.n	8008090 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ffe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <HAL_SPI_IRQHandler+0x168>
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d034      	beq.n	8008086 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f022 0203 	bic.w	r2, r2, #3
 800802a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008030:	2b00      	cmp	r3, #0
 8008032:	d011      	beq.n	8008058 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008038:	4a17      	ldr	r2, [pc, #92]	@ (8008098 <HAL_SPI_IRQHandler+0x1e4>)
 800803a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008040:	4618      	mov	r0, r3
 8008042:	f7fe f905 	bl	8006250 <HAL_DMA_Abort_IT>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008050:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800805c:	2b00      	cmp	r3, #0
 800805e:	d016      	beq.n	800808e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008064:	4a0c      	ldr	r2, [pc, #48]	@ (8008098 <HAL_SPI_IRQHandler+0x1e4>)
 8008066:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800806c:	4618      	mov	r0, r3
 800806e:	f7fe f8ef 	bl	8006250 <HAL_DMA_Abort_IT>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8008084:	e003      	b.n	800808e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f830 	bl	80080ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800808c:	e000      	b.n	8008090 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800808e:	bf00      	nop
    return;
 8008090:	bf00      	nop
  }
}
 8008092:	3720      	adds	r7, #32
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	08008375 	.word	0x08008375

0800809c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800810e:	f7fd fdab 	bl	8005c68 <HAL_GetTick>
 8008112:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800811e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008122:	d03b      	beq.n	800819c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0220 	bic.w	r2, r2, #32
 8008132:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0202 	bic.w	r2, r2, #2
 8008142:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	2164      	movs	r1, #100	@ 0x64
 8008148:	6978      	ldr	r0, [r7, #20]
 800814a:	f000 fa15 	bl	8008578 <SPI_EndRxTxTransaction>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d005      	beq.n	8008160 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008158:	f043 0220 	orr.w	r2, r3, #32
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10a      	bne.n	800817e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008168:	2300      	movs	r3, #0
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	60fb      	str	r3, [r7, #12]
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2200      	movs	r2, #0
 8008182:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008194:	6978      	ldr	r0, [r7, #20]
 8008196:	f7ff ffa9 	bl	80080ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800819a:	e002      	b.n	80081a2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800819c:	6978      	ldr	r0, [r7, #20]
 800819e:	f7fd fb07 	bl	80057b0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081b6:	f7fd fd57 	bl	8005c68 <HAL_GetTick>
 80081ba:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081ca:	d03b      	beq.n	8008244 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0220 	bic.w	r2, r2, #32
 80081da:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10d      	bne.n	8008200 <SPI_DMAReceiveCplt+0x58>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081ec:	d108      	bne.n	8008200 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0203 	bic.w	r2, r2, #3
 80081fc:	605a      	str	r2, [r3, #4]
 80081fe:	e007      	b.n	8008210 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0201 	bic.w	r2, r2, #1
 800820e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	2164      	movs	r1, #100	@ 0x64
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 f949 	bl	80084ac <SPI_EndRxTransaction>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2220      	movs	r2, #32
 8008224:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff ff55 	bl	80080ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008242:	e002      	b.n	800824a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7fd fad5 	bl	80057f4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800825e:	f7fd fd03 	bl	8005c68 <HAL_GetTick>
 8008262:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800826e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008272:	d02f      	beq.n	80082d4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0220 	bic.w	r2, r2, #32
 8008282:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	2164      	movs	r1, #100	@ 0x64
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 f975 	bl	8008578 <SPI_EndRxTxTransaction>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d005      	beq.n	80082a0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008298:	f043 0220 	orr.w	r2, r3, #32
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0203 	bic.w	r2, r2, #3
 80082ae:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff ff0d 	bl	80080ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80082d2:	e002      	b.n	80082da <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff fee1 	bl	800809c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ec:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f7ff fede 	bl	80080b0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082f4:	bf00      	nop
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008308:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f7ff feda 	bl	80080c4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008310:	bf00      	nop
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008324:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f7ff fed6 	bl	80080d8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800832c:	bf00      	nop
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008340:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0203 	bic.w	r2, r2, #3
 8008350:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008356:	f043 0210 	orr.w	r2, r3, #16
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7ff fec0 	bl	80080ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800836c:	bf00      	nop
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008380:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7ff feac 	bl	80080ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008394:	bf00      	nop
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	603b      	str	r3, [r7, #0]
 80083a8:	4613      	mov	r3, r2
 80083aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083ac:	f7fd fc5c 	bl	8005c68 <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b4:	1a9b      	subs	r3, r3, r2
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	4413      	add	r3, r2
 80083ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083bc:	f7fd fc54 	bl	8005c68 <HAL_GetTick>
 80083c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083c2:	4b39      	ldr	r3, [pc, #228]	@ (80084a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	015b      	lsls	r3, r3, #5
 80083c8:	0d1b      	lsrs	r3, r3, #20
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	fb02 f303 	mul.w	r3, r2, r3
 80083d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083d2:	e054      	b.n	800847e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083da:	d050      	beq.n	800847e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083dc:	f7fd fc44 	bl	8005c68 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d902      	bls.n	80083f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d13d      	bne.n	800846e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800840a:	d111      	bne.n	8008430 <SPI_WaitFlagStateUntilTimeout+0x94>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008414:	d004      	beq.n	8008420 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800841e:	d107      	bne.n	8008430 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800842e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008438:	d10f      	bne.n	800845a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e017      	b.n	800849e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008474:	2300      	movs	r3, #0
 8008476:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	3b01      	subs	r3, #1
 800847c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4013      	ands	r3, r2
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	429a      	cmp	r2, r3
 800848c:	bf0c      	ite	eq
 800848e:	2301      	moveq	r3, #1
 8008490:	2300      	movne	r3, #0
 8008492:	b2db      	uxtb	r3, r3
 8008494:	461a      	mov	r2, r3
 8008496:	79fb      	ldrb	r3, [r7, #7]
 8008498:	429a      	cmp	r2, r3
 800849a:	d19b      	bne.n	80083d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3720      	adds	r7, #32
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	200000a4 	.word	0x200000a4

080084ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084c0:	d111      	bne.n	80084e6 <SPI_EndRxTransaction+0x3a>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084ca:	d004      	beq.n	80084d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084d4:	d107      	bne.n	80084e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084ee:	d12a      	bne.n	8008546 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084f8:	d012      	beq.n	8008520 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2200      	movs	r2, #0
 8008502:	2180      	movs	r1, #128	@ 0x80
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f7ff ff49 	bl	800839c <SPI_WaitFlagStateUntilTimeout>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d02d      	beq.n	800856c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008514:	f043 0220 	orr.w	r2, r3, #32
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e026      	b.n	800856e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2200      	movs	r2, #0
 8008528:	2101      	movs	r1, #1
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f7ff ff36 	bl	800839c <SPI_WaitFlagStateUntilTimeout>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d01a      	beq.n	800856c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800853a:	f043 0220 	orr.w	r2, r3, #32
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e013      	b.n	800856e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2200      	movs	r2, #0
 800854e:	2101      	movs	r1, #1
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f7ff ff23 	bl	800839c <SPI_WaitFlagStateUntilTimeout>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d007      	beq.n	800856c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008560:	f043 0220 	orr.w	r2, r3, #32
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e000      	b.n	800856e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af02      	add	r7, sp, #8
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008584:	4b1b      	ldr	r3, [pc, #108]	@ (80085f4 <SPI_EndRxTxTransaction+0x7c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a1b      	ldr	r2, [pc, #108]	@ (80085f8 <SPI_EndRxTxTransaction+0x80>)
 800858a:	fba2 2303 	umull	r2, r3, r2, r3
 800858e:	0d5b      	lsrs	r3, r3, #21
 8008590:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008594:	fb02 f303 	mul.w	r3, r2, r3
 8008598:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085a2:	d112      	bne.n	80085ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2200      	movs	r2, #0
 80085ac:	2180      	movs	r1, #128	@ 0x80
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff fef4 	bl	800839c <SPI_WaitFlagStateUntilTimeout>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d016      	beq.n	80085e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085be:	f043 0220 	orr.w	r2, r3, #32
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e00f      	b.n	80085ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	3b01      	subs	r3, #1
 80085d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e0:	2b80      	cmp	r3, #128	@ 0x80
 80085e2:	d0f2      	beq.n	80085ca <SPI_EndRxTxTransaction+0x52>
 80085e4:	e000      	b.n	80085e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80085e6:	bf00      	nop
  }

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	200000a4 	.word	0x200000a4
 80085f8:	165e9f81 	.word	0x165e9f81

080085fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e03f      	b.n	800868e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d106      	bne.n	8008628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fd f872 	bl	800570c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2224      	movs	r2, #36	@ 0x24
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68da      	ldr	r2, [r3, #12]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800863e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f929 	bl	8008898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	691a      	ldr	r2, [r3, #16]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	695a      	ldr	r2, [r3, #20]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2220      	movs	r2, #32
 8008680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2220      	movs	r2, #32
 8008688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b08a      	sub	sp, #40	@ 0x28
 800869a:	af02      	add	r7, sp, #8
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	603b      	str	r3, [r7, #0]
 80086a2:	4613      	mov	r3, r2
 80086a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b20      	cmp	r3, #32
 80086b4:	d17c      	bne.n	80087b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <HAL_UART_Transmit+0x2c>
 80086bc:	88fb      	ldrh	r3, [r7, #6]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e075      	b.n	80087b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d101      	bne.n	80086d4 <HAL_UART_Transmit+0x3e>
 80086d0:	2302      	movs	r3, #2
 80086d2:	e06e      	b.n	80087b2 <HAL_UART_Transmit+0x11c>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2221      	movs	r2, #33	@ 0x21
 80086e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086ea:	f7fd fabd 	bl	8005c68 <HAL_GetTick>
 80086ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	88fa      	ldrh	r2, [r7, #6]
 80086f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	88fa      	ldrh	r2, [r7, #6]
 80086fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008704:	d108      	bne.n	8008718 <HAL_UART_Transmit+0x82>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800870e:	2300      	movs	r3, #0
 8008710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	61bb      	str	r3, [r7, #24]
 8008716:	e003      	b.n	8008720 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800871c:	2300      	movs	r3, #0
 800871e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8008728:	e02a      	b.n	8008780 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2200      	movs	r2, #0
 8008732:	2180      	movs	r1, #128	@ 0x80
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f000 f840 	bl	80087ba <UART_WaitOnFlagUntilTimeout>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e036      	b.n	80087b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10b      	bne.n	8008762 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008758:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	3302      	adds	r3, #2
 800875e:	61bb      	str	r3, [r7, #24]
 8008760:	e007      	b.n	8008772 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	781a      	ldrb	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	3301      	adds	r3, #1
 8008770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b01      	subs	r3, #1
 800877a:	b29a      	uxth	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1cf      	bne.n	800872a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2200      	movs	r2, #0
 8008792:	2140      	movs	r1, #64	@ 0x40
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 f810 	bl	80087ba <UART_WaitOnFlagUntilTimeout>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e006      	b.n	80087b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	e000      	b.n	80087b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80087b0:	2302      	movs	r3, #2
  }
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3720      	adds	r7, #32
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b090      	sub	sp, #64	@ 0x40
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	603b      	str	r3, [r7, #0]
 80087c6:	4613      	mov	r3, r2
 80087c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ca:	e050      	b.n	800886e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d2:	d04c      	beq.n	800886e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80087d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <UART_WaitOnFlagUntilTimeout+0x30>
 80087da:	f7fd fa45 	bl	8005c68 <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d241      	bcs.n	800886e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	330c      	adds	r3, #12
 80087f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008800:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	330c      	adds	r3, #12
 8008808:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800880a:	637a      	str	r2, [r7, #52]	@ 0x34
 800880c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008810:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008812:	e841 2300 	strex	r3, r2, [r1]
 8008816:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1e5      	bne.n	80087ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	3314      	adds	r3, #20
 8008824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	e853 3f00 	ldrex	r3, [r3]
 800882c:	613b      	str	r3, [r7, #16]
   return(result);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f023 0301 	bic.w	r3, r3, #1
 8008834:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3314      	adds	r3, #20
 800883c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800883e:	623a      	str	r2, [r7, #32]
 8008840:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008842:	69f9      	ldr	r1, [r7, #28]
 8008844:	6a3a      	ldr	r2, [r7, #32]
 8008846:	e841 2300 	strex	r3, r2, [r1]
 800884a:	61bb      	str	r3, [r7, #24]
   return(result);
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e5      	bne.n	800881e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2220      	movs	r2, #32
 8008856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2220      	movs	r2, #32
 800885e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e00f      	b.n	800888e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	4013      	ands	r3, r2
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	429a      	cmp	r2, r3
 800887c:	bf0c      	ite	eq
 800887e:	2301      	moveq	r3, #1
 8008880:	2300      	movne	r3, #0
 8008882:	b2db      	uxtb	r3, r3
 8008884:	461a      	mov	r2, r3
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	429a      	cmp	r2, r3
 800888a:	d09f      	beq.n	80087cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3740      	adds	r7, #64	@ 0x40
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800889c:	b0c0      	sub	sp, #256	@ 0x100
 800889e:	af00      	add	r7, sp, #0
 80088a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80088b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b4:	68d9      	ldr	r1, [r3, #12]
 80088b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	ea40 0301 	orr.w	r3, r0, r1
 80088c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	431a      	orrs	r2, r3
 80088d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	431a      	orrs	r2, r3
 80088d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	4313      	orrs	r3, r2
 80088e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80088f0:	f021 010c 	bic.w	r1, r1, #12
 80088f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80088fe:	430b      	orrs	r3, r1
 8008900:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800890e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008912:	6999      	ldr	r1, [r3, #24]
 8008914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	ea40 0301 	orr.w	r3, r0, r1
 800891e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	4b8f      	ldr	r3, [pc, #572]	@ (8008b64 <UART_SetConfig+0x2cc>)
 8008928:	429a      	cmp	r2, r3
 800892a:	d005      	beq.n	8008938 <UART_SetConfig+0xa0>
 800892c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	4b8d      	ldr	r3, [pc, #564]	@ (8008b68 <UART_SetConfig+0x2d0>)
 8008934:	429a      	cmp	r2, r3
 8008936:	d104      	bne.n	8008942 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008938:	f7fe fe40 	bl	80075bc <HAL_RCC_GetPCLK2Freq>
 800893c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008940:	e003      	b.n	800894a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008942:	f7fe fe27 	bl	8007594 <HAL_RCC_GetPCLK1Freq>
 8008946:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800894a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008954:	f040 810c 	bne.w	8008b70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800895c:	2200      	movs	r2, #0
 800895e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008962:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008966:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800896a:	4622      	mov	r2, r4
 800896c:	462b      	mov	r3, r5
 800896e:	1891      	adds	r1, r2, r2
 8008970:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008972:	415b      	adcs	r3, r3
 8008974:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008976:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800897a:	4621      	mov	r1, r4
 800897c:	eb12 0801 	adds.w	r8, r2, r1
 8008980:	4629      	mov	r1, r5
 8008982:	eb43 0901 	adc.w	r9, r3, r1
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	f04f 0300 	mov.w	r3, #0
 800898e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800899a:	4690      	mov	r8, r2
 800899c:	4699      	mov	r9, r3
 800899e:	4623      	mov	r3, r4
 80089a0:	eb18 0303 	adds.w	r3, r8, r3
 80089a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089a8:	462b      	mov	r3, r5
 80089aa:	eb49 0303 	adc.w	r3, r9, r3
 80089ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80089c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80089c6:	460b      	mov	r3, r1
 80089c8:	18db      	adds	r3, r3, r3
 80089ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80089cc:	4613      	mov	r3, r2
 80089ce:	eb42 0303 	adc.w	r3, r2, r3
 80089d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80089d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80089d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80089dc:	f7f8 f8fc 	bl	8000bd8 <__aeabi_uldivmod>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4b61      	ldr	r3, [pc, #388]	@ (8008b6c <UART_SetConfig+0x2d4>)
 80089e6:	fba3 2302 	umull	r2, r3, r3, r2
 80089ea:	095b      	lsrs	r3, r3, #5
 80089ec:	011c      	lsls	r4, r3, #4
 80089ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089f2:	2200      	movs	r2, #0
 80089f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80089fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008a00:	4642      	mov	r2, r8
 8008a02:	464b      	mov	r3, r9
 8008a04:	1891      	adds	r1, r2, r2
 8008a06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008a08:	415b      	adcs	r3, r3
 8008a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a10:	4641      	mov	r1, r8
 8008a12:	eb12 0a01 	adds.w	sl, r2, r1
 8008a16:	4649      	mov	r1, r9
 8008a18:	eb43 0b01 	adc.w	fp, r3, r1
 8008a1c:	f04f 0200 	mov.w	r2, #0
 8008a20:	f04f 0300 	mov.w	r3, #0
 8008a24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a30:	4692      	mov	sl, r2
 8008a32:	469b      	mov	fp, r3
 8008a34:	4643      	mov	r3, r8
 8008a36:	eb1a 0303 	adds.w	r3, sl, r3
 8008a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a3e:	464b      	mov	r3, r9
 8008a40:	eb4b 0303 	adc.w	r3, fp, r3
 8008a44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008a58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	18db      	adds	r3, r3, r3
 8008a60:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a62:	4613      	mov	r3, r2
 8008a64:	eb42 0303 	adc.w	r3, r2, r3
 8008a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008a72:	f7f8 f8b1 	bl	8000bd8 <__aeabi_uldivmod>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8008b6c <UART_SetConfig+0x2d4>)
 8008a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8008a82:	095b      	lsrs	r3, r3, #5
 8008a84:	2264      	movs	r2, #100	@ 0x64
 8008a86:	fb02 f303 	mul.w	r3, r2, r3
 8008a8a:	1acb      	subs	r3, r1, r3
 8008a8c:	00db      	lsls	r3, r3, #3
 8008a8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008a92:	4b36      	ldr	r3, [pc, #216]	@ (8008b6c <UART_SetConfig+0x2d4>)
 8008a94:	fba3 2302 	umull	r2, r3, r3, r2
 8008a98:	095b      	lsrs	r3, r3, #5
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008aa0:	441c      	add	r4, r3
 8008aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008aac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008ab0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008ab4:	4642      	mov	r2, r8
 8008ab6:	464b      	mov	r3, r9
 8008ab8:	1891      	adds	r1, r2, r2
 8008aba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008abc:	415b      	adcs	r3, r3
 8008abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ac0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ac4:	4641      	mov	r1, r8
 8008ac6:	1851      	adds	r1, r2, r1
 8008ac8:	6339      	str	r1, [r7, #48]	@ 0x30
 8008aca:	4649      	mov	r1, r9
 8008acc:	414b      	adcs	r3, r1
 8008ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad0:	f04f 0200 	mov.w	r2, #0
 8008ad4:	f04f 0300 	mov.w	r3, #0
 8008ad8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008adc:	4659      	mov	r1, fp
 8008ade:	00cb      	lsls	r3, r1, #3
 8008ae0:	4651      	mov	r1, sl
 8008ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ae6:	4651      	mov	r1, sl
 8008ae8:	00ca      	lsls	r2, r1, #3
 8008aea:	4610      	mov	r0, r2
 8008aec:	4619      	mov	r1, r3
 8008aee:	4603      	mov	r3, r0
 8008af0:	4642      	mov	r2, r8
 8008af2:	189b      	adds	r3, r3, r2
 8008af4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008af8:	464b      	mov	r3, r9
 8008afa:	460a      	mov	r2, r1
 8008afc:	eb42 0303 	adc.w	r3, r2, r3
 8008b00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008b10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008b14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008b18:	460b      	mov	r3, r1
 8008b1a:	18db      	adds	r3, r3, r3
 8008b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b1e:	4613      	mov	r3, r2
 8008b20:	eb42 0303 	adc.w	r3, r2, r3
 8008b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008b2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008b2e:	f7f8 f853 	bl	8000bd8 <__aeabi_uldivmod>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	4b0d      	ldr	r3, [pc, #52]	@ (8008b6c <UART_SetConfig+0x2d4>)
 8008b38:	fba3 1302 	umull	r1, r3, r3, r2
 8008b3c:	095b      	lsrs	r3, r3, #5
 8008b3e:	2164      	movs	r1, #100	@ 0x64
 8008b40:	fb01 f303 	mul.w	r3, r1, r3
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	00db      	lsls	r3, r3, #3
 8008b48:	3332      	adds	r3, #50	@ 0x32
 8008b4a:	4a08      	ldr	r2, [pc, #32]	@ (8008b6c <UART_SetConfig+0x2d4>)
 8008b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b50:	095b      	lsrs	r3, r3, #5
 8008b52:	f003 0207 	and.w	r2, r3, #7
 8008b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4422      	add	r2, r4
 8008b5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b60:	e106      	b.n	8008d70 <UART_SetConfig+0x4d8>
 8008b62:	bf00      	nop
 8008b64:	40011000 	.word	0x40011000
 8008b68:	40011400 	.word	0x40011400
 8008b6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008b7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008b82:	4642      	mov	r2, r8
 8008b84:	464b      	mov	r3, r9
 8008b86:	1891      	adds	r1, r2, r2
 8008b88:	6239      	str	r1, [r7, #32]
 8008b8a:	415b      	adcs	r3, r3
 8008b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b92:	4641      	mov	r1, r8
 8008b94:	1854      	adds	r4, r2, r1
 8008b96:	4649      	mov	r1, r9
 8008b98:	eb43 0501 	adc.w	r5, r3, r1
 8008b9c:	f04f 0200 	mov.w	r2, #0
 8008ba0:	f04f 0300 	mov.w	r3, #0
 8008ba4:	00eb      	lsls	r3, r5, #3
 8008ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008baa:	00e2      	lsls	r2, r4, #3
 8008bac:	4614      	mov	r4, r2
 8008bae:	461d      	mov	r5, r3
 8008bb0:	4643      	mov	r3, r8
 8008bb2:	18e3      	adds	r3, r4, r3
 8008bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008bb8:	464b      	mov	r3, r9
 8008bba:	eb45 0303 	adc.w	r3, r5, r3
 8008bbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008bd2:	f04f 0200 	mov.w	r2, #0
 8008bd6:	f04f 0300 	mov.w	r3, #0
 8008bda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008bde:	4629      	mov	r1, r5
 8008be0:	008b      	lsls	r3, r1, #2
 8008be2:	4621      	mov	r1, r4
 8008be4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008be8:	4621      	mov	r1, r4
 8008bea:	008a      	lsls	r2, r1, #2
 8008bec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008bf0:	f7f7 fff2 	bl	8000bd8 <__aeabi_uldivmod>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4b60      	ldr	r3, [pc, #384]	@ (8008d7c <UART_SetConfig+0x4e4>)
 8008bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8008bfe:	095b      	lsrs	r3, r3, #5
 8008c00:	011c      	lsls	r4, r3, #4
 8008c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c06:	2200      	movs	r2, #0
 8008c08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008c10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008c14:	4642      	mov	r2, r8
 8008c16:	464b      	mov	r3, r9
 8008c18:	1891      	adds	r1, r2, r2
 8008c1a:	61b9      	str	r1, [r7, #24]
 8008c1c:	415b      	adcs	r3, r3
 8008c1e:	61fb      	str	r3, [r7, #28]
 8008c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c24:	4641      	mov	r1, r8
 8008c26:	1851      	adds	r1, r2, r1
 8008c28:	6139      	str	r1, [r7, #16]
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	414b      	adcs	r3, r1
 8008c2e:	617b      	str	r3, [r7, #20]
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	00cb      	lsls	r3, r1, #3
 8008c40:	4651      	mov	r1, sl
 8008c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c46:	4651      	mov	r1, sl
 8008c48:	00ca      	lsls	r2, r1, #3
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	4603      	mov	r3, r0
 8008c50:	4642      	mov	r2, r8
 8008c52:	189b      	adds	r3, r3, r2
 8008c54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c58:	464b      	mov	r3, r9
 8008c5a:	460a      	mov	r2, r1
 8008c5c:	eb42 0303 	adc.w	r3, r2, r3
 8008c60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008c70:	f04f 0200 	mov.w	r2, #0
 8008c74:	f04f 0300 	mov.w	r3, #0
 8008c78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008c7c:	4649      	mov	r1, r9
 8008c7e:	008b      	lsls	r3, r1, #2
 8008c80:	4641      	mov	r1, r8
 8008c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c86:	4641      	mov	r1, r8
 8008c88:	008a      	lsls	r2, r1, #2
 8008c8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c8e:	f7f7 ffa3 	bl	8000bd8 <__aeabi_uldivmod>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	4611      	mov	r1, r2
 8008c98:	4b38      	ldr	r3, [pc, #224]	@ (8008d7c <UART_SetConfig+0x4e4>)
 8008c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8008c9e:	095b      	lsrs	r3, r3, #5
 8008ca0:	2264      	movs	r2, #100	@ 0x64
 8008ca2:	fb02 f303 	mul.w	r3, r2, r3
 8008ca6:	1acb      	subs	r3, r1, r3
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	3332      	adds	r3, #50	@ 0x32
 8008cac:	4a33      	ldr	r2, [pc, #204]	@ (8008d7c <UART_SetConfig+0x4e4>)
 8008cae:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb2:	095b      	lsrs	r3, r3, #5
 8008cb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008cb8:	441c      	add	r4, r3
 8008cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008cc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8008cc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008cc8:	4642      	mov	r2, r8
 8008cca:	464b      	mov	r3, r9
 8008ccc:	1891      	adds	r1, r2, r2
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	415b      	adcs	r3, r3
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cd8:	4641      	mov	r1, r8
 8008cda:	1851      	adds	r1, r2, r1
 8008cdc:	6039      	str	r1, [r7, #0]
 8008cde:	4649      	mov	r1, r9
 8008ce0:	414b      	adcs	r3, r1
 8008ce2:	607b      	str	r3, [r7, #4]
 8008ce4:	f04f 0200 	mov.w	r2, #0
 8008ce8:	f04f 0300 	mov.w	r3, #0
 8008cec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008cf0:	4659      	mov	r1, fp
 8008cf2:	00cb      	lsls	r3, r1, #3
 8008cf4:	4651      	mov	r1, sl
 8008cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cfa:	4651      	mov	r1, sl
 8008cfc:	00ca      	lsls	r2, r1, #3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	4619      	mov	r1, r3
 8008d02:	4603      	mov	r3, r0
 8008d04:	4642      	mov	r2, r8
 8008d06:	189b      	adds	r3, r3, r2
 8008d08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	460a      	mov	r2, r1
 8008d0e:	eb42 0303 	adc.w	r3, r2, r3
 8008d12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	f04f 0300 	mov.w	r3, #0
 8008d28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	008b      	lsls	r3, r1, #2
 8008d30:	4641      	mov	r1, r8
 8008d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d36:	4641      	mov	r1, r8
 8008d38:	008a      	lsls	r2, r1, #2
 8008d3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d3e:	f7f7 ff4b 	bl	8000bd8 <__aeabi_uldivmod>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4b0d      	ldr	r3, [pc, #52]	@ (8008d7c <UART_SetConfig+0x4e4>)
 8008d48:	fba3 1302 	umull	r1, r3, r3, r2
 8008d4c:	095b      	lsrs	r3, r3, #5
 8008d4e:	2164      	movs	r1, #100	@ 0x64
 8008d50:	fb01 f303 	mul.w	r3, r1, r3
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	011b      	lsls	r3, r3, #4
 8008d58:	3332      	adds	r3, #50	@ 0x32
 8008d5a:	4a08      	ldr	r2, [pc, #32]	@ (8008d7c <UART_SetConfig+0x4e4>)
 8008d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d60:	095b      	lsrs	r3, r3, #5
 8008d62:	f003 020f 	and.w	r2, r3, #15
 8008d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4422      	add	r2, r4
 8008d6e:	609a      	str	r2, [r3, #8]
}
 8008d70:	bf00      	nop
 8008d72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008d76:	46bd      	mov	sp, r7
 8008d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d7c:	51eb851f 	.word	0x51eb851f

08008d80 <uint32_identity>:
{
  return x;
}

static inline uint32_t uint32_identity(uint32_t x)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  return x;
 8008d88:	687b      	ldr	r3, [r7, #4]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <sl_wfx_reg_read_16>:
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length);

sl_status_t sl_wfx_reg_read_16(sl_wfx_register_address_t address, uint16_t *value_out)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	6039      	str	r1, [r7, #0]
 8008da0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp[4];
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, tmp, sizeof(tmp));
 8008da2:	f107 0208 	add.w	r2, r7, #8
 8008da6:	79f9      	ldrb	r1, [r7, #7]
 8008da8:	2304      	movs	r3, #4
 8008daa:	2002      	movs	r0, #2
 8008dac:	f000 f8f6 	bl	8008f9c <sl_wfx_bus_access>
 8008db0:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_unpack_16bit_little_endian(tmp);
 8008db2:	7a3b      	ldrb	r3, [r7, #8]
 8008db4:	461a      	mov	r2, r3
 8008db6:	7a7b      	ldrb	r3, [r7, #9]
 8008db8:	021b      	lsls	r3, r3, #8
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	801a      	strh	r2, [r3, #0]
                  address,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <sl_wfx_reg_write_16>:

sl_status_t sl_wfx_reg_write_16(sl_wfx_register_address_t address, uint16_t value_in)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	460a      	mov	r2, r1
 8008dd8:	71fb      	strb	r3, [r7, #7]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	80bb      	strh	r3, [r7, #4]
                  address,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  sl_wfx_pack_16bit_little_endian(tmp, value_in);
 8008dde:	88bb      	ldrh	r3, [r7, #4]
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	733b      	strb	r3, [r7, #12]
 8008de4:	88bb      	ldrh	r3, [r7, #4]
 8008de6:	0a1b      	lsrs	r3, r3, #8
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	737b      	strb	r3, [r7, #13]
  tmp[2] = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	73bb      	strb	r3, [r7, #14]
  tmp[3] = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, tmp, sizeof(tmp));
 8008df6:	f107 020c 	add.w	r2, r7, #12
 8008dfa:	79f9      	ldrb	r1, [r7, #7]
 8008dfc:	2304      	movs	r3, #4
 8008dfe:	2001      	movs	r0, #1
 8008e00:	f000 f8cc 	bl	8008f9c <sl_wfx_bus_access>
 8008e04:	4603      	mov	r3, r0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <sl_wfx_reg_read_32>:

sl_status_t sl_wfx_reg_read_32(sl_wfx_register_address_t address, uint32_t *value_out)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b084      	sub	sp, #16
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	4603      	mov	r3, r0
 8008e16:	6039      	str	r1, [r7, #0]
 8008e18:	71fb      	strb	r3, [r7, #7]
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, value_out, sizeof(*value_out));
 8008e1a:	79f9      	ldrb	r1, [r7, #7]
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	2002      	movs	r0, #2
 8008e22:	f000 f8bb 	bl	8008f9c <sl_wfx_bus_access>
 8008e26:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_htole32(*value_out);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7ff ffa7 	bl	8008d80 <uint32_identity>
 8008e32:	4602      	mov	r2, r0
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	601a      	str	r2, [r3, #0]
                  (*value_out >> 16) & 0xFF,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 8008e38:	68fb      	ldr	r3, [r7, #12]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <sl_wfx_reg_write_32>:

sl_status_t sl_wfx_reg_write_32(sl_wfx_register_address_t address, uint32_t value_in)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b082      	sub	sp, #8
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	4603      	mov	r3, r0
 8008e4a:	6039      	str	r1, [r7, #0]
 8008e4c:	71fb      	strb	r3, [r7, #7]
                  (value_in >> 16) & 0xFF,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  value_in = sl_wfx_htole32(value_in);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7ff ff95 	bl	8008d80 <uint32_identity>
 8008e56:	4603      	mov	r3, r0
 8008e58:	603b      	str	r3, [r7, #0]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, &value_in, sizeof(value_in));
 8008e5a:	463a      	mov	r2, r7
 8008e5c:	79f9      	ldrb	r1, [r7, #7]
 8008e5e:	2304      	movs	r3, #4
 8008e60:	2001      	movs	r0, #1
 8008e62:	f000 f89b 	bl	8008f9c <sl_wfx_bus_access>
 8008e66:	4603      	mov	r3, r0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <sl_wfx_data_read>:

sl_status_t sl_wfx_data_read(void *buffer, uint32_t length)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_bus_access(SL_WFX_BUS_READ, SL_WFX_IN_OUT_QUEUE_REG_ID, buffer, length);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	2102      	movs	r1, #2
 8008e80:	2002      	movs	r0, #2
 8008e82:	f000 f88b 	bl	8008f9c <sl_wfx_bus_access>
 8008e86:	60f8      	str	r0, [r7, #12]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  return result;
 8008e88:	68fb      	ldr	r3, [r7, #12]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <sl_wfx_data_write>:

sl_status_t sl_wfx_data_write(const void *buffer, uint32_t length)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_IN_OUT_QUEUE_REG_ID, (void*) buffer, length);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	2102      	movs	r1, #2
 8008ea2:	2001      	movs	r0, #1
 8008ea4:	f000 f87a 	bl	8008f9c <sl_wfx_bus_access>
 8008ea8:	60f8      	str	r0, [r7, #12]

  return result;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <sl_wfx_apb_write>:

sl_status_t sl_wfx_apb_write(uint32_t address, const void *buffer, uint32_t length)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
  sl_status_t result;
  if (length / 2 >= 0x1000) {
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ec6:	d301      	bcc.n	8008ecc <sl_wfx_apb_write+0x18>
    return SL_STATUS_INVALID_PARAMETER;
 8008ec8:	2321      	movs	r3, #33	@ 0x21
 8008eca:	e00f      	b.n	8008eec <sl_wfx_apb_write+0x38>
  }

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 8008ecc:	68f9      	ldr	r1, [r7, #12]
 8008ece:	2004      	movs	r0, #4
 8008ed0:	f7ff ffb7 	bl	8008e42 <sl_wfx_reg_write_32>
 8008ed4:	6178      	str	r0, [r7, #20]

  if (result == SL_STATUS_OK) {
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <sl_wfx_apb_write+0x36>
    result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_SRAM_DPORT_REG_ID, (void*) buffer, length);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	2105      	movs	r1, #5
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	f000 f85a 	bl	8008f9c <sl_wfx_bus_access>
 8008ee8:	6178      	str	r0, [r7, #20]
  }

  return result;
 8008eea:	697b      	ldr	r3, [r7, #20]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <sl_wfx_apb_write_32>:

sl_status_t sl_wfx_apb_write_32(uint32_t address, uint32_t value_in)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	2004      	movs	r0, #4
 8008f02:	f7ff ff9e 	bl	8008e42 <sl_wfx_reg_write_32>
 8008f06:	60f8      	str	r0, [r7, #12]

  if (result == SL_STATUS_OK) {
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d104      	bne.n	8008f18 <sl_wfx_apb_write_32+0x24>
    result = sl_wfx_reg_write_32(SL_WFX_SRAM_DPORT_REG_ID, value_in);
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	2005      	movs	r0, #5
 8008f12:	f7ff ff96 	bl	8008e42 <sl_wfx_reg_write_32>
 8008f16:	60f8      	str	r0, [r7, #12]
  }

  return result;
 8008f18:	68fb      	ldr	r3, [r7, #12]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <sl_wfx_apb_read_32>:

sl_status_t sl_wfx_apb_read_32(uint32_t address, uint32_t *value_out)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b086      	sub	sp, #24
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
  uint32_t value32;
  sl_status_t result;

  // write address
  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	2004      	movs	r0, #4
 8008f30:	f7ff ff87 	bl	8008e42 <sl_wfx_reg_write_32>
 8008f34:	6138      	str	r0, [r7, #16]

  // set the "prefetch" bit
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8008f36:	f107 030c 	add.w	r3, r7, #12
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	f7ff ff66 	bl	8008e0e <sl_wfx_reg_read_32>
 8008f42:	6138      	str	r0, [r7, #16]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32 | CONFIG_PREFETCH_BIT);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	f7ff ff78 	bl	8008e42 <sl_wfx_reg_write_32>
 8008f52:	6138      	str	r0, [r7, #16]

  // and wait for the prefetch bit to clear
  for (uint32_t i = 0; i < 20; i++) {
 8008f54:	2300      	movs	r3, #0
 8008f56:	617b      	str	r3, [r7, #20]
 8008f58:	e011      	b.n	8008f7e <sl_wfx_apb_read_32+0x5c>
    result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8008f5a:	f107 030c 	add.w	r3, r7, #12
 8008f5e:	4619      	mov	r1, r3
 8008f60:	2000      	movs	r0, #0
 8008f62:	f7ff ff54 	bl	8008e0e <sl_wfx_reg_read_32>
 8008f66:	6138      	str	r0, [r7, #16]
    if ((value32 & CONFIG_PREFETCH_BIT) == 0) {
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d009      	beq.n	8008f86 <sl_wfx_apb_read_32+0x64>
      break;
    }

    sl_wfx_host_wait(1);
 8008f72:	2001      	movs	r0, #1
 8008f74:	f001 fadc 	bl	800a530 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 20; i++) {
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	2b13      	cmp	r3, #19
 8008f82:	d9ea      	bls.n	8008f5a <sl_wfx_apb_read_32+0x38>
 8008f84:	e000      	b.n	8008f88 <sl_wfx_apb_read_32+0x66>
      break;
 8008f86:	bf00      	nop
  }

  // and data is ready
  result = sl_wfx_reg_read_32(SL_WFX_SRAM_DPORT_REG_ID, value_out);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	2005      	movs	r0, #5
 8008f8c:	f7ff ff3f 	bl	8008e0e <sl_wfx_reg_read_32>
 8008f90:	6138      	str	r0, [r7, #16]

  return result;
 8008f92:	693b      	ldr	r3, [r7, #16]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3718      	adds	r7, #24
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <sl_wfx_bus_access>:

static sl_status_t sl_wfx_bus_access(sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60ba      	str	r2, [r7, #8]
 8008fa4:	607b      	str	r3, [r7, #4]
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	73fb      	strb	r3, [r7, #15]
 8008faa:	460b      	mov	r3, r1
 8008fac:	73bb      	strb	r3, [r7, #14]
  sl_status_t result;

  /* If the WFx is sleeping, wake it up */
  if (sl_wfx_context->state & SL_WFX_SLEEPING) {
 8008fae:	4b43      	ldr	r3, [pc, #268]	@ (80090bc <sl_wfx_bus_access+0x120>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 8008fb6:	f003 0308 	and.w	r3, r3, #8
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d01a      	beq.n	8008ff4 <sl_wfx_bus_access+0x58>
    result = sl_wfx_host_set_wake_up_pin(1);
 8008fbe:	2001      	movs	r0, #1
 8008fc0:	f001 fa30 	bl	800a424 <sl_wfx_host_set_wake_up_pin>
 8008fc4:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d171      	bne.n	80090b0 <sl_wfx_bus_access+0x114>
    /* If the command is of read type, consider the WFx awake */
    if (type == SL_WFX_BUS_WRITE) {
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d105      	bne.n	8008fde <sl_wfx_bus_access+0x42>
      result = sl_wfx_host_wait_for_wake_up();
 8008fd2:	f001 fa43 	bl	800a45c <sl_wfx_host_wait_for_wake_up>
 8008fd6:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d168      	bne.n	80090b0 <sl_wfx_bus_access+0x114>
    }
    sl_wfx_context->state &= ~SL_WFX_SLEEPING;
 8008fde:	4b37      	ldr	r3, [pc, #220]	@ (80090bc <sl_wfx_bus_access+0x120>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 8008fe6:	4b35      	ldr	r3, [pc, #212]	@ (80090bc <sl_wfx_bus_access+0x120>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 0208 	bic.w	r2, r2, #8
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    sl_wfx_host_log("WFx awake\r\n");
#endif
  }

  /* Send the communication on the bus */
  if (type == SL_WFX_BUS_READ) {
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d107      	bne.n	800900a <sl_wfx_bus_access+0x6e>
    result = sl_wfx_reg_read(address, buffer, length);
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	68b9      	ldr	r1, [r7, #8]
 8009000:	4618      	mov	r0, r3
 8009002:	f000 f85d 	bl	80090c0 <sl_wfx_reg_read>
 8009006:	6178      	str	r0, [r7, #20]
 8009008:	e00c      	b.n	8009024 <sl_wfx_bus_access+0x88>
  } else if (type == SL_WFX_BUS_WRITE) {
 800900a:	7bfb      	ldrb	r3, [r7, #15]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d107      	bne.n	8009020 <sl_wfx_bus_access+0x84>
    result = sl_wfx_reg_write(address, buffer, length);
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 f89e 	bl	8009158 <sl_wfx_reg_write>
 800901c:	6178      	str	r0, [r7, #20]
 800901e:	e001      	b.n	8009024 <sl_wfx_bus_access+0x88>
  } else {
    result = SL_STATUS_INVALID_PARAMETER;
 8009020:	2321      	movs	r3, #33	@ 0x21
 8009022:	617b      	str	r3, [r7, #20]
  }
  SL_WFX_ERROR_CHECK(result);
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d142      	bne.n	80090b0 <sl_wfx_bus_access+0x114>

  /* If the power save is active and there is no confirmation pending, put
     the WFx back to sleep */
  if ((sl_wfx_context->state & SL_WFX_POWER_SAVE_ACTIVE)
 800902a:	4b24      	ldr	r3, [pc, #144]	@ (80090bc <sl_wfx_bus_access+0x120>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 8009032:	f003 0310 	and.w	r3, r3, #16
 8009036:	2b00      	cmp	r3, #0
 8009038:	d039      	beq.n	80090ae <sl_wfx_bus_access+0x112>
      && (type == SL_WFX_BUS_READ)
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	2b02      	cmp	r3, #2
 800903e:	d136      	bne.n	80090ae <sl_wfx_bus_access+0x112>
      && ((address != SL_WFX_CONTROL_REG_ID)
 8009040:	7bbb      	ldrb	r3, [r7, #14]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d108      	bne.n	8009058 <sl_wfx_bus_access+0xbc>
          || ((address == SL_WFX_CONTROL_REG_ID) && ((*(uint16_t *)buffer & SL_WFX_CONT_NEXT_LEN_MASK) == 0)))
 8009046:	7bbb      	ldrb	r3, [r7, #14]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d130      	bne.n	80090ae <sl_wfx_bus_access+0x112>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009054:	2b00      	cmp	r3, #0
 8009056:	d12a      	bne.n	80090ae <sl_wfx_bus_access+0x112>
      && (sl_wfx_context->used_buffers <= 1)
 8009058:	4b18      	ldr	r3, [pc, #96]	@ (80090bc <sl_wfx_bus_access+0x120>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8009060:	2b01      	cmp	r3, #1
 8009062:	d824      	bhi.n	80090ae <sl_wfx_bus_access+0x112>
      && ((*((uint16_t *)((uint8_t *)buffer + length - SL_WFX_CONT_REGISTER_SIZE)) & SL_WFX_CONT_NEXT_LEN_MASK) == 0)) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	3b02      	subs	r3, #2
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	4413      	add	r3, r2
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009072:	2b00      	cmp	r3, #0
 8009074:	d11b      	bne.n	80090ae <sl_wfx_bus_access+0x112>
    /* Ask the host opinion on whether the WFx should be put back to sleep or
       not*/
    if (sl_wfx_host_sleep_grant(type, address, length) == SL_STATUS_WIFI_SLEEP_GRANTED) {
 8009076:	7bb9      	ldrb	r1, [r7, #14]
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	4618      	mov	r0, r3
 800907e:	f001 fa01 	bl	800a484 <sl_wfx_host_sleep_grant>
 8009082:	4603      	mov	r3, r0
 8009084:	f640 3208 	movw	r2, #2824	@ 0xb08
 8009088:	4293      	cmp	r3, r2
 800908a:	d110      	bne.n	80090ae <sl_wfx_bus_access+0x112>
      sl_wfx_context->state |= SL_WFX_SLEEPING;
 800908c:	4b0b      	ldr	r3, [pc, #44]	@ (80090bc <sl_wfx_bus_access+0x120>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 8009094:	4b09      	ldr	r3, [pc, #36]	@ (80090bc <sl_wfx_bus_access+0x120>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0208 	orr.w	r2, r2, #8
 800909c:	b2d2      	uxtb	r2, r2
 800909e:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
      result = sl_wfx_host_set_wake_up_pin(0);
 80090a2:	2000      	movs	r0, #0
 80090a4:	f001 f9be 	bl	800a424 <sl_wfx_host_set_wake_up_pin>
 80090a8:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
      sl_wfx_host_log("WFx sleeping\r\n");
#endif
    }
  }

  error_handler:
 80090ae:	bf00      	nop
  return result;
 80090b0:	697b      	ldr	r3, [r7, #20]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3718      	adds	r7, #24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000a6c 	.word	0x20000a6c

080090c0 <sl_wfx_reg_read>:

#define SET_WRITE 0x7FFF /* usage: and operation */
#define SET_READ 0x8000  /* usage: or operation */

sl_status_t sl_wfx_reg_read(sl_wfx_register_address_t address, void *buffer, uint32_t length)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b08a      	sub	sp, #40	@ 0x28
 80090c4:	af02      	add	r7, sp, #8
 80090c6:	4603      	mov	r3, r0
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	73fb      	strb	r3, [r7, #15]
  uint16_t header = SET_READ | (address << 12) | (length / 2);
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	031b      	lsls	r3, r3, #12
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	085b      	lsrs	r3, r3, #1
 80090da:	b29b      	uxth	r3, r3
 80090dc:	4313      	orrs	r3, r2
 80090de:	b29b      	uxth	r3, r3
 80090e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e8:	83fb      	strh	r3, [r7, #30]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 80090ea:	8bfb      	ldrh	r3, [r7, #30]
 80090ec:	0a1b      	lsrs	r3, r3, #8
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	753b      	strb	r3, [r7, #20]
 80090f4:	8bfb      	ldrh	r3, [r7, #30]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 80090fa:	f002 f80f 	bl	800b11c <sl_wfx_host_spi_cs_assert>
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_READ, header_as_bytes, 2, (uint8_t *)buffer, length);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	b29b      	uxth	r3, r3
 8009102:	f107 0114 	add.w	r1, r7, #20
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2202      	movs	r2, #2
 800910c:	2002      	movs	r0, #2
 800910e:	f002 f81d 	bl	800b14c <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 8009112:	f002 f80f 	bl	800b134 <sl_wfx_host_spi_cs_deassert>

  if (address == SL_WFX_CONFIG_REG_ID) {
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d118      	bne.n	800914e <sl_wfx_reg_read+0x8e>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	61bb      	str	r3, [r7, #24]
    uint8_t byte_swap = tmp[0];
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	75fb      	strb	r3, [r7, #23]
    tmp[0] = tmp[1];
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	785a      	ldrb	r2, [r3, #1]
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	3301      	adds	r3, #1
 8009132:	7dfa      	ldrb	r2, [r7, #23]
 8009134:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	789b      	ldrb	r3, [r3, #2]
 800913a:	75fb      	strb	r3, [r7, #23]
    tmp[2] = tmp[3];
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	3302      	adds	r3, #2
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	78d2      	ldrb	r2, [r2, #3]
 8009144:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	3303      	adds	r3, #3
 800914a:	7dfa      	ldrb	r2, [r7, #23]
 800914c:	701a      	strb	r2, [r3, #0]
  }

  return SL_STATUS_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3720      	adds	r7, #32
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <sl_wfx_reg_write>:

sl_status_t sl_wfx_reg_write(sl_wfx_register_address_t address, const void *buffer, uint32_t length)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08a      	sub	sp, #40	@ 0x28
 800915c:	af02      	add	r7, sp, #8
 800915e:	4603      	mov	r3, r0
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	73fb      	strb	r3, [r7, #15]
  if (address == SL_WFX_CONFIG_REG_ID) {
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d118      	bne.n	800919e <sl_wfx_reg_write+0x46>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	61fb      	str	r3, [r7, #28]
    uint8_t byte_swap = tmp[0];
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	76fb      	strb	r3, [r7, #27]
    tmp[0] = tmp[1];
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	785a      	ldrb	r2, [r3, #1]
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	3301      	adds	r3, #1
 8009182:	7efa      	ldrb	r2, [r7, #27]
 8009184:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	789b      	ldrb	r3, [r3, #2]
 800918a:	76fb      	strb	r3, [r7, #27]
    tmp[2] = tmp[3];
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	3302      	adds	r3, #2
 8009190:	69fa      	ldr	r2, [r7, #28]
 8009192:	78d2      	ldrb	r2, [r2, #3]
 8009194:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	3303      	adds	r3, #3
 800919a:	7efa      	ldrb	r2, [r7, #27]
 800919c:	701a      	strb	r2, [r3, #0]
  }

  uint16_t header = /* write flag = 0*/ (address << 12) | (length / 2);
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	031b      	lsls	r3, r3, #12
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	085b      	lsrs	r3, r3, #1
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	4313      	orrs	r3, r2
 80091ae:	833b      	strh	r3, [r7, #24]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 80091b0:	8b3b      	ldrh	r3, [r7, #24]
 80091b2:	0a1b      	lsrs	r3, r3, #8
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	753b      	strb	r3, [r7, #20]
 80091ba:	8b3b      	ldrh	r3, [r7, #24]
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 80091c0:	f001 ffac 	bl	800b11c <sl_wfx_host_spi_cs_assert>
  /* Note: sl_wfx_host_spi_transfer_no_cs_assert() does not modify the buffer when doing SL_WFX_BUS_WRITE */
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_WRITE, header_as_bytes, 2, (uint8_t *)buffer, length);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	f107 0114 	add.w	r1, r7, #20
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2202      	movs	r2, #2
 80091d2:	2001      	movs	r0, #1
 80091d4:	f001 ffba 	bl	800b14c <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 80091d8:	f001 ffac 	bl	800b134 <sl_wfx_host_spi_cs_deassert>

  return SL_STATUS_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3720      	adds	r7, #32
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <sl_wfx_init_bus>:

sl_status_t sl_wfx_init_bus(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
  sl_status_t status;
  uint32_t value32;

  status = sl_wfx_host_init_bus();
 80091ee:	f001 ff6f 	bl	800b0d0 <sl_wfx_host_init_bus>
 80091f2:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d12b      	bne.n	8009252 <sl_wfx_init_bus+0x6a>

  sl_wfx_host_reset_chip();
 80091fa:	f001 f8fb 	bl	800a3f4 <sl_wfx_host_reset_chip>

  status = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80091fe:	463b      	mov	r3, r7
 8009200:	4619      	mov	r1, r3
 8009202:	2000      	movs	r0, #0
 8009204:	f7ff fe03 	bl	8008e0e <sl_wfx_reg_read_32>
 8009208:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d120      	bne.n	8009252 <sl_wfx_init_bus+0x6a>

  if (value32 == 0 || value32 == 0xFFFFFFFF) {
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <sl_wfx_init_bus+0x36>
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921c:	d104      	bne.n	8009228 <sl_wfx_init_bus+0x40>
    status = SL_STATUS_FAIL;
 800921e:	2301      	movs	r3, #1
 8009220:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(status);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d114      	bne.n	8009252 <sl_wfx_init_bus+0x6a>
  }

  // setting up "word mode = b10", this means that data on SPI bus
  // is sent as B0, B1, B2, B3 , ....
  value32 &= ~SL_WFX_CONFIG_WORD_MODE_BITS;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800922e:	603b      	str	r3, [r7, #0]
  value32 |= SL_WFX_CONFIG_WORD_MODE_2;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009236:	603b      	str	r3, [r7, #0]

  /* Write CONFIG Register to configure SPI clock edge to support high frequency*/
  value32 |= 0x04045400;
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	4b08      	ldr	r3, [pc, #32]	@ (800925c <sl_wfx_init_bus+0x74>)
 800923c:	4313      	orrs	r3, r2
 800923e:	603b      	str	r3, [r7, #0]

  status = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	4619      	mov	r1, r3
 8009244:	2000      	movs	r0, #0
 8009246:	f7ff fdfc 	bl	8008e42 <sl_wfx_reg_write_32>
 800924a:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0

  error_handler:
 8009250:	bf00      	nop
  return status;
 8009252:	687b      	ldr	r3, [r7, #4]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	04045400 	.word	0x04045400

08009260 <sl_wfx_deinit_bus>:

sl_status_t sl_wfx_deinit_bus(void)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
  return sl_wfx_host_deinit_bus();
 8009264:	f001 ff4c 	bl	800b100 <sl_wfx_host_deinit_bus>
 8009268:	4603      	mov	r3, r0
}
 800926a:	4618      	mov	r0, r3
 800926c:	bd80      	pop	{r7, pc}

0800926e <uint16_identity>:
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	4603      	mov	r3, r0
 8009276:	80fb      	strh	r3, [r7, #6]
  return x;
 8009278:	88fb      	ldrh	r3, [r7, #6]
}
 800927a:	4618      	mov	r0, r3
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <uint32_identity>:
{
 8009286:	b480      	push	{r7}
 8009288:	b083      	sub	sp, #12
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  return x;
 800928e:	687b      	ldr	r3, [r7, #4]
}
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <sl_wfx_init>:
 * SL_STATUS_FAIL otherwise
 *
 * @note Actions performed by sl_wfx_init(): Reset -> load firmware -> send PDS
 *****************************************************************************/
sl_status_t sl_wfx_init(sl_wfx_context_t *context)
{
 800929c:	b590      	push	{r4, r7, lr}
 800929e:	b089      	sub	sp, #36	@ 0x24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  const char           *pds_data;
#ifdef SL_WFX_USE_SECURE_LINK
  sl_wfx_secure_link_mode_t link_mode;
#endif

  memset(context, 0, sizeof(*context) );
 80092a4:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80092a8:	2100      	movs	r1, #0
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f013 fc22 	bl	801caf4 <memset>

  sl_wfx_context = context;
 80092b0:	4a5f      	ldr	r2, [pc, #380]	@ (8009430 <sl_wfx_init+0x194>)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6013      	str	r3, [r2, #0]
  sl_wfx_context->used_buffers = 0;
 80092b6:	4b5e      	ldr	r3, [pc, #376]	@ (8009430 <sl_wfx_init+0x194>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206

  result = sl_wfx_init_bus(  );
 80092c0:	f7ff ff92 	bl	80091e8 <sl_wfx_init_bus>
 80092c4:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f040 80a2 	bne.w	8009412 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bus initialized--\r\n");
#endif

  result = sl_wfx_init_chip( );
 80092ce:	f000 fbf3 	bl	8009ab8 <sl_wfx_init_chip>
 80092d2:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f040 809b 	bne.w	8009412 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Chip initialized--\r\n");
#endif

  result = sl_wfx_download_run_bootloader();
 80092dc:	f000 fc80 	bl	8009be0 <sl_wfx_download_run_bootloader>
 80092e0:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f040 8094 	bne.w	8009412 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bootloader running--\r\n");
#endif

  result = sl_wfx_host_setup_waited_event(SL_WFX_STARTUP_IND_ID);
 80092ea:	20e1      	movs	r0, #225	@ 0xe1
 80092ec:	f001 f8da 	bl	800a4a4 <sl_wfx_host_setup_waited_event>
 80092f0:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f040 808c 	bne.w	8009412 <sl_wfx_init+0x176>

  /* Downloading Wi-Fi chip firmware */
  result = sl_wfx_download_run_firmware( );
 80092fa:	f000 fcb9 	bl	8009c70 <sl_wfx_download_run_firmware>
 80092fe:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f040 8085 	bne.w	8009412 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Firmware downloaded--\r\n");
#endif

  result = sl_wfx_enable_irq(  );
 8009308:	f000 fb72 	bl	80099f0 <sl_wfx_enable_irq>
 800930c:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d17e      	bne.n	8009412 <sl_wfx_init+0x176>

  result = sl_wfx_set_access_mode_message(  );
 8009314:	f000 fbb4 	bl	8009a80 <sl_wfx_set_access_mode_message>
 8009318:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d178      	bne.n	8009412 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Message mode set--\r\n");
#endif

  /* Waiting for the startup indication from Wi-Fi chip, SL_WFX_STARTUP_IND_ID */
  result = sl_wfx_host_wait_for_confirmation(SL_WFX_STARTUP_IND_ID,
 8009320:	f107 0314 	add.w	r3, r7, #20
 8009324:	461a      	mov	r2, r3
 8009326:	f241 3188 	movw	r1, #5000	@ 0x1388
 800932a:	20e1      	movs	r0, #225	@ 0xe1
 800932c:	f001 f8cc 	bl	800a4c8 <sl_wfx_host_wait_for_confirmation>
 8009330:	61f8      	str	r0, [r7, #28]
                                             SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS,
                                             (void **)&startup_info);
  SL_WFX_ERROR_CHECK(result);
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d16c      	bne.n	8009412 <sl_wfx_init+0x176>

  /* Store the firware version in the context */
  context->firmware_build = startup_info->body.firmware_build;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  context->firmware_minor = startup_info->body.firmware_minor;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
  context->firmware_major = startup_info->body.firmware_major;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

  /* Storing mac addresses from Wi-Fi chip in the context  */
  memcpy(&(context->mac_addr_0.octet),
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f203 2016 	addw	r0, r3, #534	@ 0x216
         startup_info->body.mac_addr[0],
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	3326      	adds	r3, #38	@ 0x26
  memcpy(&(context->mac_addr_0.octet),
 8009366:	2206      	movs	r2, #6
 8009368:	4619      	mov	r1, r3
 800936a:	f013 fc80 	bl	801cc6e <memcpy>
         sizeof(sl_wfx_mac_address_t));
  memcpy(&(context->mac_addr_1.octet),
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f503 7007 	add.w	r0, r3, #540	@ 0x21c
         startup_info->body.mac_addr[1],
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	332c      	adds	r3, #44	@ 0x2c
  memcpy(&(context->mac_addr_1.octet),
 8009378:	2206      	movs	r2, #6
 800937a:	4619      	mov	r1, r3
 800937c:	f013 fc77 	bl	801cc6e <memcpy>
         sizeof(sl_wfx_mac_address_t));

  /* Storing input buffer limit from Wi-Fi chip */
  sl_wfx_input_buffer_number = sl_wfx_htole16(startup_info->body.num_inp_ch_bufs);
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	8c1b      	ldrh	r3, [r3, #32]
 8009384:	b29b      	uxth	r3, r3
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff ff71 	bl	800926e <uint16_identity>
 800938c:	4603      	mov	r3, r0
 800938e:	461a      	mov	r2, r3
 8009390:	4b28      	ldr	r3, [pc, #160]	@ (8009434 <sl_wfx_init+0x198>)
 8009392:	801a      	strh	r2, [r3, #0]

  /* Store the OPN */
  memcpy(context->wfx_opn, startup_info->body.opn, SL_WFX_OPN_SIZE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	330a      	adds	r3, #10
 800939e:	220e      	movs	r2, #14
 80093a0:	4619      	mov	r1, r3
 80093a2:	f013 fc64 	bl	801cc6e <memcpy>

  /* Set the wake up pin of the host */
  sl_wfx_host_set_wake_up_pin(1);
 80093a6:	2001      	movs	r0, #1
 80093a8:	f001 f83c 	bl	800a424 <sl_wfx_host_set_wake_up_pin>
        goto error_handler;
    }
  }
#endif //SL_WFX_USE_SECURE_LINK

  result = sl_wfx_host_get_pds_size(&pds_size);
 80093ac:	f107 0312 	add.w	r3, r7, #18
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 fff7 	bl	800a3a4 <sl_wfx_host_get_pds_size>
 80093b6:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d129      	bne.n	8009412 <sl_wfx_init+0x176>
  /* Sending to Wi-Fi chip PDS configuration (Platform data set) */
  for (uint8_t a = 0; a < pds_size; a++) {
 80093be:	2300      	movs	r3, #0
 80093c0:	76fb      	strb	r3, [r7, #27]
 80093c2:	e01c      	b.n	80093fe <sl_wfx_init+0x162>
    result = sl_wfx_host_get_pds_data(&pds_data, a);
 80093c4:	7efb      	ldrb	r3, [r7, #27]
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	f107 030c 	add.w	r3, r7, #12
 80093cc:	4611      	mov	r1, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 ffbc 	bl	800a34c <sl_wfx_host_get_pds_data>
 80093d4:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d11a      	bne.n	8009412 <sl_wfx_init+0x176>
    result = sl_wfx_send_configuration(pds_data, strlen(pds_data));
 80093dc:	68fc      	ldr	r4, [r7, #12]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7f6 ff5d 	bl	80002a0 <strlen>
 80093e6:	4603      	mov	r3, r0
 80093e8:	4619      	mov	r1, r3
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 f950 	bl	8009690 <sl_wfx_send_configuration>
 80093f0:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10c      	bne.n	8009412 <sl_wfx_init+0x176>
  for (uint8_t a = 0; a < pds_size; a++) {
 80093f8:	7efb      	ldrb	r3, [r7, #27]
 80093fa:	3301      	adds	r3, #1
 80093fc:	76fb      	strb	r3, [r7, #27]
 80093fe:	7efb      	ldrb	r3, [r7, #27]
 8009400:	b29a      	uxth	r2, r3
 8009402:	8a7b      	ldrh	r3, [r7, #18]
 8009404:	429a      	cmp	r2, r3
 8009406:	d3dd      	bcc.n	80093c4 <sl_wfx_init+0x128>

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--PDS configured--\r\n");
#endif

  sl_wfx_context->state = SL_WFX_STARTED;
 8009408:	4b09      	ldr	r3, [pc, #36]	@ (8009430 <sl_wfx_init+0x194>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  error_handler:
  if (result != SL_STATUS_OK) {
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d005      	beq.n	8009424 <sl_wfx_init+0x188>
    sl_wfx_disable_irq( );
 8009418:	f000 fb0e 	bl	8009a38 <sl_wfx_disable_irq>
    sl_wfx_deinit_bus();
 800941c:	f7ff ff20 	bl	8009260 <sl_wfx_deinit_bus>
    sl_wfx_host_deinit();
 8009420:	f000 ffe0 	bl	800a3e4 <sl_wfx_host_deinit>
  }

  return result;
 8009424:	69fb      	ldr	r3, [r7, #28]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3724      	adds	r7, #36	@ 0x24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd90      	pop	{r4, r7, pc}
 800942e:	bf00      	nop
 8009430:	20000a6c 	.word	0x20000a6c
 8009434:	20000a72 	.word	0x20000a72

08009438 <sl_wfx_send_join_command>:
                                     uint16_t        management_frame_protection,
                                     const uint8_t  *passkey,
                                     uint16_t        passkey_length,
                                     const uint8_t  *ie_data,
                                     uint16_t        ie_data_length)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08a      	sub	sp, #40	@ 0x28
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
 8009444:	807b      	strh	r3, [r7, #2]
  sl_status_t               result           = SL_STATUS_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	627b      	str	r3, [r7, #36]	@ 0x24
  sl_wfx_generic_message_t  *frame           = NULL;
 800944a:	2300      	movs	r3, #0
 800944c:	61bb      	str	r3, [r7, #24]
  sl_wfx_connect_cnf_t      *reply           = NULL;
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]
  sl_wfx_connect_req_body_t *connect_request = NULL;
 8009452:	2300      	movs	r3, #0
 8009454:	623b      	str	r3, [r7, #32]
  uint32_t request_length  = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_connect_req_t) + ie_data_length);
 8009456:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800945a:	3301      	adds	r3, #1
 800945c:	f023 0301 	bic.w	r3, r3, #1
 8009460:	3378      	adds	r3, #120	@ 0x78
 8009462:	61fb      	str	r3, [r7, #28]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8009464:	f107 0018 	add.w	r0, r7, #24
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	2202      	movs	r2, #2
 800946c:	2143      	movs	r1, #67	@ 0x43
 800946e:	f000 fed7 	bl	800a220 <sl_wfx_allocate_command_buffer>
 8009472:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 8009474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009476:	2b00      	cmp	r3, #0
 8009478:	f040 8092 	bne.w	80095a0 <sl_wfx_send_join_command+0x168>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	2200      	movs	r2, #0
 8009480:	70da      	strb	r2, [r3, #3]

  connect_request                        = (sl_wfx_connect_req_body_t *)&frame->body;
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	3304      	adds	r3, #4
 8009486:	623b      	str	r3, [r7, #32]
  connect_request->ssid_def.ssid_length  = sl_wfx_htole32(ssid_length);
 8009488:	68b8      	ldr	r0, [r7, #8]
 800948a:	f7ff fefc 	bl	8009286 <uint32_identity>
 800948e:	4602      	mov	r2, r0
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	601a      	str	r2, [r3, #0]
  connect_request->channel               = sl_wfx_htole16(channel);
 8009494:	887b      	ldrh	r3, [r7, #2]
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff fee9 	bl	800926e <uint16_identity>
 800949c:	4603      	mov	r3, r0
 800949e:	461a      	mov	r2, r3
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  connect_request->security_mode         = security_mode;
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80094aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  connect_request->prevent_roaming       = prevent_roaming;
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80094b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (security_mode == WFM_SECURITY_MODE_WPA3_SAE) {
 80094b8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80094bc:	2b06      	cmp	r3, #6
 80094be:	d109      	bne.n	80094d4 <sl_wfx_send_join_command+0x9c>
    connect_request->mgmt_frame_protection = WFM_MGMT_FRAME_PROTECTION_MANDATORY;
 80094c0:	6a3b      	ldr	r3, [r7, #32]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f042 0202 	orr.w	r2, r2, #2
 80094c8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 80094d2:	e007      	b.n	80094e4 <sl_wfx_send_join_command+0xac>
  } else {
    connect_request->mgmt_frame_protection = sl_wfx_htole16(management_frame_protection);
 80094d4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff fec9 	bl	800926e <uint16_identity>
 80094dc:	4603      	mov	r3, r0
 80094de:	461a      	mov	r2, r3
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }
  connect_request->password_length       = sl_wfx_htole16(passkey_length);
 80094e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7ff fec0 	bl	800926e <uint16_identity>
 80094ee:	4603      	mov	r3, r0
 80094f0:	461a      	mov	r2, r3
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	861a      	strh	r2, [r3, #48]	@ 0x30
  connect_request->ie_data_length        = sl_wfx_htole16(ie_data_length);
 80094f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7ff feb7 	bl	800926e <uint16_identity>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  memcpy(connect_request->ssid_def.ssid, ssid, ssid_length);
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	3304      	adds	r3, #4
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	68f9      	ldr	r1, [r7, #12]
 8009512:	4618      	mov	r0, r3
 8009514:	f013 fbab 	bl	801cc6e <memcpy>
  memcpy(connect_request->password, passkey, passkey_length);
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	3332      	adds	r3, #50	@ 0x32
 800951c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8009520:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009522:	4618      	mov	r0, r3
 8009524:	f013 fba3 	bl	801cc6e <memcpy>
  memcpy(connect_request + 1, ie_data, ie_data_length);
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	3374      	adds	r3, #116	@ 0x74
 800952c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8009530:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009532:	4618      	mov	r0, r3
 8009534:	f013 fb9b 	bl	801cc6e <memcpy>
  if (bssid != NULL) {
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d007      	beq.n	800954e <sl_wfx_send_join_command+0x116>
    memcpy(connect_request->bssid, &bssid->octet, SL_WFX_BSSID_SIZE);
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	3324      	adds	r3, #36	@ 0x24
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	2206      	movs	r2, #6
 8009546:	4618      	mov	r0, r3
 8009548:	f013 fb91 	bl	801cc6e <memcpy>
 800954c:	e006      	b.n	800955c <sl_wfx_send_join_command+0x124>
  } else {
    memset(connect_request->bssid, 0xFF, SL_WFX_BSSID_SIZE);
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	3324      	adds	r3, #36	@ 0x24
 8009552:	2206      	movs	r2, #6
 8009554:	21ff      	movs	r1, #255	@ 0xff
 8009556:	4618      	mov	r0, r3
 8009558:	f013 facc 	bl	801caf4 <memset>
  }

  result = sl_wfx_send_request(SL_WFX_CONNECT_REQ_ID, frame, request_length);
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	69fa      	ldr	r2, [r7, #28]
 8009560:	b292      	uxth	r2, r2
 8009562:	4619      	mov	r1, r3
 8009564:	2043      	movs	r0, #67	@ 0x43
 8009566:	f000 f90b 	bl	8009780 <sl_wfx_send_request>
 800956a:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 800956c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956e:	2b00      	cmp	r3, #0
 8009570:	d116      	bne.n	80095a0 <sl_wfx_send_join_command+0x168>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONNECT_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8009572:	f107 0314 	add.w	r3, r7, #20
 8009576:	461a      	mov	r2, r3
 8009578:	f241 3188 	movw	r1, #5000	@ 0x1388
 800957c:	2043      	movs	r0, #67	@ 0x43
 800957e:	f000 ffa3 	bl	800a4c8 <sl_wfx_host_wait_for_confirmation>
 8009582:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 8009584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10a      	bne.n	80095a0 <sl_wfx_send_join_command+0x168>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONNECT_REQ_ID);
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	4618      	mov	r0, r3
 8009590:	f7ff fe79 	bl	8009286 <uint32_identity>
 8009594:	4603      	mov	r3, r0
 8009596:	2143      	movs	r1, #67	@ 0x43
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fd61 	bl	800a060 <sl_wfx_get_status_code>
 800959e:	6278      	str	r0, [r7, #36]	@ 0x24

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 80095a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a2:	2b07      	cmp	r3, #7
 80095a4:	d10d      	bne.n	80095c2 <sl_wfx_send_join_command+0x18a>
    if (sl_wfx_context->used_buffers > 0) {
 80095a6:	4b0e      	ldr	r3, [pc, #56]	@ (80095e0 <sl_wfx_send_join_command+0x1a8>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d007      	beq.n	80095c2 <sl_wfx_send_join_command+0x18a>
      sl_wfx_context->used_buffers--;
 80095b2:	4b0b      	ldr	r3, [pc, #44]	@ (80095e0 <sl_wfx_send_join_command+0x1a8>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80095ba:	3a01      	subs	r2, #1
 80095bc:	b292      	uxth	r2, r2
 80095be:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    }
  }
  if (frame != NULL) {
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d005      	beq.n	80095d4 <sl_wfx_send_join_command+0x19c>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER);
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	2202      	movs	r2, #2
 80095cc:	2143      	movs	r1, #67	@ 0x43
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 fe44 	bl	800a25c <sl_wfx_free_command_buffer>
  }
  return result;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3728      	adds	r7, #40	@ 0x28
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000a6c 	.word	0x20000a6c

080095e4 <sl_wfx_send_ethernet_frame>:
 *****************************************************************************/
sl_status_t sl_wfx_send_ethernet_frame(sl_wfx_send_frame_req_t *frame,
                                       uint32_t data_length,
                                       sl_wfx_interface_t interface,
                                       uint8_t priority)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	4611      	mov	r1, r2
 80095f0:	461a      	mov	r2, r3
 80095f2:	460b      	mov	r3, r1
 80095f4:	71fb      	strb	r3, [r7, #7]
 80095f6:	4613      	mov	r3, r2
 80095f8:	71bb      	strb	r3, [r7, #6]
  sl_status_t result;
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_send_frame_req_t) + data_length);
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	3301      	adds	r3, #1
 80095fe:	f023 0301 	bic.w	r3, r3, #1
 8009602:	330c      	adds	r3, #12
 8009604:	617b      	str	r3, [r7, #20]

  sl_wfx_context->data_frame_id++;
 8009606:	4b21      	ldr	r3, [pc, #132]	@ (800968c <sl_wfx_send_ethernet_frame+0xa8>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f8b3 2204 	ldrh.w	r2, [r3, #516]	@ 0x204
 800960e:	3201      	adds	r2, #1
 8009610:	b292      	uxth	r2, r2
 8009612:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

  frame->header.length           = sl_wfx_htole16(data_length + sizeof(sl_wfx_send_frame_req_t));
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	b29b      	uxth	r3, r3
 800961a:	330c      	adds	r3, #12
 800961c:	b29b      	uxth	r3, r3
 800961e:	4618      	mov	r0, r3
 8009620:	f7ff fe25 	bl	800926e <uint16_identity>
 8009624:	4603      	mov	r3, r0
 8009626:	461a      	mov	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	801a      	strh	r2, [r3, #0]
  frame->header.id               = SL_WFX_SEND_FRAME_REQ_ID;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	224a      	movs	r2, #74	@ 0x4a
 8009630:	709a      	strb	r2, [r3, #2]
  frame->header.info             = (interface << SL_WFX_MSG_INFO_INTERFACE_OFFSET) & SL_WFX_MSG_INFO_INTERFACE_MASK;
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	b2db      	uxtb	r3, r3
 8009638:	f003 0306 	and.w	r3, r3, #6
 800963c:	b2da      	uxtb	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	70da      	strb	r2, [r3, #3]
  frame->body.frame_type         = WFM_FRAME_TYPE_DATA;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2208      	movs	r2, #8
 8009646:	711a      	strb	r2, [r3, #4]
  frame->body.priority           = priority;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	79ba      	ldrb	r2, [r7, #6]
 800964c:	715a      	strb	r2, [r3, #5]
  frame->body.packet_id          = sl_wfx_htole16(sl_wfx_context->data_frame_id);
 800964e:	4b0f      	ldr	r3, [pc, #60]	@ (800968c <sl_wfx_send_ethernet_frame+0xa8>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff fe09 	bl	800926e <uint16_identity>
 800965c:	4603      	mov	r3, r0
 800965e:	461a      	mov	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	80da      	strh	r2, [r3, #6]
  frame->body.packet_data_length = sl_wfx_htole32(data_length);
 8009664:	68b8      	ldr	r0, [r7, #8]
 8009666:	f7ff fe0e 	bl	8009286 <uint32_identity>
 800966a:	4602      	mov	r2, r0
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	609a      	str	r2, [r3, #8]

  result = sl_wfx_send_request(SL_WFX_SEND_FRAME_REQ_ID, (sl_wfx_generic_message_t*) frame, request_length);
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	b29b      	uxth	r3, r3
 8009674:	461a      	mov	r2, r3
 8009676:	68f9      	ldr	r1, [r7, #12]
 8009678:	204a      	movs	r0, #74	@ 0x4a
 800967a:	f000 f881 	bl	8009780 <sl_wfx_send_request>
 800967e:	6138      	str	r0, [r7, #16]

  return result;
 8009680:	693b      	ldr	r3, [r7, #16]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	20000a6c 	.word	0x20000a6c

08009690 <sl_wfx_send_configuration>:
 * SL_STATUS_FAIL otherwise
 *
 * @note The PDS (Platform Data Set) file contains the WF200 settings
 *****************************************************************************/
sl_status_t sl_wfx_send_configuration(const char *pds_data, uint32_t pds_data_length)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  sl_status_t                      result         = SL_STATUS_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	61fb      	str	r3, [r7, #28]
  sl_wfx_generic_message_t        *frame          = NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	613b      	str	r3, [r7, #16]
  sl_wfx_configuration_cnf_t      *reply          = NULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	60fb      	str	r3, [r7, #12]
  sl_wfx_configuration_req_body_t *config_request = NULL;
 80096a6:	2300      	movs	r3, #0
 80096a8:	61bb      	str	r3, [r7, #24]
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_configuration_req_t) + pds_data_length);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	3301      	adds	r3, #1
 80096ae:	f023 0301 	bic.w	r3, r3, #1
 80096b2:	3306      	adds	r3, #6
 80096b4:	617b      	str	r3, [r7, #20]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 80096b6:	f107 0010 	add.w	r0, r7, #16
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2202      	movs	r2, #2
 80096be:	2109      	movs	r1, #9
 80096c0:	f000 fdae 	bl	800a220 <sl_wfx_allocate_command_buffer>
 80096c4:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d137      	bne.n	800973c <sl_wfx_send_configuration+0xac>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	2200      	movs	r2, #0
 80096d0:	70da      	strb	r2, [r3, #3]

  config_request = (sl_wfx_configuration_req_body_t *)&frame->body;
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	3304      	adds	r3, #4
 80096d6:	61bb      	str	r3, [r7, #24]
  config_request->length = sl_wfx_htole16(pds_data_length);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	4618      	mov	r0, r3
 80096de:	f7ff fdc6 	bl	800926e <uint16_identity>
 80096e2:	4603      	mov	r3, r0
 80096e4:	461a      	mov	r2, r3
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	801a      	strh	r2, [r3, #0]

  memcpy(config_request->pds_data, pds_data, pds_data_length);
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	3302      	adds	r3, #2
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f013 fabb 	bl	801cc6e <memcpy>

  result = sl_wfx_send_request(SL_WFX_CONFIGURATION_REQ_ID, frame, request_length);
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	b292      	uxth	r2, r2
 80096fe:	4619      	mov	r1, r3
 8009700:	2009      	movs	r0, #9
 8009702:	f000 f83d 	bl	8009780 <sl_wfx_send_request>
 8009706:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d116      	bne.n	800973c <sl_wfx_send_configuration+0xac>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 800970e:	f107 030c 	add.w	r3, r7, #12
 8009712:	461a      	mov	r2, r3
 8009714:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009718:	2009      	movs	r0, #9
 800971a:	f000 fed5 	bl	800a4c8 <sl_wfx_host_wait_for_confirmation>
 800971e:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10a      	bne.n	800973c <sl_wfx_send_configuration+0xac>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONFIGURATION_REQ_ID);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	4618      	mov	r0, r3
 800972c:	f7ff fdab 	bl	8009286 <uint32_identity>
 8009730:	4603      	mov	r3, r0
 8009732:	2109      	movs	r1, #9
 8009734:	4618      	mov	r0, r3
 8009736:	f000 fc93 	bl	800a060 <sl_wfx_get_status_code>
 800973a:	61f8      	str	r0, [r7, #28]

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	2b07      	cmp	r3, #7
 8009740:	d10d      	bne.n	800975e <sl_wfx_send_configuration+0xce>
    if (sl_wfx_context->used_buffers > 0) {
 8009742:	4b0e      	ldr	r3, [pc, #56]	@ (800977c <sl_wfx_send_configuration+0xec>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800974a:	2b00      	cmp	r3, #0
 800974c:	d007      	beq.n	800975e <sl_wfx_send_configuration+0xce>
      sl_wfx_context->used_buffers--;
 800974e:	4b0b      	ldr	r3, [pc, #44]	@ (800977c <sl_wfx_send_configuration+0xec>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8009756:	3a01      	subs	r2, #1
 8009758:	b292      	uxth	r2, r2
 800975a:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    }
  }
  if (frame != NULL) {
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d005      	beq.n	8009770 <sl_wfx_send_configuration+0xe0>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	2202      	movs	r2, #2
 8009768:	2109      	movs	r1, #9
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fd76 	bl	800a25c <sl_wfx_free_command_buffer>
  }
  return result;
 8009770:	69fb      	ldr	r3, [r7, #28]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3720      	adds	r7, #32
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000a6c 	.word	0x20000a6c

08009780 <sl_wfx_send_request>:
 * @returns SL_STATUS_OK if the command is sent correctly,
 * SL_STATUS_WOULD_OVERFLOW if the HIF queue is full,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_send_request(uint8_t command_id, sl_wfx_generic_message_t *request, uint16_t request_length)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
 800978c:	4613      	mov	r3, r2
 800978e:	80bb      	strh	r3, [r7, #4]
  sl_status_t result;
  sl_status_t unlock_result;

  result = sl_wfx_host_lock();
 8009790:	f001 f84a 	bl	800a828 <sl_wfx_host_lock>
 8009794:	60f8      	str	r0, [r7, #12]

  if (result != SL_STATUS_OK) {
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <sl_wfx_send_request+0x28>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Send request lock error %u\n", result);
 800979c:	68f9      	ldr	r1, [r7, #12]
 800979e:	482f      	ldr	r0, [pc, #188]	@ (800985c <sl_wfx_send_request+0xdc>)
 80097a0:	f001 f830 	bl	800a804 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return
    return result;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	e054      	b.n	8009852 <sl_wfx_send_request+0xd2>
  }

  if (sl_wfx_context->used_buffers >= sl_wfx_input_buffer_number) {
 80097a8:	4b2d      	ldr	r3, [pc, #180]	@ (8009860 <sl_wfx_send_request+0xe0>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80097b0:	4b2c      	ldr	r3, [pc, #176]	@ (8009864 <sl_wfx_send_request+0xe4>)
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d304      	bcc.n	80097c2 <sl_wfx_send_request+0x42>
    result = SL_STATUS_WOULD_OVERFLOW;
 80097b8:	231d      	movs	r3, #29
 80097ba:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d137      	bne.n	8009832 <sl_wfx_send_request+0xb2>
  }

  // Write the buffer header
  request->header.id     = command_id;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	79fa      	ldrb	r2, [r7, #7]
 80097c6:	709a      	strb	r2, [r3, #2]
  request->header.length = sl_wfx_htole16(request_length);
 80097c8:	88bb      	ldrh	r3, [r7, #4]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7ff fd4f 	bl	800926e <uint16_identity>
 80097d0:	4603      	mov	r3, r0
 80097d2:	461a      	mov	r2, r3
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	801a      	strh	r2, [r3, #0]

#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_send(command_id, &request, &request_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK
  if (command_id != SL_WFX_SEND_FRAME_REQ_ID
 80097d8:	79fb      	ldrb	r3, [r7, #7]
 80097da:	2b4a      	cmp	r3, #74	@ 0x4a
 80097dc:	d00a      	beq.n	80097f4 <sl_wfx_send_request+0x74>
      && command_id != SL_WFX_SHUT_DOWN_REQ_ID) {
 80097de:	79fb      	ldrb	r3, [r7, #7]
 80097e0:	2b32      	cmp	r3, #50	@ 0x32
 80097e2:	d007      	beq.n	80097f4 <sl_wfx_send_request+0x74>
    result = sl_wfx_host_setup_waited_event(command_id);
 80097e4:	79fb      	ldrb	r3, [r7, #7]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fe5c 	bl	800a4a4 <sl_wfx_host_setup_waited_event>
 80097ec:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d11e      	bne.n	8009832 <sl_wfx_send_request+0xb2>
  }

  if (result != SL_STATUS_OK) {
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d003      	beq.n	8009802 <sl_wfx_send_request+0x82>
    sl_wfx_host_log("Send request error %u\r\n", result);
 80097fa:	68f9      	ldr	r1, [r7, #12]
 80097fc:	481a      	ldr	r0, [pc, #104]	@ (8009868 <sl_wfx_send_request+0xe8>)
 80097fe:	f001 f801 	bl	800a804 <sl_wfx_host_log>
  }

  result = sl_wfx_host_transmit_frame(request, request_length);
 8009802:	88bb      	ldrh	r3, [r7, #4]
 8009804:	4619      	mov	r1, r3
 8009806:	6838      	ldr	r0, [r7, #0]
 8009808:	f000 ffee 	bl	800a7e8 <sl_wfx_host_transmit_frame>
 800980c:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10e      	bne.n	8009832 <sl_wfx_send_request+0xb2>

  if (result != SL_STATUS_OK) {
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <sl_wfx_send_request+0xa2>
    sl_wfx_host_log("Send request error %u\r\n", result);
 800981a:	68f9      	ldr	r1, [r7, #12]
 800981c:	4812      	ldr	r0, [pc, #72]	@ (8009868 <sl_wfx_send_request+0xe8>)
 800981e:	f000 fff1 	bl	800a804 <sl_wfx_host_log>
  }

  sl_wfx_context->used_buffers++;
 8009822:	4b0f      	ldr	r3, [pc, #60]	@ (8009860 <sl_wfx_send_request+0xe0>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800982a:	3201      	adds	r2, #1
 800982c:	b292      	uxth	r2, r2
 800982e:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206

  error_handler:
  unlock_result = sl_wfx_host_unlock();
 8009832:	f001 f819 	bl	800a868 <sl_wfx_host_unlock>
 8009836:	60b8      	str	r0, [r7, #8]
  if (unlock_result != SL_STATUS_OK) {
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <sl_wfx_send_request+0xc2>
    result = unlock_result;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	60fb      	str	r3, [r7, #12]
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <sl_wfx_send_request+0xd0>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8009848:	68f9      	ldr	r1, [r7, #12]
 800984a:	4807      	ldr	r0, [pc, #28]	@ (8009868 <sl_wfx_send_request+0xe8>)
 800984c:	f000 ffda 	bl	800a804 <sl_wfx_host_log>
  }
#endif
  return result;
 8009850:	68fb      	ldr	r3, [r7, #12]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	0801edc4 	.word	0x0801edc4
 8009860:	20000a6c 	.word	0x20000a6c
 8009864:	20000a72 	.word	0x20000a72
 8009868:	0801ede0 	.word	0x0801ede0

0800986c <sl_wfx_receive_frame>:
 * @returns SL_STATUS_OK if the frame has been received correctly,
 * SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE if no frame are pending inside the Wi-Fi chip
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_receive_frame(uint16_t *ctrl_reg)
{
 800986c:	b590      	push	{r4, r7, lr}
 800986e:	b08b      	sub	sp, #44	@ 0x2c
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  sl_status_t               result;
  sl_status_t               unlock_result;
  sl_wfx_generic_message_t *network_rx_buffer = NULL;
 8009874:	2300      	movs	r3, #0
 8009876:	60fb      	str	r3, [r7, #12]
  sl_wfx_received_message_type_t message_type;
  sl_wfx_buffer_type_t      buffer_type = SL_WFX_RX_FRAME_BUFFER;
 8009878:	2301      	movs	r3, #1
 800987a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t                  read_length, frame_size;

  result = sl_wfx_host_lock();
 800987e:	f000 ffd3 	bl	800a828 <sl_wfx_host_lock>
 8009882:	6278      	str	r0, [r7, #36]	@ 0x24

  if (result != SL_STATUS_OK) {
 8009884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009886:	2b00      	cmp	r3, #0
 8009888:	d005      	beq.n	8009896 <sl_wfx_receive_frame+0x2a>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Receive frame lock error %u\n", result);
 800988a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800988c:	4855      	ldr	r0, [pc, #340]	@ (80099e4 <sl_wfx_receive_frame+0x178>)
 800988e:	f000 ffb9 	bl	800a804 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return immediatly
    return result;
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009894:	e0a1      	b.n	80099da <sl_wfx_receive_frame+0x16e>
  }

  frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800989e:	005b      	lsls	r3, r3, #1
 80098a0:	61fb      	str	r3, [r7, #28]
  /* if frame_size is equal to 0, read the control register to know the frame size */
  if (frame_size == 0) {
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d116      	bne.n	80098d6 <sl_wfx_receive_frame+0x6a>
    /* Read the control register */
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, ctrl_reg);
 80098a8:	6879      	ldr	r1, [r7, #4]
 80098aa:	2001      	movs	r0, #1
 80098ac:	f7ff fa73 	bl	8008d96 <sl_wfx_reg_read_16>
 80098b0:	6278      	str	r0, [r7, #36]	@ 0x24
    SL_WFX_ERROR_CHECK(result);
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d174      	bne.n	80099a2 <sl_wfx_receive_frame+0x136>
    frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	61fb      	str	r3, [r7, #28]
    /* At this point, if frame_size is equal to zero, nothing to be read by the host */
    if (frame_size == 0) {
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d105      	bne.n	80098d6 <sl_wfx_receive_frame+0x6a>
      result = SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE;
 80098ca:	f640 3305 	movw	r3, #2821	@ 0xb05
 80098ce:	627b      	str	r3, [r7, #36]	@ 0x24
      SL_WFX_ERROR_CHECK(result);
 80098d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d165      	bne.n	80099a2 <sl_wfx_receive_frame+0x136>
    }
  }

  /* retrieve the message type from the control register*/
  message_type = (sl_wfx_received_message_type_t)((*ctrl_reg & SL_WFX_CONT_FRAME_TYPE_INFO) >> SL_WFX_CONT_FRAME_TYPE_OFFSET);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	0b9b      	lsrs	r3, r3, #14
 80098dc:	b29b      	uxth	r3, r3
 80098de:	76fb      	strb	r3, [r7, #27]

  /* critical : '+SL_WFX_CONT_REGISTER_SIZE' is to read the piggy-back value at
     the end of the control register. */
  read_length = frame_size + SL_WFX_CONT_REGISTER_SIZE;
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	3302      	adds	r3, #2
 80098e4:	617b      	str	r3, [r7, #20]

  /* Depending on the message type provided by the control register, allocate a
     control buffer or a ethernet RX frame */
  buffer_type = (message_type == SL_WFX_ETHERNET_DATA_MESSAGE) ? SL_WFX_RX_FRAME_BUFFER : SL_WFX_CONTROL_BUFFER;
 80098e6:	7efb      	ldrb	r3, [r7, #27]
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d101      	bne.n	80098f0 <sl_wfx_receive_frame+0x84>
 80098ec:	2301      	movs	r3, #1
 80098ee:	e000      	b.n	80098f2 <sl_wfx_receive_frame+0x86>
 80098f0:	2302      	movs	r3, #2
 80098f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
                                       buffer_type,
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d004      	beq.n	800990a <sl_wfx_receive_frame+0x9e>
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 8009906:	3340      	adds	r3, #64	@ 0x40
 8009908:	e000      	b.n	800990c <sl_wfx_receive_frame+0xa0>
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8009910:	f107 000c 	add.w	r0, r7, #12
 8009914:	461a      	mov	r2, r3
 8009916:	f000 ff47 	bl	800a7a8 <sl_wfx_host_allocate_buffer>
 800991a:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 800991c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991e:	2b00      	cmp	r3, #0
 8009920:	d13f      	bne.n	80099a2 <sl_wfx_receive_frame+0x136>

  memset(network_rx_buffer, 0, read_length);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	2100      	movs	r1, #0
 8009928:	4618      	mov	r0, r3
 800992a:	f013 f8e3 	bl	801caf4 <memset>

  /* Read the frame from WF200 */
  result = sl_wfx_data_read(network_rx_buffer, read_length);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6979      	ldr	r1, [r7, #20]
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff fa9c 	bl	8008e70 <sl_wfx_data_read>
 8009938:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 800993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993c:	2b00      	cmp	r3, #0
 800993e:	d130      	bne.n	80099a2 <sl_wfx_receive_frame+0x136>

  /* if the frame is a confirmation, decrease used_buffers value */
  if ((sl_wfx_context->used_buffers > 0)
 8009940:	4b29      	ldr	r3, [pc, #164]	@ (80099e8 <sl_wfx_receive_frame+0x17c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00c      	beq.n	8009966 <sl_wfx_receive_frame+0xfa>
      && (!(network_rx_buffer->header.id & SL_WFX_IND_BASE))) {
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	789b      	ldrb	r3, [r3, #2]
 8009950:	b25b      	sxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	db07      	blt.n	8009966 <sl_wfx_receive_frame+0xfa>
    sl_wfx_context->used_buffers--;
 8009956:	4b24      	ldr	r3, [pc, #144]	@ (80099e8 <sl_wfx_receive_frame+0x17c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800995e:	3a01      	subs	r2, #1
 8009960:	b292      	uxth	r2, r2
 8009962:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
  }

  /* read the control register value in the piggy back and pass it to the host */
  *ctrl_reg = sl_wfx_unpack_16bit_little_endian(((uint8_t *)network_rx_buffer) + frame_size);
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	4413      	add	r3, r2
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	4619      	mov	r1, r3
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	3301      	adds	r3, #1
 8009976:	4413      	add	r3, r2
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	021b      	lsls	r3, r3, #8
 800997c:	b29b      	uxth	r3, r3
 800997e:	430b      	orrs	r3, r1
 8009980:	b29a      	uxth	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	801a      	strh	r2, [r3, #0]
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_receive(&network_rx_buffer, read_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK

  network_rx_buffer->header.length = sl_wfx_htole16(network_rx_buffer->header.length);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	b29b      	uxth	r3, r3
 800998c:	68fc      	ldr	r4, [r7, #12]
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff fc6d 	bl	800926e <uint16_identity>
 8009994:	4603      	mov	r3, r0
 8009996:	8023      	strh	r3, [r4, #0]

  /* send the information to the host */
  result = sl_wfx_host_post_event(network_rx_buffer);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4618      	mov	r0, r3
 800999c:	f000 fdd4 	bl	800a548 <sl_wfx_host_post_event>
 80099a0:	6278      	str	r0, [r7, #36]	@ 0x24

  error_handler:
  if (network_rx_buffer != NULL) {
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d008      	beq.n	80099ba <sl_wfx_receive_frame+0x14e>
    sl_wfx_free_command_buffer(network_rx_buffer, network_rx_buffer->header.id, buffer_type);
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	789b      	ldrb	r3, [r3, #2]
 80099ae:	4619      	mov	r1, r3
 80099b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80099b4:	461a      	mov	r2, r3
 80099b6:	f000 fc51 	bl	800a25c <sl_wfx_free_command_buffer>
  }
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_renegotiate();
#endif //SL_WFX_USE_SECURE_LINK

  unlock_result = sl_wfx_host_unlock();
 80099ba:	f000 ff55 	bl	800a868 <sl_wfx_host_unlock>
 80099be:	6138      	str	r0, [r7, #16]
  if (unlock_result != SL_STATUS_OK) {
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <sl_wfx_receive_frame+0x15e>
    result = unlock_result;
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 80099ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <sl_wfx_receive_frame+0x16c>
    sl_wfx_host_log("Receive frame error %u\r\n", result);
 80099d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099d2:	4806      	ldr	r0, [pc, #24]	@ (80099ec <sl_wfx_receive_frame+0x180>)
 80099d4:	f000 ff16 	bl	800a804 <sl_wfx_host_log>
  }
#endif
  return result;
 80099d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80099da:	4618      	mov	r0, r3
 80099dc:	372c      	adds	r7, #44	@ 0x2c
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd90      	pop	{r4, r7, pc}
 80099e2:	bf00      	nop
 80099e4:	0801edf8 	.word	0x0801edf8
 80099e8:	20000a6c 	.word	0x20000a6c
 80099ec:	0801ee18 	.word	0x0801ee18

080099f0 <sl_wfx_enable_irq>:
 * @return SL_STATUS_OK if the irq is enabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Enable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_enable_irq(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_host_enable_platform_interrupt();
 80099f6:	f001 fc01 	bl	800b1fc <sl_wfx_host_enable_platform_interrupt>
 80099fa:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d115      	bne.n	8009a2e <sl_wfx_enable_irq+0x3e>

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8009a02:	463b      	mov	r3, r7
 8009a04:	4619      	mov	r1, r3
 8009a06:	2000      	movs	r0, #0
 8009a08:	f7ff fa01 	bl	8008e0e <sl_wfx_reg_read_32>
 8009a0c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10c      	bne.n	8009a2e <sl_wfx_enable_irq+0x3e>

  value32 |= SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a1a:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	4619      	mov	r1, r3
 8009a20:	2000      	movs	r0, #0
 8009a22:	f7ff fa0e 	bl	8008e42 <sl_wfx_reg_write_32>
 8009a26:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0

  error_handler:
 8009a2c:	bf00      	nop
  return result;
 8009a2e:	687b      	ldr	r3, [r7, #4]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <sl_wfx_disable_irq>:
 * @return SL_STATUS_OK if the irq is disabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Disable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_disable_irq(void)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8009a3e:	463b      	mov	r3, r7
 8009a40:	4619      	mov	r1, r3
 8009a42:	2000      	movs	r0, #0
 8009a44:	f7ff f9e3 	bl	8008e0e <sl_wfx_reg_read_32>
 8009a48:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d112      	bne.n	8009a76 <sl_wfx_disable_irq+0x3e>

  value32 &= ~SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a56:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	f7ff f9f0 	bl	8008e42 <sl_wfx_reg_write_32>
 8009a62:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <sl_wfx_disable_irq+0x3e>

  result = sl_wfx_host_disable_platform_interrupt();
 8009a6a:	f001 fbd4 	bl	800b216 <sl_wfx_host_disable_platform_interrupt>
 8009a6e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0

  error_handler:
 8009a74:	bf00      	nop
  return result;
 8009a76:	687b      	ldr	r3, [r7, #4]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <sl_wfx_set_access_mode_message>:
 *
 * @return SL_STATUS_OK if the message mode is enabled correctly,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_set_access_mode_message(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
  /* Configure device for MESSAGE MODE */
  sl_status_t result;
  uint32_t    val32;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &val32);
 8009a86:	463b      	mov	r3, r7
 8009a88:	4619      	mov	r1, r3
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	f7ff f9bf 	bl	8008e0e <sl_wfx_reg_read_32>
 8009a90:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10a      	bne.n	8009aae <sl_wfx_set_access_mode_message+0x2e>

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, val32 & ~SL_WFX_CONFIG_ACCESS_MODE_BIT);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	f7ff f9ce 	bl	8008e42 <sl_wfx_reg_write_32>
 8009aa6:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0

  error_handler:
 8009aac:	bf00      	nop
  return result;
 8009aae:	687b      	ldr	r3, [r7, #4]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <sl_wfx_init_chip>:
 * @brief Init the Wi-Fi chip
 *
 * @return SL_STATUS_OK if the initialization is successful, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_init_chip(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;
  uint16_t    value16;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8009abe:	1d3b      	adds	r3, r7, #4
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	f7ff f9a3 	bl	8008e0e <sl_wfx_reg_read_32>
 8009ac8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d177      	bne.n	8009bc0 <sl_wfx_init_chip+0x108>

  /* General purpose registers setting */
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x07208775);
 8009ad0:	493e      	ldr	r1, [pc, #248]	@ (8009bcc <sl_wfx_init_chip+0x114>)
 8009ad2:	2006      	movs	r0, #6
 8009ad4:	f7ff f9b5 	bl	8008e42 <sl_wfx_reg_write_32>
 8009ad8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d16f      	bne.n	8009bc0 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x082ec020);
 8009ae0:	493b      	ldr	r1, [pc, #236]	@ (8009bd0 <sl_wfx_init_chip+0x118>)
 8009ae2:	2006      	movs	r0, #6
 8009ae4:	f7ff f9ad 	bl	8008e42 <sl_wfx_reg_write_32>
 8009ae8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d167      	bne.n	8009bc0 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x093c3c3c);
 8009af0:	4938      	ldr	r1, [pc, #224]	@ (8009bd4 <sl_wfx_init_chip+0x11c>)
 8009af2:	2006      	movs	r0, #6
 8009af4:	f7ff f9a5 	bl	8008e42 <sl_wfx_reg_write_32>
 8009af8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d15f      	bne.n	8009bc0 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0b322c44);
 8009b00:	4935      	ldr	r1, [pc, #212]	@ (8009bd8 <sl_wfx_init_chip+0x120>)
 8009b02:	2006      	movs	r0, #6
 8009b04:	f7ff f99d 	bl	8008e42 <sl_wfx_reg_write_32>
 8009b08:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d157      	bne.n	8009bc0 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0ca06497);
 8009b10:	4932      	ldr	r1, [pc, #200]	@ (8009bdc <sl_wfx_init_chip+0x124>)
 8009b12:	2006      	movs	r0, #6
 8009b14:	f7ff f995 	bl	8008e42 <sl_wfx_reg_write_32>
 8009b18:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d14f      	bne.n	8009bc0 <sl_wfx_init_chip+0x108>

  /* set wake-up bit */
  result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 8009b20:	1cbb      	adds	r3, r7, #2
 8009b22:	4619      	mov	r1, r3
 8009b24:	2001      	movs	r0, #1
 8009b26:	f7ff f936 	bl	8008d96 <sl_wfx_reg_read_16>
 8009b2a:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d146      	bne.n	8009bc0 <sl_wfx_init_chip+0x108>
  value16 |= SL_WFX_CONT_WUP_BIT;
 8009b32:	887b      	ldrh	r3, [r7, #2]
 8009b34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	807b      	strh	r3, [r7, #2]
  result = sl_wfx_reg_write_16(SL_WFX_CONTROL_REG_ID, value16);
 8009b3c:	887b      	ldrh	r3, [r7, #2]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	2001      	movs	r0, #1
 8009b42:	f7ff f944 	bl	8008dce <sl_wfx_reg_write_16>
 8009b46:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d138      	bne.n	8009bc0 <sl_wfx_init_chip+0x108>

  /* .. and wait for wake-up */
  for (uint32_t i = 0; i < 200; ++i) {
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60bb      	str	r3, [r7, #8]
 8009b52:	e013      	b.n	8009b7c <sl_wfx_init_chip+0xc4>
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 8009b54:	1cbb      	adds	r3, r7, #2
 8009b56:	4619      	mov	r1, r3
 8009b58:	2001      	movs	r0, #1
 8009b5a:	f7ff f91c 	bl	8008d96 <sl_wfx_reg_read_16>
 8009b5e:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d12c      	bne.n	8009bc0 <sl_wfx_init_chip+0x108>

    if ((value16 & SL_WFX_CONT_RDY_BIT) == SL_WFX_CONT_RDY_BIT) {
 8009b66:	887b      	ldrh	r3, [r7, #2]
 8009b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d109      	bne.n	8009b84 <sl_wfx_init_chip+0xcc>
      break;
    } else {
      sl_wfx_host_wait(1);
 8009b70:	2001      	movs	r0, #1
 8009b72:	f000 fcdd 	bl	800a530 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 200; ++i) {
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	60bb      	str	r3, [r7, #8]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009b80:	d9e8      	bls.n	8009b54 <sl_wfx_init_chip+0x9c>
 8009b82:	e000      	b.n	8009b86 <sl_wfx_init_chip+0xce>
      break;
 8009b84:	bf00      	nop
    }
  }

  if ((value16 & SL_WFX_CONT_RDY_BIT) != SL_WFX_CONT_RDY_BIT) {
 8009b86:	887b      	ldrh	r3, [r7, #2]
 8009b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d104      	bne.n	8009b9a <sl_wfx_init_chip+0xe2>
    result = SL_STATUS_TIMEOUT;
 8009b90:	2307      	movs	r3, #7
 8009b92:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d112      	bne.n	8009bc0 <sl_wfx_init_chip+0x108>
  }

  /* check for access mode bit */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8009b9a:	1d3b      	adds	r3, r7, #4
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	f7ff f935 	bl	8008e0e <sl_wfx_reg_read_32>
 8009ba4:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d109      	bne.n	8009bc0 <sl_wfx_init_chip+0x108>
  if ((value32 & SL_WFX_CONFIG_ACCESS_MODE_BIT) == 0) {
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d103      	bne.n	8009bbe <sl_wfx_init_chip+0x106>
    result = SL_STATUS_FAIL;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b00      	cmp	r3, #0
  }

  error_handler:
 8009bbe:	bf00      	nop
  return result;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	07208775 	.word	0x07208775
 8009bd0:	082ec020 	.word	0x082ec020
 8009bd4:	093c3c3c 	.word	0x093c3c3c
 8009bd8:	0b322c44 	.word	0x0b322c44
 8009bdc:	0ca06497 	.word	0x0ca06497

08009be0 <sl_wfx_download_run_bootloader>:
 * @brief run the Wi-Fi chip bootloader
 *
 * @return SL_STATUS_OK if the bootloader runs correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_bootloader(void)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;

  result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 8009be6:	463b      	mov	r3, r7
 8009be8:	4619      	mov	r1, r3
 8009bea:	481e      	ldr	r0, [pc, #120]	@ (8009c64 <sl_wfx_download_run_bootloader+0x84>)
 8009bec:	f7ff f999 	bl	8008f22 <sl_wfx_apb_read_32>
 8009bf0:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d12f      	bne.n	8009c58 <sl_wfx_download_run_bootloader+0x78>

  /* release CPU from reset and enable clock */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8009bf8:	463b      	mov	r3, r7
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	f7ff f906 	bl	8008e0e <sl_wfx_reg_read_32>
 8009c02:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d126      	bne.n	8009c58 <sl_wfx_download_run_bootloader+0x78>
  value32 &= ~(SL_WFX_CONFIG_CPU_RESET_BIT | SL_WFX_CONFIG_CPU_CLK_DIS_BIT);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8009c10:	603b      	str	r3, [r7, #0]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	4619      	mov	r1, r3
 8009c16:	2000      	movs	r0, #0
 8009c18:	f7ff f913 	bl	8008e42 <sl_wfx_reg_write_32>
 8009c1c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d119      	bne.n	8009c58 <sl_wfx_download_run_bootloader+0x78>

  /* Testing SRAM access */
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0x23abc88e);
 8009c24:	4910      	ldr	r1, [pc, #64]	@ (8009c68 <sl_wfx_download_run_bootloader+0x88>)
 8009c26:	4811      	ldr	r0, [pc, #68]	@ (8009c6c <sl_wfx_download_run_bootloader+0x8c>)
 8009c28:	f7ff f964 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009c2c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d111      	bne.n	8009c58 <sl_wfx_download_run_bootloader+0x78>

  /* Check if the write command is successful */
  result = sl_wfx_apb_read_32(ADDR_DOWNLOAD_FIFO_BASE, &value32);
 8009c34:	463b      	mov	r3, r7
 8009c36:	4619      	mov	r1, r3
 8009c38:	480c      	ldr	r0, [pc, #48]	@ (8009c6c <sl_wfx_download_run_bootloader+0x8c>)
 8009c3a:	f7ff f972 	bl	8008f22 <sl_wfx_apb_read_32>
 8009c3e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d108      	bne.n	8009c58 <sl_wfx_download_run_bootloader+0x78>
  if (value32 != 0x23abc88e) {
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	4a07      	ldr	r2, [pc, #28]	@ (8009c68 <sl_wfx_download_run_bootloader+0x88>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d003      	beq.n	8009c56 <sl_wfx_download_run_bootloader+0x76>
    result = SL_STATUS_FAIL;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(result);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
  }

  error_handler:
 8009c56:	bf00      	nop
  return result;
 8009c58:	687b      	ldr	r3, [r7, #4]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	0900c010 	.word	0x0900c010
 8009c68:	23abc88e 	.word	0x23abc88e
 8009c6c:	09004000 	.word	0x09004000

08009c70 <sl_wfx_download_run_firmware>:
 * SL_STATUS_WIFI_INVALID_KEY if the firmware keyset does not match the chip one,
 * SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT or SL_STATUS_TIMEOUT if the process times out,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_firmware(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08c      	sub	sp, #48	@ 0x30
 8009c74:	af00      	add	r7, sp, #0
  uint32_t       i;
  uint32_t       value32;
  uint32_t       image_length;
  uint32_t       block;
  uint32_t       num_blocks;
  uint32_t       put = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	623b      	str	r3, [r7, #32]
  uint32_t       get = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	60bb      	str	r3, [r7, #8]
  const uint8_t *buffer;

  result = sl_wfx_host_init();
 8009c7e:	f000 faff 	bl	800a280 <sl_wfx_host_init>
 8009c82:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f040 8185 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_NOT_READY);
 8009c8c:	4984      	ldr	r1, [pc, #528]	@ (8009ea0 <sl_wfx_download_run_firmware+0x230>)
 8009c8e:	4885      	ldr	r0, [pc, #532]	@ (8009ea4 <sl_wfx_download_run_firmware+0x234>)
 8009c90:	f7ff f930 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009c94:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f040 817c 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, 0);
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	4881      	ldr	r0, [pc, #516]	@ (8009ea8 <sl_wfx_download_run_firmware+0x238>)
 8009ca2:	f7ff f927 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009ca6:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f040 8173 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_GET, 0);
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	487e      	ldr	r0, [pc, #504]	@ (8009eac <sl_wfx_download_run_firmware+0x23c>)
 8009cb4:	f7ff f91e 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009cb8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f040 816a 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_READY);
 8009cc2:	497b      	ldr	r1, [pc, #492]	@ (8009eb0 <sl_wfx_download_run_firmware+0x240>)
 8009cc4:	4877      	ldr	r0, [pc, #476]	@ (8009ea4 <sl_wfx_download_run_firmware+0x234>)
 8009cc6:	f7ff f915 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009cca:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f040 8161 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // wait for INFO_READ state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_INFO_READY, 100);
 8009cd4:	2264      	movs	r2, #100	@ 0x64
 8009cd6:	4977      	ldr	r1, [pc, #476]	@ (8009eb4 <sl_wfx_download_run_firmware+0x244>)
 8009cd8:	4877      	ldr	r0, [pc, #476]	@ (8009eb8 <sl_wfx_download_run_firmware+0x248>)
 8009cda:	f000 f96b 	bl	8009fb4 <sl_wfx_poll_for_value>
 8009cde:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f040 8157 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // read info
  result = sl_wfx_apb_read_32(0x0900C080, &value32);
 8009ce8:	f107 0310 	add.w	r3, r7, #16
 8009cec:	4619      	mov	r1, r3
 8009cee:	4873      	ldr	r0, [pc, #460]	@ (8009ebc <sl_wfx_download_run_firmware+0x24c>)
 8009cf0:	f7ff f917 	bl	8008f22 <sl_wfx_apb_read_32>
 8009cf4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f040 814c 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // retrieve WF200 keyset
  result = sl_wfx_apb_read_32(SL_WFX_PTE_INFO + 12, &value32);
 8009cfe:	f107 0310 	add.w	r3, r7, #16
 8009d02:	4619      	mov	r1, r3
 8009d04:	486e      	ldr	r0, [pc, #440]	@ (8009ec0 <sl_wfx_download_run_firmware+0x250>)
 8009d06:	f7ff f90c 	bl	8008f22 <sl_wfx_apb_read_32>
 8009d0a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f040 8141 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>
  encryption_keyset = (value32 >> 8);
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	0a1b      	lsrs	r3, r3, #8
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8009ec4 <sl_wfx_download_run_firmware+0x254>)
 8009d1c:	701a      	strb	r2, [r3, #0]

  // report that info is read
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_HOST_INFO_READ);
 8009d1e:	496a      	ldr	r1, [pc, #424]	@ (8009ec8 <sl_wfx_download_run_firmware+0x258>)
 8009d20:	4860      	ldr	r0, [pc, #384]	@ (8009ea4 <sl_wfx_download_run_firmware+0x234>)
 8009d22:	f7ff f8e7 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009d26:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f040 8133 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // wait for READY state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_READY, 100);
 8009d30:	2264      	movs	r2, #100	@ 0x64
 8009d32:	495f      	ldr	r1, [pc, #380]	@ (8009eb0 <sl_wfx_download_run_firmware+0x240>)
 8009d34:	4860      	ldr	r0, [pc, #384]	@ (8009eb8 <sl_wfx_download_run_firmware+0x248>)
 8009d36:	f000 f93d 	bl	8009fb4 <sl_wfx_poll_for_value>
 8009d3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f040 8129 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // SB misc initialization. Work around for chips < A2.
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0xFFFFFFFF);
 8009d44:	f04f 31ff 	mov.w	r1, #4294967295
 8009d48:	4860      	ldr	r0, [pc, #384]	@ (8009ecc <sl_wfx_download_run_firmware+0x25c>)
 8009d4a:	f7ff f8d3 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009d4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f040 811f 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // write image length
  sl_wfx_host_get_firmware_size(&image_length);
 8009d58:	f107 030c 	add.w	r3, r7, #12
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 fae5 	bl	800a32c <sl_wfx_host_get_firmware_size>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_IMAGE_SIZE, image_length - FW_HASH_SIZE - FW_SIGNATURE_SIZE - FW_KEYSET_SIZE);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3b50      	subs	r3, #80	@ 0x50
 8009d66:	4619      	mov	r1, r3
 8009d68:	4859      	ldr	r0, [pc, #356]	@ (8009ed0 <sl_wfx_download_run_firmware+0x260>)
 8009d6a:	f7ff f8c3 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009d6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f040 810f 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // get firmware keyset, which is the first FW_KEYSET_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_KEYSET_SIZE);
 8009d78:	1d3b      	adds	r3, r7, #4
 8009d7a:	2108      	movs	r1, #8
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 fab9 	bl	800a2f4 <sl_wfx_host_get_firmware_data>
 8009d82:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f040 8105 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // check if the firmware keyset corresponds to the chip keyset
  result = sl_wfx_compare_keysets(encryption_keyset, (char *)buffer);
 8009d8c:	4b4d      	ldr	r3, [pc, #308]	@ (8009ec4 <sl_wfx_download_run_firmware+0x254>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	4611      	mov	r1, r2
 8009d94:	4618      	mov	r0, r3
 8009d96:	f000 f93c 	bl	800a012 <sl_wfx_compare_keysets>
 8009d9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f040 80f9 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // write image signature, which is the next FW_SIGNATURE_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_SIGNATURE_SIZE);
 8009da4:	1d3b      	adds	r3, r7, #4
 8009da6:	2140      	movs	r1, #64	@ 0x40
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 faa3 	bl	800a2f4 <sl_wfx_host_get_firmware_data>
 8009dae:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f040 80ef 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_SIGNATURE, buffer, FW_SIGNATURE_SIZE);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2240      	movs	r2, #64	@ 0x40
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4845      	ldr	r0, [pc, #276]	@ (8009ed4 <sl_wfx_download_run_firmware+0x264>)
 8009dc0:	f7ff f878 	bl	8008eb4 <sl_wfx_apb_write>
 8009dc4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f040 80e4 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // write image hash, which is the next  FW_HASH_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_HASH_SIZE);
 8009dce:	1d3b      	adds	r3, r7, #4
 8009dd0:	2108      	movs	r1, #8
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 fa8e 	bl	800a2f4 <sl_wfx_host_get_firmware_data>
 8009dd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f040 80da 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_FW_HASH, buffer, FW_HASH_SIZE);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2208      	movs	r2, #8
 8009de6:	4619      	mov	r1, r3
 8009de8:	483b      	ldr	r0, [pc, #236]	@ (8009ed8 <sl_wfx_download_run_firmware+0x268>)
 8009dea:	f7ff f863 	bl	8008eb4 <sl_wfx_apb_write>
 8009dee:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f040 80cf 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // write version, this is a pre-defined value (?)
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_FW_VERSION, FW_VERSION_VALUE);
 8009df8:	2101      	movs	r1, #1
 8009dfa:	4838      	ldr	r0, [pc, #224]	@ (8009edc <sl_wfx_download_run_firmware+0x26c>)
 8009dfc:	f7ff f87a 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009e00:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f040 80c6 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // notify NCP that upload is starting
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_PENDING);
 8009e0a:	4935      	ldr	r1, [pc, #212]	@ (8009ee0 <sl_wfx_download_run_firmware+0x270>)
 8009e0c:	4825      	ldr	r0, [pc, #148]	@ (8009ea4 <sl_wfx_download_run_firmware+0x234>)
 8009e0e:	f7ff f871 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009e12:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f040 80bd 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

  // skip signature and hash from image length
  image_length -= (FW_HASH_SIZE + FW_SIGNATURE_SIZE + FW_KEYSET_SIZE);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3b50      	subs	r3, #80	@ 0x50
 8009e20:	60fb      	str	r3, [r7, #12]

  /* Calculate number of download blocks */
  num_blocks = (image_length - 1) / DOWNLOAD_BLOCK_SIZE + 1;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3b01      	subs	r3, #1
 8009e26:	0a9b      	lsrs	r3, r3, #10
 8009e28:	3301      	adds	r3, #1
 8009e2a:	61bb      	str	r3, [r7, #24]

  /* Firmware downloading loop */
  for ( block = 0; block < num_blocks; block++ ) {
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e30:	e093      	b.n	8009f5a <sl_wfx_download_run_firmware+0x2ea>
    /* loop until put - get <= 24K */
    for ( i = 0; i < 100; i++ ) {
 8009e32:	2300      	movs	r3, #0
 8009e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e36:	e015      	b.n	8009e64 <sl_wfx_download_run_firmware+0x1f4>
      if ((put - get) <= (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	6a3a      	ldr	r2, [r7, #32]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	f5b3 4ff8 	cmp.w	r3, #31744	@ 0x7c00
 8009e42:	d913      	bls.n	8009e6c <sl_wfx_download_run_firmware+0x1fc>
        break;
      }

      get = 0;
 8009e44:	2300      	movs	r3, #0
 8009e46:	60bb      	str	r3, [r7, #8]
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_GET, &get);
 8009e48:	f107 0308 	add.w	r3, r7, #8
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4817      	ldr	r0, [pc, #92]	@ (8009eac <sl_wfx_download_run_firmware+0x23c>)
 8009e50:	f7ff f867 	bl	8008f22 <sl_wfx_apb_read_32>
 8009e54:	62f8      	str	r0, [r7, #44]	@ 0x2c
      SL_WFX_ERROR_CHECK(result);
 8009e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f040 809c 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>
    for ( i = 0; i < 100; i++ ) {
 8009e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e60:	3301      	adds	r3, #1
 8009e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e66:	2b63      	cmp	r3, #99	@ 0x63
 8009e68:	d9e6      	bls.n	8009e38 <sl_wfx_download_run_firmware+0x1c8>
 8009e6a:	e000      	b.n	8009e6e <sl_wfx_download_run_firmware+0x1fe>
        break;
 8009e6c:	bf00      	nop
    }

    if ((put - get) > (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6a3a      	ldr	r2, [r7, #32]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	f5b3 4ff8 	cmp.w	r3, #31744	@ 0x7c00
 8009e78:	d93a      	bls.n	8009ef0 <sl_wfx_download_run_firmware+0x280>
      /* check the download status in NCP */
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 8009e7a:	f107 0310 	add.w	r3, r7, #16
 8009e7e:	4619      	mov	r1, r3
 8009e80:	480d      	ldr	r0, [pc, #52]	@ (8009eb8 <sl_wfx_download_run_firmware+0x248>)
 8009e82:	f7ff f84e 	bl	8008f22 <sl_wfx_apb_read_32>
 8009e86:	62f8      	str	r0, [r7, #44]	@ 0x2c
      SL_WFX_ERROR_CHECK(result);
 8009e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f040 8083 	bne.w	8009f96 <sl_wfx_download_run_firmware+0x326>

      if (value32 != NCP_STATE_DOWNLOAD_PENDING) {
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	4a13      	ldr	r2, [pc, #76]	@ (8009ee0 <sl_wfx_download_run_firmware+0x270>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d025      	beq.n	8009ee4 <sl_wfx_download_run_firmware+0x274>
        result = SL_STATUS_FAIL;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e9c:	e025      	b.n	8009eea <sl_wfx_download_run_firmware+0x27a>
 8009e9e:	bf00      	nop
 8009ea0:	12345678 	.word	0x12345678
 8009ea4:	0900c00c 	.word	0x0900c00c
 8009ea8:	0900c004 	.word	0x0900c004
 8009eac:	0900c008 	.word	0x0900c008
 8009eb0:	87654321 	.word	0x87654321
 8009eb4:	bd53ef99 	.word	0xbd53ef99
 8009eb8:	0900c010 	.word	0x0900c010
 8009ebc:	0900c080 	.word	0x0900c080
 8009ec0:	0900c0cc 	.word	0x0900c0cc
 8009ec4:	20000a70 	.word	0x20000a70
 8009ec8:	a753bd99 	.word	0xa753bd99
 8009ecc:	09004000 	.word	0x09004000
 8009ed0:	0900c000 	.word	0x0900c000
 8009ed4:	0900c014 	.word	0x0900c014
 8009ed8:	0900c054 	.word	0x0900c054
 8009edc:	0900c05c 	.word	0x0900c05c
 8009ee0:	abcddcba 	.word	0xabcddcba
      } else {
        result = SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT;
 8009ee4:	f640 3302 	movw	r3, #2818	@ 0xb02
 8009ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      SL_WFX_ERROR_CHECK(result);
 8009eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d152      	bne.n	8009f96 <sl_wfx_download_run_firmware+0x326>
    }

    /* calculate the block size */
    uint32_t block_size = image_length - put;
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	61fb      	str	r3, [r7, #28]
    if (block_size > DOWNLOAD_BLOCK_SIZE) {
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009efe:	d902      	bls.n	8009f06 <sl_wfx_download_run_firmware+0x296>
      block_size = DOWNLOAD_BLOCK_SIZE;
 8009f00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f04:	61fb      	str	r3, [r7, #28]
    }

    /* send the block to SRAM */
    result = sl_wfx_host_get_firmware_data(&buffer, block_size);
 8009f06:	1d3b      	adds	r3, r7, #4
 8009f08:	69f9      	ldr	r1, [r7, #28]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 f9f2 	bl	800a2f4 <sl_wfx_host_get_firmware_data>
 8009f10:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 8009f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d13e      	bne.n	8009f96 <sl_wfx_download_run_firmware+0x326>
    uint32_t block_address = ADDR_DOWNLOAD_FIFO_BASE + (put % DOWNLOAD_FIFO_SIZE);
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009f1e:	f103 6310 	add.w	r3, r3, #150994944	@ 0x9000000
 8009f22:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009f26:	617b      	str	r3, [r7, #20]
    result = sl_wfx_apb_write(block_address, buffer, block_size);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	69fa      	ldr	r2, [r7, #28]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	6978      	ldr	r0, [r7, #20]
 8009f30:	f7fe ffc0 	bl	8008eb4 <sl_wfx_apb_write>
 8009f34:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 8009f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d12c      	bne.n	8009f96 <sl_wfx_download_run_firmware+0x326>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_FW_LOAD)
    sl_wfx_host_log("FW> %d/%d \n\r", put, image_length);
#endif

    /* update the put register */
    put += block_size;
 8009f3c:	6a3a      	ldr	r2, [r7, #32]
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	4413      	add	r3, r2
 8009f42:	623b      	str	r3, [r7, #32]

    result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, put);
 8009f44:	6a39      	ldr	r1, [r7, #32]
 8009f46:	4816      	ldr	r0, [pc, #88]	@ (8009fa0 <sl_wfx_download_run_firmware+0x330>)
 8009f48:	f7fe ffd4 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009f4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 8009f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d120      	bne.n	8009f96 <sl_wfx_download_run_firmware+0x326>
  for ( block = 0; block < num_blocks; block++ ) {
 8009f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f56:	3301      	adds	r3, #1
 8009f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	f4ff af67 	bcc.w	8009e32 <sl_wfx_download_run_firmware+0x1c2>
  }   /* End of firmware download loop */

  // notify NCP that upload ended
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_COMPLETE);
 8009f64:	490f      	ldr	r1, [pc, #60]	@ (8009fa4 <sl_wfx_download_run_firmware+0x334>)
 8009f66:	4810      	ldr	r0, [pc, #64]	@ (8009fa8 <sl_wfx_download_run_firmware+0x338>)
 8009f68:	f7fe ffc4 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009f6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d110      	bne.n	8009f96 <sl_wfx_download_run_firmware+0x326>

  // wait for authentication result
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_AUTH_OK, 100);
 8009f74:	2264      	movs	r2, #100	@ 0x64
 8009f76:	490b      	ldr	r1, [pc, #44]	@ (8009fa4 <sl_wfx_download_run_firmware+0x334>)
 8009f78:	480c      	ldr	r0, [pc, #48]	@ (8009fac <sl_wfx_download_run_firmware+0x33c>)
 8009f7a:	f000 f81b 	bl	8009fb4 <sl_wfx_poll_for_value>
 8009f7e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d107      	bne.n	8009f96 <sl_wfx_download_run_firmware+0x326>

  // notify NCP that we are happy to run firmware
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_OK_TO_JUMP);
 8009f86:	490a      	ldr	r1, [pc, #40]	@ (8009fb0 <sl_wfx_download_run_firmware+0x340>)
 8009f88:	4807      	ldr	r0, [pc, #28]	@ (8009fa8 <sl_wfx_download_run_firmware+0x338>)
 8009f8a:	f7fe ffb3 	bl	8008ef4 <sl_wfx_apb_write_32>
 8009f8e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f92:	2b00      	cmp	r3, #0

  error_handler:
 8009f94:	bf00      	nop
  return result;
 8009f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3730      	adds	r7, #48	@ 0x30
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	0900c004 	.word	0x0900c004
 8009fa4:	d4c64a99 	.word	0xd4c64a99
 8009fa8:	0900c00c 	.word	0x0900c00c
 8009fac:	0900c010 	.word	0x0900c010
 8009fb0:	174fc882 	.word	0x174fc882

08009fb4 <sl_wfx_poll_for_value>:
 * @return SL_STATUS_OK if the value is received correctly,
 * SL_STATUS_TIMEOUT if the value is not found in time,
 * SL_STATUS_FAIL if not able to poll the value from the Wi-Fi chip
 *****************************************************************************/
static sl_status_t sl_wfx_poll_for_value(uint32_t address, uint32_t polled_value, uint32_t max_retries)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  uint32_t    value;
  sl_status_t result = SL_STATUS_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	617b      	str	r3, [r7, #20]

  for (; max_retries > 0; max_retries--) {
 8009fc4:	e013      	b.n	8009fee <sl_wfx_poll_for_value+0x3a>
    result = sl_wfx_apb_read_32(address, &value);
 8009fc6:	f107 0310 	add.w	r3, r7, #16
 8009fca:	4619      	mov	r1, r3
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f7fe ffa8 	bl	8008f22 <sl_wfx_apb_read_32>
 8009fd2:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d116      	bne.n	800a008 <sl_wfx_poll_for_value+0x54>
    if (value == polled_value) {
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d009      	beq.n	8009ff6 <sl_wfx_poll_for_value+0x42>
      break;
    } else {
      sl_wfx_host_wait(1);
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	f000 faa4 	bl	800a530 <sl_wfx_host_wait>
  for (; max_retries > 0; max_retries--) {
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	607b      	str	r3, [r7, #4]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e8      	bne.n	8009fc6 <sl_wfx_poll_for_value+0x12>
 8009ff4:	e000      	b.n	8009ff8 <sl_wfx_poll_for_value+0x44>
      break;
 8009ff6:	bf00      	nop
    }
  }
  if (value != polled_value) {
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d002      	beq.n	800a006 <sl_wfx_poll_for_value+0x52>
    result = SL_STATUS_TIMEOUT;
 800a000:	2307      	movs	r3, #7
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	e000      	b.n	800a008 <sl_wfx_poll_for_value+0x54>
  }

  error_handler:
 800a006:	bf00      	nop
  return result;
 800a008:	697b      	ldr	r3, [r7, #20]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3718      	adds	r7, #24
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <sl_wfx_compare_keysets>:
 * @param firmware_keyset is the 8 first bytes of the firmware
 * @return SL_STATUS_OK if the firmware is compatible with the WF200,
 * SL_STATUS_WIFI_INVALID_KEY otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_compare_keysets(uint8_t chip_keyset, char *firmware_keyset)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	4603      	mov	r3, r0
 800a01a:	6039      	str	r1, [r7, #0]
 800a01c:	71fb      	strb	r3, [r7, #7]
  sl_status_t result;
  char        keyset_string[3];
  uint8_t     keyset_value;

  keyset_string[0] = *(firmware_keyset + 6);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	799b      	ldrb	r3, [r3, #6]
 800a022:	723b      	strb	r3, [r7, #8]
  keyset_string[1] = *(firmware_keyset + 7);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	79db      	ldrb	r3, [r3, #7]
 800a028:	727b      	strb	r3, [r7, #9]
  keyset_string[2] = '\0';
 800a02a:	2300      	movs	r3, #0
 800a02c:	72bb      	strb	r3, [r7, #10]
  keyset_value     = (uint8_t)strtoul(keyset_string, NULL, 16);
 800a02e:	f107 0308 	add.w	r3, r7, #8
 800a032:	2210      	movs	r2, #16
 800a034:	2100      	movs	r1, #0
 800a036:	4618      	mov	r0, r3
 800a038:	f011 fed6 	bl	801bde8 <strtoul>
 800a03c:	4603      	mov	r3, r0
 800a03e:	72fb      	strb	r3, [r7, #11]

  if (keyset_value == chip_keyset) {
 800a040:	7afa      	ldrb	r2, [r7, #11]
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	429a      	cmp	r2, r3
 800a046:	d102      	bne.n	800a04e <sl_wfx_compare_keysets+0x3c>
    result = SL_STATUS_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	e002      	b.n	800a054 <sl_wfx_compare_keysets+0x42>
  } else {
    result = SL_STATUS_WIFI_INVALID_KEY;
 800a04e:	f640 3301 	movw	r3, #2817	@ 0xb01
 800a052:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a054:	68fb      	ldr	r3, [r7, #12]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
	...

0800a060 <sl_wfx_get_status_code>:
 * @param wfx_status is the status returned by the WFx
 * @param command_id is the ID of the command
 * @return corresponding driver status code enumerated in sl_status_t
 *****************************************************************************/
sl_status_t sl_wfx_get_status_code(uint32_t wfx_status, uint8_t command_id)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  sl_status_t result;

  if (command_id & SL_WFX_MSG_ID_GENERAL_API_MASK) {
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	f003 0320 	and.w	r3, r3, #32
 800a072:	2b00      	cmp	r3, #0
 800a074:	d05b      	beq.n	800a12e <sl_wfx_get_status_code+0xce>
    switch (wfx_status) {
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f241 2256 	movw	r2, #4694	@ 0x1256
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d045      	beq.n	800a10c <sl_wfx_get_status_code+0xac>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f241 2256 	movw	r2, #4694	@ 0x1256
 800a086:	4293      	cmp	r3, r2
 800a088:	d84e      	bhi.n	800a128 <sl_wfx_get_status_code+0xc8>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f241 2234 	movw	r2, #4660	@ 0x1234
 800a090:	4293      	cmp	r3, r2
 800a092:	d038      	beq.n	800a106 <sl_wfx_get_status_code+0xa6>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f241 2234 	movw	r2, #4660	@ 0x1234
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d844      	bhi.n	800a128 <sl_wfx_get_status_code+0xc8>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2baf      	cmp	r3, #175	@ 0xaf
 800a0a2:	d033      	beq.n	800a10c <sl_wfx_get_status_code+0xac>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2baf      	cmp	r3, #175	@ 0xaf
 800a0a8:	d83e      	bhi.n	800a128 <sl_wfx_get_status_code+0xc8>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b9e      	cmp	r3, #158	@ 0x9e
 800a0ae:	d02a      	beq.n	800a106 <sl_wfx_get_status_code+0xa6>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2b9e      	cmp	r3, #158	@ 0x9e
 800a0b4:	d838      	bhi.n	800a128 <sl_wfx_get_status_code+0xc8>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b8d      	cmp	r3, #141	@ 0x8d
 800a0ba:	d027      	beq.n	800a10c <sl_wfx_get_status_code+0xac>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b8d      	cmp	r3, #141	@ 0x8d
 800a0c0:	d832      	bhi.n	800a128 <sl_wfx_get_status_code+0xc8>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b7c      	cmp	r3, #124	@ 0x7c
 800a0c6:	d021      	beq.n	800a10c <sl_wfx_get_status_code+0xac>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b7c      	cmp	r3, #124	@ 0x7c
 800a0cc:	d82c      	bhi.n	800a128 <sl_wfx_get_status_code+0xc8>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b6b      	cmp	r3, #107	@ 0x6b
 800a0d2:	d01b      	beq.n	800a10c <sl_wfx_get_status_code+0xac>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b6b      	cmp	r3, #107	@ 0x6b
 800a0d8:	d826      	bhi.n	800a128 <sl_wfx_get_status_code+0xc8>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	d80f      	bhi.n	800a100 <sl_wfx_get_status_code+0xa0>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d820      	bhi.n	800a128 <sl_wfx_get_status_code+0xc8>
 800a0e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ec <sl_wfx_get_status_code+0x8c>)
 800a0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ec:	0800a107 	.word	0x0800a107
 800a0f0:	0800a10d 	.word	0x0800a10d
 800a0f4:	0800a113 	.word	0x0800a113
 800a0f8:	0800a119 	.word	0x0800a119
 800a0fc:	0800a121 	.word	0x0800a121
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b5a      	cmp	r3, #90	@ 0x5a
 800a104:	d110      	bne.n	800a128 <sl_wfx_get_status_code+0xc8>
      case SL_WFX_STATUS_SUCCESS:
      case SL_WFX_MAC_KEY_STATUS_SUCCESS:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_SUCCESS:
      case SL_WFX_PREVENT_ROLLBACK_CNF_SUCCESS:
        result = SL_STATUS_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	60fb      	str	r3, [r7, #12]
        break;
 800a10a:	e075      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case SL_WFX_MAC_KEY_STATUS_FAILED_KEY_ALREADY_BURNED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_RAM_MODE_NOT_ALLOWED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_UNKNOWN_MODE:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_FAILED:
      case SL_WFX_PREVENT_ROLLBACK_CNF_WRONG_MAGIC_WORD:
        result = SL_STATUS_FAIL;
 800a10c:	2301      	movs	r3, #1
 800a10e:	60fb      	str	r3, [r7, #12]
        break;
 800a110:	e072      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case SL_WFX_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 800a112:	2321      	movs	r3, #33	@ 0x21
 800a114:	60fb      	str	r3, [r7, #12]
        break;
 800a116:	e06f      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case SL_WFX_STATUS_GPIO_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 800a118:	f640 3304 	movw	r3, #2820	@ 0xb04
 800a11c:	60fb      	str	r3, [r7, #12]
        break;
 800a11e:	e06b      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case SL_WFX_ERROR_UNSUPPORTED_MSG_ID:
        result = SL_STATUS_WIFI_UNSUPPORTED_MESSAGE_ID;
 800a120:	f640 3303 	movw	r3, #2819	@ 0xb03
 800a124:	60fb      	str	r3, [r7, #12]
        break;
 800a126:	e067      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 800a128:	2301      	movs	r3, #1
 800a12a:	60fb      	str	r3, [r7, #12]
        break;
 800a12c:	e064      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
    }
  } else {
    switch (wfx_status) {
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b14      	cmp	r3, #20
 800a132:	d85e      	bhi.n	800a1f2 <sl_wfx_get_status_code+0x192>
 800a134:	a201      	add	r2, pc, #4	@ (adr r2, 800a13c <sl_wfx_get_status_code+0xdc>)
 800a136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13a:	bf00      	nop
 800a13c:	0800a191 	.word	0x0800a191
 800a140:	0800a197 	.word	0x0800a197
 800a144:	0800a19d 	.word	0x0800a19d
 800a148:	0800a1a5 	.word	0x0800a1a5
 800a14c:	0800a1ab 	.word	0x0800a1ab
 800a150:	0800a1b3 	.word	0x0800a1b3
 800a154:	0800a1bb 	.word	0x0800a1bb
 800a158:	0800a1c3 	.word	0x0800a1c3
 800a15c:	0800a1cb 	.word	0x0800a1cb
 800a160:	0800a1d3 	.word	0x0800a1d3
 800a164:	0800a1db 	.word	0x0800a1db
 800a168:	0800a1f3 	.word	0x0800a1f3
 800a16c:	0800a1f3 	.word	0x0800a1f3
 800a170:	0800a1f3 	.word	0x0800a1f3
 800a174:	0800a1f3 	.word	0x0800a1f3
 800a178:	0800a1f3 	.word	0x0800a1f3
 800a17c:	0800a1f3 	.word	0x0800a1f3
 800a180:	0800a1f3 	.word	0x0800a1f3
 800a184:	0800a1f3 	.word	0x0800a1f3
 800a188:	0800a1e3 	.word	0x0800a1e3
 800a18c:	0800a1eb 	.word	0x0800a1eb
      case WFM_STATUS_SUCCESS:
        result = SL_STATUS_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	60fb      	str	r3, [r7, #12]
        break;
 800a194:	e030      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 800a196:	2321      	movs	r3, #33	@ 0x21
 800a198:	60fb      	str	r3, [r7, #12]
        break;
 800a19a:	e02d      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WRONG_STATE:
        result = SL_STATUS_WIFI_WRONG_STATE;
 800a19c:	f640 3318 	movw	r3, #2840	@ 0xb18
 800a1a0:	60fb      	str	r3, [r7, #12]
        break;
 800a1a2:	e029      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_GENERAL_FAILURE:
        result = SL_STATUS_FAIL;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	60fb      	str	r3, [r7, #12]
        break;
 800a1a8:	e026      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CHANNEL_NOT_ALLOWED:
        result = SL_STATUS_WIFI_CHANNEL_NOT_ALLOWED;
 800a1aa:	f640 3319 	movw	r3, #2841	@ 0xb19
 800a1ae:	60fb      	str	r3, [r7, #12]
        break;
 800a1b0:	e022      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 800a1b2:	f640 3304 	movw	r3, #2820	@ 0xb04
 800a1b6:	60fb      	str	r3, [r7, #12]
        break;
 800a1b8:	e01e      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_NO_MATCHING_AP:
        result = SL_STATUS_WIFI_NO_MATCHING_AP;
 800a1ba:	f640 331a 	movw	r3, #2842	@ 0xb1a
 800a1be:	60fb      	str	r3, [r7, #12]
        break;
 800a1c0:	e01a      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_ABORTED:
        result = SL_STATUS_WIFI_CONNECTION_ABORTED;
 800a1c2:	f640 331b 	movw	r3, #2843	@ 0xb1b
 800a1c6:	60fb      	str	r3, [r7, #12]
        break;
 800a1c8:	e016      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_TIMEOUT:
        result = SL_STATUS_WIFI_CONNECTION_TIMEOUT;
 800a1ca:	f640 331c 	movw	r3, #2844	@ 0xb1c
 800a1ce:	60fb      	str	r3, [r7, #12]
        break;
 800a1d0:	e012      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
        result = SL_STATUS_WIFI_CONNECTION_REJECTED_BY_AP;
 800a1d2:	f640 331d 	movw	r3, #2845	@ 0xb1d
 800a1d6:	60fb      	str	r3, [r7, #12]
        break;
 800a1d8:	e00e      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_AUTH_FAILURE:
        result = SL_STATUS_WIFI_CONNECTION_AUTH_FAILURE;
 800a1da:	f640 331e 	movw	r3, #2846	@ 0xb1e
 800a1de:	60fb      	str	r3, [r7, #12]
        break;
 800a1e0:	e00a      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_RETRY_EXCEEDED:
        result = SL_STATUS_WIFI_RETRY_EXCEEDED;
 800a1e2:	f640 331f 	movw	r3, #2847	@ 0xb1f
 800a1e6:	60fb      	str	r3, [r7, #12]
        break;
 800a1e8:	e006      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_TX_LIFETIME_EXCEEDED:
        result = SL_STATUS_WIFI_TX_LIFETIME_EXCEEDED;
 800a1ea:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 800a1ee:	60fb      	str	r3, [r7, #12]
        break;
 800a1f0:	e002      	b.n	800a1f8 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	60fb      	str	r3, [r7, #12]
        break;
 800a1f6:	bf00      	nop
    }
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK && result != SL_STATUS_WIFI_WARNING) {
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d008      	beq.n	800a210 <sl_wfx_get_status_code+0x1b0>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f640 3204 	movw	r2, #2820	@ 0xb04
 800a204:	4293      	cmp	r3, r2
 800a206:	d003      	beq.n	800a210 <sl_wfx_get_status_code+0x1b0>
    sl_wfx_host_log("Cnf status %u\n", result);
 800a208:	68f9      	ldr	r1, [r7, #12]
 800a20a:	4804      	ldr	r0, [pc, #16]	@ (800a21c <sl_wfx_get_status_code+0x1bc>)
 800a20c:	f000 fafa 	bl	800a804 <sl_wfx_host_log>
  }
#endif
  return result;
 800a210:	68fb      	ldr	r3, [r7, #12]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	0801eea0 	.word	0x0801eea0

0800a220 <sl_wfx_allocate_command_buffer>:
 *****************************************************************************/
sl_status_t sl_wfx_allocate_command_buffer(sl_wfx_generic_message_t **buffer,
                                           uint32_t command_id,
                                           sl_wfx_buffer_type_t type,
                                           uint32_t buffer_size)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	4613      	mov	r3, r2
 800a22e:	71fb      	strb	r3, [r7, #7]
    *buffer = (sl_wfx_generic_message_t *)(((uint8_t *)*buffer) + SL_WFX_SECURE_LINK_HEADER_SIZE);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    result = sl_wfx_host_allocate_buffer((void **)buffer,
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	4619      	mov	r1, r3
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f000 fab6 	bl	800a7a8 <sl_wfx_host_allocate_buffer>
 800a23c:	6178      	str	r0, [r7, #20]
                                         type,
                                         buffer_size);
    SL_WFX_ERROR_CHECK(result);
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d106      	bne.n	800a252 <sl_wfx_allocate_command_buffer+0x32>

    memset((*buffer), 0, buffer_size);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	2100      	movs	r1, #0
 800a24c:	4618      	mov	r0, r3
 800a24e:	f012 fc51 	bl	801caf4 <memset>
  }

  error_handler:
  return result;
 800a252:	697b      	ldr	r3, [r7, #20]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <sl_wfx_free_command_buffer>:
 * @param command_id is the ID of the command to check if encryption is required
 * @param type of the buffer to allocate
 * @return SL_STATUS_OK if the values are retrieved correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_free_command_buffer(sl_wfx_generic_message_t *buffer, uint32_t command_id, sl_wfx_buffer_type_t type)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	4613      	mov	r3, r2
 800a268:	71fb      	strb	r3, [r7, #7]
    return sl_wfx_host_free_buffer((uint8_t *)buffer - SL_WFX_SECURE_LINK_HEADER_SIZE, type);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    return sl_wfx_host_free_buffer(buffer, type);
 800a26a:	79fb      	ldrb	r3, [r7, #7]
 800a26c:	4619      	mov	r1, r3
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f000 faac 	bl	800a7cc <sl_wfx_host_free_buffer>
 800a274:	4603      	mov	r3, r0
  }
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <sl_wfx_host_init>:
}host_context;

/**************************************************************************//**
 * Initialize the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_init (void) {
 800a280:	b580      	push	{r7, lr}
 800a282:	af00      	add	r7, sp, #0
  host_context.sl_wfx_firmware_download_progress = 0;
 800a284:	4b16      	ldr	r3, [pc, #88]	@ (800a2e0 <sl_wfx_host_init+0x60>)
 800a286:	2200      	movs	r2, #0
 800a288:	601a      	str	r2, [r3, #0]
  wifi_scan_sem = xSemaphoreCreateBinary();
 800a28a:	2203      	movs	r2, #3
 800a28c:	2100      	movs	r1, #0
 800a28e:	2001      	movs	r0, #1
 800a290:	f001 fdb0 	bl	800bdf4 <xQueueGenericCreate>
 800a294:	4603      	mov	r3, r0
 800a296:	4a13      	ldr	r2, [pc, #76]	@ (800a2e4 <sl_wfx_host_init+0x64>)
 800a298:	6013      	str	r3, [r2, #0]
  sl_wfx_driver_mutex = xSemaphoreCreateBinary();
 800a29a:	2203      	movs	r2, #3
 800a29c:	2100      	movs	r1, #0
 800a29e:	2001      	movs	r0, #1
 800a2a0:	f001 fda8 	bl	800bdf4 <xQueueGenericCreate>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	4a10      	ldr	r2, [pc, #64]	@ (800a2e8 <sl_wfx_host_init+0x68>)
 800a2a8:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(sl_wfx_driver_mutex);
 800a2aa:	4b0f      	ldr	r3, [pc, #60]	@ (800a2e8 <sl_wfx_host_init+0x68>)
 800a2ac:	6818      	ldr	r0, [r3, #0]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	f001 fe26 	bl	800bf04 <xQueueGenericSend>
//  sl_wfx_driver_mutex = true;
  sl_wfx_wake_up_sem = xSemaphoreCreateBinary();
 800a2b8:	2203      	movs	r2, #3
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	2001      	movs	r0, #1
 800a2be:	f001 fd99 	bl	800bdf4 <xQueueGenericCreate>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	4a09      	ldr	r2, [pc, #36]	@ (800a2ec <sl_wfx_host_init+0x6c>)
 800a2c6:	6013      	str	r3, [r2, #0]
  sl_wfx_confirmation_queue = xQueueCreate(1, sizeof(uint8_t));
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	2001      	movs	r0, #1
 800a2ce:	f001 fd91 	bl	800bdf4 <xQueueGenericCreate>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	4a06      	ldr	r2, [pc, #24]	@ (800a2f0 <sl_wfx_host_init+0x70>)
 800a2d6:	6013      	str	r3, [r2, #0]

  return SL_STATUS_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	200013b4 	.word	0x200013b4
 800a2e4:	200013b0 	.word	0x200013b0
 800a2e8:	200013ac 	.word	0x200013ac
 800a2ec:	200013a8 	.word	0x200013a8
 800a2f0:	200013a4 	.word	0x200013a4

0800a2f4 <sl_wfx_host_get_firmware_data>:

/**************************************************************************//**
 * Get a firmware chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_data (const uint8_t** data, uint32_t data_size) {
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  *data = &sl_wfx_firmware[host_context.sl_wfx_firmware_download_progress];
 800a2fe:	4b09      	ldr	r3, [pc, #36]	@ (800a324 <sl_wfx_host_get_firmware_data+0x30>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a09      	ldr	r2, [pc, #36]	@ (800a328 <sl_wfx_host_get_firmware_data+0x34>)
 800a304:	441a      	add	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	601a      	str	r2, [r3, #0]
  host_context.sl_wfx_firmware_download_progress += data_size;
 800a30a:	4b06      	ldr	r3, [pc, #24]	@ (800a324 <sl_wfx_host_get_firmware_data+0x30>)
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	4413      	add	r3, r2
 800a312:	4a04      	ldr	r2, [pc, #16]	@ (800a324 <sl_wfx_host_get_firmware_data+0x30>)
 800a314:	6013      	str	r3, [r2, #0]
  
  return SL_STATUS_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	200013b4 	.word	0x200013b4
 800a328:	080223f0 	.word	0x080223f0

0800a32c <sl_wfx_host_get_firmware_size>:

/**************************************************************************//**
 * Get the firmware size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_size (uint32_t* firmware_size) {
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  *firmware_size = sizeof(sl_wfx_firmware);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a04      	ldr	r2, [pc, #16]	@ (800a348 <sl_wfx_host_get_firmware_size+0x1c>)
 800a338:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	0004bc50 	.word	0x0004bc50

0800a34c <sl_wfx_host_get_pds_data>:

/**************************************************************************//**
 * Get a PDS chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_data (const char **pds_data, uint16_t index) {
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	460b      	mov	r3, r1
 800a356:	807b      	strh	r3, [r7, #2]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 800a358:	4b0e      	ldr	r3, [pc, #56]	@ (800a394 <sl_wfx_host_get_pds_data+0x48>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800a360:	2206      	movs	r2, #6
 800a362:	4619      	mov	r1, r3
 800a364:	480c      	ldr	r0, [pc, #48]	@ (800a398 <sl_wfx_host_get_pds_data+0x4c>)
 800a366:	f012 fbcd 	bl	801cb04 <strncmp>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d106      	bne.n	800a37e <sl_wfx_host_get_pds_data+0x32>
    *pds_data = pds_table_brd8023a[index];
 800a370:	887b      	ldrh	r3, [r7, #2]
 800a372:	4a0a      	ldr	r2, [pc, #40]	@ (800a39c <sl_wfx_host_get_pds_data+0x50>)
 800a374:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	e005      	b.n	800a38a <sl_wfx_host_get_pds_data+0x3e>
  } else {
    *pds_data = pds_table_brd8022a[index];
 800a37e:	887b      	ldrh	r3, [r7, #2]
 800a380:	4a07      	ldr	r2, [pc, #28]	@ (800a3a0 <sl_wfx_host_get_pds_data+0x54>)
 800a382:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	601a      	str	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	20000a6c 	.word	0x20000a6c
 800a398:	0801f13c 	.word	0x0801f13c
 800a39c:	080223d8 	.word	0x080223d8
 800a3a0:	080223c0 	.word	0x080223c0

0800a3a4 <sl_wfx_host_get_pds_size>:

/**************************************************************************//**
 * Get PDS size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_size(uint16_t *pds_size)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a3dc <sl_wfx_host_get_pds_size+0x38>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800a3b4:	2206      	movs	r2, #6
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	4809      	ldr	r0, [pc, #36]	@ (800a3e0 <sl_wfx_host_get_pds_size+0x3c>)
 800a3ba:	f012 fba3 	bl	801cb04 <strncmp>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d103      	bne.n	800a3cc <sl_wfx_host_get_pds_size+0x28>
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8023a);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2206      	movs	r2, #6
 800a3c8:	801a      	strh	r2, [r3, #0]
 800a3ca:	e002      	b.n	800a3d2 <sl_wfx_host_get_pds_size+0x2e>
  } else {
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8022a);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2206      	movs	r2, #6
 800a3d0:	801a      	strh	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	20000a6c 	.word	0x20000a6c
 800a3e0:	0801f13c 	.word	0x0801f13c

0800a3e4 <sl_wfx_host_deinit>:

/**************************************************************************//**
 * Deinit the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit (void) {
 800a3e4:	b480      	push	{r7}
 800a3e6:	af00      	add	r7, sp, #0
  //Commented for now, waiting for driver fix
  //vQueueDelete(wifi_event_queue);
  //vSemaphoreDelete(sl_wfx_driver_mutex);
  //vSemaphoreDelete(sl_wfx_wake_up_sem);

  return SL_STATUS_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <sl_wfx_host_reset_chip>:

/**************************************************************************//**
 * Reset the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_reset_chip(void) {
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2101      	movs	r1, #1
 800a3fc:	4808      	ldr	r0, [pc, #32]	@ (800a420 <sl_wfx_host_reset_chip+0x2c>)
 800a3fe:	f7fc fc1b 	bl	8006c38 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800a402:	200a      	movs	r0, #10
 800a404:	f7fb fc3c 	bl	8005c80 <HAL_Delay>
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_SET);
 800a408:	2201      	movs	r2, #1
 800a40a:	2101      	movs	r1, #1
 800a40c:	4804      	ldr	r0, [pc, #16]	@ (800a420 <sl_wfx_host_reset_chip+0x2c>)
 800a40e:	f7fc fc13 	bl	8006c38 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800a412:	200a      	movs	r0, #10
 800a414:	f7fb fc34 	bl	8005c80 <HAL_Delay>

  return SL_STATUS_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	40020800 	.word	0x40020800

0800a424 <sl_wfx_host_set_wake_up_pin>:
}

/**************************************************************************//**
 * Set or reset the wake-up pin 
 *****************************************************************************/
sl_status_t sl_wfx_host_set_wake_up_pin (uint8_t state) {
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	4603      	mov	r3, r0
 800a42c:	71fb      	strb	r3, [r7, #7]
  if (state > 0) {
 800a42e:	79fb      	ldrb	r3, [r7, #7]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d006      	beq.n	800a442 <sl_wfx_host_set_wake_up_pin+0x1e>
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_SET);
 800a434:	2201      	movs	r2, #1
 800a436:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a43a:	4807      	ldr	r0, [pc, #28]	@ (800a458 <sl_wfx_host_set_wake_up_pin+0x34>)
 800a43c:	f7fc fbfc 	bl	8006c38 <HAL_GPIO_WritePin>
 800a440:	e005      	b.n	800a44e <sl_wfx_host_set_wake_up_pin+0x2a>
  } else {
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_RESET);
 800a442:	2200      	movs	r2, #0
 800a444:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a448:	4803      	ldr	r0, [pc, #12]	@ (800a458 <sl_wfx_host_set_wake_up_pin+0x34>)
 800a44a:	f7fc fbf5 	bl	8006c38 <HAL_GPIO_WritePin>
  }
  
  return SL_STATUS_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	40020400 	.word	0x40020400

0800a45c <sl_wfx_host_wait_for_wake_up>:

/**************************************************************************//**
 * Wait for a wake-up
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_wake_up (void) {
 800a45c:	b580      	push	{r7, lr}
 800a45e:	af00      	add	r7, sp, #0
  xSemaphoreTake(sl_wfx_wake_up_sem, 0);
 800a460:	4b07      	ldr	r3, [pc, #28]	@ (800a480 <sl_wfx_host_wait_for_wake_up+0x24>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2100      	movs	r1, #0
 800a466:	4618      	mov	r0, r3
 800a468:	f002 f85e 	bl	800c528 <xQueueSemaphoreTake>
  xSemaphoreTake(sl_wfx_wake_up_sem, 3/portTICK_PERIOD_MS);
 800a46c:	4b04      	ldr	r3, [pc, #16]	@ (800a480 <sl_wfx_host_wait_for_wake_up+0x24>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2101      	movs	r1, #1
 800a472:	4618      	mov	r0, r3
 800a474:	f002 f858 	bl	800c528 <xQueueSemaphoreTake>

  return SL_STATUS_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	200013a8 	.word	0x200013a8

0800a484 <sl_wfx_host_sleep_grant>:
/**************************************************************************//**
 * Grant the Wi-Fi device to go to sleep mode
 *****************************************************************************/
sl_status_t sl_wfx_host_sleep_grant (sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     uint32_t length) {
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	4603      	mov	r3, r0
 800a48c:	603a      	str	r2, [r7, #0]
 800a48e:	71fb      	strb	r3, [r7, #7]
 800a490:	460b      	mov	r3, r1
 800a492:	71bb      	strb	r3, [r7, #6]
  /* To be implemented depending on the application */ 
  return SL_STATUS_WIFI_SLEEP_GRANTED;
 800a494:	f640 3308 	movw	r3, #2824	@ 0xb08
}
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <sl_wfx_host_setup_waited_event>:

/**************************************************************************//**
 * Set up a waited event
 *****************************************************************************/
sl_status_t sl_wfx_host_setup_waited_event (uint8_t event_id) {
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	71fb      	strb	r3, [r7, #7]
  host_context.waited_event_id = event_id;
 800a4ae:	4a05      	ldr	r2, [pc, #20]	@ (800a4c4 <sl_wfx_host_setup_waited_event+0x20>)
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	7113      	strb	r3, [r2, #4]
  
  return SL_STATUS_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	200013b4 	.word	0x200013b4

0800a4c8 <sl_wfx_host_wait_for_confirmation>:
/**************************************************************************//**
 * Wait for a confirmation
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_confirmation (uint8_t confirmation_id,
                                               uint32_t timeout_ms,
                                               void **event_payload_out) {
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	73fb      	strb	r3, [r7, #15]
  uint8_t posted_event_id;
  
  for (uint32_t i = 0; i < timeout_ms; i++) {
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	617b      	str	r3, [r7, #20]
 800a4da:	e01b      	b.n	800a514 <sl_wfx_host_wait_for_confirmation+0x4c>
    /* Wait for an event posted by the function sl_wfx_host_post_event() */
    if (xQueueReceive(sl_wfx_confirmation_queue, &posted_event_id, 1) == pdTRUE) {
 800a4dc:	4b12      	ldr	r3, [pc, #72]	@ (800a528 <sl_wfx_host_wait_for_confirmation+0x60>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f107 0113 	add.w	r1, r7, #19
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f001 ff3c 	bl	800c364 <xQueueReceive>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d10d      	bne.n	800a50e <sl_wfx_host_wait_for_confirmation+0x46>
      /* Once a message is received, check if it is the expected ID */
      if (confirmation_id == posted_event_id) {
 800a4f2:	7cfb      	ldrb	r3, [r7, #19]
 800a4f4:	7bfa      	ldrb	r2, [r7, #15]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d109      	bne.n	800a50e <sl_wfx_host_wait_for_confirmation+0x46>
        /* Pass the confirmation reply and return*/
        if (event_payload_out != NULL) {
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d004      	beq.n	800a50a <sl_wfx_host_wait_for_confirmation+0x42>
          *event_payload_out = sl_wfx_context->event_payload_buffer;
 800a500:	4b0a      	ldr	r3, [pc, #40]	@ (800a52c <sl_wfx_host_wait_for_confirmation+0x64>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	461a      	mov	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	601a      	str	r2, [r3, #0]
        }
        return SL_STATUS_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	e007      	b.n	800a51e <sl_wfx_host_wait_for_confirmation+0x56>
  for (uint32_t i = 0; i < timeout_ms; i++) {
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	3301      	adds	r3, #1
 800a512:	617b      	str	r3, [r7, #20]
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d3df      	bcc.n	800a4dc <sl_wfx_host_wait_for_confirmation+0x14>
      }
    }
  }
  
  /* The wait for the confirmation timed out, return */
  return SL_STATUS_TIMEOUT;
 800a51c:	2307      	movs	r3, #7
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3718      	adds	r7, #24
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	200013a4 	.word	0x200013a4
 800a52c:	20000a6c 	.word	0x20000a6c

0800a530 <sl_wfx_host_wait>:

/**************************************************************************//**
 * Wait function
 *****************************************************************************/
sl_status_t sl_wfx_host_wait (uint32_t wait_time) {
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  osDelay(wait_time);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f001 f80b 	bl	800b554 <osDelay>
  
  return SL_STATUS_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <sl_wfx_host_post_event>:

/**************************************************************************//**
 * Post an event comming from the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_post_event (sl_wfx_generic_message_t *event_payload) {
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08a      	sub	sp, #40	@ 0x28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  
  switch (event_payload->header.id) {
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	789b      	ldrb	r3, [r3, #2]
 800a554:	3bc3      	subs	r3, #195	@ 0xc3
 800a556:	2b21      	cmp	r3, #33	@ 0x21
 800a558:	f200 80f3 	bhi.w	800a742 <sl_wfx_host_post_event+0x1fa>
 800a55c:	a201      	add	r2, pc, #4	@ (adr r2, 800a564 <sl_wfx_host_post_event+0x1c>)
 800a55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a562:	bf00      	nop
 800a564:	0800a5ed 	.word	0x0800a5ed
 800a568:	0800a5f5 	.word	0x0800a5f5
 800a56c:	0800a5fd 	.word	0x0800a5fd
 800a570:	0800a743 	.word	0x0800a743
 800a574:	0800a605 	.word	0x0800a605
 800a578:	0800a743 	.word	0x0800a743
 800a57c:	0800a743 	.word	0x0800a743
 800a580:	0800a60d 	.word	0x0800a60d
 800a584:	0800a623 	.word	0x0800a623
 800a588:	0800a62b 	.word	0x0800a62b
 800a58c:	0800a633 	.word	0x0800a633
 800a590:	0800a63b 	.word	0x0800a63b
 800a594:	0800a643 	.word	0x0800a643
 800a598:	0800a743 	.word	0x0800a743
 800a59c:	0800a743 	.word	0x0800a743
 800a5a0:	0800a64b 	.word	0x0800a64b
 800a5a4:	0800a743 	.word	0x0800a743
 800a5a8:	0800a743 	.word	0x0800a743
 800a5ac:	0800a743 	.word	0x0800a743
 800a5b0:	0800a743 	.word	0x0800a743
 800a5b4:	0800a743 	.word	0x0800a743
 800a5b8:	0800a743 	.word	0x0800a743
 800a5bc:	0800a743 	.word	0x0800a743
 800a5c0:	0800a743 	.word	0x0800a743
 800a5c4:	0800a743 	.word	0x0800a743
 800a5c8:	0800a743 	.word	0x0800a743
 800a5cc:	0800a743 	.word	0x0800a743
 800a5d0:	0800a743 	.word	0x0800a743
 800a5d4:	0800a743 	.word	0x0800a743
 800a5d8:	0800a653 	.word	0x0800a653
 800a5dc:	0800a743 	.word	0x0800a743
 800a5e0:	0800a743 	.word	0x0800a743
 800a5e4:	0800a743 	.word	0x0800a743
 800a5e8:	0800a6cf 	.word	0x0800a6cf
    /******** INDICATION ********/
  case SL_WFX_CONNECT_IND_ID:
    {
      sl_wfx_connect_callback((sl_wfx_connect_ind_t*) event_payload);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fa41 	bl	800aa74 <sl_wfx_connect_callback>
      break;
 800a5f2:	e0a6      	b.n	800a742 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_DISCONNECT_IND_ID:
    {
      sl_wfx_disconnect_callback((sl_wfx_disconnect_ind_t*) event_payload);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fb4d 	bl	800ac94 <sl_wfx_disconnect_callback>
      break;
 800a5fa:	e0a2      	b.n	800a742 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_START_AP_IND_ID:
    {
      sl_wfx_start_ap_callback((sl_wfx_start_ap_ind_t*) event_payload);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fb87 	bl	800ad10 <sl_wfx_start_ap_callback>
      break;
 800a602:	e09e      	b.n	800a742 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_STOP_AP_IND_ID:
    {
      sl_wfx_stop_ap_callback((sl_wfx_stop_ap_ind_t*) event_payload);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fbdd 	bl	800adc4 <sl_wfx_stop_ap_callback>
      break;
 800a60a:	e09a      	b.n	800a742 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_RECEIVED_IND_ID:
    {
      sl_wfx_received_ind_t* ethernet_frame = (sl_wfx_received_ind_t*) event_payload;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	60fb      	str	r3, [r7, #12]
      if ( ethernet_frame->body.frame_type == 0 )
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	791b      	ldrb	r3, [r3, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f040 8093 	bne.w	800a740 <sl_wfx_host_post_event+0x1f8>
      {
        sl_wfx_host_received_frame_callback(ethernet_frame);
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f7fa f986 	bl	800492c <sl_wfx_host_received_frame_callback>
      }
      break;
 800a620:	e08e      	b.n	800a740 <sl_wfx_host_post_event+0x1f8>
    }
  case SL_WFX_SCAN_RESULT_IND_ID:
    {
      sl_wfx_scan_result_callback((sl_wfx_scan_result_ind_t*) event_payload);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f92e 	bl	800a884 <sl_wfx_scan_result_callback>
      break;
 800a628:	e08b      	b.n	800a742 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_SCAN_COMPLETE_IND_ID:
    {
      sl_wfx_scan_complete_callback((sl_wfx_scan_complete_ind_t*) event_payload);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f9ee 	bl	800aa0c <sl_wfx_scan_complete_callback>
      break;
 800a630:	e087      	b.n	800a742 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_CONNECTED_IND_ID:
    {
      sl_wfx_ap_client_connected_callback((sl_wfx_ap_client_connected_ind_t*) event_payload);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fc02 	bl	800ae3c <sl_wfx_ap_client_connected_callback>
      break;
 800a638:	e083      	b.n	800a742 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_REJECTED_IND_ID:
    {
      sl_wfx_ap_client_rejected_callback((sl_wfx_ap_client_rejected_ind_t*) event_payload);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fc3c 	bl	800aeb8 <sl_wfx_ap_client_rejected_callback>
      break;
 800a640:	e07f      	b.n	800a742 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_DISCONNECTED_IND_ID:
    {
      sl_wfx_ap_client_disconnected_callback((sl_wfx_ap_client_disconnected_ind_t*) event_payload);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fc6e 	bl	800af24 <sl_wfx_ap_client_disconnected_callback>
      break;
 800a648:	e07b      	b.n	800a742 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_EXT_AUTH_IND_ID:
    {
      sl_wfx_ext_auth_callback((sl_wfx_ext_auth_ind_t*) event_payload);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fca0 	bl	800af90 <sl_wfx_ext_auth_callback>
      break;
 800a650:	e077      	b.n	800a742 <sl_wfx_host_post_event+0x1fa>
    {
      break;
    }
  case SL_WFX_EXCEPTION_IND_ID:
    {
      sl_wfx_exception_ind_t *firmware_exception = (sl_wfx_exception_ind_t*)event_payload;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	613b      	str	r3, [r7, #16]
      uint8_t *exception_tmp = (uint8_t *) firmware_exception;
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	627b      	str	r3, [r7, #36]	@ 0x24
      printf("firmware exception %lu\r\n", firmware_exception->body.reason);
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	4619      	mov	r1, r3
 800a660:	4849      	ldr	r0, [pc, #292]	@ (800a788 <sl_wfx_host_post_event+0x240>)
 800a662:	f012 f8e5 	bl	801c830 <iprintf>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 800a666:	2300      	movs	r3, #0
 800a668:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a66a:	e029      	b.n	800a6c0 <sl_wfx_host_post_event+0x178>
        printf("hif: %.8x:", i);
 800a66c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a66e:	4619      	mov	r1, r3
 800a670:	4846      	ldr	r0, [pc, #280]	@ (800a78c <sl_wfx_host_post_event+0x244>)
 800a672:	f012 f8dd 	bl	801c830 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 800a676:	2300      	movs	r3, #0
 800a678:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800a67c:	e00d      	b.n	800a69a <sl_wfx_host_post_event+0x152>
            printf(" %.2x", *exception_tmp);
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	4619      	mov	r1, r3
 800a684:	4842      	ldr	r0, [pc, #264]	@ (800a790 <sl_wfx_host_post_event+0x248>)
 800a686:	f012 f8d3 	bl	801c830 <iprintf>
            exception_tmp++;
 800a68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68c:	3301      	adds	r3, #1
 800a68e:	627b      	str	r3, [r7, #36]	@ 0x24
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 800a690:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a694:	3301      	adds	r3, #1
 800a696:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800a69a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a69e:	2b0f      	cmp	r3, #15
 800a6a0:	d808      	bhi.n	800a6b4 <sl_wfx_host_post_event+0x16c>
 800a6a2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a6a4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a6a8:	4413      	add	r3, r2
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	8812      	ldrh	r2, [r2, #0]
 800a6ae:	b292      	uxth	r2, r2
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	dbe4      	blt.n	800a67e <sl_wfx_host_post_event+0x136>
        }
        printf("\r\n");
 800a6b4:	4837      	ldr	r0, [pc, #220]	@ (800a794 <sl_wfx_host_post_event+0x24c>)
 800a6b6:	f012 f923 	bl	801c900 <puts>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 800a6ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a6bc:	3310      	adds	r3, #16
 800a6be:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	881b      	ldrh	r3, [r3, #0]
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d3cf      	bcc.n	800a66c <sl_wfx_host_post_event+0x124>
      }
      break;
 800a6cc:	e039      	b.n	800a742 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_ERROR_IND_ID:
    {
      sl_wfx_error_ind_t *firmware_error = (sl_wfx_error_ind_t*)event_payload;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	617b      	str	r3, [r7, #20]
      uint8_t *error_tmp = (uint8_t *) firmware_error;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	61fb      	str	r3, [r7, #28]
      printf("firmware error %lu\r\n", firmware_error->body.type);
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	4619      	mov	r1, r3
 800a6dc:	482e      	ldr	r0, [pc, #184]	@ (800a798 <sl_wfx_host_post_event+0x250>)
 800a6de:	f012 f8a7 	bl	801c830 <iprintf>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	837b      	strh	r3, [r7, #26]
 800a6e6:	e024      	b.n	800a732 <sl_wfx_host_post_event+0x1ea>
        printf("hif: %.8x:", i);
 800a6e8:	8b7b      	ldrh	r3, [r7, #26]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4827      	ldr	r0, [pc, #156]	@ (800a78c <sl_wfx_host_post_event+0x244>)
 800a6ee:	f012 f89f 	bl	801c830 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	767b      	strb	r3, [r7, #25]
 800a6f6:	e00b      	b.n	800a710 <sl_wfx_host_post_event+0x1c8>
            printf(" %.2x", *error_tmp);
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	4824      	ldr	r0, [pc, #144]	@ (800a790 <sl_wfx_host_post_event+0x248>)
 800a700:	f012 f896 	bl	801c830 <iprintf>
            error_tmp++;
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	3301      	adds	r3, #1
 800a708:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 800a70a:	7e7b      	ldrb	r3, [r7, #25]
 800a70c:	3301      	adds	r3, #1
 800a70e:	767b      	strb	r3, [r7, #25]
 800a710:	7e7b      	ldrb	r3, [r7, #25]
 800a712:	2b0f      	cmp	r3, #15
 800a714:	d807      	bhi.n	800a726 <sl_wfx_host_post_event+0x1de>
 800a716:	8b7a      	ldrh	r2, [r7, #26]
 800a718:	7e7b      	ldrb	r3, [r7, #25]
 800a71a:	4413      	add	r3, r2
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	8812      	ldrh	r2, [r2, #0]
 800a720:	b292      	uxth	r2, r2
 800a722:	4293      	cmp	r3, r2
 800a724:	dbe8      	blt.n	800a6f8 <sl_wfx_host_post_event+0x1b0>
        }
        printf("\r\n");
 800a726:	481b      	ldr	r0, [pc, #108]	@ (800a794 <sl_wfx_host_post_event+0x24c>)
 800a728:	f012 f8ea 	bl	801c900 <puts>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 800a72c:	8b7b      	ldrh	r3, [r7, #26]
 800a72e:	3310      	adds	r3, #16
 800a730:	837b      	strh	r3, [r7, #26]
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	b29b      	uxth	r3, r3
 800a738:	8b7a      	ldrh	r2, [r7, #26]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d3d4      	bcc.n	800a6e8 <sl_wfx_host_post_event+0x1a0>
      }
      break;
 800a73e:	e000      	b.n	800a742 <sl_wfx_host_post_event+0x1fa>
      break;
 800a740:	bf00      	nop
    }
  }

  if (host_context.waited_event_id == event_payload->header.id) {
 800a742:	4b16      	ldr	r3, [pc, #88]	@ (800a79c <sl_wfx_host_post_event+0x254>)
 800a744:	791a      	ldrb	r2, [r3, #4]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	789b      	ldrb	r3, [r3, #2]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d117      	bne.n	800a77e <sl_wfx_host_post_event+0x236>
    if (event_payload->header.length < SL_WFX_EVENT_MAX_SIZE) {
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	b29b      	uxth	r3, r3
 800a754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a758:	d211      	bcs.n	800a77e <sl_wfx_host_post_event+0x236>
      /* Post the event in the queue */
      memcpy(sl_wfx_context->event_payload_buffer,
 800a75a:	4b11      	ldr	r3, [pc, #68]	@ (800a7a0 <sl_wfx_host_post_event+0x258>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4618      	mov	r0, r3
             (void*) event_payload,
             event_payload->header.length);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	881b      	ldrh	r3, [r3, #0]
 800a764:	b29b      	uxth	r3, r3
      memcpy(sl_wfx_context->event_payload_buffer,
 800a766:	461a      	mov	r2, r3
 800a768:	6879      	ldr	r1, [r7, #4]
 800a76a:	f012 fa80 	bl	801cc6e <memcpy>
      xQueueOverwrite(sl_wfx_confirmation_queue, (void *) &event_payload->header.id);
 800a76e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a4 <sl_wfx_host_post_event+0x25c>)
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	1c99      	adds	r1, r3, #2
 800a776:	2302      	movs	r3, #2
 800a778:	2200      	movs	r2, #0
 800a77a:	f001 fbc3 	bl	800bf04 <xQueueGenericSend>


    }
  }

  return SL_STATUS_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3728      	adds	r7, #40	@ 0x28
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	0801f144 	.word	0x0801f144
 800a78c:	0801f160 	.word	0x0801f160
 800a790:	0801f16c 	.word	0x0801f16c
 800a794:	0801f174 	.word	0x0801f174
 800a798:	0801f178 	.word	0x0801f178
 800a79c:	200013b4 	.word	0x200013b4
 800a7a0:	20000a6c 	.word	0x20000a6c
 800a7a4:	200013a4 	.word	0x200013a4

0800a7a8 <sl_wfx_host_allocate_buffer>:
/**************************************************************************//**
 * Allocate a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_allocate_buffer (void** buffer,
                                         sl_wfx_buffer_type_t type,
                                         uint32_t buffer_size) {
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	72fb      	strb	r3, [r7, #11]
  *buffer = pvPortMalloc( buffer_size);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f004 f8c0 	bl	800e93c <pvPortMalloc>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <sl_wfx_host_free_buffer>:

/**************************************************************************//**
 * Free a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_free_buffer (void* buffer, sl_wfx_buffer_type_t type) {
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	70fb      	strb	r3, [r7, #3]
  vPortFree(buffer);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f004 f97d 	bl	800ead8 <vPortFree>
  
  return SL_STATUS_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <sl_wfx_host_transmit_frame>:

/**************************************************************************//**
 * Host transmit frame
 *****************************************************************************/
sl_status_t sl_wfx_host_transmit_frame (void* frame, uint32_t frame_len) {
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  return sl_wfx_data_write(frame, frame_len);
 800a7f2:	6839      	ldr	r1, [r7, #0]
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7fe fb4c 	bl	8008e92 <sl_wfx_data_write>
 800a7fa:	4603      	mov	r3, r0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <sl_wfx_host_log>:

/**************************************************************************//**
 * Output driver logs
 *****************************************************************************/
#if SL_WFX_DEBUG_MASK
void sl_wfx_host_log (const char *string, ...) {
 800a804:	b40f      	push	{r0, r1, r2, r3}
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
  va_list valist;

  va_start(valist, string);
 800a80c:	f107 0314 	add.w	r3, r7, #20
 800a810:	607b      	str	r3, [r7, #4]
  vprintf(string, valist);
 800a812:	6879      	ldr	r1, [r7, #4]
 800a814:	6938      	ldr	r0, [r7, #16]
 800a816:	f012 f8bf 	bl	801c998 <viprintf>
  va_end(valist);
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a824:	b004      	add	sp, #16
 800a826:	4770      	bx	lr

0800a828 <sl_wfx_host_lock>:
#endif

/**************************************************************************//**
 * Lock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_lock (void) {
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
  sl_status_t status = SL_STATUS_TIMEOUT;
 800a82e:	2307      	movs	r3, #7
 800a830:	607b      	str	r3, [r7, #4]

if (xSemaphoreTake(sl_wfx_driver_mutex, 500) == pdTRUE) {
 800a832:	4b0b      	ldr	r3, [pc, #44]	@ (800a860 <sl_wfx_host_lock+0x38>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a83a:	4618      	mov	r0, r3
 800a83c:	f001 fe74 	bl	800c528 <xQueueSemaphoreTake>
 800a840:	4603      	mov	r3, r0
 800a842:	2b01      	cmp	r3, #1
 800a844:	d102      	bne.n	800a84c <sl_wfx_host_lock+0x24>
//	  if (sl_wfx_driver_mutex) {
//		  sl_wfx_driver_mutex = false;
	      status = SL_STATUS_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	607b      	str	r3, [r7, #4]
 800a84a:	e004      	b.n	800a856 <sl_wfx_host_lock+0x2e>
	    } else {
	      printf("Wi-Fi driver mutex timeout\r\n");
 800a84c:	4805      	ldr	r0, [pc, #20]	@ (800a864 <sl_wfx_host_lock+0x3c>)
 800a84e:	f012 f857 	bl	801c900 <puts>
	      status = SL_STATUS_TIMEOUT;
 800a852:	2307      	movs	r3, #7
 800a854:	607b      	str	r3, [r7, #4]
	    }

  return status;
 800a856:	687b      	ldr	r3, [r7, #4]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	200013ac 	.word	0x200013ac
 800a864:	0801f190 	.word	0x0801f190

0800a868 <sl_wfx_host_unlock>:

/**************************************************************************//**
 * Unlock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_unlock (void) {
 800a868:	b580      	push	{r7, lr}
 800a86a:	af00      	add	r7, sp, #0
	xSemaphoreGive(sl_wfx_driver_mutex);
 800a86c:	4b04      	ldr	r3, [pc, #16]	@ (800a880 <sl_wfx_host_unlock+0x18>)
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	2300      	movs	r3, #0
 800a872:	2200      	movs	r2, #0
 800a874:	2100      	movs	r1, #0
 800a876:	f001 fb45 	bl	800bf04 <xQueueGenericSend>
	//sl_wfx_driver_mutex = true;
  return SL_STATUS_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	200013ac 	.word	0x200013ac

0800a884 <sl_wfx_scan_result_callback>:


/**************************************************************************//**
 * Callback for individual scan result
 *****************************************************************************/
void sl_wfx_scan_result_callback (sl_wfx_scan_result_ind_t *scan_result) {
 800a884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a888:	b08a      	sub	sp, #40	@ 0x28
 800a88a:	af08      	add	r7, sp, #32
 800a88c:	6078      	str	r0, [r7, #4]
  scan_count++;
 800a88e:	4b5b      	ldr	r3, [pc, #364]	@ (800a9fc <sl_wfx_scan_result_callback+0x178>)
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	3301      	adds	r3, #1
 800a894:	b2da      	uxtb	r2, r3
 800a896:	4b59      	ldr	r3, [pc, #356]	@ (800a9fc <sl_wfx_scan_result_callback+0x178>)
 800a898:	701a      	strb	r2, [r3, #0]

  if (scan_verbose) {
 800a89a:	4b59      	ldr	r3, [pc, #356]	@ (800aa00 <sl_wfx_scan_result_callback+0x17c>)
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d03e      	beq.n	800a920 <sl_wfx_scan_result_callback+0x9c>
    /*Report one AP information*/
    printf(
 800a8a2:	4b56      	ldr	r3, [pc, #344]	@ (800a9fc <sl_wfx_scan_result_callback+0x178>)
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	469c      	mov	ip, r3
        "# %2d %2d %02X %03d %02X:%02X:%02X:%02X:%02X:%02X  %s\r\n",
        scan_count,
        scan_result->body.channel,
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8ac:	b29b      	uxth	r3, r3
    printf(
 800a8ae:	469e      	mov	lr, r3
        *(uint8_t *)&scan_result->body.security_mode,
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3330      	adds	r3, #48	@ 0x30
 800a8b4:	781b      	ldrb	r3, [r3, #0]
    printf(
 800a8b6:	4698      	mov	r8, r3
        ((int16_t)(scan_result->body.rcpi - 220) / 2),
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	3bdc      	subs	r3, #220	@ 0xdc
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	b21b      	sxth	r3, r3
    printf(
 800a8c4:	0fda      	lsrs	r2, r3, #31
 800a8c6:	4413      	add	r3, r2
 800a8c8:	105b      	asrs	r3, r3, #1
 800a8ca:	b21b      	sxth	r3, r3
 800a8cc:	461a      	mov	r2, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    printf(
 800a8d4:	4619      	mov	r1, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    printf(
 800a8dc:	4618      	mov	r0, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    printf(
 800a8e4:	461c      	mov	r4, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
    printf(
 800a8ec:	461d      	mov	r5, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    printf(
 800a8f4:	461e      	mov	r6, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
    printf(
 800a8fc:	603b      	str	r3, [r7, #0]
        scan_result->body.ssid_def.ssid);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	3308      	adds	r3, #8
    printf(
 800a902:	9307      	str	r3, [sp, #28]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	9306      	str	r3, [sp, #24]
 800a908:	9605      	str	r6, [sp, #20]
 800a90a:	9504      	str	r5, [sp, #16]
 800a90c:	9403      	str	r4, [sp, #12]
 800a90e:	9002      	str	r0, [sp, #8]
 800a910:	9101      	str	r1, [sp, #4]
 800a912:	9200      	str	r2, [sp, #0]
 800a914:	4643      	mov	r3, r8
 800a916:	4672      	mov	r2, lr
 800a918:	4661      	mov	r1, ip
 800a91a:	483a      	ldr	r0, [pc, #232]	@ (800aa04 <sl_wfx_scan_result_callback+0x180>)
 800a91c:	f011 ff88 	bl	801c830 <iprintf>
  }

  if (scan_count <= SL_WFX_MAX_SCAN_RESULTS) {
 800a920:	4b36      	ldr	r3, [pc, #216]	@ (800a9fc <sl_wfx_scan_result_callback+0x178>)
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	2b32      	cmp	r3, #50	@ 0x32
 800a926:	d863      	bhi.n	800a9f0 <sl_wfx_scan_result_callback+0x16c>
    scan_list[scan_count - 1].ssid_def = scan_result->body.ssid_def;
 800a928:	4b34      	ldr	r3, [pc, #208]	@ (800a9fc <sl_wfx_scan_result_callback+0x178>)
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	1e5a      	subs	r2, r3, #1
 800a92e:	4936      	ldr	r1, [pc, #216]	@ (800aa08 <sl_wfx_scan_result_callback+0x184>)
 800a930:	4613      	mov	r3, r2
 800a932:	005b      	lsls	r3, r3, #1
 800a934:	4413      	add	r3, r2
 800a936:	011b      	lsls	r3, r3, #4
 800a938:	1a9b      	subs	r3, r3, r2
 800a93a:	18ca      	adds	r2, r1, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3304      	adds	r3, #4
 800a940:	4610      	mov	r0, r2
 800a942:	f103 0420 	add.w	r4, r3, #32
 800a946:	4602      	mov	r2, r0
 800a948:	4619      	mov	r1, r3
 800a94a:	f8d1 c000 	ldr.w	ip, [r1]
 800a94e:	684e      	ldr	r6, [r1, #4]
 800a950:	688d      	ldr	r5, [r1, #8]
 800a952:	68c9      	ldr	r1, [r1, #12]
 800a954:	f8c2 c000 	str.w	ip, [r2]
 800a958:	6056      	str	r6, [r2, #4]
 800a95a:	6095      	str	r5, [r2, #8]
 800a95c:	60d1      	str	r1, [r2, #12]
 800a95e:	3310      	adds	r3, #16
 800a960:	3010      	adds	r0, #16
 800a962:	42a3      	cmp	r3, r4
 800a964:	d1ef      	bne.n	800a946 <sl_wfx_scan_result_callback+0xc2>
 800a966:	4602      	mov	r2, r0
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	6013      	str	r3, [r2, #0]
    scan_list[scan_count - 1].channel = scan_result->body.channel;
 800a96c:	4b23      	ldr	r3, [pc, #140]	@ (800a9fc <sl_wfx_scan_result_callback+0x178>)
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	1e5a      	subs	r2, r3, #1
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a976:	b298      	uxth	r0, r3
 800a978:	4923      	ldr	r1, [pc, #140]	@ (800aa08 <sl_wfx_scan_result_callback+0x184>)
 800a97a:	4613      	mov	r3, r2
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	4413      	add	r3, r2
 800a980:	011b      	lsls	r3, r3, #4
 800a982:	1a9b      	subs	r3, r3, r2
 800a984:	440b      	add	r3, r1
 800a986:	332a      	adds	r3, #42	@ 0x2a
 800a988:	4602      	mov	r2, r0
 800a98a:	801a      	strh	r2, [r3, #0]
    scan_list[scan_count - 1].security_mode = scan_result->body.security_mode;
 800a98c:	4b1b      	ldr	r3, [pc, #108]	@ (800a9fc <sl_wfx_scan_result_callback+0x178>)
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	1e5a      	subs	r2, r3, #1
 800a992:	491d      	ldr	r1, [pc, #116]	@ (800aa08 <sl_wfx_scan_result_callback+0x184>)
 800a994:	4613      	mov	r3, r2
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	4413      	add	r3, r2
 800a99a:	011b      	lsls	r3, r3, #4
 800a99c:	1a9b      	subs	r3, r3, r2
 800a99e:	440b      	add	r3, r1
 800a9a0:	332c      	adds	r3, #44	@ 0x2c
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800a9a8:	701a      	strb	r2, [r3, #0]
    scan_list[scan_count - 1].rcpi = scan_result->body.rcpi;
 800a9aa:	4b14      	ldr	r3, [pc, #80]	@ (800a9fc <sl_wfx_scan_result_callback+0x178>)
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	1e5a      	subs	r2, r3, #1
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800a9b4:	b298      	uxth	r0, r3
 800a9b6:	4914      	ldr	r1, [pc, #80]	@ (800aa08 <sl_wfx_scan_result_callback+0x184>)
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	4413      	add	r3, r2
 800a9be:	011b      	lsls	r3, r3, #4
 800a9c0:	1a9b      	subs	r3, r3, r2
 800a9c2:	440b      	add	r3, r1
 800a9c4:	3328      	adds	r3, #40	@ 0x28
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	f8a3 2005 	strh.w	r2, [r3, #5]
    memcpy(scan_list[scan_count - 1].mac, scan_result->body.mac, 6);
 800a9cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a9fc <sl_wfx_scan_result_callback+0x178>)
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	1e5a      	subs	r2, r3, #1
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	005b      	lsls	r3, r3, #1
 800a9d6:	4413      	add	r3, r2
 800a9d8:	011b      	lsls	r3, r3, #4
 800a9da:	1a9b      	subs	r3, r3, r2
 800a9dc:	3320      	adds	r3, #32
 800a9de:	4a0a      	ldr	r2, [pc, #40]	@ (800aa08 <sl_wfx_scan_result_callback+0x184>)
 800a9e0:	4413      	add	r3, r2
 800a9e2:	1d18      	adds	r0, r3, #4
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	3328      	adds	r3, #40	@ 0x28
 800a9e8:	2206      	movs	r2, #6
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	f012 f93f 	bl	801cc6e <memcpy>
  }
}
 800a9f0:	bf00      	nop
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9fa:	bf00      	nop
 800a9fc:	200013a2 	.word	0x200013a2
 800aa00:	200000ad 	.word	0x200000ad
 800aa04:	0801f1ac 	.word	0x0801f1ac
 800aa08:	20000a74 	.word	0x20000a74

0800aa0c <sl_wfx_scan_complete_callback>:

/**************************************************************************//**
 * Callback for scan complete
 *****************************************************************************/
void sl_wfx_scan_complete_callback (sl_wfx_scan_complete_ind_t *scan_complete) {
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  void * buffer;
  sl_status_t status;

  scan_count_web = scan_count;
 800aa14:	4b14      	ldr	r3, [pc, #80]	@ (800aa68 <sl_wfx_scan_complete_callback+0x5c>)
 800aa16:	781a      	ldrb	r2, [r3, #0]
 800aa18:	4b14      	ldr	r3, [pc, #80]	@ (800aa6c <sl_wfx_scan_complete_callback+0x60>)
 800aa1a:	701a      	strb	r2, [r3, #0]
  scan_count = 0;
 800aa1c:	4b12      	ldr	r3, [pc, #72]	@ (800aa68 <sl_wfx_scan_complete_callback+0x5c>)
 800aa1e:	2200      	movs	r2, #0
 800aa20:	701a      	strb	r2, [r3, #0]

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       scan_complete->header.length);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	881b      	ldrh	r3, [r3, #0]
 800aa26:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800aa28:	461a      	mov	r2, r3
 800aa2a:	f107 0308 	add.w	r3, r7, #8
 800aa2e:	2101      	movs	r1, #1
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7ff feb9 	bl	800a7a8 <sl_wfx_host_allocate_buffer>
 800aa36:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10f      	bne.n	800aa5e <sl_wfx_scan_complete_callback+0x52>
    memcpy(buffer, (void *)scan_complete, scan_complete->header.length);
 800aa3e:	68b8      	ldr	r0, [r7, #8]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	881b      	ldrh	r3, [r3, #0]
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	461a      	mov	r2, r3
 800aa48:	6879      	ldr	r1, [r7, #4]
 800aa4a:	f012 f910 	bl	801cc6e <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800aa4e:	4b08      	ldr	r3, [pc, #32]	@ (800aa70 <sl_wfx_scan_complete_callback+0x64>)
 800aa50:	6818      	ldr	r0, [r3, #0]
 800aa52:	f107 0108 	add.w	r1, r7, #8
 800aa56:	2300      	movs	r3, #0
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f001 fa53 	bl	800bf04 <xQueueGenericSend>
  }
}
 800aa5e:	bf00      	nop
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	200013a2 	.word	0x200013a2
 800aa6c:	200013a3 	.word	0x200013a3
 800aa70:	200013bc 	.word	0x200013bc

0800aa74 <sl_wfx_connect_callback>:

/**************************************************************************//**
 * Callback when station connects
 *****************************************************************************/
void sl_wfx_connect_callback (sl_wfx_connect_ind_t *connect) {
 800aa74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  switch(connect->body.status){
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	2b0a      	cmp	r3, #10
 800aa82:	f200 80d3 	bhi.w	800ac2c <sl_wfx_connect_callback+0x1b8>
 800aa86:	a201      	add	r2, pc, #4	@ (adr r2, 800aa8c <sl_wfx_connect_callback+0x18>)
 800aa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8c:	0800aab9 	.word	0x0800aab9
 800aa90:	0800ac2d 	.word	0x0800ac2d
 800aa94:	0800ac2d 	.word	0x0800ac2d
 800aa98:	0800ac2d 	.word	0x0800ac2d
 800aa9c:	0800ac2d 	.word	0x0800ac2d
 800aaa0:	0800ac2d 	.word	0x0800ac2d
 800aaa4:	0800ab17 	.word	0x0800ab17
 800aaa8:	0800ab5b 	.word	0x0800ab5b
 800aaac:	0800ab89 	.word	0x0800ab89
 800aab0:	0800abb7 	.word	0x0800abb7
 800aab4:	0800abf3 	.word	0x0800abf3
  case WFM_STATUS_SUCCESS:
    {
      printf("Connected to WiFi: %s \r\n", WLAN_SSID_DEFAULT);
 800aab8:	496a      	ldr	r1, [pc, #424]	@ (800ac64 <sl_wfx_connect_callback+0x1f0>)
 800aaba:	486b      	ldr	r0, [pc, #428]	@ (800ac68 <sl_wfx_connect_callback+0x1f4>)
 800aabc:	f011 feb8 	bl	801c830 <iprintf>
      sl_wfx_context->state |= SL_WFX_STA_INTERFACE_CONNECTED;
 800aac0:	4b6a      	ldr	r3, [pc, #424]	@ (800ac6c <sl_wfx_connect_callback+0x1f8>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800aac8:	4b68      	ldr	r3, [pc, #416]	@ (800ac6c <sl_wfx_connect_callback+0x1f8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f042 0202 	orr.w	r2, r2, #2
 800aad0:	b2d2      	uxtb	r2, r2
 800aad2:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

      status = sl_wfx_host_allocate_buffer(&buffer,
                                           SL_WFX_RX_FRAME_BUFFER,
                                           connect->header.length);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	b29b      	uxth	r3, r3
      status = sl_wfx_host_allocate_buffer(&buffer,
 800aadc:	461a      	mov	r2, r3
 800aade:	f107 0308 	add.w	r3, r7, #8
 800aae2:	2101      	movs	r1, #1
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7ff fe5f 	bl	800a7a8 <sl_wfx_host_allocate_buffer>
 800aaea:	60f8      	str	r0, [r7, #12]
      if (status == SL_STATUS_OK) {
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f040 80b3 	bne.w	800ac5a <sl_wfx_connect_callback+0x1e6>
        memcpy(buffer, (void *)connect, connect->header.length);
 800aaf4:	68b8      	ldr	r0, [r7, #8]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	461a      	mov	r2, r3
 800aafe:	6879      	ldr	r1, [r7, #4]
 800ab00:	f012 f8b5 	bl	801cc6e <memcpy>
        xQueueSend(wifi_event_queue, &buffer, 0);
 800ab04:	4b5a      	ldr	r3, [pc, #360]	@ (800ac70 <sl_wfx_connect_callback+0x1fc>)
 800ab06:	6818      	ldr	r0, [r3, #0]
 800ab08:	f107 0108 	add.w	r1, r7, #8
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f001 f9f8 	bl	800bf04 <xQueueGenericSend>
      }
      break;
 800ab14:	e0a1      	b.n	800ac5a <sl_wfx_connect_callback+0x1e6>
    }
  case WFM_STATUS_NO_MATCHING_AP:
    {
      strcpy(event_log, "Connection failed, access point not found");
 800ab16:	4b57      	ldr	r3, [pc, #348]	@ (800ac74 <sl_wfx_connect_callback+0x200>)
 800ab18:	4a57      	ldr	r2, [pc, #348]	@ (800ac78 <sl_wfx_connect_callback+0x204>)
 800ab1a:	4614      	mov	r4, r2
 800ab1c:	469c      	mov	ip, r3
 800ab1e:	f104 0e20 	add.w	lr, r4, #32
 800ab22:	4665      	mov	r5, ip
 800ab24:	4626      	mov	r6, r4
 800ab26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab28:	6028      	str	r0, [r5, #0]
 800ab2a:	6069      	str	r1, [r5, #4]
 800ab2c:	60aa      	str	r2, [r5, #8]
 800ab2e:	60eb      	str	r3, [r5, #12]
 800ab30:	3410      	adds	r4, #16
 800ab32:	f10c 0c10 	add.w	ip, ip, #16
 800ab36:	4574      	cmp	r4, lr
 800ab38:	d1f3      	bne.n	800ab22 <sl_wfx_connect_callback+0xae>
 800ab3a:	4662      	mov	r2, ip
 800ab3c:	4623      	mov	r3, r4
 800ab3e:	cb03      	ldmia	r3!, {r0, r1}
 800ab40:	6010      	str	r0, [r2, #0]
 800ab42:	6051      	str	r1, [r2, #4]
 800ab44:	881b      	ldrh	r3, [r3, #0]
 800ab46:	8113      	strh	r3, [r2, #8]
      printf(event_log);
 800ab48:	484a      	ldr	r0, [pc, #296]	@ (800ac74 <sl_wfx_connect_callback+0x200>)
 800ab4a:	f011 fe71 	bl	801c830 <iprintf>
      printf("\r\n");
 800ab4e:	484b      	ldr	r0, [pc, #300]	@ (800ac7c <sl_wfx_connect_callback+0x208>)
 800ab50:	f011 fed6 	bl	801c900 <puts>
      wifi_autoconnexion_init();
 800ab54:	f7f8 fa96 	bl	8003084 <wifi_autoconnexion_init>
      break;
 800ab58:	e080      	b.n	800ac5c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_ABORTED:
    {
      strcpy(event_log, "Connection aborted");
 800ab5a:	4a46      	ldr	r2, [pc, #280]	@ (800ac74 <sl_wfx_connect_callback+0x200>)
 800ab5c:	4b48      	ldr	r3, [pc, #288]	@ (800ac80 <sl_wfx_connect_callback+0x20c>)
 800ab5e:	4615      	mov	r5, r2
 800ab60:	461c      	mov	r4, r3
 800ab62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab64:	6028      	str	r0, [r5, #0]
 800ab66:	6069      	str	r1, [r5, #4]
 800ab68:	60aa      	str	r2, [r5, #8]
 800ab6a:	60eb      	str	r3, [r5, #12]
 800ab6c:	8823      	ldrh	r3, [r4, #0]
 800ab6e:	78a2      	ldrb	r2, [r4, #2]
 800ab70:	822b      	strh	r3, [r5, #16]
 800ab72:	4613      	mov	r3, r2
 800ab74:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 800ab76:	483f      	ldr	r0, [pc, #252]	@ (800ac74 <sl_wfx_connect_callback+0x200>)
 800ab78:	f011 fe5a 	bl	801c830 <iprintf>
      printf("\r\n");
 800ab7c:	483f      	ldr	r0, [pc, #252]	@ (800ac7c <sl_wfx_connect_callback+0x208>)
 800ab7e:	f011 febf 	bl	801c900 <puts>
      wifi_autoconnexion_init();
 800ab82:	f7f8 fa7f 	bl	8003084 <wifi_autoconnexion_init>
      break;
 800ab86:	e069      	b.n	800ac5c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_TIMEOUT:
    {
      strcpy(event_log, "Connection timeout");
 800ab88:	4a3a      	ldr	r2, [pc, #232]	@ (800ac74 <sl_wfx_connect_callback+0x200>)
 800ab8a:	4b3e      	ldr	r3, [pc, #248]	@ (800ac84 <sl_wfx_connect_callback+0x210>)
 800ab8c:	4615      	mov	r5, r2
 800ab8e:	461c      	mov	r4, r3
 800ab90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab92:	6028      	str	r0, [r5, #0]
 800ab94:	6069      	str	r1, [r5, #4]
 800ab96:	60aa      	str	r2, [r5, #8]
 800ab98:	60eb      	str	r3, [r5, #12]
 800ab9a:	8823      	ldrh	r3, [r4, #0]
 800ab9c:	78a2      	ldrb	r2, [r4, #2]
 800ab9e:	822b      	strh	r3, [r5, #16]
 800aba0:	4613      	mov	r3, r2
 800aba2:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 800aba4:	4833      	ldr	r0, [pc, #204]	@ (800ac74 <sl_wfx_connect_callback+0x200>)
 800aba6:	f011 fe43 	bl	801c830 <iprintf>
      printf("\r\n");
 800abaa:	4834      	ldr	r0, [pc, #208]	@ (800ac7c <sl_wfx_connect_callback+0x208>)
 800abac:	f011 fea8 	bl	801c900 <puts>
      wifi_autoconnexion_init();
 800abb0:	f7f8 fa68 	bl	8003084 <wifi_autoconnexion_init>
      break;
 800abb4:	e052      	b.n	800ac5c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
    {
      strcpy(event_log, "Connection rejected by the access point");
 800abb6:	4b2f      	ldr	r3, [pc, #188]	@ (800ac74 <sl_wfx_connect_callback+0x200>)
 800abb8:	4a33      	ldr	r2, [pc, #204]	@ (800ac88 <sl_wfx_connect_callback+0x214>)
 800abba:	4614      	mov	r4, r2
 800abbc:	469c      	mov	ip, r3
 800abbe:	f104 0e20 	add.w	lr, r4, #32
 800abc2:	4665      	mov	r5, ip
 800abc4:	4626      	mov	r6, r4
 800abc6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800abc8:	6028      	str	r0, [r5, #0]
 800abca:	6069      	str	r1, [r5, #4]
 800abcc:	60aa      	str	r2, [r5, #8]
 800abce:	60eb      	str	r3, [r5, #12]
 800abd0:	3410      	adds	r4, #16
 800abd2:	f10c 0c10 	add.w	ip, ip, #16
 800abd6:	4574      	cmp	r4, lr
 800abd8:	d1f3      	bne.n	800abc2 <sl_wfx_connect_callback+0x14e>
 800abda:	4662      	mov	r2, ip
 800abdc:	4623      	mov	r3, r4
 800abde:	cb03      	ldmia	r3!, {r0, r1}
 800abe0:	6010      	str	r0, [r2, #0]
 800abe2:	6051      	str	r1, [r2, #4]
      printf(event_log);
 800abe4:	4823      	ldr	r0, [pc, #140]	@ (800ac74 <sl_wfx_connect_callback+0x200>)
 800abe6:	f011 fe23 	bl	801c830 <iprintf>
      printf("\r\n");
 800abea:	4824      	ldr	r0, [pc, #144]	@ (800ac7c <sl_wfx_connect_callback+0x208>)
 800abec:	f011 fe88 	bl	801c900 <puts>
      break;
 800abf0:	e034      	b.n	800ac5c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_AUTH_FAILURE:
    {
      strcpy(event_log, "Connection authentication failure");
 800abf2:	4b20      	ldr	r3, [pc, #128]	@ (800ac74 <sl_wfx_connect_callback+0x200>)
 800abf4:	4a25      	ldr	r2, [pc, #148]	@ (800ac8c <sl_wfx_connect_callback+0x218>)
 800abf6:	4614      	mov	r4, r2
 800abf8:	469c      	mov	ip, r3
 800abfa:	f104 0e20 	add.w	lr, r4, #32
 800abfe:	4665      	mov	r5, ip
 800ac00:	4626      	mov	r6, r4
 800ac02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ac04:	6028      	str	r0, [r5, #0]
 800ac06:	6069      	str	r1, [r5, #4]
 800ac08:	60aa      	str	r2, [r5, #8]
 800ac0a:	60eb      	str	r3, [r5, #12]
 800ac0c:	3410      	adds	r4, #16
 800ac0e:	f10c 0c10 	add.w	ip, ip, #16
 800ac12:	4574      	cmp	r4, lr
 800ac14:	d1f3      	bne.n	800abfe <sl_wfx_connect_callback+0x18a>
 800ac16:	4662      	mov	r2, ip
 800ac18:	4623      	mov	r3, r4
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	8013      	strh	r3, [r2, #0]
      printf(event_log);
 800ac1e:	4815      	ldr	r0, [pc, #84]	@ (800ac74 <sl_wfx_connect_callback+0x200>)
 800ac20:	f011 fe06 	bl	801c830 <iprintf>
      printf("\r\n");
 800ac24:	4815      	ldr	r0, [pc, #84]	@ (800ac7c <sl_wfx_connect_callback+0x208>)
 800ac26:	f011 fe6b 	bl	801c900 <puts>
      break;
 800ac2a:	e017      	b.n	800ac5c <sl_wfx_connect_callback+0x1e8>
    }
  default:
    {
      strcpy(event_log, "Connection attempt error");
 800ac2c:	4a11      	ldr	r2, [pc, #68]	@ (800ac74 <sl_wfx_connect_callback+0x200>)
 800ac2e:	4b18      	ldr	r3, [pc, #96]	@ (800ac90 <sl_wfx_connect_callback+0x21c>)
 800ac30:	4615      	mov	r5, r2
 800ac32:	461c      	mov	r4, r3
 800ac34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac36:	6028      	str	r0, [r5, #0]
 800ac38:	6069      	str	r1, [r5, #4]
 800ac3a:	60aa      	str	r2, [r5, #8]
 800ac3c:	60eb      	str	r3, [r5, #12]
 800ac3e:	cc03      	ldmia	r4!, {r0, r1}
 800ac40:	6128      	str	r0, [r5, #16]
 800ac42:	6169      	str	r1, [r5, #20]
 800ac44:	7823      	ldrb	r3, [r4, #0]
 800ac46:	762b      	strb	r3, [r5, #24]
      printf(event_log);
 800ac48:	480a      	ldr	r0, [pc, #40]	@ (800ac74 <sl_wfx_connect_callback+0x200>)
 800ac4a:	f011 fdf1 	bl	801c830 <iprintf>
      printf("\r\n");
 800ac4e:	480b      	ldr	r0, [pc, #44]	@ (800ac7c <sl_wfx_connect_callback+0x208>)
 800ac50:	f011 fe56 	bl	801c900 <puts>
      wifi_autoconnexion_init();
 800ac54:	f7f8 fa16 	bl	8003084 <wifi_autoconnexion_init>
    }
  }
}
 800ac58:	e000      	b.n	800ac5c <sl_wfx_connect_callback+0x1e8>
      break;
 800ac5a:	bf00      	nop
}
 800ac5c:	bf00      	nop
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac64:	0801f1e4 	.word	0x0801f1e4
 800ac68:	0801f1f4 	.word	0x0801f1f4
 800ac6c:	20000a6c 	.word	0x20000a6c
 800ac70:	200013bc 	.word	0x200013bc
 800ac74:	200008d4 	.word	0x200008d4
 800ac78:	0801f210 	.word	0x0801f210
 800ac7c:	0801f174 	.word	0x0801f174
 800ac80:	0801f23c 	.word	0x0801f23c
 800ac84:	0801f250 	.word	0x0801f250
 800ac88:	0801f264 	.word	0x0801f264
 800ac8c:	0801f28c 	.word	0x0801f28c
 800ac90:	0801f2b0 	.word	0x0801f2b0

0800ac94 <sl_wfx_disconnect_callback>:

/**************************************************************************//**
 * Callback for station disconnect
 *****************************************************************************/
void sl_wfx_disconnect_callback (sl_wfx_disconnect_ind_t *disconnect) {
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("Disconnected %d\r\n", disconnect->body.reason);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	895b      	ldrh	r3, [r3, #10]
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	4619      	mov	r1, r3
 800aca4:	4817      	ldr	r0, [pc, #92]	@ (800ad04 <sl_wfx_disconnect_callback+0x70>)
 800aca6:	f011 fdc3 	bl	801c830 <iprintf>
  sl_wfx_context->state &= ~SL_WFX_STA_INTERFACE_CONNECTED;
 800acaa:	4b17      	ldr	r3, [pc, #92]	@ (800ad08 <sl_wfx_disconnect_callback+0x74>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800acb2:	4b15      	ldr	r3, [pc, #84]	@ (800ad08 <sl_wfx_disconnect_callback+0x74>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f022 0202 	bic.w	r2, r2, #2
 800acba:	b2d2      	uxtb	r2, r2
 800acbc:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       disconnect->header.length);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800acc6:	461a      	mov	r2, r3
 800acc8:	f107 0308 	add.w	r3, r7, #8
 800accc:	2101      	movs	r1, #1
 800acce:	4618      	mov	r0, r3
 800acd0:	f7ff fd6a 	bl	800a7a8 <sl_wfx_host_allocate_buffer>
 800acd4:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10f      	bne.n	800acfc <sl_wfx_disconnect_callback+0x68>
    memcpy(buffer, (void *)disconnect, disconnect->header.length);
 800acdc:	68b8      	ldr	r0, [r7, #8]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	881b      	ldrh	r3, [r3, #0]
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	461a      	mov	r2, r3
 800ace6:	6879      	ldr	r1, [r7, #4]
 800ace8:	f011 ffc1 	bl	801cc6e <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800acec:	4b07      	ldr	r3, [pc, #28]	@ (800ad0c <sl_wfx_disconnect_callback+0x78>)
 800acee:	6818      	ldr	r0, [r3, #0]
 800acf0:	f107 0108 	add.w	r1, r7, #8
 800acf4:	2300      	movs	r3, #0
 800acf6:	2200      	movs	r2, #0
 800acf8:	f001 f904 	bl	800bf04 <xQueueGenericSend>
  }
}
 800acfc:	bf00      	nop
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	0801f2cc 	.word	0x0801f2cc
 800ad08:	20000a6c 	.word	0x20000a6c
 800ad0c:	200013bc 	.word	0x200013bc

0800ad10 <sl_wfx_start_ap_callback>:

/**************************************************************************//**
 * Callback for AP started
 *****************************************************************************/
void sl_wfx_start_ap_callback (sl_wfx_start_ap_ind_t *start_ap) {
 800ad10:	b5b0      	push	{r4, r5, r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  if (start_ap->body.status == 0) {
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d130      	bne.n	800ad82 <sl_wfx_start_ap_callback+0x72>
    printf("AP started\r\n");
 800ad20:	4820      	ldr	r0, [pc, #128]	@ (800ada4 <sl_wfx_start_ap_callback+0x94>)
 800ad22:	f011 fded 	bl	801c900 <puts>
    printf("Join the AP with SSID: %s\r\n", softap_ssid);
 800ad26:	4920      	ldr	r1, [pc, #128]	@ (800ada8 <sl_wfx_start_ap_callback+0x98>)
 800ad28:	4820      	ldr	r0, [pc, #128]	@ (800adac <sl_wfx_start_ap_callback+0x9c>)
 800ad2a:	f011 fd81 	bl	801c830 <iprintf>
    sl_wfx_context->state |= SL_WFX_AP_INTERFACE_UP;
 800ad2e:	4b20      	ldr	r3, [pc, #128]	@ (800adb0 <sl_wfx_start_ap_callback+0xa0>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800ad36:	4b1e      	ldr	r3, [pc, #120]	@ (800adb0 <sl_wfx_start_ap_callback+0xa0>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f042 0204 	orr.w	r2, r2, #4
 800ad3e:	b2d2      	uxtb	r2, r2
 800ad40:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

    status = sl_wfx_host_allocate_buffer(&buffer,
                                         SL_WFX_RX_FRAME_BUFFER,
                                         start_ap->header.length);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	881b      	ldrh	r3, [r3, #0]
 800ad48:	b29b      	uxth	r3, r3
    status = sl_wfx_host_allocate_buffer(&buffer,
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f107 0308 	add.w	r3, r7, #8
 800ad50:	2101      	movs	r1, #1
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7ff fd28 	bl	800a7a8 <sl_wfx_host_allocate_buffer>
 800ad58:	60f8      	str	r0, [r7, #12]
    if (status == SL_STATUS_OK) {
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d11c      	bne.n	800ad9a <sl_wfx_start_ap_callback+0x8a>
      memcpy(buffer, (void *)start_ap, start_ap->header.length);
 800ad60:	68b8      	ldr	r0, [r7, #8]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	461a      	mov	r2, r3
 800ad6a:	6879      	ldr	r1, [r7, #4]
 800ad6c:	f011 ff7f 	bl	801cc6e <memcpy>
      xQueueSend(wifi_event_queue, &buffer, 0);
 800ad70:	4b10      	ldr	r3, [pc, #64]	@ (800adb4 <sl_wfx_start_ap_callback+0xa4>)
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	f107 0108 	add.w	r1, r7, #8
 800ad78:	2300      	movs	r3, #0
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f001 f8c2 	bl	800bf04 <xQueueGenericSend>
    }
  } else {
    printf("AP start failed\r\n");
    strcpy(event_log, "AP start failed");
  }
}
 800ad80:	e00b      	b.n	800ad9a <sl_wfx_start_ap_callback+0x8a>
    printf("AP start failed\r\n");
 800ad82:	480d      	ldr	r0, [pc, #52]	@ (800adb8 <sl_wfx_start_ap_callback+0xa8>)
 800ad84:	f011 fdbc 	bl	801c900 <puts>
    strcpy(event_log, "AP start failed");
 800ad88:	4a0c      	ldr	r2, [pc, #48]	@ (800adbc <sl_wfx_start_ap_callback+0xac>)
 800ad8a:	4b0d      	ldr	r3, [pc, #52]	@ (800adc0 <sl_wfx_start_ap_callback+0xb0>)
 800ad8c:	4614      	mov	r4, r2
 800ad8e:	461d      	mov	r5, r3
 800ad90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad92:	6020      	str	r0, [r4, #0]
 800ad94:	6061      	str	r1, [r4, #4]
 800ad96:	60a2      	str	r2, [r4, #8]
 800ad98:	60e3      	str	r3, [r4, #12]
}
 800ad9a:	bf00      	nop
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bdb0      	pop	{r4, r5, r7, pc}
 800ada2:	bf00      	nop
 800ada4:	0801f2e0 	.word	0x0801f2e0
 800ada8:	2000006c 	.word	0x2000006c
 800adac:	0801f2ec 	.word	0x0801f2ec
 800adb0:	20000a6c 	.word	0x20000a6c
 800adb4:	200013bc 	.word	0x200013bc
 800adb8:	0801f308 	.word	0x0801f308
 800adbc:	200008d4 	.word	0x200008d4
 800adc0:	0801f31c 	.word	0x0801f31c

0800adc4 <sl_wfx_stop_ap_callback>:


/**************************************************************************//**
 * Callback for AP stopped
 *****************************************************************************/
void sl_wfx_stop_ap_callback(sl_wfx_stop_ap_ind_t *stop_ap) {
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("SoftAP stopped\r\n");
 800adcc:	4818      	ldr	r0, [pc, #96]	@ (800ae30 <sl_wfx_stop_ap_callback+0x6c>)
 800adce:	f011 fd97 	bl	801c900 <puts>
  dhcpserver_clear_stored_mac();
 800add2:	f7f8 fd75 	bl	80038c0 <dhcpserver_clear_stored_mac>
  sl_wfx_context->state &= ~SL_WFX_AP_INTERFACE_UP;
 800add6:	4b17      	ldr	r3, [pc, #92]	@ (800ae34 <sl_wfx_stop_ap_callback+0x70>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800adde:	4b15      	ldr	r3, [pc, #84]	@ (800ae34 <sl_wfx_stop_ap_callback+0x70>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f022 0204 	bic.w	r2, r2, #4
 800ade6:	b2d2      	uxtb	r2, r2
 800ade8:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       stop_ap->length);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	881b      	ldrh	r3, [r3, #0]
 800adf0:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800adf2:	461a      	mov	r2, r3
 800adf4:	f107 0308 	add.w	r3, r7, #8
 800adf8:	2101      	movs	r1, #1
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7ff fcd4 	bl	800a7a8 <sl_wfx_host_allocate_buffer>
 800ae00:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10f      	bne.n	800ae28 <sl_wfx_stop_ap_callback+0x64>
    memcpy(buffer, (void *)stop_ap, stop_ap->length);
 800ae08:	68b8      	ldr	r0, [r7, #8]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	461a      	mov	r2, r3
 800ae12:	6879      	ldr	r1, [r7, #4]
 800ae14:	f011 ff2b 	bl	801cc6e <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800ae18:	4b07      	ldr	r3, [pc, #28]	@ (800ae38 <sl_wfx_stop_ap_callback+0x74>)
 800ae1a:	6818      	ldr	r0, [r3, #0]
 800ae1c:	f107 0108 	add.w	r1, r7, #8
 800ae20:	2300      	movs	r3, #0
 800ae22:	2200      	movs	r2, #0
 800ae24:	f001 f86e 	bl	800bf04 <xQueueGenericSend>
  }
}
 800ae28:	bf00      	nop
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	0801f32c 	.word	0x0801f32c
 800ae34:	20000a6c 	.word	0x20000a6c
 800ae38:	200013bc 	.word	0x200013bc

0800ae3c <sl_wfx_ap_client_connected_callback>:

/**************************************************************************//**
 * Callback for client connect to AP
 *****************************************************************************/
void sl_wfx_ap_client_connected_callback (sl_wfx_ap_client_connected_ind_t *ap_client_connected) {
 800ae3c:	b5b0      	push	{r4, r5, r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af04      	add	r7, sp, #16
 800ae42:	6078      	str	r0, [r7, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_connected->body.mac[0],
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	791b      	ldrb	r3, [r3, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ae48:	4618      	mov	r0, r3
         ap_client_connected->body.mac[1],
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	795b      	ldrb	r3, [r3, #5]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ae4e:	461c      	mov	r4, r3
         ap_client_connected->body.mac[2],
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	799b      	ldrb	r3, [r3, #6]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ae54:	461d      	mov	r5, r3
         ap_client_connected->body.mac[3],
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	79db      	ldrb	r3, [r3, #7]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ae5a:	461a      	mov	r2, r3
         ap_client_connected->body.mac[4],
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ae60:	4619      	mov	r1, r3
         ap_client_connected->body.mac[5]);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ae66:	9302      	str	r3, [sp, #8]
 800ae68:	9101      	str	r1, [sp, #4]
 800ae6a:	9200      	str	r2, [sp, #0]
 800ae6c:	462b      	mov	r3, r5
 800ae6e:	4622      	mov	r2, r4
 800ae70:	4601      	mov	r1, r0
 800ae72:	480b      	ldr	r0, [pc, #44]	@ (800aea0 <sl_wfx_ap_client_connected_callback+0x64>)
 800ae74:	f011 fcdc 	bl	801c830 <iprintf>
  printf("Open a web browser and go to http://%d.%d.%d.%d\r\n",
 800ae78:	4b0a      	ldr	r3, [pc, #40]	@ (800aea4 <sl_wfx_ap_client_connected_callback+0x68>)
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	4b0a      	ldr	r3, [pc, #40]	@ (800aea8 <sl_wfx_ap_client_connected_callback+0x6c>)
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	4b09      	ldr	r3, [pc, #36]	@ (800aeac <sl_wfx_ap_client_connected_callback+0x70>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	4b09      	ldr	r3, [pc, #36]	@ (800aeb0 <sl_wfx_ap_client_connected_callback+0x74>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	4603      	mov	r3, r0
 800ae92:	4808      	ldr	r0, [pc, #32]	@ (800aeb4 <sl_wfx_ap_client_connected_callback+0x78>)
 800ae94:	f011 fccc 	bl	801c830 <iprintf>
         ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
}
 800ae98:	bf00      	nop
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bdb0      	pop	{r4, r5, r7, pc}
 800aea0:	0801f33c 	.word	0x0801f33c
 800aea4:	2000009a 	.word	0x2000009a
 800aea8:	2000009b 	.word	0x2000009b
 800aeac:	2000009c 	.word	0x2000009c
 800aeb0:	2000009d 	.word	0x2000009d
 800aeb4:	0801f374 	.word	0x0801f374

0800aeb8 <sl_wfx_ap_client_rejected_callback>:

/**************************************************************************//**
 * Callback for client rejected from AP
 *****************************************************************************/
void sl_wfx_ap_client_rejected_callback (sl_wfx_ap_client_rejected_ind_t *ap_client_rejected) {
 800aeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeba:	b089      	sub	sp, #36	@ 0x24
 800aebc:	af04      	add	r7, sp, #16
 800aebe:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_rejected->body.mac, SL_WFX_BSSID_SIZE);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	1d1a      	adds	r2, r3, #4
 800aec4:	f107 0308 	add.w	r3, r7, #8
 800aec8:	6810      	ldr	r0, [r2, #0]
 800aeca:	6018      	str	r0, [r3, #0]
 800aecc:	8892      	ldrh	r2, [r2, #4]
 800aece:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 800aed0:	f107 0308 	add.w	r3, r7, #8
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7f8 fb35 	bl	8003544 <dhcpserver_remove_mac>
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_rejected->body.reason,
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	895b      	ldrh	r3, [r3, #10]
 800aede:	b29b      	uxth	r3, r3
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800aee0:	461c      	mov	r4, r3
         ap_client_rejected->body.mac[0],
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	791b      	ldrb	r3, [r3, #4]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800aee6:	461d      	mov	r5, r3
         ap_client_rejected->body.mac[1],
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	795b      	ldrb	r3, [r3, #5]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800aeec:	461e      	mov	r6, r3
         ap_client_rejected->body.mac[2],
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	799b      	ldrb	r3, [r3, #6]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800aef2:	461a      	mov	r2, r3
         ap_client_rejected->body.mac[3],
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	79db      	ldrb	r3, [r3, #7]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800aef8:	4619      	mov	r1, r3
         ap_client_rejected->body.mac[4],
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800aefe:	4618      	mov	r0, r3
         ap_client_rejected->body.mac[5]);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af04:	9303      	str	r3, [sp, #12]
 800af06:	9002      	str	r0, [sp, #8]
 800af08:	9101      	str	r1, [sp, #4]
 800af0a:	9200      	str	r2, [sp, #0]
 800af0c:	4633      	mov	r3, r6
 800af0e:	462a      	mov	r2, r5
 800af10:	4621      	mov	r1, r4
 800af12:	4803      	ldr	r0, [pc, #12]	@ (800af20 <sl_wfx_ap_client_rejected_callback+0x68>)
 800af14:	f011 fc8c 	bl	801c830 <iprintf>
}
 800af18:	bf00      	nop
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af20:	0801f3a8 	.word	0x0801f3a8

0800af24 <sl_wfx_ap_client_disconnected_callback>:

/**************************************************************************//**
 * Callback for AP client disconnect
 *****************************************************************************/
void sl_wfx_ap_client_disconnected_callback (sl_wfx_ap_client_disconnected_ind_t *ap_client_disconnected) {
 800af24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af26:	b089      	sub	sp, #36	@ 0x24
 800af28:	af04      	add	r7, sp, #16
 800af2a:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_disconnected->body.mac, SL_WFX_BSSID_SIZE);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	1d1a      	adds	r2, r3, #4
 800af30:	f107 0308 	add.w	r3, r7, #8
 800af34:	6810      	ldr	r0, [r2, #0]
 800af36:	6018      	str	r0, [r3, #0]
 800af38:	8892      	ldrh	r2, [r2, #4]
 800af3a:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 800af3c:	f107 0308 	add.w	r3, r7, #8
 800af40:	4618      	mov	r0, r3
 800af42:	f7f8 faff 	bl	8003544 <dhcpserver_remove_mac>
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_disconnected->body.reason,
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	895b      	ldrh	r3, [r3, #10]
 800af4a:	b29b      	uxth	r3, r3
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af4c:	461c      	mov	r4, r3
         ap_client_disconnected->body.mac[0],
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	791b      	ldrb	r3, [r3, #4]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af52:	461d      	mov	r5, r3
         ap_client_disconnected->body.mac[1],
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	795b      	ldrb	r3, [r3, #5]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af58:	461e      	mov	r6, r3
         ap_client_disconnected->body.mac[2],
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	799b      	ldrb	r3, [r3, #6]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af5e:	461a      	mov	r2, r3
         ap_client_disconnected->body.mac[3],
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	79db      	ldrb	r3, [r3, #7]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af64:	4619      	mov	r1, r3
         ap_client_disconnected->body.mac[4],
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af6a:	4618      	mov	r0, r3
         ap_client_disconnected->body.mac[5]);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af70:	9303      	str	r3, [sp, #12]
 800af72:	9002      	str	r0, [sp, #8]
 800af74:	9101      	str	r1, [sp, #4]
 800af76:	9200      	str	r2, [sp, #0]
 800af78:	4633      	mov	r3, r6
 800af7a:	462a      	mov	r2, r5
 800af7c:	4621      	mov	r1, r4
 800af7e:	4803      	ldr	r0, [pc, #12]	@ (800af8c <sl_wfx_ap_client_disconnected_callback+0x68>)
 800af80:	f011 fc56 	bl	801c830 <iprintf>
}
 800af84:	bf00      	nop
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af8c:	0801f3ec 	.word	0x0801f3ec

0800af90 <sl_wfx_ext_auth_callback>:

/**************************************************************************//**
 * Callback for External Authentication
 *****************************************************************************/
void sl_wfx_ext_auth_callback (sl_wfx_ext_auth_ind_t *ext_auth_indication) {
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       ext_auth_indication->header.length);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	881b      	ldrh	r3, [r3, #0]
 800af9c:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800af9e:	461a      	mov	r2, r3
 800afa0:	f107 0308 	add.w	r3, r7, #8
 800afa4:	2101      	movs	r1, #1
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff fbfe 	bl	800a7a8 <sl_wfx_host_allocate_buffer>
 800afac:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10f      	bne.n	800afd4 <sl_wfx_ext_auth_callback+0x44>
    memcpy(buffer,
 800afb4:	68b8      	ldr	r0, [r7, #8]
           (void *)ext_auth_indication,
           ext_auth_indication->header.length);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	881b      	ldrh	r3, [r3, #0]
 800afba:	b29b      	uxth	r3, r3
    memcpy(buffer,
 800afbc:	461a      	mov	r2, r3
 800afbe:	6879      	ldr	r1, [r7, #4]
 800afc0:	f011 fe55 	bl	801cc6e <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800afc4:	4b05      	ldr	r3, [pc, #20]	@ (800afdc <sl_wfx_ext_auth_callback+0x4c>)
 800afc6:	6818      	ldr	r0, [r3, #0]
 800afc8:	f107 0108 	add.w	r1, r7, #8
 800afcc:	2300      	movs	r3, #0
 800afce:	2200      	movs	r2, #0
 800afd0:	f000 ff98 	bl	800bf04 <xQueueGenericSend>
  }
}
 800afd4:	bf00      	nop
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	200013bc 	.word	0x200013bc

0800afe0 <wifi_events_start>:
static void wifi_events_task_entry(void const * pvParameters);

/**************************************************************************//**
 * Start the Wi-Fi event handling task
 *****************************************************************************/
void wifi_events_start (void) {
 800afe0:	b5b0      	push	{r4, r5, r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
  sae_exch_sem = xSemaphoreCreateBinary();
 800afe6:	2203      	movs	r2, #3
 800afe8:	2100      	movs	r1, #0
 800afea:	2001      	movs	r0, #1
 800afec:	f000 ff02 	bl	800bdf4 <xQueueGenericCreate>
 800aff0:	4603      	mov	r3, r0
 800aff2:	4a0d      	ldr	r2, [pc, #52]	@ (800b028 <wifi_events_start+0x48>)
 800aff4:	6013      	str	r3, [r2, #0]
  osThreadDef(eventsTask, wifi_events_task_entry, osPriorityBelowNormal, 0, 1024);
 800aff6:	4b0d      	ldr	r3, [pc, #52]	@ (800b02c <wifi_events_start+0x4c>)
 800aff8:	1d3c      	adds	r4, r7, #4
 800affa:	461d      	mov	r5, r3
 800affc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800affe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(eventsTask), NULL);
 800b004:	1d3b      	adds	r3, r7, #4
 800b006:	2100      	movs	r1, #0
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 fa70 	bl	800b4ee <osThreadCreate>
  wifi_event_queue = xQueueCreate(SL_WFX_EVENTS_NB_MAX, sizeof(void *));
 800b00e:	2200      	movs	r2, #0
 800b010:	2104      	movs	r1, #4
 800b012:	200a      	movs	r0, #10
 800b014:	f000 feee 	bl	800bdf4 <xQueueGenericCreate>
 800b018:	4603      	mov	r3, r0
 800b01a:	4a05      	ldr	r2, [pc, #20]	@ (800b030 <wifi_events_start+0x50>)
 800b01c:	6013      	str	r3, [r2, #0]
}
 800b01e:	bf00      	nop
 800b020:	3718      	adds	r7, #24
 800b022:	46bd      	mov	sp, r7
 800b024:	bdb0      	pop	{r4, r5, r7, pc}
 800b026:	bf00      	nop
 800b028:	200013c0 	.word	0x200013c0
 800b02c:	0801f440 	.word	0x0801f440
 800b030:	200013bc 	.word	0x200013bc

0800b034 <wifi_events_task_entry>:

/**************************************************************************//**
 * Wi-Fi event handling task entry point
 *****************************************************************************/
static void wifi_events_task_entry (void const * pvParameters) {
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  sl_wfx_generic_message_t *msg;
  BaseType_t ret;
  
	while(1) {

	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 800b03c:	4b22      	ldr	r3, [pc, #136]	@ (800b0c8 <wifi_events_task_entry+0x94>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f107 0108 	add.w	r1, r7, #8
 800b044:	f04f 32ff 	mov.w	r2, #4294967295
 800b048:	4618      	mov	r0, r3
 800b04a:	f001 f98b 	bl	800c364 <xQueueReceive>
 800b04e:	60f8      	str	r0, [r7, #12]
     
    if ((ret == pdTRUE) && (msg != NULL)) {
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d1f2      	bne.n	800b03c <wifi_events_task_entry+0x8>
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d0ef      	beq.n	800b03c <wifi_events_task_entry+0x8>
      switch (msg->header.id) {
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	789b      	ldrb	r3, [r3, #2]
 800b060:	3bc3      	subs	r3, #195	@ 0xc3
 800b062:	2b09      	cmp	r3, #9
 800b064:	d82a      	bhi.n	800b0bc <wifi_events_task_entry+0x88>
 800b066:	a201      	add	r2, pc, #4	@ (adr r2, 800b06c <wifi_events_task_entry+0x38>)
 800b068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06c:	0800b095 	.word	0x0800b095
 800b070:	0800b09b 	.word	0x0800b09b
 800b074:	0800b0a1 	.word	0x0800b0a1
 800b078:	0800b0bd 	.word	0x0800b0bd
 800b07c:	0800b0a7 	.word	0x0800b0a7
 800b080:	0800b0bd 	.word	0x0800b0bd
 800b084:	0800b0bd 	.word	0x0800b0bd
 800b088:	0800b0bd 	.word	0x0800b0bd
 800b08c:	0800b0bd 	.word	0x0800b0bd
 800b090:	0800b0ad 	.word	0x0800b0ad
        case SL_WFX_CONNECT_IND_ID:
        {
          lwip_set_sta_link_up();
 800b094:	f7f9 fcd6 	bl	8004a44 <lwip_set_sta_link_up>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 800b098:	e010      	b.n	800b0bc <wifi_events_task_entry+0x88>
        }
        case SL_WFX_DISCONNECT_IND_ID:
        {
          lwip_set_sta_link_down();
 800b09a:	f7f9 fcf1 	bl	8004a80 <lwip_set_sta_link_down>
          break;
 800b09e:	e00d      	b.n	800b0bc <wifi_events_task_entry+0x88>
        }
        case SL_WFX_START_AP_IND_ID:
        {
          lwip_set_ap_link_up();
 800b0a0:	f7f9 fd0c 	bl	8004abc <lwip_set_ap_link_up>
#ifdef SLEEP_ENABLED
          /* Power save always disabled when SoftAP mode enabled */
          sl_wfx_set_power_mode(WFM_PM_MODE_ACTIVE, WFM_PM_POLL_FAST_PS, 0);
          sl_wfx_disable_device_power_save();
#endif
          break;
 800b0a4:	e00a      	b.n	800b0bc <wifi_events_task_entry+0x88>
        }
        case SL_WFX_STOP_AP_IND_ID:
        {
          lwip_set_ap_link_down();
 800b0a6:	f7f9 fd1f 	bl	8004ae8 <lwip_set_ap_link_down>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 800b0aa:	e007      	b.n	800b0bc <wifi_events_task_entry+0x88>
        }
        case SL_WFX_SCAN_COMPLETE_IND_ID:
        {
          xSemaphoreGive(wifi_scan_sem);
 800b0ac:	4b07      	ldr	r3, [pc, #28]	@ (800b0cc <wifi_events_task_entry+0x98>)
 800b0ae:	6818      	ldr	r0, [r3, #0]
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	f000 ff25 	bl	800bf04 <xQueueGenericSend>
          break;
 800b0ba:	bf00      	nop
        }
      }

      sl_wfx_host_free_buffer(msg, SL_WFX_RX_FRAME_BUFFER);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2101      	movs	r1, #1
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7ff fb83 	bl	800a7cc <sl_wfx_host_free_buffer>
	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 800b0c6:	e7b9      	b.n	800b03c <wifi_events_task_entry+0x8>
 800b0c8:	200013bc 	.word	0x200013bc
 800b0cc:	200013b0 	.word	0x200013b0

0800b0d0 <sl_wfx_host_init_bus>:
SemaphoreHandle_t spiDMASemaphore;

/**************************************************************************//**
 * Bus init function
 *****************************************************************************/
sl_status_t sl_wfx_host_init_bus (void) {
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	af00      	add	r7, sp, #0
  /* Init SPI interface */
  MX_SPI1_Init();
 800b0d4:	f000 f8a8 	bl	800b228 <MX_SPI1_Init>

  /*Create semaphore to handle SPI*/
  spiDMASemaphore = xSemaphoreCreateBinary();
 800b0d8:	2203      	movs	r2, #3
 800b0da:	2100      	movs	r1, #0
 800b0dc:	2001      	movs	r0, #1
 800b0de:	f000 fe89 	bl	800bdf4 <xQueueGenericCreate>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	4a05      	ldr	r2, [pc, #20]	@ (800b0fc <sl_wfx_host_init_bus+0x2c>)
 800b0e6:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(spiDMASemaphore);
 800b0e8:	4b04      	ldr	r3, [pc, #16]	@ (800b0fc <sl_wfx_host_init_bus+0x2c>)
 800b0ea:	6818      	ldr	r0, [r3, #0]
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	f000 ff07 	bl	800bf04 <xQueueGenericSend>
  return SL_STATUS_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	200014dc 	.word	0x200014dc

0800b100 <sl_wfx_host_deinit_bus>:

/**************************************************************************//**
 * Bus deinit function
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit_bus (void) {
 800b100:	b580      	push	{r7, lr}
 800b102:	af00      	add	r7, sp, #0
  /* Delete the semaphore (No function implemented for semaphores, use mutex function) */
  osMutexDelete(spiDMASemaphore);
 800b104:	4b04      	ldr	r3, [pc, #16]	@ (800b118 <sl_wfx_host_deinit_bus+0x18>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fac9 	bl	800b6a0 <osMutexDelete>

  /* Deinit SPI interface */
  MX_SPI1_DeInit();
 800b10e:	f000 f8c1 	bl	800b294 <MX_SPI1_DeInit>
  return SL_STATUS_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	bd80      	pop	{r7, pc}
 800b118:	200014dc 	.word	0x200014dc

0800b11c <sl_wfx_host_spi_cs_assert>:

/**************************************************************************//**
 * Assert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_assert (void) {
 800b11c:	b580      	push	{r7, lr}
 800b11e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_RESET);
 800b120:	2200      	movs	r2, #0
 800b122:	2110      	movs	r1, #16
 800b124:	4802      	ldr	r0, [pc, #8]	@ (800b130 <sl_wfx_host_spi_cs_assert+0x14>)
 800b126:	f7fb fd87 	bl	8006c38 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	40020000 	.word	0x40020000

0800b134 <sl_wfx_host_spi_cs_deassert>:

/**************************************************************************//**
 * Deassert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_deassert (void) {
 800b134:	b580      	push	{r7, lr}
 800b136:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 800b138:	2201      	movs	r2, #1
 800b13a:	2110      	movs	r1, #16
 800b13c:	4802      	ldr	r0, [pc, #8]	@ (800b148 <sl_wfx_host_spi_cs_deassert+0x14>)
 800b13e:	f7fb fd7b 	bl	8006c38 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	bd80      	pop	{r7, pc}
 800b148:	40020000 	.word	0x40020000

0800b14c <sl_wfx_host_spi_transfer_no_cs_assert>:
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_transfer_no_cs_assert (sl_wfx_host_bus_transfer_type_t type,
                                                   uint8_t *header,
                                                   uint16_t header_length,
                                                   uint8_t *buffer,
                                                   uint16_t buffer_length) {
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af00      	add	r7, sp, #0
 800b152:	60b9      	str	r1, [r7, #8]
 800b154:	607b      	str	r3, [r7, #4]
 800b156:	4603      	mov	r3, r0
 800b158:	73fb      	strb	r3, [r7, #15]
 800b15a:	4613      	mov	r3, r2
 800b15c:	81bb      	strh	r3, [r7, #12]
  sl_status_t    result  = SL_STATUS_FAIL;
 800b15e:	2301      	movs	r3, #1
 800b160:	617b      	str	r3, [r7, #20]
  const bool     is_read = ( type == SL_WFX_BUS_READ );
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	2b02      	cmp	r3, #2
 800b166:	bf0c      	ite	eq
 800b168:	2301      	moveq	r3, #1
 800b16a:	2300      	movne	r3, #0
 800b16c:	74fb      	strb	r3, [r7, #19]

  /* Wait for the DMA channels to be available */
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 800b16e:	4b21      	ldr	r3, [pc, #132]	@ (800b1f4 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f04f 31ff 	mov.w	r1, #4294967295
 800b176:	4618      	mov	r0, r3
 800b178:	f001 f9d6 	bl	800c528 <xQueueSemaphoreTake>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d120      	bne.n	800b1c4 <sl_wfx_host_spi_transfer_no_cs_assert+0x78>
	/* send the 2-byte header without DMA */

    HAL_SPI_Transmit(&hspi1, header, header_length, 1);
 800b182:	89ba      	ldrh	r2, [r7, #12]
 800b184:	2301      	movs	r3, #1
 800b186:	68b9      	ldr	r1, [r7, #8]
 800b188:	481b      	ldr	r0, [pc, #108]	@ (800b1f8 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 800b18a:	f7fc fadc 	bl	8007746 <HAL_SPI_Transmit>
    if (is_read) {
 800b18e:	7cfb      	ldrb	r3, [r7, #19]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00b      	beq.n	800b1ac <sl_wfx_host_spi_transfer_no_cs_assert+0x60>
      if(HAL_SPI_Receive_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 800b194:	8c3b      	ldrh	r3, [r7, #32]
 800b196:	461a      	mov	r2, r3
 800b198:	6879      	ldr	r1, [r7, #4]
 800b19a:	4817      	ldr	r0, [pc, #92]	@ (800b1f8 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 800b19c:	f7fc fcc6 	bl	8007b2c <HAL_SPI_Receive_DMA>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d110      	bne.n	800b1c8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	617b      	str	r3, [r7, #20]
 800b1aa:	e00d      	b.n	800b1c8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
    else {
      if(HAL_SPI_Transmit_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 800b1ac:	8c3b      	ldrh	r3, [r7, #32]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	6879      	ldr	r1, [r7, #4]
 800b1b2:	4811      	ldr	r0, [pc, #68]	@ (800b1f8 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 800b1b4:	f7fc fc04 	bl	80079c0 <HAL_SPI_Transmit_DMA>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d104      	bne.n	800b1c8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	617b      	str	r3, [r7, #20]
 800b1c2:	e001      	b.n	800b1c8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
  } else {
    result = SL_STATUS_TIMEOUT;
 800b1c4:	2307      	movs	r3, #7
 800b1c6:	617b      	str	r3, [r7, #20]
  }

  /* Wait to receive the semaphore back from the DMA. In case of a read function, this means data is ready to be read*/
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 800b1c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1f4 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f04f 31ff 	mov.w	r1, #4294967295
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f001 f9a9 	bl	800c528 <xQueueSemaphoreTake>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d106      	bne.n	800b1ea <sl_wfx_host_spi_transfer_no_cs_assert+0x9e>
    xSemaphoreGive(spiDMASemaphore);
 800b1dc:	4b05      	ldr	r3, [pc, #20]	@ (800b1f4 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	f000 fe8d 	bl	800bf04 <xQueueGenericSend>
  }

  return result;
 800b1ea:	697b      	ldr	r3, [r7, #20]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3718      	adds	r7, #24
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	200014dc 	.word	0x200014dc
 800b1f8:	200013c4 	.word	0x200013c4

0800b1fc <sl_wfx_host_enable_platform_interrupt>:

/**************************************************************************//**
 * Enable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_enable_platform_interrupt (void) {
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 800b200:	2200      	movs	r2, #0
 800b202:	210a      	movs	r1, #10
 800b204:	2028      	movs	r0, #40	@ 0x28
 800b206:	f7fa fe5e 	bl	8005ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800b20a:	2028      	movs	r0, #40	@ 0x28
 800b20c:	f7fa fe77 	bl	8005efe <HAL_NVIC_EnableIRQ>
  return SL_STATUS_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	bd80      	pop	{r7, pc}

0800b216 <sl_wfx_host_disable_platform_interrupt>:

/**************************************************************************//**
 * Disable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_disable_platform_interrupt (void) {
 800b216:	b580      	push	{r7, lr}
 800b218:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800b21a:	2028      	movs	r0, #40	@ 0x28
 800b21c:	f7fa fe7d 	bl	8005f1a <HAL_NVIC_DisableIRQ>
  return SL_STATUS_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	bd80      	pop	{r7, pc}
	...

0800b228 <MX_SPI1_Init>:

/**************************************************************************//**
 * SPI1 init function
 *****************************************************************************/
static void MX_SPI1_Init (void) {
 800b228:	b580      	push	{r7, lr}
 800b22a:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800b22c:	4b17      	ldr	r3, [pc, #92]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b22e:	4a18      	ldr	r2, [pc, #96]	@ (800b290 <MX_SPI1_Init+0x68>)
 800b230:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b232:	4b16      	ldr	r3, [pc, #88]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b234:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800b238:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800b23a:	4b14      	ldr	r3, [pc, #80]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800b240:	4b12      	ldr	r3, [pc, #72]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b242:	2200      	movs	r2, #0
 800b244:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b246:	4b11      	ldr	r3, [pc, #68]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b248:	2200      	movs	r2, #0
 800b24a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b24c:	4b0f      	ldr	r3, [pc, #60]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b24e:	2200      	movs	r2, #0
 800b250:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800b252:	4b0e      	ldr	r3, [pc, #56]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b258:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b25a:	4b0c      	ldr	r3, [pc, #48]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b260:	4b0a      	ldr	r3, [pc, #40]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b262:	2200      	movs	r2, #0
 800b264:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b266:	4b09      	ldr	r3, [pc, #36]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b268:	2200      	movs	r2, #0
 800b26a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b26c:	4b07      	ldr	r3, [pc, #28]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b26e:	2200      	movs	r2, #0
 800b270:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800b272:	4b06      	ldr	r3, [pc, #24]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b274:	220a      	movs	r2, #10
 800b276:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b278:	4804      	ldr	r0, [pc, #16]	@ (800b28c <MX_SPI1_Init+0x64>)
 800b27a:	f7fc f9b3 	bl	80075e4 <HAL_SPI_Init>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800b284:	f7f9 ffd2 	bl	800522c <Error_Handler>
  }
}
 800b288:	bf00      	nop
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	200013c4 	.word	0x200013c4
 800b290:	40013000 	.word	0x40013000

0800b294 <MX_SPI1_DeInit>:

/**************************************************************************//**
 * SPI1 deinit function
 *****************************************************************************/
static void MX_SPI1_DeInit (void) {
 800b294:	b580      	push	{r7, lr}
 800b296:	af00      	add	r7, sp, #0
  /* SPI DMA DeInit */
  HAL_DMA_DeInit(&hdma_spi1_rx);
 800b298:	4805      	ldr	r0, [pc, #20]	@ (800b2b0 <MX_SPI1_DeInit+0x1c>)
 800b29a:	f7fa ff23 	bl	80060e4 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_spi1_tx);
 800b29e:	4805      	ldr	r0, [pc, #20]	@ (800b2b4 <MX_SPI1_DeInit+0x20>)
 800b2a0:	f7fa ff20 	bl	80060e4 <HAL_DMA_DeInit>

  HAL_SPI_DeInit(&hspi1);
 800b2a4:	4804      	ldr	r0, [pc, #16]	@ (800b2b8 <MX_SPI1_DeInit+0x24>)
 800b2a6:	f7fc fa26 	bl	80076f6 <HAL_SPI_DeInit>
}
 800b2aa:	bf00      	nop
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	2000147c 	.word	0x2000147c
 800b2b4:	2000141c 	.word	0x2000141c
 800b2b8:	200013c4 	.word	0x200013c4

0800b2bc <sl_wfx_task_start>:
static sl_status_t sl_wfx_tx_process (void);

/**************************************************************************//**
 * Init wfx process thread
 *****************************************************************************/
void sl_wfx_task_start (void) {
 800b2bc:	b5b0      	push	{r4, r5, r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0

  sl_wfx_event_group = xEventGroupCreate();
 800b2c2:	f000 fad4 	bl	800b86e <xEventGroupCreate>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	4a10      	ldr	r2, [pc, #64]	@ (800b30c <sl_wfx_task_start+0x50>)
 800b2ca:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_mutex = xSemaphoreCreateMutex();
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	f000 fe01 	bl	800bed4 <xQueueCreateMutex>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	4a0e      	ldr	r2, [pc, #56]	@ (800b310 <sl_wfx_task_start+0x54>)
 800b2d6:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_context.head_ptr = NULL;
 800b2d8:	4b0e      	ldr	r3, [pc, #56]	@ (800b314 <sl_wfx_task_start+0x58>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	601a      	str	r2, [r3, #0]
  sl_wfx_tx_queue_context.tail_ptr = NULL;
 800b2de:	4b0d      	ldr	r3, [pc, #52]	@ (800b314 <sl_wfx_task_start+0x58>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	605a      	str	r2, [r3, #4]
  osThreadDef(sl_wfx_task, sl_wfx_task_entry, osPriorityNormal , 0, configMINIMAL_STACK_SIZE*4);//osPriorityHigh
 800b2e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b318 <sl_wfx_task_start+0x5c>)
 800b2e6:	1d3c      	adds	r4, r7, #4
 800b2e8:	461d      	mov	r5, r3
 800b2ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2ee:	682b      	ldr	r3, [r5, #0]
 800b2f0:	6023      	str	r3, [r4, #0]
  sl_wfx_task_handle = osThreadCreate(osThread(sl_wfx_task), NULL);
 800b2f2:	1d3b      	adds	r3, r7, #4
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 f8f9 	bl	800b4ee <osThreadCreate>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	4a07      	ldr	r2, [pc, #28]	@ (800b31c <sl_wfx_task_start+0x60>)
 800b300:	6013      	str	r3, [r2, #0]

}
 800b302:	bf00      	nop
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bdb0      	pop	{r4, r5, r7, pc}
 800b30a:	bf00      	nop
 800b30c:	200014e4 	.word	0x200014e4
 800b310:	200014e8 	.word	0x200014e8
 800b314:	200014ec 	.word	0x200014ec
 800b318:	0801f460 	.word	0x0801f460
 800b31c:	200014e0 	.word	0x200014e0

0800b320 <sl_wfx_task_entry>:

/**************************************************************************//**
 * Wfx process task entry
 *****************************************************************************/
static void sl_wfx_task_entry (void const * pvParameters) {
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af02      	add	r7, sp, #8
 800b326:	6078      	str	r0, [r7, #4]
  uint16_t control_register = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	81fb      	strh	r3, [r7, #14]
  

  while(1) {

    /*Wait for an event*/
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 800b32c:	4b0d      	ldr	r3, [pc, #52]	@ (800b364 <sl_wfx_task_entry+0x44>)
 800b32e:	6818      	ldr	r0, [r3, #0]
 800b330:	f04f 33ff 	mov.w	r3, #4294967295
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	2300      	movs	r3, #0
 800b338:	2201      	movs	r2, #1
 800b33a:	2103      	movs	r1, #3
 800b33c:	f000 faae 	bl	800b89c <xEventGroupWaitBits>
 800b340:	60b8      	str	r0, [r7, #8]
                                          SL_WFX_TX_PACKET_AVAILABLE | SL_WFX_RX_PACKET_AVAILABLE,
                                          pdTRUE,
                                          pdFALSE,
                                          portMAX_DELAY);

    if (wifi_event_bits & SL_WFX_TX_PACKET_AVAILABLE) {
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	f003 0301 	and.w	r3, r3, #1
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <sl_wfx_task_entry+0x30>
      /* Process TX packets */
      sl_wfx_tx_process();
 800b34c:	f000 f834 	bl	800b3b8 <sl_wfx_tx_process>
    }
    if (wifi_event_bits & SL_WFX_RX_PACKET_AVAILABLE) {
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	f003 0302 	and.w	r3, r3, #2
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0e8      	beq.n	800b32c <sl_wfx_task_entry+0xc>
      /* Process RX packets */
      sl_wfx_rx_process(control_register);
 800b35a:	89fb      	ldrh	r3, [r7, #14]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 f803 	bl	800b368 <sl_wfx_rx_process>
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 800b362:	e7e3      	b.n	800b32c <sl_wfx_task_entry+0xc>
 800b364:	200014e4 	.word	0x200014e4

0800b368 <sl_wfx_rx_process>:
}

/**************************************************************************//**
 * Wfx process receive frame
 *****************************************************************************/
static sl_status_t sl_wfx_rx_process (uint16_t control_register) {
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	4603      	mov	r3, r0
 800b370:	80fb      	strh	r3, [r7, #6]
  sl_status_t result;

  sl_wfx_host_disable_platform_interrupt();
 800b372:	f7ff ff50 	bl	800b216 <sl_wfx_host_disable_platform_interrupt>

  /* Receive a frame */
  result = sl_wfx_receive_frame(&control_register);
 800b376:	1dbb      	adds	r3, r7, #6
 800b378:	4618      	mov	r0, r3
 800b37a:	f7fe fa77 	bl	800986c <sl_wfx_receive_frame>
 800b37e:	60f8      	str	r0, [r7, #12]
  
  if (result) {
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d002      	beq.n	800b38c <sl_wfx_rx_process+0x24>
    sl_wfx_host_enable_platform_interrupt();
 800b386:	f7ff ff39 	bl	800b1fc <sl_wfx_host_enable_platform_interrupt>
 800b38a:	e00d      	b.n	800b3a8 <sl_wfx_rx_process+0x40>
  } else {
    if ((control_register & SL_WFX_CONT_NEXT_LEN_MASK) != 0) {
 800b38c:	88fb      	ldrh	r3, [r7, #6]
 800b38e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b392:	2b00      	cmp	r3, #0
 800b394:	d006      	beq.n	800b3a4 <sl_wfx_rx_process+0x3c>
      
      /* if a packet is still available in the WF200, set an RX event */
      xEventGroupSetBits(sl_wfx_event_group, SL_WFX_RX_PACKET_AVAILABLE);
 800b396:	4b07      	ldr	r3, [pc, #28]	@ (800b3b4 <sl_wfx_rx_process+0x4c>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2102      	movs	r1, #2
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 fb4f 	bl	800ba40 <xEventGroupSetBits>
 800b3a2:	e001      	b.n	800b3a8 <sl_wfx_rx_process+0x40>
    } else {
      sl_wfx_host_enable_platform_interrupt();
 800b3a4:	f7ff ff2a 	bl	800b1fc <sl_wfx_host_enable_platform_interrupt>
    }
  }

  return result;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	200014e4 	.word	0x200014e4

0800b3b8 <sl_wfx_tx_process>:

/**************************************************************************//**
 * Wfx process tx queue
 *****************************************************************************/
static sl_status_t sl_wfx_tx_process (void) {
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
  sl_status_t result;
  sl_wfx_packet_queue_item_t *item_to_free;

  if (sl_wfx_tx_queue_context.head_ptr == NULL) {
 800b3be:	4b28      	ldr	r3, [pc, #160]	@ (800b460 <sl_wfx_tx_process+0xa8>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <sl_wfx_tx_process+0x12>
    return SL_STATUS_EMPTY;
 800b3c6:	231b      	movs	r3, #27
 800b3c8:	e045      	b.n	800b456 <sl_wfx_tx_process+0x9e>
  }

  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 800b3ca:	4b26      	ldr	r3, [pc, #152]	@ (800b464 <sl_wfx_tx_process+0xac>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f04f 31ff 	mov.w	r1, #4294967295
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f001 f8a8 	bl	800c528 <xQueueSemaphoreTake>

  /* Send the packet */
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 800b3d8:	4b21      	ldr	r3, [pc, #132]	@ (800b460 <sl_wfx_tx_process+0xa8>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f103 000c 	add.w	r0, r3, #12
                                      sl_wfx_tx_queue_context.head_ptr->data_length,
 800b3e0:	4b1f      	ldr	r3, [pc, #124]	@ (800b460 <sl_wfx_tx_process+0xa8>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 800b3e4:	6899      	ldr	r1, [r3, #8]
                                      sl_wfx_tx_queue_context.head_ptr->interface,
 800b3e6:	4b1e      	ldr	r3, [pc, #120]	@ (800b460 <sl_wfx_tx_process+0xa8>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 800b3ea:	791a      	ldrb	r2, [r3, #4]
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f7fe f8f9 	bl	80095e4 <sl_wfx_send_ethernet_frame>
 800b3f2:	6078      	str	r0, [r7, #4]
                                      WFM_PRIORITY_BE0);

  if (result != SL_STATUS_OK) {
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00e      	beq.n	800b418 <sl_wfx_tx_process+0x60>
    /* If the packet is not successfully sent, set the associated event and return */
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 800b3fa:	4b1b      	ldr	r3, [pc, #108]	@ (800b468 <sl_wfx_tx_process+0xb0>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2101      	movs	r1, #1
 800b400:	4618      	mov	r0, r3
 800b402:	f000 fb1d 	bl	800ba40 <xEventGroupSetBits>
    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 800b406:	4b17      	ldr	r3, [pc, #92]	@ (800b464 <sl_wfx_tx_process+0xac>)
 800b408:	6818      	ldr	r0, [r3, #0]
 800b40a:	2300      	movs	r3, #0
 800b40c:	2200      	movs	r2, #0
 800b40e:	2100      	movs	r1, #0
 800b410:	f000 fd78 	bl	800bf04 <xQueueGenericSend>
    return SL_STATUS_FULL;
 800b414:	231c      	movs	r3, #28
 800b416:	e01e      	b.n	800b456 <sl_wfx_tx_process+0x9e>
  }
  
  /* The packet has been successfully sent, free it  */
  item_to_free = sl_wfx_tx_queue_context.head_ptr;
 800b418:	4b11      	ldr	r3, [pc, #68]	@ (800b460 <sl_wfx_tx_process+0xa8>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	603b      	str	r3, [r7, #0]
  
  /* Move the queue pointer to process the next packet */
  sl_wfx_tx_queue_context.head_ptr = sl_wfx_tx_queue_context.head_ptr->next;
 800b41e:	4b10      	ldr	r3, [pc, #64]	@ (800b460 <sl_wfx_tx_process+0xa8>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a0e      	ldr	r2, [pc, #56]	@ (800b460 <sl_wfx_tx_process+0xa8>)
 800b426:	6013      	str	r3, [r2, #0]

  /* The packet has been sent, release the packet  */
  sl_wfx_free_command_buffer((sl_wfx_generic_message_t*) item_to_free,
 800b428:	2200      	movs	r2, #0
 800b42a:	214a      	movs	r1, #74	@ 0x4a
 800b42c:	6838      	ldr	r0, [r7, #0]
 800b42e:	f7fe ff15 	bl	800a25c <sl_wfx_free_command_buffer>
                             SL_WFX_SEND_FRAME_REQ_ID,
                             SL_WFX_TX_FRAME_BUFFER);

  /* If a packet is available, set the associated event */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 800b432:	4b0b      	ldr	r3, [pc, #44]	@ (800b460 <sl_wfx_tx_process+0xa8>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d005      	beq.n	800b446 <sl_wfx_tx_process+0x8e>
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 800b43a:	4b0b      	ldr	r3, [pc, #44]	@ (800b468 <sl_wfx_tx_process+0xb0>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2101      	movs	r1, #1
 800b440:	4618      	mov	r0, r3
 800b442:	f000 fafd 	bl	800ba40 <xEventGroupSetBits>
  }
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 800b446:	4b07      	ldr	r3, [pc, #28]	@ (800b464 <sl_wfx_tx_process+0xac>)
 800b448:	6818      	ldr	r0, [r3, #0]
 800b44a:	2300      	movs	r3, #0
 800b44c:	2200      	movs	r2, #0
 800b44e:	2100      	movs	r1, #0
 800b450:	f000 fd58 	bl	800bf04 <xQueueGenericSend>

  return result;
 800b454:	687b      	ldr	r3, [r7, #4]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	200014ec 	.word	0x200014ec
 800b464:	200014e8 	.word	0x200014e8
 800b468:	200014e4 	.word	0x200014e4

0800b46c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	4603      	mov	r3, r0
 800b474:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b476:	2300      	movs	r3, #0
 800b478:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b47a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b47e:	2b84      	cmp	r3, #132	@ 0x84
 800b480:	d005      	beq.n	800b48e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b482:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	4413      	add	r3, r2
 800b48a:	3303      	adds	r3, #3
 800b48c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b48e:	68fb      	ldr	r3, [r7, #12]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3714      	adds	r7, #20
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4a2:	f3ef 8305 	mrs	r3, IPSR
 800b4a6:	607b      	str	r3, [r7, #4]
  return(result);
 800b4a8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	bf14      	ite	ne
 800b4ae:	2301      	movne	r3, #1
 800b4b0:	2300      	moveq	r3, #0
 800b4b2:	b2db      	uxtb	r3, r3
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b4c4:	f001 fd8c 	bl	800cfe0 <vTaskStartScheduler>
  
  return osOK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b4d2:	f7ff ffe3 	bl	800b49c <inHandlerMode>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b4dc:	f001 fe8a 	bl	800d1f4 <xTaskGetTickCountFromISR>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	e002      	b.n	800b4ea <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b4e4:	f001 fe76 	bl	800d1d4 <xTaskGetTickCount>
 800b4e8:	4603      	mov	r3, r0
  }
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b4ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4f0:	b087      	sub	sp, #28
 800b4f2:	af02      	add	r7, sp, #8
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685c      	ldr	r4, [r3, #4]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b504:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7ff ffad 	bl	800b46c <makeFreeRtosPriority>
 800b512:	4602      	mov	r2, r0
 800b514:	f107 030c 	add.w	r3, r7, #12
 800b518:	9301      	str	r3, [sp, #4]
 800b51a:	9200      	str	r2, [sp, #0]
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	4632      	mov	r2, r6
 800b520:	4629      	mov	r1, r5
 800b522:	4620      	mov	r0, r4
 800b524:	f001 fb62 	bl	800cbec <xTaskCreate>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d001      	beq.n	800b532 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800b52e:	2300      	movs	r3, #0
 800b530:	e000      	b.n	800b534 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800b532:	68fb      	ldr	r3, [r7, #12]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b53c <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 fc85 	bl	800ce54 <vTaskDelete>
  return osOK;
 800b54a:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	085b      	lsrs	r3, r3, #1
 800b560:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <osDelay+0x18>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	e000      	b.n	800b56e <osDelay+0x1a>
 800b56c:	2301      	movs	r3, #1
 800b56e:	4618      	mov	r0, r3
 800b570:	f001 fd00 	bl	800cf74 <vTaskDelay>
  
  return osOK;
 800b574:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b082      	sub	sp, #8
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800b586:	2001      	movs	r0, #1
 800b588:	f000 fca4 	bl	800bed4 <xQueueCreateMutex>
 800b58c:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <osMutexWait+0x18>
    return osErrorParameter;
 800b5ac:	2380      	movs	r3, #128	@ 0x80
 800b5ae:	e03b      	b.n	800b628 <osMutexWait+0x90>
  }
  
  ticks = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ba:	d103      	bne.n	800b5c4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	e00a      	b.n	800b5da <osMutexWait+0x42>
  }
  else if (millisec != 0) {
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d007      	beq.n	800b5da <osMutexWait+0x42>
    ticks = millisec / portTICK_PERIOD_MS;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	085b      	lsrs	r3, r3, #1
 800b5ce:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d101      	bne.n	800b5da <osMutexWait+0x42>
      ticks = 1;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b5da:	f7ff ff5f 	bl	800b49c <inHandlerMode>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d017      	beq.n	800b614 <osMutexWait+0x7c>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b5e4:	f107 0308 	add.w	r3, r7, #8
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f001 f8ab 	bl	800c748 <xQueueReceiveFromISR>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d001      	beq.n	800b5fc <osMutexWait+0x64>
      return osErrorOS;
 800b5f8:	23ff      	movs	r3, #255	@ 0xff
 800b5fa:	e015      	b.n	800b628 <osMutexWait+0x90>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d011      	beq.n	800b626 <osMutexWait+0x8e>
 800b602:	4b0b      	ldr	r3, [pc, #44]	@ (800b630 <osMutexWait+0x98>)
 800b604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b608:	601a      	str	r2, [r3, #0]
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	e008      	b.n	800b626 <osMutexWait+0x8e>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b614:	68f9      	ldr	r1, [r7, #12]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 ff86 	bl	800c528 <xQueueSemaphoreTake>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d001      	beq.n	800b626 <osMutexWait+0x8e>
    return osErrorOS;
 800b622:	23ff      	movs	r3, #255	@ 0xff
 800b624:	e000      	b.n	800b628 <osMutexWait+0x90>
  }
  
  return osOK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	e000ed04 	.word	0xe000ed04

0800b634 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b640:	2300      	movs	r3, #0
 800b642:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b644:	f7ff ff2a 	bl	800b49c <inHandlerMode>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d016      	beq.n	800b67c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b64e:	f107 0308 	add.w	r3, r7, #8
 800b652:	4619      	mov	r1, r3
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fdf5 	bl	800c244 <xQueueGiveFromISR>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d001      	beq.n	800b664 <osMutexRelease+0x30>
      return osErrorOS;
 800b660:	23ff      	movs	r3, #255	@ 0xff
 800b662:	e017      	b.n	800b694 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d013      	beq.n	800b692 <osMutexRelease+0x5e>
 800b66a:	4b0c      	ldr	r3, [pc, #48]	@ (800b69c <osMutexRelease+0x68>)
 800b66c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	e00a      	b.n	800b692 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b67c:	2300      	movs	r3, #0
 800b67e:	2200      	movs	r2, #0
 800b680:	2100      	movs	r1, #0
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fc3e 	bl	800bf04 <xQueueGenericSend>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d001      	beq.n	800b692 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b68e:	23ff      	movs	r3, #255	@ 0xff
 800b690:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b692:	68fb      	ldr	r3, [r7, #12]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	e000ed04 	.word	0xe000ed04

0800b6a0 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b6a8:	f7ff fef8 	bl	800b49c <inHandlerMode>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <osMutexDelete+0x16>
    return osErrorISR;
 800b6b2:	2382      	movs	r3, #130	@ 0x82
 800b6b4:	e003      	b.n	800b6be <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f001 f8c8 	bl	800c84c <vQueueDelete>

  return osOK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6818      	ldr	r0, [r3, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	4619      	mov	r1, r3
 800b6dc:	f000 fb8a 	bl	800bdf4 <xQueueGenericCreate>
 800b6e0:	4603      	mov	r3, r0
#endif
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
	...

0800b6ec <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	085b      	lsrs	r3, r3, #1
 800b700:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d101      	bne.n	800b70c <osMessagePut+0x20>
    ticks = 1;
 800b708:	2301      	movs	r3, #1
 800b70a:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b70c:	f7ff fec6 	bl	800b49c <inHandlerMode>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d018      	beq.n	800b748 <osMessagePut+0x5c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b716:	f107 0210 	add.w	r2, r7, #16
 800b71a:	f107 0108 	add.w	r1, r7, #8
 800b71e:	2300      	movs	r3, #0
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 fcf1 	bl	800c108 <xQueueGenericSendFromISR>
 800b726:	4603      	mov	r3, r0
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d001      	beq.n	800b730 <osMessagePut+0x44>
      return osErrorOS;
 800b72c:	23ff      	movs	r3, #255	@ 0xff
 800b72e:	e018      	b.n	800b762 <osMessagePut+0x76>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d014      	beq.n	800b760 <osMessagePut+0x74>
 800b736:	4b0d      	ldr	r3, [pc, #52]	@ (800b76c <osMessagePut+0x80>)
 800b738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	e00b      	b.n	800b760 <osMessagePut+0x74>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b748:	f107 0108 	add.w	r1, r7, #8
 800b74c:	2300      	movs	r3, #0
 800b74e:	697a      	ldr	r2, [r7, #20]
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f000 fbd7 	bl	800bf04 <xQueueGenericSend>
 800b756:	4603      	mov	r3, r0
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d001      	beq.n	800b760 <osMessagePut+0x74>
      return osErrorOS;
 800b75c:	23ff      	movs	r3, #255	@ 0xff
 800b75e:	e000      	b.n	800b762 <osMessagePut+0x76>
    }
  }
  
  return osOK;
 800b760:	2300      	movs	r3, #0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3718      	adds	r7, #24
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	e000ed04 	.word	0xe000ed04

0800b770 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b770:	b590      	push	{r4, r7, lr}
 800b772:	b08b      	sub	sp, #44	@ 0x2c
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b780:	2300      	movs	r3, #0
 800b782:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10a      	bne.n	800b7a0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b78a:	2380      	movs	r3, #128	@ 0x80
 800b78c:	617b      	str	r3, [r7, #20]
    return event;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	461c      	mov	r4, r3
 800b792:	f107 0314 	add.w	r3, r7, #20
 800b796:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b79a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b79e:	e055      	b.n	800b84c <osMessageGet+0xdc>
  }
  
  taskWoken = pdFALSE;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ae:	d103      	bne.n	800b7b8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7b6:	e00a      	b.n	800b7ce <osMessageGet+0x5e>
  }
  else if (millisec != 0) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d007      	beq.n	800b7ce <osMessageGet+0x5e>
    ticks = millisec / portTICK_PERIOD_MS;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	085b      	lsrs	r3, r3, #1
 800b7c2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d101      	bne.n	800b7ce <osMessageGet+0x5e>
      ticks = 1;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b7ce:	f7ff fe65 	bl	800b49c <inHandlerMode>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d01c      	beq.n	800b812 <osMessageGet+0xa2>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b7d8:	f107 0220 	add.w	r2, r7, #32
 800b7dc:	f107 0314 	add.w	r3, r7, #20
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	68b8      	ldr	r0, [r7, #8]
 800b7e6:	f000 ffaf 	bl	800c748 <xQueueReceiveFromISR>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d102      	bne.n	800b7f6 <osMessageGet+0x86>
      /* We have mail */
      event.status = osEventMessage;
 800b7f0:	2310      	movs	r3, #16
 800b7f2:	617b      	str	r3, [r7, #20]
 800b7f4:	e001      	b.n	800b7fa <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b7fa:	6a3b      	ldr	r3, [r7, #32]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01d      	beq.n	800b83c <osMessageGet+0xcc>
 800b800:	4b14      	ldr	r3, [pc, #80]	@ (800b854 <osMessageGet+0xe4>)
 800b802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	e014      	b.n	800b83c <osMessageGet+0xcc>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b812:	f107 0314 	add.w	r3, r7, #20
 800b816:	3304      	adds	r3, #4
 800b818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b81a:	4619      	mov	r1, r3
 800b81c:	68b8      	ldr	r0, [r7, #8]
 800b81e:	f000 fda1 	bl	800c364 <xQueueReceive>
 800b822:	4603      	mov	r3, r0
 800b824:	2b01      	cmp	r3, #1
 800b826:	d102      	bne.n	800b82e <osMessageGet+0xbe>
      /* We have mail */
      event.status = osEventMessage;
 800b828:	2310      	movs	r3, #16
 800b82a:	617b      	str	r3, [r7, #20]
 800b82c:	e006      	b.n	800b83c <osMessageGet+0xcc>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b830:	2b00      	cmp	r3, #0
 800b832:	d101      	bne.n	800b838 <osMessageGet+0xc8>
 800b834:	2300      	movs	r3, #0
 800b836:	e000      	b.n	800b83a <osMessageGet+0xca>
 800b838:	2340      	movs	r3, #64	@ 0x40
 800b83a:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	461c      	mov	r4, r3
 800b840:	f107 0314 	add.w	r3, r7, #20
 800b844:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b848:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	372c      	adds	r7, #44	@ 0x2c
 800b850:	46bd      	mov	sp, r7
 800b852:	bd90      	pop	{r4, r7, pc}
 800b854:	e000ed04 	.word	0xe000ed04

0800b858 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800b85c:	f002 f886 	bl	800d96c <xTaskGetSchedulerState>
 800b860:	4603      	mov	r3, r0
 800b862:	2b01      	cmp	r3, #1
 800b864:	d001      	beq.n	800b86a <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800b866:	f002 ffd7 	bl	800e818 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800b86a:	bf00      	nop
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800b874:	2018      	movs	r0, #24
 800b876:	f003 f861 	bl	800e93c <pvPortMalloc>
 800b87a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d007      	beq.n	800b892 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3304      	adds	r3, #4
 800b88c:	4618      	mov	r0, r3
 800b88e:	f000 f992 	bl	800bbb6 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800b892:	687b      	ldr	r3, [r7, #4]
	}
 800b894:	4618      	mov	r0, r3
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b090      	sub	sp, #64	@ 0x40
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
 800b8a8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d10b      	bne.n	800b8d4 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b8ce:	bf00      	nop
 800b8d0:	bf00      	nop
 800b8d2:	e7fd      	b.n	800b8d0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b8da:	d30b      	bcc.n	800b8f4 <xEventGroupWaitBits+0x58>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	61fb      	str	r3, [r7, #28]
}
 800b8ee:	bf00      	nop
 800b8f0:	bf00      	nop
 800b8f2:	e7fd      	b.n	800b8f0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10b      	bne.n	800b912 <xEventGroupWaitBits+0x76>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	61bb      	str	r3, [r7, #24]
}
 800b90c:	bf00      	nop
 800b90e:	bf00      	nop
 800b910:	e7fd      	b.n	800b90e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b912:	f002 f82b 	bl	800d96c <xTaskGetSchedulerState>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d102      	bne.n	800b922 <xEventGroupWaitBits+0x86>
 800b91c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <xEventGroupWaitBits+0x8a>
 800b922:	2301      	movs	r3, #1
 800b924:	e000      	b.n	800b928 <xEventGroupWaitBits+0x8c>
 800b926:	2300      	movs	r3, #0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10b      	bne.n	800b944 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	617b      	str	r3, [r7, #20]
}
 800b93e:	bf00      	nop
 800b940:	bf00      	nop
 800b942:	e7fd      	b.n	800b940 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800b944:	f001 fb9a 	bl	800d07c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800b948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	68b9      	ldr	r1, [r7, #8]
 800b952:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b954:	f000 f90d 	bl	800bb72 <prvTestWaitCondition>
 800b958:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800b95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00e      	beq.n	800b97e <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800b960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b962:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800b964:	2300      	movs	r3, #0
 800b966:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d028      	beq.n	800b9c0 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	43db      	mvns	r3, r3
 800b976:	401a      	ands	r2, r3
 800b978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b97a:	601a      	str	r2, [r3, #0]
 800b97c:	e020      	b.n	800b9c0 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800b97e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b980:	2b00      	cmp	r3, #0
 800b982:	d104      	bne.n	800b98e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800b984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b986:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800b988:	2301      	movs	r3, #1
 800b98a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b98c:	e018      	b.n	800b9c0 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d003      	beq.n	800b99c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800b994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b99a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b9a8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800b9aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ac:	1d18      	adds	r0, r3, #4
 800b9ae:	68ba      	ldr	r2, [r7, #8]
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	f001 fd6a 	bl	800d490 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800b9c0:	f001 fb6a 	bl	800d098 <xTaskResumeAll>
 800b9c4:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800b9c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d031      	beq.n	800ba30 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d107      	bne.n	800b9e2 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800b9d2:	4b1a      	ldr	r3, [pc, #104]	@ (800ba3c <xEventGroupWaitBits+0x1a0>)
 800b9d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9d8:	601a      	str	r2, [r3, #0]
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800b9e2:	f002 f96f 	bl	800dcc4 <uxTaskResetEventItemValue>
 800b9e6:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800b9e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d11a      	bne.n	800ba28 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800b9f2:	f002 fe81 	bl	800e6f8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800b9f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800b9fc:	683a      	ldr	r2, [r7, #0]
 800b9fe:	68b9      	ldr	r1, [r7, #8]
 800ba00:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ba02:	f000 f8b6 	bl	800bb72 <prvTestWaitCondition>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d009      	beq.n	800ba20 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d006      	beq.n	800ba20 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ba12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	43db      	mvns	r3, r3
 800ba1a:	401a      	ands	r2, r3
 800ba1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba1e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800ba20:	2301      	movs	r3, #1
 800ba22:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800ba24:	f002 fe9a 	bl	800e75c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ba28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ba2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800ba30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3740      	adds	r7, #64	@ 0x40
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	e000ed04 	.word	0xe000ed04

0800ba40 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b08e      	sub	sp, #56	@ 0x38
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800ba52:	2300      	movs	r3, #0
 800ba54:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10b      	bne.n	800ba74 <xEventGroupSetBits+0x34>
	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	613b      	str	r3, [r7, #16]
}
 800ba6e:	bf00      	nop
 800ba70:	bf00      	nop
 800ba72:	e7fd      	b.n	800ba70 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba7a:	d30b      	bcc.n	800ba94 <xEventGroupSetBits+0x54>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	60fb      	str	r3, [r7, #12]
}
 800ba8e:	bf00      	nop
 800ba90:	bf00      	nop
 800ba92:	e7fd      	b.n	800ba90 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800ba94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba96:	3304      	adds	r3, #4
 800ba98:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9c:	3308      	adds	r3, #8
 800ba9e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800baa0:	f001 faec 	bl	800d07c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800baa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800baaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	431a      	orrs	r2, r3
 800bab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800bab6:	e03c      	b.n	800bb32 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800bab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800babe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800bac4:	2300      	movs	r3, #0
 800bac6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bace:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bad6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d108      	bne.n	800baf4 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800bae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	4013      	ands	r3, r2
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00b      	beq.n	800bb06 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800baee:	2301      	movs	r3, #1
 800baf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800baf2:	e008      	b.n	800bb06 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800baf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	4013      	ands	r3, r2
 800bafc:	69ba      	ldr	r2, [r7, #24]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d101      	bne.n	800bb06 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800bb02:	2301      	movs	r3, #1
 800bb04:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800bb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d010      	beq.n	800bb2e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d003      	beq.n	800bb1e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800bb16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800bb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bb26:	4619      	mov	r1, r3
 800bb28:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bb2a:	f001 fd7f 	bl	800d62c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800bb32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb34:	6a3b      	ldr	r3, [r7, #32]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d1be      	bne.n	800bab8 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800bb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb40:	43db      	mvns	r3, r3
 800bb42:	401a      	ands	r2, r3
 800bb44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb46:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800bb48:	f001 faa6 	bl	800d098 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800bb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4e:	681b      	ldr	r3, [r3, #0]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3738      	adds	r7, #56	@ 0x38
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f7ff ff6b 	bl	800ba40 <xEventGroupSetBits>
}
 800bb6a:	bf00      	nop
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800bb72:	b480      	push	{r7}
 800bb74:	b087      	sub	sp, #28
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	60f8      	str	r0, [r7, #12]
 800bb7a:	60b9      	str	r1, [r7, #8]
 800bb7c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d107      	bne.n	800bb98 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00a      	beq.n	800bba8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800bb92:	2301      	movs	r3, #1
 800bb94:	617b      	str	r3, [r7, #20]
 800bb96:	e007      	b.n	800bba8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d101      	bne.n	800bba8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800bba4:	2301      	movs	r3, #1
 800bba6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800bba8:	697b      	ldr	r3, [r7, #20]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	371c      	adds	r7, #28
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	b083      	sub	sp, #12
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f103 0208 	add.w	r2, r3, #8
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f04f 32ff 	mov.w	r2, #4294967295
 800bbce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f103 0208 	add.w	r2, r3, #8
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f103 0208 	add.w	r2, r3, #8
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bbea:	bf00      	nop
 800bbec:	370c      	adds	r7, #12
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	689a      	ldr	r2, [r3, #8]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	1c5a      	adds	r2, r3, #1
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	601a      	str	r2, [r3, #0]
}
 800bc4c:	bf00      	nop
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6e:	d103      	bne.n	800bc78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	691b      	ldr	r3, [r3, #16]
 800bc74:	60fb      	str	r3, [r7, #12]
 800bc76:	e00c      	b.n	800bc92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	60fb      	str	r3, [r7, #12]
 800bc7e:	e002      	b.n	800bc86 <vListInsert+0x2e>
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	60fb      	str	r3, [r7, #12]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d2f6      	bcs.n	800bc80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	685a      	ldr	r2, [r3, #4]
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	1c5a      	adds	r2, r3, #1
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	601a      	str	r2, [r3, #0]
}
 800bcbe:	bf00      	nop
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bcca:	b480      	push	{r7}
 800bccc:	b085      	sub	sp, #20
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	6892      	ldr	r2, [r2, #8]
 800bce0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	6852      	ldr	r2, [r2, #4]
 800bcea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d103      	bne.n	800bcfe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	689a      	ldr	r2, [r3, #8]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	1e5a      	subs	r2, r3, #1
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3714      	adds	r7, #20
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
	...

0800bd20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10b      	bne.n	800bd4c <xQueueGenericReset+0x2c>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	60bb      	str	r3, [r7, #8]
}
 800bd46:	bf00      	nop
 800bd48:	bf00      	nop
 800bd4a:	e7fd      	b.n	800bd48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bd4c:	f002 fcd4 	bl	800e6f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd58:	68f9      	ldr	r1, [r7, #12]
 800bd5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bd5c:	fb01 f303 	mul.w	r3, r1, r3
 800bd60:	441a      	add	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	68f9      	ldr	r1, [r7, #12]
 800bd80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bd82:	fb01 f303 	mul.w	r3, r1, r3
 800bd86:	441a      	add	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	22ff      	movs	r2, #255	@ 0xff
 800bd90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	22ff      	movs	r2, #255	@ 0xff
 800bd98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d114      	bne.n	800bdcc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d01a      	beq.n	800bde0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3310      	adds	r3, #16
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f001 fbd8 	bl	800d564 <xTaskRemoveFromEventList>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d012      	beq.n	800bde0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdba:	4b0d      	ldr	r3, [pc, #52]	@ (800bdf0 <xQueueGenericReset+0xd0>)
 800bdbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdc0:	601a      	str	r2, [r3, #0]
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	e009      	b.n	800bde0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	3310      	adds	r3, #16
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff fef0 	bl	800bbb6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3324      	adds	r3, #36	@ 0x24
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff feeb 	bl	800bbb6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bde0:	f002 fcbc 	bl	800e75c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bde4:	2301      	movs	r3, #1
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	e000ed04 	.word	0xe000ed04

0800bdf4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b08a      	sub	sp, #40	@ 0x28
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	4613      	mov	r3, r2
 800be00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10b      	bne.n	800be20 <xQueueGenericCreate+0x2c>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	613b      	str	r3, [r7, #16]
}
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	e7fd      	b.n	800be1c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	fb02 f303 	mul.w	r3, r2, r3
 800be28:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	3348      	adds	r3, #72	@ 0x48
 800be2e:	4618      	mov	r0, r3
 800be30:	f002 fd84 	bl	800e93c <pvPortMalloc>
 800be34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00d      	beq.n	800be58 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	3348      	adds	r3, #72	@ 0x48
 800be44:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be46:	79fa      	ldrb	r2, [r7, #7]
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	4613      	mov	r3, r2
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	68b9      	ldr	r1, [r7, #8]
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f000 f805 	bl	800be62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be58:	69bb      	ldr	r3, [r7, #24]
	}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3720      	adds	r7, #32
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b084      	sub	sp, #16
 800be66:	af00      	add	r7, sp, #0
 800be68:	60f8      	str	r0, [r7, #12]
 800be6a:	60b9      	str	r1, [r7, #8]
 800be6c:	607a      	str	r2, [r7, #4]
 800be6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d103      	bne.n	800be7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	69ba      	ldr	r2, [r7, #24]
 800be7a:	601a      	str	r2, [r3, #0]
 800be7c:	e002      	b.n	800be84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be90:	2101      	movs	r1, #1
 800be92:	69b8      	ldr	r0, [r7, #24]
 800be94:	f7ff ff44 	bl	800bd20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be98:	bf00      	nop
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00e      	beq.n	800becc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bec0:	2300      	movs	r3, #0
 800bec2:	2200      	movs	r2, #0
 800bec4:	2100      	movs	r1, #0
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f81c 	bl	800bf04 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800becc:	bf00      	nop
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	4603      	mov	r3, r0
 800bedc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bede:	2301      	movs	r3, #1
 800bee0:	617b      	str	r3, [r7, #20]
 800bee2:	2300      	movs	r3, #0
 800bee4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bee6:	79fb      	ldrb	r3, [r7, #7]
 800bee8:	461a      	mov	r2, r3
 800beea:	6939      	ldr	r1, [r7, #16]
 800beec:	6978      	ldr	r0, [r7, #20]
 800beee:	f7ff ff81 	bl	800bdf4 <xQueueGenericCreate>
 800bef2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f7ff ffd3 	bl	800bea0 <prvInitialiseMutex>

		return xNewQueue;
 800befa:	68fb      	ldr	r3, [r7, #12]
	}
 800befc:	4618      	mov	r0, r3
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b08e      	sub	sp, #56	@ 0x38
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
 800bf10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf12:	2300      	movs	r3, #0
 800bf14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10b      	bne.n	800bf38 <xQueueGenericSend+0x34>
	__asm volatile
 800bf20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bf32:	bf00      	nop
 800bf34:	bf00      	nop
 800bf36:	e7fd      	b.n	800bf34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d103      	bne.n	800bf46 <xQueueGenericSend+0x42>
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <xQueueGenericSend+0x46>
 800bf46:	2301      	movs	r3, #1
 800bf48:	e000      	b.n	800bf4c <xQueueGenericSend+0x48>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10b      	bne.n	800bf68 <xQueueGenericSend+0x64>
	__asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bf62:	bf00      	nop
 800bf64:	bf00      	nop
 800bf66:	e7fd      	b.n	800bf64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d103      	bne.n	800bf76 <xQueueGenericSend+0x72>
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d101      	bne.n	800bf7a <xQueueGenericSend+0x76>
 800bf76:	2301      	movs	r3, #1
 800bf78:	e000      	b.n	800bf7c <xQueueGenericSend+0x78>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10b      	bne.n	800bf98 <xQueueGenericSend+0x94>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	623b      	str	r3, [r7, #32]
}
 800bf92:	bf00      	nop
 800bf94:	bf00      	nop
 800bf96:	e7fd      	b.n	800bf94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf98:	f001 fce8 	bl	800d96c <xTaskGetSchedulerState>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d102      	bne.n	800bfa8 <xQueueGenericSend+0xa4>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d101      	bne.n	800bfac <xQueueGenericSend+0xa8>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e000      	b.n	800bfae <xQueueGenericSend+0xaa>
 800bfac:	2300      	movs	r3, #0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10b      	bne.n	800bfca <xQueueGenericSend+0xc6>
	__asm volatile
 800bfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb6:	f383 8811 	msr	BASEPRI, r3
 800bfba:	f3bf 8f6f 	isb	sy
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	61fb      	str	r3, [r7, #28]
}
 800bfc4:	bf00      	nop
 800bfc6:	bf00      	nop
 800bfc8:	e7fd      	b.n	800bfc6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfca:	f002 fb95 	bl	800e6f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d302      	bcc.n	800bfe0 <xQueueGenericSend+0xdc>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d129      	bne.n	800c034 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfe0:	683a      	ldr	r2, [r7, #0]
 800bfe2:	68b9      	ldr	r1, [r7, #8]
 800bfe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bfe6:	f000 fc68 	bl	800c8ba <prvCopyDataToQueue>
 800bfea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d010      	beq.n	800c016 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff6:	3324      	adds	r3, #36	@ 0x24
 800bff8:	4618      	mov	r0, r3
 800bffa:	f001 fab3 	bl	800d564 <xTaskRemoveFromEventList>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d013      	beq.n	800c02c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c004:	4b3f      	ldr	r3, [pc, #252]	@ (800c104 <xQueueGenericSend+0x200>)
 800c006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c00a:	601a      	str	r2, [r3, #0]
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	e00a      	b.n	800c02c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d007      	beq.n	800c02c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c01c:	4b39      	ldr	r3, [pc, #228]	@ (800c104 <xQueueGenericSend+0x200>)
 800c01e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c02c:	f002 fb96 	bl	800e75c <vPortExitCritical>
				return pdPASS;
 800c030:	2301      	movs	r3, #1
 800c032:	e063      	b.n	800c0fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d103      	bne.n	800c042 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c03a:	f002 fb8f 	bl	800e75c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c03e:	2300      	movs	r3, #0
 800c040:	e05c      	b.n	800c0fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c044:	2b00      	cmp	r3, #0
 800c046:	d106      	bne.n	800c056 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c048:	f107 0314 	add.w	r3, r7, #20
 800c04c:	4618      	mov	r0, r3
 800c04e:	f001 fb51 	bl	800d6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c052:	2301      	movs	r3, #1
 800c054:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c056:	f002 fb81 	bl	800e75c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c05a:	f001 f80f 	bl	800d07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c05e:	f002 fb4b 	bl	800e6f8 <vPortEnterCritical>
 800c062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c068:	b25b      	sxtb	r3, r3
 800c06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06e:	d103      	bne.n	800c078 <xQueueGenericSend+0x174>
 800c070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c072:	2200      	movs	r2, #0
 800c074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c07e:	b25b      	sxtb	r3, r3
 800c080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c084:	d103      	bne.n	800c08e <xQueueGenericSend+0x18a>
 800c086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c08e:	f002 fb65 	bl	800e75c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c092:	1d3a      	adds	r2, r7, #4
 800c094:	f107 0314 	add.w	r3, r7, #20
 800c098:	4611      	mov	r1, r2
 800c09a:	4618      	mov	r0, r3
 800c09c:	f001 fb40 	bl	800d720 <xTaskCheckForTimeOut>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d124      	bne.n	800c0f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c0a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0a8:	f000 fcff 	bl	800caaa <prvIsQueueFull>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d018      	beq.n	800c0e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b4:	3310      	adds	r3, #16
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	4611      	mov	r1, r2
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f001 f9c2 	bl	800d444 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c0c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0c2:	f000 fc8a 	bl	800c9da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c0c6:	f000 ffe7 	bl	800d098 <xTaskResumeAll>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f47f af7c 	bne.w	800bfca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c0d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c104 <xQueueGenericSend+0x200>)
 800c0d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0d8:	601a      	str	r2, [r3, #0]
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	e772      	b.n	800bfca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c0e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0e6:	f000 fc78 	bl	800c9da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0ea:	f000 ffd5 	bl	800d098 <xTaskResumeAll>
 800c0ee:	e76c      	b.n	800bfca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c0f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0f2:	f000 fc72 	bl	800c9da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0f6:	f000 ffcf 	bl	800d098 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c0fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3738      	adds	r7, #56	@ 0x38
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	e000ed04 	.word	0xe000ed04

0800c108 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b090      	sub	sp, #64	@ 0x40
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
 800c114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10b      	bne.n	800c138 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c132:	bf00      	nop
 800c134:	bf00      	nop
 800c136:	e7fd      	b.n	800c134 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d103      	bne.n	800c146 <xQueueGenericSendFromISR+0x3e>
 800c13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c142:	2b00      	cmp	r3, #0
 800c144:	d101      	bne.n	800c14a <xQueueGenericSendFromISR+0x42>
 800c146:	2301      	movs	r3, #1
 800c148:	e000      	b.n	800c14c <xQueueGenericSendFromISR+0x44>
 800c14a:	2300      	movs	r3, #0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10b      	bne.n	800c168 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c162:	bf00      	nop
 800c164:	bf00      	nop
 800c166:	e7fd      	b.n	800c164 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d103      	bne.n	800c176 <xQueueGenericSendFromISR+0x6e>
 800c16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c172:	2b01      	cmp	r3, #1
 800c174:	d101      	bne.n	800c17a <xQueueGenericSendFromISR+0x72>
 800c176:	2301      	movs	r3, #1
 800c178:	e000      	b.n	800c17c <xQueueGenericSendFromISR+0x74>
 800c17a:	2300      	movs	r3, #0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10b      	bne.n	800c198 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	623b      	str	r3, [r7, #32]
}
 800c192:	bf00      	nop
 800c194:	bf00      	nop
 800c196:	e7fd      	b.n	800c194 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c198:	f002 fb8e 	bl	800e8b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c19c:	f3ef 8211 	mrs	r2, BASEPRI
 800c1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	61fa      	str	r2, [r7, #28]
 800c1b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c1b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d302      	bcc.n	800c1ca <xQueueGenericSendFromISR+0xc2>
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	d12f      	bne.n	800c22a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c1d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1da:	683a      	ldr	r2, [r7, #0]
 800c1dc:	68b9      	ldr	r1, [r7, #8]
 800c1de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c1e0:	f000 fb6b 	bl	800c8ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c1e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ec:	d112      	bne.n	800c214 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d016      	beq.n	800c224 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f8:	3324      	adds	r3, #36	@ 0x24
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f001 f9b2 	bl	800d564 <xTaskRemoveFromEventList>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00e      	beq.n	800c224 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00b      	beq.n	800c224 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2201      	movs	r2, #1
 800c210:	601a      	str	r2, [r3, #0]
 800c212:	e007      	b.n	800c224 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c214:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c218:	3301      	adds	r3, #1
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	b25a      	sxtb	r2, r3
 800c21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c224:	2301      	movs	r3, #1
 800c226:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c228:	e001      	b.n	800c22e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c22a:	2300      	movs	r3, #0
 800c22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c230:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c238:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c23a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3740      	adds	r7, #64	@ 0x40
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08e      	sub	sp, #56	@ 0x38
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10b      	bne.n	800c270 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	623b      	str	r3, [r7, #32]
}
 800c26a:	bf00      	nop
 800c26c:	bf00      	nop
 800c26e:	e7fd      	b.n	800c26c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00b      	beq.n	800c290 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	61fb      	str	r3, [r7, #28]
}
 800c28a:	bf00      	nop
 800c28c:	bf00      	nop
 800c28e:	e7fd      	b.n	800c28c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d103      	bne.n	800c2a0 <xQueueGiveFromISR+0x5c>
 800c298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d101      	bne.n	800c2a4 <xQueueGiveFromISR+0x60>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e000      	b.n	800c2a6 <xQueueGiveFromISR+0x62>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10b      	bne.n	800c2c2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	61bb      	str	r3, [r7, #24]
}
 800c2bc:	bf00      	nop
 800c2be:	bf00      	nop
 800c2c0:	e7fd      	b.n	800c2be <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2c2:	f002 faf9 	bl	800e8b8 <vPortValidateInterruptPriority>
	__asm volatile
 800c2c6:	f3ef 8211 	mrs	r2, BASEPRI
 800c2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ce:	f383 8811 	msr	BASEPRI, r3
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	617a      	str	r2, [r7, #20]
 800c2dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c2de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2e6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d22b      	bcs.n	800c34a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2fe:	1c5a      	adds	r2, r3, #1
 800c300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c302:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c304:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30c:	d112      	bne.n	800c334 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c312:	2b00      	cmp	r3, #0
 800c314:	d016      	beq.n	800c344 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c318:	3324      	adds	r3, #36	@ 0x24
 800c31a:	4618      	mov	r0, r3
 800c31c:	f001 f922 	bl	800d564 <xTaskRemoveFromEventList>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00e      	beq.n	800c344 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00b      	beq.n	800c344 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	2201      	movs	r2, #1
 800c330:	601a      	str	r2, [r3, #0]
 800c332:	e007      	b.n	800c344 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c334:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c338:	3301      	adds	r3, #1
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	b25a      	sxtb	r2, r3
 800c33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c344:	2301      	movs	r3, #1
 800c346:	637b      	str	r3, [r7, #52]	@ 0x34
 800c348:	e001      	b.n	800c34e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c34a:	2300      	movs	r3, #0
 800c34c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c350:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f383 8811 	msr	BASEPRI, r3
}
 800c358:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3738      	adds	r7, #56	@ 0x38
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b08c      	sub	sp, #48	@ 0x30
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c370:	2300      	movs	r3, #0
 800c372:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10b      	bne.n	800c396 <xQueueReceive+0x32>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	623b      	str	r3, [r7, #32]
}
 800c390:	bf00      	nop
 800c392:	bf00      	nop
 800c394:	e7fd      	b.n	800c392 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d103      	bne.n	800c3a4 <xQueueReceive+0x40>
 800c39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d101      	bne.n	800c3a8 <xQueueReceive+0x44>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e000      	b.n	800c3aa <xQueueReceive+0x46>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10b      	bne.n	800c3c6 <xQueueReceive+0x62>
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	61fb      	str	r3, [r7, #28]
}
 800c3c0:	bf00      	nop
 800c3c2:	bf00      	nop
 800c3c4:	e7fd      	b.n	800c3c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3c6:	f001 fad1 	bl	800d96c <xTaskGetSchedulerState>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d102      	bne.n	800c3d6 <xQueueReceive+0x72>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <xQueueReceive+0x76>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e000      	b.n	800c3dc <xQueueReceive+0x78>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10b      	bne.n	800c3f8 <xQueueReceive+0x94>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	61bb      	str	r3, [r7, #24]
}
 800c3f2:	bf00      	nop
 800c3f4:	bf00      	nop
 800c3f6:	e7fd      	b.n	800c3f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3f8:	f002 f97e 	bl	800e6f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c400:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c404:	2b00      	cmp	r3, #0
 800c406:	d01f      	beq.n	800c448 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c408:	68b9      	ldr	r1, [r7, #8]
 800c40a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c40c:	f000 fabf 	bl	800c98e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c412:	1e5a      	subs	r2, r3, #1
 800c414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c416:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00f      	beq.n	800c440 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c422:	3310      	adds	r3, #16
 800c424:	4618      	mov	r0, r3
 800c426:	f001 f89d 	bl	800d564 <xTaskRemoveFromEventList>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d007      	beq.n	800c440 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c430:	4b3c      	ldr	r3, [pc, #240]	@ (800c524 <xQueueReceive+0x1c0>)
 800c432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c440:	f002 f98c 	bl	800e75c <vPortExitCritical>
				return pdPASS;
 800c444:	2301      	movs	r3, #1
 800c446:	e069      	b.n	800c51c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d103      	bne.n	800c456 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c44e:	f002 f985 	bl	800e75c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c452:	2300      	movs	r3, #0
 800c454:	e062      	b.n	800c51c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d106      	bne.n	800c46a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c45c:	f107 0310 	add.w	r3, r7, #16
 800c460:	4618      	mov	r0, r3
 800c462:	f001 f947 	bl	800d6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c466:	2301      	movs	r3, #1
 800c468:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c46a:	f002 f977 	bl	800e75c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c46e:	f000 fe05 	bl	800d07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c472:	f002 f941 	bl	800e6f8 <vPortEnterCritical>
 800c476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c478:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c47c:	b25b      	sxtb	r3, r3
 800c47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c482:	d103      	bne.n	800c48c <xQueueReceive+0x128>
 800c484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c486:	2200      	movs	r2, #0
 800c488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c492:	b25b      	sxtb	r3, r3
 800c494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c498:	d103      	bne.n	800c4a2 <xQueueReceive+0x13e>
 800c49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4a2:	f002 f95b 	bl	800e75c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4a6:	1d3a      	adds	r2, r7, #4
 800c4a8:	f107 0310 	add.w	r3, r7, #16
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f001 f936 	bl	800d720 <xTaskCheckForTimeOut>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d123      	bne.n	800c502 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4bc:	f000 fadf 	bl	800ca7e <prvIsQueueEmpty>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d017      	beq.n	800c4f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c8:	3324      	adds	r3, #36	@ 0x24
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	4611      	mov	r1, r2
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f000 ffb8 	bl	800d444 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4d6:	f000 fa80 	bl	800c9da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4da:	f000 fddd 	bl	800d098 <xTaskResumeAll>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d189      	bne.n	800c3f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c4e4:	4b0f      	ldr	r3, [pc, #60]	@ (800c524 <xQueueReceive+0x1c0>)
 800c4e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4ea:	601a      	str	r2, [r3, #0]
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	f3bf 8f6f 	isb	sy
 800c4f4:	e780      	b.n	800c3f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4f8:	f000 fa6f 	bl	800c9da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4fc:	f000 fdcc 	bl	800d098 <xTaskResumeAll>
 800c500:	e77a      	b.n	800c3f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c504:	f000 fa69 	bl	800c9da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c508:	f000 fdc6 	bl	800d098 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c50c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c50e:	f000 fab6 	bl	800ca7e <prvIsQueueEmpty>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	f43f af6f 	beq.w	800c3f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c51a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3730      	adds	r7, #48	@ 0x30
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	e000ed04 	.word	0xe000ed04

0800c528 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b08e      	sub	sp, #56	@ 0x38
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c532:	2300      	movs	r3, #0
 800c534:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c53a:	2300      	movs	r3, #0
 800c53c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10b      	bne.n	800c55c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c548:	f383 8811 	msr	BASEPRI, r3
 800c54c:	f3bf 8f6f 	isb	sy
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	623b      	str	r3, [r7, #32]
}
 800c556:	bf00      	nop
 800c558:	bf00      	nop
 800c55a:	e7fd      	b.n	800c558 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00b      	beq.n	800c57c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c568:	f383 8811 	msr	BASEPRI, r3
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	61fb      	str	r3, [r7, #28]
}
 800c576:	bf00      	nop
 800c578:	bf00      	nop
 800c57a:	e7fd      	b.n	800c578 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c57c:	f001 f9f6 	bl	800d96c <xTaskGetSchedulerState>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d102      	bne.n	800c58c <xQueueSemaphoreTake+0x64>
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d101      	bne.n	800c590 <xQueueSemaphoreTake+0x68>
 800c58c:	2301      	movs	r3, #1
 800c58e:	e000      	b.n	800c592 <xQueueSemaphoreTake+0x6a>
 800c590:	2300      	movs	r3, #0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10b      	bne.n	800c5ae <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c59a:	f383 8811 	msr	BASEPRI, r3
 800c59e:	f3bf 8f6f 	isb	sy
 800c5a2:	f3bf 8f4f 	dsb	sy
 800c5a6:	61bb      	str	r3, [r7, #24]
}
 800c5a8:	bf00      	nop
 800c5aa:	bf00      	nop
 800c5ac:	e7fd      	b.n	800c5aa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5ae:	f002 f8a3 	bl	800e6f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d024      	beq.n	800c608 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c0:	1e5a      	subs	r2, r3, #1
 800c5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d104      	bne.n	800c5d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c5ce:	f001 fb91 	bl	800dcf4 <pvTaskIncrementMutexHeldCount>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5da:	691b      	ldr	r3, [r3, #16]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00f      	beq.n	800c600 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5e2:	3310      	adds	r3, #16
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 ffbd 	bl	800d564 <xTaskRemoveFromEventList>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d007      	beq.n	800c600 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5f0:	4b54      	ldr	r3, [pc, #336]	@ (800c744 <xQueueSemaphoreTake+0x21c>)
 800c5f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5f6:	601a      	str	r2, [r3, #0]
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c600:	f002 f8ac 	bl	800e75c <vPortExitCritical>
				return pdPASS;
 800c604:	2301      	movs	r3, #1
 800c606:	e098      	b.n	800c73a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d112      	bne.n	800c634 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00b      	beq.n	800c62c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	617b      	str	r3, [r7, #20]
}
 800c626:	bf00      	nop
 800c628:	bf00      	nop
 800c62a:	e7fd      	b.n	800c628 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c62c:	f002 f896 	bl	800e75c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c630:	2300      	movs	r3, #0
 800c632:	e082      	b.n	800c73a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c636:	2b00      	cmp	r3, #0
 800c638:	d106      	bne.n	800c648 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c63a:	f107 030c 	add.w	r3, r7, #12
 800c63e:	4618      	mov	r0, r3
 800c640:	f001 f858 	bl	800d6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c644:	2301      	movs	r3, #1
 800c646:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c648:	f002 f888 	bl	800e75c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c64c:	f000 fd16 	bl	800d07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c650:	f002 f852 	bl	800e6f8 <vPortEnterCritical>
 800c654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c656:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c65a:	b25b      	sxtb	r3, r3
 800c65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c660:	d103      	bne.n	800c66a <xQueueSemaphoreTake+0x142>
 800c662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c664:	2200      	movs	r2, #0
 800c666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c66c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c670:	b25b      	sxtb	r3, r3
 800c672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c676:	d103      	bne.n	800c680 <xQueueSemaphoreTake+0x158>
 800c678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c67a:	2200      	movs	r2, #0
 800c67c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c680:	f002 f86c 	bl	800e75c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c684:	463a      	mov	r2, r7
 800c686:	f107 030c 	add.w	r3, r7, #12
 800c68a:	4611      	mov	r1, r2
 800c68c:	4618      	mov	r0, r3
 800c68e:	f001 f847 	bl	800d720 <xTaskCheckForTimeOut>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d132      	bne.n	800c6fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c698:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c69a:	f000 f9f0 	bl	800ca7e <prvIsQueueEmpty>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d026      	beq.n	800c6f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d109      	bne.n	800c6c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c6ac:	f002 f824 	bl	800e6f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f001 f977 	bl	800d9a8 <xTaskPriorityInherit>
 800c6ba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c6bc:	f002 f84e 	bl	800e75c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c2:	3324      	adds	r3, #36	@ 0x24
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f000 febb 	bl	800d444 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6d0:	f000 f983 	bl	800c9da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6d4:	f000 fce0 	bl	800d098 <xTaskResumeAll>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f47f af67 	bne.w	800c5ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c6e0:	4b18      	ldr	r3, [pc, #96]	@ (800c744 <xQueueSemaphoreTake+0x21c>)
 800c6e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6e6:	601a      	str	r2, [r3, #0]
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	e75d      	b.n	800c5ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c6f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6f4:	f000 f971 	bl	800c9da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6f8:	f000 fcce 	bl	800d098 <xTaskResumeAll>
 800c6fc:	e757      	b.n	800c5ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c6fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c700:	f000 f96b 	bl	800c9da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c704:	f000 fcc8 	bl	800d098 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c708:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c70a:	f000 f9b8 	bl	800ca7e <prvIsQueueEmpty>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	f43f af4c 	beq.w	800c5ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00d      	beq.n	800c738 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c71c:	f001 ffec 	bl	800e6f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c720:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c722:	f000 f8b2 	bl	800c88a <prvGetDisinheritPriorityAfterTimeout>
 800c726:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c72e:	4618      	mov	r0, r3
 800c730:	f001 fa38 	bl	800dba4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c734:	f002 f812 	bl	800e75c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c738:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3738      	adds	r7, #56	@ 0x38
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	e000ed04 	.word	0xe000ed04

0800c748 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b08e      	sub	sp, #56	@ 0x38
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d10b      	bne.n	800c776 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	623b      	str	r3, [r7, #32]
}
 800c770:	bf00      	nop
 800c772:	bf00      	nop
 800c774:	e7fd      	b.n	800c772 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d103      	bne.n	800c784 <xQueueReceiveFromISR+0x3c>
 800c77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c77e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c780:	2b00      	cmp	r3, #0
 800c782:	d101      	bne.n	800c788 <xQueueReceiveFromISR+0x40>
 800c784:	2301      	movs	r3, #1
 800c786:	e000      	b.n	800c78a <xQueueReceiveFromISR+0x42>
 800c788:	2300      	movs	r3, #0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10b      	bne.n	800c7a6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	61fb      	str	r3, [r7, #28]
}
 800c7a0:	bf00      	nop
 800c7a2:	bf00      	nop
 800c7a4:	e7fd      	b.n	800c7a2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7a6:	f002 f887 	bl	800e8b8 <vPortValidateInterruptPriority>
	__asm volatile
 800c7aa:	f3ef 8211 	mrs	r2, BASEPRI
 800c7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	61ba      	str	r2, [r7, #24]
 800c7c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c7c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d02f      	beq.n	800c832 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c7d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7dc:	68b9      	ldr	r1, [r7, #8]
 800c7de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7e0:	f000 f8d5 	bl	800c98e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e6:	1e5a      	subs	r2, r3, #1
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c7ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f4:	d112      	bne.n	800c81c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f8:	691b      	ldr	r3, [r3, #16]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d016      	beq.n	800c82c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c800:	3310      	adds	r3, #16
 800c802:	4618      	mov	r0, r3
 800c804:	f000 feae 	bl	800d564 <xTaskRemoveFromEventList>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00e      	beq.n	800c82c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00b      	beq.n	800c82c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2201      	movs	r2, #1
 800c818:	601a      	str	r2, [r3, #0]
 800c81a:	e007      	b.n	800c82c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c81c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c820:	3301      	adds	r3, #1
 800c822:	b2db      	uxtb	r3, r3
 800c824:	b25a      	sxtb	r2, r3
 800c826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c82c:	2301      	movs	r3, #1
 800c82e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c830:	e001      	b.n	800c836 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c832:	2300      	movs	r3, #0
 800c834:	637b      	str	r3, [r7, #52]	@ 0x34
 800c836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c838:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	f383 8811 	msr	BASEPRI, r3
}
 800c840:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c844:	4618      	mov	r0, r3
 800c846:	3738      	adds	r7, #56	@ 0x38
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d10b      	bne.n	800c876 <vQueueDelete+0x2a>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	60bb      	str	r3, [r7, #8]
}
 800c870:	bf00      	nop
 800c872:	bf00      	nop
 800c874:	e7fd      	b.n	800c872 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	f000 f95a 	bl	800cb30 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f002 f92b 	bl	800ead8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c882:	bf00      	nop
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c88a:	b480      	push	{r7}
 800c88c:	b085      	sub	sp, #20
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c896:	2b00      	cmp	r3, #0
 800c898:	d006      	beq.n	800c8a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f1c3 0307 	rsb	r3, r3, #7
 800c8a4:	60fb      	str	r3, [r7, #12]
 800c8a6:	e001      	b.n	800c8ac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
	}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3714      	adds	r7, #20
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr

0800c8ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b086      	sub	sp, #24
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	60b9      	str	r1, [r7, #8]
 800c8c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10d      	bne.n	800c8f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d14d      	bne.n	800c97c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f001 f8d5 	bl	800da94 <xTaskPriorityDisinherit>
 800c8ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	609a      	str	r2, [r3, #8]
 800c8f2:	e043      	b.n	800c97c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d119      	bne.n	800c92e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	6858      	ldr	r0, [r3, #4]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c902:	461a      	mov	r2, r3
 800c904:	68b9      	ldr	r1, [r7, #8]
 800c906:	f010 f9b2 	bl	801cc6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	685a      	ldr	r2, [r3, #4]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c912:	441a      	add	r2, r3
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	685a      	ldr	r2, [r3, #4]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	429a      	cmp	r2, r3
 800c922:	d32b      	bcc.n	800c97c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	605a      	str	r2, [r3, #4]
 800c92c:	e026      	b.n	800c97c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	68d8      	ldr	r0, [r3, #12]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c936:	461a      	mov	r2, r3
 800c938:	68b9      	ldr	r1, [r7, #8]
 800c93a:	f010 f998 	bl	801cc6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	68da      	ldr	r2, [r3, #12]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c946:	425b      	negs	r3, r3
 800c948:	441a      	add	r2, r3
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	68da      	ldr	r2, [r3, #12]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	429a      	cmp	r2, r3
 800c958:	d207      	bcs.n	800c96a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	689a      	ldr	r2, [r3, #8]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c962:	425b      	negs	r3, r3
 800c964:	441a      	add	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2b02      	cmp	r3, #2
 800c96e:	d105      	bne.n	800c97c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d002      	beq.n	800c97c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	3b01      	subs	r3, #1
 800c97a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	1c5a      	adds	r2, r3, #1
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c984:	697b      	ldr	r3, [r7, #20]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3718      	adds	r7, #24
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b082      	sub	sp, #8
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d018      	beq.n	800c9d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	68da      	ldr	r2, [r3, #12]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9a8:	441a      	add	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	68da      	ldr	r2, [r3, #12]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d303      	bcc.n	800c9c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	68d9      	ldr	r1, [r3, #12]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	6838      	ldr	r0, [r7, #0]
 800c9ce:	f010 f94e 	bl	801cc6e <memcpy>
	}
}
 800c9d2:	bf00      	nop
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b084      	sub	sp, #16
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9e2:	f001 fe89 	bl	800e6f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9ee:	e011      	b.n	800ca14 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d012      	beq.n	800ca1e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	3324      	adds	r3, #36	@ 0x24
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f000 fdb1 	bl	800d564 <xTaskRemoveFromEventList>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca08:	f000 feee 	bl	800d7e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	dce9      	bgt.n	800c9f0 <prvUnlockQueue+0x16>
 800ca1c:	e000      	b.n	800ca20 <prvUnlockQueue+0x46>
					break;
 800ca1e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	22ff      	movs	r2, #255	@ 0xff
 800ca24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ca28:	f001 fe98 	bl	800e75c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca2c:	f001 fe64 	bl	800e6f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca36:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca38:	e011      	b.n	800ca5e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d012      	beq.n	800ca68 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	3310      	adds	r3, #16
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 fd8c 	bl	800d564 <xTaskRemoveFromEventList>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d001      	beq.n	800ca56 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca52:	f000 fec9 	bl	800d7e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca56:	7bbb      	ldrb	r3, [r7, #14]
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	dce9      	bgt.n	800ca3a <prvUnlockQueue+0x60>
 800ca66:	e000      	b.n	800ca6a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca68:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	22ff      	movs	r2, #255	@ 0xff
 800ca6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ca72:	f001 fe73 	bl	800e75c <vPortExitCritical>
}
 800ca76:	bf00      	nop
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b084      	sub	sp, #16
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca86:	f001 fe37 	bl	800e6f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d102      	bne.n	800ca98 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca92:	2301      	movs	r3, #1
 800ca94:	60fb      	str	r3, [r7, #12]
 800ca96:	e001      	b.n	800ca9c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca9c:	f001 fe5e 	bl	800e75c <vPortExitCritical>

	return xReturn;
 800caa0:	68fb      	ldr	r3, [r7, #12]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b084      	sub	sp, #16
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cab2:	f001 fe21 	bl	800e6f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d102      	bne.n	800cac8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cac2:	2301      	movs	r3, #1
 800cac4:	60fb      	str	r3, [r7, #12]
 800cac6:	e001      	b.n	800cacc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cac8:	2300      	movs	r3, #0
 800caca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cacc:	f001 fe46 	bl	800e75c <vPortExitCritical>

	return xReturn;
 800cad0:	68fb      	ldr	r3, [r7, #12]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
	...

0800cadc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cadc:	b480      	push	{r7}
 800cade:	b085      	sub	sp, #20
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cae6:	2300      	movs	r3, #0
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	e014      	b.n	800cb16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800caec:	4a0f      	ldr	r2, [pc, #60]	@ (800cb2c <vQueueAddToRegistry+0x50>)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10b      	bne.n	800cb10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800caf8:	490c      	ldr	r1, [pc, #48]	@ (800cb2c <vQueueAddToRegistry+0x50>)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	683a      	ldr	r2, [r7, #0]
 800cafe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cb02:	4a0a      	ldr	r2, [pc, #40]	@ (800cb2c <vQueueAddToRegistry+0x50>)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	00db      	lsls	r3, r3, #3
 800cb08:	4413      	add	r3, r2
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cb0e:	e006      	b.n	800cb1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	3301      	adds	r3, #1
 800cb14:	60fb      	str	r3, [r7, #12]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b07      	cmp	r3, #7
 800cb1a:	d9e7      	bls.n	800caec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cb1c:	bf00      	nop
 800cb1e:	bf00      	nop
 800cb20:	3714      	adds	r7, #20
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	200014f4 	.word	0x200014f4

0800cb30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb38:	2300      	movs	r3, #0
 800cb3a:	60fb      	str	r3, [r7, #12]
 800cb3c:	e016      	b.n	800cb6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cb3e:	4a10      	ldr	r2, [pc, #64]	@ (800cb80 <vQueueUnregisterQueue+0x50>)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	00db      	lsls	r3, r3, #3
 800cb44:	4413      	add	r3, r2
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d10b      	bne.n	800cb66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cb4e:	4a0c      	ldr	r2, [pc, #48]	@ (800cb80 <vQueueUnregisterQueue+0x50>)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2100      	movs	r1, #0
 800cb54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cb58:	4a09      	ldr	r2, [pc, #36]	@ (800cb80 <vQueueUnregisterQueue+0x50>)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	4413      	add	r3, r2
 800cb60:	2200      	movs	r2, #0
 800cb62:	605a      	str	r2, [r3, #4]
				break;
 800cb64:	e006      	b.n	800cb74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2b07      	cmp	r3, #7
 800cb70:	d9e5      	bls.n	800cb3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cb72:	bf00      	nop
 800cb74:	bf00      	nop
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	200014f4 	.word	0x200014f4

0800cb84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b086      	sub	sp, #24
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb94:	f001 fdb0 	bl	800e6f8 <vPortEnterCritical>
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb9e:	b25b      	sxtb	r3, r3
 800cba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba4:	d103      	bne.n	800cbae <vQueueWaitForMessageRestricted+0x2a>
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbb4:	b25b      	sxtb	r3, r3
 800cbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbba:	d103      	bne.n	800cbc4 <vQueueWaitForMessageRestricted+0x40>
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbc4:	f001 fdca 	bl	800e75c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d106      	bne.n	800cbde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	3324      	adds	r3, #36	@ 0x24
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	68b9      	ldr	r1, [r7, #8]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 fc97 	bl	800d50c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cbde:	6978      	ldr	r0, [r7, #20]
 800cbe0:	f7ff fefb 	bl	800c9da <prvUnlockQueue>
	}
 800cbe4:	bf00      	nop
 800cbe6:	3718      	adds	r7, #24
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b08c      	sub	sp, #48	@ 0x30
 800cbf0:	af04      	add	r7, sp, #16
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	603b      	str	r3, [r7, #0]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cbfc:	88fb      	ldrh	r3, [r7, #6]
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	4618      	mov	r0, r3
 800cc02:	f001 fe9b 	bl	800e93c <pvPortMalloc>
 800cc06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00e      	beq.n	800cc2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc0e:	2054      	movs	r0, #84	@ 0x54
 800cc10:	f001 fe94 	bl	800e93c <pvPortMalloc>
 800cc14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d003      	beq.n	800cc24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	697a      	ldr	r2, [r7, #20]
 800cc20:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc22:	e005      	b.n	800cc30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc24:	6978      	ldr	r0, [r7, #20]
 800cc26:	f001 ff57 	bl	800ead8 <vPortFree>
 800cc2a:	e001      	b.n	800cc30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d013      	beq.n	800cc5e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc36:	88fa      	ldrh	r2, [r7, #6]
 800cc38:	2300      	movs	r3, #0
 800cc3a:	9303      	str	r3, [sp, #12]
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	9302      	str	r3, [sp, #8]
 800cc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc42:	9301      	str	r3, [sp, #4]
 800cc44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc46:	9300      	str	r3, [sp, #0]
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	68b9      	ldr	r1, [r7, #8]
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f000 f80e 	bl	800cc6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc52:	69f8      	ldr	r0, [r7, #28]
 800cc54:	f000 f894 	bl	800cd80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	61bb      	str	r3, [r7, #24]
 800cc5c:	e002      	b.n	800cc64 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc64:	69bb      	ldr	r3, [r7, #24]
	}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3720      	adds	r7, #32
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b088      	sub	sp, #32
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	60f8      	str	r0, [r7, #12]
 800cc76:	60b9      	str	r1, [r7, #8]
 800cc78:	607a      	str	r2, [r7, #4]
 800cc7a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc86:	3b01      	subs	r3, #1
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	4413      	add	r3, r2
 800cc8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	f023 0307 	bic.w	r3, r3, #7
 800cc94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	f003 0307 	and.w	r3, r3, #7
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00b      	beq.n	800ccb8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	617b      	str	r3, [r7, #20]
}
 800ccb2:	bf00      	nop
 800ccb4:	bf00      	nop
 800ccb6:	e7fd      	b.n	800ccb4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d01f      	beq.n	800ccfe <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	61fb      	str	r3, [r7, #28]
 800ccc2:	e012      	b.n	800ccea <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccc4:	68ba      	ldr	r2, [r7, #8]
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	4413      	add	r3, r2
 800ccca:	7819      	ldrb	r1, [r3, #0]
 800cccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	3334      	adds	r3, #52	@ 0x34
 800ccd4:	460a      	mov	r2, r1
 800ccd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	4413      	add	r3, r2
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d006      	beq.n	800ccf2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	3301      	adds	r3, #1
 800cce8:	61fb      	str	r3, [r7, #28]
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	2b0f      	cmp	r3, #15
 800ccee:	d9e9      	bls.n	800ccc4 <prvInitialiseNewTask+0x56>
 800ccf0:	e000      	b.n	800ccf4 <prvInitialiseNewTask+0x86>
			{
				break;
 800ccf2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ccfc:	e003      	b.n	800cd06 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd08:	2b06      	cmp	r3, #6
 800cd0a:	d901      	bls.n	800cd10 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd0c:	2306      	movs	r3, #6
 800cd0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd14:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd1a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cd1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1e:	2200      	movs	r2, #0
 800cd20:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd24:	3304      	adds	r3, #4
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fe ff65 	bl	800bbf6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2e:	3318      	adds	r3, #24
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fe ff60 	bl	800bbf6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd3e:	f1c3 0207 	rsb	r2, r3, #7
 800cd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd4a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4e:	2200      	movs	r2, #0
 800cd50:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	68f9      	ldr	r1, [r7, #12]
 800cd5e:	69b8      	ldr	r0, [r7, #24]
 800cd60:	f001 fb9a 	bl	800e498 <pxPortInitialiseStack>
 800cd64:	4602      	mov	r2, r0
 800cd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd76:	bf00      	nop
 800cd78:	3720      	adds	r7, #32
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
	...

0800cd80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd88:	f001 fcb6 	bl	800e6f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd8c:	4b2a      	ldr	r3, [pc, #168]	@ (800ce38 <prvAddNewTaskToReadyList+0xb8>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	3301      	adds	r3, #1
 800cd92:	4a29      	ldr	r2, [pc, #164]	@ (800ce38 <prvAddNewTaskToReadyList+0xb8>)
 800cd94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd96:	4b29      	ldr	r3, [pc, #164]	@ (800ce3c <prvAddNewTaskToReadyList+0xbc>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d109      	bne.n	800cdb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd9e:	4a27      	ldr	r2, [pc, #156]	@ (800ce3c <prvAddNewTaskToReadyList+0xbc>)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cda4:	4b24      	ldr	r3, [pc, #144]	@ (800ce38 <prvAddNewTaskToReadyList+0xb8>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d110      	bne.n	800cdce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cdac:	f000 fd40 	bl	800d830 <prvInitialiseTaskLists>
 800cdb0:	e00d      	b.n	800cdce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cdb2:	4b23      	ldr	r3, [pc, #140]	@ (800ce40 <prvAddNewTaskToReadyList+0xc0>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d109      	bne.n	800cdce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdba:	4b20      	ldr	r3, [pc, #128]	@ (800ce3c <prvAddNewTaskToReadyList+0xbc>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d802      	bhi.n	800cdce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cdc8:	4a1c      	ldr	r2, [pc, #112]	@ (800ce3c <prvAddNewTaskToReadyList+0xbc>)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cdce:	4b1d      	ldr	r3, [pc, #116]	@ (800ce44 <prvAddNewTaskToReadyList+0xc4>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	4a1b      	ldr	r2, [pc, #108]	@ (800ce44 <prvAddNewTaskToReadyList+0xc4>)
 800cdd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cddc:	2201      	movs	r2, #1
 800cdde:	409a      	lsls	r2, r3
 800cde0:	4b19      	ldr	r3, [pc, #100]	@ (800ce48 <prvAddNewTaskToReadyList+0xc8>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	4a18      	ldr	r2, [pc, #96]	@ (800ce48 <prvAddNewTaskToReadyList+0xc8>)
 800cde8:	6013      	str	r3, [r2, #0]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdee:	4613      	mov	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	4a15      	ldr	r2, [pc, #84]	@ (800ce4c <prvAddNewTaskToReadyList+0xcc>)
 800cdf8:	441a      	add	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	3304      	adds	r3, #4
 800cdfe:	4619      	mov	r1, r3
 800ce00:	4610      	mov	r0, r2
 800ce02:	f7fe ff05 	bl	800bc10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce06:	f001 fca9 	bl	800e75c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce40 <prvAddNewTaskToReadyList+0xc0>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00e      	beq.n	800ce30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce12:	4b0a      	ldr	r3, [pc, #40]	@ (800ce3c <prvAddNewTaskToReadyList+0xbc>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d207      	bcs.n	800ce30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce20:	4b0b      	ldr	r3, [pc, #44]	@ (800ce50 <prvAddNewTaskToReadyList+0xd0>)
 800ce22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce26:	601a      	str	r2, [r3, #0]
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce30:	bf00      	nop
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	20001634 	.word	0x20001634
 800ce3c:	20001534 	.word	0x20001534
 800ce40:	20001640 	.word	0x20001640
 800ce44:	20001650 	.word	0x20001650
 800ce48:	2000163c 	.word	0x2000163c
 800ce4c:	20001538 	.word	0x20001538
 800ce50:	e000ed04 	.word	0xe000ed04

0800ce54 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ce5c:	f001 fc4c 	bl	800e6f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d102      	bne.n	800ce6c <vTaskDelete+0x18>
 800ce66:	4b39      	ldr	r3, [pc, #228]	@ (800cf4c <vTaskDelete+0xf8>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	e000      	b.n	800ce6e <vTaskDelete+0x1a>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	3304      	adds	r3, #4
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fe ff28 	bl	800bcca <uxListRemove>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d115      	bne.n	800ceac <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce84:	4932      	ldr	r1, [pc, #200]	@ (800cf50 <vTaskDelete+0xfc>)
 800ce86:	4613      	mov	r3, r2
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4413      	add	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	440b      	add	r3, r1
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10a      	bne.n	800ceac <vTaskDelete+0x58>
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	fa02 f303 	lsl.w	r3, r2, r3
 800cea0:	43da      	mvns	r2, r3
 800cea2:	4b2c      	ldr	r3, [pc, #176]	@ (800cf54 <vTaskDelete+0x100>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4013      	ands	r3, r2
 800cea8:	4a2a      	ldr	r2, [pc, #168]	@ (800cf54 <vTaskDelete+0x100>)
 800ceaa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d004      	beq.n	800cebe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	3318      	adds	r3, #24
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7fe ff06 	bl	800bcca <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800cebe:	4b26      	ldr	r3, [pc, #152]	@ (800cf58 <vTaskDelete+0x104>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	3301      	adds	r3, #1
 800cec4:	4a24      	ldr	r2, [pc, #144]	@ (800cf58 <vTaskDelete+0x104>)
 800cec6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800cec8:	4b20      	ldr	r3, [pc, #128]	@ (800cf4c <vTaskDelete+0xf8>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d10b      	bne.n	800ceea <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3304      	adds	r3, #4
 800ced6:	4619      	mov	r1, r3
 800ced8:	4820      	ldr	r0, [pc, #128]	@ (800cf5c <vTaskDelete+0x108>)
 800ceda:	f7fe fe99 	bl	800bc10 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800cede:	4b20      	ldr	r3, [pc, #128]	@ (800cf60 <vTaskDelete+0x10c>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	3301      	adds	r3, #1
 800cee4:	4a1e      	ldr	r2, [pc, #120]	@ (800cf60 <vTaskDelete+0x10c>)
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	e009      	b.n	800cefe <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ceea:	4b1e      	ldr	r3, [pc, #120]	@ (800cf64 <vTaskDelete+0x110>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	3b01      	subs	r3, #1
 800cef0:	4a1c      	ldr	r2, [pc, #112]	@ (800cf64 <vTaskDelete+0x110>)
 800cef2:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	f000 fd09 	bl	800d90c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800cefa:	f000 fd17 	bl	800d92c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800cefe:	f001 fc2d 	bl	800e75c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800cf02:	4b19      	ldr	r3, [pc, #100]	@ (800cf68 <vTaskDelete+0x114>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d01c      	beq.n	800cf44 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800cf0a:	4b10      	ldr	r3, [pc, #64]	@ (800cf4c <vTaskDelete+0xf8>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	68fa      	ldr	r2, [r7, #12]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d117      	bne.n	800cf44 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800cf14:	4b15      	ldr	r3, [pc, #84]	@ (800cf6c <vTaskDelete+0x118>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00b      	beq.n	800cf34 <vTaskDelete+0xe0>
	__asm volatile
 800cf1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf20:	f383 8811 	msr	BASEPRI, r3
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	f3bf 8f4f 	dsb	sy
 800cf2c:	60bb      	str	r3, [r7, #8]
}
 800cf2e:	bf00      	nop
 800cf30:	bf00      	nop
 800cf32:	e7fd      	b.n	800cf30 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800cf34:	4b0e      	ldr	r3, [pc, #56]	@ (800cf70 <vTaskDelete+0x11c>)
 800cf36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf3a:	601a      	str	r2, [r3, #0]
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cf44:	bf00      	nop
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	20001534 	.word	0x20001534
 800cf50:	20001538 	.word	0x20001538
 800cf54:	2000163c 	.word	0x2000163c
 800cf58:	20001650 	.word	0x20001650
 800cf5c:	20001608 	.word	0x20001608
 800cf60:	2000161c 	.word	0x2000161c
 800cf64:	20001634 	.word	0x20001634
 800cf68:	20001640 	.word	0x20001640
 800cf6c:	2000165c 	.word	0x2000165c
 800cf70:	e000ed04 	.word	0xe000ed04

0800cf74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d018      	beq.n	800cfb8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf86:	4b14      	ldr	r3, [pc, #80]	@ (800cfd8 <vTaskDelay+0x64>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00b      	beq.n	800cfa6 <vTaskDelay+0x32>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	60bb      	str	r3, [r7, #8]
}
 800cfa0:	bf00      	nop
 800cfa2:	bf00      	nop
 800cfa4:	e7fd      	b.n	800cfa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cfa6:	f000 f869 	bl	800d07c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cfaa:	2100      	movs	r1, #0
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 feb5 	bl	800dd1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cfb2:	f000 f871 	bl	800d098 <xTaskResumeAll>
 800cfb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d107      	bne.n	800cfce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cfbe:	4b07      	ldr	r3, [pc, #28]	@ (800cfdc <vTaskDelay+0x68>)
 800cfc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfc4:	601a      	str	r2, [r3, #0]
 800cfc6:	f3bf 8f4f 	dsb	sy
 800cfca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfce:	bf00      	nop
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	2000165c 	.word	0x2000165c
 800cfdc:	e000ed04 	.word	0xe000ed04

0800cfe0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800cfe6:	4b1f      	ldr	r3, [pc, #124]	@ (800d064 <vTaskStartScheduler+0x84>)
 800cfe8:	9301      	str	r3, [sp, #4]
 800cfea:	2300      	movs	r3, #0
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	2300      	movs	r3, #0
 800cff0:	2280      	movs	r2, #128	@ 0x80
 800cff2:	491d      	ldr	r1, [pc, #116]	@ (800d068 <vTaskStartScheduler+0x88>)
 800cff4:	481d      	ldr	r0, [pc, #116]	@ (800d06c <vTaskStartScheduler+0x8c>)
 800cff6:	f7ff fdf9 	bl	800cbec <xTaskCreate>
 800cffa:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d102      	bne.n	800d008 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800d002:	f000 fef1 	bl	800dde8 <xTimerCreateTimerTask>
 800d006:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d116      	bne.n	800d03c <vTaskStartScheduler+0x5c>
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	60bb      	str	r3, [r7, #8]
}
 800d020:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d022:	4b13      	ldr	r3, [pc, #76]	@ (800d070 <vTaskStartScheduler+0x90>)
 800d024:	f04f 32ff 	mov.w	r2, #4294967295
 800d028:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d02a:	4b12      	ldr	r3, [pc, #72]	@ (800d074 <vTaskStartScheduler+0x94>)
 800d02c:	2201      	movs	r2, #1
 800d02e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d030:	4b11      	ldr	r3, [pc, #68]	@ (800d078 <vTaskStartScheduler+0x98>)
 800d032:	2200      	movs	r2, #0
 800d034:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d036:	f001 fabb 	bl	800e5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d03a:	e00f      	b.n	800d05c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d042:	d10b      	bne.n	800d05c <vTaskStartScheduler+0x7c>
	__asm volatile
 800d044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d048:	f383 8811 	msr	BASEPRI, r3
 800d04c:	f3bf 8f6f 	isb	sy
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	607b      	str	r3, [r7, #4]
}
 800d056:	bf00      	nop
 800d058:	bf00      	nop
 800d05a:	e7fd      	b.n	800d058 <vTaskStartScheduler+0x78>
}
 800d05c:	bf00      	nop
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	20001658 	.word	0x20001658
 800d068:	0801f474 	.word	0x0801f474
 800d06c:	0800d801 	.word	0x0800d801
 800d070:	20001654 	.word	0x20001654
 800d074:	20001640 	.word	0x20001640
 800d078:	20001638 	.word	0x20001638

0800d07c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d07c:	b480      	push	{r7}
 800d07e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d080:	4b04      	ldr	r3, [pc, #16]	@ (800d094 <vTaskSuspendAll+0x18>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	3301      	adds	r3, #1
 800d086:	4a03      	ldr	r2, [pc, #12]	@ (800d094 <vTaskSuspendAll+0x18>)
 800d088:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d08a:	bf00      	nop
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr
 800d094:	2000165c 	.word	0x2000165c

0800d098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0a6:	4b42      	ldr	r3, [pc, #264]	@ (800d1b0 <xTaskResumeAll+0x118>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10b      	bne.n	800d0c6 <xTaskResumeAll+0x2e>
	__asm volatile
 800d0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	603b      	str	r3, [r7, #0]
}
 800d0c0:	bf00      	nop
 800d0c2:	bf00      	nop
 800d0c4:	e7fd      	b.n	800d0c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0c6:	f001 fb17 	bl	800e6f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0ca:	4b39      	ldr	r3, [pc, #228]	@ (800d1b0 <xTaskResumeAll+0x118>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	4a37      	ldr	r2, [pc, #220]	@ (800d1b0 <xTaskResumeAll+0x118>)
 800d0d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0d4:	4b36      	ldr	r3, [pc, #216]	@ (800d1b0 <xTaskResumeAll+0x118>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d161      	bne.n	800d1a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0dc:	4b35      	ldr	r3, [pc, #212]	@ (800d1b4 <xTaskResumeAll+0x11c>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d05d      	beq.n	800d1a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0e4:	e02e      	b.n	800d144 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0e6:	4b34      	ldr	r3, [pc, #208]	@ (800d1b8 <xTaskResumeAll+0x120>)
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	3318      	adds	r3, #24
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7fe fde9 	bl	800bcca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	3304      	adds	r3, #4
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7fe fde4 	bl	800bcca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d106:	2201      	movs	r2, #1
 800d108:	409a      	lsls	r2, r3
 800d10a:	4b2c      	ldr	r3, [pc, #176]	@ (800d1bc <xTaskResumeAll+0x124>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4313      	orrs	r3, r2
 800d110:	4a2a      	ldr	r2, [pc, #168]	@ (800d1bc <xTaskResumeAll+0x124>)
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d118:	4613      	mov	r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	4413      	add	r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	4a27      	ldr	r2, [pc, #156]	@ (800d1c0 <xTaskResumeAll+0x128>)
 800d122:	441a      	add	r2, r3
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3304      	adds	r3, #4
 800d128:	4619      	mov	r1, r3
 800d12a:	4610      	mov	r0, r2
 800d12c:	f7fe fd70 	bl	800bc10 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d134:	4b23      	ldr	r3, [pc, #140]	@ (800d1c4 <xTaskResumeAll+0x12c>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d302      	bcc.n	800d144 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d13e:	4b22      	ldr	r3, [pc, #136]	@ (800d1c8 <xTaskResumeAll+0x130>)
 800d140:	2201      	movs	r2, #1
 800d142:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d144:	4b1c      	ldr	r3, [pc, #112]	@ (800d1b8 <xTaskResumeAll+0x120>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1cc      	bne.n	800d0e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d152:	f000 fbeb 	bl	800d92c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d156:	4b1d      	ldr	r3, [pc, #116]	@ (800d1cc <xTaskResumeAll+0x134>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d010      	beq.n	800d184 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d162:	f000 f859 	bl	800d218 <xTaskIncrementTick>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d16c:	4b16      	ldr	r3, [pc, #88]	@ (800d1c8 <xTaskResumeAll+0x130>)
 800d16e:	2201      	movs	r2, #1
 800d170:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	3b01      	subs	r3, #1
 800d176:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d1f1      	bne.n	800d162 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d17e:	4b13      	ldr	r3, [pc, #76]	@ (800d1cc <xTaskResumeAll+0x134>)
 800d180:	2200      	movs	r2, #0
 800d182:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d184:	4b10      	ldr	r3, [pc, #64]	@ (800d1c8 <xTaskResumeAll+0x130>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d009      	beq.n	800d1a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d18c:	2301      	movs	r3, #1
 800d18e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d190:	4b0f      	ldr	r3, [pc, #60]	@ (800d1d0 <xTaskResumeAll+0x138>)
 800d192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d196:	601a      	str	r2, [r3, #0]
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1a0:	f001 fadc 	bl	800e75c <vPortExitCritical>

	return xAlreadyYielded;
 800d1a4:	68bb      	ldr	r3, [r7, #8]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	2000165c 	.word	0x2000165c
 800d1b4:	20001634 	.word	0x20001634
 800d1b8:	200015f4 	.word	0x200015f4
 800d1bc:	2000163c 	.word	0x2000163c
 800d1c0:	20001538 	.word	0x20001538
 800d1c4:	20001534 	.word	0x20001534
 800d1c8:	20001648 	.word	0x20001648
 800d1cc:	20001644 	.word	0x20001644
 800d1d0:	e000ed04 	.word	0xe000ed04

0800d1d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d1da:	4b05      	ldr	r3, [pc, #20]	@ (800d1f0 <xTaskGetTickCount+0x1c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d1e0:	687b      	ldr	r3, [r7, #4]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	370c      	adds	r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop
 800d1f0:	20001638 	.word	0x20001638

0800d1f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d1fa:	f001 fb5d 	bl	800e8b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d1fe:	2300      	movs	r3, #0
 800d200:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d202:	4b04      	ldr	r3, [pc, #16]	@ (800d214 <xTaskGetTickCountFromISR+0x20>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d208:	683b      	ldr	r3, [r7, #0]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	20001638 	.word	0x20001638

0800d218 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b086      	sub	sp, #24
 800d21c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d21e:	2300      	movs	r3, #0
 800d220:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d222:	4b4f      	ldr	r3, [pc, #316]	@ (800d360 <xTaskIncrementTick+0x148>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	f040 808f 	bne.w	800d34a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d22c:	4b4d      	ldr	r3, [pc, #308]	@ (800d364 <xTaskIncrementTick+0x14c>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	3301      	adds	r3, #1
 800d232:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d234:	4a4b      	ldr	r2, [pc, #300]	@ (800d364 <xTaskIncrementTick+0x14c>)
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d121      	bne.n	800d284 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d240:	4b49      	ldr	r3, [pc, #292]	@ (800d368 <xTaskIncrementTick+0x150>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00b      	beq.n	800d262 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d24e:	f383 8811 	msr	BASEPRI, r3
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	f3bf 8f4f 	dsb	sy
 800d25a:	603b      	str	r3, [r7, #0]
}
 800d25c:	bf00      	nop
 800d25e:	bf00      	nop
 800d260:	e7fd      	b.n	800d25e <xTaskIncrementTick+0x46>
 800d262:	4b41      	ldr	r3, [pc, #260]	@ (800d368 <xTaskIncrementTick+0x150>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	60fb      	str	r3, [r7, #12]
 800d268:	4b40      	ldr	r3, [pc, #256]	@ (800d36c <xTaskIncrementTick+0x154>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a3e      	ldr	r2, [pc, #248]	@ (800d368 <xTaskIncrementTick+0x150>)
 800d26e:	6013      	str	r3, [r2, #0]
 800d270:	4a3e      	ldr	r2, [pc, #248]	@ (800d36c <xTaskIncrementTick+0x154>)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6013      	str	r3, [r2, #0]
 800d276:	4b3e      	ldr	r3, [pc, #248]	@ (800d370 <xTaskIncrementTick+0x158>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	3301      	adds	r3, #1
 800d27c:	4a3c      	ldr	r2, [pc, #240]	@ (800d370 <xTaskIncrementTick+0x158>)
 800d27e:	6013      	str	r3, [r2, #0]
 800d280:	f000 fb54 	bl	800d92c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d284:	4b3b      	ldr	r3, [pc, #236]	@ (800d374 <xTaskIncrementTick+0x15c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	693a      	ldr	r2, [r7, #16]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d348      	bcc.n	800d320 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d28e:	4b36      	ldr	r3, [pc, #216]	@ (800d368 <xTaskIncrementTick+0x150>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d104      	bne.n	800d2a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d298:	4b36      	ldr	r3, [pc, #216]	@ (800d374 <xTaskIncrementTick+0x15c>)
 800d29a:	f04f 32ff 	mov.w	r2, #4294967295
 800d29e:	601a      	str	r2, [r3, #0]
					break;
 800d2a0:	e03e      	b.n	800d320 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2a2:	4b31      	ldr	r3, [pc, #196]	@ (800d368 <xTaskIncrementTick+0x150>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d203      	bcs.n	800d2c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d2ba:	4a2e      	ldr	r2, [pc, #184]	@ (800d374 <xTaskIncrementTick+0x15c>)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2c0:	e02e      	b.n	800d320 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	3304      	adds	r3, #4
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7fe fcff 	bl	800bcca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d004      	beq.n	800d2de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	3318      	adds	r3, #24
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7fe fcf6 	bl	800bcca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	409a      	lsls	r2, r3
 800d2e6:	4b24      	ldr	r3, [pc, #144]	@ (800d378 <xTaskIncrementTick+0x160>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	4a22      	ldr	r2, [pc, #136]	@ (800d378 <xTaskIncrementTick+0x160>)
 800d2ee:	6013      	str	r3, [r2, #0]
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	4413      	add	r3, r2
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	4a1f      	ldr	r2, [pc, #124]	@ (800d37c <xTaskIncrementTick+0x164>)
 800d2fe:	441a      	add	r2, r3
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	3304      	adds	r3, #4
 800d304:	4619      	mov	r1, r3
 800d306:	4610      	mov	r0, r2
 800d308:	f7fe fc82 	bl	800bc10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d310:	4b1b      	ldr	r3, [pc, #108]	@ (800d380 <xTaskIncrementTick+0x168>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d316:	429a      	cmp	r2, r3
 800d318:	d3b9      	bcc.n	800d28e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d31a:	2301      	movs	r3, #1
 800d31c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d31e:	e7b6      	b.n	800d28e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d320:	4b17      	ldr	r3, [pc, #92]	@ (800d380 <xTaskIncrementTick+0x168>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d326:	4915      	ldr	r1, [pc, #84]	@ (800d37c <xTaskIncrementTick+0x164>)
 800d328:	4613      	mov	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4413      	add	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	440b      	add	r3, r1
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2b01      	cmp	r3, #1
 800d336:	d901      	bls.n	800d33c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d338:	2301      	movs	r3, #1
 800d33a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d33c:	4b11      	ldr	r3, [pc, #68]	@ (800d384 <xTaskIncrementTick+0x16c>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d007      	beq.n	800d354 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d344:	2301      	movs	r3, #1
 800d346:	617b      	str	r3, [r7, #20]
 800d348:	e004      	b.n	800d354 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d34a:	4b0f      	ldr	r3, [pc, #60]	@ (800d388 <xTaskIncrementTick+0x170>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	3301      	adds	r3, #1
 800d350:	4a0d      	ldr	r2, [pc, #52]	@ (800d388 <xTaskIncrementTick+0x170>)
 800d352:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d354:	697b      	ldr	r3, [r7, #20]
}
 800d356:	4618      	mov	r0, r3
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	2000165c 	.word	0x2000165c
 800d364:	20001638 	.word	0x20001638
 800d368:	200015ec 	.word	0x200015ec
 800d36c:	200015f0 	.word	0x200015f0
 800d370:	2000164c 	.word	0x2000164c
 800d374:	20001654 	.word	0x20001654
 800d378:	2000163c 	.word	0x2000163c
 800d37c:	20001538 	.word	0x20001538
 800d380:	20001534 	.word	0x20001534
 800d384:	20001648 	.word	0x20001648
 800d388:	20001644 	.word	0x20001644

0800d38c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d38c:	b480      	push	{r7}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d392:	4b27      	ldr	r3, [pc, #156]	@ (800d430 <vTaskSwitchContext+0xa4>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d003      	beq.n	800d3a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d39a:	4b26      	ldr	r3, [pc, #152]	@ (800d434 <vTaskSwitchContext+0xa8>)
 800d39c:	2201      	movs	r2, #1
 800d39e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d3a0:	e040      	b.n	800d424 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d3a2:	4b24      	ldr	r3, [pc, #144]	@ (800d434 <vTaskSwitchContext+0xa8>)
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3a8:	4b23      	ldr	r3, [pc, #140]	@ (800d438 <vTaskSwitchContext+0xac>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	fab3 f383 	clz	r3, r3
 800d3b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d3b6:	7afb      	ldrb	r3, [r7, #11]
 800d3b8:	f1c3 031f 	rsb	r3, r3, #31
 800d3bc:	617b      	str	r3, [r7, #20]
 800d3be:	491f      	ldr	r1, [pc, #124]	@ (800d43c <vTaskSwitchContext+0xb0>)
 800d3c0:	697a      	ldr	r2, [r7, #20]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	4413      	add	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	440b      	add	r3, r1
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10b      	bne.n	800d3ea <vTaskSwitchContext+0x5e>
	__asm volatile
 800d3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d6:	f383 8811 	msr	BASEPRI, r3
 800d3da:	f3bf 8f6f 	isb	sy
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	607b      	str	r3, [r7, #4]
}
 800d3e4:	bf00      	nop
 800d3e6:	bf00      	nop
 800d3e8:	e7fd      	b.n	800d3e6 <vTaskSwitchContext+0x5a>
 800d3ea:	697a      	ldr	r2, [r7, #20]
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	4413      	add	r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	4a11      	ldr	r2, [pc, #68]	@ (800d43c <vTaskSwitchContext+0xb0>)
 800d3f6:	4413      	add	r3, r2
 800d3f8:	613b      	str	r3, [r7, #16]
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	685a      	ldr	r2, [r3, #4]
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	605a      	str	r2, [r3, #4]
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	685a      	ldr	r2, [r3, #4]
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	3308      	adds	r3, #8
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d104      	bne.n	800d41a <vTaskSwitchContext+0x8e>
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	685a      	ldr	r2, [r3, #4]
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	605a      	str	r2, [r3, #4]
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	4a07      	ldr	r2, [pc, #28]	@ (800d440 <vTaskSwitchContext+0xb4>)
 800d422:	6013      	str	r3, [r2, #0]
}
 800d424:	bf00      	nop
 800d426:	371c      	adds	r7, #28
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr
 800d430:	2000165c 	.word	0x2000165c
 800d434:	20001648 	.word	0x20001648
 800d438:	2000163c 	.word	0x2000163c
 800d43c:	20001538 	.word	0x20001538
 800d440:	20001534 	.word	0x20001534

0800d444 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10b      	bne.n	800d46c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d458:	f383 8811 	msr	BASEPRI, r3
 800d45c:	f3bf 8f6f 	isb	sy
 800d460:	f3bf 8f4f 	dsb	sy
 800d464:	60fb      	str	r3, [r7, #12]
}
 800d466:	bf00      	nop
 800d468:	bf00      	nop
 800d46a:	e7fd      	b.n	800d468 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d46c:	4b07      	ldr	r3, [pc, #28]	@ (800d48c <vTaskPlaceOnEventList+0x48>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	3318      	adds	r3, #24
 800d472:	4619      	mov	r1, r3
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7fe fbef 	bl	800bc58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d47a:	2101      	movs	r1, #1
 800d47c:	6838      	ldr	r0, [r7, #0]
 800d47e:	f000 fc4d 	bl	800dd1c <prvAddCurrentTaskToDelayedList>
}
 800d482:	bf00      	nop
 800d484:	3710      	adds	r7, #16
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	20001534 	.word	0x20001534

0800d490 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d10b      	bne.n	800d4ba <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800d4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	617b      	str	r3, [r7, #20]
}
 800d4b4:	bf00      	nop
 800d4b6:	bf00      	nop
 800d4b8:	e7fd      	b.n	800d4b6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800d4ba:	4b12      	ldr	r3, [pc, #72]	@ (800d504 <vTaskPlaceOnUnorderedEventList+0x74>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d10b      	bne.n	800d4da <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800d4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c6:	f383 8811 	msr	BASEPRI, r3
 800d4ca:	f3bf 8f6f 	isb	sy
 800d4ce:	f3bf 8f4f 	dsb	sy
 800d4d2:	613b      	str	r3, [r7, #16]
}
 800d4d4:	bf00      	nop
 800d4d6:	bf00      	nop
 800d4d8:	e7fd      	b.n	800d4d6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800d4da:	4b0b      	ldr	r3, [pc, #44]	@ (800d508 <vTaskPlaceOnUnorderedEventList+0x78>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	68ba      	ldr	r2, [r7, #8]
 800d4e0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d4e4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4e6:	4b08      	ldr	r3, [pc, #32]	@ (800d508 <vTaskPlaceOnUnorderedEventList+0x78>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	3318      	adds	r3, #24
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f7fe fb8e 	bl	800bc10 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d4f4:	2101      	movs	r1, #1
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 fc10 	bl	800dd1c <prvAddCurrentTaskToDelayedList>
}
 800d4fc:	bf00      	nop
 800d4fe:	3718      	adds	r7, #24
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	2000165c 	.word	0x2000165c
 800d508:	20001534 	.word	0x20001534

0800d50c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b086      	sub	sp, #24
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10b      	bne.n	800d536 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	617b      	str	r3, [r7, #20]
}
 800d530:	bf00      	nop
 800d532:	bf00      	nop
 800d534:	e7fd      	b.n	800d532 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d536:	4b0a      	ldr	r3, [pc, #40]	@ (800d560 <vTaskPlaceOnEventListRestricted+0x54>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3318      	adds	r3, #24
 800d53c:	4619      	mov	r1, r3
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f7fe fb66 	bl	800bc10 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d002      	beq.n	800d550 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d54a:	f04f 33ff 	mov.w	r3, #4294967295
 800d54e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d550:	6879      	ldr	r1, [r7, #4]
 800d552:	68b8      	ldr	r0, [r7, #8]
 800d554:	f000 fbe2 	bl	800dd1c <prvAddCurrentTaskToDelayedList>
	}
 800d558:	bf00      	nop
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	20001534 	.word	0x20001534

0800d564 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d10b      	bne.n	800d592 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d57e:	f383 8811 	msr	BASEPRI, r3
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	f3bf 8f4f 	dsb	sy
 800d58a:	60fb      	str	r3, [r7, #12]
}
 800d58c:	bf00      	nop
 800d58e:	bf00      	nop
 800d590:	e7fd      	b.n	800d58e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	3318      	adds	r3, #24
 800d596:	4618      	mov	r0, r3
 800d598:	f7fe fb97 	bl	800bcca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d59c:	4b1d      	ldr	r3, [pc, #116]	@ (800d614 <xTaskRemoveFromEventList+0xb0>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d11c      	bne.n	800d5de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	3304      	adds	r3, #4
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7fe fb8e 	bl	800bcca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	409a      	lsls	r2, r3
 800d5b6:	4b18      	ldr	r3, [pc, #96]	@ (800d618 <xTaskRemoveFromEventList+0xb4>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	4a16      	ldr	r2, [pc, #88]	@ (800d618 <xTaskRemoveFromEventList+0xb4>)
 800d5be:	6013      	str	r3, [r2, #0]
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	4413      	add	r3, r2
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4a13      	ldr	r2, [pc, #76]	@ (800d61c <xTaskRemoveFromEventList+0xb8>)
 800d5ce:	441a      	add	r2, r3
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	3304      	adds	r3, #4
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	4610      	mov	r0, r2
 800d5d8:	f7fe fb1a 	bl	800bc10 <vListInsertEnd>
 800d5dc:	e005      	b.n	800d5ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	3318      	adds	r3, #24
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	480e      	ldr	r0, [pc, #56]	@ (800d620 <xTaskRemoveFromEventList+0xbc>)
 800d5e6:	f7fe fb13 	bl	800bc10 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d624 <xTaskRemoveFromEventList+0xc0>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d905      	bls.n	800d604 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800d628 <xTaskRemoveFromEventList+0xc4>)
 800d5fe:	2201      	movs	r2, #1
 800d600:	601a      	str	r2, [r3, #0]
 800d602:	e001      	b.n	800d608 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d604:	2300      	movs	r3, #0
 800d606:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d608:	697b      	ldr	r3, [r7, #20]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3718      	adds	r7, #24
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	2000165c 	.word	0x2000165c
 800d618:	2000163c 	.word	0x2000163c
 800d61c:	20001538 	.word	0x20001538
 800d620:	200015f4 	.word	0x200015f4
 800d624:	20001534 	.word	0x20001534
 800d628:	20001648 	.word	0x20001648

0800d62c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800d636:	4b2a      	ldr	r3, [pc, #168]	@ (800d6e0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d10b      	bne.n	800d656 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	613b      	str	r3, [r7, #16]
}
 800d650:	bf00      	nop
 800d652:	bf00      	nop
 800d654:	e7fd      	b.n	800d652 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10b      	bne.n	800d684 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800d66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d670:	f383 8811 	msr	BASEPRI, r3
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	60fb      	str	r3, [r7, #12]
}
 800d67e:	bf00      	nop
 800d680:	bf00      	nop
 800d682:	e7fd      	b.n	800d680 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7fe fb20 	bl	800bcca <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	3304      	adds	r3, #4
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fe fb1b 	bl	800bcca <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d698:	2201      	movs	r2, #1
 800d69a:	409a      	lsls	r2, r3
 800d69c:	4b11      	ldr	r3, [pc, #68]	@ (800d6e4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	4a10      	ldr	r2, [pc, #64]	@ (800d6e4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800d6a4:	6013      	str	r3, [r2, #0]
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	4413      	add	r3, r2
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	4a0d      	ldr	r2, [pc, #52]	@ (800d6e8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800d6b4:	441a      	add	r2, r3
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	3304      	adds	r3, #4
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	4610      	mov	r0, r2
 800d6be:	f7fe faa7 	bl	800bc10 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6c6:	4b09      	ldr	r3, [pc, #36]	@ (800d6ec <vTaskRemoveFromUnorderedEventList+0xc0>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d902      	bls.n	800d6d6 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800d6d0:	4b07      	ldr	r3, [pc, #28]	@ (800d6f0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	601a      	str	r2, [r3, #0]
	}
}
 800d6d6:	bf00      	nop
 800d6d8:	3718      	adds	r7, #24
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	2000165c 	.word	0x2000165c
 800d6e4:	2000163c 	.word	0x2000163c
 800d6e8:	20001538 	.word	0x20001538
 800d6ec:	20001534 	.word	0x20001534
 800d6f0:	20001648 	.word	0x20001648

0800d6f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6fc:	4b06      	ldr	r3, [pc, #24]	@ (800d718 <vTaskInternalSetTimeOutState+0x24>)
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d704:	4b05      	ldr	r3, [pc, #20]	@ (800d71c <vTaskInternalSetTimeOutState+0x28>)
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	605a      	str	r2, [r3, #4]
}
 800d70c:	bf00      	nop
 800d70e:	370c      	adds	r7, #12
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr
 800d718:	2000164c 	.word	0x2000164c
 800d71c:	20001638 	.word	0x20001638

0800d720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b088      	sub	sp, #32
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10b      	bne.n	800d748 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	613b      	str	r3, [r7, #16]
}
 800d742:	bf00      	nop
 800d744:	bf00      	nop
 800d746:	e7fd      	b.n	800d744 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d10b      	bne.n	800d766 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	60fb      	str	r3, [r7, #12]
}
 800d760:	bf00      	nop
 800d762:	bf00      	nop
 800d764:	e7fd      	b.n	800d762 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d766:	f000 ffc7 	bl	800e6f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d76a:	4b1d      	ldr	r3, [pc, #116]	@ (800d7e0 <xTaskCheckForTimeOut+0xc0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	69ba      	ldr	r2, [r7, #24]
 800d776:	1ad3      	subs	r3, r2, r3
 800d778:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d782:	d102      	bne.n	800d78a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d784:	2300      	movs	r3, #0
 800d786:	61fb      	str	r3, [r7, #28]
 800d788:	e023      	b.n	800d7d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	4b15      	ldr	r3, [pc, #84]	@ (800d7e4 <xTaskCheckForTimeOut+0xc4>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	429a      	cmp	r2, r3
 800d794:	d007      	beq.n	800d7a6 <xTaskCheckForTimeOut+0x86>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	69ba      	ldr	r2, [r7, #24]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d302      	bcc.n	800d7a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	61fb      	str	r3, [r7, #28]
 800d7a4:	e015      	b.n	800d7d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d20b      	bcs.n	800d7c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	1ad2      	subs	r2, r2, r3
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7ff ff99 	bl	800d6f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	61fb      	str	r3, [r7, #28]
 800d7c6:	e004      	b.n	800d7d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d7d2:	f000 ffc3 	bl	800e75c <vPortExitCritical>

	return xReturn;
 800d7d6:	69fb      	ldr	r3, [r7, #28]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3720      	adds	r7, #32
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	20001638 	.word	0x20001638
 800d7e4:	2000164c 	.word	0x2000164c

0800d7e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7ec:	4b03      	ldr	r3, [pc, #12]	@ (800d7fc <vTaskMissedYield+0x14>)
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	601a      	str	r2, [r3, #0]
}
 800d7f2:	bf00      	nop
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	20001648 	.word	0x20001648

0800d800 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d808:	f000 f852 	bl	800d8b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d80c:	4b06      	ldr	r3, [pc, #24]	@ (800d828 <prvIdleTask+0x28>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d9f9      	bls.n	800d808 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d814:	4b05      	ldr	r3, [pc, #20]	@ (800d82c <prvIdleTask+0x2c>)
 800d816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d81a:	601a      	str	r2, [r3, #0]
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d824:	e7f0      	b.n	800d808 <prvIdleTask+0x8>
 800d826:	bf00      	nop
 800d828:	20001538 	.word	0x20001538
 800d82c:	e000ed04 	.word	0xe000ed04

0800d830 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d836:	2300      	movs	r3, #0
 800d838:	607b      	str	r3, [r7, #4]
 800d83a:	e00c      	b.n	800d856 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	4613      	mov	r3, r2
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	4413      	add	r3, r2
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	4a12      	ldr	r2, [pc, #72]	@ (800d890 <prvInitialiseTaskLists+0x60>)
 800d848:	4413      	add	r3, r2
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fe f9b3 	bl	800bbb6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	3301      	adds	r3, #1
 800d854:	607b      	str	r3, [r7, #4]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2b06      	cmp	r3, #6
 800d85a:	d9ef      	bls.n	800d83c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d85c:	480d      	ldr	r0, [pc, #52]	@ (800d894 <prvInitialiseTaskLists+0x64>)
 800d85e:	f7fe f9aa 	bl	800bbb6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d862:	480d      	ldr	r0, [pc, #52]	@ (800d898 <prvInitialiseTaskLists+0x68>)
 800d864:	f7fe f9a7 	bl	800bbb6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d868:	480c      	ldr	r0, [pc, #48]	@ (800d89c <prvInitialiseTaskLists+0x6c>)
 800d86a:	f7fe f9a4 	bl	800bbb6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d86e:	480c      	ldr	r0, [pc, #48]	@ (800d8a0 <prvInitialiseTaskLists+0x70>)
 800d870:	f7fe f9a1 	bl	800bbb6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d874:	480b      	ldr	r0, [pc, #44]	@ (800d8a4 <prvInitialiseTaskLists+0x74>)
 800d876:	f7fe f99e 	bl	800bbb6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d87a:	4b0b      	ldr	r3, [pc, #44]	@ (800d8a8 <prvInitialiseTaskLists+0x78>)
 800d87c:	4a05      	ldr	r2, [pc, #20]	@ (800d894 <prvInitialiseTaskLists+0x64>)
 800d87e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d880:	4b0a      	ldr	r3, [pc, #40]	@ (800d8ac <prvInitialiseTaskLists+0x7c>)
 800d882:	4a05      	ldr	r2, [pc, #20]	@ (800d898 <prvInitialiseTaskLists+0x68>)
 800d884:	601a      	str	r2, [r3, #0]
}
 800d886:	bf00      	nop
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	20001538 	.word	0x20001538
 800d894:	200015c4 	.word	0x200015c4
 800d898:	200015d8 	.word	0x200015d8
 800d89c:	200015f4 	.word	0x200015f4
 800d8a0:	20001608 	.word	0x20001608
 800d8a4:	20001620 	.word	0x20001620
 800d8a8:	200015ec 	.word	0x200015ec
 800d8ac:	200015f0 	.word	0x200015f0

0800d8b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8b6:	e019      	b.n	800d8ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d8b8:	f000 ff1e 	bl	800e6f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8bc:	4b10      	ldr	r3, [pc, #64]	@ (800d900 <prvCheckTasksWaitingTermination+0x50>)
 800d8be:	68db      	ldr	r3, [r3, #12]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fe f9fe 	bl	800bcca <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d904 <prvCheckTasksWaitingTermination+0x54>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	4a0b      	ldr	r2, [pc, #44]	@ (800d904 <prvCheckTasksWaitingTermination+0x54>)
 800d8d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d8d8:	4b0b      	ldr	r3, [pc, #44]	@ (800d908 <prvCheckTasksWaitingTermination+0x58>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	4a0a      	ldr	r2, [pc, #40]	@ (800d908 <prvCheckTasksWaitingTermination+0x58>)
 800d8e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d8e2:	f000 ff3b 	bl	800e75c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 f810 	bl	800d90c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8ec:	4b06      	ldr	r3, [pc, #24]	@ (800d908 <prvCheckTasksWaitingTermination+0x58>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1e1      	bne.n	800d8b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8f4:	bf00      	nop
 800d8f6:	bf00      	nop
 800d8f8:	3708      	adds	r7, #8
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	20001608 	.word	0x20001608
 800d904:	20001634 	.word	0x20001634
 800d908:	2000161c 	.word	0x2000161c

0800d90c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d918:	4618      	mov	r0, r3
 800d91a:	f001 f8dd 	bl	800ead8 <vPortFree>
			vPortFree( pxTCB );
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f001 f8da 	bl	800ead8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d924:	bf00      	nop
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d932:	4b0c      	ldr	r3, [pc, #48]	@ (800d964 <prvResetNextTaskUnblockTime+0x38>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d104      	bne.n	800d946 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d93c:	4b0a      	ldr	r3, [pc, #40]	@ (800d968 <prvResetNextTaskUnblockTime+0x3c>)
 800d93e:	f04f 32ff 	mov.w	r2, #4294967295
 800d942:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d944:	e008      	b.n	800d958 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d946:	4b07      	ldr	r3, [pc, #28]	@ (800d964 <prvResetNextTaskUnblockTime+0x38>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	4a04      	ldr	r2, [pc, #16]	@ (800d968 <prvResetNextTaskUnblockTime+0x3c>)
 800d956:	6013      	str	r3, [r2, #0]
}
 800d958:	bf00      	nop
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	200015ec 	.word	0x200015ec
 800d968:	20001654 	.word	0x20001654

0800d96c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d972:	4b0b      	ldr	r3, [pc, #44]	@ (800d9a0 <xTaskGetSchedulerState+0x34>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d102      	bne.n	800d980 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d97a:	2301      	movs	r3, #1
 800d97c:	607b      	str	r3, [r7, #4]
 800d97e:	e008      	b.n	800d992 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d980:	4b08      	ldr	r3, [pc, #32]	@ (800d9a4 <xTaskGetSchedulerState+0x38>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d102      	bne.n	800d98e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d988:	2302      	movs	r3, #2
 800d98a:	607b      	str	r3, [r7, #4]
 800d98c:	e001      	b.n	800d992 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d98e:	2300      	movs	r3, #0
 800d990:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d992:	687b      	ldr	r3, [r7, #4]
	}
 800d994:	4618      	mov	r0, r3
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr
 800d9a0:	20001640 	.word	0x20001640
 800d9a4:	2000165c 	.word	0x2000165c

0800d9a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d05e      	beq.n	800da7c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9c2:	4b31      	ldr	r3, [pc, #196]	@ (800da88 <xTaskPriorityInherit+0xe0>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d24e      	bcs.n	800da6a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	db06      	blt.n	800d9e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9d4:	4b2c      	ldr	r3, [pc, #176]	@ (800da88 <xTaskPriorityInherit+0xe0>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9da:	f1c3 0207 	rsb	r2, r3, #7
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	6959      	ldr	r1, [r3, #20]
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	4413      	add	r3, r2
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	4a26      	ldr	r2, [pc, #152]	@ (800da8c <xTaskPriorityInherit+0xe4>)
 800d9f4:	4413      	add	r3, r2
 800d9f6:	4299      	cmp	r1, r3
 800d9f8:	d12f      	bne.n	800da5a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	3304      	adds	r3, #4
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fe f963 	bl	800bcca <uxListRemove>
 800da04:	4603      	mov	r3, r0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10a      	bne.n	800da20 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da0e:	2201      	movs	r2, #1
 800da10:	fa02 f303 	lsl.w	r3, r2, r3
 800da14:	43da      	mvns	r2, r3
 800da16:	4b1e      	ldr	r3, [pc, #120]	@ (800da90 <xTaskPriorityInherit+0xe8>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4013      	ands	r3, r2
 800da1c:	4a1c      	ldr	r2, [pc, #112]	@ (800da90 <xTaskPriorityInherit+0xe8>)
 800da1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da20:	4b19      	ldr	r3, [pc, #100]	@ (800da88 <xTaskPriorityInherit+0xe0>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da2e:	2201      	movs	r2, #1
 800da30:	409a      	lsls	r2, r3
 800da32:	4b17      	ldr	r3, [pc, #92]	@ (800da90 <xTaskPriorityInherit+0xe8>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4313      	orrs	r3, r2
 800da38:	4a15      	ldr	r2, [pc, #84]	@ (800da90 <xTaskPriorityInherit+0xe8>)
 800da3a:	6013      	str	r3, [r2, #0]
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da40:	4613      	mov	r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4413      	add	r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	4a10      	ldr	r2, [pc, #64]	@ (800da8c <xTaskPriorityInherit+0xe4>)
 800da4a:	441a      	add	r2, r3
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	3304      	adds	r3, #4
 800da50:	4619      	mov	r1, r3
 800da52:	4610      	mov	r0, r2
 800da54:	f7fe f8dc 	bl	800bc10 <vListInsertEnd>
 800da58:	e004      	b.n	800da64 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da5a:	4b0b      	ldr	r3, [pc, #44]	@ (800da88 <xTaskPriorityInherit+0xe0>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800da64:	2301      	movs	r3, #1
 800da66:	60fb      	str	r3, [r7, #12]
 800da68:	e008      	b.n	800da7c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da6e:	4b06      	ldr	r3, [pc, #24]	@ (800da88 <xTaskPriorityInherit+0xe0>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da74:	429a      	cmp	r2, r3
 800da76:	d201      	bcs.n	800da7c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800da78:	2301      	movs	r3, #1
 800da7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da7c:	68fb      	ldr	r3, [r7, #12]
	}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	20001534 	.word	0x20001534
 800da8c:	20001538 	.word	0x20001538
 800da90:	2000163c 	.word	0x2000163c

0800da94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800daa0:	2300      	movs	r3, #0
 800daa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d070      	beq.n	800db8c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800daaa:	4b3b      	ldr	r3, [pc, #236]	@ (800db98 <xTaskPriorityDisinherit+0x104>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d00b      	beq.n	800dacc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	60fb      	str	r3, [r7, #12]
}
 800dac6:	bf00      	nop
 800dac8:	bf00      	nop
 800daca:	e7fd      	b.n	800dac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10b      	bne.n	800daec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad8:	f383 8811 	msr	BASEPRI, r3
 800dadc:	f3bf 8f6f 	isb	sy
 800dae0:	f3bf 8f4f 	dsb	sy
 800dae4:	60bb      	str	r3, [r7, #8]
}
 800dae6:	bf00      	nop
 800dae8:	bf00      	nop
 800daea:	e7fd      	b.n	800dae8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800daf0:	1e5a      	subs	r2, r3, #1
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dafe:	429a      	cmp	r2, r3
 800db00:	d044      	beq.n	800db8c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db06:	2b00      	cmp	r3, #0
 800db08:	d140      	bne.n	800db8c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	3304      	adds	r3, #4
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fe f8db 	bl	800bcca <uxListRemove>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d115      	bne.n	800db46 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db1e:	491f      	ldr	r1, [pc, #124]	@ (800db9c <xTaskPriorityDisinherit+0x108>)
 800db20:	4613      	mov	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	4413      	add	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	440b      	add	r3, r1
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d10a      	bne.n	800db46 <xTaskPriorityDisinherit+0xb2>
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db34:	2201      	movs	r2, #1
 800db36:	fa02 f303 	lsl.w	r3, r2, r3
 800db3a:	43da      	mvns	r2, r3
 800db3c:	4b18      	ldr	r3, [pc, #96]	@ (800dba0 <xTaskPriorityDisinherit+0x10c>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4013      	ands	r3, r2
 800db42:	4a17      	ldr	r2, [pc, #92]	@ (800dba0 <xTaskPriorityDisinherit+0x10c>)
 800db44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db52:	f1c3 0207 	rsb	r2, r3, #7
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db5e:	2201      	movs	r2, #1
 800db60:	409a      	lsls	r2, r3
 800db62:	4b0f      	ldr	r3, [pc, #60]	@ (800dba0 <xTaskPriorityDisinherit+0x10c>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4313      	orrs	r3, r2
 800db68:	4a0d      	ldr	r2, [pc, #52]	@ (800dba0 <xTaskPriorityDisinherit+0x10c>)
 800db6a:	6013      	str	r3, [r2, #0]
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db70:	4613      	mov	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4413      	add	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	4a08      	ldr	r2, [pc, #32]	@ (800db9c <xTaskPriorityDisinherit+0x108>)
 800db7a:	441a      	add	r2, r3
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	3304      	adds	r3, #4
 800db80:	4619      	mov	r1, r3
 800db82:	4610      	mov	r0, r2
 800db84:	f7fe f844 	bl	800bc10 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800db88:	2301      	movs	r3, #1
 800db8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db8c:	697b      	ldr	r3, [r7, #20]
	}
 800db8e:	4618      	mov	r0, r3
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	20001534 	.word	0x20001534
 800db9c:	20001538 	.word	0x20001538
 800dba0:	2000163c 	.word	0x2000163c

0800dba4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d079      	beq.n	800dcb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d10b      	bne.n	800dbdc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800dbc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc8:	f383 8811 	msr	BASEPRI, r3
 800dbcc:	f3bf 8f6f 	isb	sy
 800dbd0:	f3bf 8f4f 	dsb	sy
 800dbd4:	60fb      	str	r3, [r7, #12]
}
 800dbd6:	bf00      	nop
 800dbd8:	bf00      	nop
 800dbda:	e7fd      	b.n	800dbd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbe0:	683a      	ldr	r2, [r7, #0]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d902      	bls.n	800dbec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	61fb      	str	r3, [r7, #28]
 800dbea:	e002      	b.n	800dbf2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbf0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf6:	69fa      	ldr	r2, [r7, #28]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d059      	beq.n	800dcb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dbfc:	69bb      	ldr	r3, [r7, #24]
 800dbfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dc00:	697a      	ldr	r2, [r7, #20]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d154      	bne.n	800dcb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dc06:	4b2c      	ldr	r3, [pc, #176]	@ (800dcb8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	69ba      	ldr	r2, [r7, #24]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d10b      	bne.n	800dc28 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800dc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc14:	f383 8811 	msr	BASEPRI, r3
 800dc18:	f3bf 8f6f 	isb	sy
 800dc1c:	f3bf 8f4f 	dsb	sy
 800dc20:	60bb      	str	r3, [r7, #8]
}
 800dc22:	bf00      	nop
 800dc24:	bf00      	nop
 800dc26:	e7fd      	b.n	800dc24 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	69fa      	ldr	r2, [r7, #28]
 800dc32:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	699b      	ldr	r3, [r3, #24]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	db04      	blt.n	800dc46 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	f1c3 0207 	rsb	r2, r3, #7
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dc46:	69bb      	ldr	r3, [r7, #24]
 800dc48:	6959      	ldr	r1, [r3, #20]
 800dc4a:	693a      	ldr	r2, [r7, #16]
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4413      	add	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4a19      	ldr	r2, [pc, #100]	@ (800dcbc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dc56:	4413      	add	r3, r2
 800dc58:	4299      	cmp	r1, r3
 800dc5a:	d129      	bne.n	800dcb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7fe f832 	bl	800bcca <uxListRemove>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10a      	bne.n	800dc82 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc70:	2201      	movs	r2, #1
 800dc72:	fa02 f303 	lsl.w	r3, r2, r3
 800dc76:	43da      	mvns	r2, r3
 800dc78:	4b11      	ldr	r3, [pc, #68]	@ (800dcc0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	4a10      	ldr	r2, [pc, #64]	@ (800dcc0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800dc80:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc86:	2201      	movs	r2, #1
 800dc88:	409a      	lsls	r2, r3
 800dc8a:	4b0d      	ldr	r3, [pc, #52]	@ (800dcc0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	4a0b      	ldr	r2, [pc, #44]	@ (800dcc0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800dc92:	6013      	str	r3, [r2, #0]
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc98:	4613      	mov	r3, r2
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4413      	add	r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4a06      	ldr	r2, [pc, #24]	@ (800dcbc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dca2:	441a      	add	r2, r3
 800dca4:	69bb      	ldr	r3, [r7, #24]
 800dca6:	3304      	adds	r3, #4
 800dca8:	4619      	mov	r1, r3
 800dcaa:	4610      	mov	r0, r2
 800dcac:	f7fd ffb0 	bl	800bc10 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dcb0:	bf00      	nop
 800dcb2:	3720      	adds	r7, #32
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	20001534 	.word	0x20001534
 800dcbc:	20001538 	.word	0x20001538
 800dcc0:	2000163c 	.word	0x2000163c

0800dcc4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800dcca:	4b09      	ldr	r3, [pc, #36]	@ (800dcf0 <uxTaskResetEventItemValue+0x2c>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	699b      	ldr	r3, [r3, #24]
 800dcd0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcd2:	4b07      	ldr	r3, [pc, #28]	@ (800dcf0 <uxTaskResetEventItemValue+0x2c>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcd8:	4b05      	ldr	r3, [pc, #20]	@ (800dcf0 <uxTaskResetEventItemValue+0x2c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f1c2 0207 	rsb	r2, r2, #7
 800dce0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800dce2:	687b      	ldr	r3, [r7, #4]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	370c      	adds	r7, #12
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr
 800dcf0:	20001534 	.word	0x20001534

0800dcf4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dcf4:	b480      	push	{r7}
 800dcf6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dcf8:	4b07      	ldr	r3, [pc, #28]	@ (800dd18 <pvTaskIncrementMutexHeldCount+0x24>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d004      	beq.n	800dd0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd00:	4b05      	ldr	r3, [pc, #20]	@ (800dd18 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dd06:	3201      	adds	r2, #1
 800dd08:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800dd0a:	4b03      	ldr	r3, [pc, #12]	@ (800dd18 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
	}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	20001534 	.word	0x20001534

0800dd1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd26:	4b29      	ldr	r3, [pc, #164]	@ (800ddcc <prvAddCurrentTaskToDelayedList+0xb0>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd2c:	4b28      	ldr	r3, [pc, #160]	@ (800ddd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	3304      	adds	r3, #4
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fd ffc9 	bl	800bcca <uxListRemove>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10b      	bne.n	800dd56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dd3e:	4b24      	ldr	r3, [pc, #144]	@ (800ddd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd44:	2201      	movs	r2, #1
 800dd46:	fa02 f303 	lsl.w	r3, r2, r3
 800dd4a:	43da      	mvns	r2, r3
 800dd4c:	4b21      	ldr	r3, [pc, #132]	@ (800ddd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4013      	ands	r3, r2
 800dd52:	4a20      	ldr	r2, [pc, #128]	@ (800ddd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dd54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd5c:	d10a      	bne.n	800dd74 <prvAddCurrentTaskToDelayedList+0x58>
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d007      	beq.n	800dd74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd64:	4b1a      	ldr	r3, [pc, #104]	@ (800ddd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	481a      	ldr	r0, [pc, #104]	@ (800ddd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dd6e:	f7fd ff4f 	bl	800bc10 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dd72:	e026      	b.n	800ddc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dd74:	68fa      	ldr	r2, [r7, #12]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4413      	add	r3, r2
 800dd7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd7c:	4b14      	ldr	r3, [pc, #80]	@ (800ddd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	68ba      	ldr	r2, [r7, #8]
 800dd82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dd84:	68ba      	ldr	r2, [r7, #8]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d209      	bcs.n	800dda0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd8c:	4b13      	ldr	r3, [pc, #76]	@ (800dddc <prvAddCurrentTaskToDelayedList+0xc0>)
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	4b0f      	ldr	r3, [pc, #60]	@ (800ddd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	3304      	adds	r3, #4
 800dd96:	4619      	mov	r1, r3
 800dd98:	4610      	mov	r0, r2
 800dd9a:	f7fd ff5d 	bl	800bc58 <vListInsert>
}
 800dd9e:	e010      	b.n	800ddc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dda0:	4b0f      	ldr	r3, [pc, #60]	@ (800dde0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	3304      	adds	r3, #4
 800ddaa:	4619      	mov	r1, r3
 800ddac:	4610      	mov	r0, r2
 800ddae:	f7fd ff53 	bl	800bc58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ddb2:	4b0c      	ldr	r3, [pc, #48]	@ (800dde4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	68ba      	ldr	r2, [r7, #8]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d202      	bcs.n	800ddc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ddbc:	4a09      	ldr	r2, [pc, #36]	@ (800dde4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	6013      	str	r3, [r2, #0]
}
 800ddc2:	bf00      	nop
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20001638 	.word	0x20001638
 800ddd0:	20001534 	.word	0x20001534
 800ddd4:	2000163c 	.word	0x2000163c
 800ddd8:	20001620 	.word	0x20001620
 800dddc:	200015f0 	.word	0x200015f0
 800dde0:	200015ec 	.word	0x200015ec
 800dde4:	20001654 	.word	0x20001654

0800dde8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ddf2:	f000 fafb 	bl	800e3ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ddf6:	4b11      	ldr	r3, [pc, #68]	@ (800de3c <xTimerCreateTimerTask+0x54>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00a      	beq.n	800de14 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800ddfe:	4b10      	ldr	r3, [pc, #64]	@ (800de40 <xTimerCreateTimerTask+0x58>)
 800de00:	9301      	str	r3, [sp, #4]
 800de02:	2306      	movs	r3, #6
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	2300      	movs	r3, #0
 800de08:	2280      	movs	r2, #128	@ 0x80
 800de0a:	490e      	ldr	r1, [pc, #56]	@ (800de44 <xTimerCreateTimerTask+0x5c>)
 800de0c:	480e      	ldr	r0, [pc, #56]	@ (800de48 <xTimerCreateTimerTask+0x60>)
 800de0e:	f7fe feed 	bl	800cbec <xTaskCreate>
 800de12:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d10b      	bne.n	800de32 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800de1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de1e:	f383 8811 	msr	BASEPRI, r3
 800de22:	f3bf 8f6f 	isb	sy
 800de26:	f3bf 8f4f 	dsb	sy
 800de2a:	603b      	str	r3, [r7, #0]
}
 800de2c:	bf00      	nop
 800de2e:	bf00      	nop
 800de30:	e7fd      	b.n	800de2e <xTimerCreateTimerTask+0x46>
	return xReturn;
 800de32:	687b      	ldr	r3, [r7, #4]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	20001690 	.word	0x20001690
 800de40:	20001694 	.word	0x20001694
 800de44:	0801f47c 	.word	0x0801f47c
 800de48:	0800df85 	.word	0x0800df85

0800de4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b08a      	sub	sp, #40	@ 0x28
 800de50:	af00      	add	r7, sp, #0
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	607a      	str	r2, [r7, #4]
 800de58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800de5a:	2300      	movs	r3, #0
 800de5c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d10b      	bne.n	800de7c <xTimerGenericCommand+0x30>
	__asm volatile
 800de64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de68:	f383 8811 	msr	BASEPRI, r3
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	623b      	str	r3, [r7, #32]
}
 800de76:	bf00      	nop
 800de78:	bf00      	nop
 800de7a:	e7fd      	b.n	800de78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800de7c:	4b19      	ldr	r3, [pc, #100]	@ (800dee4 <xTimerGenericCommand+0x98>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d02a      	beq.n	800deda <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	2b05      	cmp	r3, #5
 800de94:	dc18      	bgt.n	800dec8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800de96:	f7ff fd69 	bl	800d96c <xTaskGetSchedulerState>
 800de9a:	4603      	mov	r3, r0
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d109      	bne.n	800deb4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dea0:	4b10      	ldr	r3, [pc, #64]	@ (800dee4 <xTimerGenericCommand+0x98>)
 800dea2:	6818      	ldr	r0, [r3, #0]
 800dea4:	f107 0110 	add.w	r1, r7, #16
 800dea8:	2300      	movs	r3, #0
 800deaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800deac:	f7fe f82a 	bl	800bf04 <xQueueGenericSend>
 800deb0:	6278      	str	r0, [r7, #36]	@ 0x24
 800deb2:	e012      	b.n	800deda <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800deb4:	4b0b      	ldr	r3, [pc, #44]	@ (800dee4 <xTimerGenericCommand+0x98>)
 800deb6:	6818      	ldr	r0, [r3, #0]
 800deb8:	f107 0110 	add.w	r1, r7, #16
 800debc:	2300      	movs	r3, #0
 800debe:	2200      	movs	r2, #0
 800dec0:	f7fe f820 	bl	800bf04 <xQueueGenericSend>
 800dec4:	6278      	str	r0, [r7, #36]	@ 0x24
 800dec6:	e008      	b.n	800deda <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dec8:	4b06      	ldr	r3, [pc, #24]	@ (800dee4 <xTimerGenericCommand+0x98>)
 800deca:	6818      	ldr	r0, [r3, #0]
 800decc:	f107 0110 	add.w	r1, r7, #16
 800ded0:	2300      	movs	r3, #0
 800ded2:	683a      	ldr	r2, [r7, #0]
 800ded4:	f7fe f918 	bl	800c108 <xQueueGenericSendFromISR>
 800ded8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800deda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3728      	adds	r7, #40	@ 0x28
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	20001690 	.word	0x20001690

0800dee8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b088      	sub	sp, #32
 800deec:	af02      	add	r7, sp, #8
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800def2:	4b23      	ldr	r3, [pc, #140]	@ (800df80 <prvProcessExpiredTimer+0x98>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	3304      	adds	r3, #4
 800df00:	4618      	mov	r0, r3
 800df02:	f7fd fee2 	bl	800bcca <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800df0c:	f003 0304 	and.w	r3, r3, #4
 800df10:	2b00      	cmp	r3, #0
 800df12:	d023      	beq.n	800df5c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	699a      	ldr	r2, [r3, #24]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	18d1      	adds	r1, r2, r3
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	683a      	ldr	r2, [r7, #0]
 800df20:	6978      	ldr	r0, [r7, #20]
 800df22:	f000 f8d5 	bl	800e0d0 <prvInsertTimerInActiveList>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d020      	beq.n	800df6e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df2c:	2300      	movs	r3, #0
 800df2e:	9300      	str	r3, [sp, #0]
 800df30:	2300      	movs	r3, #0
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	2100      	movs	r1, #0
 800df36:	6978      	ldr	r0, [r7, #20]
 800df38:	f7ff ff88 	bl	800de4c <xTimerGenericCommand>
 800df3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d114      	bne.n	800df6e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800df44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df48:	f383 8811 	msr	BASEPRI, r3
 800df4c:	f3bf 8f6f 	isb	sy
 800df50:	f3bf 8f4f 	dsb	sy
 800df54:	60fb      	str	r3, [r7, #12]
}
 800df56:	bf00      	nop
 800df58:	bf00      	nop
 800df5a:	e7fd      	b.n	800df58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800df62:	f023 0301 	bic.w	r3, r3, #1
 800df66:	b2da      	uxtb	r2, r3
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	6a1b      	ldr	r3, [r3, #32]
 800df72:	6978      	ldr	r0, [r7, #20]
 800df74:	4798      	blx	r3
}
 800df76:	bf00      	nop
 800df78:	3718      	adds	r7, #24
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	20001688 	.word	0x20001688

0800df84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df8c:	f107 0308 	add.w	r3, r7, #8
 800df90:	4618      	mov	r0, r3
 800df92:	f000 f859 	bl	800e048 <prvGetNextExpireTime>
 800df96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	4619      	mov	r1, r3
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	f000 f805 	bl	800dfac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dfa2:	f000 f8d7 	bl	800e154 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dfa6:	bf00      	nop
 800dfa8:	e7f0      	b.n	800df8c <prvTimerTask+0x8>
	...

0800dfac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dfb6:	f7ff f861 	bl	800d07c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dfba:	f107 0308 	add.w	r3, r7, #8
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f000 f866 	bl	800e090 <prvSampleTimeNow>
 800dfc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d130      	bne.n	800e02e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d10a      	bne.n	800dfe8 <prvProcessTimerOrBlockTask+0x3c>
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d806      	bhi.n	800dfe8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dfda:	f7ff f85d 	bl	800d098 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dfde:	68f9      	ldr	r1, [r7, #12]
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7ff ff81 	bl	800dee8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dfe6:	e024      	b.n	800e032 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d008      	beq.n	800e000 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dfee:	4b13      	ldr	r3, [pc, #76]	@ (800e03c <prvProcessTimerOrBlockTask+0x90>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d101      	bne.n	800dffc <prvProcessTimerOrBlockTask+0x50>
 800dff8:	2301      	movs	r3, #1
 800dffa:	e000      	b.n	800dffe <prvProcessTimerOrBlockTask+0x52>
 800dffc:	2300      	movs	r3, #0
 800dffe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e000:	4b0f      	ldr	r3, [pc, #60]	@ (800e040 <prvProcessTimerOrBlockTask+0x94>)
 800e002:	6818      	ldr	r0, [r3, #0]
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	683a      	ldr	r2, [r7, #0]
 800e00c:	4619      	mov	r1, r3
 800e00e:	f7fe fdb9 	bl	800cb84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e012:	f7ff f841 	bl	800d098 <xTaskResumeAll>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d10a      	bne.n	800e032 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e01c:	4b09      	ldr	r3, [pc, #36]	@ (800e044 <prvProcessTimerOrBlockTask+0x98>)
 800e01e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	f3bf 8f4f 	dsb	sy
 800e028:	f3bf 8f6f 	isb	sy
}
 800e02c:	e001      	b.n	800e032 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e02e:	f7ff f833 	bl	800d098 <xTaskResumeAll>
}
 800e032:	bf00      	nop
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	2000168c 	.word	0x2000168c
 800e040:	20001690 	.word	0x20001690
 800e044:	e000ed04 	.word	0xe000ed04

0800e048 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e048:	b480      	push	{r7}
 800e04a:	b085      	sub	sp, #20
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e050:	4b0e      	ldr	r3, [pc, #56]	@ (800e08c <prvGetNextExpireTime+0x44>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d101      	bne.n	800e05e <prvGetNextExpireTime+0x16>
 800e05a:	2201      	movs	r2, #1
 800e05c:	e000      	b.n	800e060 <prvGetNextExpireTime+0x18>
 800e05e:	2200      	movs	r2, #0
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d105      	bne.n	800e078 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e06c:	4b07      	ldr	r3, [pc, #28]	@ (800e08c <prvGetNextExpireTime+0x44>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	60fb      	str	r3, [r7, #12]
 800e076:	e001      	b.n	800e07c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e078:	2300      	movs	r3, #0
 800e07a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e07c:	68fb      	ldr	r3, [r7, #12]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3714      	adds	r7, #20
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	20001688 	.word	0x20001688

0800e090 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e098:	f7ff f89c 	bl	800d1d4 <xTaskGetTickCount>
 800e09c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e09e:	4b0b      	ldr	r3, [pc, #44]	@ (800e0cc <prvSampleTimeNow+0x3c>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	68fa      	ldr	r2, [r7, #12]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d205      	bcs.n	800e0b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e0a8:	f000 f93a 	bl	800e320 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	601a      	str	r2, [r3, #0]
 800e0b2:	e002      	b.n	800e0ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e0ba:	4a04      	ldr	r2, [pc, #16]	@ (800e0cc <prvSampleTimeNow+0x3c>)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3710      	adds	r7, #16
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	20001698 	.word	0x20001698

0800e0d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b086      	sub	sp, #24
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	607a      	str	r2, [r7, #4]
 800e0dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	68ba      	ldr	r2, [r7, #8]
 800e0e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	68fa      	ldr	r2, [r7, #12]
 800e0ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e0ee:	68ba      	ldr	r2, [r7, #8]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d812      	bhi.n	800e11c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	1ad2      	subs	r2, r2, r3
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	699b      	ldr	r3, [r3, #24]
 800e100:	429a      	cmp	r2, r3
 800e102:	d302      	bcc.n	800e10a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e104:	2301      	movs	r3, #1
 800e106:	617b      	str	r3, [r7, #20]
 800e108:	e01b      	b.n	800e142 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e10a:	4b10      	ldr	r3, [pc, #64]	@ (800e14c <prvInsertTimerInActiveList+0x7c>)
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	3304      	adds	r3, #4
 800e112:	4619      	mov	r1, r3
 800e114:	4610      	mov	r0, r2
 800e116:	f7fd fd9f 	bl	800bc58 <vListInsert>
 800e11a:	e012      	b.n	800e142 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	429a      	cmp	r2, r3
 800e122:	d206      	bcs.n	800e132 <prvInsertTimerInActiveList+0x62>
 800e124:	68ba      	ldr	r2, [r7, #8]
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d302      	bcc.n	800e132 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e12c:	2301      	movs	r3, #1
 800e12e:	617b      	str	r3, [r7, #20]
 800e130:	e007      	b.n	800e142 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e132:	4b07      	ldr	r3, [pc, #28]	@ (800e150 <prvInsertTimerInActiveList+0x80>)
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	3304      	adds	r3, #4
 800e13a:	4619      	mov	r1, r3
 800e13c:	4610      	mov	r0, r2
 800e13e:	f7fd fd8b 	bl	800bc58 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e142:	697b      	ldr	r3, [r7, #20]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3718      	adds	r7, #24
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	2000168c 	.word	0x2000168c
 800e150:	20001688 	.word	0x20001688

0800e154 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b08e      	sub	sp, #56	@ 0x38
 800e158:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e15a:	e0ce      	b.n	800e2fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	da19      	bge.n	800e196 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e162:	1d3b      	adds	r3, r7, #4
 800e164:	3304      	adds	r3, #4
 800e166:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10b      	bne.n	800e186 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	61fb      	str	r3, [r7, #28]
}
 800e180:	bf00      	nop
 800e182:	bf00      	nop
 800e184:	e7fd      	b.n	800e182 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e18c:	6850      	ldr	r0, [r2, #4]
 800e18e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e190:	6892      	ldr	r2, [r2, #8]
 800e192:	4611      	mov	r1, r2
 800e194:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f2c0 80ae 	blt.w	800e2fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a4:	695b      	ldr	r3, [r3, #20]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d004      	beq.n	800e1b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fd fd8b 	bl	800bcca <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e1b4:	463b      	mov	r3, r7
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7ff ff6a 	bl	800e090 <prvSampleTimeNow>
 800e1bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2b09      	cmp	r3, #9
 800e1c2:	f200 8097 	bhi.w	800e2f4 <prvProcessReceivedCommands+0x1a0>
 800e1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e1cc <prvProcessReceivedCommands+0x78>)
 800e1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1cc:	0800e1f5 	.word	0x0800e1f5
 800e1d0:	0800e1f5 	.word	0x0800e1f5
 800e1d4:	0800e1f5 	.word	0x0800e1f5
 800e1d8:	0800e26b 	.word	0x0800e26b
 800e1dc:	0800e27f 	.word	0x0800e27f
 800e1e0:	0800e2cb 	.word	0x0800e2cb
 800e1e4:	0800e1f5 	.word	0x0800e1f5
 800e1e8:	0800e1f5 	.word	0x0800e1f5
 800e1ec:	0800e26b 	.word	0x0800e26b
 800e1f0:	0800e27f 	.word	0x0800e27f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e1fa:	f043 0301 	orr.w	r3, r3, #1
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e202:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e206:	68ba      	ldr	r2, [r7, #8]
 800e208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e20a:	699b      	ldr	r3, [r3, #24]
 800e20c:	18d1      	adds	r1, r2, r3
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e214:	f7ff ff5c 	bl	800e0d0 <prvInsertTimerInActiveList>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d06c      	beq.n	800e2f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e220:	6a1b      	ldr	r3, [r3, #32]
 800e222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e224:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e228:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e22c:	f003 0304 	and.w	r3, r3, #4
 800e230:	2b00      	cmp	r3, #0
 800e232:	d061      	beq.n	800e2f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e238:	699b      	ldr	r3, [r3, #24]
 800e23a:	441a      	add	r2, r3
 800e23c:	2300      	movs	r3, #0
 800e23e:	9300      	str	r3, [sp, #0]
 800e240:	2300      	movs	r3, #0
 800e242:	2100      	movs	r1, #0
 800e244:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e246:	f7ff fe01 	bl	800de4c <xTimerGenericCommand>
 800e24a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e24c:	6a3b      	ldr	r3, [r7, #32]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d152      	bne.n	800e2f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e256:	f383 8811 	msr	BASEPRI, r3
 800e25a:	f3bf 8f6f 	isb	sy
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	61bb      	str	r3, [r7, #24]
}
 800e264:	bf00      	nop
 800e266:	bf00      	nop
 800e268:	e7fd      	b.n	800e266 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e270:	f023 0301 	bic.w	r3, r3, #1
 800e274:	b2da      	uxtb	r2, r3
 800e276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800e27c:	e03d      	b.n	800e2fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e280:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e284:	f043 0301 	orr.w	r3, r3, #1
 800e288:	b2da      	uxtb	r2, r3
 800e28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e290:	68ba      	ldr	r2, [r7, #8]
 800e292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e294:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e298:	699b      	ldr	r3, [r3, #24]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d10b      	bne.n	800e2b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a2:	f383 8811 	msr	BASEPRI, r3
 800e2a6:	f3bf 8f6f 	isb	sy
 800e2aa:	f3bf 8f4f 	dsb	sy
 800e2ae:	617b      	str	r3, [r7, #20]
}
 800e2b0:	bf00      	nop
 800e2b2:	bf00      	nop
 800e2b4:	e7fd      	b.n	800e2b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b8:	699a      	ldr	r2, [r3, #24]
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2bc:	18d1      	adds	r1, r2, r3
 800e2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2c4:	f7ff ff04 	bl	800e0d0 <prvInsertTimerInActiveList>
					break;
 800e2c8:	e017      	b.n	800e2fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e2d0:	f003 0302 	and.w	r3, r3, #2
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d103      	bne.n	800e2e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e2d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2da:	f000 fbfd 	bl	800ead8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e2de:	e00c      	b.n	800e2fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e2e6:	f023 0301 	bic.w	r3, r3, #1
 800e2ea:	b2da      	uxtb	r2, r3
 800e2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800e2f2:	e002      	b.n	800e2fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e2f4:	bf00      	nop
 800e2f6:	e000      	b.n	800e2fa <prvProcessReceivedCommands+0x1a6>
					break;
 800e2f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e2fa:	4b08      	ldr	r3, [pc, #32]	@ (800e31c <prvProcessReceivedCommands+0x1c8>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	1d39      	adds	r1, r7, #4
 800e300:	2200      	movs	r2, #0
 800e302:	4618      	mov	r0, r3
 800e304:	f7fe f82e 	bl	800c364 <xQueueReceive>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	f47f af26 	bne.w	800e15c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e310:	bf00      	nop
 800e312:	bf00      	nop
 800e314:	3730      	adds	r7, #48	@ 0x30
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	20001690 	.word	0x20001690

0800e320 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b088      	sub	sp, #32
 800e324:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e326:	e049      	b.n	800e3bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e328:	4b2e      	ldr	r3, [pc, #184]	@ (800e3e4 <prvSwitchTimerLists+0xc4>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e332:	4b2c      	ldr	r3, [pc, #176]	@ (800e3e4 <prvSwitchTimerLists+0xc4>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	3304      	adds	r3, #4
 800e340:	4618      	mov	r0, r3
 800e342:	f7fd fcc2 	bl	800bcca <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	6a1b      	ldr	r3, [r3, #32]
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e354:	f003 0304 	and.w	r3, r3, #4
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d02f      	beq.n	800e3bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	699b      	ldr	r3, [r3, #24]
 800e360:	693a      	ldr	r2, [r7, #16]
 800e362:	4413      	add	r3, r2
 800e364:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e366:	68ba      	ldr	r2, [r7, #8]
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d90e      	bls.n	800e38c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	68ba      	ldr	r2, [r7, #8]
 800e372:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	68fa      	ldr	r2, [r7, #12]
 800e378:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e37a:	4b1a      	ldr	r3, [pc, #104]	@ (800e3e4 <prvSwitchTimerLists+0xc4>)
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	3304      	adds	r3, #4
 800e382:	4619      	mov	r1, r3
 800e384:	4610      	mov	r0, r2
 800e386:	f7fd fc67 	bl	800bc58 <vListInsert>
 800e38a:	e017      	b.n	800e3bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e38c:	2300      	movs	r3, #0
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	2300      	movs	r3, #0
 800e392:	693a      	ldr	r2, [r7, #16]
 800e394:	2100      	movs	r1, #0
 800e396:	68f8      	ldr	r0, [r7, #12]
 800e398:	f7ff fd58 	bl	800de4c <xTimerGenericCommand>
 800e39c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d10b      	bne.n	800e3bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a8:	f383 8811 	msr	BASEPRI, r3
 800e3ac:	f3bf 8f6f 	isb	sy
 800e3b0:	f3bf 8f4f 	dsb	sy
 800e3b4:	603b      	str	r3, [r7, #0]
}
 800e3b6:	bf00      	nop
 800e3b8:	bf00      	nop
 800e3ba:	e7fd      	b.n	800e3b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3bc:	4b09      	ldr	r3, [pc, #36]	@ (800e3e4 <prvSwitchTimerLists+0xc4>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1b0      	bne.n	800e328 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e3c6:	4b07      	ldr	r3, [pc, #28]	@ (800e3e4 <prvSwitchTimerLists+0xc4>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e3cc:	4b06      	ldr	r3, [pc, #24]	@ (800e3e8 <prvSwitchTimerLists+0xc8>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a04      	ldr	r2, [pc, #16]	@ (800e3e4 <prvSwitchTimerLists+0xc4>)
 800e3d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e3d4:	4a04      	ldr	r2, [pc, #16]	@ (800e3e8 <prvSwitchTimerLists+0xc8>)
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	6013      	str	r3, [r2, #0]
}
 800e3da:	bf00      	nop
 800e3dc:	3718      	adds	r7, #24
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}
 800e3e2:	bf00      	nop
 800e3e4:	20001688 	.word	0x20001688
 800e3e8:	2000168c 	.word	0x2000168c

0800e3ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e3f0:	f000 f982 	bl	800e6f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e3f4:	4b12      	ldr	r3, [pc, #72]	@ (800e440 <prvCheckForValidListAndQueue+0x54>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d11d      	bne.n	800e438 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800e3fc:	4811      	ldr	r0, [pc, #68]	@ (800e444 <prvCheckForValidListAndQueue+0x58>)
 800e3fe:	f7fd fbda 	bl	800bbb6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e402:	4811      	ldr	r0, [pc, #68]	@ (800e448 <prvCheckForValidListAndQueue+0x5c>)
 800e404:	f7fd fbd7 	bl	800bbb6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e408:	4b10      	ldr	r3, [pc, #64]	@ (800e44c <prvCheckForValidListAndQueue+0x60>)
 800e40a:	4a0e      	ldr	r2, [pc, #56]	@ (800e444 <prvCheckForValidListAndQueue+0x58>)
 800e40c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e40e:	4b10      	ldr	r3, [pc, #64]	@ (800e450 <prvCheckForValidListAndQueue+0x64>)
 800e410:	4a0d      	ldr	r2, [pc, #52]	@ (800e448 <prvCheckForValidListAndQueue+0x5c>)
 800e412:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e414:	2200      	movs	r2, #0
 800e416:	2110      	movs	r1, #16
 800e418:	2001      	movs	r0, #1
 800e41a:	f7fd fceb 	bl	800bdf4 <xQueueGenericCreate>
 800e41e:	4603      	mov	r3, r0
 800e420:	4a07      	ldr	r2, [pc, #28]	@ (800e440 <prvCheckForValidListAndQueue+0x54>)
 800e422:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e424:	4b06      	ldr	r3, [pc, #24]	@ (800e440 <prvCheckForValidListAndQueue+0x54>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d005      	beq.n	800e438 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e42c:	4b04      	ldr	r3, [pc, #16]	@ (800e440 <prvCheckForValidListAndQueue+0x54>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4908      	ldr	r1, [pc, #32]	@ (800e454 <prvCheckForValidListAndQueue+0x68>)
 800e432:	4618      	mov	r0, r3
 800e434:	f7fe fb52 	bl	800cadc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e438:	f000 f990 	bl	800e75c <vPortExitCritical>
}
 800e43c:	bf00      	nop
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	20001690 	.word	0x20001690
 800e444:	20001660 	.word	0x20001660
 800e448:	20001674 	.word	0x20001674
 800e44c:	20001688 	.word	0x20001688
 800e450:	2000168c 	.word	0x2000168c
 800e454:	0801f484 	.word	0x0801f484

0800e458 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b08a      	sub	sp, #40	@ 0x28
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
 800e464:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800e466:	f06f 0301 	mvn.w	r3, #1
 800e46a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e478:	4b06      	ldr	r3, [pc, #24]	@ (800e494 <xTimerPendFunctionCallFromISR+0x3c>)
 800e47a:	6818      	ldr	r0, [r3, #0]
 800e47c:	f107 0114 	add.w	r1, r7, #20
 800e480:	2300      	movs	r3, #0
 800e482:	683a      	ldr	r2, [r7, #0]
 800e484:	f7fd fe40 	bl	800c108 <xQueueGenericSendFromISR>
 800e488:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800e48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3728      	adds	r7, #40	@ 0x28
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	20001690 	.word	0x20001690

0800e498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e498:	b480      	push	{r7}
 800e49a:	b085      	sub	sp, #20
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	3b04      	subs	r3, #4
 800e4a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	3b04      	subs	r3, #4
 800e4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	f023 0201 	bic.w	r2, r3, #1
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	3b04      	subs	r3, #4
 800e4c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4c8:	4a0c      	ldr	r2, [pc, #48]	@ (800e4fc <pxPortInitialiseStack+0x64>)
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3b14      	subs	r3, #20
 800e4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	3b04      	subs	r3, #4
 800e4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f06f 0202 	mvn.w	r2, #2
 800e4e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	3b20      	subs	r3, #32
 800e4ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3714      	adds	r7, #20
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr
 800e4fc:	0800e501 	.word	0x0800e501

0800e500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e506:	2300      	movs	r3, #0
 800e508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e50a:	4b13      	ldr	r3, [pc, #76]	@ (800e558 <prvTaskExitError+0x58>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e512:	d00b      	beq.n	800e52c <prvTaskExitError+0x2c>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	60fb      	str	r3, [r7, #12]
}
 800e526:	bf00      	nop
 800e528:	bf00      	nop
 800e52a:	e7fd      	b.n	800e528 <prvTaskExitError+0x28>
	__asm volatile
 800e52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e530:	f383 8811 	msr	BASEPRI, r3
 800e534:	f3bf 8f6f 	isb	sy
 800e538:	f3bf 8f4f 	dsb	sy
 800e53c:	60bb      	str	r3, [r7, #8]
}
 800e53e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e540:	bf00      	nop
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d0fc      	beq.n	800e542 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e548:	bf00      	nop
 800e54a:	bf00      	nop
 800e54c:	3714      	adds	r7, #20
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	200000b0 	.word	0x200000b0
 800e55c:	00000000 	.word	0x00000000

0800e560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e560:	4b07      	ldr	r3, [pc, #28]	@ (800e580 <pxCurrentTCBConst2>)
 800e562:	6819      	ldr	r1, [r3, #0]
 800e564:	6808      	ldr	r0, [r1, #0]
 800e566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56a:	f380 8809 	msr	PSP, r0
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	f04f 0000 	mov.w	r0, #0
 800e576:	f380 8811 	msr	BASEPRI, r0
 800e57a:	4770      	bx	lr
 800e57c:	f3af 8000 	nop.w

0800e580 <pxCurrentTCBConst2>:
 800e580:	20001534 	.word	0x20001534
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e584:	bf00      	nop
 800e586:	bf00      	nop

0800e588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e588:	4808      	ldr	r0, [pc, #32]	@ (800e5ac <prvPortStartFirstTask+0x24>)
 800e58a:	6800      	ldr	r0, [r0, #0]
 800e58c:	6800      	ldr	r0, [r0, #0]
 800e58e:	f380 8808 	msr	MSP, r0
 800e592:	f04f 0000 	mov.w	r0, #0
 800e596:	f380 8814 	msr	CONTROL, r0
 800e59a:	b662      	cpsie	i
 800e59c:	b661      	cpsie	f
 800e59e:	f3bf 8f4f 	dsb	sy
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	df00      	svc	0
 800e5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e5aa:	bf00      	nop
 800e5ac:	e000ed08 	.word	0xe000ed08

0800e5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e5b6:	4b47      	ldr	r3, [pc, #284]	@ (800e6d4 <xPortStartScheduler+0x124>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a47      	ldr	r2, [pc, #284]	@ (800e6d8 <xPortStartScheduler+0x128>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d10b      	bne.n	800e5d8 <xPortStartScheduler+0x28>
	__asm volatile
 800e5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5c4:	f383 8811 	msr	BASEPRI, r3
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	613b      	str	r3, [r7, #16]
}
 800e5d2:	bf00      	nop
 800e5d4:	bf00      	nop
 800e5d6:	e7fd      	b.n	800e5d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e5d8:	4b3e      	ldr	r3, [pc, #248]	@ (800e6d4 <xPortStartScheduler+0x124>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a3f      	ldr	r2, [pc, #252]	@ (800e6dc <xPortStartScheduler+0x12c>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d10b      	bne.n	800e5fa <xPortStartScheduler+0x4a>
	__asm volatile
 800e5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e6:	f383 8811 	msr	BASEPRI, r3
 800e5ea:	f3bf 8f6f 	isb	sy
 800e5ee:	f3bf 8f4f 	dsb	sy
 800e5f2:	60fb      	str	r3, [r7, #12]
}
 800e5f4:	bf00      	nop
 800e5f6:	bf00      	nop
 800e5f8:	e7fd      	b.n	800e5f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e5fa:	4b39      	ldr	r3, [pc, #228]	@ (800e6e0 <xPortStartScheduler+0x130>)
 800e5fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	b2db      	uxtb	r3, r3
 800e604:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	22ff      	movs	r2, #255	@ 0xff
 800e60a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	b2db      	uxtb	r3, r3
 800e612:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e614:	78fb      	ldrb	r3, [r7, #3]
 800e616:	b2db      	uxtb	r3, r3
 800e618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e61c:	b2da      	uxtb	r2, r3
 800e61e:	4b31      	ldr	r3, [pc, #196]	@ (800e6e4 <xPortStartScheduler+0x134>)
 800e620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e622:	4b31      	ldr	r3, [pc, #196]	@ (800e6e8 <xPortStartScheduler+0x138>)
 800e624:	2207      	movs	r2, #7
 800e626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e628:	e009      	b.n	800e63e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e62a:	4b2f      	ldr	r3, [pc, #188]	@ (800e6e8 <xPortStartScheduler+0x138>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	3b01      	subs	r3, #1
 800e630:	4a2d      	ldr	r2, [pc, #180]	@ (800e6e8 <xPortStartScheduler+0x138>)
 800e632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e634:	78fb      	ldrb	r3, [r7, #3]
 800e636:	b2db      	uxtb	r3, r3
 800e638:	005b      	lsls	r3, r3, #1
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e63e:	78fb      	ldrb	r3, [r7, #3]
 800e640:	b2db      	uxtb	r3, r3
 800e642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e646:	2b80      	cmp	r3, #128	@ 0x80
 800e648:	d0ef      	beq.n	800e62a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e64a:	4b27      	ldr	r3, [pc, #156]	@ (800e6e8 <xPortStartScheduler+0x138>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f1c3 0307 	rsb	r3, r3, #7
 800e652:	2b04      	cmp	r3, #4
 800e654:	d00b      	beq.n	800e66e <xPortStartScheduler+0xbe>
	__asm volatile
 800e656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e65a:	f383 8811 	msr	BASEPRI, r3
 800e65e:	f3bf 8f6f 	isb	sy
 800e662:	f3bf 8f4f 	dsb	sy
 800e666:	60bb      	str	r3, [r7, #8]
}
 800e668:	bf00      	nop
 800e66a:	bf00      	nop
 800e66c:	e7fd      	b.n	800e66a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e66e:	4b1e      	ldr	r3, [pc, #120]	@ (800e6e8 <xPortStartScheduler+0x138>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	021b      	lsls	r3, r3, #8
 800e674:	4a1c      	ldr	r2, [pc, #112]	@ (800e6e8 <xPortStartScheduler+0x138>)
 800e676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e678:	4b1b      	ldr	r3, [pc, #108]	@ (800e6e8 <xPortStartScheduler+0x138>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e680:	4a19      	ldr	r2, [pc, #100]	@ (800e6e8 <xPortStartScheduler+0x138>)
 800e682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	b2da      	uxtb	r2, r3
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e68c:	4b17      	ldr	r3, [pc, #92]	@ (800e6ec <xPortStartScheduler+0x13c>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a16      	ldr	r2, [pc, #88]	@ (800e6ec <xPortStartScheduler+0x13c>)
 800e692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e698:	4b14      	ldr	r3, [pc, #80]	@ (800e6ec <xPortStartScheduler+0x13c>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a13      	ldr	r2, [pc, #76]	@ (800e6ec <xPortStartScheduler+0x13c>)
 800e69e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e6a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e6a4:	f000 f8da 	bl	800e85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e6a8:	4b11      	ldr	r3, [pc, #68]	@ (800e6f0 <xPortStartScheduler+0x140>)
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e6ae:	f000 f8f9 	bl	800e8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6b2:	4b10      	ldr	r3, [pc, #64]	@ (800e6f4 <xPortStartScheduler+0x144>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4a0f      	ldr	r2, [pc, #60]	@ (800e6f4 <xPortStartScheduler+0x144>)
 800e6b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e6bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e6be:	f7ff ff63 	bl	800e588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e6c2:	f7fe fe63 	bl	800d38c <vTaskSwitchContext>
	prvTaskExitError();
 800e6c6:	f7ff ff1b 	bl	800e500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e6ca:	2300      	movs	r3, #0
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3718      	adds	r7, #24
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	e000ed00 	.word	0xe000ed00
 800e6d8:	410fc271 	.word	0x410fc271
 800e6dc:	410fc270 	.word	0x410fc270
 800e6e0:	e000e400 	.word	0xe000e400
 800e6e4:	2000169c 	.word	0x2000169c
 800e6e8:	200016a0 	.word	0x200016a0
 800e6ec:	e000ed20 	.word	0xe000ed20
 800e6f0:	200000b0 	.word	0x200000b0
 800e6f4:	e000ef34 	.word	0xe000ef34

0800e6f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	607b      	str	r3, [r7, #4]
}
 800e710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e712:	4b10      	ldr	r3, [pc, #64]	@ (800e754 <vPortEnterCritical+0x5c>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	3301      	adds	r3, #1
 800e718:	4a0e      	ldr	r2, [pc, #56]	@ (800e754 <vPortEnterCritical+0x5c>)
 800e71a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e71c:	4b0d      	ldr	r3, [pc, #52]	@ (800e754 <vPortEnterCritical+0x5c>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2b01      	cmp	r3, #1
 800e722:	d110      	bne.n	800e746 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e724:	4b0c      	ldr	r3, [pc, #48]	@ (800e758 <vPortEnterCritical+0x60>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00b      	beq.n	800e746 <vPortEnterCritical+0x4e>
	__asm volatile
 800e72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	603b      	str	r3, [r7, #0]
}
 800e740:	bf00      	nop
 800e742:	bf00      	nop
 800e744:	e7fd      	b.n	800e742 <vPortEnterCritical+0x4a>
	}
}
 800e746:	bf00      	nop
 800e748:	370c      	adds	r7, #12
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	200000b0 	.word	0x200000b0
 800e758:	e000ed04 	.word	0xe000ed04

0800e75c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e762:	4b12      	ldr	r3, [pc, #72]	@ (800e7ac <vPortExitCritical+0x50>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d10b      	bne.n	800e782 <vPortExitCritical+0x26>
	__asm volatile
 800e76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e76e:	f383 8811 	msr	BASEPRI, r3
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	f3bf 8f4f 	dsb	sy
 800e77a:	607b      	str	r3, [r7, #4]
}
 800e77c:	bf00      	nop
 800e77e:	bf00      	nop
 800e780:	e7fd      	b.n	800e77e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e782:	4b0a      	ldr	r3, [pc, #40]	@ (800e7ac <vPortExitCritical+0x50>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	3b01      	subs	r3, #1
 800e788:	4a08      	ldr	r2, [pc, #32]	@ (800e7ac <vPortExitCritical+0x50>)
 800e78a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e78c:	4b07      	ldr	r3, [pc, #28]	@ (800e7ac <vPortExitCritical+0x50>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d105      	bne.n	800e7a0 <vPortExitCritical+0x44>
 800e794:	2300      	movs	r3, #0
 800e796:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	f383 8811 	msr	BASEPRI, r3
}
 800e79e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e7a0:	bf00      	nop
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr
 800e7ac:	200000b0 	.word	0x200000b0

0800e7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e7b0:	f3ef 8009 	mrs	r0, PSP
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	4b15      	ldr	r3, [pc, #84]	@ (800e810 <pxCurrentTCBConst>)
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	f01e 0f10 	tst.w	lr, #16
 800e7c0:	bf08      	it	eq
 800e7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ca:	6010      	str	r0, [r2, #0]
 800e7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e7d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e7d4:	f380 8811 	msr	BASEPRI, r0
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	f3bf 8f6f 	isb	sy
 800e7e0:	f7fe fdd4 	bl	800d38c <vTaskSwitchContext>
 800e7e4:	f04f 0000 	mov.w	r0, #0
 800e7e8:	f380 8811 	msr	BASEPRI, r0
 800e7ec:	bc09      	pop	{r0, r3}
 800e7ee:	6819      	ldr	r1, [r3, #0]
 800e7f0:	6808      	ldr	r0, [r1, #0]
 800e7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f6:	f01e 0f10 	tst.w	lr, #16
 800e7fa:	bf08      	it	eq
 800e7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e800:	f380 8809 	msr	PSP, r0
 800e804:	f3bf 8f6f 	isb	sy
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop
 800e80c:	f3af 8000 	nop.w

0800e810 <pxCurrentTCBConst>:
 800e810:	20001534 	.word	0x20001534
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e814:	bf00      	nop
 800e816:	bf00      	nop

0800e818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
	__asm volatile
 800e81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e822:	f383 8811 	msr	BASEPRI, r3
 800e826:	f3bf 8f6f 	isb	sy
 800e82a:	f3bf 8f4f 	dsb	sy
 800e82e:	607b      	str	r3, [r7, #4]
}
 800e830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e832:	f7fe fcf1 	bl	800d218 <xTaskIncrementTick>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d003      	beq.n	800e844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e83c:	4b06      	ldr	r3, [pc, #24]	@ (800e858 <xPortSysTickHandler+0x40>)
 800e83e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e842:	601a      	str	r2, [r3, #0]
 800e844:	2300      	movs	r3, #0
 800e846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	f383 8811 	msr	BASEPRI, r3
}
 800e84e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e850:	bf00      	nop
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	e000ed04 	.word	0xe000ed04

0800e85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e85c:	b480      	push	{r7}
 800e85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e860:	4b0b      	ldr	r3, [pc, #44]	@ (800e890 <vPortSetupTimerInterrupt+0x34>)
 800e862:	2200      	movs	r2, #0
 800e864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e866:	4b0b      	ldr	r3, [pc, #44]	@ (800e894 <vPortSetupTimerInterrupt+0x38>)
 800e868:	2200      	movs	r2, #0
 800e86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e86c:	4b0a      	ldr	r3, [pc, #40]	@ (800e898 <vPortSetupTimerInterrupt+0x3c>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a0a      	ldr	r2, [pc, #40]	@ (800e89c <vPortSetupTimerInterrupt+0x40>)
 800e872:	fba2 2303 	umull	r2, r3, r2, r3
 800e876:	099b      	lsrs	r3, r3, #6
 800e878:	4a09      	ldr	r2, [pc, #36]	@ (800e8a0 <vPortSetupTimerInterrupt+0x44>)
 800e87a:	3b01      	subs	r3, #1
 800e87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e87e:	4b04      	ldr	r3, [pc, #16]	@ (800e890 <vPortSetupTimerInterrupt+0x34>)
 800e880:	2207      	movs	r2, #7
 800e882:	601a      	str	r2, [r3, #0]
}
 800e884:	bf00      	nop
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	e000e010 	.word	0xe000e010
 800e894:	e000e018 	.word	0xe000e018
 800e898:	200000a4 	.word	0x200000a4
 800e89c:	10624dd3 	.word	0x10624dd3
 800e8a0:	e000e014 	.word	0xe000e014

0800e8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e8b4 <vPortEnableVFP+0x10>
 800e8a8:	6801      	ldr	r1, [r0, #0]
 800e8aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e8ae:	6001      	str	r1, [r0, #0]
 800e8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e8b2:	bf00      	nop
 800e8b4:	e000ed88 	.word	0xe000ed88

0800e8b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b085      	sub	sp, #20
 800e8bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e8be:	f3ef 8305 	mrs	r3, IPSR
 800e8c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2b0f      	cmp	r3, #15
 800e8c8:	d915      	bls.n	800e8f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e8ca:	4a18      	ldr	r2, [pc, #96]	@ (800e92c <vPortValidateInterruptPriority+0x74>)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e8d4:	4b16      	ldr	r3, [pc, #88]	@ (800e930 <vPortValidateInterruptPriority+0x78>)
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	7afa      	ldrb	r2, [r7, #11]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d20b      	bcs.n	800e8f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	607b      	str	r3, [r7, #4]
}
 800e8f0:	bf00      	nop
 800e8f2:	bf00      	nop
 800e8f4:	e7fd      	b.n	800e8f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e934 <vPortValidateInterruptPriority+0x7c>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800e938 <vPortValidateInterruptPriority+0x80>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	429a      	cmp	r2, r3
 800e904:	d90b      	bls.n	800e91e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e90a:	f383 8811 	msr	BASEPRI, r3
 800e90e:	f3bf 8f6f 	isb	sy
 800e912:	f3bf 8f4f 	dsb	sy
 800e916:	603b      	str	r3, [r7, #0]
}
 800e918:	bf00      	nop
 800e91a:	bf00      	nop
 800e91c:	e7fd      	b.n	800e91a <vPortValidateInterruptPriority+0x62>
	}
 800e91e:	bf00      	nop
 800e920:	3714      	adds	r7, #20
 800e922:	46bd      	mov	sp, r7
 800e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop
 800e92c:	e000e3f0 	.word	0xe000e3f0
 800e930:	2000169c 	.word	0x2000169c
 800e934:	e000ed0c 	.word	0xe000ed0c
 800e938:	200016a0 	.word	0x200016a0

0800e93c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b08a      	sub	sp, #40	@ 0x28
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e944:	2300      	movs	r3, #0
 800e946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e948:	f7fe fb98 	bl	800d07c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e94c:	4b5c      	ldr	r3, [pc, #368]	@ (800eac0 <pvPortMalloc+0x184>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d101      	bne.n	800e958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e954:	f000 f924 	bl	800eba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e958:	4b5a      	ldr	r3, [pc, #360]	@ (800eac4 <pvPortMalloc+0x188>)
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4013      	ands	r3, r2
 800e960:	2b00      	cmp	r3, #0
 800e962:	f040 8095 	bne.w	800ea90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d01e      	beq.n	800e9aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e96c:	2208      	movs	r2, #8
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4413      	add	r3, r2
 800e972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f003 0307 	and.w	r3, r3, #7
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d015      	beq.n	800e9aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f023 0307 	bic.w	r3, r3, #7
 800e984:	3308      	adds	r3, #8
 800e986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f003 0307 	and.w	r3, r3, #7
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00b      	beq.n	800e9aa <pvPortMalloc+0x6e>
	__asm volatile
 800e992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e996:	f383 8811 	msr	BASEPRI, r3
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	617b      	str	r3, [r7, #20]
}
 800e9a4:	bf00      	nop
 800e9a6:	bf00      	nop
 800e9a8:	e7fd      	b.n	800e9a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d06f      	beq.n	800ea90 <pvPortMalloc+0x154>
 800e9b0:	4b45      	ldr	r3, [pc, #276]	@ (800eac8 <pvPortMalloc+0x18c>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d86a      	bhi.n	800ea90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e9ba:	4b44      	ldr	r3, [pc, #272]	@ (800eacc <pvPortMalloc+0x190>)
 800e9bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e9be:	4b43      	ldr	r3, [pc, #268]	@ (800eacc <pvPortMalloc+0x190>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9c4:	e004      	b.n	800e9d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d903      	bls.n	800e9e2 <pvPortMalloc+0xa6>
 800e9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1f1      	bne.n	800e9c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e9e2:	4b37      	ldr	r3, [pc, #220]	@ (800eac0 <pvPortMalloc+0x184>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d051      	beq.n	800ea90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e9ec:	6a3b      	ldr	r3, [r7, #32]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2208      	movs	r2, #8
 800e9f2:	4413      	add	r3, r2
 800e9f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	6a3b      	ldr	r3, [r7, #32]
 800e9fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea00:	685a      	ldr	r2, [r3, #4]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	1ad2      	subs	r2, r2, r3
 800ea06:	2308      	movs	r3, #8
 800ea08:	005b      	lsls	r3, r3, #1
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d920      	bls.n	800ea50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	4413      	add	r3, r2
 800ea14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	f003 0307 	and.w	r3, r3, #7
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00b      	beq.n	800ea38 <pvPortMalloc+0xfc>
	__asm volatile
 800ea20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	613b      	str	r3, [r7, #16]
}
 800ea32:	bf00      	nop
 800ea34:	bf00      	nop
 800ea36:	e7fd      	b.n	800ea34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea3a:	685a      	ldr	r2, [r3, #4]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	1ad2      	subs	r2, r2, r3
 800ea40:	69bb      	ldr	r3, [r7, #24]
 800ea42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea4a:	69b8      	ldr	r0, [r7, #24]
 800ea4c:	f000 f90a 	bl	800ec64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea50:	4b1d      	ldr	r3, [pc, #116]	@ (800eac8 <pvPortMalloc+0x18c>)
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	1ad3      	subs	r3, r2, r3
 800ea5a:	4a1b      	ldr	r2, [pc, #108]	@ (800eac8 <pvPortMalloc+0x18c>)
 800ea5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea5e:	4b1a      	ldr	r3, [pc, #104]	@ (800eac8 <pvPortMalloc+0x18c>)
 800ea60:	681a      	ldr	r2, [r3, #0]
 800ea62:	4b1b      	ldr	r3, [pc, #108]	@ (800ead0 <pvPortMalloc+0x194>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d203      	bcs.n	800ea72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea6a:	4b17      	ldr	r3, [pc, #92]	@ (800eac8 <pvPortMalloc+0x18c>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4a18      	ldr	r2, [pc, #96]	@ (800ead0 <pvPortMalloc+0x194>)
 800ea70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea74:	685a      	ldr	r2, [r3, #4]
 800ea76:	4b13      	ldr	r3, [pc, #76]	@ (800eac4 <pvPortMalloc+0x188>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	431a      	orrs	r2, r3
 800ea7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea82:	2200      	movs	r2, #0
 800ea84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ea86:	4b13      	ldr	r3, [pc, #76]	@ (800ead4 <pvPortMalloc+0x198>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	4a11      	ldr	r2, [pc, #68]	@ (800ead4 <pvPortMalloc+0x198>)
 800ea8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea90:	f7fe fb02 	bl	800d098 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	f003 0307 	and.w	r3, r3, #7
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00b      	beq.n	800eab6 <pvPortMalloc+0x17a>
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	60fb      	str	r3, [r7, #12]
}
 800eab0:	bf00      	nop
 800eab2:	bf00      	nop
 800eab4:	e7fd      	b.n	800eab2 <pvPortMalloc+0x176>
	return pvReturn;
 800eab6:	69fb      	ldr	r3, [r7, #28]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3728      	adds	r7, #40	@ 0x28
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	2000a2ac 	.word	0x2000a2ac
 800eac4:	2000a2c0 	.word	0x2000a2c0
 800eac8:	2000a2b0 	.word	0x2000a2b0
 800eacc:	2000a2a4 	.word	0x2000a2a4
 800ead0:	2000a2b4 	.word	0x2000a2b4
 800ead4:	2000a2b8 	.word	0x2000a2b8

0800ead8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d04f      	beq.n	800eb8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eaea:	2308      	movs	r3, #8
 800eaec:	425b      	negs	r3, r3
 800eaee:	697a      	ldr	r2, [r7, #20]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	685a      	ldr	r2, [r3, #4]
 800eafc:	4b25      	ldr	r3, [pc, #148]	@ (800eb94 <vPortFree+0xbc>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4013      	ands	r3, r2
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d10b      	bne.n	800eb1e <vPortFree+0x46>
	__asm volatile
 800eb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb0a:	f383 8811 	msr	BASEPRI, r3
 800eb0e:	f3bf 8f6f 	isb	sy
 800eb12:	f3bf 8f4f 	dsb	sy
 800eb16:	60fb      	str	r3, [r7, #12]
}
 800eb18:	bf00      	nop
 800eb1a:	bf00      	nop
 800eb1c:	e7fd      	b.n	800eb1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00b      	beq.n	800eb3e <vPortFree+0x66>
	__asm volatile
 800eb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb2a:	f383 8811 	msr	BASEPRI, r3
 800eb2e:	f3bf 8f6f 	isb	sy
 800eb32:	f3bf 8f4f 	dsb	sy
 800eb36:	60bb      	str	r3, [r7, #8]
}
 800eb38:	bf00      	nop
 800eb3a:	bf00      	nop
 800eb3c:	e7fd      	b.n	800eb3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	685a      	ldr	r2, [r3, #4]
 800eb42:	4b14      	ldr	r3, [pc, #80]	@ (800eb94 <vPortFree+0xbc>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4013      	ands	r3, r2
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d01e      	beq.n	800eb8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d11a      	bne.n	800eb8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	685a      	ldr	r2, [r3, #4]
 800eb58:	4b0e      	ldr	r3, [pc, #56]	@ (800eb94 <vPortFree+0xbc>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	43db      	mvns	r3, r3
 800eb5e:	401a      	ands	r2, r3
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb64:	f7fe fa8a 	bl	800d07c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	4b0a      	ldr	r3, [pc, #40]	@ (800eb98 <vPortFree+0xc0>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4413      	add	r3, r2
 800eb72:	4a09      	ldr	r2, [pc, #36]	@ (800eb98 <vPortFree+0xc0>)
 800eb74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb76:	6938      	ldr	r0, [r7, #16]
 800eb78:	f000 f874 	bl	800ec64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eb7c:	4b07      	ldr	r3, [pc, #28]	@ (800eb9c <vPortFree+0xc4>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	3301      	adds	r3, #1
 800eb82:	4a06      	ldr	r2, [pc, #24]	@ (800eb9c <vPortFree+0xc4>)
 800eb84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eb86:	f7fe fa87 	bl	800d098 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb8a:	bf00      	nop
 800eb8c:	3718      	adds	r7, #24
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	2000a2c0 	.word	0x2000a2c0
 800eb98:	2000a2b0 	.word	0x2000a2b0
 800eb9c:	2000a2bc 	.word	0x2000a2bc

0800eba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eba6:	f44f 430c 	mov.w	r3, #35840	@ 0x8c00
 800ebaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ebac:	4b27      	ldr	r3, [pc, #156]	@ (800ec4c <prvHeapInit+0xac>)
 800ebae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f003 0307 	and.w	r3, r3, #7
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00c      	beq.n	800ebd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	3307      	adds	r3, #7
 800ebbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f023 0307 	bic.w	r3, r3, #7
 800ebc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ebc8:	68ba      	ldr	r2, [r7, #8]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	1ad3      	subs	r3, r2, r3
 800ebce:	4a1f      	ldr	r2, [pc, #124]	@ (800ec4c <prvHeapInit+0xac>)
 800ebd0:	4413      	add	r3, r2
 800ebd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ec50 <prvHeapInit+0xb0>)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ebde:	4b1c      	ldr	r3, [pc, #112]	@ (800ec50 <prvHeapInit+0xb0>)
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	68ba      	ldr	r2, [r7, #8]
 800ebe8:	4413      	add	r3, r2
 800ebea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ebec:	2208      	movs	r2, #8
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	1a9b      	subs	r3, r3, r2
 800ebf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f023 0307 	bic.w	r3, r3, #7
 800ebfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	4a15      	ldr	r2, [pc, #84]	@ (800ec54 <prvHeapInit+0xb4>)
 800ec00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec02:	4b14      	ldr	r3, [pc, #80]	@ (800ec54 <prvHeapInit+0xb4>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2200      	movs	r2, #0
 800ec08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec0a:	4b12      	ldr	r3, [pc, #72]	@ (800ec54 <prvHeapInit+0xb4>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	1ad2      	subs	r2, r2, r3
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec20:	4b0c      	ldr	r3, [pc, #48]	@ (800ec54 <prvHeapInit+0xb4>)
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ec58 <prvHeapInit+0xb8>)
 800ec2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	4a09      	ldr	r2, [pc, #36]	@ (800ec5c <prvHeapInit+0xbc>)
 800ec36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec38:	4b09      	ldr	r3, [pc, #36]	@ (800ec60 <prvHeapInit+0xc0>)
 800ec3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ec3e:	601a      	str	r2, [r3, #0]
}
 800ec40:	bf00      	nop
 800ec42:	3714      	adds	r7, #20
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr
 800ec4c:	200016a4 	.word	0x200016a4
 800ec50:	2000a2a4 	.word	0x2000a2a4
 800ec54:	2000a2ac 	.word	0x2000a2ac
 800ec58:	2000a2b4 	.word	0x2000a2b4
 800ec5c:	2000a2b0 	.word	0x2000a2b0
 800ec60:	2000a2c0 	.word	0x2000a2c0

0800ec64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec64:	b480      	push	{r7}
 800ec66:	b085      	sub	sp, #20
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec6c:	4b28      	ldr	r3, [pc, #160]	@ (800ed10 <prvInsertBlockIntoFreeList+0xac>)
 800ec6e:	60fb      	str	r3, [r7, #12]
 800ec70:	e002      	b.n	800ec78 <prvInsertBlockIntoFreeList+0x14>
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	60fb      	str	r3, [r7, #12]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d8f7      	bhi.n	800ec72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	68ba      	ldr	r2, [r7, #8]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	687a      	ldr	r2, [r7, #4]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d108      	bne.n	800eca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	685a      	ldr	r2, [r3, #4]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	441a      	add	r2, r3
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	68ba      	ldr	r2, [r7, #8]
 800ecb0:	441a      	add	r2, r3
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d118      	bne.n	800ecec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	4b15      	ldr	r3, [pc, #84]	@ (800ed14 <prvInsertBlockIntoFreeList+0xb0>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d00d      	beq.n	800ece2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	685a      	ldr	r2, [r3, #4]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	441a      	add	r2, r3
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	601a      	str	r2, [r3, #0]
 800ece0:	e008      	b.n	800ecf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ece2:	4b0c      	ldr	r3, [pc, #48]	@ (800ed14 <prvInsertBlockIntoFreeList+0xb0>)
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	601a      	str	r2, [r3, #0]
 800ecea:	e003      	b.n	800ecf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ecf4:	68fa      	ldr	r2, [r7, #12]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d002      	beq.n	800ed02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed02:	bf00      	nop
 800ed04:	3714      	adds	r7, #20
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr
 800ed0e:	bf00      	nop
 800ed10:	2000a2a4 	.word	0x2000a2a4
 800ed14:	2000a2ac 	.word	0x2000a2ac

0800ed18 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d007      	beq.n	800ed3c <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	68fa      	ldr	r2, [r7, #12]
 800ed32:	6852      	ldr	r2, [r2, #4]
 800ed34:	4610      	mov	r0, r2
 800ed36:	4798      	blx	r3
 800ed38:	4603      	mov	r3, r0
 800ed3a:	e006      	b.n	800ed4a <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	6852      	ldr	r2, [r2, #4]
 800ed44:	4610      	mov	r0, r2
 800ed46:	4798      	blx	r3
    return ERR_OK;
 800ed48:	2300      	movs	r3, #0
  }
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
	...

0800ed54 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b08e      	sub	sp, #56	@ 0x38
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800ed6c:	f107 0314 	add.w	r3, r7, #20
 800ed70:	4619      	mov	r1, r3
 800ed72:	4806      	ldr	r0, [pc, #24]	@ (800ed8c <netifapi_netif_common+0x38>)
 800ed74:	f000 f99a 	bl	800f0ac <tcpip_api_call>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800ed7e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3738      	adds	r7, #56	@ 0x38
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	0800ed19 	.word	0x0800ed19

0800ed90 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ed9a:	f007 fd37 	bl	801680c <sys_timeouts_sleeptime>
 800ed9e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda6:	d10b      	bne.n	800edc0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800eda8:	4813      	ldr	r0, [pc, #76]	@ (800edf8 <tcpip_timeouts_mbox_fetch+0x68>)
 800edaa:	f00c fe5e 	bl	801ba6a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800edae:	2200      	movs	r2, #0
 800edb0:	6839      	ldr	r1, [r7, #0]
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f00c fdd2 	bl	801b95c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800edb8:	480f      	ldr	r0, [pc, #60]	@ (800edf8 <tcpip_timeouts_mbox_fetch+0x68>)
 800edba:	f00c fe47 	bl	801ba4c <sys_mutex_lock>
    return;
 800edbe:	e018      	b.n	800edf2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d102      	bne.n	800edcc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800edc6:	f007 fce7 	bl	8016798 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800edca:	e7e6      	b.n	800ed9a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800edcc:	480a      	ldr	r0, [pc, #40]	@ (800edf8 <tcpip_timeouts_mbox_fetch+0x68>)
 800edce:	f00c fe4c 	bl	801ba6a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	6839      	ldr	r1, [r7, #0]
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f00c fdc0 	bl	801b95c <sys_arch_mbox_fetch>
 800eddc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800edde:	4806      	ldr	r0, [pc, #24]	@ (800edf8 <tcpip_timeouts_mbox_fetch+0x68>)
 800ede0:	f00c fe34 	bl	801ba4c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edea:	d102      	bne.n	800edf2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800edec:	f007 fcd4 	bl	8016798 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800edf0:	e7d3      	b.n	800ed9a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	2000a2d0 	.word	0x2000a2d0

0800edfc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ee04:	4810      	ldr	r0, [pc, #64]	@ (800ee48 <tcpip_thread+0x4c>)
 800ee06:	f00c fe21 	bl	801ba4c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ee0a:	4b10      	ldr	r3, [pc, #64]	@ (800ee4c <tcpip_thread+0x50>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d005      	beq.n	800ee1e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ee12:	4b0e      	ldr	r3, [pc, #56]	@ (800ee4c <tcpip_thread+0x50>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a0e      	ldr	r2, [pc, #56]	@ (800ee50 <tcpip_thread+0x54>)
 800ee18:	6812      	ldr	r2, [r2, #0]
 800ee1a:	4610      	mov	r0, r2
 800ee1c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ee1e:	f107 030c 	add.w	r3, r7, #12
 800ee22:	4619      	mov	r1, r3
 800ee24:	480b      	ldr	r0, [pc, #44]	@ (800ee54 <tcpip_thread+0x58>)
 800ee26:	f7ff ffb3 	bl	800ed90 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d106      	bne.n	800ee3e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ee30:	4b09      	ldr	r3, [pc, #36]	@ (800ee58 <tcpip_thread+0x5c>)
 800ee32:	2291      	movs	r2, #145	@ 0x91
 800ee34:	4909      	ldr	r1, [pc, #36]	@ (800ee5c <tcpip_thread+0x60>)
 800ee36:	480a      	ldr	r0, [pc, #40]	@ (800ee60 <tcpip_thread+0x64>)
 800ee38:	f00d fcfa 	bl	801c830 <iprintf>
      continue;
 800ee3c:	e003      	b.n	800ee46 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f000 f80f 	bl	800ee64 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ee46:	e7ea      	b.n	800ee1e <tcpip_thread+0x22>
 800ee48:	2000a2d0 	.word	0x2000a2d0
 800ee4c:	2000a2c4 	.word	0x2000a2c4
 800ee50:	2000a2c8 	.word	0x2000a2c8
 800ee54:	2000a2cc 	.word	0x2000a2cc
 800ee58:	0801f48c 	.word	0x0801f48c
 800ee5c:	0801f4bc 	.word	0x0801f4bc
 800ee60:	0801f4dc 	.word	0x0801f4dc

0800ee64 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	d026      	beq.n	800eec2 <tcpip_thread_handle_msg+0x5e>
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	dc2b      	bgt.n	800eed0 <tcpip_thread_handle_msg+0x6c>
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d002      	beq.n	800ee82 <tcpip_thread_handle_msg+0x1e>
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d015      	beq.n	800eeac <tcpip_thread_handle_msg+0x48>
 800ee80:	e026      	b.n	800eed0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	68db      	ldr	r3, [r3, #12]
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	6850      	ldr	r0, [r2, #4]
 800ee8a:	687a      	ldr	r2, [r7, #4]
 800ee8c:	6892      	ldr	r2, [r2, #8]
 800ee8e:	4611      	mov	r1, r2
 800ee90:	4798      	blx	r3
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d004      	beq.n	800eea2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f001 fe89 	bl	8010bb4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800eea2:	6879      	ldr	r1, [r7, #4]
 800eea4:	2009      	movs	r0, #9
 800eea6:	f000 ffe3 	bl	800fe70 <memp_free>
      break;
 800eeaa:	e018      	b.n	800eede <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	6892      	ldr	r2, [r2, #8]
 800eeb4:	4610      	mov	r0, r2
 800eeb6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800eeb8:	6879      	ldr	r1, [r7, #4]
 800eeba:	2008      	movs	r0, #8
 800eebc:	f000 ffd8 	bl	800fe70 <memp_free>
      break;
 800eec0:	e00d      	b.n	800eede <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	6892      	ldr	r2, [r2, #8]
 800eeca:	4610      	mov	r0, r2
 800eecc:	4798      	blx	r3
      break;
 800eece:	e006      	b.n	800eede <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800eed0:	4b05      	ldr	r3, [pc, #20]	@ (800eee8 <tcpip_thread_handle_msg+0x84>)
 800eed2:	22cf      	movs	r2, #207	@ 0xcf
 800eed4:	4905      	ldr	r1, [pc, #20]	@ (800eeec <tcpip_thread_handle_msg+0x88>)
 800eed6:	4806      	ldr	r0, [pc, #24]	@ (800eef0 <tcpip_thread_handle_msg+0x8c>)
 800eed8:	f00d fcaa 	bl	801c830 <iprintf>
      break;
 800eedc:	bf00      	nop
  }
}
 800eede:	bf00      	nop
 800eee0:	3708      	adds	r7, #8
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	0801f48c 	.word	0x0801f48c
 800eeec:	0801f4bc 	.word	0x0801f4bc
 800eef0:	0801f4dc 	.word	0x0801f4dc

0800eef4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b086      	sub	sp, #24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ef00:	481a      	ldr	r0, [pc, #104]	@ (800ef6c <tcpip_inpkt+0x78>)
 800ef02:	f00c fd6a 	bl	801b9da <sys_mbox_valid>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d105      	bne.n	800ef18 <tcpip_inpkt+0x24>
 800ef0c:	4b18      	ldr	r3, [pc, #96]	@ (800ef70 <tcpip_inpkt+0x7c>)
 800ef0e:	22fc      	movs	r2, #252	@ 0xfc
 800ef10:	4918      	ldr	r1, [pc, #96]	@ (800ef74 <tcpip_inpkt+0x80>)
 800ef12:	4819      	ldr	r0, [pc, #100]	@ (800ef78 <tcpip_inpkt+0x84>)
 800ef14:	f00d fc8c 	bl	801c830 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ef18:	2009      	movs	r0, #9
 800ef1a:	f000 ff57 	bl	800fdcc <memp_malloc>
 800ef1e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d102      	bne.n	800ef2c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ef26:	f04f 33ff 	mov.w	r3, #4294967295
 800ef2a:	e01a      	b.n	800ef62 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	68ba      	ldr	r2, [r7, #8]
 800ef3c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ef44:	6979      	ldr	r1, [r7, #20]
 800ef46:	4809      	ldr	r0, [pc, #36]	@ (800ef6c <tcpip_inpkt+0x78>)
 800ef48:	f00c fcee 	bl	801b928 <sys_mbox_trypost>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d006      	beq.n	800ef60 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ef52:	6979      	ldr	r1, [r7, #20]
 800ef54:	2009      	movs	r0, #9
 800ef56:	f000 ff8b 	bl	800fe70 <memp_free>
    return ERR_MEM;
 800ef5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef5e:	e000      	b.n	800ef62 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ef60:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3718      	adds	r7, #24
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	2000a2cc 	.word	0x2000a2cc
 800ef70:	0801f48c 	.word	0x0801f48c
 800ef74:	0801f504 	.word	0x0801f504
 800ef78:	0801f4dc 	.word	0x0801f4dc

0800ef7c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ef8c:	f003 0318 	and.w	r3, r3, #24
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d006      	beq.n	800efa2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ef94:	4a08      	ldr	r2, [pc, #32]	@ (800efb8 <tcpip_input+0x3c>)
 800ef96:	6839      	ldr	r1, [r7, #0]
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f7ff ffab 	bl	800eef4 <tcpip_inpkt>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	e005      	b.n	800efae <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800efa2:	4a06      	ldr	r2, [pc, #24]	@ (800efbc <tcpip_input+0x40>)
 800efa4:	6839      	ldr	r1, [r7, #0]
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7ff ffa4 	bl	800eef4 <tcpip_inpkt>
 800efac:	4603      	mov	r3, r0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	0801b715 	.word	0x0801b715
 800efbc:	0801a4dd 	.word	0x0801a4dd

0800efc0 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
 tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800efca:	4814      	ldr	r0, [pc, #80]	@ (800f01c <tcpip_callback+0x5c>)
 800efcc:	f00c fd05 	bl	801b9da <sys_mbox_valid>
 800efd0:	4603      	mov	r3, r0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d106      	bne.n	800efe4 <tcpip_callback+0x24>
 800efd6:	4b12      	ldr	r3, [pc, #72]	@ (800f020 <tcpip_callback+0x60>)
 800efd8:	f240 1239 	movw	r2, #313	@ 0x139
 800efdc:	4911      	ldr	r1, [pc, #68]	@ (800f024 <tcpip_callback+0x64>)
 800efde:	4812      	ldr	r0, [pc, #72]	@ (800f028 <tcpip_callback+0x68>)
 800efe0:	f00d fc26 	bl	801c830 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800efe4:	2008      	movs	r0, #8
 800efe6:	f000 fef1 	bl	800fdcc <memp_malloc>
 800efea:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d102      	bne.n	800eff8 <tcpip_callback+0x38>
    return ERR_MEM;
 800eff2:	f04f 33ff 	mov.w	r3, #4294967295
 800eff6:	e00d      	b.n	800f014 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2201      	movs	r2, #1
 800effc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	683a      	ldr	r2, [r7, #0]
 800f008:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800f00a:	68f9      	ldr	r1, [r7, #12]
 800f00c:	4803      	ldr	r0, [pc, #12]	@ (800f01c <tcpip_callback+0x5c>)
 800f00e:	f00c fc75 	bl	801b8fc <sys_mbox_post>
  return ERR_OK;
 800f012:	2300      	movs	r3, #0
}
 800f014:	4618      	mov	r0, r3
 800f016:	3710      	adds	r7, #16
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	2000a2cc 	.word	0x2000a2cc
 800f020:	0801f48c 	.word	0x0801f48c
 800f024:	0801f504 	.word	0x0801f504
 800f028:	0801f4dc 	.word	0x0801f4dc

0800f02c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f036:	4819      	ldr	r0, [pc, #100]	@ (800f09c <tcpip_try_callback+0x70>)
 800f038:	f00c fccf 	bl	801b9da <sys_mbox_valid>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d106      	bne.n	800f050 <tcpip_try_callback+0x24>
 800f042:	4b17      	ldr	r3, [pc, #92]	@ (800f0a0 <tcpip_try_callback+0x74>)
 800f044:	f240 125d 	movw	r2, #349	@ 0x15d
 800f048:	4916      	ldr	r1, [pc, #88]	@ (800f0a4 <tcpip_try_callback+0x78>)
 800f04a:	4817      	ldr	r0, [pc, #92]	@ (800f0a8 <tcpip_try_callback+0x7c>)
 800f04c:	f00d fbf0 	bl	801c830 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f050:	2008      	movs	r0, #8
 800f052:	f000 febb 	bl	800fdcc <memp_malloc>
 800f056:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d102      	bne.n	800f064 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f05e:	f04f 33ff 	mov.w	r3, #4294967295
 800f062:	e017      	b.n	800f094 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2201      	movs	r2, #1
 800f068:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	683a      	ldr	r2, [r7, #0]
 800f074:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f076:	68f9      	ldr	r1, [r7, #12]
 800f078:	4808      	ldr	r0, [pc, #32]	@ (800f09c <tcpip_try_callback+0x70>)
 800f07a:	f00c fc55 	bl	801b928 <sys_mbox_trypost>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d006      	beq.n	800f092 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f084:	68f9      	ldr	r1, [r7, #12]
 800f086:	2008      	movs	r0, #8
 800f088:	f000 fef2 	bl	800fe70 <memp_free>
    return ERR_MEM;
 800f08c:	f04f 33ff 	mov.w	r3, #4294967295
 800f090:	e000      	b.n	800f094 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f092:	2300      	movs	r3, #0
}
 800f094:	4618      	mov	r0, r3
 800f096:	3710      	adds	r7, #16
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}
 800f09c:	2000a2cc 	.word	0x2000a2cc
 800f0a0:	0801f48c 	.word	0x0801f48c
 800f0a4:	0801f504 	.word	0x0801f504
 800f0a8:	0801f4dc 	.word	0x0801f4dc

0800f0ac <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800f0b6:	4808      	ldr	r0, [pc, #32]	@ (800f0d8 <tcpip_api_call+0x2c>)
 800f0b8:	f00c fcc8 	bl	801ba4c <sys_mutex_lock>
  err = fn(call);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6838      	ldr	r0, [r7, #0]
 800f0c0:	4798      	blx	r3
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 800f0c6:	4804      	ldr	r0, [pc, #16]	@ (800f0d8 <tcpip_api_call+0x2c>)
 800f0c8:	f00c fccf 	bl	801ba6a <sys_mutex_unlock>
  return err;
 800f0cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3710      	adds	r7, #16
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	2000a2d0 	.word	0x2000a2d0

0800f0dc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af02      	add	r7, sp, #8
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f0e6:	f000 f9ea 	bl	800f4be <lwip_init>

  tcpip_init_done = initfunc;
 800f0ea:	4a17      	ldr	r2, [pc, #92]	@ (800f148 <tcpip_init+0x6c>)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f0f0:	4a16      	ldr	r2, [pc, #88]	@ (800f14c <tcpip_init+0x70>)
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f0f6:	210a      	movs	r1, #10
 800f0f8:	4815      	ldr	r0, [pc, #84]	@ (800f150 <tcpip_init+0x74>)
 800f0fa:	f00c fbe1 	bl	801b8c0 <sys_mbox_new>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d006      	beq.n	800f112 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f104:	4b13      	ldr	r3, [pc, #76]	@ (800f154 <tcpip_init+0x78>)
 800f106:	f240 2261 	movw	r2, #609	@ 0x261
 800f10a:	4913      	ldr	r1, [pc, #76]	@ (800f158 <tcpip_init+0x7c>)
 800f10c:	4813      	ldr	r0, [pc, #76]	@ (800f15c <tcpip_init+0x80>)
 800f10e:	f00d fb8f 	bl	801c830 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f112:	4813      	ldr	r0, [pc, #76]	@ (800f160 <tcpip_init+0x84>)
 800f114:	f00c fc80 	bl	801ba18 <sys_mutex_new>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d006      	beq.n	800f12c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f11e:	4b0d      	ldr	r3, [pc, #52]	@ (800f154 <tcpip_init+0x78>)
 800f120:	f240 2265 	movw	r2, #613	@ 0x265
 800f124:	490f      	ldr	r1, [pc, #60]	@ (800f164 <tcpip_init+0x88>)
 800f126:	480d      	ldr	r0, [pc, #52]	@ (800f15c <tcpip_init+0x80>)
 800f128:	f00d fb82 	bl	801c830 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f12c:	f04f 33ff 	mov.w	r3, #4294967295
 800f130:	9300      	str	r3, [sp, #0]
 800f132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f136:	2200      	movs	r2, #0
 800f138:	490b      	ldr	r1, [pc, #44]	@ (800f168 <tcpip_init+0x8c>)
 800f13a:	480c      	ldr	r0, [pc, #48]	@ (800f16c <tcpip_init+0x90>)
 800f13c:	f00c fca2 	bl	801ba84 <sys_thread_new>
}
 800f140:	bf00      	nop
 800f142:	3708      	adds	r7, #8
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}
 800f148:	2000a2c4 	.word	0x2000a2c4
 800f14c:	2000a2c8 	.word	0x2000a2c8
 800f150:	2000a2cc 	.word	0x2000a2cc
 800f154:	0801f48c 	.word	0x0801f48c
 800f158:	0801f514 	.word	0x0801f514
 800f15c:	0801f4dc 	.word	0x0801f4dc
 800f160:	2000a2d0 	.word	0x2000a2d0
 800f164:	0801f538 	.word	0x0801f538
 800f168:	0800edfd 	.word	0x0800edfd
 800f16c:	0801f55c 	.word	0x0801f55c

0800f170 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	4603      	mov	r3, r0
 800f178:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f17a:	88fb      	ldrh	r3, [r7, #6]
 800f17c:	021b      	lsls	r3, r3, #8
 800f17e:	b21a      	sxth	r2, r3
 800f180:	88fb      	ldrh	r3, [r7, #6]
 800f182:	0a1b      	lsrs	r3, r3, #8
 800f184:	b29b      	uxth	r3, r3
 800f186:	b21b      	sxth	r3, r3
 800f188:	4313      	orrs	r3, r2
 800f18a:	b21b      	sxth	r3, r3
 800f18c:	b29b      	uxth	r3, r3
}
 800f18e:	4618      	mov	r0, r3
 800f190:	370c      	adds	r7, #12
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr

0800f19a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f19a:	b480      	push	{r7}
 800f19c:	b083      	sub	sp, #12
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	061a      	lsls	r2, r3, #24
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	021b      	lsls	r3, r3, #8
 800f1aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f1ae:	431a      	orrs	r2, r3
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	0a1b      	lsrs	r3, r3, #8
 800f1b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f1b8:	431a      	orrs	r2, r3
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	0e1b      	lsrs	r3, r3, #24
 800f1be:	4313      	orrs	r3, r2
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	370c      	adds	r7, #12
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ca:	4770      	bx	lr

0800f1cc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b089      	sub	sp, #36	@ 0x24
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	f003 0301 	and.w	r3, r3, #1
 800f1e8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00d      	beq.n	800f20c <lwip_standard_chksum+0x40>
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	dd0a      	ble.n	800f20c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800f1f6:	69fa      	ldr	r2, [r7, #28]
 800f1f8:	1c53      	adds	r3, r2, #1
 800f1fa:	61fb      	str	r3, [r7, #28]
 800f1fc:	f107 030e 	add.w	r3, r7, #14
 800f200:	3301      	adds	r3, #1
 800f202:	7812      	ldrb	r2, [r2, #0]
 800f204:	701a      	strb	r2, [r3, #0]
    len--;
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	3b01      	subs	r3, #1
 800f20a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800f210:	e00a      	b.n	800f228 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	1c9a      	adds	r2, r3, #2
 800f216:	61ba      	str	r2, [r7, #24]
 800f218:	881b      	ldrh	r3, [r3, #0]
 800f21a:	461a      	mov	r2, r3
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	4413      	add	r3, r2
 800f220:	617b      	str	r3, [r7, #20]
    len -= 2;
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	3b02      	subs	r3, #2
 800f226:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	dcf1      	bgt.n	800f212 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	dd04      	ble.n	800f23e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f234:	f107 030e 	add.w	r3, r7, #14
 800f238:	69ba      	ldr	r2, [r7, #24]
 800f23a:	7812      	ldrb	r2, [r2, #0]
 800f23c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800f23e:	89fb      	ldrh	r3, [r7, #14]
 800f240:	461a      	mov	r2, r3
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	4413      	add	r3, r2
 800f246:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	0c1a      	lsrs	r2, r3, #16
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	b29b      	uxth	r3, r3
 800f250:	4413      	add	r3, r2
 800f252:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	0c1a      	lsrs	r2, r3, #16
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	4413      	add	r3, r2
 800f25e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d007      	beq.n	800f276 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	021b      	lsls	r3, r3, #8
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	0a1b      	lsrs	r3, r3, #8
 800f270:	b2db      	uxtb	r3, r3
 800f272:	4313      	orrs	r3, r2
 800f274:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	b29b      	uxth	r3, r3
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3724      	adds	r7, #36	@ 0x24
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr

0800f286 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800f286:	b580      	push	{r7, lr}
 800f288:	b086      	sub	sp, #24
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	60f8      	str	r0, [r7, #12]
 800f28e:	607b      	str	r3, [r7, #4]
 800f290:	460b      	mov	r3, r1
 800f292:	72fb      	strb	r3, [r7, #11]
 800f294:	4613      	mov	r3, r2
 800f296:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800f298:	2300      	movs	r3, #0
 800f29a:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	617b      	str	r3, [r7, #20]
 800f2a0:	e02b      	b.n	800f2fa <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	685a      	ldr	r2, [r3, #4]
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	895b      	ldrh	r3, [r3, #10]
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	4610      	mov	r0, r2
 800f2ae:	f7ff ff8d 	bl	800f1cc <lwip_standard_chksum>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4413      	add	r3, r2
 800f2ba:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	0c1a      	lsrs	r2, r3, #16
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	4413      	add	r3, r2
 800f2c6:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	895b      	ldrh	r3, [r3, #10]
 800f2cc:	f003 0301 	and.w	r3, r3, #1
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d00e      	beq.n	800f2f4 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	bf0c      	ite	eq
 800f2dc:	2301      	moveq	r3, #1
 800f2de:	2300      	movne	r3, #0
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	021b      	lsls	r3, r3, #8
 800f2e8:	b29a      	uxth	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	0a1b      	lsrs	r3, r3, #8
 800f2ee:	b2db      	uxtb	r3, r3
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	617b      	str	r3, [r7, #20]
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d1d0      	bne.n	800f2a2 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d007      	beq.n	800f316 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	021b      	lsls	r3, r3, #8
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	0a1b      	lsrs	r3, r3, #8
 800f310:	b2db      	uxtb	r3, r3
 800f312:	4313      	orrs	r3, r2
 800f314:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800f316:	7afb      	ldrb	r3, [r7, #11]
 800f318:	b29b      	uxth	r3, r3
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7ff ff28 	bl	800f170 <lwip_htons>
 800f320:	4603      	mov	r3, r0
 800f322:	461a      	mov	r2, r3
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4413      	add	r3, r2
 800f328:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800f32a:	893b      	ldrh	r3, [r7, #8]
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7ff ff1f 	bl	800f170 <lwip_htons>
 800f332:	4603      	mov	r3, r0
 800f334:	461a      	mov	r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4413      	add	r3, r2
 800f33a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	0c1a      	lsrs	r2, r3, #16
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	b29b      	uxth	r3, r3
 800f344:	4413      	add	r3, r2
 800f346:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	0c1a      	lsrs	r2, r3, #16
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4413      	add	r3, r2
 800f352:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	b29b      	uxth	r3, r3
 800f358:	43db      	mvns	r3, r3
 800f35a:	b29b      	uxth	r3, r3
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3718      	adds	r7, #24
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	607b      	str	r3, [r7, #4]
 800f36e:	460b      	mov	r3, r1
 800f370:	72fb      	strb	r3, [r7, #11]
 800f372:	4613      	mov	r3, r2
 800f374:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	b29b      	uxth	r3, r3
 800f380:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	0c1b      	lsrs	r3, r3, #16
 800f386:	693a      	ldr	r2, [r7, #16]
 800f388:	4413      	add	r3, r2
 800f38a:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800f38c:	6a3b      	ldr	r3, [r7, #32]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	b29b      	uxth	r3, r3
 800f396:	693a      	ldr	r2, [r7, #16]
 800f398:	4413      	add	r3, r2
 800f39a:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	0c1b      	lsrs	r3, r3, #16
 800f3a0:	693a      	ldr	r2, [r7, #16]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	0c1a      	lsrs	r2, r3, #16
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	4413      	add	r3, r2
 800f3b0:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	0c1a      	lsrs	r2, r3, #16
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	4413      	add	r3, r2
 800f3bc:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800f3be:	893a      	ldrh	r2, [r7, #8]
 800f3c0:	7af9      	ldrb	r1, [r7, #11]
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	68f8      	ldr	r0, [r7, #12]
 800f3c6:	f7ff ff5e 	bl	800f286 <inet_cksum_pseudo_base>
 800f3ca:	4603      	mov	r3, r0
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3718      	adds	r7, #24
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b086      	sub	sp, #24
 800f3d8:	af02      	add	r7, sp, #8
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	607b      	str	r3, [r7, #4]
 800f3de:	460b      	mov	r3, r1
 800f3e0:	72fb      	strb	r3, [r7, #11]
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800f3e6:	893a      	ldrh	r2, [r7, #8]
 800f3e8:	7af9      	ldrb	r1, [r7, #11]
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f7ff ffb7 	bl	800f364 <inet_chksum_pseudo>
 800f3f6:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3710      	adds	r7, #16
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	460b      	mov	r3, r1
 800f40a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f40c:	887b      	ldrh	r3, [r7, #2]
 800f40e:	4619      	mov	r1, r3
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7ff fedb 	bl	800f1cc <lwip_standard_chksum>
 800f416:	4603      	mov	r3, r0
 800f418:	43db      	mvns	r3, r3
 800f41a:	b29b      	uxth	r3, r3
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3708      	adds	r7, #8
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b086      	sub	sp, #24
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800f42c:	2300      	movs	r3, #0
 800f42e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800f430:	2300      	movs	r3, #0
 800f432:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	613b      	str	r3, [r7, #16]
 800f438:	e02b      	b.n	800f492 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	685a      	ldr	r2, [r3, #4]
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	895b      	ldrh	r3, [r3, #10]
 800f442:	4619      	mov	r1, r3
 800f444:	4610      	mov	r0, r2
 800f446:	f7ff fec1 	bl	800f1cc <lwip_standard_chksum>
 800f44a:	4603      	mov	r3, r0
 800f44c:	461a      	mov	r2, r3
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	4413      	add	r3, r2
 800f452:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	0c1a      	lsrs	r2, r3, #16
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	4413      	add	r3, r2
 800f45e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	895b      	ldrh	r3, [r3, #10]
 800f464:	f003 0301 	and.w	r3, r3, #1
 800f468:	b29b      	uxth	r3, r3
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d00e      	beq.n	800f48c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	bf0c      	ite	eq
 800f474:	2301      	moveq	r3, #1
 800f476:	2300      	movne	r3, #0
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	021b      	lsls	r3, r3, #8
 800f480:	b29a      	uxth	r2, r3
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	0a1b      	lsrs	r3, r3, #8
 800f486:	b2db      	uxtb	r3, r3
 800f488:	4313      	orrs	r3, r2
 800f48a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	613b      	str	r3, [r7, #16]
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d1d0      	bne.n	800f43a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d007      	beq.n	800f4ae <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	021b      	lsls	r3, r3, #8
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	0a1b      	lsrs	r3, r3, #8
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	43db      	mvns	r3, r3
 800f4b4:	b29b      	uxth	r3, r3
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b082      	sub	sp, #8
 800f4c2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f4c8:	f00c fa98 	bl	801b9fc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f4cc:	f000 f8d4 	bl	800f678 <mem_init>
  memp_init();
 800f4d0:	f000 fc30 	bl	800fd34 <memp_init>
  pbuf_init();
  netif_init();
 800f4d4:	f000 fcf6 	bl	800fec4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f4d8:	f007 f9d0 	bl	801687c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f4dc:	f001 feac 	bl	8011238 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f4e0:	f007 f912 	bl	8016708 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f4e4:	bf00      	nop
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f4f6:	4b05      	ldr	r3, [pc, #20]	@ (800f50c <ptr_to_mem+0x20>)
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	88fb      	ldrh	r3, [r7, #6]
 800f4fc:	4413      	add	r3, r2
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	370c      	adds	r7, #12
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr
 800f50a:	bf00      	nop
 800f50c:	2000f300 	.word	0x2000f300

0800f510 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f510:	b480      	push	{r7}
 800f512:	b083      	sub	sp, #12
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f518:	4b05      	ldr	r3, [pc, #20]	@ (800f530 <mem_to_ptr+0x20>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	b29b      	uxth	r3, r3
}
 800f522:	4618      	mov	r0, r3
 800f524:	370c      	adds	r7, #12
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop
 800f530:	2000f300 	.word	0x2000f300

0800f534 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f534:	b590      	push	{r4, r7, lr}
 800f536:	b085      	sub	sp, #20
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f53c:	4b45      	ldr	r3, [pc, #276]	@ (800f654 <plug_holes+0x120>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	429a      	cmp	r2, r3
 800f544:	d206      	bcs.n	800f554 <plug_holes+0x20>
 800f546:	4b44      	ldr	r3, [pc, #272]	@ (800f658 <plug_holes+0x124>)
 800f548:	f240 12df 	movw	r2, #479	@ 0x1df
 800f54c:	4943      	ldr	r1, [pc, #268]	@ (800f65c <plug_holes+0x128>)
 800f54e:	4844      	ldr	r0, [pc, #272]	@ (800f660 <plug_holes+0x12c>)
 800f550:	f00d f96e 	bl	801c830 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f554:	4b43      	ldr	r3, [pc, #268]	@ (800f664 <plug_holes+0x130>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d306      	bcc.n	800f56c <plug_holes+0x38>
 800f55e:	4b3e      	ldr	r3, [pc, #248]	@ (800f658 <plug_holes+0x124>)
 800f560:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f564:	4940      	ldr	r1, [pc, #256]	@ (800f668 <plug_holes+0x134>)
 800f566:	483e      	ldr	r0, [pc, #248]	@ (800f660 <plug_holes+0x12c>)
 800f568:	f00d f962 	bl	801c830 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	791b      	ldrb	r3, [r3, #4]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d006      	beq.n	800f582 <plug_holes+0x4e>
 800f574:	4b38      	ldr	r3, [pc, #224]	@ (800f658 <plug_holes+0x124>)
 800f576:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800f57a:	493c      	ldr	r1, [pc, #240]	@ (800f66c <plug_holes+0x138>)
 800f57c:	4838      	ldr	r0, [pc, #224]	@ (800f660 <plug_holes+0x12c>)
 800f57e:	f00d f957 	bl	801c830 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	881b      	ldrh	r3, [r3, #0]
 800f586:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f58a:	d906      	bls.n	800f59a <plug_holes+0x66>
 800f58c:	4b32      	ldr	r3, [pc, #200]	@ (800f658 <plug_holes+0x124>)
 800f58e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800f592:	4937      	ldr	r1, [pc, #220]	@ (800f670 <plug_holes+0x13c>)
 800f594:	4832      	ldr	r0, [pc, #200]	@ (800f660 <plug_holes+0x12c>)
 800f596:	f00d f94b 	bl	801c830 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	881b      	ldrh	r3, [r3, #0]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7ff ffa4 	bl	800f4ec <ptr_to_mem>
 800f5a4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d024      	beq.n	800f5f8 <plug_holes+0xc4>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	791b      	ldrb	r3, [r3, #4]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d120      	bne.n	800f5f8 <plug_holes+0xc4>
 800f5b6:	4b2b      	ldr	r3, [pc, #172]	@ (800f664 <plug_holes+0x130>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	68fa      	ldr	r2, [r7, #12]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d01b      	beq.n	800f5f8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f5c0:	4b2c      	ldr	r3, [pc, #176]	@ (800f674 <plug_holes+0x140>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d102      	bne.n	800f5d0 <plug_holes+0x9c>
      lfree = mem;
 800f5ca:	4a2a      	ldr	r2, [pc, #168]	@ (800f674 <plug_holes+0x140>)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	881a      	ldrh	r2, [r3, #0]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	881b      	ldrh	r3, [r3, #0]
 800f5dc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f5e0:	d00a      	beq.n	800f5f8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	881b      	ldrh	r3, [r3, #0]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7ff ff80 	bl	800f4ec <ptr_to_mem>
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7ff ff8e 	bl	800f510 <mem_to_ptr>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	885b      	ldrh	r3, [r3, #2]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7ff ff75 	bl	800f4ec <ptr_to_mem>
 800f602:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f604:	68ba      	ldr	r2, [r7, #8]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d01f      	beq.n	800f64c <plug_holes+0x118>
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	791b      	ldrb	r3, [r3, #4]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d11b      	bne.n	800f64c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f614:	4b17      	ldr	r3, [pc, #92]	@ (800f674 <plug_holes+0x140>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d102      	bne.n	800f624 <plug_holes+0xf0>
      lfree = pmem;
 800f61e:	4a15      	ldr	r2, [pc, #84]	@ (800f674 <plug_holes+0x140>)
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	881a      	ldrh	r2, [r3, #0]
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	881b      	ldrh	r3, [r3, #0]
 800f630:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f634:	d00a      	beq.n	800f64c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	881b      	ldrh	r3, [r3, #0]
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7ff ff56 	bl	800f4ec <ptr_to_mem>
 800f640:	4604      	mov	r4, r0
 800f642:	68b8      	ldr	r0, [r7, #8]
 800f644:	f7ff ff64 	bl	800f510 <mem_to_ptr>
 800f648:	4603      	mov	r3, r0
 800f64a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f64c:	bf00      	nop
 800f64e:	3714      	adds	r7, #20
 800f650:	46bd      	mov	sp, r7
 800f652:	bd90      	pop	{r4, r7, pc}
 800f654:	2000f300 	.word	0x2000f300
 800f658:	0801f564 	.word	0x0801f564
 800f65c:	0801f594 	.word	0x0801f594
 800f660:	0801f5ac 	.word	0x0801f5ac
 800f664:	2000f304 	.word	0x2000f304
 800f668:	0801f5d4 	.word	0x0801f5d4
 800f66c:	0801f5f0 	.word	0x0801f5f0
 800f670:	0801f60c 	.word	0x0801f60c
 800f674:	2000f30c 	.word	0x2000f30c

0800f678 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f67e:	4b1f      	ldr	r3, [pc, #124]	@ (800f6fc <mem_init+0x84>)
 800f680:	3303      	adds	r3, #3
 800f682:	f023 0303 	bic.w	r3, r3, #3
 800f686:	461a      	mov	r2, r3
 800f688:	4b1d      	ldr	r3, [pc, #116]	@ (800f700 <mem_init+0x88>)
 800f68a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f68c:	4b1c      	ldr	r3, [pc, #112]	@ (800f700 <mem_init+0x88>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800f698:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2200      	movs	r2, #0
 800f69e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f6a6:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
 800f6aa:	f7ff ff1f 	bl	800f4ec <ptr_to_mem>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	4a14      	ldr	r2, [pc, #80]	@ (800f704 <mem_init+0x8c>)
 800f6b2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f6b4:	4b13      	ldr	r3, [pc, #76]	@ (800f704 <mem_init+0x8c>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f6bc:	4b11      	ldr	r3, [pc, #68]	@ (800f704 <mem_init+0x8c>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800f6c4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f6c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f704 <mem_init+0x8c>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800f6ce:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f6d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f700 <mem_init+0x88>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a0c      	ldr	r2, [pc, #48]	@ (800f708 <mem_init+0x90>)
 800f6d6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f6d8:	480c      	ldr	r0, [pc, #48]	@ (800f70c <mem_init+0x94>)
 800f6da:	f00c f99d 	bl	801ba18 <sys_mutex_new>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d006      	beq.n	800f6f2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f6e4:	4b0a      	ldr	r3, [pc, #40]	@ (800f710 <mem_init+0x98>)
 800f6e6:	f240 221f 	movw	r2, #543	@ 0x21f
 800f6ea:	490a      	ldr	r1, [pc, #40]	@ (800f714 <mem_init+0x9c>)
 800f6ec:	480a      	ldr	r0, [pc, #40]	@ (800f718 <mem_init+0xa0>)
 800f6ee:	f00d f89f 	bl	801c830 <iprintf>
  }
}
 800f6f2:	bf00      	nop
 800f6f4:	3708      	adds	r7, #8
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	2000a2ec 	.word	0x2000a2ec
 800f700:	2000f300 	.word	0x2000f300
 800f704:	2000f304 	.word	0x2000f304
 800f708:	2000f30c 	.word	0x2000f30c
 800f70c:	2000f308 	.word	0x2000f308
 800f710:	0801f564 	.word	0x0801f564
 800f714:	0801f638 	.word	0x0801f638
 800f718:	0801f5ac 	.word	0x0801f5ac

0800f71c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f7ff fef3 	bl	800f510 <mem_to_ptr>
 800f72a:	4603      	mov	r3, r0
 800f72c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	4618      	mov	r0, r3
 800f734:	f7ff feda 	bl	800f4ec <ptr_to_mem>
 800f738:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	885b      	ldrh	r3, [r3, #2]
 800f73e:	4618      	mov	r0, r3
 800f740:	f7ff fed4 	bl	800f4ec <ptr_to_mem>
 800f744:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f74e:	d818      	bhi.n	800f782 <mem_link_valid+0x66>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	885b      	ldrh	r3, [r3, #2]
 800f754:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f758:	d813      	bhi.n	800f782 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f75e:	8afa      	ldrh	r2, [r7, #22]
 800f760:	429a      	cmp	r2, r3
 800f762:	d004      	beq.n	800f76e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	881b      	ldrh	r3, [r3, #0]
 800f768:	8afa      	ldrh	r2, [r7, #22]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d109      	bne.n	800f782 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f76e:	4b08      	ldr	r3, [pc, #32]	@ (800f790 <mem_link_valid+0x74>)
 800f770:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f772:	693a      	ldr	r2, [r7, #16]
 800f774:	429a      	cmp	r2, r3
 800f776:	d006      	beq.n	800f786 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	885b      	ldrh	r3, [r3, #2]
 800f77c:	8afa      	ldrh	r2, [r7, #22]
 800f77e:	429a      	cmp	r2, r3
 800f780:	d001      	beq.n	800f786 <mem_link_valid+0x6a>
    return 0;
 800f782:	2300      	movs	r3, #0
 800f784:	e000      	b.n	800f788 <mem_link_valid+0x6c>
  }
  return 1;
 800f786:	2301      	movs	r3, #1
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3718      	adds	r7, #24
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	2000f304 	.word	0x2000f304

0800f794 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b088      	sub	sp, #32
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d070      	beq.n	800f884 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f003 0303 	and.w	r3, r3, #3
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d00d      	beq.n	800f7c8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f7ac:	4b37      	ldr	r3, [pc, #220]	@ (800f88c <mem_free+0xf8>)
 800f7ae:	f240 2273 	movw	r2, #627	@ 0x273
 800f7b2:	4937      	ldr	r1, [pc, #220]	@ (800f890 <mem_free+0xfc>)
 800f7b4:	4837      	ldr	r0, [pc, #220]	@ (800f894 <mem_free+0x100>)
 800f7b6:	f00d f83b 	bl	801c830 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f7ba:	f00c f981 	bl	801bac0 <sys_arch_protect>
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f00c f98b 	bl	801badc <sys_arch_unprotect>
    return;
 800f7c6:	e05e      	b.n	800f886 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	3b08      	subs	r3, #8
 800f7cc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f7ce:	4b32      	ldr	r3, [pc, #200]	@ (800f898 <mem_free+0x104>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	69fa      	ldr	r2, [r7, #28]
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d306      	bcc.n	800f7e6 <mem_free+0x52>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f103 020c 	add.w	r2, r3, #12
 800f7de:	4b2f      	ldr	r3, [pc, #188]	@ (800f89c <mem_free+0x108>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d90d      	bls.n	800f802 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f7e6:	4b29      	ldr	r3, [pc, #164]	@ (800f88c <mem_free+0xf8>)
 800f7e8:	f240 227f 	movw	r2, #639	@ 0x27f
 800f7ec:	492c      	ldr	r1, [pc, #176]	@ (800f8a0 <mem_free+0x10c>)
 800f7ee:	4829      	ldr	r0, [pc, #164]	@ (800f894 <mem_free+0x100>)
 800f7f0:	f00d f81e 	bl	801c830 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f7f4:	f00c f964 	bl	801bac0 <sys_arch_protect>
 800f7f8:	6138      	str	r0, [r7, #16]
 800f7fa:	6938      	ldr	r0, [r7, #16]
 800f7fc:	f00c f96e 	bl	801badc <sys_arch_unprotect>
    return;
 800f800:	e041      	b.n	800f886 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f802:	4828      	ldr	r0, [pc, #160]	@ (800f8a4 <mem_free+0x110>)
 800f804:	f00c f922 	bl	801ba4c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	791b      	ldrb	r3, [r3, #4]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d110      	bne.n	800f832 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f810:	4b1e      	ldr	r3, [pc, #120]	@ (800f88c <mem_free+0xf8>)
 800f812:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800f816:	4924      	ldr	r1, [pc, #144]	@ (800f8a8 <mem_free+0x114>)
 800f818:	481e      	ldr	r0, [pc, #120]	@ (800f894 <mem_free+0x100>)
 800f81a:	f00d f809 	bl	801c830 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f81e:	4821      	ldr	r0, [pc, #132]	@ (800f8a4 <mem_free+0x110>)
 800f820:	f00c f923 	bl	801ba6a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f824:	f00c f94c 	bl	801bac0 <sys_arch_protect>
 800f828:	6178      	str	r0, [r7, #20]
 800f82a:	6978      	ldr	r0, [r7, #20]
 800f82c:	f00c f956 	bl	801badc <sys_arch_unprotect>
    return;
 800f830:	e029      	b.n	800f886 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f832:	69f8      	ldr	r0, [r7, #28]
 800f834:	f7ff ff72 	bl	800f71c <mem_link_valid>
 800f838:	4603      	mov	r3, r0
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d110      	bne.n	800f860 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f83e:	4b13      	ldr	r3, [pc, #76]	@ (800f88c <mem_free+0xf8>)
 800f840:	f240 2295 	movw	r2, #661	@ 0x295
 800f844:	4919      	ldr	r1, [pc, #100]	@ (800f8ac <mem_free+0x118>)
 800f846:	4813      	ldr	r0, [pc, #76]	@ (800f894 <mem_free+0x100>)
 800f848:	f00c fff2 	bl	801c830 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f84c:	4815      	ldr	r0, [pc, #84]	@ (800f8a4 <mem_free+0x110>)
 800f84e:	f00c f90c 	bl	801ba6a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f852:	f00c f935 	bl	801bac0 <sys_arch_protect>
 800f856:	61b8      	str	r0, [r7, #24]
 800f858:	69b8      	ldr	r0, [r7, #24]
 800f85a:	f00c f93f 	bl	801badc <sys_arch_unprotect>
    return;
 800f85e:	e012      	b.n	800f886 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	2200      	movs	r2, #0
 800f864:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f866:	4b12      	ldr	r3, [pc, #72]	@ (800f8b0 <mem_free+0x11c>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	69fa      	ldr	r2, [r7, #28]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d202      	bcs.n	800f876 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f870:	4a0f      	ldr	r2, [pc, #60]	@ (800f8b0 <mem_free+0x11c>)
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f876:	69f8      	ldr	r0, [r7, #28]
 800f878:	f7ff fe5c 	bl	800f534 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f87c:	4809      	ldr	r0, [pc, #36]	@ (800f8a4 <mem_free+0x110>)
 800f87e:	f00c f8f4 	bl	801ba6a <sys_mutex_unlock>
 800f882:	e000      	b.n	800f886 <mem_free+0xf2>
    return;
 800f884:	bf00      	nop
}
 800f886:	3720      	adds	r7, #32
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	0801f564 	.word	0x0801f564
 800f890:	0801f654 	.word	0x0801f654
 800f894:	0801f5ac 	.word	0x0801f5ac
 800f898:	2000f300 	.word	0x2000f300
 800f89c:	2000f304 	.word	0x2000f304
 800f8a0:	0801f678 	.word	0x0801f678
 800f8a4:	2000f308 	.word	0x2000f308
 800f8a8:	0801f694 	.word	0x0801f694
 800f8ac:	0801f6bc 	.word	0x0801f6bc
 800f8b0:	2000f30c 	.word	0x2000f30c

0800f8b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b088      	sub	sp, #32
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	460b      	mov	r3, r1
 800f8be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f8c0:	887b      	ldrh	r3, [r7, #2]
 800f8c2:	3303      	adds	r3, #3
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	f023 0303 	bic.w	r3, r3, #3
 800f8ca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f8cc:	8bfb      	ldrh	r3, [r7, #30]
 800f8ce:	2b0b      	cmp	r3, #11
 800f8d0:	d801      	bhi.n	800f8d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f8d2:	230c      	movs	r3, #12
 800f8d4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f8d6:	8bfb      	ldrh	r3, [r7, #30]
 800f8d8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f8dc:	d803      	bhi.n	800f8e6 <mem_trim+0x32>
 800f8de:	8bfa      	ldrh	r2, [r7, #30]
 800f8e0:	887b      	ldrh	r3, [r7, #2]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d201      	bcs.n	800f8ea <mem_trim+0x36>
    return NULL;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	e0d8      	b.n	800fa9c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f8ea:	4b6e      	ldr	r3, [pc, #440]	@ (800faa4 <mem_trim+0x1f0>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d304      	bcc.n	800f8fe <mem_trim+0x4a>
 800f8f4:	4b6c      	ldr	r3, [pc, #432]	@ (800faa8 <mem_trim+0x1f4>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d306      	bcc.n	800f90c <mem_trim+0x58>
 800f8fe:	4b6b      	ldr	r3, [pc, #428]	@ (800faac <mem_trim+0x1f8>)
 800f900:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f904:	496a      	ldr	r1, [pc, #424]	@ (800fab0 <mem_trim+0x1fc>)
 800f906:	486b      	ldr	r0, [pc, #428]	@ (800fab4 <mem_trim+0x200>)
 800f908:	f00c ff92 	bl	801c830 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f90c:	4b65      	ldr	r3, [pc, #404]	@ (800faa4 <mem_trim+0x1f0>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	429a      	cmp	r2, r3
 800f914:	d304      	bcc.n	800f920 <mem_trim+0x6c>
 800f916:	4b64      	ldr	r3, [pc, #400]	@ (800faa8 <mem_trim+0x1f4>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d307      	bcc.n	800f930 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f920:	f00c f8ce 	bl	801bac0 <sys_arch_protect>
 800f924:	60b8      	str	r0, [r7, #8]
 800f926:	68b8      	ldr	r0, [r7, #8]
 800f928:	f00c f8d8 	bl	801badc <sys_arch_unprotect>
    return rmem;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	e0b5      	b.n	800fa9c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	3b08      	subs	r3, #8
 800f934:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f936:	69b8      	ldr	r0, [r7, #24]
 800f938:	f7ff fdea 	bl	800f510 <mem_to_ptr>
 800f93c:	4603      	mov	r3, r0
 800f93e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f940:	69bb      	ldr	r3, [r7, #24]
 800f942:	881a      	ldrh	r2, [r3, #0]
 800f944:	8afb      	ldrh	r3, [r7, #22]
 800f946:	1ad3      	subs	r3, r2, r3
 800f948:	b29b      	uxth	r3, r3
 800f94a:	3b08      	subs	r3, #8
 800f94c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f94e:	8bfa      	ldrh	r2, [r7, #30]
 800f950:	8abb      	ldrh	r3, [r7, #20]
 800f952:	429a      	cmp	r2, r3
 800f954:	d906      	bls.n	800f964 <mem_trim+0xb0>
 800f956:	4b55      	ldr	r3, [pc, #340]	@ (800faac <mem_trim+0x1f8>)
 800f958:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800f95c:	4956      	ldr	r1, [pc, #344]	@ (800fab8 <mem_trim+0x204>)
 800f95e:	4855      	ldr	r0, [pc, #340]	@ (800fab4 <mem_trim+0x200>)
 800f960:	f00c ff66 	bl	801c830 <iprintf>
  if (newsize > size) {
 800f964:	8bfa      	ldrh	r2, [r7, #30]
 800f966:	8abb      	ldrh	r3, [r7, #20]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d901      	bls.n	800f970 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f96c:	2300      	movs	r3, #0
 800f96e:	e095      	b.n	800fa9c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f970:	8bfa      	ldrh	r2, [r7, #30]
 800f972:	8abb      	ldrh	r3, [r7, #20]
 800f974:	429a      	cmp	r2, r3
 800f976:	d101      	bne.n	800f97c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	e08f      	b.n	800fa9c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f97c:	484f      	ldr	r0, [pc, #316]	@ (800fabc <mem_trim+0x208>)
 800f97e:	f00c f865 	bl	801ba4c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f982:	69bb      	ldr	r3, [r7, #24]
 800f984:	881b      	ldrh	r3, [r3, #0]
 800f986:	4618      	mov	r0, r3
 800f988:	f7ff fdb0 	bl	800f4ec <ptr_to_mem>
 800f98c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	791b      	ldrb	r3, [r3, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d13f      	bne.n	800fa16 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f996:	69bb      	ldr	r3, [r7, #24]
 800f998:	881b      	ldrh	r3, [r3, #0]
 800f99a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f99e:	d106      	bne.n	800f9ae <mem_trim+0xfa>
 800f9a0:	4b42      	ldr	r3, [pc, #264]	@ (800faac <mem_trim+0x1f8>)
 800f9a2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800f9a6:	4946      	ldr	r1, [pc, #280]	@ (800fac0 <mem_trim+0x20c>)
 800f9a8:	4842      	ldr	r0, [pc, #264]	@ (800fab4 <mem_trim+0x200>)
 800f9aa:	f00c ff41 	bl	801c830 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	881b      	ldrh	r3, [r3, #0]
 800f9b2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f9b4:	8afa      	ldrh	r2, [r7, #22]
 800f9b6:	8bfb      	ldrh	r3, [r7, #30]
 800f9b8:	4413      	add	r3, r2
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	3308      	adds	r3, #8
 800f9be:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f9c0:	4b40      	ldr	r3, [pc, #256]	@ (800fac4 <mem_trim+0x210>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	693a      	ldr	r2, [r7, #16]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d106      	bne.n	800f9d8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f9ca:	89fb      	ldrh	r3, [r7, #14]
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7ff fd8d 	bl	800f4ec <ptr_to_mem>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	4a3b      	ldr	r2, [pc, #236]	@ (800fac4 <mem_trim+0x210>)
 800f9d6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f9d8:	89fb      	ldrh	r3, [r7, #14]
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7ff fd86 	bl	800f4ec <ptr_to_mem>
 800f9e0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f9e8:	693b      	ldr	r3, [r7, #16]
 800f9ea:	89ba      	ldrh	r2, [r7, #12]
 800f9ec:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	8afa      	ldrh	r2, [r7, #22]
 800f9f2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f9f4:	69bb      	ldr	r3, [r7, #24]
 800f9f6:	89fa      	ldrh	r2, [r7, #14]
 800f9f8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	881b      	ldrh	r3, [r3, #0]
 800f9fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800fa02:	d047      	beq.n	800fa94 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	881b      	ldrh	r3, [r3, #0]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7ff fd6f 	bl	800f4ec <ptr_to_mem>
 800fa0e:	4602      	mov	r2, r0
 800fa10:	89fb      	ldrh	r3, [r7, #14]
 800fa12:	8053      	strh	r3, [r2, #2]
 800fa14:	e03e      	b.n	800fa94 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fa16:	8bfb      	ldrh	r3, [r7, #30]
 800fa18:	f103 0214 	add.w	r2, r3, #20
 800fa1c:	8abb      	ldrh	r3, [r7, #20]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d838      	bhi.n	800fa94 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fa22:	8afa      	ldrh	r2, [r7, #22]
 800fa24:	8bfb      	ldrh	r3, [r7, #30]
 800fa26:	4413      	add	r3, r2
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	3308      	adds	r3, #8
 800fa2c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	881b      	ldrh	r3, [r3, #0]
 800fa32:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800fa36:	d106      	bne.n	800fa46 <mem_trim+0x192>
 800fa38:	4b1c      	ldr	r3, [pc, #112]	@ (800faac <mem_trim+0x1f8>)
 800fa3a:	f240 3216 	movw	r2, #790	@ 0x316
 800fa3e:	4920      	ldr	r1, [pc, #128]	@ (800fac0 <mem_trim+0x20c>)
 800fa40:	481c      	ldr	r0, [pc, #112]	@ (800fab4 <mem_trim+0x200>)
 800fa42:	f00c fef5 	bl	801c830 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800fa46:	89fb      	ldrh	r3, [r7, #14]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7ff fd4f 	bl	800f4ec <ptr_to_mem>
 800fa4e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800fa50:	4b1c      	ldr	r3, [pc, #112]	@ (800fac4 <mem_trim+0x210>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	693a      	ldr	r2, [r7, #16]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d202      	bcs.n	800fa60 <mem_trim+0x1ac>
      lfree = mem2;
 800fa5a:	4a1a      	ldr	r2, [pc, #104]	@ (800fac4 <mem_trim+0x210>)
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	2200      	movs	r2, #0
 800fa64:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	881a      	ldrh	r2, [r3, #0]
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	8afa      	ldrh	r2, [r7, #22]
 800fa72:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800fa74:	69bb      	ldr	r3, [r7, #24]
 800fa76:	89fa      	ldrh	r2, [r7, #14]
 800fa78:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	881b      	ldrh	r3, [r3, #0]
 800fa7e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800fa82:	d007      	beq.n	800fa94 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	881b      	ldrh	r3, [r3, #0]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7ff fd2f 	bl	800f4ec <ptr_to_mem>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	89fb      	ldrh	r3, [r7, #14]
 800fa92:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fa94:	4809      	ldr	r0, [pc, #36]	@ (800fabc <mem_trim+0x208>)
 800fa96:	f00b ffe8 	bl	801ba6a <sys_mutex_unlock>
  return rmem;
 800fa9a:	687b      	ldr	r3, [r7, #4]
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3720      	adds	r7, #32
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	2000f300 	.word	0x2000f300
 800faa8:	2000f304 	.word	0x2000f304
 800faac:	0801f564 	.word	0x0801f564
 800fab0:	0801f6f0 	.word	0x0801f6f0
 800fab4:	0801f5ac 	.word	0x0801f5ac
 800fab8:	0801f708 	.word	0x0801f708
 800fabc:	2000f308 	.word	0x2000f308
 800fac0:	0801f728 	.word	0x0801f728
 800fac4:	2000f30c 	.word	0x2000f30c

0800fac8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b088      	sub	sp, #32
 800facc:	af00      	add	r7, sp, #0
 800face:	4603      	mov	r3, r0
 800fad0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800fad2:	88fb      	ldrh	r3, [r7, #6]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d101      	bne.n	800fadc <mem_malloc+0x14>
    return NULL;
 800fad8:	2300      	movs	r3, #0
 800fada:	e0e2      	b.n	800fca2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fadc:	88fb      	ldrh	r3, [r7, #6]
 800fade:	3303      	adds	r3, #3
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	f023 0303 	bic.w	r3, r3, #3
 800fae6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800fae8:	8bbb      	ldrh	r3, [r7, #28]
 800faea:	2b0b      	cmp	r3, #11
 800faec:	d801      	bhi.n	800faf2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800faee:	230c      	movs	r3, #12
 800faf0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800faf2:	8bbb      	ldrh	r3, [r7, #28]
 800faf4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800faf8:	d803      	bhi.n	800fb02 <mem_malloc+0x3a>
 800fafa:	8bba      	ldrh	r2, [r7, #28]
 800fafc:	88fb      	ldrh	r3, [r7, #6]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d201      	bcs.n	800fb06 <mem_malloc+0x3e>
    return NULL;
 800fb02:	2300      	movs	r3, #0
 800fb04:	e0cd      	b.n	800fca2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800fb06:	4869      	ldr	r0, [pc, #420]	@ (800fcac <mem_malloc+0x1e4>)
 800fb08:	f00b ffa0 	bl	801ba4c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fb0c:	4b68      	ldr	r3, [pc, #416]	@ (800fcb0 <mem_malloc+0x1e8>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7ff fcfd 	bl	800f510 <mem_to_ptr>
 800fb16:	4603      	mov	r3, r0
 800fb18:	83fb      	strh	r3, [r7, #30]
 800fb1a:	e0b7      	b.n	800fc8c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800fb1c:	8bfb      	ldrh	r3, [r7, #30]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7ff fce4 	bl	800f4ec <ptr_to_mem>
 800fb24:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	791b      	ldrb	r3, [r3, #4]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	f040 80a7 	bne.w	800fc7e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	881b      	ldrh	r3, [r3, #0]
 800fb34:	461a      	mov	r2, r3
 800fb36:	8bfb      	ldrh	r3, [r7, #30]
 800fb38:	1ad3      	subs	r3, r2, r3
 800fb3a:	f1a3 0208 	sub.w	r2, r3, #8
 800fb3e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800fb40:	429a      	cmp	r2, r3
 800fb42:	f0c0 809c 	bcc.w	800fc7e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	881b      	ldrh	r3, [r3, #0]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	8bfb      	ldrh	r3, [r7, #30]
 800fb4e:	1ad3      	subs	r3, r2, r3
 800fb50:	f1a3 0208 	sub.w	r2, r3, #8
 800fb54:	8bbb      	ldrh	r3, [r7, #28]
 800fb56:	3314      	adds	r3, #20
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d333      	bcc.n	800fbc4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fb5c:	8bfa      	ldrh	r2, [r7, #30]
 800fb5e:	8bbb      	ldrh	r3, [r7, #28]
 800fb60:	4413      	add	r3, r2
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	3308      	adds	r3, #8
 800fb66:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fb68:	8a7b      	ldrh	r3, [r7, #18]
 800fb6a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800fb6e:	d106      	bne.n	800fb7e <mem_malloc+0xb6>
 800fb70:	4b50      	ldr	r3, [pc, #320]	@ (800fcb4 <mem_malloc+0x1ec>)
 800fb72:	f240 3287 	movw	r2, #903	@ 0x387
 800fb76:	4950      	ldr	r1, [pc, #320]	@ (800fcb8 <mem_malloc+0x1f0>)
 800fb78:	4850      	ldr	r0, [pc, #320]	@ (800fcbc <mem_malloc+0x1f4>)
 800fb7a:	f00c fe59 	bl	801c830 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800fb7e:	8a7b      	ldrh	r3, [r7, #18]
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7ff fcb3 	bl	800f4ec <ptr_to_mem>
 800fb86:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	881a      	ldrh	r2, [r3, #0]
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	8bfa      	ldrh	r2, [r7, #30]
 800fb9a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	8a7a      	ldrh	r2, [r7, #18]
 800fba0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	2201      	movs	r2, #1
 800fba6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800fbb0:	d00b      	beq.n	800fbca <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	881b      	ldrh	r3, [r3, #0]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7ff fc98 	bl	800f4ec <ptr_to_mem>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	8a7b      	ldrh	r3, [r7, #18]
 800fbc0:	8053      	strh	r3, [r2, #2]
 800fbc2:	e002      	b.n	800fbca <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fbca:	4b39      	ldr	r3, [pc, #228]	@ (800fcb0 <mem_malloc+0x1e8>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	697a      	ldr	r2, [r7, #20]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d127      	bne.n	800fc24 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800fbd4:	4b36      	ldr	r3, [pc, #216]	@ (800fcb0 <mem_malloc+0x1e8>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fbda:	e005      	b.n	800fbe8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800fbdc:	69bb      	ldr	r3, [r7, #24]
 800fbde:	881b      	ldrh	r3, [r3, #0]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7ff fc83 	bl	800f4ec <ptr_to_mem>
 800fbe6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	791b      	ldrb	r3, [r3, #4]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d004      	beq.n	800fbfa <mem_malloc+0x132>
 800fbf0:	4b33      	ldr	r3, [pc, #204]	@ (800fcc0 <mem_malloc+0x1f8>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	69ba      	ldr	r2, [r7, #24]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d1f0      	bne.n	800fbdc <mem_malloc+0x114>
          }
          lfree = cur;
 800fbfa:	4a2d      	ldr	r2, [pc, #180]	@ (800fcb0 <mem_malloc+0x1e8>)
 800fbfc:	69bb      	ldr	r3, [r7, #24]
 800fbfe:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fc00:	4b2b      	ldr	r3, [pc, #172]	@ (800fcb0 <mem_malloc+0x1e8>)
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	4b2e      	ldr	r3, [pc, #184]	@ (800fcc0 <mem_malloc+0x1f8>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d00b      	beq.n	800fc24 <mem_malloc+0x15c>
 800fc0c:	4b28      	ldr	r3, [pc, #160]	@ (800fcb0 <mem_malloc+0x1e8>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	791b      	ldrb	r3, [r3, #4]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d006      	beq.n	800fc24 <mem_malloc+0x15c>
 800fc16:	4b27      	ldr	r3, [pc, #156]	@ (800fcb4 <mem_malloc+0x1ec>)
 800fc18:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800fc1c:	4929      	ldr	r1, [pc, #164]	@ (800fcc4 <mem_malloc+0x1fc>)
 800fc1e:	4827      	ldr	r0, [pc, #156]	@ (800fcbc <mem_malloc+0x1f4>)
 800fc20:	f00c fe06 	bl	801c830 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800fc24:	4821      	ldr	r0, [pc, #132]	@ (800fcac <mem_malloc+0x1e4>)
 800fc26:	f00b ff20 	bl	801ba6a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fc2a:	8bba      	ldrh	r2, [r7, #28]
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	4413      	add	r3, r2
 800fc30:	3308      	adds	r3, #8
 800fc32:	4a23      	ldr	r2, [pc, #140]	@ (800fcc0 <mem_malloc+0x1f8>)
 800fc34:	6812      	ldr	r2, [r2, #0]
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d906      	bls.n	800fc48 <mem_malloc+0x180>
 800fc3a:	4b1e      	ldr	r3, [pc, #120]	@ (800fcb4 <mem_malloc+0x1ec>)
 800fc3c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800fc40:	4921      	ldr	r1, [pc, #132]	@ (800fcc8 <mem_malloc+0x200>)
 800fc42:	481e      	ldr	r0, [pc, #120]	@ (800fcbc <mem_malloc+0x1f4>)
 800fc44:	f00c fdf4 	bl	801c830 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	f003 0303 	and.w	r3, r3, #3
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d006      	beq.n	800fc60 <mem_malloc+0x198>
 800fc52:	4b18      	ldr	r3, [pc, #96]	@ (800fcb4 <mem_malloc+0x1ec>)
 800fc54:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800fc58:	491c      	ldr	r1, [pc, #112]	@ (800fccc <mem_malloc+0x204>)
 800fc5a:	4818      	ldr	r0, [pc, #96]	@ (800fcbc <mem_malloc+0x1f4>)
 800fc5c:	f00c fde8 	bl	801c830 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	f003 0303 	and.w	r3, r3, #3
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d006      	beq.n	800fc78 <mem_malloc+0x1b0>
 800fc6a:	4b12      	ldr	r3, [pc, #72]	@ (800fcb4 <mem_malloc+0x1ec>)
 800fc6c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800fc70:	4917      	ldr	r1, [pc, #92]	@ (800fcd0 <mem_malloc+0x208>)
 800fc72:	4812      	ldr	r0, [pc, #72]	@ (800fcbc <mem_malloc+0x1f4>)
 800fc74:	f00c fddc 	bl	801c830 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	3308      	adds	r3, #8
 800fc7c:	e011      	b.n	800fca2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800fc7e:	8bfb      	ldrh	r3, [r7, #30]
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7ff fc33 	bl	800f4ec <ptr_to_mem>
 800fc86:	4603      	mov	r3, r0
 800fc88:	881b      	ldrh	r3, [r3, #0]
 800fc8a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fc8c:	8bfa      	ldrh	r2, [r7, #30]
 800fc8e:	8bbb      	ldrh	r3, [r7, #28]
 800fc90:	f5c3 43a0 	rsb	r3, r3, #20480	@ 0x5000
 800fc94:	429a      	cmp	r2, r3
 800fc96:	f4ff af41 	bcc.w	800fb1c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800fc9a:	4804      	ldr	r0, [pc, #16]	@ (800fcac <mem_malloc+0x1e4>)
 800fc9c:	f00b fee5 	bl	801ba6a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800fca0:	2300      	movs	r3, #0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3720      	adds	r7, #32
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	2000f308 	.word	0x2000f308
 800fcb0:	2000f30c 	.word	0x2000f30c
 800fcb4:	0801f564 	.word	0x0801f564
 800fcb8:	0801f728 	.word	0x0801f728
 800fcbc:	0801f5ac 	.word	0x0801f5ac
 800fcc0:	2000f304 	.word	0x2000f304
 800fcc4:	0801f73c 	.word	0x0801f73c
 800fcc8:	0801f758 	.word	0x0801f758
 800fccc:	0801f788 	.word	0x0801f788
 800fcd0:	0801f7b8 	.word	0x0801f7b8

0800fcd4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b085      	sub	sp, #20
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	2200      	movs	r2, #0
 800fce2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	689b      	ldr	r3, [r3, #8]
 800fce8:	3303      	adds	r3, #3
 800fcea:	f023 0303 	bic.w	r3, r3, #3
 800fcee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	60fb      	str	r3, [r7, #12]
 800fcf4:	e011      	b.n	800fd1a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	68db      	ldr	r3, [r3, #12]
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	68db      	ldr	r3, [r3, #12]
 800fd04:	68ba      	ldr	r2, [r7, #8]
 800fd06:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	889b      	ldrh	r3, [r3, #4]
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	4413      	add	r3, r2
 800fd12:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	3301      	adds	r3, #1
 800fd18:	60fb      	str	r3, [r7, #12]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	88db      	ldrh	r3, [r3, #6]
 800fd1e:	461a      	mov	r2, r3
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	4293      	cmp	r3, r2
 800fd24:	dbe7      	blt.n	800fcf6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fd26:	bf00      	nop
 800fd28:	bf00      	nop
 800fd2a:	3714      	adds	r7, #20
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	80fb      	strh	r3, [r7, #6]
 800fd3e:	e009      	b.n	800fd54 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fd40:	88fb      	ldrh	r3, [r7, #6]
 800fd42:	4a08      	ldr	r2, [pc, #32]	@ (800fd64 <memp_init+0x30>)
 800fd44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7ff ffc3 	bl	800fcd4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fd4e:	88fb      	ldrh	r3, [r7, #6]
 800fd50:	3301      	adds	r3, #1
 800fd52:	80fb      	strh	r3, [r7, #6]
 800fd54:	88fb      	ldrh	r3, [r7, #6]
 800fd56:	2b0c      	cmp	r3, #12
 800fd58:	d9f2      	bls.n	800fd40 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fd5a:	bf00      	nop
 800fd5c:	bf00      	nop
 800fd5e:	3708      	adds	r7, #8
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	0806e110 	.word	0x0806e110

0800fd68 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fd70:	f00b fea6 	bl	801bac0 <sys_arch_protect>
 800fd74:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	68db      	ldr	r3, [r3, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d015      	beq.n	800fdb0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	68ba      	ldr	r2, [r7, #8]
 800fd8a:	6812      	ldr	r2, [r2, #0]
 800fd8c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	f003 0303 	and.w	r3, r3, #3
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d006      	beq.n	800fda6 <do_memp_malloc_pool+0x3e>
 800fd98:	4b09      	ldr	r3, [pc, #36]	@ (800fdc0 <do_memp_malloc_pool+0x58>)
 800fd9a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800fd9e:	4909      	ldr	r1, [pc, #36]	@ (800fdc4 <do_memp_malloc_pool+0x5c>)
 800fda0:	4809      	ldr	r0, [pc, #36]	@ (800fdc8 <do_memp_malloc_pool+0x60>)
 800fda2:	f00c fd45 	bl	801c830 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fda6:	68f8      	ldr	r0, [r7, #12]
 800fda8:	f00b fe98 	bl	801badc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	e003      	b.n	800fdb8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f00b fe93 	bl	801badc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800fdb6:	2300      	movs	r3, #0
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3710      	adds	r7, #16
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	0801f874 	.word	0x0801f874
 800fdc4:	0801f8a4 	.word	0x0801f8a4
 800fdc8:	0801f8c8 	.word	0x0801f8c8

0800fdcc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b084      	sub	sp, #16
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fdd6:	79fb      	ldrb	r3, [r7, #7]
 800fdd8:	2b0c      	cmp	r3, #12
 800fdda:	d908      	bls.n	800fdee <memp_malloc+0x22>
 800fddc:	4b0a      	ldr	r3, [pc, #40]	@ (800fe08 <memp_malloc+0x3c>)
 800fdde:	f240 1257 	movw	r2, #343	@ 0x157
 800fde2:	490a      	ldr	r1, [pc, #40]	@ (800fe0c <memp_malloc+0x40>)
 800fde4:	480a      	ldr	r0, [pc, #40]	@ (800fe10 <memp_malloc+0x44>)
 800fde6:	f00c fd23 	bl	801c830 <iprintf>
 800fdea:	2300      	movs	r3, #0
 800fdec:	e008      	b.n	800fe00 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fdee:	79fb      	ldrb	r3, [r7, #7]
 800fdf0:	4a08      	ldr	r2, [pc, #32]	@ (800fe14 <memp_malloc+0x48>)
 800fdf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7ff ffb6 	bl	800fd68 <do_memp_malloc_pool>
 800fdfc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	0801f874 	.word	0x0801f874
 800fe0c:	0801f904 	.word	0x0801f904
 800fe10:	0801f8c8 	.word	0x0801f8c8
 800fe14:	0806e110 	.word	0x0806e110

0800fe18 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b084      	sub	sp, #16
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	f003 0303 	and.w	r3, r3, #3
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d006      	beq.n	800fe3a <do_memp_free_pool+0x22>
 800fe2c:	4b0d      	ldr	r3, [pc, #52]	@ (800fe64 <do_memp_free_pool+0x4c>)
 800fe2e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800fe32:	490d      	ldr	r1, [pc, #52]	@ (800fe68 <do_memp_free_pool+0x50>)
 800fe34:	480d      	ldr	r0, [pc, #52]	@ (800fe6c <do_memp_free_pool+0x54>)
 800fe36:	f00c fcfb 	bl	801c830 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fe3e:	f00b fe3f 	bl	801bac0 <sys_arch_protect>
 800fe42:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	68fa      	ldr	r2, [r7, #12]
 800fe54:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fe56:	68b8      	ldr	r0, [r7, #8]
 800fe58:	f00b fe40 	bl	801badc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fe5c:	bf00      	nop
 800fe5e:	3710      	adds	r7, #16
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	0801f874 	.word	0x0801f874
 800fe68:	0801f924 	.word	0x0801f924
 800fe6c:	0801f8c8 	.word	0x0801f8c8

0800fe70 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	4603      	mov	r3, r0
 800fe78:	6039      	str	r1, [r7, #0]
 800fe7a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fe7c:	79fb      	ldrb	r3, [r7, #7]
 800fe7e:	2b0c      	cmp	r3, #12
 800fe80:	d907      	bls.n	800fe92 <memp_free+0x22>
 800fe82:	4b0c      	ldr	r3, [pc, #48]	@ (800feb4 <memp_free+0x44>)
 800fe84:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800fe88:	490b      	ldr	r1, [pc, #44]	@ (800feb8 <memp_free+0x48>)
 800fe8a:	480c      	ldr	r0, [pc, #48]	@ (800febc <memp_free+0x4c>)
 800fe8c:	f00c fcd0 	bl	801c830 <iprintf>
 800fe90:	e00c      	b.n	800feac <memp_free+0x3c>

  if (mem == NULL) {
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d008      	beq.n	800feaa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fe98:	79fb      	ldrb	r3, [r7, #7]
 800fe9a:	4a09      	ldr	r2, [pc, #36]	@ (800fec0 <memp_free+0x50>)
 800fe9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fea0:	6839      	ldr	r1, [r7, #0]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7ff ffb8 	bl	800fe18 <do_memp_free_pool>
 800fea8:	e000      	b.n	800feac <memp_free+0x3c>
    return;
 800feaa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800feac:	3708      	adds	r7, #8
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	0801f874 	.word	0x0801f874
 800feb8:	0801f944 	.word	0x0801f944
 800febc:	0801f8c8 	.word	0x0801f8c8
 800fec0:	0806e110 	.word	0x0806e110

0800fec4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fec4:	b480      	push	{r7}
 800fec6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fec8:	bf00      	nop
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr
	...

0800fed4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b086      	sub	sp, #24
 800fed8:	af00      	add	r7, sp, #0
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	607a      	str	r2, [r7, #4]
 800fee0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d108      	bne.n	800fefa <netif_add+0x26>
 800fee8:	4b5b      	ldr	r3, [pc, #364]	@ (8010058 <netif_add+0x184>)
 800feea:	f240 1227 	movw	r2, #295	@ 0x127
 800feee:	495b      	ldr	r1, [pc, #364]	@ (801005c <netif_add+0x188>)
 800fef0:	485b      	ldr	r0, [pc, #364]	@ (8010060 <netif_add+0x18c>)
 800fef2:	f00c fc9d 	bl	801c830 <iprintf>
 800fef6:	2300      	movs	r3, #0
 800fef8:	e0a9      	b.n	801004e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d108      	bne.n	800ff12 <netif_add+0x3e>
 800ff00:	4b55      	ldr	r3, [pc, #340]	@ (8010058 <netif_add+0x184>)
 800ff02:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ff06:	4957      	ldr	r1, [pc, #348]	@ (8010064 <netif_add+0x190>)
 800ff08:	4855      	ldr	r0, [pc, #340]	@ (8010060 <netif_add+0x18c>)
 800ff0a:	f00c fc91 	bl	801c830 <iprintf>
 800ff0e:	2300      	movs	r3, #0
 800ff10:	e09d      	b.n	801004e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d101      	bne.n	800ff1c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ff18:	4b53      	ldr	r3, [pc, #332]	@ (8010068 <netif_add+0x194>)
 800ff1a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d101      	bne.n	800ff26 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ff22:	4b51      	ldr	r3, [pc, #324]	@ (8010068 <netif_add+0x194>)
 800ff24:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d101      	bne.n	800ff30 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ff2c:	4b4e      	ldr	r3, [pc, #312]	@ (8010068 <netif_add+0x194>)
 800ff2e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2200      	movs	r2, #0
 800ff34:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	4a49      	ldr	r2, [pc, #292]	@ (801006c <netif_add+0x198>)
 800ff46:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2200      	movs	r2, #0
 800ff52:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	3324      	adds	r3, #36	@ 0x24
 800ff5a:	2204      	movs	r2, #4
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f00c fdc8 	bl	801caf4 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2200      	movs	r2, #0
 800ff68:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	6a3a      	ldr	r2, [r7, #32]
 800ff6e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ff70:	4b3f      	ldr	r3, [pc, #252]	@ (8010070 <netif_add+0x19c>)
 800ff72:	781a      	ldrb	r2, [r3, #0]
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff7e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	687a      	ldr	r2, [r7, #4]
 800ff84:	68b9      	ldr	r1, [r7, #8]
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	f000 f914 	bl	80101b4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ff8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	4798      	blx	r3
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d001      	beq.n	800ff9c <netif_add+0xc8>
    return NULL;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	e058      	b.n	801004e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ffa2:	2bff      	cmp	r3, #255	@ 0xff
 800ffa4:	d103      	bne.n	800ffae <netif_add+0xda>
        netif->num = 0;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ffb2:	4b30      	ldr	r3, [pc, #192]	@ (8010074 <netif_add+0x1a0>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	617b      	str	r3, [r7, #20]
 800ffb8:	e02b      	b.n	8010012 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ffba:	697a      	ldr	r2, [r7, #20]
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d106      	bne.n	800ffd0 <netif_add+0xfc>
 800ffc2:	4b25      	ldr	r3, [pc, #148]	@ (8010058 <netif_add+0x184>)
 800ffc4:	f240 128b 	movw	r2, #395	@ 0x18b
 800ffc8:	492b      	ldr	r1, [pc, #172]	@ (8010078 <netif_add+0x1a4>)
 800ffca:	4825      	ldr	r0, [pc, #148]	@ (8010060 <netif_add+0x18c>)
 800ffcc:	f00c fc30 	bl	801c830 <iprintf>
        num_netifs++;
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	2bff      	cmp	r3, #255	@ 0xff
 800ffda:	dd06      	ble.n	800ffea <netif_add+0x116>
 800ffdc:	4b1e      	ldr	r3, [pc, #120]	@ (8010058 <netif_add+0x184>)
 800ffde:	f240 128d 	movw	r2, #397	@ 0x18d
 800ffe2:	4926      	ldr	r1, [pc, #152]	@ (801007c <netif_add+0x1a8>)
 800ffe4:	481e      	ldr	r0, [pc, #120]	@ (8010060 <netif_add+0x18c>)
 800ffe6:	f00c fc23 	bl	801c830 <iprintf>
        if (netif2->num == netif->num) {
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d108      	bne.n	801000c <netif_add+0x138>
          netif->num++;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010000:	3301      	adds	r3, #1
 8010002:	b2da      	uxtb	r2, r3
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 801000a:	e005      	b.n	8010018 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	617b      	str	r3, [r7, #20]
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d1d0      	bne.n	800ffba <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1be      	bne.n	800ff9c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010024:	2bfe      	cmp	r3, #254	@ 0xfe
 8010026:	d103      	bne.n	8010030 <netif_add+0x15c>
    netif_num = 0;
 8010028:	4b11      	ldr	r3, [pc, #68]	@ (8010070 <netif_add+0x19c>)
 801002a:	2200      	movs	r2, #0
 801002c:	701a      	strb	r2, [r3, #0]
 801002e:	e006      	b.n	801003e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010036:	3301      	adds	r3, #1
 8010038:	b2da      	uxtb	r2, r3
 801003a:	4b0d      	ldr	r3, [pc, #52]	@ (8010070 <netif_add+0x19c>)
 801003c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801003e:	4b0d      	ldr	r3, [pc, #52]	@ (8010074 <netif_add+0x1a0>)
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010046:	4a0b      	ldr	r2, [pc, #44]	@ (8010074 <netif_add+0x1a0>)
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801004c:	68fb      	ldr	r3, [r7, #12]
}
 801004e:	4618      	mov	r0, r3
 8010050:	3718      	adds	r7, #24
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	0801f960 	.word	0x0801f960
 801005c:	0801f9f4 	.word	0x0801f9f4
 8010060:	0801f9b0 	.word	0x0801f9b0
 8010064:	0801fa10 	.word	0x0801fa10
 8010068:	0806e194 	.word	0x0806e194
 801006c:	08010475 	.word	0x08010475
 8010070:	20013d44 	.word	0x20013d44
 8010074:	20013d3c 	.word	0x20013d3c
 8010078:	0801fa34 	.word	0x0801fa34
 801007c:	0801fa48 	.word	0x0801fa48

08010080 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801008a:	6839      	ldr	r1, [r7, #0]
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f002 fc21 	bl	80128d4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010092:	6839      	ldr	r1, [r7, #0]
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f007 f933 	bl	8017300 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801009a:	bf00      	nop
 801009c:	3708      	adds	r7, #8
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
	...

080100a4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b086      	sub	sp, #24
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d106      	bne.n	80100c4 <netif_do_set_ipaddr+0x20>
 80100b6:	4b1d      	ldr	r3, [pc, #116]	@ (801012c <netif_do_set_ipaddr+0x88>)
 80100b8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80100bc:	491c      	ldr	r1, [pc, #112]	@ (8010130 <netif_do_set_ipaddr+0x8c>)
 80100be:	481d      	ldr	r0, [pc, #116]	@ (8010134 <netif_do_set_ipaddr+0x90>)
 80100c0:	f00c fbb6 	bl	801c830 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d106      	bne.n	80100d8 <netif_do_set_ipaddr+0x34>
 80100ca:	4b18      	ldr	r3, [pc, #96]	@ (801012c <netif_do_set_ipaddr+0x88>)
 80100cc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80100d0:	4917      	ldr	r1, [pc, #92]	@ (8010130 <netif_do_set_ipaddr+0x8c>)
 80100d2:	4818      	ldr	r0, [pc, #96]	@ (8010134 <netif_do_set_ipaddr+0x90>)
 80100d4:	f00c fbac 	bl	801c830 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	3304      	adds	r3, #4
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d01c      	beq.n	8010120 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	3304      	adds	r3, #4
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80100f6:	f107 0314 	add.w	r3, r7, #20
 80100fa:	4619      	mov	r1, r3
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f7ff ffbf 	bl	8010080 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d002      	beq.n	801010e <netif_do_set_ipaddr+0x6a>
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	e000      	b.n	8010110 <netif_do_set_ipaddr+0x6c>
 801010e:	2300      	movs	r3, #0
 8010110:	68fa      	ldr	r2, [r7, #12]
 8010112:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010114:	2101      	movs	r1, #1
 8010116:	68f8      	ldr	r0, [r7, #12]
 8010118:	f000 f8d2 	bl	80102c0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801011c:	2301      	movs	r3, #1
 801011e:	e000      	b.n	8010122 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010120:	2300      	movs	r3, #0
}
 8010122:	4618      	mov	r0, r3
 8010124:	3718      	adds	r7, #24
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	0801f960 	.word	0x0801f960
 8010130:	0801fa78 	.word	0x0801fa78
 8010134:	0801f9b0 	.word	0x0801f9b0

08010138 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010138:	b480      	push	{r7}
 801013a:	b085      	sub	sp, #20
 801013c:	af00      	add	r7, sp, #0
 801013e:	60f8      	str	r0, [r7, #12]
 8010140:	60b9      	str	r1, [r7, #8]
 8010142:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	3308      	adds	r3, #8
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	429a      	cmp	r2, r3
 8010150:	d00a      	beq.n	8010168 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d002      	beq.n	801015e <netif_do_set_netmask+0x26>
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	e000      	b.n	8010160 <netif_do_set_netmask+0x28>
 801015e:	2300      	movs	r3, #0
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010164:	2301      	movs	r3, #1
 8010166:	e000      	b.n	801016a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010168:	2300      	movs	r3, #0
}
 801016a:	4618      	mov	r0, r3
 801016c:	3714      	adds	r7, #20
 801016e:	46bd      	mov	sp, r7
 8010170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010174:	4770      	bx	lr

08010176 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010176:	b480      	push	{r7}
 8010178:	b085      	sub	sp, #20
 801017a:	af00      	add	r7, sp, #0
 801017c:	60f8      	str	r0, [r7, #12]
 801017e:	60b9      	str	r1, [r7, #8]
 8010180:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	330c      	adds	r3, #12
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	429a      	cmp	r2, r3
 801018e:	d00a      	beq.n	80101a6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d002      	beq.n	801019c <netif_do_set_gw+0x26>
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	e000      	b.n	801019e <netif_do_set_gw+0x28>
 801019c:	2300      	movs	r3, #0
 801019e:	68fa      	ldr	r2, [r7, #12]
 80101a0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80101a2:	2301      	movs	r3, #1
 80101a4:	e000      	b.n	80101a8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80101a6:	2300      	movs	r3, #0
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3714      	adds	r7, #20
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr

080101b4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b088      	sub	sp, #32
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	60b9      	str	r1, [r7, #8]
 80101be:	607a      	str	r2, [r7, #4]
 80101c0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80101c2:	2300      	movs	r3, #0
 80101c4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80101c6:	2300      	movs	r3, #0
 80101c8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d101      	bne.n	80101d4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80101d0:	4b1c      	ldr	r3, [pc, #112]	@ (8010244 <netif_set_addr+0x90>)
 80101d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d101      	bne.n	80101de <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80101da:	4b1a      	ldr	r3, [pc, #104]	@ (8010244 <netif_set_addr+0x90>)
 80101dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d101      	bne.n	80101e8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80101e4:	4b17      	ldr	r3, [pc, #92]	@ (8010244 <netif_set_addr+0x90>)
 80101e6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d003      	beq.n	80101f6 <netif_set_addr+0x42>
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d101      	bne.n	80101fa <netif_set_addr+0x46>
 80101f6:	2301      	movs	r3, #1
 80101f8:	e000      	b.n	80101fc <netif_set_addr+0x48>
 80101fa:	2300      	movs	r3, #0
 80101fc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d006      	beq.n	8010212 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010204:	f107 0310 	add.w	r3, r7, #16
 8010208:	461a      	mov	r2, r3
 801020a:	68b9      	ldr	r1, [r7, #8]
 801020c:	68f8      	ldr	r0, [r7, #12]
 801020e:	f7ff ff49 	bl	80100a4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010212:	69fa      	ldr	r2, [r7, #28]
 8010214:	6879      	ldr	r1, [r7, #4]
 8010216:	68f8      	ldr	r0, [r7, #12]
 8010218:	f7ff ff8e 	bl	8010138 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801021c:	69ba      	ldr	r2, [r7, #24]
 801021e:	6839      	ldr	r1, [r7, #0]
 8010220:	68f8      	ldr	r0, [r7, #12]
 8010222:	f7ff ffa8 	bl	8010176 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d106      	bne.n	801023a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801022c:	f107 0310 	add.w	r3, r7, #16
 8010230:	461a      	mov	r2, r3
 8010232:	68b9      	ldr	r1, [r7, #8]
 8010234:	68f8      	ldr	r0, [r7, #12]
 8010236:	f7ff ff35 	bl	80100a4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801023a:	bf00      	nop
 801023c:	3720      	adds	r7, #32
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	0806e194 	.word	0x0806e194

08010248 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010248:	b480      	push	{r7}
 801024a:	b083      	sub	sp, #12
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010250:	4a04      	ldr	r2, [pc, #16]	@ (8010264 <netif_set_default+0x1c>)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010256:	bf00      	nop
 8010258:	370c      	adds	r7, #12
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr
 8010262:	bf00      	nop
 8010264:	20013d40 	.word	0x20013d40

08010268 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d107      	bne.n	8010286 <netif_set_up+0x1e>
 8010276:	4b0f      	ldr	r3, [pc, #60]	@ (80102b4 <netif_set_up+0x4c>)
 8010278:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801027c:	490e      	ldr	r1, [pc, #56]	@ (80102b8 <netif_set_up+0x50>)
 801027e:	480f      	ldr	r0, [pc, #60]	@ (80102bc <netif_set_up+0x54>)
 8010280:	f00c fad6 	bl	801c830 <iprintf>
 8010284:	e013      	b.n	80102ae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801028c:	f003 0301 	and.w	r3, r3, #1
 8010290:	2b00      	cmp	r3, #0
 8010292:	d10c      	bne.n	80102ae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801029a:	f043 0301 	orr.w	r3, r3, #1
 801029e:	b2da      	uxtb	r2, r3
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80102a6:	2103      	movs	r1, #3
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f000 f809 	bl	80102c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80102ae:	3708      	adds	r7, #8
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	0801f960 	.word	0x0801f960
 80102b8:	0801fae8 	.word	0x0801fae8
 80102bc:	0801f9b0 	.word	0x0801f9b0

080102c0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	460b      	mov	r3, r1
 80102ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d106      	bne.n	80102e0 <netif_issue_reports+0x20>
 80102d2:	4b18      	ldr	r3, [pc, #96]	@ (8010334 <netif_issue_reports+0x74>)
 80102d4:	f240 326d 	movw	r2, #877	@ 0x36d
 80102d8:	4917      	ldr	r1, [pc, #92]	@ (8010338 <netif_issue_reports+0x78>)
 80102da:	4818      	ldr	r0, [pc, #96]	@ (801033c <netif_issue_reports+0x7c>)
 80102dc:	f00c faa8 	bl	801c830 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80102e6:	f003 0304 	and.w	r3, r3, #4
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d01e      	beq.n	801032c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80102f4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d017      	beq.n	801032c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80102fc:	78fb      	ldrb	r3, [r7, #3]
 80102fe:	f003 0301 	and.w	r3, r3, #1
 8010302:	2b00      	cmp	r3, #0
 8010304:	d013      	beq.n	801032e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	3304      	adds	r3, #4
 801030a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801030c:	2b00      	cmp	r3, #0
 801030e:	d00e      	beq.n	801032e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010316:	f003 0308 	and.w	r3, r3, #8
 801031a:	2b00      	cmp	r3, #0
 801031c:	d007      	beq.n	801032e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	3304      	adds	r3, #4
 8010322:	4619      	mov	r1, r3
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f009 fe6b 	bl	801a000 <etharp_request>
 801032a:	e000      	b.n	801032e <netif_issue_reports+0x6e>
    return;
 801032c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	0801f960 	.word	0x0801f960
 8010338:	0801fb04 	.word	0x0801fb04
 801033c:	0801f9b0 	.word	0x0801f9b0

08010340 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d107      	bne.n	801035e <netif_set_down+0x1e>
 801034e:	4b12      	ldr	r3, [pc, #72]	@ (8010398 <netif_set_down+0x58>)
 8010350:	f240 329b 	movw	r2, #923	@ 0x39b
 8010354:	4911      	ldr	r1, [pc, #68]	@ (801039c <netif_set_down+0x5c>)
 8010356:	4812      	ldr	r0, [pc, #72]	@ (80103a0 <netif_set_down+0x60>)
 8010358:	f00c fa6a 	bl	801c830 <iprintf>
 801035c:	e019      	b.n	8010392 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010364:	f003 0301 	and.w	r3, r3, #1
 8010368:	2b00      	cmp	r3, #0
 801036a:	d012      	beq.n	8010392 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010372:	f023 0301 	bic.w	r3, r3, #1
 8010376:	b2da      	uxtb	r2, r3
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010384:	f003 0308 	and.w	r3, r3, #8
 8010388:	2b00      	cmp	r3, #0
 801038a:	d002      	beq.n	8010392 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f009 f9f1 	bl	8019774 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	0801f960 	.word	0x0801f960
 801039c:	0801fb28 	.word	0x0801fb28
 80103a0:	0801f9b0 	.word	0x0801f9b0

080103a4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d107      	bne.n	80103c2 <netif_set_link_up+0x1e>
 80103b2:	4b15      	ldr	r3, [pc, #84]	@ (8010408 <netif_set_link_up+0x64>)
 80103b4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80103b8:	4914      	ldr	r1, [pc, #80]	@ (801040c <netif_set_link_up+0x68>)
 80103ba:	4815      	ldr	r0, [pc, #84]	@ (8010410 <netif_set_link_up+0x6c>)
 80103bc:	f00c fa38 	bl	801c830 <iprintf>
 80103c0:	e01e      	b.n	8010400 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80103c8:	f003 0304 	and.w	r3, r3, #4
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d117      	bne.n	8010400 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80103d6:	f043 0304 	orr.w	r3, r3, #4
 80103da:	b2da      	uxtb	r2, r3
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f007 fbb6 	bl	8017b54 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80103e8:	2103      	movs	r1, #3
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f7ff ff68 	bl	80102c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	69db      	ldr	r3, [r3, #28]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d003      	beq.n	8010400 <netif_set_link_up+0x5c>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	69db      	ldr	r3, [r3, #28]
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010400:	3708      	adds	r7, #8
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
 8010406:	bf00      	nop
 8010408:	0801f960 	.word	0x0801f960
 801040c:	0801fb48 	.word	0x0801fb48
 8010410:	0801f9b0 	.word	0x0801f9b0

08010414 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d107      	bne.n	8010432 <netif_set_link_down+0x1e>
 8010422:	4b11      	ldr	r3, [pc, #68]	@ (8010468 <netif_set_link_down+0x54>)
 8010424:	f240 4206 	movw	r2, #1030	@ 0x406
 8010428:	4910      	ldr	r1, [pc, #64]	@ (801046c <netif_set_link_down+0x58>)
 801042a:	4811      	ldr	r0, [pc, #68]	@ (8010470 <netif_set_link_down+0x5c>)
 801042c:	f00c fa00 	bl	801c830 <iprintf>
 8010430:	e017      	b.n	8010462 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010438:	f003 0304 	and.w	r3, r3, #4
 801043c:	2b00      	cmp	r3, #0
 801043e:	d010      	beq.n	8010462 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010446:	f023 0304 	bic.w	r3, r3, #4
 801044a:	b2da      	uxtb	r2, r3
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	69db      	ldr	r3, [r3, #28]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d003      	beq.n	8010462 <netif_set_link_down+0x4e>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	69db      	ldr	r3, [r3, #28]
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	0801f960 	.word	0x0801f960
 801046c:	0801fb6c 	.word	0x0801fb6c
 8010470:	0801f9b0 	.word	0x0801f9b0

08010474 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010474:	b480      	push	{r7}
 8010476:	b085      	sub	sp, #20
 8010478:	af00      	add	r7, sp, #0
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	60b9      	str	r1, [r7, #8]
 801047e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010480:	f06f 030b 	mvn.w	r3, #11
}
 8010484:	4618      	mov	r0, r3
 8010486:	3714      	adds	r7, #20
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr

08010490 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010490:	b480      	push	{r7}
 8010492:	b085      	sub	sp, #20
 8010494:	af00      	add	r7, sp, #0
 8010496:	4603      	mov	r3, r0
 8010498:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801049a:	79fb      	ldrb	r3, [r7, #7]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d013      	beq.n	80104c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80104a0:	4b0d      	ldr	r3, [pc, #52]	@ (80104d8 <netif_get_by_index+0x48>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	60fb      	str	r3, [r7, #12]
 80104a6:	e00c      	b.n	80104c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80104ae:	3301      	adds	r3, #1
 80104b0:	b2db      	uxtb	r3, r3
 80104b2:	79fa      	ldrb	r2, [r7, #7]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d101      	bne.n	80104bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	e006      	b.n	80104ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	60fb      	str	r3, [r7, #12]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d1ef      	bne.n	80104a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80104c8:	2300      	movs	r3, #0
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3714      	adds	r7, #20
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr
 80104d6:	bf00      	nop
 80104d8:	20013d3c 	.word	0x20013d3c

080104dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b082      	sub	sp, #8
 80104e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80104e2:	f00b faed 	bl	801bac0 <sys_arch_protect>
 80104e6:	6038      	str	r0, [r7, #0]
 80104e8:	4b0d      	ldr	r3, [pc, #52]	@ (8010520 <pbuf_free_ooseq+0x44>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	701a      	strb	r2, [r3, #0]
 80104ee:	6838      	ldr	r0, [r7, #0]
 80104f0:	f00b faf4 	bl	801badc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80104f4:	4b0b      	ldr	r3, [pc, #44]	@ (8010524 <pbuf_free_ooseq+0x48>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	607b      	str	r3, [r7, #4]
 80104fa:	e00a      	b.n	8010512 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010500:	2b00      	cmp	r3, #0
 8010502:	d003      	beq.n	801050c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f002 fa23 	bl	8012950 <tcp_free_ooseq>
      return;
 801050a:	e005      	b.n	8010518 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	68db      	ldr	r3, [r3, #12]
 8010510:	607b      	str	r3, [r7, #4]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d1f1      	bne.n	80104fc <pbuf_free_ooseq+0x20>
    }
  }
}
 8010518:	3708      	adds	r7, #8
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	20013d45 	.word	0x20013d45
 8010524:	20013d54 	.word	0x20013d54

08010528 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010530:	f7ff ffd4 	bl	80104dc <pbuf_free_ooseq>
}
 8010534:	bf00      	nop
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010542:	f00b fabd 	bl	801bac0 <sys_arch_protect>
 8010546:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010548:	4b0f      	ldr	r3, [pc, #60]	@ (8010588 <pbuf_pool_is_empty+0x4c>)
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801054e:	4b0e      	ldr	r3, [pc, #56]	@ (8010588 <pbuf_pool_is_empty+0x4c>)
 8010550:	2201      	movs	r2, #1
 8010552:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f00b fac1 	bl	801badc <sys_arch_unprotect>

  if (!queued) {
 801055a:	78fb      	ldrb	r3, [r7, #3]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d10f      	bne.n	8010580 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010560:	2100      	movs	r1, #0
 8010562:	480a      	ldr	r0, [pc, #40]	@ (801058c <pbuf_pool_is_empty+0x50>)
 8010564:	f7fe fd62 	bl	800f02c <tcpip_try_callback>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d008      	beq.n	8010580 <pbuf_pool_is_empty+0x44>
 801056e:	f00b faa7 	bl	801bac0 <sys_arch_protect>
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	4b04      	ldr	r3, [pc, #16]	@ (8010588 <pbuf_pool_is_empty+0x4c>)
 8010576:	2200      	movs	r2, #0
 8010578:	701a      	strb	r2, [r3, #0]
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f00b faae 	bl	801badc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010580:	bf00      	nop
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	20013d45 	.word	0x20013d45
 801058c:	08010529 	.word	0x08010529

08010590 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010590:	b480      	push	{r7}
 8010592:	b085      	sub	sp, #20
 8010594:	af00      	add	r7, sp, #0
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	4611      	mov	r1, r2
 801059c:	461a      	mov	r2, r3
 801059e:	460b      	mov	r3, r1
 80105a0:	80fb      	strh	r3, [r7, #6]
 80105a2:	4613      	mov	r3, r2
 80105a4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2200      	movs	r2, #0
 80105aa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	68ba      	ldr	r2, [r7, #8]
 80105b0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	88fa      	ldrh	r2, [r7, #6]
 80105b6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	88ba      	ldrh	r2, [r7, #4]
 80105bc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80105be:	8b3b      	ldrh	r3, [r7, #24]
 80105c0:	b2da      	uxtb	r2, r3
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	7f3a      	ldrb	r2, [r7, #28]
 80105ca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	2201      	movs	r2, #1
 80105d0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2200      	movs	r2, #0
 80105d6:	73da      	strb	r2, [r3, #15]
}
 80105d8:	bf00      	nop
 80105da:	3714      	adds	r7, #20
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr

080105e4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b08c      	sub	sp, #48	@ 0x30
 80105e8:	af02      	add	r7, sp, #8
 80105ea:	4603      	mov	r3, r0
 80105ec:	71fb      	strb	r3, [r7, #7]
 80105ee:	460b      	mov	r3, r1
 80105f0:	80bb      	strh	r3, [r7, #4]
 80105f2:	4613      	mov	r3, r2
 80105f4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80105f6:	79fb      	ldrb	r3, [r7, #7]
 80105f8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80105fa:	887b      	ldrh	r3, [r7, #2]
 80105fc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010600:	f000 8082 	beq.w	8010708 <pbuf_alloc+0x124>
 8010604:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010608:	f300 80ca 	bgt.w	80107a0 <pbuf_alloc+0x1bc>
 801060c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010610:	d010      	beq.n	8010634 <pbuf_alloc+0x50>
 8010612:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010616:	f300 80c3 	bgt.w	80107a0 <pbuf_alloc+0x1bc>
 801061a:	2b01      	cmp	r3, #1
 801061c:	d002      	beq.n	8010624 <pbuf_alloc+0x40>
 801061e:	2b41      	cmp	r3, #65	@ 0x41
 8010620:	f040 80be 	bne.w	80107a0 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010624:	887a      	ldrh	r2, [r7, #2]
 8010626:	88bb      	ldrh	r3, [r7, #4]
 8010628:	4619      	mov	r1, r3
 801062a:	2000      	movs	r0, #0
 801062c:	f000 f8d4 	bl	80107d8 <pbuf_alloc_reference>
 8010630:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8010632:	e0bf      	b.n	80107b4 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010634:	2300      	movs	r3, #0
 8010636:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8010638:	2300      	movs	r3, #0
 801063a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801063c:	88bb      	ldrh	r3, [r7, #4]
 801063e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010640:	200c      	movs	r0, #12
 8010642:	f7ff fbc3 	bl	800fdcc <memp_malloc>
 8010646:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d109      	bne.n	8010662 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 801064e:	f7ff ff75 	bl	801053c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010654:	2b00      	cmp	r3, #0
 8010656:	d002      	beq.n	801065e <pbuf_alloc+0x7a>
            pbuf_free(p);
 8010658:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801065a:	f000 faab 	bl	8010bb4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801065e:	2300      	movs	r3, #0
 8010660:	e0a9      	b.n	80107b6 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010662:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010664:	3303      	adds	r3, #3
 8010666:	b29b      	uxth	r3, r3
 8010668:	f023 0303 	bic.w	r3, r3, #3
 801066c:	b29b      	uxth	r3, r3
 801066e:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8010672:	3304      	adds	r3, #4
 8010674:	b29b      	uxth	r3, r3
 8010676:	8b7a      	ldrh	r2, [r7, #26]
 8010678:	4293      	cmp	r3, r2
 801067a:	bf28      	it	cs
 801067c:	4613      	movcs	r3, r2
 801067e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010680:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010682:	3310      	adds	r3, #16
 8010684:	693a      	ldr	r2, [r7, #16]
 8010686:	4413      	add	r3, r2
 8010688:	3303      	adds	r3, #3
 801068a:	f023 0303 	bic.w	r3, r3, #3
 801068e:	4618      	mov	r0, r3
 8010690:	89f9      	ldrh	r1, [r7, #14]
 8010692:	8b7a      	ldrh	r2, [r7, #26]
 8010694:	2300      	movs	r3, #0
 8010696:	9301      	str	r3, [sp, #4]
 8010698:	887b      	ldrh	r3, [r7, #2]
 801069a:	9300      	str	r3, [sp, #0]
 801069c:	460b      	mov	r3, r1
 801069e:	4601      	mov	r1, r0
 80106a0:	6938      	ldr	r0, [r7, #16]
 80106a2:	f7ff ff75 	bl	8010590 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	f003 0303 	and.w	r3, r3, #3
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d006      	beq.n	80106c0 <pbuf_alloc+0xdc>
 80106b2:	4b43      	ldr	r3, [pc, #268]	@ (80107c0 <pbuf_alloc+0x1dc>)
 80106b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80106b8:	4942      	ldr	r1, [pc, #264]	@ (80107c4 <pbuf_alloc+0x1e0>)
 80106ba:	4843      	ldr	r0, [pc, #268]	@ (80107c8 <pbuf_alloc+0x1e4>)
 80106bc:	f00c f8b8 	bl	801c830 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80106c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80106c2:	3303      	adds	r3, #3
 80106c4:	f023 0303 	bic.w	r3, r3, #3
 80106c8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80106cc:	4293      	cmp	r3, r2
 80106ce:	d106      	bne.n	80106de <pbuf_alloc+0xfa>
 80106d0:	4b3b      	ldr	r3, [pc, #236]	@ (80107c0 <pbuf_alloc+0x1dc>)
 80106d2:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80106d6:	493d      	ldr	r1, [pc, #244]	@ (80107cc <pbuf_alloc+0x1e8>)
 80106d8:	483b      	ldr	r0, [pc, #236]	@ (80107c8 <pbuf_alloc+0x1e4>)
 80106da:	f00c f8a9 	bl	801c830 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80106de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d102      	bne.n	80106ea <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80106e8:	e002      	b.n	80106f0 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	693a      	ldr	r2, [r7, #16]
 80106ee:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80106f4:	8b7a      	ldrh	r2, [r7, #26]
 80106f6:	89fb      	ldrh	r3, [r7, #14]
 80106f8:	1ad3      	subs	r3, r2, r3
 80106fa:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80106fc:	2300      	movs	r3, #0
 80106fe:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8010700:	8b7b      	ldrh	r3, [r7, #26]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d19c      	bne.n	8010640 <pbuf_alloc+0x5c>
      break;
 8010706:	e055      	b.n	80107b4 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010708:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801070a:	3303      	adds	r3, #3
 801070c:	b29b      	uxth	r3, r3
 801070e:	f023 0303 	bic.w	r3, r3, #3
 8010712:	b29a      	uxth	r2, r3
 8010714:	88bb      	ldrh	r3, [r7, #4]
 8010716:	3303      	adds	r3, #3
 8010718:	b29b      	uxth	r3, r3
 801071a:	f023 0303 	bic.w	r3, r3, #3
 801071e:	b29b      	uxth	r3, r3
 8010720:	4413      	add	r3, r2
 8010722:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010724:	8b3b      	ldrh	r3, [r7, #24]
 8010726:	3310      	adds	r3, #16
 8010728:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801072a:	8b3a      	ldrh	r2, [r7, #24]
 801072c:	88bb      	ldrh	r3, [r7, #4]
 801072e:	3303      	adds	r3, #3
 8010730:	f023 0303 	bic.w	r3, r3, #3
 8010734:	429a      	cmp	r2, r3
 8010736:	d306      	bcc.n	8010746 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010738:	8afa      	ldrh	r2, [r7, #22]
 801073a:	88bb      	ldrh	r3, [r7, #4]
 801073c:	3303      	adds	r3, #3
 801073e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010742:	429a      	cmp	r2, r3
 8010744:	d201      	bcs.n	801074a <pbuf_alloc+0x166>
        return NULL;
 8010746:	2300      	movs	r3, #0
 8010748:	e035      	b.n	80107b6 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801074a:	8afb      	ldrh	r3, [r7, #22]
 801074c:	4618      	mov	r0, r3
 801074e:	f7ff f9bb 	bl	800fac8 <mem_malloc>
 8010752:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8010754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010756:	2b00      	cmp	r3, #0
 8010758:	d101      	bne.n	801075e <pbuf_alloc+0x17a>
        return NULL;
 801075a:	2300      	movs	r3, #0
 801075c:	e02b      	b.n	80107b6 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801075e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010760:	3310      	adds	r3, #16
 8010762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010764:	4413      	add	r3, r2
 8010766:	3303      	adds	r3, #3
 8010768:	f023 0303 	bic.w	r3, r3, #3
 801076c:	4618      	mov	r0, r3
 801076e:	88b9      	ldrh	r1, [r7, #4]
 8010770:	88ba      	ldrh	r2, [r7, #4]
 8010772:	2300      	movs	r3, #0
 8010774:	9301      	str	r3, [sp, #4]
 8010776:	887b      	ldrh	r3, [r7, #2]
 8010778:	9300      	str	r3, [sp, #0]
 801077a:	460b      	mov	r3, r1
 801077c:	4601      	mov	r1, r0
 801077e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010780:	f7ff ff06 	bl	8010590 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	f003 0303 	and.w	r3, r3, #3
 801078c:	2b00      	cmp	r3, #0
 801078e:	d010      	beq.n	80107b2 <pbuf_alloc+0x1ce>
 8010790:	4b0b      	ldr	r3, [pc, #44]	@ (80107c0 <pbuf_alloc+0x1dc>)
 8010792:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8010796:	490e      	ldr	r1, [pc, #56]	@ (80107d0 <pbuf_alloc+0x1ec>)
 8010798:	480b      	ldr	r0, [pc, #44]	@ (80107c8 <pbuf_alloc+0x1e4>)
 801079a:	f00c f849 	bl	801c830 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801079e:	e008      	b.n	80107b2 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80107a0:	4b07      	ldr	r3, [pc, #28]	@ (80107c0 <pbuf_alloc+0x1dc>)
 80107a2:	f240 1227 	movw	r2, #295	@ 0x127
 80107a6:	490b      	ldr	r1, [pc, #44]	@ (80107d4 <pbuf_alloc+0x1f0>)
 80107a8:	4807      	ldr	r0, [pc, #28]	@ (80107c8 <pbuf_alloc+0x1e4>)
 80107aa:	f00c f841 	bl	801c830 <iprintf>
      return NULL;
 80107ae:	2300      	movs	r3, #0
 80107b0:	e001      	b.n	80107b6 <pbuf_alloc+0x1d2>
      break;
 80107b2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80107b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3728      	adds	r7, #40	@ 0x28
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop
 80107c0:	0801fb90 	.word	0x0801fb90
 80107c4:	0801fbc0 	.word	0x0801fbc0
 80107c8:	0801fbf0 	.word	0x0801fbf0
 80107cc:	0801fc18 	.word	0x0801fc18
 80107d0:	0801fc4c 	.word	0x0801fc4c
 80107d4:	0801fc78 	.word	0x0801fc78

080107d8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b086      	sub	sp, #24
 80107dc:	af02      	add	r7, sp, #8
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	460b      	mov	r3, r1
 80107e2:	807b      	strh	r3, [r7, #2]
 80107e4:	4613      	mov	r3, r2
 80107e6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80107e8:	883b      	ldrh	r3, [r7, #0]
 80107ea:	2b41      	cmp	r3, #65	@ 0x41
 80107ec:	d009      	beq.n	8010802 <pbuf_alloc_reference+0x2a>
 80107ee:	883b      	ldrh	r3, [r7, #0]
 80107f0:	2b01      	cmp	r3, #1
 80107f2:	d006      	beq.n	8010802 <pbuf_alloc_reference+0x2a>
 80107f4:	4b0f      	ldr	r3, [pc, #60]	@ (8010834 <pbuf_alloc_reference+0x5c>)
 80107f6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80107fa:	490f      	ldr	r1, [pc, #60]	@ (8010838 <pbuf_alloc_reference+0x60>)
 80107fc:	480f      	ldr	r0, [pc, #60]	@ (801083c <pbuf_alloc_reference+0x64>)
 80107fe:	f00c f817 	bl	801c830 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010802:	200b      	movs	r0, #11
 8010804:	f7ff fae2 	bl	800fdcc <memp_malloc>
 8010808:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d101      	bne.n	8010814 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010810:	2300      	movs	r3, #0
 8010812:	e00b      	b.n	801082c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010814:	8879      	ldrh	r1, [r7, #2]
 8010816:	887a      	ldrh	r2, [r7, #2]
 8010818:	2300      	movs	r3, #0
 801081a:	9301      	str	r3, [sp, #4]
 801081c:	883b      	ldrh	r3, [r7, #0]
 801081e:	9300      	str	r3, [sp, #0]
 8010820:	460b      	mov	r3, r1
 8010822:	6879      	ldr	r1, [r7, #4]
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	f7ff feb3 	bl	8010590 <pbuf_init_alloced_pbuf>
  return p;
 801082a:	68fb      	ldr	r3, [r7, #12]
}
 801082c:	4618      	mov	r0, r3
 801082e:	3710      	adds	r7, #16
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}
 8010834:	0801fb90 	.word	0x0801fb90
 8010838:	0801fc94 	.word	0x0801fc94
 801083c:	0801fbf0 	.word	0x0801fbf0

08010840 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b088      	sub	sp, #32
 8010844:	af02      	add	r7, sp, #8
 8010846:	607b      	str	r3, [r7, #4]
 8010848:	4603      	mov	r3, r0
 801084a:	73fb      	strb	r3, [r7, #15]
 801084c:	460b      	mov	r3, r1
 801084e:	81bb      	strh	r3, [r7, #12]
 8010850:	4613      	mov	r3, r2
 8010852:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010854:	7bfb      	ldrb	r3, [r7, #15]
 8010856:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010858:	8a7b      	ldrh	r3, [r7, #18]
 801085a:	3303      	adds	r3, #3
 801085c:	f023 0203 	bic.w	r2, r3, #3
 8010860:	89bb      	ldrh	r3, [r7, #12]
 8010862:	441a      	add	r2, r3
 8010864:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010866:	429a      	cmp	r2, r3
 8010868:	d901      	bls.n	801086e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801086a:	2300      	movs	r3, #0
 801086c:	e018      	b.n	80108a0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801086e:	6a3b      	ldr	r3, [r7, #32]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d007      	beq.n	8010884 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010874:	8a7b      	ldrh	r3, [r7, #18]
 8010876:	3303      	adds	r3, #3
 8010878:	f023 0303 	bic.w	r3, r3, #3
 801087c:	6a3a      	ldr	r2, [r7, #32]
 801087e:	4413      	add	r3, r2
 8010880:	617b      	str	r3, [r7, #20]
 8010882:	e001      	b.n	8010888 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010884:	2300      	movs	r3, #0
 8010886:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	89b9      	ldrh	r1, [r7, #12]
 801088c:	89ba      	ldrh	r2, [r7, #12]
 801088e:	2302      	movs	r3, #2
 8010890:	9301      	str	r3, [sp, #4]
 8010892:	897b      	ldrh	r3, [r7, #10]
 8010894:	9300      	str	r3, [sp, #0]
 8010896:	460b      	mov	r3, r1
 8010898:	6979      	ldr	r1, [r7, #20]
 801089a:	f7ff fe79 	bl	8010590 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801089e:	687b      	ldr	r3, [r7, #4]
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3718      	adds	r7, #24
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	460b      	mov	r3, r1
 80108b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d106      	bne.n	80108c8 <pbuf_realloc+0x20>
 80108ba:	4b3a      	ldr	r3, [pc, #232]	@ (80109a4 <pbuf_realloc+0xfc>)
 80108bc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80108c0:	4939      	ldr	r1, [pc, #228]	@ (80109a8 <pbuf_realloc+0x100>)
 80108c2:	483a      	ldr	r0, [pc, #232]	@ (80109ac <pbuf_realloc+0x104>)
 80108c4:	f00b ffb4 	bl	801c830 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	891b      	ldrh	r3, [r3, #8]
 80108cc:	887a      	ldrh	r2, [r7, #2]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d263      	bcs.n	801099a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	891a      	ldrh	r2, [r3, #8]
 80108d6:	887b      	ldrh	r3, [r7, #2]
 80108d8:	1ad3      	subs	r3, r2, r3
 80108da:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80108dc:	887b      	ldrh	r3, [r7, #2]
 80108de:	817b      	strh	r3, [r7, #10]
  q = p;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80108e4:	e018      	b.n	8010918 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	895b      	ldrh	r3, [r3, #10]
 80108ea:	897a      	ldrh	r2, [r7, #10]
 80108ec:	1ad3      	subs	r3, r2, r3
 80108ee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	891a      	ldrh	r2, [r3, #8]
 80108f4:	893b      	ldrh	r3, [r7, #8]
 80108f6:	1ad3      	subs	r3, r2, r3
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d106      	bne.n	8010918 <pbuf_realloc+0x70>
 801090a:	4b26      	ldr	r3, [pc, #152]	@ (80109a4 <pbuf_realloc+0xfc>)
 801090c:	f240 12af 	movw	r2, #431	@ 0x1af
 8010910:	4927      	ldr	r1, [pc, #156]	@ (80109b0 <pbuf_realloc+0x108>)
 8010912:	4826      	ldr	r0, [pc, #152]	@ (80109ac <pbuf_realloc+0x104>)
 8010914:	f00b ff8c 	bl	801c830 <iprintf>
  while (rem_len > q->len) {
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	895b      	ldrh	r3, [r3, #10]
 801091c:	897a      	ldrh	r2, [r7, #10]
 801091e:	429a      	cmp	r2, r3
 8010920:	d8e1      	bhi.n	80108e6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	7b1b      	ldrb	r3, [r3, #12]
 8010926:	f003 030f 	and.w	r3, r3, #15
 801092a:	2b00      	cmp	r3, #0
 801092c:	d121      	bne.n	8010972 <pbuf_realloc+0xca>
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	895b      	ldrh	r3, [r3, #10]
 8010932:	897a      	ldrh	r2, [r7, #10]
 8010934:	429a      	cmp	r2, r3
 8010936:	d01c      	beq.n	8010972 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	7b5b      	ldrb	r3, [r3, #13]
 801093c:	f003 0302 	and.w	r3, r3, #2
 8010940:	2b00      	cmp	r3, #0
 8010942:	d116      	bne.n	8010972 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	685a      	ldr	r2, [r3, #4]
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	1ad3      	subs	r3, r2, r3
 801094c:	b29a      	uxth	r2, r3
 801094e:	897b      	ldrh	r3, [r7, #10]
 8010950:	4413      	add	r3, r2
 8010952:	b29b      	uxth	r3, r3
 8010954:	4619      	mov	r1, r3
 8010956:	68f8      	ldr	r0, [r7, #12]
 8010958:	f7fe ffac 	bl	800f8b4 <mem_trim>
 801095c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d106      	bne.n	8010972 <pbuf_realloc+0xca>
 8010964:	4b0f      	ldr	r3, [pc, #60]	@ (80109a4 <pbuf_realloc+0xfc>)
 8010966:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801096a:	4912      	ldr	r1, [pc, #72]	@ (80109b4 <pbuf_realloc+0x10c>)
 801096c:	480f      	ldr	r0, [pc, #60]	@ (80109ac <pbuf_realloc+0x104>)
 801096e:	f00b ff5f 	bl	801c830 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	897a      	ldrh	r2, [r7, #10]
 8010976:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	895a      	ldrh	r2, [r3, #10]
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d004      	beq.n	8010992 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	4618      	mov	r0, r3
 801098e:	f000 f911 	bl	8010bb4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2200      	movs	r2, #0
 8010996:	601a      	str	r2, [r3, #0]
 8010998:	e000      	b.n	801099c <pbuf_realloc+0xf4>
    return;
 801099a:	bf00      	nop

}
 801099c:	3710      	adds	r7, #16
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	0801fb90 	.word	0x0801fb90
 80109a8:	0801fca8 	.word	0x0801fca8
 80109ac:	0801fbf0 	.word	0x0801fbf0
 80109b0:	0801fcc0 	.word	0x0801fcc0
 80109b4:	0801fcd8 	.word	0x0801fcd8

080109b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b086      	sub	sp, #24
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	4613      	mov	r3, r2
 80109c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d106      	bne.n	80109da <pbuf_add_header_impl+0x22>
 80109cc:	4b2b      	ldr	r3, [pc, #172]	@ (8010a7c <pbuf_add_header_impl+0xc4>)
 80109ce:	f240 12df 	movw	r2, #479	@ 0x1df
 80109d2:	492b      	ldr	r1, [pc, #172]	@ (8010a80 <pbuf_add_header_impl+0xc8>)
 80109d4:	482b      	ldr	r0, [pc, #172]	@ (8010a84 <pbuf_add_header_impl+0xcc>)
 80109d6:	f00b ff2b 	bl	801c830 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d003      	beq.n	80109e8 <pbuf_add_header_impl+0x30>
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80109e6:	d301      	bcc.n	80109ec <pbuf_add_header_impl+0x34>
    return 1;
 80109e8:	2301      	movs	r3, #1
 80109ea:	e043      	b.n	8010a74 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d101      	bne.n	80109f6 <pbuf_add_header_impl+0x3e>
    return 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	e03e      	b.n	8010a74 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	891a      	ldrh	r2, [r3, #8]
 80109fe:	8a7b      	ldrh	r3, [r7, #18]
 8010a00:	4413      	add	r3, r2
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	8a7a      	ldrh	r2, [r7, #18]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d901      	bls.n	8010a0e <pbuf_add_header_impl+0x56>
    return 1;
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	e032      	b.n	8010a74 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	7b1b      	ldrb	r3, [r3, #12]
 8010a12:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010a14:	8a3b      	ldrh	r3, [r7, #16]
 8010a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d00c      	beq.n	8010a38 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	685a      	ldr	r2, [r3, #4]
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	425b      	negs	r3, r3
 8010a26:	4413      	add	r3, r2
 8010a28:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	3310      	adds	r3, #16
 8010a2e:	697a      	ldr	r2, [r7, #20]
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d20d      	bcs.n	8010a50 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010a34:	2301      	movs	r3, #1
 8010a36:	e01d      	b.n	8010a74 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010a38:	79fb      	ldrb	r3, [r7, #7]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d006      	beq.n	8010a4c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	685a      	ldr	r2, [r3, #4]
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	425b      	negs	r3, r3
 8010a46:	4413      	add	r3, r2
 8010a48:	617b      	str	r3, [r7, #20]
 8010a4a:	e001      	b.n	8010a50 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	e011      	b.n	8010a74 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	697a      	ldr	r2, [r7, #20]
 8010a54:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	895a      	ldrh	r2, [r3, #10]
 8010a5a:	8a7b      	ldrh	r3, [r7, #18]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	b29a      	uxth	r2, r3
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	891a      	ldrh	r2, [r3, #8]
 8010a68:	8a7b      	ldrh	r3, [r7, #18]
 8010a6a:	4413      	add	r3, r2
 8010a6c:	b29a      	uxth	r2, r3
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	811a      	strh	r2, [r3, #8]


  return 0;
 8010a72:	2300      	movs	r3, #0
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3718      	adds	r7, #24
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}
 8010a7c:	0801fb90 	.word	0x0801fb90
 8010a80:	0801fcf4 	.word	0x0801fcf4
 8010a84:	0801fbf0 	.word	0x0801fbf0

08010a88 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010a92:	2200      	movs	r2, #0
 8010a94:	6839      	ldr	r1, [r7, #0]
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f7ff ff8e 	bl	80109b8 <pbuf_add_header_impl>
 8010a9c:	4603      	mov	r3, r0
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3708      	adds	r7, #8
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
	...

08010aa8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b084      	sub	sp, #16
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d106      	bne.n	8010ac6 <pbuf_remove_header+0x1e>
 8010ab8:	4b20      	ldr	r3, [pc, #128]	@ (8010b3c <pbuf_remove_header+0x94>)
 8010aba:	f240 224b 	movw	r2, #587	@ 0x24b
 8010abe:	4920      	ldr	r1, [pc, #128]	@ (8010b40 <pbuf_remove_header+0x98>)
 8010ac0:	4820      	ldr	r0, [pc, #128]	@ (8010b44 <pbuf_remove_header+0x9c>)
 8010ac2:	f00b feb5 	bl	801c830 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d003      	beq.n	8010ad4 <pbuf_remove_header+0x2c>
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ad2:	d301      	bcc.n	8010ad8 <pbuf_remove_header+0x30>
    return 1;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	e02c      	b.n	8010b32 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d101      	bne.n	8010ae2 <pbuf_remove_header+0x3a>
    return 0;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	e027      	b.n	8010b32 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	895b      	ldrh	r3, [r3, #10]
 8010aea:	89fa      	ldrh	r2, [r7, #14]
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d908      	bls.n	8010b02 <pbuf_remove_header+0x5a>
 8010af0:	4b12      	ldr	r3, [pc, #72]	@ (8010b3c <pbuf_remove_header+0x94>)
 8010af2:	f240 2255 	movw	r2, #597	@ 0x255
 8010af6:	4914      	ldr	r1, [pc, #80]	@ (8010b48 <pbuf_remove_header+0xa0>)
 8010af8:	4812      	ldr	r0, [pc, #72]	@ (8010b44 <pbuf_remove_header+0x9c>)
 8010afa:	f00b fe99 	bl	801c830 <iprintf>
 8010afe:	2301      	movs	r3, #1
 8010b00:	e017      	b.n	8010b32 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	685a      	ldr	r2, [r3, #4]
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	441a      	add	r2, r3
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	895a      	ldrh	r2, [r3, #10]
 8010b18:	89fb      	ldrh	r3, [r7, #14]
 8010b1a:	1ad3      	subs	r3, r2, r3
 8010b1c:	b29a      	uxth	r2, r3
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	891a      	ldrh	r2, [r3, #8]
 8010b26:	89fb      	ldrh	r3, [r7, #14]
 8010b28:	1ad3      	subs	r3, r2, r3
 8010b2a:	b29a      	uxth	r2, r3
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010b30:	2300      	movs	r3, #0
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3710      	adds	r7, #16
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	0801fb90 	.word	0x0801fb90
 8010b40:	0801fcf4 	.word	0x0801fcf4
 8010b44:	0801fbf0 	.word	0x0801fbf0
 8010b48:	0801fd00 	.word	0x0801fd00

08010b4c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b082      	sub	sp, #8
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	460b      	mov	r3, r1
 8010b56:	807b      	strh	r3, [r7, #2]
 8010b58:	4613      	mov	r3, r2
 8010b5a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010b5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	da08      	bge.n	8010b76 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010b64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b68:	425b      	negs	r3, r3
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f7ff ff9b 	bl	8010aa8 <pbuf_remove_header>
 8010b72:	4603      	mov	r3, r0
 8010b74:	e007      	b.n	8010b86 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010b76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b7a:	787a      	ldrb	r2, [r7, #1]
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f7ff ff1a 	bl	80109b8 <pbuf_add_header_impl>
 8010b84:	4603      	mov	r3, r0
  }
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3708      	adds	r7, #8
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}

08010b8e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b082      	sub	sp, #8
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
 8010b96:	460b      	mov	r3, r1
 8010b98:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f7ff ffd2 	bl	8010b4c <pbuf_header_impl>
 8010ba8:	4603      	mov	r3, r0
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3708      	adds	r7, #8
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
	...

08010bb4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b088      	sub	sp, #32
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d10b      	bne.n	8010bda <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d106      	bne.n	8010bd6 <pbuf_free+0x22>
 8010bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8010cb8 <pbuf_free+0x104>)
 8010bca:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8010bce:	493b      	ldr	r1, [pc, #236]	@ (8010cbc <pbuf_free+0x108>)
 8010bd0:	483b      	ldr	r0, [pc, #236]	@ (8010cc0 <pbuf_free+0x10c>)
 8010bd2:	f00b fe2d 	bl	801c830 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	e069      	b.n	8010cae <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010bde:	e062      	b.n	8010ca6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010be0:	f00a ff6e 	bl	801bac0 <sys_arch_protect>
 8010be4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	7b9b      	ldrb	r3, [r3, #14]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d106      	bne.n	8010bfc <pbuf_free+0x48>
 8010bee:	4b32      	ldr	r3, [pc, #200]	@ (8010cb8 <pbuf_free+0x104>)
 8010bf0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8010bf4:	4933      	ldr	r1, [pc, #204]	@ (8010cc4 <pbuf_free+0x110>)
 8010bf6:	4832      	ldr	r0, [pc, #200]	@ (8010cc0 <pbuf_free+0x10c>)
 8010bf8:	f00b fe1a 	bl	801c830 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	7b9b      	ldrb	r3, [r3, #14]
 8010c00:	3b01      	subs	r3, #1
 8010c02:	b2da      	uxtb	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	739a      	strb	r2, [r3, #14]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	7b9b      	ldrb	r3, [r3, #14]
 8010c0c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010c0e:	69b8      	ldr	r0, [r7, #24]
 8010c10:	f00a ff64 	bl	801badc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010c14:	7dfb      	ldrb	r3, [r7, #23]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d143      	bne.n	8010ca2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	7b1b      	ldrb	r3, [r3, #12]
 8010c24:	f003 030f 	and.w	r3, r3, #15
 8010c28:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	7b5b      	ldrb	r3, [r3, #13]
 8010c2e:	f003 0302 	and.w	r3, r3, #2
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d011      	beq.n	8010c5a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d106      	bne.n	8010c50 <pbuf_free+0x9c>
 8010c42:	4b1d      	ldr	r3, [pc, #116]	@ (8010cb8 <pbuf_free+0x104>)
 8010c44:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010c48:	491f      	ldr	r1, [pc, #124]	@ (8010cc8 <pbuf_free+0x114>)
 8010c4a:	481d      	ldr	r0, [pc, #116]	@ (8010cc0 <pbuf_free+0x10c>)
 8010c4c:	f00b fdf0 	bl	801c830 <iprintf>
        pc->custom_free_function(p);
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	691b      	ldr	r3, [r3, #16]
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	4798      	blx	r3
 8010c58:	e01d      	b.n	8010c96 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010c5a:	7bfb      	ldrb	r3, [r7, #15]
 8010c5c:	2b02      	cmp	r3, #2
 8010c5e:	d104      	bne.n	8010c6a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010c60:	6879      	ldr	r1, [r7, #4]
 8010c62:	200c      	movs	r0, #12
 8010c64:	f7ff f904 	bl	800fe70 <memp_free>
 8010c68:	e015      	b.n	8010c96 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010c6a:	7bfb      	ldrb	r3, [r7, #15]
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	d104      	bne.n	8010c7a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010c70:	6879      	ldr	r1, [r7, #4]
 8010c72:	200b      	movs	r0, #11
 8010c74:	f7ff f8fc 	bl	800fe70 <memp_free>
 8010c78:	e00d      	b.n	8010c96 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010c7a:	7bfb      	ldrb	r3, [r7, #15]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d103      	bne.n	8010c88 <pbuf_free+0xd4>
          mem_free(p);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7fe fd87 	bl	800f794 <mem_free>
 8010c86:	e006      	b.n	8010c96 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010c88:	4b0b      	ldr	r3, [pc, #44]	@ (8010cb8 <pbuf_free+0x104>)
 8010c8a:	f240 320f 	movw	r2, #783	@ 0x30f
 8010c8e:	490f      	ldr	r1, [pc, #60]	@ (8010ccc <pbuf_free+0x118>)
 8010c90:	480b      	ldr	r0, [pc, #44]	@ (8010cc0 <pbuf_free+0x10c>)
 8010c92:	f00b fdcd 	bl	801c830 <iprintf>
        }
      }
      count++;
 8010c96:	7ffb      	ldrb	r3, [r7, #31]
 8010c98:	3301      	adds	r3, #1
 8010c9a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	607b      	str	r3, [r7, #4]
 8010ca0:	e001      	b.n	8010ca6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d199      	bne.n	8010be0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010cac:	7ffb      	ldrb	r3, [r7, #31]
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3720      	adds	r7, #32
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
 8010cb6:	bf00      	nop
 8010cb8:	0801fb90 	.word	0x0801fb90
 8010cbc:	0801fcf4 	.word	0x0801fcf4
 8010cc0:	0801fbf0 	.word	0x0801fbf0
 8010cc4:	0801fd20 	.word	0x0801fd20
 8010cc8:	0801fd38 	.word	0x0801fd38
 8010ccc:	0801fd5c 	.word	0x0801fd5c

08010cd0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b085      	sub	sp, #20
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010cdc:	e005      	b.n	8010cea <pbuf_clen+0x1a>
    ++len;
 8010cde:	89fb      	ldrh	r3, [r7, #14]
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d1f6      	bne.n	8010cde <pbuf_clen+0xe>
  }
  return len;
 8010cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3714      	adds	r7, #20
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfc:	4770      	bx	lr
	...

08010d00 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b084      	sub	sp, #16
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d016      	beq.n	8010d3c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010d0e:	f00a fed7 	bl	801bac0 <sys_arch_protect>
 8010d12:	60f8      	str	r0, [r7, #12]
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	7b9b      	ldrb	r3, [r3, #14]
 8010d18:	3301      	adds	r3, #1
 8010d1a:	b2da      	uxtb	r2, r3
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	739a      	strb	r2, [r3, #14]
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f00a fedb 	bl	801badc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	7b9b      	ldrb	r3, [r3, #14]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d106      	bne.n	8010d3c <pbuf_ref+0x3c>
 8010d2e:	4b05      	ldr	r3, [pc, #20]	@ (8010d44 <pbuf_ref+0x44>)
 8010d30:	f240 3242 	movw	r2, #834	@ 0x342
 8010d34:	4904      	ldr	r1, [pc, #16]	@ (8010d48 <pbuf_ref+0x48>)
 8010d36:	4805      	ldr	r0, [pc, #20]	@ (8010d4c <pbuf_ref+0x4c>)
 8010d38:	f00b fd7a 	bl	801c830 <iprintf>
  }
}
 8010d3c:	bf00      	nop
 8010d3e:	3710      	adds	r7, #16
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	0801fb90 	.word	0x0801fb90
 8010d48:	0801fd70 	.word	0x0801fd70
 8010d4c:	0801fbf0 	.word	0x0801fbf0

08010d50 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d002      	beq.n	8010d66 <pbuf_cat+0x16>
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d107      	bne.n	8010d76 <pbuf_cat+0x26>
 8010d66:	4b20      	ldr	r3, [pc, #128]	@ (8010de8 <pbuf_cat+0x98>)
 8010d68:	f240 3259 	movw	r2, #857	@ 0x359
 8010d6c:	491f      	ldr	r1, [pc, #124]	@ (8010dec <pbuf_cat+0x9c>)
 8010d6e:	4820      	ldr	r0, [pc, #128]	@ (8010df0 <pbuf_cat+0xa0>)
 8010d70:	f00b fd5e 	bl	801c830 <iprintf>
 8010d74:	e034      	b.n	8010de0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	60fb      	str	r3, [r7, #12]
 8010d7a:	e00a      	b.n	8010d92 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	891a      	ldrh	r2, [r3, #8]
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	891b      	ldrh	r3, [r3, #8]
 8010d84:	4413      	add	r3, r2
 8010d86:	b29a      	uxth	r2, r3
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	60fb      	str	r3, [r7, #12]
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d1f0      	bne.n	8010d7c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	891a      	ldrh	r2, [r3, #8]
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	895b      	ldrh	r3, [r3, #10]
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d006      	beq.n	8010db4 <pbuf_cat+0x64>
 8010da6:	4b10      	ldr	r3, [pc, #64]	@ (8010de8 <pbuf_cat+0x98>)
 8010da8:	f240 3262 	movw	r2, #866	@ 0x362
 8010dac:	4911      	ldr	r1, [pc, #68]	@ (8010df4 <pbuf_cat+0xa4>)
 8010dae:	4810      	ldr	r0, [pc, #64]	@ (8010df0 <pbuf_cat+0xa0>)
 8010db0:	f00b fd3e 	bl	801c830 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d006      	beq.n	8010dca <pbuf_cat+0x7a>
 8010dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8010de8 <pbuf_cat+0x98>)
 8010dbe:	f240 3263 	movw	r2, #867	@ 0x363
 8010dc2:	490d      	ldr	r1, [pc, #52]	@ (8010df8 <pbuf_cat+0xa8>)
 8010dc4:	480a      	ldr	r0, [pc, #40]	@ (8010df0 <pbuf_cat+0xa0>)
 8010dc6:	f00b fd33 	bl	801c830 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	891a      	ldrh	r2, [r3, #8]
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	891b      	ldrh	r3, [r3, #8]
 8010dd2:	4413      	add	r3, r2
 8010dd4:	b29a      	uxth	r2, r3
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	683a      	ldr	r2, [r7, #0]
 8010dde:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010de0:	3710      	adds	r7, #16
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	bf00      	nop
 8010de8:	0801fb90 	.word	0x0801fb90
 8010dec:	0801fd84 	.word	0x0801fd84
 8010df0:	0801fbf0 	.word	0x0801fbf0
 8010df4:	0801fdbc 	.word	0x0801fdbc
 8010df8:	0801fdec 	.word	0x0801fdec

08010dfc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b082      	sub	sp, #8
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010e06:	6839      	ldr	r1, [r7, #0]
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f7ff ffa1 	bl	8010d50 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010e0e:	6838      	ldr	r0, [r7, #0]
 8010e10:	f7ff ff76 	bl	8010d00 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010e14:	bf00      	nop
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}

08010e1c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b086      	sub	sp, #24
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010e26:	2300      	movs	r3, #0
 8010e28:	617b      	str	r3, [r7, #20]
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d008      	beq.n	8010e46 <pbuf_copy+0x2a>
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d005      	beq.n	8010e46 <pbuf_copy+0x2a>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	891a      	ldrh	r2, [r3, #8]
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	891b      	ldrh	r3, [r3, #8]
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d209      	bcs.n	8010e5a <pbuf_copy+0x3e>
 8010e46:	4b57      	ldr	r3, [pc, #348]	@ (8010fa4 <pbuf_copy+0x188>)
 8010e48:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8010e4c:	4956      	ldr	r1, [pc, #344]	@ (8010fa8 <pbuf_copy+0x18c>)
 8010e4e:	4857      	ldr	r0, [pc, #348]	@ (8010fac <pbuf_copy+0x190>)
 8010e50:	f00b fcee 	bl	801c830 <iprintf>
 8010e54:	f06f 030f 	mvn.w	r3, #15
 8010e58:	e09f      	b.n	8010f9a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	895b      	ldrh	r3, [r3, #10]
 8010e5e:	461a      	mov	r2, r3
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	1ad2      	subs	r2, r2, r3
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	895b      	ldrh	r3, [r3, #10]
 8010e68:	4619      	mov	r1, r3
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	1acb      	subs	r3, r1, r3
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d306      	bcc.n	8010e80 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	895b      	ldrh	r3, [r3, #10]
 8010e76:	461a      	mov	r2, r3
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	1ad3      	subs	r3, r2, r3
 8010e7c:	60fb      	str	r3, [r7, #12]
 8010e7e:	e005      	b.n	8010e8c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	895b      	ldrh	r3, [r3, #10]
 8010e84:	461a      	mov	r2, r3
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	1ad3      	subs	r3, r2, r3
 8010e8a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	685a      	ldr	r2, [r3, #4]
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	18d0      	adds	r0, r2, r3
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	685a      	ldr	r2, [r3, #4]
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	4413      	add	r3, r2
 8010e9c:	68fa      	ldr	r2, [r7, #12]
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	f00b fee5 	bl	801cc6e <memcpy>
    offset_to += len;
 8010ea4:	697a      	ldr	r2, [r7, #20]
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	4413      	add	r3, r2
 8010eaa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010eac:	693a      	ldr	r2, [r7, #16]
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	4413      	add	r3, r2
 8010eb2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	895b      	ldrh	r3, [r3, #10]
 8010eb8:	461a      	mov	r2, r3
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d906      	bls.n	8010ece <pbuf_copy+0xb2>
 8010ec0:	4b38      	ldr	r3, [pc, #224]	@ (8010fa4 <pbuf_copy+0x188>)
 8010ec2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8010ec6:	493a      	ldr	r1, [pc, #232]	@ (8010fb0 <pbuf_copy+0x194>)
 8010ec8:	4838      	ldr	r0, [pc, #224]	@ (8010fac <pbuf_copy+0x190>)
 8010eca:	f00b fcb1 	bl	801c830 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	895b      	ldrh	r3, [r3, #10]
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d906      	bls.n	8010ee8 <pbuf_copy+0xcc>
 8010eda:	4b32      	ldr	r3, [pc, #200]	@ (8010fa4 <pbuf_copy+0x188>)
 8010edc:	f240 32da 	movw	r2, #986	@ 0x3da
 8010ee0:	4934      	ldr	r1, [pc, #208]	@ (8010fb4 <pbuf_copy+0x198>)
 8010ee2:	4832      	ldr	r0, [pc, #200]	@ (8010fac <pbuf_copy+0x190>)
 8010ee4:	f00b fca4 	bl	801c830 <iprintf>
    if (offset_from >= p_from->len) {
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	895b      	ldrh	r3, [r3, #10]
 8010eec:	461a      	mov	r2, r3
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d304      	bcc.n	8010efe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	895b      	ldrh	r3, [r3, #10]
 8010f02:	461a      	mov	r2, r3
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	4293      	cmp	r3, r2
 8010f08:	d114      	bne.n	8010f34 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d10c      	bne.n	8010f34 <pbuf_copy+0x118>
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d009      	beq.n	8010f34 <pbuf_copy+0x118>
 8010f20:	4b20      	ldr	r3, [pc, #128]	@ (8010fa4 <pbuf_copy+0x188>)
 8010f22:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8010f26:	4924      	ldr	r1, [pc, #144]	@ (8010fb8 <pbuf_copy+0x19c>)
 8010f28:	4820      	ldr	r0, [pc, #128]	@ (8010fac <pbuf_copy+0x190>)
 8010f2a:	f00b fc81 	bl	801c830 <iprintf>
 8010f2e:	f06f 030f 	mvn.w	r3, #15
 8010f32:	e032      	b.n	8010f9a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d013      	beq.n	8010f62 <pbuf_copy+0x146>
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	895a      	ldrh	r2, [r3, #10]
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	891b      	ldrh	r3, [r3, #8]
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d10d      	bne.n	8010f62 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d009      	beq.n	8010f62 <pbuf_copy+0x146>
 8010f4e:	4b15      	ldr	r3, [pc, #84]	@ (8010fa4 <pbuf_copy+0x188>)
 8010f50:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8010f54:	4919      	ldr	r1, [pc, #100]	@ (8010fbc <pbuf_copy+0x1a0>)
 8010f56:	4815      	ldr	r0, [pc, #84]	@ (8010fac <pbuf_copy+0x190>)
 8010f58:	f00b fc6a 	bl	801c830 <iprintf>
 8010f5c:	f06f 0305 	mvn.w	r3, #5
 8010f60:	e01b      	b.n	8010f9a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d013      	beq.n	8010f90 <pbuf_copy+0x174>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	895a      	ldrh	r2, [r3, #10]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	891b      	ldrh	r3, [r3, #8]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d10d      	bne.n	8010f90 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d009      	beq.n	8010f90 <pbuf_copy+0x174>
 8010f7c:	4b09      	ldr	r3, [pc, #36]	@ (8010fa4 <pbuf_copy+0x188>)
 8010f7e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8010f82:	490e      	ldr	r1, [pc, #56]	@ (8010fbc <pbuf_copy+0x1a0>)
 8010f84:	4809      	ldr	r0, [pc, #36]	@ (8010fac <pbuf_copy+0x190>)
 8010f86:	f00b fc53 	bl	801c830 <iprintf>
 8010f8a:	f06f 0305 	mvn.w	r3, #5
 8010f8e:	e004      	b.n	8010f9a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	f47f af61 	bne.w	8010e5a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010f98:	2300      	movs	r3, #0
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3718      	adds	r7, #24
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}
 8010fa2:	bf00      	nop
 8010fa4:	0801fb90 	.word	0x0801fb90
 8010fa8:	0801fe38 	.word	0x0801fe38
 8010fac:	0801fbf0 	.word	0x0801fbf0
 8010fb0:	0801fe68 	.word	0x0801fe68
 8010fb4:	0801fe80 	.word	0x0801fe80
 8010fb8:	0801fe9c 	.word	0x0801fe9c
 8010fbc:	0801feac 	.word	0x0801feac

08010fc0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b088      	sub	sp, #32
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	60f8      	str	r0, [r7, #12]
 8010fc8:	60b9      	str	r1, [r7, #8]
 8010fca:	4611      	mov	r1, r2
 8010fcc:	461a      	mov	r2, r3
 8010fce:	460b      	mov	r3, r1
 8010fd0:	80fb      	strh	r3, [r7, #6]
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d108      	bne.n	8010ff6 <pbuf_copy_partial+0x36>
 8010fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8011094 <pbuf_copy_partial+0xd4>)
 8010fe6:	f240 420a 	movw	r2, #1034	@ 0x40a
 8010fea:	492b      	ldr	r1, [pc, #172]	@ (8011098 <pbuf_copy_partial+0xd8>)
 8010fec:	482b      	ldr	r0, [pc, #172]	@ (801109c <pbuf_copy_partial+0xdc>)
 8010fee:	f00b fc1f 	bl	801c830 <iprintf>
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	e04a      	b.n	801108c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d108      	bne.n	801100e <pbuf_copy_partial+0x4e>
 8010ffc:	4b25      	ldr	r3, [pc, #148]	@ (8011094 <pbuf_copy_partial+0xd4>)
 8010ffe:	f240 420b 	movw	r2, #1035	@ 0x40b
 8011002:	4927      	ldr	r1, [pc, #156]	@ (80110a0 <pbuf_copy_partial+0xe0>)
 8011004:	4825      	ldr	r0, [pc, #148]	@ (801109c <pbuf_copy_partial+0xdc>)
 8011006:	f00b fc13 	bl	801c830 <iprintf>
 801100a:	2300      	movs	r3, #0
 801100c:	e03e      	b.n	801108c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	61fb      	str	r3, [r7, #28]
 8011012:	e034      	b.n	801107e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011014:	88bb      	ldrh	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d00a      	beq.n	8011030 <pbuf_copy_partial+0x70>
 801101a:	69fb      	ldr	r3, [r7, #28]
 801101c:	895b      	ldrh	r3, [r3, #10]
 801101e:	88ba      	ldrh	r2, [r7, #4]
 8011020:	429a      	cmp	r2, r3
 8011022:	d305      	bcc.n	8011030 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011024:	69fb      	ldr	r3, [r7, #28]
 8011026:	895b      	ldrh	r3, [r3, #10]
 8011028:	88ba      	ldrh	r2, [r7, #4]
 801102a:	1ad3      	subs	r3, r2, r3
 801102c:	80bb      	strh	r3, [r7, #4]
 801102e:	e023      	b.n	8011078 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011030:	69fb      	ldr	r3, [r7, #28]
 8011032:	895a      	ldrh	r2, [r3, #10]
 8011034:	88bb      	ldrh	r3, [r7, #4]
 8011036:	1ad3      	subs	r3, r2, r3
 8011038:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801103a:	8b3a      	ldrh	r2, [r7, #24]
 801103c:	88fb      	ldrh	r3, [r7, #6]
 801103e:	429a      	cmp	r2, r3
 8011040:	d901      	bls.n	8011046 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011042:	88fb      	ldrh	r3, [r7, #6]
 8011044:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011046:	8b7b      	ldrh	r3, [r7, #26]
 8011048:	68ba      	ldr	r2, [r7, #8]
 801104a:	18d0      	adds	r0, r2, r3
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	685a      	ldr	r2, [r3, #4]
 8011050:	88bb      	ldrh	r3, [r7, #4]
 8011052:	4413      	add	r3, r2
 8011054:	8b3a      	ldrh	r2, [r7, #24]
 8011056:	4619      	mov	r1, r3
 8011058:	f00b fe09 	bl	801cc6e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801105c:	8afa      	ldrh	r2, [r7, #22]
 801105e:	8b3b      	ldrh	r3, [r7, #24]
 8011060:	4413      	add	r3, r2
 8011062:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011064:	8b7a      	ldrh	r2, [r7, #26]
 8011066:	8b3b      	ldrh	r3, [r7, #24]
 8011068:	4413      	add	r3, r2
 801106a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801106c:	88fa      	ldrh	r2, [r7, #6]
 801106e:	8b3b      	ldrh	r3, [r7, #24]
 8011070:	1ad3      	subs	r3, r2, r3
 8011072:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011074:	2300      	movs	r3, #0
 8011076:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	61fb      	str	r3, [r7, #28]
 801107e:	88fb      	ldrh	r3, [r7, #6]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d002      	beq.n	801108a <pbuf_copy_partial+0xca>
 8011084:	69fb      	ldr	r3, [r7, #28]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d1c4      	bne.n	8011014 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801108a:	8afb      	ldrh	r3, [r7, #22]
}
 801108c:	4618      	mov	r0, r3
 801108e:	3720      	adds	r7, #32
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	0801fb90 	.word	0x0801fb90
 8011098:	0801fed8 	.word	0x0801fed8
 801109c:	0801fbf0 	.word	0x0801fbf0
 80110a0:	0801fef8 	.word	0x0801fef8

080110a4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b087      	sub	sp, #28
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	460b      	mov	r3, r1
 80110ae:	607a      	str	r2, [r7, #4]
 80110b0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80110b2:	897b      	ldrh	r3, [r7, #10]
 80110b4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80110ba:	e007      	b.n	80110cc <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	895b      	ldrh	r3, [r3, #10]
 80110c0:	8afa      	ldrh	r2, [r7, #22]
 80110c2:	1ad3      	subs	r3, r2, r3
 80110c4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d004      	beq.n	80110dc <pbuf_skip_const+0x38>
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	895b      	ldrh	r3, [r3, #10]
 80110d6:	8afa      	ldrh	r2, [r7, #22]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d2ef      	bcs.n	80110bc <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d002      	beq.n	80110e8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	8afa      	ldrh	r2, [r7, #22]
 80110e6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80110e8:	693b      	ldr	r3, [r7, #16]
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	371c      	adds	r7, #28
 80110ee:	46bd      	mov	sp, r7
 80110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f4:	4770      	bx	lr

080110f6 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80110f6:	b580      	push	{r7, lr}
 80110f8:	b086      	sub	sp, #24
 80110fa:	af00      	add	r7, sp, #0
 80110fc:	60f8      	str	r0, [r7, #12]
 80110fe:	460b      	mov	r3, r1
 8011100:	607a      	str	r2, [r7, #4]
 8011102:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8011104:	897b      	ldrh	r3, [r7, #10]
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	4619      	mov	r1, r3
 801110a:	68f8      	ldr	r0, [r7, #12]
 801110c:	f7ff ffca 	bl	80110a4 <pbuf_skip_const>
 8011110:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8011112:	697b      	ldr	r3, [r7, #20]
}
 8011114:	4618      	mov	r0, r3
 8011116:	3718      	adds	r7, #24
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	4603      	mov	r3, r0
 8011124:	603a      	str	r2, [r7, #0]
 8011126:	71fb      	strb	r3, [r7, #7]
 8011128:	460b      	mov	r3, r1
 801112a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	8919      	ldrh	r1, [r3, #8]
 8011130:	88ba      	ldrh	r2, [r7, #4]
 8011132:	79fb      	ldrb	r3, [r7, #7]
 8011134:	4618      	mov	r0, r3
 8011136:	f7ff fa55 	bl	80105e4 <pbuf_alloc>
 801113a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d101      	bne.n	8011146 <pbuf_clone+0x2a>
    return NULL;
 8011142:	2300      	movs	r3, #0
 8011144:	e011      	b.n	801116a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011146:	6839      	ldr	r1, [r7, #0]
 8011148:	68f8      	ldr	r0, [r7, #12]
 801114a:	f7ff fe67 	bl	8010e1c <pbuf_copy>
 801114e:	4603      	mov	r3, r0
 8011150:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011152:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d006      	beq.n	8011168 <pbuf_clone+0x4c>
 801115a:	4b06      	ldr	r3, [pc, #24]	@ (8011174 <pbuf_clone+0x58>)
 801115c:	f240 5224 	movw	r2, #1316	@ 0x524
 8011160:	4905      	ldr	r1, [pc, #20]	@ (8011178 <pbuf_clone+0x5c>)
 8011162:	4806      	ldr	r0, [pc, #24]	@ (801117c <pbuf_clone+0x60>)
 8011164:	f00b fb64 	bl	801c830 <iprintf>
  return q;
 8011168:	68fb      	ldr	r3, [r7, #12]
}
 801116a:	4618      	mov	r0, r3
 801116c:	3710      	adds	r7, #16
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
 8011172:	bf00      	nop
 8011174:	0801fb90 	.word	0x0801fb90
 8011178:	08020004 	.word	0x08020004
 801117c:	0801fbf0 	.word	0x0801fbf0

08011180 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b084      	sub	sp, #16
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	460b      	mov	r3, r1
 801118a:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 801118c:	887b      	ldrh	r3, [r7, #2]
 801118e:	4619      	mov	r1, r3
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f000 f80c 	bl	80111ae <pbuf_try_get_at>
 8011196:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2b00      	cmp	r3, #0
 801119c:	db02      	blt.n	80111a4 <pbuf_get_at+0x24>
    return (u8_t)ret;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	e000      	b.n	80111a6 <pbuf_get_at+0x26>
  }
  return 0;
 80111a4:	2300      	movs	r3, #0
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3710      	adds	r7, #16
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}

080111ae <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b084      	sub	sp, #16
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
 80111b6:	460b      	mov	r3, r1
 80111b8:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 80111ba:	f107 020a 	add.w	r2, r7, #10
 80111be:	887b      	ldrh	r3, [r7, #2]
 80111c0:	4619      	mov	r1, r3
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f7ff ff6e 	bl	80110a4 <pbuf_skip_const>
 80111c8:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d00a      	beq.n	80111e6 <pbuf_try_get_at+0x38>
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	895a      	ldrh	r2, [r3, #10]
 80111d4:	897b      	ldrh	r3, [r7, #10]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d905      	bls.n	80111e6 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	897a      	ldrh	r2, [r7, #10]
 80111e0:	4413      	add	r3, r2
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	e001      	b.n	80111ea <pbuf_try_get_at+0x3c>
  }
  return -1;
 80111e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3710      	adds	r7, #16
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80111f2:	b580      	push	{r7, lr}
 80111f4:	b084      	sub	sp, #16
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	6078      	str	r0, [r7, #4]
 80111fa:	460b      	mov	r3, r1
 80111fc:	807b      	strh	r3, [r7, #2]
 80111fe:	4613      	mov	r3, r2
 8011200:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8011202:	f107 020a 	add.w	r2, r7, #10
 8011206:	887b      	ldrh	r3, [r7, #2]
 8011208:	4619      	mov	r1, r3
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7ff ff73 	bl	80110f6 <pbuf_skip>
 8011210:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d00a      	beq.n	801122e <pbuf_put_at+0x3c>
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	895a      	ldrh	r2, [r3, #10]
 801121c:	897b      	ldrh	r3, [r7, #10]
 801121e:	429a      	cmp	r2, r3
 8011220:	d905      	bls.n	801122e <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	897a      	ldrh	r2, [r7, #10]
 8011228:	4413      	add	r3, r2
 801122a:	787a      	ldrb	r2, [r7, #1]
 801122c:	701a      	strb	r2, [r3, #0]
  }
}
 801122e:	bf00      	nop
 8011230:	3710      	adds	r7, #16
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}
	...

08011238 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801123c:	f00a fd28 	bl	801bc90 <rand>
 8011240:	4603      	mov	r3, r0
 8011242:	b29b      	uxth	r3, r3
 8011244:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011248:	b29b      	uxth	r3, r3
 801124a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801124e:	b29a      	uxth	r2, r3
 8011250:	4b01      	ldr	r3, [pc, #4]	@ (8011258 <tcp_init+0x20>)
 8011252:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011254:	bf00      	nop
 8011256:	bd80      	pop	{r7, pc}
 8011258:	200000b4 	.word	0x200000b4

0801125c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b082      	sub	sp, #8
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	7d1b      	ldrb	r3, [r3, #20]
 8011268:	2b01      	cmp	r3, #1
 801126a:	d105      	bne.n	8011278 <tcp_free+0x1c>
 801126c:	4b06      	ldr	r3, [pc, #24]	@ (8011288 <tcp_free+0x2c>)
 801126e:	22d4      	movs	r2, #212	@ 0xd4
 8011270:	4906      	ldr	r1, [pc, #24]	@ (801128c <tcp_free+0x30>)
 8011272:	4807      	ldr	r0, [pc, #28]	@ (8011290 <tcp_free+0x34>)
 8011274:	f00b fadc 	bl	801c830 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011278:	6879      	ldr	r1, [r7, #4]
 801127a:	2001      	movs	r0, #1
 801127c:	f7fe fdf8 	bl	800fe70 <memp_free>
}
 8011280:	bf00      	nop
 8011282:	3708      	adds	r7, #8
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}
 8011288:	08020090 	.word	0x08020090
 801128c:	080200c0 	.word	0x080200c0
 8011290:	080200d4 	.word	0x080200d4

08011294 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	7d1b      	ldrb	r3, [r3, #20]
 80112a0:	2b01      	cmp	r3, #1
 80112a2:	d105      	bne.n	80112b0 <tcp_free_listen+0x1c>
 80112a4:	4b06      	ldr	r3, [pc, #24]	@ (80112c0 <tcp_free_listen+0x2c>)
 80112a6:	22df      	movs	r2, #223	@ 0xdf
 80112a8:	4906      	ldr	r1, [pc, #24]	@ (80112c4 <tcp_free_listen+0x30>)
 80112aa:	4807      	ldr	r0, [pc, #28]	@ (80112c8 <tcp_free_listen+0x34>)
 80112ac:	f00b fac0 	bl	801c830 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80112b0:	6879      	ldr	r1, [r7, #4]
 80112b2:	2002      	movs	r0, #2
 80112b4:	f7fe fddc 	bl	800fe70 <memp_free>
}
 80112b8:	bf00      	nop
 80112ba:	3708      	adds	r7, #8
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	08020090 	.word	0x08020090
 80112c4:	080200fc 	.word	0x080200fc
 80112c8:	080200d4 	.word	0x080200d4

080112cc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80112d0:	f000 fea6 	bl	8012020 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80112d4:	4b07      	ldr	r3, [pc, #28]	@ (80112f4 <tcp_tmr+0x28>)
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	3301      	adds	r3, #1
 80112da:	b2da      	uxtb	r2, r3
 80112dc:	4b05      	ldr	r3, [pc, #20]	@ (80112f4 <tcp_tmr+0x28>)
 80112de:	701a      	strb	r2, [r3, #0]
 80112e0:	4b04      	ldr	r3, [pc, #16]	@ (80112f4 <tcp_tmr+0x28>)
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	f003 0301 	and.w	r3, r3, #1
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d001      	beq.n	80112f0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80112ec:	f000 fb56 	bl	801199c <tcp_slowtmr>
  }
}
 80112f0:	bf00      	nop
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	20013d5d 	.word	0x20013d5d

080112f8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d105      	bne.n	8011314 <tcp_remove_listener+0x1c>
 8011308:	4b0d      	ldr	r3, [pc, #52]	@ (8011340 <tcp_remove_listener+0x48>)
 801130a:	22ff      	movs	r2, #255	@ 0xff
 801130c:	490d      	ldr	r1, [pc, #52]	@ (8011344 <tcp_remove_listener+0x4c>)
 801130e:	480e      	ldr	r0, [pc, #56]	@ (8011348 <tcp_remove_listener+0x50>)
 8011310:	f00b fa8e 	bl	801c830 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	60fb      	str	r3, [r7, #12]
 8011318:	e00a      	b.n	8011330 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801131e:	683a      	ldr	r2, [r7, #0]
 8011320:	429a      	cmp	r2, r3
 8011322:	d102      	bne.n	801132a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2200      	movs	r2, #0
 8011328:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	68db      	ldr	r3, [r3, #12]
 801132e:	60fb      	str	r3, [r7, #12]
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d1f1      	bne.n	801131a <tcp_remove_listener+0x22>
    }
  }
}
 8011336:	bf00      	nop
 8011338:	bf00      	nop
 801133a:	3710      	adds	r7, #16
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	08020090 	.word	0x08020090
 8011344:	08020118 	.word	0x08020118
 8011348:	080200d4 	.word	0x080200d4

0801134c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b084      	sub	sp, #16
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d106      	bne.n	8011368 <tcp_listen_closed+0x1c>
 801135a:	4b14      	ldr	r3, [pc, #80]	@ (80113ac <tcp_listen_closed+0x60>)
 801135c:	f240 1211 	movw	r2, #273	@ 0x111
 8011360:	4913      	ldr	r1, [pc, #76]	@ (80113b0 <tcp_listen_closed+0x64>)
 8011362:	4814      	ldr	r0, [pc, #80]	@ (80113b4 <tcp_listen_closed+0x68>)
 8011364:	f00b fa64 	bl	801c830 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	7d1b      	ldrb	r3, [r3, #20]
 801136c:	2b01      	cmp	r3, #1
 801136e:	d006      	beq.n	801137e <tcp_listen_closed+0x32>
 8011370:	4b0e      	ldr	r3, [pc, #56]	@ (80113ac <tcp_listen_closed+0x60>)
 8011372:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8011376:	4910      	ldr	r1, [pc, #64]	@ (80113b8 <tcp_listen_closed+0x6c>)
 8011378:	480e      	ldr	r0, [pc, #56]	@ (80113b4 <tcp_listen_closed+0x68>)
 801137a:	f00b fa59 	bl	801c830 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801137e:	2301      	movs	r3, #1
 8011380:	60fb      	str	r3, [r7, #12]
 8011382:	e00b      	b.n	801139c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011384:	4a0d      	ldr	r2, [pc, #52]	@ (80113bc <tcp_listen_closed+0x70>)
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	6879      	ldr	r1, [r7, #4]
 8011390:	4618      	mov	r0, r3
 8011392:	f7ff ffb1 	bl	80112f8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	3301      	adds	r3, #1
 801139a:	60fb      	str	r3, [r7, #12]
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2b03      	cmp	r3, #3
 80113a0:	d9f0      	bls.n	8011384 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80113a2:	bf00      	nop
 80113a4:	bf00      	nop
 80113a6:	3710      	adds	r7, #16
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	08020090 	.word	0x08020090
 80113b0:	08020140 	.word	0x08020140
 80113b4:	080200d4 	.word	0x080200d4
 80113b8:	0802014c 	.word	0x0802014c
 80113bc:	0806e15c 	.word	0x0806e15c

080113c0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80113c0:	b5b0      	push	{r4, r5, r7, lr}
 80113c2:	b088      	sub	sp, #32
 80113c4:	af04      	add	r7, sp, #16
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	460b      	mov	r3, r1
 80113ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d106      	bne.n	80113e0 <tcp_close_shutdown+0x20>
 80113d2:	4b63      	ldr	r3, [pc, #396]	@ (8011560 <tcp_close_shutdown+0x1a0>)
 80113d4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80113d8:	4962      	ldr	r1, [pc, #392]	@ (8011564 <tcp_close_shutdown+0x1a4>)
 80113da:	4863      	ldr	r0, [pc, #396]	@ (8011568 <tcp_close_shutdown+0x1a8>)
 80113dc:	f00b fa28 	bl	801c830 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80113e0:	78fb      	ldrb	r3, [r7, #3]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d067      	beq.n	80114b6 <tcp_close_shutdown+0xf6>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	7d1b      	ldrb	r3, [r3, #20]
 80113ea:	2b04      	cmp	r3, #4
 80113ec:	d003      	beq.n	80113f6 <tcp_close_shutdown+0x36>
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	7d1b      	ldrb	r3, [r3, #20]
 80113f2:	2b07      	cmp	r3, #7
 80113f4:	d15f      	bne.n	80114b6 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d105      	bne.n	801140a <tcp_close_shutdown+0x4a>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011402:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8011406:	4293      	cmp	r3, r2
 8011408:	d055      	beq.n	80114b6 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	8b5b      	ldrh	r3, [r3, #26]
 801140e:	f003 0310 	and.w	r3, r3, #16
 8011412:	2b00      	cmp	r3, #0
 8011414:	d106      	bne.n	8011424 <tcp_close_shutdown+0x64>
 8011416:	4b52      	ldr	r3, [pc, #328]	@ (8011560 <tcp_close_shutdown+0x1a0>)
 8011418:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801141c:	4953      	ldr	r1, [pc, #332]	@ (801156c <tcp_close_shutdown+0x1ac>)
 801141e:	4852      	ldr	r0, [pc, #328]	@ (8011568 <tcp_close_shutdown+0x1a8>)
 8011420:	f00b fa06 	bl	801c830 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801142c:	687d      	ldr	r5, [r7, #4]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	3304      	adds	r3, #4
 8011432:	687a      	ldr	r2, [r7, #4]
 8011434:	8ad2      	ldrh	r2, [r2, #22]
 8011436:	6879      	ldr	r1, [r7, #4]
 8011438:	8b09      	ldrh	r1, [r1, #24]
 801143a:	9102      	str	r1, [sp, #8]
 801143c:	9201      	str	r2, [sp, #4]
 801143e:	9300      	str	r3, [sp, #0]
 8011440:	462b      	mov	r3, r5
 8011442:	4622      	mov	r2, r4
 8011444:	4601      	mov	r1, r0
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f004 fedc 	bl	8016204 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f001 f8cb 	bl	80125e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011452:	4b47      	ldr	r3, [pc, #284]	@ (8011570 <tcp_close_shutdown+0x1b0>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	429a      	cmp	r2, r3
 801145a:	d105      	bne.n	8011468 <tcp_close_shutdown+0xa8>
 801145c:	4b44      	ldr	r3, [pc, #272]	@ (8011570 <tcp_close_shutdown+0x1b0>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	68db      	ldr	r3, [r3, #12]
 8011462:	4a43      	ldr	r2, [pc, #268]	@ (8011570 <tcp_close_shutdown+0x1b0>)
 8011464:	6013      	str	r3, [r2, #0]
 8011466:	e013      	b.n	8011490 <tcp_close_shutdown+0xd0>
 8011468:	4b41      	ldr	r3, [pc, #260]	@ (8011570 <tcp_close_shutdown+0x1b0>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	60fb      	str	r3, [r7, #12]
 801146e:	e00c      	b.n	801148a <tcp_close_shutdown+0xca>
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	687a      	ldr	r2, [r7, #4]
 8011476:	429a      	cmp	r2, r3
 8011478:	d104      	bne.n	8011484 <tcp_close_shutdown+0xc4>
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	68da      	ldr	r2, [r3, #12]
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	60da      	str	r2, [r3, #12]
 8011482:	e005      	b.n	8011490 <tcp_close_shutdown+0xd0>
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	68db      	ldr	r3, [r3, #12]
 8011488:	60fb      	str	r3, [r7, #12]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d1ef      	bne.n	8011470 <tcp_close_shutdown+0xb0>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2200      	movs	r2, #0
 8011494:	60da      	str	r2, [r3, #12]
 8011496:	4b37      	ldr	r3, [pc, #220]	@ (8011574 <tcp_close_shutdown+0x1b4>)
 8011498:	2201      	movs	r2, #1
 801149a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801149c:	4b36      	ldr	r3, [pc, #216]	@ (8011578 <tcp_close_shutdown+0x1b8>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	687a      	ldr	r2, [r7, #4]
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d102      	bne.n	80114ac <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80114a6:	f003 fd75 	bl	8014f94 <tcp_trigger_input_pcb_close>
 80114aa:	e002      	b.n	80114b2 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f7ff fed5 	bl	801125c <tcp_free>
      }
      return ERR_OK;
 80114b2:	2300      	movs	r3, #0
 80114b4:	e050      	b.n	8011558 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	7d1b      	ldrb	r3, [r3, #20]
 80114ba:	2b02      	cmp	r3, #2
 80114bc:	d03b      	beq.n	8011536 <tcp_close_shutdown+0x176>
 80114be:	2b02      	cmp	r3, #2
 80114c0:	dc44      	bgt.n	801154c <tcp_close_shutdown+0x18c>
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d002      	beq.n	80114cc <tcp_close_shutdown+0x10c>
 80114c6:	2b01      	cmp	r3, #1
 80114c8:	d02a      	beq.n	8011520 <tcp_close_shutdown+0x160>
 80114ca:	e03f      	b.n	801154c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	8adb      	ldrh	r3, [r3, #22]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d021      	beq.n	8011518 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80114d4:	4b29      	ldr	r3, [pc, #164]	@ (801157c <tcp_close_shutdown+0x1bc>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	429a      	cmp	r2, r3
 80114dc:	d105      	bne.n	80114ea <tcp_close_shutdown+0x12a>
 80114de:	4b27      	ldr	r3, [pc, #156]	@ (801157c <tcp_close_shutdown+0x1bc>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	68db      	ldr	r3, [r3, #12]
 80114e4:	4a25      	ldr	r2, [pc, #148]	@ (801157c <tcp_close_shutdown+0x1bc>)
 80114e6:	6013      	str	r3, [r2, #0]
 80114e8:	e013      	b.n	8011512 <tcp_close_shutdown+0x152>
 80114ea:	4b24      	ldr	r3, [pc, #144]	@ (801157c <tcp_close_shutdown+0x1bc>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	60bb      	str	r3, [r7, #8]
 80114f0:	e00c      	b.n	801150c <tcp_close_shutdown+0x14c>
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	68db      	ldr	r3, [r3, #12]
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d104      	bne.n	8011506 <tcp_close_shutdown+0x146>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	68da      	ldr	r2, [r3, #12]
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	60da      	str	r2, [r3, #12]
 8011504:	e005      	b.n	8011512 <tcp_close_shutdown+0x152>
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	60bb      	str	r3, [r7, #8]
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d1ef      	bne.n	80114f2 <tcp_close_shutdown+0x132>
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2200      	movs	r2, #0
 8011516:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011518:	6878      	ldr	r0, [r7, #4]
 801151a:	f7ff fe9f 	bl	801125c <tcp_free>
      break;
 801151e:	e01a      	b.n	8011556 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f7ff ff13 	bl	801134c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011526:	6879      	ldr	r1, [r7, #4]
 8011528:	4815      	ldr	r0, [pc, #84]	@ (8011580 <tcp_close_shutdown+0x1c0>)
 801152a:	f001 f8ad 	bl	8012688 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f7ff feb0 	bl	8011294 <tcp_free_listen>
      break;
 8011534:	e00f      	b.n	8011556 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011536:	6879      	ldr	r1, [r7, #4]
 8011538:	480d      	ldr	r0, [pc, #52]	@ (8011570 <tcp_close_shutdown+0x1b0>)
 801153a:	f001 f8a5 	bl	8012688 <tcp_pcb_remove>
 801153e:	4b0d      	ldr	r3, [pc, #52]	@ (8011574 <tcp_close_shutdown+0x1b4>)
 8011540:	2201      	movs	r2, #1
 8011542:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f7ff fe89 	bl	801125c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801154a:	e004      	b.n	8011556 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f000 f819 	bl	8011584 <tcp_close_shutdown_fin>
 8011552:	4603      	mov	r3, r0
 8011554:	e000      	b.n	8011558 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8011556:	2300      	movs	r3, #0
}
 8011558:	4618      	mov	r0, r3
 801155a:	3710      	adds	r7, #16
 801155c:	46bd      	mov	sp, r7
 801155e:	bdb0      	pop	{r4, r5, r7, pc}
 8011560:	08020090 	.word	0x08020090
 8011564:	08020164 	.word	0x08020164
 8011568:	080200d4 	.word	0x080200d4
 801156c:	08020184 	.word	0x08020184
 8011570:	20013d54 	.word	0x20013d54
 8011574:	20013d5c 	.word	0x20013d5c
 8011578:	20013d98 	.word	0x20013d98
 801157c:	20013d4c 	.word	0x20013d4c
 8011580:	20013d50 	.word	0x20013d50

08011584 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d106      	bne.n	80115a0 <tcp_close_shutdown_fin+0x1c>
 8011592:	4b2e      	ldr	r3, [pc, #184]	@ (801164c <tcp_close_shutdown_fin+0xc8>)
 8011594:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8011598:	492d      	ldr	r1, [pc, #180]	@ (8011650 <tcp_close_shutdown_fin+0xcc>)
 801159a:	482e      	ldr	r0, [pc, #184]	@ (8011654 <tcp_close_shutdown_fin+0xd0>)
 801159c:	f00b f948 	bl	801c830 <iprintf>

  switch (pcb->state) {
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	7d1b      	ldrb	r3, [r3, #20]
 80115a4:	2b07      	cmp	r3, #7
 80115a6:	d020      	beq.n	80115ea <tcp_close_shutdown_fin+0x66>
 80115a8:	2b07      	cmp	r3, #7
 80115aa:	dc2b      	bgt.n	8011604 <tcp_close_shutdown_fin+0x80>
 80115ac:	2b03      	cmp	r3, #3
 80115ae:	d002      	beq.n	80115b6 <tcp_close_shutdown_fin+0x32>
 80115b0:	2b04      	cmp	r3, #4
 80115b2:	d00d      	beq.n	80115d0 <tcp_close_shutdown_fin+0x4c>
 80115b4:	e026      	b.n	8011604 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f003 ff04 	bl	80153c4 <tcp_send_fin>
 80115bc:	4603      	mov	r3, r0
 80115be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80115c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d11f      	bne.n	8011608 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2205      	movs	r2, #5
 80115cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80115ce:	e01b      	b.n	8011608 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f003 fef7 	bl	80153c4 <tcp_send_fin>
 80115d6:	4603      	mov	r3, r0
 80115d8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80115da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d114      	bne.n	801160c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2205      	movs	r2, #5
 80115e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80115e8:	e010      	b.n	801160c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f003 feea 	bl	80153c4 <tcp_send_fin>
 80115f0:	4603      	mov	r3, r0
 80115f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80115f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d109      	bne.n	8011610 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2209      	movs	r2, #9
 8011600:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011602:	e005      	b.n	8011610 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011604:	2300      	movs	r3, #0
 8011606:	e01c      	b.n	8011642 <tcp_close_shutdown_fin+0xbe>
      break;
 8011608:	bf00      	nop
 801160a:	e002      	b.n	8011612 <tcp_close_shutdown_fin+0x8e>
      break;
 801160c:	bf00      	nop
 801160e:	e000      	b.n	8011612 <tcp_close_shutdown_fin+0x8e>
      break;
 8011610:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d103      	bne.n	8011622 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f004 f810 	bl	8015640 <tcp_output>
 8011620:	e00d      	b.n	801163e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801162a:	d108      	bne.n	801163e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	8b5b      	ldrh	r3, [r3, #26]
 8011630:	f043 0308 	orr.w	r3, r3, #8
 8011634:	b29a      	uxth	r2, r3
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801163a:	2300      	movs	r3, #0
 801163c:	e001      	b.n	8011642 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011642:	4618      	mov	r0, r3
 8011644:	3710      	adds	r7, #16
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}
 801164a:	bf00      	nop
 801164c:	08020090 	.word	0x08020090
 8011650:	08020140 	.word	0x08020140
 8011654:	080200d4 	.word	0x080200d4

08011658 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d109      	bne.n	801167a <tcp_close+0x22>
 8011666:	4b0f      	ldr	r3, [pc, #60]	@ (80116a4 <tcp_close+0x4c>)
 8011668:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801166c:	490e      	ldr	r1, [pc, #56]	@ (80116a8 <tcp_close+0x50>)
 801166e:	480f      	ldr	r0, [pc, #60]	@ (80116ac <tcp_close+0x54>)
 8011670:	f00b f8de 	bl	801c830 <iprintf>
 8011674:	f06f 030f 	mvn.w	r3, #15
 8011678:	e00f      	b.n	801169a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	7d1b      	ldrb	r3, [r3, #20]
 801167e:	2b01      	cmp	r3, #1
 8011680:	d006      	beq.n	8011690 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	8b5b      	ldrh	r3, [r3, #26]
 8011686:	f043 0310 	orr.w	r3, r3, #16
 801168a:	b29a      	uxth	r2, r3
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011690:	2101      	movs	r1, #1
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f7ff fe94 	bl	80113c0 <tcp_close_shutdown>
 8011698:	4603      	mov	r3, r0
}
 801169a:	4618      	mov	r0, r3
 801169c:	3708      	adds	r7, #8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	08020090 	.word	0x08020090
 80116a8:	080201a0 	.word	0x080201a0
 80116ac:	080200d4 	.word	0x080200d4

080116b0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b08e      	sub	sp, #56	@ 0x38
 80116b4:	af04      	add	r7, sp, #16
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d107      	bne.n	80116d0 <tcp_abandon+0x20>
 80116c0:	4b52      	ldr	r3, [pc, #328]	@ (801180c <tcp_abandon+0x15c>)
 80116c2:	f240 223d 	movw	r2, #573	@ 0x23d
 80116c6:	4952      	ldr	r1, [pc, #328]	@ (8011810 <tcp_abandon+0x160>)
 80116c8:	4852      	ldr	r0, [pc, #328]	@ (8011814 <tcp_abandon+0x164>)
 80116ca:	f00b f8b1 	bl	801c830 <iprintf>
 80116ce:	e099      	b.n	8011804 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	7d1b      	ldrb	r3, [r3, #20]
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	d106      	bne.n	80116e6 <tcp_abandon+0x36>
 80116d8:	4b4c      	ldr	r3, [pc, #304]	@ (801180c <tcp_abandon+0x15c>)
 80116da:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80116de:	494e      	ldr	r1, [pc, #312]	@ (8011818 <tcp_abandon+0x168>)
 80116e0:	484c      	ldr	r0, [pc, #304]	@ (8011814 <tcp_abandon+0x164>)
 80116e2:	f00b f8a5 	bl	801c830 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	7d1b      	ldrb	r3, [r3, #20]
 80116ea:	2b0a      	cmp	r3, #10
 80116ec:	d107      	bne.n	80116fe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80116ee:	6879      	ldr	r1, [r7, #4]
 80116f0:	484a      	ldr	r0, [pc, #296]	@ (801181c <tcp_abandon+0x16c>)
 80116f2:	f000 ffc9 	bl	8012688 <tcp_pcb_remove>
    tcp_free(pcb);
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f7ff fdb0 	bl	801125c <tcp_free>
 80116fc:	e082      	b.n	8011804 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80116fe:	2300      	movs	r3, #0
 8011700:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8011702:	2300      	movs	r3, #0
 8011704:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801170a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011710:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011718:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	691b      	ldr	r3, [r3, #16]
 801171e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	7d1b      	ldrb	r3, [r3, #20]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d126      	bne.n	8011776 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	8adb      	ldrh	r3, [r3, #22]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d02e      	beq.n	801178e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011730:	4b3b      	ldr	r3, [pc, #236]	@ (8011820 <tcp_abandon+0x170>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	687a      	ldr	r2, [r7, #4]
 8011736:	429a      	cmp	r2, r3
 8011738:	d105      	bne.n	8011746 <tcp_abandon+0x96>
 801173a:	4b39      	ldr	r3, [pc, #228]	@ (8011820 <tcp_abandon+0x170>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	68db      	ldr	r3, [r3, #12]
 8011740:	4a37      	ldr	r2, [pc, #220]	@ (8011820 <tcp_abandon+0x170>)
 8011742:	6013      	str	r3, [r2, #0]
 8011744:	e013      	b.n	801176e <tcp_abandon+0xbe>
 8011746:	4b36      	ldr	r3, [pc, #216]	@ (8011820 <tcp_abandon+0x170>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	61fb      	str	r3, [r7, #28]
 801174c:	e00c      	b.n	8011768 <tcp_abandon+0xb8>
 801174e:	69fb      	ldr	r3, [r7, #28]
 8011750:	68db      	ldr	r3, [r3, #12]
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	429a      	cmp	r2, r3
 8011756:	d104      	bne.n	8011762 <tcp_abandon+0xb2>
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	68da      	ldr	r2, [r3, #12]
 801175c:	69fb      	ldr	r3, [r7, #28]
 801175e:	60da      	str	r2, [r3, #12]
 8011760:	e005      	b.n	801176e <tcp_abandon+0xbe>
 8011762:	69fb      	ldr	r3, [r7, #28]
 8011764:	68db      	ldr	r3, [r3, #12]
 8011766:	61fb      	str	r3, [r7, #28]
 8011768:	69fb      	ldr	r3, [r7, #28]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d1ef      	bne.n	801174e <tcp_abandon+0x9e>
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2200      	movs	r2, #0
 8011772:	60da      	str	r2, [r3, #12]
 8011774:	e00b      	b.n	801178e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	8adb      	ldrh	r3, [r3, #22]
 801177e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011780:	6879      	ldr	r1, [r7, #4]
 8011782:	4828      	ldr	r0, [pc, #160]	@ (8011824 <tcp_abandon+0x174>)
 8011784:	f000 ff80 	bl	8012688 <tcp_pcb_remove>
 8011788:	4b27      	ldr	r3, [pc, #156]	@ (8011828 <tcp_abandon+0x178>)
 801178a:	2201      	movs	r2, #1
 801178c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011792:	2b00      	cmp	r3, #0
 8011794:	d004      	beq.n	80117a0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801179a:	4618      	mov	r0, r3
 801179c:	f000 fd22 	bl	80121e4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d004      	beq.n	80117b2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117ac:	4618      	mov	r0, r3
 80117ae:	f000 fd19 	bl	80121e4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d004      	beq.n	80117c4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117be:	4618      	mov	r0, r3
 80117c0:	f000 fd10 	bl	80121e4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80117c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d00e      	beq.n	80117e8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80117ca:	6879      	ldr	r1, [r7, #4]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	3304      	adds	r3, #4
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	8b12      	ldrh	r2, [r2, #24]
 80117d4:	9202      	str	r2, [sp, #8]
 80117d6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80117d8:	9201      	str	r2, [sp, #4]
 80117da:	9300      	str	r3, [sp, #0]
 80117dc:	460b      	mov	r3, r1
 80117de:	697a      	ldr	r2, [r7, #20]
 80117e0:	69b9      	ldr	r1, [r7, #24]
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f004 fd0e 	bl	8016204 <tcp_rst>
    }
    last_state = pcb->state;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	7d1b      	ldrb	r3, [r3, #20]
 80117ec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f7ff fd34 	bl	801125c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d004      	beq.n	8011804 <tcp_abandon+0x154>
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	f06f 010c 	mvn.w	r1, #12
 8011800:	68f8      	ldr	r0, [r7, #12]
 8011802:	4798      	blx	r3
  }
}
 8011804:	3728      	adds	r7, #40	@ 0x28
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	08020090 	.word	0x08020090
 8011810:	080201d4 	.word	0x080201d4
 8011814:	080200d4 	.word	0x080200d4
 8011818:	080201f0 	.word	0x080201f0
 801181c:	20013d58 	.word	0x20013d58
 8011820:	20013d4c 	.word	0x20013d4c
 8011824:	20013d54 	.word	0x20013d54
 8011828:	20013d5c 	.word	0x20013d5c

0801182c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011834:	2101      	movs	r1, #1
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f7ff ff3a 	bl	80116b0 <tcp_abandon>
}
 801183c:	bf00      	nop
 801183e:	3708      	adds	r7, #8
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}

08011844 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d106      	bne.n	8011860 <tcp_update_rcv_ann_wnd+0x1c>
 8011852:	4b25      	ldr	r3, [pc, #148]	@ (80118e8 <tcp_update_rcv_ann_wnd+0xa4>)
 8011854:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011858:	4924      	ldr	r1, [pc, #144]	@ (80118ec <tcp_update_rcv_ann_wnd+0xa8>)
 801185a:	4825      	ldr	r0, [pc, #148]	@ (80118f0 <tcp_update_rcv_ann_wnd+0xac>)
 801185c:	f00a ffe8 	bl	801c830 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011864:	687a      	ldr	r2, [r7, #4]
 8011866:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011868:	4413      	add	r3, r2
 801186a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8011874:	f241 61d0 	movw	r1, #5840	@ 0x16d0
 8011878:	428a      	cmp	r2, r1
 801187a:	bf28      	it	cs
 801187c:	460a      	movcs	r2, r1
 801187e:	b292      	uxth	r2, r2
 8011880:	4413      	add	r3, r2
 8011882:	68fa      	ldr	r2, [r7, #12]
 8011884:	1ad3      	subs	r3, r2, r3
 8011886:	2b00      	cmp	r3, #0
 8011888:	db08      	blt.n	801189c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011896:	68fa      	ldr	r2, [r7, #12]
 8011898:	1ad3      	subs	r3, r2, r3
 801189a:	e020      	b.n	80118de <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118a4:	1ad3      	subs	r3, r2, r3
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	dd03      	ble.n	80118b2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2200      	movs	r2, #0
 80118ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80118b0:	e014      	b.n	80118dc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118ba:	1ad3      	subs	r3, r2, r3
 80118bc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80118c4:	d306      	bcc.n	80118d4 <tcp_update_rcv_ann_wnd+0x90>
 80118c6:	4b08      	ldr	r3, [pc, #32]	@ (80118e8 <tcp_update_rcv_ann_wnd+0xa4>)
 80118c8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80118cc:	4909      	ldr	r1, [pc, #36]	@ (80118f4 <tcp_update_rcv_ann_wnd+0xb0>)
 80118ce:	4808      	ldr	r0, [pc, #32]	@ (80118f0 <tcp_update_rcv_ann_wnd+0xac>)
 80118d0:	f00a ffae 	bl	801c830 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	b29a      	uxth	r2, r3
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80118dc:	2300      	movs	r3, #0
  }
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3710      	adds	r7, #16
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}
 80118e6:	bf00      	nop
 80118e8:	08020090 	.word	0x08020090
 80118ec:	080202ec 	.word	0x080202ec
 80118f0:	080200d4 	.word	0x080200d4
 80118f4:	08020310 	.word	0x08020310

080118f8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b084      	sub	sp, #16
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	460b      	mov	r3, r1
 8011902:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d107      	bne.n	801191a <tcp_recved+0x22>
 801190a:	4b20      	ldr	r3, [pc, #128]	@ (801198c <tcp_recved+0x94>)
 801190c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8011910:	491f      	ldr	r1, [pc, #124]	@ (8011990 <tcp_recved+0x98>)
 8011912:	4820      	ldr	r0, [pc, #128]	@ (8011994 <tcp_recved+0x9c>)
 8011914:	f00a ff8c 	bl	801c830 <iprintf>
 8011918:	e034      	b.n	8011984 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	7d1b      	ldrb	r3, [r3, #20]
 801191e:	2b01      	cmp	r3, #1
 8011920:	d106      	bne.n	8011930 <tcp_recved+0x38>
 8011922:	4b1a      	ldr	r3, [pc, #104]	@ (801198c <tcp_recved+0x94>)
 8011924:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8011928:	491b      	ldr	r1, [pc, #108]	@ (8011998 <tcp_recved+0xa0>)
 801192a:	481a      	ldr	r0, [pc, #104]	@ (8011994 <tcp_recved+0x9c>)
 801192c:	f00a ff80 	bl	801c830 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011934:	887b      	ldrh	r3, [r7, #2]
 8011936:	4413      	add	r3, r2
 8011938:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801193a:	89fb      	ldrh	r3, [r7, #14]
 801193c:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8011940:	4293      	cmp	r3, r2
 8011942:	d804      	bhi.n	801194e <tcp_recved+0x56>
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011948:	89fa      	ldrh	r2, [r7, #14]
 801194a:	429a      	cmp	r2, r3
 801194c:	d204      	bcs.n	8011958 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8011954:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011956:	e002      	b.n	801195e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	89fa      	ldrh	r2, [r7, #14]
 801195c:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f7ff ff70 	bl	8011844 <tcp_update_rcv_ann_wnd>
 8011964:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	f640 3267 	movw	r2, #2919	@ 0xb67
 801196c:	4293      	cmp	r3, r2
 801196e:	d909      	bls.n	8011984 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	8b5b      	ldrh	r3, [r3, #26]
 8011974:	f043 0302 	orr.w	r3, r3, #2
 8011978:	b29a      	uxth	r2, r3
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f003 fe5e 	bl	8015640 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011984:	3710      	adds	r7, #16
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}
 801198a:	bf00      	nop
 801198c:	08020090 	.word	0x08020090
 8011990:	0802032c 	.word	0x0802032c
 8011994:	080200d4 	.word	0x080200d4
 8011998:	08020344 	.word	0x08020344

0801199c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801199c:	b5b0      	push	{r4, r5, r7, lr}
 801199e:	b090      	sub	sp, #64	@ 0x40
 80119a0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80119a2:	2300      	movs	r3, #0
 80119a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80119a8:	4b95      	ldr	r3, [pc, #596]	@ (8011c00 <tcp_slowtmr+0x264>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	3301      	adds	r3, #1
 80119ae:	4a94      	ldr	r2, [pc, #592]	@ (8011c00 <tcp_slowtmr+0x264>)
 80119b0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80119b2:	4b94      	ldr	r3, [pc, #592]	@ (8011c04 <tcp_slowtmr+0x268>)
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	3301      	adds	r3, #1
 80119b8:	b2da      	uxtb	r2, r3
 80119ba:	4b92      	ldr	r3, [pc, #584]	@ (8011c04 <tcp_slowtmr+0x268>)
 80119bc:	701a      	strb	r2, [r3, #0]
 80119be:	e000      	b.n	80119c2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80119c0:	bf00      	nop
  prev = NULL;
 80119c2:	2300      	movs	r3, #0
 80119c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80119c6:	4b90      	ldr	r3, [pc, #576]	@ (8011c08 <tcp_slowtmr+0x26c>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80119cc:	e29f      	b.n	8011f0e <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80119ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119d0:	7d1b      	ldrb	r3, [r3, #20]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d106      	bne.n	80119e4 <tcp_slowtmr+0x48>
 80119d6:	4b8d      	ldr	r3, [pc, #564]	@ (8011c0c <tcp_slowtmr+0x270>)
 80119d8:	f240 42be 	movw	r2, #1214	@ 0x4be
 80119dc:	498c      	ldr	r1, [pc, #560]	@ (8011c10 <tcp_slowtmr+0x274>)
 80119de:	488d      	ldr	r0, [pc, #564]	@ (8011c14 <tcp_slowtmr+0x278>)
 80119e0:	f00a ff26 	bl	801c830 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80119e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119e6:	7d1b      	ldrb	r3, [r3, #20]
 80119e8:	2b01      	cmp	r3, #1
 80119ea:	d106      	bne.n	80119fa <tcp_slowtmr+0x5e>
 80119ec:	4b87      	ldr	r3, [pc, #540]	@ (8011c0c <tcp_slowtmr+0x270>)
 80119ee:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80119f2:	4989      	ldr	r1, [pc, #548]	@ (8011c18 <tcp_slowtmr+0x27c>)
 80119f4:	4887      	ldr	r0, [pc, #540]	@ (8011c14 <tcp_slowtmr+0x278>)
 80119f6:	f00a ff1b 	bl	801c830 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80119fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119fc:	7d1b      	ldrb	r3, [r3, #20]
 80119fe:	2b0a      	cmp	r3, #10
 8011a00:	d106      	bne.n	8011a10 <tcp_slowtmr+0x74>
 8011a02:	4b82      	ldr	r3, [pc, #520]	@ (8011c0c <tcp_slowtmr+0x270>)
 8011a04:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8011a08:	4984      	ldr	r1, [pc, #528]	@ (8011c1c <tcp_slowtmr+0x280>)
 8011a0a:	4882      	ldr	r0, [pc, #520]	@ (8011c14 <tcp_slowtmr+0x278>)
 8011a0c:	f00a ff10 	bl	801c830 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a12:	7f9a      	ldrb	r2, [r3, #30]
 8011a14:	4b7b      	ldr	r3, [pc, #492]	@ (8011c04 <tcp_slowtmr+0x268>)
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d105      	bne.n	8011a28 <tcp_slowtmr+0x8c>
      prev = pcb;
 8011a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a22:	68db      	ldr	r3, [r3, #12]
 8011a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8011a26:	e272      	b.n	8011f0e <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8011a28:	4b76      	ldr	r3, [pc, #472]	@ (8011c04 <tcp_slowtmr+0x268>)
 8011a2a:	781a      	ldrb	r2, [r3, #0]
 8011a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a2e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8011a30:	2300      	movs	r3, #0
 8011a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8011a36:	2300      	movs	r3, #0
 8011a38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a3e:	7d1b      	ldrb	r3, [r3, #20]
 8011a40:	2b02      	cmp	r3, #2
 8011a42:	d10a      	bne.n	8011a5a <tcp_slowtmr+0xbe>
 8011a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011a4a:	2b05      	cmp	r3, #5
 8011a4c:	d905      	bls.n	8011a5a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8011a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a52:	3301      	adds	r3, #1
 8011a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8011a58:	e11e      	b.n	8011c98 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011a60:	2b0b      	cmp	r3, #11
 8011a62:	d905      	bls.n	8011a70 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8011a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a68:	3301      	adds	r3, #1
 8011a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011a6e:	e113      	b.n	8011c98 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8011a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a72:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d075      	beq.n	8011b66 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d006      	beq.n	8011a90 <tcp_slowtmr+0xf4>
 8011a82:	4b62      	ldr	r3, [pc, #392]	@ (8011c0c <tcp_slowtmr+0x270>)
 8011a84:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8011a88:	4965      	ldr	r1, [pc, #404]	@ (8011c20 <tcp_slowtmr+0x284>)
 8011a8a:	4862      	ldr	r0, [pc, #392]	@ (8011c14 <tcp_slowtmr+0x278>)
 8011a8c:	f00a fed0 	bl	801c830 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d106      	bne.n	8011aa6 <tcp_slowtmr+0x10a>
 8011a98:	4b5c      	ldr	r3, [pc, #368]	@ (8011c0c <tcp_slowtmr+0x270>)
 8011a9a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8011a9e:	4961      	ldr	r1, [pc, #388]	@ (8011c24 <tcp_slowtmr+0x288>)
 8011aa0:	485c      	ldr	r0, [pc, #368]	@ (8011c14 <tcp_slowtmr+0x278>)
 8011aa2:	f00a fec5 	bl	801c830 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aa8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011aac:	2b0b      	cmp	r3, #11
 8011aae:	d905      	bls.n	8011abc <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8011ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ab4:	3301      	adds	r3, #1
 8011ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011aba:	e0ed      	b.n	8011c98 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011abe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	4a58      	ldr	r2, [pc, #352]	@ (8011c28 <tcp_slowtmr+0x28c>)
 8011ac6:	5cd3      	ldrb	r3, [r2, r3]
 8011ac8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011acc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011ad0:	7c7a      	ldrb	r2, [r7, #17]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d907      	bls.n	8011ae6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8011ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ad8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011adc:	3301      	adds	r3, #1
 8011ade:	b2da      	uxtb	r2, r3
 8011ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ae2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8011ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ae8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011aec:	7c7a      	ldrb	r2, [r7, #17]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	f200 80d2 	bhi.w	8011c98 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8011af4:	2301      	movs	r3, #1
 8011af6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8011af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d108      	bne.n	8011b14 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011b02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011b04:	f004 fc72 	bl	80163ec <tcp_zero_window_probe>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d014      	beq.n	8011b38 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8011b0e:	2300      	movs	r3, #0
 8011b10:	623b      	str	r3, [r7, #32]
 8011b12:	e011      	b.n	8011b38 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011b1e:	f003 fb05 	bl	801512c <tcp_split_unsent_seg>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d107      	bne.n	8011b38 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8011b28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011b2a:	f003 fd89 	bl	8015640 <tcp_output>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d101      	bne.n	8011b38 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8011b34:	2300      	movs	r3, #0
 8011b36:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8011b38:	6a3b      	ldr	r3, [r7, #32]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	f000 80ac 	beq.w	8011c98 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8011b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b42:	2200      	movs	r2, #0
 8011b44:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b4a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011b4e:	2b06      	cmp	r3, #6
 8011b50:	f200 80a2 	bhi.w	8011c98 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8011b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b56:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	b2da      	uxtb	r2, r3
 8011b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b60:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8011b64:	e098      	b.n	8011c98 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	db0f      	blt.n	8011b90 <tcp_slowtmr+0x1f4>
 8011b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011b76:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011b7a:	4293      	cmp	r3, r2
 8011b7c:	d008      	beq.n	8011b90 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8011b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	3301      	adds	r3, #1
 8011b88:	b29b      	uxth	r3, r3
 8011b8a:	b21a      	sxth	r2, r3
 8011b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b8e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8011b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b92:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8011b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b98:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	db7b      	blt.n	8011c98 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011ba0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011ba2:	f004 f855 	bl	8015c50 <tcp_rexmit_rto_prepare>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d007      	beq.n	8011bbc <tcp_slowtmr+0x220>
 8011bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d171      	bne.n	8011c98 <tcp_slowtmr+0x2fc>
 8011bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d06d      	beq.n	8011c98 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8011bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bbe:	7d1b      	ldrb	r3, [r3, #20]
 8011bc0:	2b02      	cmp	r3, #2
 8011bc2:	d03a      	beq.n	8011c3a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011bca:	2b0c      	cmp	r3, #12
 8011bcc:	bf28      	it	cs
 8011bce:	230c      	movcs	r3, #12
 8011bd0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bd4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011bd8:	10db      	asrs	r3, r3, #3
 8011bda:	b21b      	sxth	r3, r3
 8011bdc:	461a      	mov	r2, r3
 8011bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011be0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011be4:	4413      	add	r3, r2
 8011be6:	7efa      	ldrb	r2, [r7, #27]
 8011be8:	4910      	ldr	r1, [pc, #64]	@ (8011c2c <tcp_slowtmr+0x290>)
 8011bea:	5c8a      	ldrb	r2, [r1, r2]
 8011bec:	4093      	lsls	r3, r2
 8011bee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	dc1a      	bgt.n	8011c30 <tcp_slowtmr+0x294>
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	b21a      	sxth	r2, r3
 8011bfe:	e019      	b.n	8011c34 <tcp_slowtmr+0x298>
 8011c00:	20013d48 	.word	0x20013d48
 8011c04:	20013d5e 	.word	0x20013d5e
 8011c08:	20013d54 	.word	0x20013d54
 8011c0c:	08020090 	.word	0x08020090
 8011c10:	080203d4 	.word	0x080203d4
 8011c14:	080200d4 	.word	0x080200d4
 8011c18:	08020400 	.word	0x08020400
 8011c1c:	0802042c 	.word	0x0802042c
 8011c20:	0802045c 	.word	0x0802045c
 8011c24:	08020490 	.word	0x08020490
 8011c28:	0806e154 	.word	0x0806e154
 8011c2c:	0806e144 	.word	0x0806e144
 8011c30:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8011c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	bf28      	it	cs
 8011c50:	4613      	movcs	r3, r2
 8011c52:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011c54:	8a7b      	ldrh	r3, [r7, #18]
 8011c56:	085b      	lsrs	r3, r3, #1
 8011c58:	b29a      	uxth	r2, r3
 8011c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c5c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c6a:	005b      	lsls	r3, r3, #1
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d206      	bcs.n	8011c80 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c76:	005b      	lsls	r3, r3, #1
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c7c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8011c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c82:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8011c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c86:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8011c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8011c92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011c94:	f004 f856 	bl	8015d44 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8011c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c9a:	7d1b      	ldrb	r3, [r3, #20]
 8011c9c:	2b06      	cmp	r3, #6
 8011c9e:	d111      	bne.n	8011cc4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8011ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca2:	8b5b      	ldrh	r3, [r3, #26]
 8011ca4:	f003 0310 	and.w	r3, r3, #16
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d00b      	beq.n	8011cc4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011cac:	4b9d      	ldr	r3, [pc, #628]	@ (8011f24 <tcp_slowtmr+0x588>)
 8011cae:	681a      	ldr	r2, [r3, #0]
 8011cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cb2:	6a1b      	ldr	r3, [r3, #32]
 8011cb4:	1ad3      	subs	r3, r2, r3
 8011cb6:	2b28      	cmp	r3, #40	@ 0x28
 8011cb8:	d904      	bls.n	8011cc4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8011cba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011cbe:	3301      	adds	r3, #1
 8011cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cc6:	7a5b      	ldrb	r3, [r3, #9]
 8011cc8:	f003 0308 	and.w	r3, r3, #8
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d04c      	beq.n	8011d6a <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8011cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cd2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011cd4:	2b04      	cmp	r3, #4
 8011cd6:	d003      	beq.n	8011ce0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8011cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cda:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011cdc:	2b07      	cmp	r3, #7
 8011cde:	d144      	bne.n	8011d6a <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ce0:	4b90      	ldr	r3, [pc, #576]	@ (8011f24 <tcp_slowtmr+0x588>)
 8011ce2:	681a      	ldr	r2, [r3, #0]
 8011ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ce6:	6a1b      	ldr	r3, [r3, #32]
 8011ce8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011cf0:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8011cf4:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8011cf8:	498b      	ldr	r1, [pc, #556]	@ (8011f28 <tcp_slowtmr+0x58c>)
 8011cfa:	fba1 1303 	umull	r1, r3, r1, r3
 8011cfe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d90a      	bls.n	8011d1a <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8011d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d08:	3301      	adds	r3, #1
 8011d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8011d0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011d12:	3301      	adds	r3, #1
 8011d14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011d18:	e027      	b.n	8011d6a <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d1a:	4b82      	ldr	r3, [pc, #520]	@ (8011f24 <tcp_slowtmr+0x588>)
 8011d1c:	681a      	ldr	r2, [r3, #0]
 8011d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d20:	6a1b      	ldr	r3, [r3, #32]
 8011d22:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d26:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8011d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d2c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011d30:	4618      	mov	r0, r3
 8011d32:	4b7e      	ldr	r3, [pc, #504]	@ (8011f2c <tcp_slowtmr+0x590>)
 8011d34:	fb00 f303 	mul.w	r3, r0, r3
 8011d38:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011d3a:	497b      	ldr	r1, [pc, #492]	@ (8011f28 <tcp_slowtmr+0x58c>)
 8011d3c:	fba1 1303 	umull	r1, r3, r1, r3
 8011d40:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d911      	bls.n	8011d6a <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8011d46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011d48:	f004 fb10 	bl	801636c <tcp_keepalive>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8011d52:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d107      	bne.n	8011d6a <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8011d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d5c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011d60:	3301      	adds	r3, #1
 8011d62:	b2da      	uxtb	r2, r3
 8011d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d66:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8011d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d011      	beq.n	8011d96 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011d72:	4b6c      	ldr	r3, [pc, #432]	@ (8011f24 <tcp_slowtmr+0x588>)
 8011d74:	681a      	ldr	r2, [r3, #0]
 8011d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d78:	6a1b      	ldr	r3, [r3, #32]
 8011d7a:	1ad2      	subs	r2, r2, r3
 8011d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d7e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011d82:	4619      	mov	r1, r3
 8011d84:	460b      	mov	r3, r1
 8011d86:	005b      	lsls	r3, r3, #1
 8011d88:	440b      	add	r3, r1
 8011d8a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d302      	bcc.n	8011d96 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8011d90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011d92:	f000 fddd 	bl	8012950 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8011d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d98:	7d1b      	ldrb	r3, [r3, #20]
 8011d9a:	2b03      	cmp	r3, #3
 8011d9c:	d10b      	bne.n	8011db6 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d9e:	4b61      	ldr	r3, [pc, #388]	@ (8011f24 <tcp_slowtmr+0x588>)
 8011da0:	681a      	ldr	r2, [r3, #0]
 8011da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011da4:	6a1b      	ldr	r3, [r3, #32]
 8011da6:	1ad3      	subs	r3, r2, r3
 8011da8:	2b28      	cmp	r3, #40	@ 0x28
 8011daa:	d904      	bls.n	8011db6 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8011dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011db0:	3301      	adds	r3, #1
 8011db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8011db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011db8:	7d1b      	ldrb	r3, [r3, #20]
 8011dba:	2b09      	cmp	r3, #9
 8011dbc:	d10b      	bne.n	8011dd6 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011dbe:	4b59      	ldr	r3, [pc, #356]	@ (8011f24 <tcp_slowtmr+0x588>)
 8011dc0:	681a      	ldr	r2, [r3, #0]
 8011dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dc4:	6a1b      	ldr	r3, [r3, #32]
 8011dc6:	1ad3      	subs	r3, r2, r3
 8011dc8:	2bf0      	cmp	r3, #240	@ 0xf0
 8011dca:	d904      	bls.n	8011dd6 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8011dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8011dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d060      	beq.n	8011ea0 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8011dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011de4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8011de6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011de8:	f000 fbfe 	bl	80125e8 <tcp_pcb_purge>
      if (prev != NULL) {
 8011dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d010      	beq.n	8011e14 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011df2:	4b4f      	ldr	r3, [pc, #316]	@ (8011f30 <tcp_slowtmr+0x594>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d106      	bne.n	8011e0a <tcp_slowtmr+0x46e>
 8011dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8011f34 <tcp_slowtmr+0x598>)
 8011dfe:	f240 526d 	movw	r2, #1389	@ 0x56d
 8011e02:	494d      	ldr	r1, [pc, #308]	@ (8011f38 <tcp_slowtmr+0x59c>)
 8011e04:	484d      	ldr	r0, [pc, #308]	@ (8011f3c <tcp_slowtmr+0x5a0>)
 8011e06:	f00a fd13 	bl	801c830 <iprintf>
        prev->next = pcb->next;
 8011e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e0c:	68da      	ldr	r2, [r3, #12]
 8011e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e10:	60da      	str	r2, [r3, #12]
 8011e12:	e00f      	b.n	8011e34 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011e14:	4b46      	ldr	r3, [pc, #280]	@ (8011f30 <tcp_slowtmr+0x594>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d006      	beq.n	8011e2c <tcp_slowtmr+0x490>
 8011e1e:	4b45      	ldr	r3, [pc, #276]	@ (8011f34 <tcp_slowtmr+0x598>)
 8011e20:	f240 5271 	movw	r2, #1393	@ 0x571
 8011e24:	4946      	ldr	r1, [pc, #280]	@ (8011f40 <tcp_slowtmr+0x5a4>)
 8011e26:	4845      	ldr	r0, [pc, #276]	@ (8011f3c <tcp_slowtmr+0x5a0>)
 8011e28:	f00a fd02 	bl	801c830 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e2e:	68db      	ldr	r3, [r3, #12]
 8011e30:	4a3f      	ldr	r2, [pc, #252]	@ (8011f30 <tcp_slowtmr+0x594>)
 8011e32:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8011e34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d013      	beq.n	8011e64 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e3e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e42:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011e44:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8011e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e48:	3304      	adds	r3, #4
 8011e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e4c:	8ad2      	ldrh	r2, [r2, #22]
 8011e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011e50:	8b09      	ldrh	r1, [r1, #24]
 8011e52:	9102      	str	r1, [sp, #8]
 8011e54:	9201      	str	r2, [sp, #4]
 8011e56:	9300      	str	r3, [sp, #0]
 8011e58:	462b      	mov	r3, r5
 8011e5a:	4622      	mov	r2, r4
 8011e5c:	4601      	mov	r1, r0
 8011e5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011e60:	f004 f9d0 	bl	8016204 <tcp_rst>
      err_arg = pcb->callback_arg;
 8011e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e66:	691b      	ldr	r3, [r3, #16]
 8011e68:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e6c:	7d1b      	ldrb	r3, [r3, #20]
 8011e6e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e72:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e76:	68db      	ldr	r3, [r3, #12]
 8011e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011e7a:	6838      	ldr	r0, [r7, #0]
 8011e7c:	f7ff f9ee 	bl	801125c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8011e80:	4b30      	ldr	r3, [pc, #192]	@ (8011f44 <tcp_slowtmr+0x5a8>)
 8011e82:	2200      	movs	r2, #0
 8011e84:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d004      	beq.n	8011e96 <tcp_slowtmr+0x4fa>
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	f06f 010c 	mvn.w	r1, #12
 8011e92:	68b8      	ldr	r0, [r7, #8]
 8011e94:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011e96:	4b2b      	ldr	r3, [pc, #172]	@ (8011f44 <tcp_slowtmr+0x5a8>)
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d037      	beq.n	8011f0e <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8011e9e:	e590      	b.n	80119c2 <tcp_slowtmr+0x26>
      prev = pcb;
 8011ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ea6:	68db      	ldr	r3, [r3, #12]
 8011ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8011eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eac:	7f1b      	ldrb	r3, [r3, #28]
 8011eae:	3301      	adds	r3, #1
 8011eb0:	b2da      	uxtb	r2, r3
 8011eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb8:	7f1a      	ldrb	r2, [r3, #28]
 8011eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ebc:	7f5b      	ldrb	r3, [r3, #29]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d325      	bcc.n	8011f0e <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8011ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8011ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8011f44 <tcp_slowtmr+0x5a8>)
 8011eca:	2200      	movs	r2, #0
 8011ecc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d00b      	beq.n	8011ef0 <tcp_slowtmr+0x554>
 8011ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011ede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ee0:	6912      	ldr	r2, [r2, #16]
 8011ee2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ee4:	4610      	mov	r0, r2
 8011ee6:	4798      	blx	r3
 8011ee8:	4603      	mov	r3, r0
 8011eea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8011eee:	e002      	b.n	8011ef6 <tcp_slowtmr+0x55a>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8011ef6:	4b13      	ldr	r3, [pc, #76]	@ (8011f44 <tcp_slowtmr+0x5a8>)
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	f47f ad60 	bne.w	80119c0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011f00:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d102      	bne.n	8011f0e <tcp_slowtmr+0x572>
          tcp_output(prev);
 8011f08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f0a:	f003 fb99 	bl	8015640 <tcp_output>
  while (pcb != NULL) {
 8011f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	f47f ad5c 	bne.w	80119ce <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011f16:	2300      	movs	r3, #0
 8011f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8011f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8011f48 <tcp_slowtmr+0x5ac>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011f20:	e067      	b.n	8011ff2 <tcp_slowtmr+0x656>
 8011f22:	bf00      	nop
 8011f24:	20013d48 	.word	0x20013d48
 8011f28:	10624dd3 	.word	0x10624dd3
 8011f2c:	000124f8 	.word	0x000124f8
 8011f30:	20013d54 	.word	0x20013d54
 8011f34:	08020090 	.word	0x08020090
 8011f38:	080204c8 	.word	0x080204c8
 8011f3c:	080200d4 	.word	0x080200d4
 8011f40:	080204f4 	.word	0x080204f4
 8011f44:	20013d5c 	.word	0x20013d5c
 8011f48:	20013d58 	.word	0x20013d58
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f4e:	7d1b      	ldrb	r3, [r3, #20]
 8011f50:	2b0a      	cmp	r3, #10
 8011f52:	d006      	beq.n	8011f62 <tcp_slowtmr+0x5c6>
 8011f54:	4b2b      	ldr	r3, [pc, #172]	@ (8012004 <tcp_slowtmr+0x668>)
 8011f56:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8011f5a:	492b      	ldr	r1, [pc, #172]	@ (8012008 <tcp_slowtmr+0x66c>)
 8011f5c:	482b      	ldr	r0, [pc, #172]	@ (801200c <tcp_slowtmr+0x670>)
 8011f5e:	f00a fc67 	bl	801c830 <iprintf>
    pcb_remove = 0;
 8011f62:	2300      	movs	r3, #0
 8011f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011f68:	4b29      	ldr	r3, [pc, #164]	@ (8012010 <tcp_slowtmr+0x674>)
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f6e:	6a1b      	ldr	r3, [r3, #32]
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	2bf0      	cmp	r3, #240	@ 0xf0
 8011f74:	d904      	bls.n	8011f80 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8011f76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011f80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d02f      	beq.n	8011fe8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011f88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011f8a:	f000 fb2d 	bl	80125e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d010      	beq.n	8011fb6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011f94:	4b1f      	ldr	r3, [pc, #124]	@ (8012014 <tcp_slowtmr+0x678>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d106      	bne.n	8011fac <tcp_slowtmr+0x610>
 8011f9e:	4b19      	ldr	r3, [pc, #100]	@ (8012004 <tcp_slowtmr+0x668>)
 8011fa0:	f240 52af 	movw	r2, #1455	@ 0x5af
 8011fa4:	491c      	ldr	r1, [pc, #112]	@ (8012018 <tcp_slowtmr+0x67c>)
 8011fa6:	4819      	ldr	r0, [pc, #100]	@ (801200c <tcp_slowtmr+0x670>)
 8011fa8:	f00a fc42 	bl	801c830 <iprintf>
        prev->next = pcb->next;
 8011fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fae:	68da      	ldr	r2, [r3, #12]
 8011fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fb2:	60da      	str	r2, [r3, #12]
 8011fb4:	e00f      	b.n	8011fd6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011fb6:	4b17      	ldr	r3, [pc, #92]	@ (8012014 <tcp_slowtmr+0x678>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d006      	beq.n	8011fce <tcp_slowtmr+0x632>
 8011fc0:	4b10      	ldr	r3, [pc, #64]	@ (8012004 <tcp_slowtmr+0x668>)
 8011fc2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8011fc6:	4915      	ldr	r1, [pc, #84]	@ (801201c <tcp_slowtmr+0x680>)
 8011fc8:	4810      	ldr	r0, [pc, #64]	@ (801200c <tcp_slowtmr+0x670>)
 8011fca:	f00a fc31 	bl	801c830 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fd0:	68db      	ldr	r3, [r3, #12]
 8011fd2:	4a10      	ldr	r2, [pc, #64]	@ (8012014 <tcp_slowtmr+0x678>)
 8011fd4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fd8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011fe0:	69f8      	ldr	r0, [r7, #28]
 8011fe2:	f7ff f93b 	bl	801125c <tcp_free>
 8011fe6:	e004      	b.n	8011ff2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8011fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fea:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fee:	68db      	ldr	r3, [r3, #12]
 8011ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d1a9      	bne.n	8011f4c <tcp_slowtmr+0x5b0>
    }
  }
}
 8011ff8:	bf00      	nop
 8011ffa:	bf00      	nop
 8011ffc:	3730      	adds	r7, #48	@ 0x30
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bdb0      	pop	{r4, r5, r7, pc}
 8012002:	bf00      	nop
 8012004:	08020090 	.word	0x08020090
 8012008:	08020520 	.word	0x08020520
 801200c:	080200d4 	.word	0x080200d4
 8012010:	20013d48 	.word	0x20013d48
 8012014:	20013d58 	.word	0x20013d58
 8012018:	08020550 	.word	0x08020550
 801201c:	08020578 	.word	0x08020578

08012020 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012026:	4b2d      	ldr	r3, [pc, #180]	@ (80120dc <tcp_fasttmr+0xbc>)
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	3301      	adds	r3, #1
 801202c:	b2da      	uxtb	r2, r3
 801202e:	4b2b      	ldr	r3, [pc, #172]	@ (80120dc <tcp_fasttmr+0xbc>)
 8012030:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012032:	4b2b      	ldr	r3, [pc, #172]	@ (80120e0 <tcp_fasttmr+0xc0>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012038:	e048      	b.n	80120cc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	7f9a      	ldrb	r2, [r3, #30]
 801203e:	4b27      	ldr	r3, [pc, #156]	@ (80120dc <tcp_fasttmr+0xbc>)
 8012040:	781b      	ldrb	r3, [r3, #0]
 8012042:	429a      	cmp	r2, r3
 8012044:	d03f      	beq.n	80120c6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012046:	4b25      	ldr	r3, [pc, #148]	@ (80120dc <tcp_fasttmr+0xbc>)
 8012048:	781a      	ldrb	r2, [r3, #0]
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	8b5b      	ldrh	r3, [r3, #26]
 8012052:	f003 0301 	and.w	r3, r3, #1
 8012056:	2b00      	cmp	r3, #0
 8012058:	d010      	beq.n	801207c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	8b5b      	ldrh	r3, [r3, #26]
 801205e:	f043 0302 	orr.w	r3, r3, #2
 8012062:	b29a      	uxth	r2, r3
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f003 fae9 	bl	8015640 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	8b5b      	ldrh	r3, [r3, #26]
 8012072:	f023 0303 	bic.w	r3, r3, #3
 8012076:	b29a      	uxth	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	8b5b      	ldrh	r3, [r3, #26]
 8012080:	f003 0308 	and.w	r3, r3, #8
 8012084:	2b00      	cmp	r3, #0
 8012086:	d009      	beq.n	801209c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	8b5b      	ldrh	r3, [r3, #26]
 801208c:	f023 0308 	bic.w	r3, r3, #8
 8012090:	b29a      	uxth	r2, r3
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f7ff fa74 	bl	8011584 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	68db      	ldr	r3, [r3, #12]
 80120a0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d00a      	beq.n	80120c0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80120aa:	4b0e      	ldr	r3, [pc, #56]	@ (80120e4 <tcp_fasttmr+0xc4>)
 80120ac:	2200      	movs	r2, #0
 80120ae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f000 f819 	bl	80120e8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80120b6:	4b0b      	ldr	r3, [pc, #44]	@ (80120e4 <tcp_fasttmr+0xc4>)
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d000      	beq.n	80120c0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80120be:	e7b8      	b.n	8012032 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	607b      	str	r3, [r7, #4]
 80120c4:	e002      	b.n	80120cc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	68db      	ldr	r3, [r3, #12]
 80120ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d1b3      	bne.n	801203a <tcp_fasttmr+0x1a>
    }
  }
}
 80120d2:	bf00      	nop
 80120d4:	bf00      	nop
 80120d6:	3708      	adds	r7, #8
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}
 80120dc:	20013d5e 	.word	0x20013d5e
 80120e0:	20013d54 	.word	0x20013d54
 80120e4:	20013d5c 	.word	0x20013d5c

080120e8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80120e8:	b590      	push	{r4, r7, lr}
 80120ea:	b085      	sub	sp, #20
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d109      	bne.n	801210a <tcp_process_refused_data+0x22>
 80120f6:	4b38      	ldr	r3, [pc, #224]	@ (80121d8 <tcp_process_refused_data+0xf0>)
 80120f8:	f240 6209 	movw	r2, #1545	@ 0x609
 80120fc:	4937      	ldr	r1, [pc, #220]	@ (80121dc <tcp_process_refused_data+0xf4>)
 80120fe:	4838      	ldr	r0, [pc, #224]	@ (80121e0 <tcp_process_refused_data+0xf8>)
 8012100:	f00a fb96 	bl	801c830 <iprintf>
 8012104:	f06f 030f 	mvn.w	r3, #15
 8012108:	e061      	b.n	80121ce <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801210e:	7b5b      	ldrb	r3, [r3, #13]
 8012110:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012116:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012124:	2b00      	cmp	r3, #0
 8012126:	d00b      	beq.n	8012140 <tcp_process_refused_data+0x58>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6918      	ldr	r0, [r3, #16]
 8012132:	2300      	movs	r3, #0
 8012134:	68ba      	ldr	r2, [r7, #8]
 8012136:	6879      	ldr	r1, [r7, #4]
 8012138:	47a0      	blx	r4
 801213a:	4603      	mov	r3, r0
 801213c:	73fb      	strb	r3, [r7, #15]
 801213e:	e007      	b.n	8012150 <tcp_process_refused_data+0x68>
 8012140:	2300      	movs	r3, #0
 8012142:	68ba      	ldr	r2, [r7, #8]
 8012144:	6879      	ldr	r1, [r7, #4]
 8012146:	2000      	movs	r0, #0
 8012148:	f000 f8a6 	bl	8012298 <tcp_recv_null>
 801214c:	4603      	mov	r3, r0
 801214e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d12b      	bne.n	80121b0 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012158:	7bbb      	ldrb	r3, [r7, #14]
 801215a:	f003 0320 	and.w	r3, r3, #32
 801215e:	2b00      	cmp	r3, #0
 8012160:	d034      	beq.n	80121cc <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012166:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 801216a:	4293      	cmp	r3, r2
 801216c:	d005      	beq.n	801217a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012172:	3301      	adds	r3, #1
 8012174:	b29a      	uxth	r2, r3
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012180:	2b00      	cmp	r3, #0
 8012182:	d00b      	beq.n	801219c <tcp_process_refused_data+0xb4>
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	6918      	ldr	r0, [r3, #16]
 801218e:	2300      	movs	r3, #0
 8012190:	2200      	movs	r2, #0
 8012192:	6879      	ldr	r1, [r7, #4]
 8012194:	47a0      	blx	r4
 8012196:	4603      	mov	r3, r0
 8012198:	73fb      	strb	r3, [r7, #15]
 801219a:	e001      	b.n	80121a0 <tcp_process_refused_data+0xb8>
 801219c:	2300      	movs	r3, #0
 801219e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80121a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121a4:	f113 0f0d 	cmn.w	r3, #13
 80121a8:	d110      	bne.n	80121cc <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80121aa:	f06f 030c 	mvn.w	r3, #12
 80121ae:	e00e      	b.n	80121ce <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80121b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121b4:	f113 0f0d 	cmn.w	r3, #13
 80121b8:	d102      	bne.n	80121c0 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80121ba:	f06f 030c 	mvn.w	r3, #12
 80121be:	e006      	b.n	80121ce <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	68ba      	ldr	r2, [r7, #8]
 80121c4:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80121c6:	f06f 0304 	mvn.w	r3, #4
 80121ca:	e000      	b.n	80121ce <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80121cc:	2300      	movs	r3, #0
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3714      	adds	r7, #20
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd90      	pop	{r4, r7, pc}
 80121d6:	bf00      	nop
 80121d8:	08020090 	.word	0x08020090
 80121dc:	080205a0 	.word	0x080205a0
 80121e0:	080200d4 	.word	0x080200d4

080121e4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80121ec:	e007      	b.n	80121fe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f000 f80a 	bl	801220e <tcp_seg_free>
    seg = next;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d1f4      	bne.n	80121ee <tcp_segs_free+0xa>
  }
}
 8012204:	bf00      	nop
 8012206:	bf00      	nop
 8012208:	3710      	adds	r7, #16
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}

0801220e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801220e:	b580      	push	{r7, lr}
 8012210:	b082      	sub	sp, #8
 8012212:	af00      	add	r7, sp, #0
 8012214:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d00c      	beq.n	8012236 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	685b      	ldr	r3, [r3, #4]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d004      	beq.n	801222e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	685b      	ldr	r3, [r3, #4]
 8012228:	4618      	mov	r0, r3
 801222a:	f7fe fcc3 	bl	8010bb4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801222e:	6879      	ldr	r1, [r7, #4]
 8012230:	2003      	movs	r0, #3
 8012232:	f7fd fe1d 	bl	800fe70 <memp_free>
  }
}
 8012236:	bf00      	nop
 8012238:	3708      	adds	r7, #8
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
	...

08012240 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d106      	bne.n	801225c <tcp_seg_copy+0x1c>
 801224e:	4b0f      	ldr	r3, [pc, #60]	@ (801228c <tcp_seg_copy+0x4c>)
 8012250:	f240 6282 	movw	r2, #1666	@ 0x682
 8012254:	490e      	ldr	r1, [pc, #56]	@ (8012290 <tcp_seg_copy+0x50>)
 8012256:	480f      	ldr	r0, [pc, #60]	@ (8012294 <tcp_seg_copy+0x54>)
 8012258:	f00a faea 	bl	801c830 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801225c:	2003      	movs	r0, #3
 801225e:	f7fd fdb5 	bl	800fdcc <memp_malloc>
 8012262:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d101      	bne.n	801226e <tcp_seg_copy+0x2e>
    return NULL;
 801226a:	2300      	movs	r3, #0
 801226c:	e00a      	b.n	8012284 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801226e:	2214      	movs	r2, #20
 8012270:	6879      	ldr	r1, [r7, #4]
 8012272:	68f8      	ldr	r0, [r7, #12]
 8012274:	f00a fcfb 	bl	801cc6e <memcpy>
  pbuf_ref(cseg->p);
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	4618      	mov	r0, r3
 801227e:	f7fe fd3f 	bl	8010d00 <pbuf_ref>
  return cseg;
 8012282:	68fb      	ldr	r3, [r7, #12]
}
 8012284:	4618      	mov	r0, r3
 8012286:	3710      	adds	r7, #16
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}
 801228c:	08020090 	.word	0x08020090
 8012290:	080205e4 	.word	0x080205e4
 8012294:	080200d4 	.word	0x080200d4

08012298 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b084      	sub	sp, #16
 801229c:	af00      	add	r7, sp, #0
 801229e:	60f8      	str	r0, [r7, #12]
 80122a0:	60b9      	str	r1, [r7, #8]
 80122a2:	607a      	str	r2, [r7, #4]
 80122a4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d109      	bne.n	80122c0 <tcp_recv_null+0x28>
 80122ac:	4b12      	ldr	r3, [pc, #72]	@ (80122f8 <tcp_recv_null+0x60>)
 80122ae:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80122b2:	4912      	ldr	r1, [pc, #72]	@ (80122fc <tcp_recv_null+0x64>)
 80122b4:	4812      	ldr	r0, [pc, #72]	@ (8012300 <tcp_recv_null+0x68>)
 80122b6:	f00a fabb 	bl	801c830 <iprintf>
 80122ba:	f06f 030f 	mvn.w	r3, #15
 80122be:	e016      	b.n	80122ee <tcp_recv_null+0x56>

  if (p != NULL) {
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d009      	beq.n	80122da <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	891b      	ldrh	r3, [r3, #8]
 80122ca:	4619      	mov	r1, r3
 80122cc:	68b8      	ldr	r0, [r7, #8]
 80122ce:	f7ff fb13 	bl	80118f8 <tcp_recved>
    pbuf_free(p);
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f7fe fc6e 	bl	8010bb4 <pbuf_free>
 80122d8:	e008      	b.n	80122ec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80122da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d104      	bne.n	80122ec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80122e2:	68b8      	ldr	r0, [r7, #8]
 80122e4:	f7ff f9b8 	bl	8011658 <tcp_close>
 80122e8:	4603      	mov	r3, r0
 80122ea:	e000      	b.n	80122ee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80122ec:	2300      	movs	r3, #0
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3710      	adds	r7, #16
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	08020090 	.word	0x08020090
 80122fc:	08020600 	.word	0x08020600
 8012300:	080200d4 	.word	0x080200d4

08012304 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b086      	sub	sp, #24
 8012308:	af00      	add	r7, sp, #0
 801230a:	4603      	mov	r3, r0
 801230c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012312:	2b00      	cmp	r3, #0
 8012314:	db01      	blt.n	801231a <tcp_kill_prio+0x16>
 8012316:	79fb      	ldrb	r3, [r7, #7]
 8012318:	e000      	b.n	801231c <tcp_kill_prio+0x18>
 801231a:	237f      	movs	r3, #127	@ 0x7f
 801231c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801231e:	7afb      	ldrb	r3, [r7, #11]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d034      	beq.n	801238e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012324:	7afb      	ldrb	r3, [r7, #11]
 8012326:	3b01      	subs	r3, #1
 8012328:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801232a:	2300      	movs	r3, #0
 801232c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801232e:	2300      	movs	r3, #0
 8012330:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012332:	4b19      	ldr	r3, [pc, #100]	@ (8012398 <tcp_kill_prio+0x94>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	617b      	str	r3, [r7, #20]
 8012338:	e01f      	b.n	801237a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	7d5b      	ldrb	r3, [r3, #21]
 801233e:	7afa      	ldrb	r2, [r7, #11]
 8012340:	429a      	cmp	r2, r3
 8012342:	d80c      	bhi.n	801235e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012348:	7afa      	ldrb	r2, [r7, #11]
 801234a:	429a      	cmp	r2, r3
 801234c:	d112      	bne.n	8012374 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801234e:	4b13      	ldr	r3, [pc, #76]	@ (801239c <tcp_kill_prio+0x98>)
 8012350:	681a      	ldr	r2, [r3, #0]
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	6a1b      	ldr	r3, [r3, #32]
 8012356:	1ad3      	subs	r3, r2, r3
 8012358:	68fa      	ldr	r2, [r7, #12]
 801235a:	429a      	cmp	r2, r3
 801235c:	d80a      	bhi.n	8012374 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801235e:	4b0f      	ldr	r3, [pc, #60]	@ (801239c <tcp_kill_prio+0x98>)
 8012360:	681a      	ldr	r2, [r3, #0]
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	6a1b      	ldr	r3, [r3, #32]
 8012366:	1ad3      	subs	r3, r2, r3
 8012368:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	7d5b      	ldrb	r3, [r3, #21]
 8012372:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	68db      	ldr	r3, [r3, #12]
 8012378:	617b      	str	r3, [r7, #20]
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d1dc      	bne.n	801233a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d004      	beq.n	8012390 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012386:	6938      	ldr	r0, [r7, #16]
 8012388:	f7ff fa50 	bl	801182c <tcp_abort>
 801238c:	e000      	b.n	8012390 <tcp_kill_prio+0x8c>
    return;
 801238e:	bf00      	nop
  }
}
 8012390:	3718      	adds	r7, #24
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
 8012396:	bf00      	nop
 8012398:	20013d54 	.word	0x20013d54
 801239c:	20013d48 	.word	0x20013d48

080123a0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b086      	sub	sp, #24
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	4603      	mov	r3, r0
 80123a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80123aa:	79fb      	ldrb	r3, [r7, #7]
 80123ac:	2b08      	cmp	r3, #8
 80123ae:	d009      	beq.n	80123c4 <tcp_kill_state+0x24>
 80123b0:	79fb      	ldrb	r3, [r7, #7]
 80123b2:	2b09      	cmp	r3, #9
 80123b4:	d006      	beq.n	80123c4 <tcp_kill_state+0x24>
 80123b6:	4b1a      	ldr	r3, [pc, #104]	@ (8012420 <tcp_kill_state+0x80>)
 80123b8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80123bc:	4919      	ldr	r1, [pc, #100]	@ (8012424 <tcp_kill_state+0x84>)
 80123be:	481a      	ldr	r0, [pc, #104]	@ (8012428 <tcp_kill_state+0x88>)
 80123c0:	f00a fa36 	bl	801c830 <iprintf>

  inactivity = 0;
 80123c4:	2300      	movs	r3, #0
 80123c6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80123c8:	2300      	movs	r3, #0
 80123ca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80123cc:	4b17      	ldr	r3, [pc, #92]	@ (801242c <tcp_kill_state+0x8c>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	617b      	str	r3, [r7, #20]
 80123d2:	e017      	b.n	8012404 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	7d1b      	ldrb	r3, [r3, #20]
 80123d8:	79fa      	ldrb	r2, [r7, #7]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d10f      	bne.n	80123fe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80123de:	4b14      	ldr	r3, [pc, #80]	@ (8012430 <tcp_kill_state+0x90>)
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	6a1b      	ldr	r3, [r3, #32]
 80123e6:	1ad3      	subs	r3, r2, r3
 80123e8:	68fa      	ldr	r2, [r7, #12]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d807      	bhi.n	80123fe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80123ee:	4b10      	ldr	r3, [pc, #64]	@ (8012430 <tcp_kill_state+0x90>)
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	6a1b      	ldr	r3, [r3, #32]
 80123f6:	1ad3      	subs	r3, r2, r3
 80123f8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	68db      	ldr	r3, [r3, #12]
 8012402:	617b      	str	r3, [r7, #20]
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d1e4      	bne.n	80123d4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d003      	beq.n	8012418 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012410:	2100      	movs	r1, #0
 8012412:	6938      	ldr	r0, [r7, #16]
 8012414:	f7ff f94c 	bl	80116b0 <tcp_abandon>
  }
}
 8012418:	bf00      	nop
 801241a:	3718      	adds	r7, #24
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}
 8012420:	08020090 	.word	0x08020090
 8012424:	0802061c 	.word	0x0802061c
 8012428:	080200d4 	.word	0x080200d4
 801242c:	20013d54 	.word	0x20013d54
 8012430:	20013d48 	.word	0x20013d48

08012434 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801243a:	2300      	movs	r3, #0
 801243c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801243e:	2300      	movs	r3, #0
 8012440:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012442:	4b12      	ldr	r3, [pc, #72]	@ (801248c <tcp_kill_timewait+0x58>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	60fb      	str	r3, [r7, #12]
 8012448:	e012      	b.n	8012470 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801244a:	4b11      	ldr	r3, [pc, #68]	@ (8012490 <tcp_kill_timewait+0x5c>)
 801244c:	681a      	ldr	r2, [r3, #0]
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	6a1b      	ldr	r3, [r3, #32]
 8012452:	1ad3      	subs	r3, r2, r3
 8012454:	687a      	ldr	r2, [r7, #4]
 8012456:	429a      	cmp	r2, r3
 8012458:	d807      	bhi.n	801246a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801245a:	4b0d      	ldr	r3, [pc, #52]	@ (8012490 <tcp_kill_timewait+0x5c>)
 801245c:	681a      	ldr	r2, [r3, #0]
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	6a1b      	ldr	r3, [r3, #32]
 8012462:	1ad3      	subs	r3, r2, r3
 8012464:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	60fb      	str	r3, [r7, #12]
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d1e9      	bne.n	801244a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d002      	beq.n	8012482 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801247c:	68b8      	ldr	r0, [r7, #8]
 801247e:	f7ff f9d5 	bl	801182c <tcp_abort>
  }
}
 8012482:	bf00      	nop
 8012484:	3710      	adds	r7, #16
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}
 801248a:	bf00      	nop
 801248c:	20013d58 	.word	0x20013d58
 8012490:	20013d48 	.word	0x20013d48

08012494 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801249a:	4b10      	ldr	r3, [pc, #64]	@ (80124dc <tcp_handle_closepend+0x48>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80124a0:	e014      	b.n	80124cc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	68db      	ldr	r3, [r3, #12]
 80124a6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	8b5b      	ldrh	r3, [r3, #26]
 80124ac:	f003 0308 	and.w	r3, r3, #8
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d009      	beq.n	80124c8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	8b5b      	ldrh	r3, [r3, #26]
 80124b8:	f023 0308 	bic.w	r3, r3, #8
 80124bc:	b29a      	uxth	r2, r3
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f7ff f85e 	bl	8011584 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d1e7      	bne.n	80124a2 <tcp_handle_closepend+0xe>
  }
}
 80124d2:	bf00      	nop
 80124d4:	bf00      	nop
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}
 80124dc:	20013d54 	.word	0x20013d54

080124e0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	4603      	mov	r3, r0
 80124e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80124ea:	2001      	movs	r0, #1
 80124ec:	f7fd fc6e 	bl	800fdcc <memp_malloc>
 80124f0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d126      	bne.n	8012546 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80124f8:	f7ff ffcc 	bl	8012494 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80124fc:	f7ff ff9a 	bl	8012434 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012500:	2001      	movs	r0, #1
 8012502:	f7fd fc63 	bl	800fdcc <memp_malloc>
 8012506:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d11b      	bne.n	8012546 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801250e:	2009      	movs	r0, #9
 8012510:	f7ff ff46 	bl	80123a0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012514:	2001      	movs	r0, #1
 8012516:	f7fd fc59 	bl	800fdcc <memp_malloc>
 801251a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d111      	bne.n	8012546 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012522:	2008      	movs	r0, #8
 8012524:	f7ff ff3c 	bl	80123a0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012528:	2001      	movs	r0, #1
 801252a:	f7fd fc4f 	bl	800fdcc <memp_malloc>
 801252e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d107      	bne.n	8012546 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012536:	79fb      	ldrb	r3, [r7, #7]
 8012538:	4618      	mov	r0, r3
 801253a:	f7ff fee3 	bl	8012304 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801253e:	2001      	movs	r0, #1
 8012540:	f7fd fc44 	bl	800fdcc <memp_malloc>
 8012544:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d03f      	beq.n	80125cc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801254c:	229c      	movs	r2, #156	@ 0x9c
 801254e:	2100      	movs	r1, #0
 8012550:	68f8      	ldr	r0, [r7, #12]
 8012552:	f00a facf 	bl	801caf4 <memset>
    pcb->prio = prio;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	79fa      	ldrb	r2, [r7, #7]
 801255a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8012562:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 801256c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	22ff      	movs	r2, #255	@ 0xff
 801257a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012582:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	2206      	movs	r2, #6
 8012588:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	2206      	movs	r2, #6
 8012590:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012598:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2201      	movs	r2, #1
 801259e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80125a2:	4b0d      	ldr	r3, [pc, #52]	@ (80125d8 <tcp_alloc+0xf8>)
 80125a4:	681a      	ldr	r2, [r3, #0]
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80125aa:	4b0c      	ldr	r3, [pc, #48]	@ (80125dc <tcp_alloc+0xfc>)
 80125ac:	781a      	ldrb	r2, [r3, #0]
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 80125b8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	4a08      	ldr	r2, [pc, #32]	@ (80125e0 <tcp_alloc+0x100>)
 80125c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	4a07      	ldr	r2, [pc, #28]	@ (80125e4 <tcp_alloc+0x104>)
 80125c8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80125cc:	68fb      	ldr	r3, [r7, #12]
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3710      	adds	r7, #16
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	bf00      	nop
 80125d8:	20013d48 	.word	0x20013d48
 80125dc:	20013d5e 	.word	0x20013d5e
 80125e0:	08012299 	.word	0x08012299
 80125e4:	006ddd00 	.word	0x006ddd00

080125e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d107      	bne.n	8012606 <tcp_pcb_purge+0x1e>
 80125f6:	4b21      	ldr	r3, [pc, #132]	@ (801267c <tcp_pcb_purge+0x94>)
 80125f8:	f640 0251 	movw	r2, #2129	@ 0x851
 80125fc:	4920      	ldr	r1, [pc, #128]	@ (8012680 <tcp_pcb_purge+0x98>)
 80125fe:	4821      	ldr	r0, [pc, #132]	@ (8012684 <tcp_pcb_purge+0x9c>)
 8012600:	f00a f916 	bl	801c830 <iprintf>
 8012604:	e037      	b.n	8012676 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	7d1b      	ldrb	r3, [r3, #20]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d033      	beq.n	8012676 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012612:	2b0a      	cmp	r3, #10
 8012614:	d02f      	beq.n	8012676 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801261a:	2b01      	cmp	r3, #1
 801261c:	d02b      	beq.n	8012676 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012622:	2b00      	cmp	r3, #0
 8012624:	d007      	beq.n	8012636 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801262a:	4618      	mov	r0, r3
 801262c:	f7fe fac2 	bl	8010bb4 <pbuf_free>
      pcb->refused_data = NULL;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2200      	movs	r2, #0
 8012634:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801263a:	2b00      	cmp	r3, #0
 801263c:	d002      	beq.n	8012644 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f000 f986 	bl	8012950 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801264a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012650:	4618      	mov	r0, r3
 8012652:	f7ff fdc7 	bl	80121e4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801265a:	4618      	mov	r0, r3
 801265c:	f7ff fdc2 	bl	80121e4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2200      	movs	r2, #0
 8012664:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2200      	movs	r2, #0
 8012672:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012676:	3708      	adds	r7, #8
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	08020090 	.word	0x08020090
 8012680:	080206dc 	.word	0x080206dc
 8012684:	080200d4 	.word	0x080200d4

08012688 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d106      	bne.n	80126a6 <tcp_pcb_remove+0x1e>
 8012698:	4b3e      	ldr	r3, [pc, #248]	@ (8012794 <tcp_pcb_remove+0x10c>)
 801269a:	f640 0283 	movw	r2, #2179	@ 0x883
 801269e:	493e      	ldr	r1, [pc, #248]	@ (8012798 <tcp_pcb_remove+0x110>)
 80126a0:	483e      	ldr	r0, [pc, #248]	@ (801279c <tcp_pcb_remove+0x114>)
 80126a2:	f00a f8c5 	bl	801c830 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d106      	bne.n	80126ba <tcp_pcb_remove+0x32>
 80126ac:	4b39      	ldr	r3, [pc, #228]	@ (8012794 <tcp_pcb_remove+0x10c>)
 80126ae:	f640 0284 	movw	r2, #2180	@ 0x884
 80126b2:	493b      	ldr	r1, [pc, #236]	@ (80127a0 <tcp_pcb_remove+0x118>)
 80126b4:	4839      	ldr	r0, [pc, #228]	@ (801279c <tcp_pcb_remove+0x114>)
 80126b6:	f00a f8bb 	bl	801c830 <iprintf>

  TCP_RMV(pcblist, pcb);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	683a      	ldr	r2, [r7, #0]
 80126c0:	429a      	cmp	r2, r3
 80126c2:	d105      	bne.n	80126d0 <tcp_pcb_remove+0x48>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	68da      	ldr	r2, [r3, #12]
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	601a      	str	r2, [r3, #0]
 80126ce:	e013      	b.n	80126f8 <tcp_pcb_remove+0x70>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	60fb      	str	r3, [r7, #12]
 80126d6:	e00c      	b.n	80126f2 <tcp_pcb_remove+0x6a>
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	68db      	ldr	r3, [r3, #12]
 80126dc:	683a      	ldr	r2, [r7, #0]
 80126de:	429a      	cmp	r2, r3
 80126e0:	d104      	bne.n	80126ec <tcp_pcb_remove+0x64>
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	68da      	ldr	r2, [r3, #12]
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	60da      	str	r2, [r3, #12]
 80126ea:	e005      	b.n	80126f8 <tcp_pcb_remove+0x70>
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	68db      	ldr	r3, [r3, #12]
 80126f0:	60fb      	str	r3, [r7, #12]
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d1ef      	bne.n	80126d8 <tcp_pcb_remove+0x50>
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	2200      	movs	r2, #0
 80126fc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80126fe:	6838      	ldr	r0, [r7, #0]
 8012700:	f7ff ff72 	bl	80125e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	7d1b      	ldrb	r3, [r3, #20]
 8012708:	2b0a      	cmp	r3, #10
 801270a:	d013      	beq.n	8012734 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012710:	2b01      	cmp	r3, #1
 8012712:	d00f      	beq.n	8012734 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012714:	683b      	ldr	r3, [r7, #0]
 8012716:	8b5b      	ldrh	r3, [r3, #26]
 8012718:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801271c:	2b00      	cmp	r3, #0
 801271e:	d009      	beq.n	8012734 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	8b5b      	ldrh	r3, [r3, #26]
 8012724:	f043 0302 	orr.w	r3, r3, #2
 8012728:	b29a      	uxth	r2, r3
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801272e:	6838      	ldr	r0, [r7, #0]
 8012730:	f002 ff86 	bl	8015640 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	7d1b      	ldrb	r3, [r3, #20]
 8012738:	2b01      	cmp	r3, #1
 801273a:	d020      	beq.n	801277e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012740:	2b00      	cmp	r3, #0
 8012742:	d006      	beq.n	8012752 <tcp_pcb_remove+0xca>
 8012744:	4b13      	ldr	r3, [pc, #76]	@ (8012794 <tcp_pcb_remove+0x10c>)
 8012746:	f640 0293 	movw	r2, #2195	@ 0x893
 801274a:	4916      	ldr	r1, [pc, #88]	@ (80127a4 <tcp_pcb_remove+0x11c>)
 801274c:	4813      	ldr	r0, [pc, #76]	@ (801279c <tcp_pcb_remove+0x114>)
 801274e:	f00a f86f 	bl	801c830 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012756:	2b00      	cmp	r3, #0
 8012758:	d006      	beq.n	8012768 <tcp_pcb_remove+0xe0>
 801275a:	4b0e      	ldr	r3, [pc, #56]	@ (8012794 <tcp_pcb_remove+0x10c>)
 801275c:	f640 0294 	movw	r2, #2196	@ 0x894
 8012760:	4911      	ldr	r1, [pc, #68]	@ (80127a8 <tcp_pcb_remove+0x120>)
 8012762:	480e      	ldr	r0, [pc, #56]	@ (801279c <tcp_pcb_remove+0x114>)
 8012764:	f00a f864 	bl	801c830 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801276c:	2b00      	cmp	r3, #0
 801276e:	d006      	beq.n	801277e <tcp_pcb_remove+0xf6>
 8012770:	4b08      	ldr	r3, [pc, #32]	@ (8012794 <tcp_pcb_remove+0x10c>)
 8012772:	f640 0296 	movw	r2, #2198	@ 0x896
 8012776:	490d      	ldr	r1, [pc, #52]	@ (80127ac <tcp_pcb_remove+0x124>)
 8012778:	4808      	ldr	r0, [pc, #32]	@ (801279c <tcp_pcb_remove+0x114>)
 801277a:	f00a f859 	bl	801c830 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	2200      	movs	r2, #0
 8012782:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	2200      	movs	r2, #0
 8012788:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801278a:	bf00      	nop
 801278c:	3710      	adds	r7, #16
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
 8012792:	bf00      	nop
 8012794:	08020090 	.word	0x08020090
 8012798:	080206f8 	.word	0x080206f8
 801279c:	080200d4 	.word	0x080200d4
 80127a0:	08020714 	.word	0x08020714
 80127a4:	08020734 	.word	0x08020734
 80127a8:	0802074c 	.word	0x0802074c
 80127ac:	08020768 	.word	0x08020768

080127b0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d106      	bne.n	80127cc <tcp_next_iss+0x1c>
 80127be:	4b0a      	ldr	r3, [pc, #40]	@ (80127e8 <tcp_next_iss+0x38>)
 80127c0:	f640 02af 	movw	r2, #2223	@ 0x8af
 80127c4:	4909      	ldr	r1, [pc, #36]	@ (80127ec <tcp_next_iss+0x3c>)
 80127c6:	480a      	ldr	r0, [pc, #40]	@ (80127f0 <tcp_next_iss+0x40>)
 80127c8:	f00a f832 	bl	801c830 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80127cc:	4b09      	ldr	r3, [pc, #36]	@ (80127f4 <tcp_next_iss+0x44>)
 80127ce:	681a      	ldr	r2, [r3, #0]
 80127d0:	4b09      	ldr	r3, [pc, #36]	@ (80127f8 <tcp_next_iss+0x48>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4413      	add	r3, r2
 80127d6:	4a07      	ldr	r2, [pc, #28]	@ (80127f4 <tcp_next_iss+0x44>)
 80127d8:	6013      	str	r3, [r2, #0]
  return iss;
 80127da:	4b06      	ldr	r3, [pc, #24]	@ (80127f4 <tcp_next_iss+0x44>)
 80127dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80127de:	4618      	mov	r0, r3
 80127e0:	3708      	adds	r7, #8
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}
 80127e6:	bf00      	nop
 80127e8:	08020090 	.word	0x08020090
 80127ec:	08020780 	.word	0x08020780
 80127f0:	080200d4 	.word	0x080200d4
 80127f4:	200000b8 	.word	0x200000b8
 80127f8:	20013d48 	.word	0x20013d48

080127fc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b086      	sub	sp, #24
 8012800:	af00      	add	r7, sp, #0
 8012802:	4603      	mov	r3, r0
 8012804:	60b9      	str	r1, [r7, #8]
 8012806:	607a      	str	r2, [r7, #4]
 8012808:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d106      	bne.n	801281e <tcp_eff_send_mss_netif+0x22>
 8012810:	4b14      	ldr	r3, [pc, #80]	@ (8012864 <tcp_eff_send_mss_netif+0x68>)
 8012812:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8012816:	4914      	ldr	r1, [pc, #80]	@ (8012868 <tcp_eff_send_mss_netif+0x6c>)
 8012818:	4814      	ldr	r0, [pc, #80]	@ (801286c <tcp_eff_send_mss_netif+0x70>)
 801281a:	f00a f809 	bl	801c830 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d101      	bne.n	8012828 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012824:	89fb      	ldrh	r3, [r7, #14]
 8012826:	e019      	b.n	801285c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801282c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801282e:	8afb      	ldrh	r3, [r7, #22]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d012      	beq.n	801285a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012834:	2328      	movs	r3, #40	@ 0x28
 8012836:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012838:	8afa      	ldrh	r2, [r7, #22]
 801283a:	8abb      	ldrh	r3, [r7, #20]
 801283c:	429a      	cmp	r2, r3
 801283e:	d904      	bls.n	801284a <tcp_eff_send_mss_netif+0x4e>
 8012840:	8afa      	ldrh	r2, [r7, #22]
 8012842:	8abb      	ldrh	r3, [r7, #20]
 8012844:	1ad3      	subs	r3, r2, r3
 8012846:	b29b      	uxth	r3, r3
 8012848:	e000      	b.n	801284c <tcp_eff_send_mss_netif+0x50>
 801284a:	2300      	movs	r3, #0
 801284c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801284e:	8a7a      	ldrh	r2, [r7, #18]
 8012850:	89fb      	ldrh	r3, [r7, #14]
 8012852:	4293      	cmp	r3, r2
 8012854:	bf28      	it	cs
 8012856:	4613      	movcs	r3, r2
 8012858:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801285a:	89fb      	ldrh	r3, [r7, #14]
}
 801285c:	4618      	mov	r0, r3
 801285e:	3718      	adds	r7, #24
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}
 8012864:	08020090 	.word	0x08020090
 8012868:	0802079c 	.word	0x0802079c
 801286c:	080200d4 	.word	0x080200d4

08012870 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b084      	sub	sp, #16
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
 8012878:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d119      	bne.n	80128b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012884:	4b10      	ldr	r3, [pc, #64]	@ (80128c8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012886:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801288a:	4910      	ldr	r1, [pc, #64]	@ (80128cc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801288c:	4810      	ldr	r0, [pc, #64]	@ (80128d0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801288e:	f009 ffcf 	bl	801c830 <iprintf>

  while (pcb != NULL) {
 8012892:	e011      	b.n	80128b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	681a      	ldr	r2, [r3, #0]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	429a      	cmp	r2, r3
 801289e:	d108      	bne.n	80128b2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80128a6:	68f8      	ldr	r0, [r7, #12]
 80128a8:	f7fe ffc0 	bl	801182c <tcp_abort>
      pcb = next;
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	60fb      	str	r3, [r7, #12]
 80128b0:	e002      	b.n	80128b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	68db      	ldr	r3, [r3, #12]
 80128b6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d1ea      	bne.n	8012894 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80128be:	bf00      	nop
 80128c0:	bf00      	nop
 80128c2:	3710      	adds	r7, #16
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	08020090 	.word	0x08020090
 80128cc:	080207c4 	.word	0x080207c4
 80128d0:	080200d4 	.word	0x080200d4

080128d4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b084      	sub	sp, #16
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d02a      	beq.n	801293a <tcp_netif_ip_addr_changed+0x66>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d026      	beq.n	801293a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80128ec:	4b15      	ldr	r3, [pc, #84]	@ (8012944 <tcp_netif_ip_addr_changed+0x70>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4619      	mov	r1, r3
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f7ff ffbc 	bl	8012870 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80128f8:	4b13      	ldr	r3, [pc, #76]	@ (8012948 <tcp_netif_ip_addr_changed+0x74>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	4619      	mov	r1, r3
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f7ff ffb6 	bl	8012870 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d017      	beq.n	801293a <tcp_netif_ip_addr_changed+0x66>
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d013      	beq.n	801293a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012912:	4b0e      	ldr	r3, [pc, #56]	@ (801294c <tcp_netif_ip_addr_changed+0x78>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	60fb      	str	r3, [r7, #12]
 8012918:	e00c      	b.n	8012934 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	429a      	cmp	r2, r3
 8012924:	d103      	bne.n	801292e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	681a      	ldr	r2, [r3, #0]
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	68db      	ldr	r3, [r3, #12]
 8012932:	60fb      	str	r3, [r7, #12]
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d1ef      	bne.n	801291a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801293a:	bf00      	nop
 801293c:	3710      	adds	r7, #16
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}
 8012942:	bf00      	nop
 8012944:	20013d54 	.word	0x20013d54
 8012948:	20013d4c 	.word	0x20013d4c
 801294c:	20013d50 	.word	0x20013d50

08012950 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801295c:	2b00      	cmp	r3, #0
 801295e:	d007      	beq.n	8012970 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012964:	4618      	mov	r0, r3
 8012966:	f7ff fc3d 	bl	80121e4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2200      	movs	r2, #0
 801296e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012970:	bf00      	nop
 8012972:	3708      	adds	r7, #8
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012978:	b590      	push	{r4, r7, lr}
 801297a:	b08d      	sub	sp, #52	@ 0x34
 801297c:	af04      	add	r7, sp, #16
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d105      	bne.n	8012994 <tcp_input+0x1c>
 8012988:	4b8b      	ldr	r3, [pc, #556]	@ (8012bb8 <tcp_input+0x240>)
 801298a:	2283      	movs	r2, #131	@ 0x83
 801298c:	498b      	ldr	r1, [pc, #556]	@ (8012bbc <tcp_input+0x244>)
 801298e:	488c      	ldr	r0, [pc, #560]	@ (8012bc0 <tcp_input+0x248>)
 8012990:	f009 ff4e 	bl	801c830 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	4a8a      	ldr	r2, [pc, #552]	@ (8012bc4 <tcp_input+0x24c>)
 801299a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	895b      	ldrh	r3, [r3, #10]
 80129a0:	2b13      	cmp	r3, #19
 80129a2:	f240 83e3 	bls.w	801316c <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80129a6:	4b88      	ldr	r3, [pc, #544]	@ (8012bc8 <tcp_input+0x250>)
 80129a8:	695b      	ldr	r3, [r3, #20]
 80129aa:	4a87      	ldr	r2, [pc, #540]	@ (8012bc8 <tcp_input+0x250>)
 80129ac:	6812      	ldr	r2, [r2, #0]
 80129ae:	4611      	mov	r1, r2
 80129b0:	4618      	mov	r0, r3
 80129b2:	f008 f81f 	bl	801a9f4 <ip4_addr_isbroadcast_u32>
 80129b6:	4603      	mov	r3, r0
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	f040 83d9 	bne.w	8013170 <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80129be:	4b82      	ldr	r3, [pc, #520]	@ (8012bc8 <tcp_input+0x250>)
 80129c0:	695b      	ldr	r3, [r3, #20]
 80129c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80129c6:	2be0      	cmp	r3, #224	@ 0xe0
 80129c8:	f000 83d2 	beq.w	8013170 <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	891a      	ldrh	r2, [r3, #8]
 80129d0:	4b7e      	ldr	r3, [pc, #504]	@ (8012bcc <tcp_input+0x254>)
 80129d2:	9300      	str	r3, [sp, #0]
 80129d4:	4b7e      	ldr	r3, [pc, #504]	@ (8012bd0 <tcp_input+0x258>)
 80129d6:	2106      	movs	r1, #6
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f7fc fcfb 	bl	800f3d4 <ip_chksum_pseudo>
 80129de:	4603      	mov	r3, r0
 80129e0:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 80129e2:	8a3b      	ldrh	r3, [r7, #16]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f040 83c5 	bne.w	8013174 <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80129ea:	4b76      	ldr	r3, [pc, #472]	@ (8012bc4 <tcp_input+0x24c>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	899b      	ldrh	r3, [r3, #12]
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fc fbbc 	bl	800f170 <lwip_htons>
 80129f8:	4603      	mov	r3, r0
 80129fa:	0b1b      	lsrs	r3, r3, #12
 80129fc:	b29b      	uxth	r3, r3
 80129fe:	b2db      	uxtb	r3, r3
 8012a00:	009b      	lsls	r3, r3, #2
 8012a02:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012a04:	7bfb      	ldrb	r3, [r7, #15]
 8012a06:	2b13      	cmp	r3, #19
 8012a08:	f240 83b6 	bls.w	8013178 <tcp_input+0x800>
 8012a0c:	7bfb      	ldrb	r3, [r7, #15]
 8012a0e:	b29a      	uxth	r2, r3
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	891b      	ldrh	r3, [r3, #8]
 8012a14:	429a      	cmp	r2, r3
 8012a16:	f200 83af 	bhi.w	8013178 <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012a1a:	7bfb      	ldrb	r3, [r7, #15]
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	3b14      	subs	r3, #20
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	4b6c      	ldr	r3, [pc, #432]	@ (8012bd4 <tcp_input+0x25c>)
 8012a24:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012a26:	4b6c      	ldr	r3, [pc, #432]	@ (8012bd8 <tcp_input+0x260>)
 8012a28:	2200      	movs	r2, #0
 8012a2a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	895a      	ldrh	r2, [r3, #10]
 8012a30:	7bfb      	ldrb	r3, [r7, #15]
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d309      	bcc.n	8012a4c <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012a38:	4b66      	ldr	r3, [pc, #408]	@ (8012bd4 <tcp_input+0x25c>)
 8012a3a:	881a      	ldrh	r2, [r3, #0]
 8012a3c:	4b67      	ldr	r3, [pc, #412]	@ (8012bdc <tcp_input+0x264>)
 8012a3e:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012a40:	7bfb      	ldrb	r3, [r7, #15]
 8012a42:	4619      	mov	r1, r3
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f7fe f82f 	bl	8010aa8 <pbuf_remove_header>
 8012a4a:	e04e      	b.n	8012aea <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d105      	bne.n	8012a60 <tcp_input+0xe8>
 8012a54:	4b58      	ldr	r3, [pc, #352]	@ (8012bb8 <tcp_input+0x240>)
 8012a56:	22c2      	movs	r2, #194	@ 0xc2
 8012a58:	4961      	ldr	r1, [pc, #388]	@ (8012be0 <tcp_input+0x268>)
 8012a5a:	4859      	ldr	r0, [pc, #356]	@ (8012bc0 <tcp_input+0x248>)
 8012a5c:	f009 fee8 	bl	801c830 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012a60:	2114      	movs	r1, #20
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f7fe f820 	bl	8010aa8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	895a      	ldrh	r2, [r3, #10]
 8012a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8012bdc <tcp_input+0x264>)
 8012a6e:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012a70:	4b58      	ldr	r3, [pc, #352]	@ (8012bd4 <tcp_input+0x25c>)
 8012a72:	881a      	ldrh	r2, [r3, #0]
 8012a74:	4b59      	ldr	r3, [pc, #356]	@ (8012bdc <tcp_input+0x264>)
 8012a76:	881b      	ldrh	r3, [r3, #0]
 8012a78:	1ad3      	subs	r3, r2, r3
 8012a7a:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012a7c:	4b57      	ldr	r3, [pc, #348]	@ (8012bdc <tcp_input+0x264>)
 8012a7e:	881b      	ldrh	r3, [r3, #0]
 8012a80:	4619      	mov	r1, r3
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f7fe f810 	bl	8010aa8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	895b      	ldrh	r3, [r3, #10]
 8012a8e:	89ba      	ldrh	r2, [r7, #12]
 8012a90:	429a      	cmp	r2, r3
 8012a92:	f200 8373 	bhi.w	801317c <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	685b      	ldr	r3, [r3, #4]
 8012a9c:	4a4e      	ldr	r2, [pc, #312]	@ (8012bd8 <tcp_input+0x260>)
 8012a9e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	89ba      	ldrh	r2, [r7, #12]
 8012aa6:	4611      	mov	r1, r2
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f7fd fffd 	bl	8010aa8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	891a      	ldrh	r2, [r3, #8]
 8012ab2:	89bb      	ldrh	r3, [r7, #12]
 8012ab4:	1ad3      	subs	r3, r2, r3
 8012ab6:	b29a      	uxth	r2, r3
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	895b      	ldrh	r3, [r3, #10]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d005      	beq.n	8012ad0 <tcp_input+0x158>
 8012ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8012bb8 <tcp_input+0x240>)
 8012ac6:	22df      	movs	r2, #223	@ 0xdf
 8012ac8:	4946      	ldr	r1, [pc, #280]	@ (8012be4 <tcp_input+0x26c>)
 8012aca:	483d      	ldr	r0, [pc, #244]	@ (8012bc0 <tcp_input+0x248>)
 8012acc:	f009 feb0 	bl	801c830 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	891a      	ldrh	r2, [r3, #8]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	891b      	ldrh	r3, [r3, #8]
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d005      	beq.n	8012aea <tcp_input+0x172>
 8012ade:	4b36      	ldr	r3, [pc, #216]	@ (8012bb8 <tcp_input+0x240>)
 8012ae0:	22e0      	movs	r2, #224	@ 0xe0
 8012ae2:	4941      	ldr	r1, [pc, #260]	@ (8012be8 <tcp_input+0x270>)
 8012ae4:	4836      	ldr	r0, [pc, #216]	@ (8012bc0 <tcp_input+0x248>)
 8012ae6:	f009 fea3 	bl	801c830 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012aea:	4b36      	ldr	r3, [pc, #216]	@ (8012bc4 <tcp_input+0x24c>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	881b      	ldrh	r3, [r3, #0]
 8012af0:	b29b      	uxth	r3, r3
 8012af2:	4a34      	ldr	r2, [pc, #208]	@ (8012bc4 <tcp_input+0x24c>)
 8012af4:	6814      	ldr	r4, [r2, #0]
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7fc fb3a 	bl	800f170 <lwip_htons>
 8012afc:	4603      	mov	r3, r0
 8012afe:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012b00:	4b30      	ldr	r3, [pc, #192]	@ (8012bc4 <tcp_input+0x24c>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	885b      	ldrh	r3, [r3, #2]
 8012b06:	b29b      	uxth	r3, r3
 8012b08:	4a2e      	ldr	r2, [pc, #184]	@ (8012bc4 <tcp_input+0x24c>)
 8012b0a:	6814      	ldr	r4, [r2, #0]
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f7fc fb2f 	bl	800f170 <lwip_htons>
 8012b12:	4603      	mov	r3, r0
 8012b14:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012b16:	4b2b      	ldr	r3, [pc, #172]	@ (8012bc4 <tcp_input+0x24c>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	685b      	ldr	r3, [r3, #4]
 8012b1c:	4a29      	ldr	r2, [pc, #164]	@ (8012bc4 <tcp_input+0x24c>)
 8012b1e:	6814      	ldr	r4, [r2, #0]
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7fc fb3a 	bl	800f19a <lwip_htonl>
 8012b26:	4603      	mov	r3, r0
 8012b28:	6063      	str	r3, [r4, #4]
 8012b2a:	6863      	ldr	r3, [r4, #4]
 8012b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8012bec <tcp_input+0x274>)
 8012b2e:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012b30:	4b24      	ldr	r3, [pc, #144]	@ (8012bc4 <tcp_input+0x24c>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	689b      	ldr	r3, [r3, #8]
 8012b36:	4a23      	ldr	r2, [pc, #140]	@ (8012bc4 <tcp_input+0x24c>)
 8012b38:	6814      	ldr	r4, [r2, #0]
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7fc fb2d 	bl	800f19a <lwip_htonl>
 8012b40:	4603      	mov	r3, r0
 8012b42:	60a3      	str	r3, [r4, #8]
 8012b44:	68a3      	ldr	r3, [r4, #8]
 8012b46:	4a2a      	ldr	r2, [pc, #168]	@ (8012bf0 <tcp_input+0x278>)
 8012b48:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8012bc4 <tcp_input+0x24c>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	89db      	ldrh	r3, [r3, #14]
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	4a1c      	ldr	r2, [pc, #112]	@ (8012bc4 <tcp_input+0x24c>)
 8012b54:	6814      	ldr	r4, [r2, #0]
 8012b56:	4618      	mov	r0, r3
 8012b58:	f7fc fb0a 	bl	800f170 <lwip_htons>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012b60:	4b18      	ldr	r3, [pc, #96]	@ (8012bc4 <tcp_input+0x24c>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	899b      	ldrh	r3, [r3, #12]
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f7fc fb01 	bl	800f170 <lwip_htons>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	b2db      	uxtb	r3, r3
 8012b72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012b76:	b2da      	uxtb	r2, r3
 8012b78:	4b1e      	ldr	r3, [pc, #120]	@ (8012bf4 <tcp_input+0x27c>)
 8012b7a:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	891a      	ldrh	r2, [r3, #8]
 8012b80:	4b1d      	ldr	r3, [pc, #116]	@ (8012bf8 <tcp_input+0x280>)
 8012b82:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012b84:	4b1b      	ldr	r3, [pc, #108]	@ (8012bf4 <tcp_input+0x27c>)
 8012b86:	781b      	ldrb	r3, [r3, #0]
 8012b88:	f003 0303 	and.w	r3, r3, #3
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d00c      	beq.n	8012baa <tcp_input+0x232>
    tcplen++;
 8012b90:	4b19      	ldr	r3, [pc, #100]	@ (8012bf8 <tcp_input+0x280>)
 8012b92:	881b      	ldrh	r3, [r3, #0]
 8012b94:	3301      	adds	r3, #1
 8012b96:	b29a      	uxth	r2, r3
 8012b98:	4b17      	ldr	r3, [pc, #92]	@ (8012bf8 <tcp_input+0x280>)
 8012b9a:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	891a      	ldrh	r2, [r3, #8]
 8012ba0:	4b15      	ldr	r3, [pc, #84]	@ (8012bf8 <tcp_input+0x280>)
 8012ba2:	881b      	ldrh	r3, [r3, #0]
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	f200 82eb 	bhi.w	8013180 <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012baa:	2300      	movs	r3, #0
 8012bac:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bae:	4b13      	ldr	r3, [pc, #76]	@ (8012bfc <tcp_input+0x284>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	61bb      	str	r3, [r7, #24]
 8012bb4:	e09b      	b.n	8012cee <tcp_input+0x376>
 8012bb6:	bf00      	nop
 8012bb8:	080207f8 	.word	0x080207f8
 8012bbc:	0802082c 	.word	0x0802082c
 8012bc0:	08020844 	.word	0x08020844
 8012bc4:	20013d74 	.word	0x20013d74
 8012bc8:	2000a2d4 	.word	0x2000a2d4
 8012bcc:	2000a2e8 	.word	0x2000a2e8
 8012bd0:	2000a2e4 	.word	0x2000a2e4
 8012bd4:	20013d78 	.word	0x20013d78
 8012bd8:	20013d7c 	.word	0x20013d7c
 8012bdc:	20013d7a 	.word	0x20013d7a
 8012be0:	0802086c 	.word	0x0802086c
 8012be4:	0802087c 	.word	0x0802087c
 8012be8:	08020888 	.word	0x08020888
 8012bec:	20013d84 	.word	0x20013d84
 8012bf0:	20013d88 	.word	0x20013d88
 8012bf4:	20013d90 	.word	0x20013d90
 8012bf8:	20013d8e 	.word	0x20013d8e
 8012bfc:	20013d54 	.word	0x20013d54
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012c00:	69bb      	ldr	r3, [r7, #24]
 8012c02:	7d1b      	ldrb	r3, [r3, #20]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d105      	bne.n	8012c14 <tcp_input+0x29c>
 8012c08:	4b88      	ldr	r3, [pc, #544]	@ (8012e2c <tcp_input+0x4b4>)
 8012c0a:	22fb      	movs	r2, #251	@ 0xfb
 8012c0c:	4988      	ldr	r1, [pc, #544]	@ (8012e30 <tcp_input+0x4b8>)
 8012c0e:	4889      	ldr	r0, [pc, #548]	@ (8012e34 <tcp_input+0x4bc>)
 8012c10:	f009 fe0e 	bl	801c830 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	7d1b      	ldrb	r3, [r3, #20]
 8012c18:	2b0a      	cmp	r3, #10
 8012c1a:	d105      	bne.n	8012c28 <tcp_input+0x2b0>
 8012c1c:	4b83      	ldr	r3, [pc, #524]	@ (8012e2c <tcp_input+0x4b4>)
 8012c1e:	22fc      	movs	r2, #252	@ 0xfc
 8012c20:	4985      	ldr	r1, [pc, #532]	@ (8012e38 <tcp_input+0x4c0>)
 8012c22:	4884      	ldr	r0, [pc, #528]	@ (8012e34 <tcp_input+0x4bc>)
 8012c24:	f009 fe04 	bl	801c830 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	7d1b      	ldrb	r3, [r3, #20]
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d105      	bne.n	8012c3c <tcp_input+0x2c4>
 8012c30:	4b7e      	ldr	r3, [pc, #504]	@ (8012e2c <tcp_input+0x4b4>)
 8012c32:	22fd      	movs	r2, #253	@ 0xfd
 8012c34:	4981      	ldr	r1, [pc, #516]	@ (8012e3c <tcp_input+0x4c4>)
 8012c36:	487f      	ldr	r0, [pc, #508]	@ (8012e34 <tcp_input+0x4bc>)
 8012c38:	f009 fdfa 	bl	801c830 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c3c:	69bb      	ldr	r3, [r7, #24]
 8012c3e:	7a1b      	ldrb	r3, [r3, #8]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d00c      	beq.n	8012c5e <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012c44:	69bb      	ldr	r3, [r7, #24]
 8012c46:	7a1a      	ldrb	r2, [r3, #8]
 8012c48:	4b7d      	ldr	r3, [pc, #500]	@ (8012e40 <tcp_input+0x4c8>)
 8012c4a:	685b      	ldr	r3, [r3, #4]
 8012c4c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012c50:	3301      	adds	r3, #1
 8012c52:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d002      	beq.n	8012c5e <tcp_input+0x2e6>
      prev = pcb;
 8012c58:	69bb      	ldr	r3, [r7, #24]
 8012c5a:	61fb      	str	r3, [r7, #28]
      continue;
 8012c5c:	e044      	b.n	8012ce8 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 8012c5e:	69bb      	ldr	r3, [r7, #24]
 8012c60:	8b1a      	ldrh	r2, [r3, #24]
 8012c62:	4b78      	ldr	r3, [pc, #480]	@ (8012e44 <tcp_input+0x4cc>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	881b      	ldrh	r3, [r3, #0]
 8012c68:	b29b      	uxth	r3, r3
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d13a      	bne.n	8012ce4 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	8ada      	ldrh	r2, [r3, #22]
 8012c72:	4b74      	ldr	r3, [pc, #464]	@ (8012e44 <tcp_input+0x4cc>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	885b      	ldrh	r3, [r3, #2]
 8012c78:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d132      	bne.n	8012ce4 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c7e:	69bb      	ldr	r3, [r7, #24]
 8012c80:	685a      	ldr	r2, [r3, #4]
 8012c82:	4b6f      	ldr	r3, [pc, #444]	@ (8012e40 <tcp_input+0x4c8>)
 8012c84:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012c86:	429a      	cmp	r2, r3
 8012c88:	d12c      	bne.n	8012ce4 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012c8a:	69bb      	ldr	r3, [r7, #24]
 8012c8c:	681a      	ldr	r2, [r3, #0]
 8012c8e:	4b6c      	ldr	r3, [pc, #432]	@ (8012e40 <tcp_input+0x4c8>)
 8012c90:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d126      	bne.n	8012ce4 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012c96:	69bb      	ldr	r3, [r7, #24]
 8012c98:	68db      	ldr	r3, [r3, #12]
 8012c9a:	69ba      	ldr	r2, [r7, #24]
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d106      	bne.n	8012cae <tcp_input+0x336>
 8012ca0:	4b62      	ldr	r3, [pc, #392]	@ (8012e2c <tcp_input+0x4b4>)
 8012ca2:	f240 120d 	movw	r2, #269	@ 0x10d
 8012ca6:	4968      	ldr	r1, [pc, #416]	@ (8012e48 <tcp_input+0x4d0>)
 8012ca8:	4862      	ldr	r0, [pc, #392]	@ (8012e34 <tcp_input+0x4bc>)
 8012caa:	f009 fdc1 	bl	801c830 <iprintf>
      if (prev != NULL) {
 8012cae:	69fb      	ldr	r3, [r7, #28]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d00a      	beq.n	8012cca <tcp_input+0x352>
        prev->next = pcb->next;
 8012cb4:	69bb      	ldr	r3, [r7, #24]
 8012cb6:	68da      	ldr	r2, [r3, #12]
 8012cb8:	69fb      	ldr	r3, [r7, #28]
 8012cba:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012cbc:	4b63      	ldr	r3, [pc, #396]	@ (8012e4c <tcp_input+0x4d4>)
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	69bb      	ldr	r3, [r7, #24]
 8012cc2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012cc4:	4a61      	ldr	r2, [pc, #388]	@ (8012e4c <tcp_input+0x4d4>)
 8012cc6:	69bb      	ldr	r3, [r7, #24]
 8012cc8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	68db      	ldr	r3, [r3, #12]
 8012cce:	69ba      	ldr	r2, [r7, #24]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d110      	bne.n	8012cf6 <tcp_input+0x37e>
 8012cd4:	4b55      	ldr	r3, [pc, #340]	@ (8012e2c <tcp_input+0x4b4>)
 8012cd6:	f240 1215 	movw	r2, #277	@ 0x115
 8012cda:	495d      	ldr	r1, [pc, #372]	@ (8012e50 <tcp_input+0x4d8>)
 8012cdc:	4855      	ldr	r0, [pc, #340]	@ (8012e34 <tcp_input+0x4bc>)
 8012cde:	f009 fda7 	bl	801c830 <iprintf>
      break;
 8012ce2:	e008      	b.n	8012cf6 <tcp_input+0x37e>
    }
    prev = pcb;
 8012ce4:	69bb      	ldr	r3, [r7, #24]
 8012ce6:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ce8:	69bb      	ldr	r3, [r7, #24]
 8012cea:	68db      	ldr	r3, [r3, #12]
 8012cec:	61bb      	str	r3, [r7, #24]
 8012cee:	69bb      	ldr	r3, [r7, #24]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d185      	bne.n	8012c00 <tcp_input+0x288>
 8012cf4:	e000      	b.n	8012cf8 <tcp_input+0x380>
      break;
 8012cf6:	bf00      	nop
  }

  if (pcb == NULL) {
 8012cf8:	69bb      	ldr	r3, [r7, #24]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	f040 80b0 	bne.w	8012e60 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d00:	4b54      	ldr	r3, [pc, #336]	@ (8012e54 <tcp_input+0x4dc>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	61bb      	str	r3, [r7, #24]
 8012d06:	e03f      	b.n	8012d88 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	7d1b      	ldrb	r3, [r3, #20]
 8012d0c:	2b0a      	cmp	r3, #10
 8012d0e:	d006      	beq.n	8012d1e <tcp_input+0x3a6>
 8012d10:	4b46      	ldr	r3, [pc, #280]	@ (8012e2c <tcp_input+0x4b4>)
 8012d12:	f240 121f 	movw	r2, #287	@ 0x11f
 8012d16:	4950      	ldr	r1, [pc, #320]	@ (8012e58 <tcp_input+0x4e0>)
 8012d18:	4846      	ldr	r0, [pc, #280]	@ (8012e34 <tcp_input+0x4bc>)
 8012d1a:	f009 fd89 	bl	801c830 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	7a1b      	ldrb	r3, [r3, #8]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d009      	beq.n	8012d3a <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012d26:	69bb      	ldr	r3, [r7, #24]
 8012d28:	7a1a      	ldrb	r2, [r3, #8]
 8012d2a:	4b45      	ldr	r3, [pc, #276]	@ (8012e40 <tcp_input+0x4c8>)
 8012d2c:	685b      	ldr	r3, [r3, #4]
 8012d2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012d32:	3301      	adds	r3, #1
 8012d34:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d36:	429a      	cmp	r2, r3
 8012d38:	d122      	bne.n	8012d80 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012d3a:	69bb      	ldr	r3, [r7, #24]
 8012d3c:	8b1a      	ldrh	r2, [r3, #24]
 8012d3e:	4b41      	ldr	r3, [pc, #260]	@ (8012e44 <tcp_input+0x4cc>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	881b      	ldrh	r3, [r3, #0]
 8012d44:	b29b      	uxth	r3, r3
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d11b      	bne.n	8012d82 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 8012d4a:	69bb      	ldr	r3, [r7, #24]
 8012d4c:	8ada      	ldrh	r2, [r3, #22]
 8012d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8012e44 <tcp_input+0x4cc>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	885b      	ldrh	r3, [r3, #2]
 8012d54:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d113      	bne.n	8012d82 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012d5a:	69bb      	ldr	r3, [r7, #24]
 8012d5c:	685a      	ldr	r2, [r3, #4]
 8012d5e:	4b38      	ldr	r3, [pc, #224]	@ (8012e40 <tcp_input+0x4c8>)
 8012d60:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d10d      	bne.n	8012d82 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012d66:	69bb      	ldr	r3, [r7, #24]
 8012d68:	681a      	ldr	r2, [r3, #0]
 8012d6a:	4b35      	ldr	r3, [pc, #212]	@ (8012e40 <tcp_input+0x4c8>)
 8012d6c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d107      	bne.n	8012d82 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012d72:	69b8      	ldr	r0, [r7, #24]
 8012d74:	f000 fb5e 	bl	8013434 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f7fd ff1b 	bl	8010bb4 <pbuf_free>
        return;
 8012d7e:	e205      	b.n	801318c <tcp_input+0x814>
        continue;
 8012d80:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d82:	69bb      	ldr	r3, [r7, #24]
 8012d84:	68db      	ldr	r3, [r3, #12]
 8012d86:	61bb      	str	r3, [r7, #24]
 8012d88:	69bb      	ldr	r3, [r7, #24]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d1bc      	bne.n	8012d08 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012d92:	4b32      	ldr	r3, [pc, #200]	@ (8012e5c <tcp_input+0x4e4>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	617b      	str	r3, [r7, #20]
 8012d98:	e02a      	b.n	8012df0 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	7a1b      	ldrb	r3, [r3, #8]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d00c      	beq.n	8012dbc <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	7a1a      	ldrb	r2, [r3, #8]
 8012da6:	4b26      	ldr	r3, [pc, #152]	@ (8012e40 <tcp_input+0x4c8>)
 8012da8:	685b      	ldr	r3, [r3, #4]
 8012daa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012dae:	3301      	adds	r3, #1
 8012db0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d002      	beq.n	8012dbc <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	61fb      	str	r3, [r7, #28]
        continue;
 8012dba:	e016      	b.n	8012dea <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	8ada      	ldrh	r2, [r3, #22]
 8012dc0:	4b20      	ldr	r3, [pc, #128]	@ (8012e44 <tcp_input+0x4cc>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	885b      	ldrh	r3, [r3, #2]
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d10c      	bne.n	8012de6 <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	681a      	ldr	r2, [r3, #0]
 8012dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8012e40 <tcp_input+0x4c8>)
 8012dd2:	695b      	ldr	r3, [r3, #20]
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d00f      	beq.n	8012df8 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d00d      	beq.n	8012dfa <tcp_input+0x482>
 8012dde:	697b      	ldr	r3, [r7, #20]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d009      	beq.n	8012dfa <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012dea:	697b      	ldr	r3, [r7, #20]
 8012dec:	68db      	ldr	r3, [r3, #12]
 8012dee:	617b      	str	r3, [r7, #20]
 8012df0:	697b      	ldr	r3, [r7, #20]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d1d1      	bne.n	8012d9a <tcp_input+0x422>
 8012df6:	e000      	b.n	8012dfa <tcp_input+0x482>
            break;
 8012df8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d02f      	beq.n	8012e60 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012e00:	69fb      	ldr	r3, [r7, #28]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d00a      	beq.n	8012e1c <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	68da      	ldr	r2, [r3, #12]
 8012e0a:	69fb      	ldr	r3, [r7, #28]
 8012e0c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012e0e:	4b13      	ldr	r3, [pc, #76]	@ (8012e5c <tcp_input+0x4e4>)
 8012e10:	681a      	ldr	r2, [r3, #0]
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012e16:	4a11      	ldr	r2, [pc, #68]	@ (8012e5c <tcp_input+0x4e4>)
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012e1c:	6978      	ldr	r0, [r7, #20]
 8012e1e:	f000 fa0b 	bl	8013238 <tcp_listen_input>
      }
      pbuf_free(p);
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f7fd fec6 	bl	8010bb4 <pbuf_free>
      return;
 8012e28:	e1b0      	b.n	801318c <tcp_input+0x814>
 8012e2a:	bf00      	nop
 8012e2c:	080207f8 	.word	0x080207f8
 8012e30:	080208a8 	.word	0x080208a8
 8012e34:	08020844 	.word	0x08020844
 8012e38:	080208d0 	.word	0x080208d0
 8012e3c:	080208fc 	.word	0x080208fc
 8012e40:	2000a2d4 	.word	0x2000a2d4
 8012e44:	20013d74 	.word	0x20013d74
 8012e48:	08020924 	.word	0x08020924
 8012e4c:	20013d54 	.word	0x20013d54
 8012e50:	08020950 	.word	0x08020950
 8012e54:	20013d58 	.word	0x20013d58
 8012e58:	0802097c 	.word	0x0802097c
 8012e5c:	20013d50 	.word	0x20013d50
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012e60:	69bb      	ldr	r3, [r7, #24]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	f000 8158 	beq.w	8013118 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012e68:	4b95      	ldr	r3, [pc, #596]	@ (80130c0 <tcp_input+0x748>)
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	891a      	ldrh	r2, [r3, #8]
 8012e72:	4b93      	ldr	r3, [pc, #588]	@ (80130c0 <tcp_input+0x748>)
 8012e74:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012e76:	4a92      	ldr	r2, [pc, #584]	@ (80130c0 <tcp_input+0x748>)
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012e7c:	4b91      	ldr	r3, [pc, #580]	@ (80130c4 <tcp_input+0x74c>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	4a8f      	ldr	r2, [pc, #572]	@ (80130c0 <tcp_input+0x748>)
 8012e82:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8012e84:	4b90      	ldr	r3, [pc, #576]	@ (80130c8 <tcp_input+0x750>)
 8012e86:	2200      	movs	r2, #0
 8012e88:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012e8a:	4b90      	ldr	r3, [pc, #576]	@ (80130cc <tcp_input+0x754>)
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012e90:	4b8f      	ldr	r3, [pc, #572]	@ (80130d0 <tcp_input+0x758>)
 8012e92:	2200      	movs	r2, #0
 8012e94:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012e96:	4b8f      	ldr	r3, [pc, #572]	@ (80130d4 <tcp_input+0x75c>)
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	f003 0308 	and.w	r3, r3, #8
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d006      	beq.n	8012eb0 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	7b5b      	ldrb	r3, [r3, #13]
 8012ea6:	f043 0301 	orr.w	r3, r3, #1
 8012eaa:	b2da      	uxtb	r2, r3
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d017      	beq.n	8012ee8 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012eb8:	69b8      	ldr	r0, [r7, #24]
 8012eba:	f7ff f915 	bl	80120e8 <tcp_process_refused_data>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	f113 0f0d 	cmn.w	r3, #13
 8012ec4:	d007      	beq.n	8012ed6 <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012ec6:	69bb      	ldr	r3, [r7, #24]
 8012ec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d00c      	beq.n	8012ee8 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012ece:	4b82      	ldr	r3, [pc, #520]	@ (80130d8 <tcp_input+0x760>)
 8012ed0:	881b      	ldrh	r3, [r3, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d008      	beq.n	8012ee8 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012ed6:	69bb      	ldr	r3, [r7, #24]
 8012ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f040 80e4 	bne.w	80130a8 <tcp_input+0x730>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012ee0:	69b8      	ldr	r0, [r7, #24]
 8012ee2:	f003 f9e1 	bl	80162a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012ee6:	e0df      	b.n	80130a8 <tcp_input+0x730>
      }
    }
    tcp_input_pcb = pcb;
 8012ee8:	4a7c      	ldr	r2, [pc, #496]	@ (80130dc <tcp_input+0x764>)
 8012eea:	69bb      	ldr	r3, [r7, #24]
 8012eec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012eee:	69b8      	ldr	r0, [r7, #24]
 8012ef0:	f000 fb1a 	bl	8013528 <tcp_process>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012ef8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012efc:	f113 0f0d 	cmn.w	r3, #13
 8012f00:	f000 80d4 	beq.w	80130ac <tcp_input+0x734>
      if (recv_flags & TF_RESET) {
 8012f04:	4b71      	ldr	r3, [pc, #452]	@ (80130cc <tcp_input+0x754>)
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	f003 0308 	and.w	r3, r3, #8
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d015      	beq.n	8012f3c <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012f10:	69bb      	ldr	r3, [r7, #24]
 8012f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d008      	beq.n	8012f2c <tcp_input+0x5b4>
 8012f1a:	69bb      	ldr	r3, [r7, #24]
 8012f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012f20:	69ba      	ldr	r2, [r7, #24]
 8012f22:	6912      	ldr	r2, [r2, #16]
 8012f24:	f06f 010d 	mvn.w	r1, #13
 8012f28:	4610      	mov	r0, r2
 8012f2a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012f2c:	69b9      	ldr	r1, [r7, #24]
 8012f2e:	486c      	ldr	r0, [pc, #432]	@ (80130e0 <tcp_input+0x768>)
 8012f30:	f7ff fbaa 	bl	8012688 <tcp_pcb_remove>
        tcp_free(pcb);
 8012f34:	69b8      	ldr	r0, [r7, #24]
 8012f36:	f7fe f991 	bl	801125c <tcp_free>
 8012f3a:	e0da      	b.n	80130f2 <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012f40:	4b63      	ldr	r3, [pc, #396]	@ (80130d0 <tcp_input+0x758>)
 8012f42:	881b      	ldrh	r3, [r3, #0]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d01d      	beq.n	8012f84 <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012f48:	4b61      	ldr	r3, [pc, #388]	@ (80130d0 <tcp_input+0x758>)
 8012f4a:	881b      	ldrh	r3, [r3, #0]
 8012f4c:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012f4e:	69bb      	ldr	r3, [r7, #24]
 8012f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d00a      	beq.n	8012f6e <tcp_input+0x5f6>
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012f5e:	69ba      	ldr	r2, [r7, #24]
 8012f60:	6910      	ldr	r0, [r2, #16]
 8012f62:	897a      	ldrh	r2, [r7, #10]
 8012f64:	69b9      	ldr	r1, [r7, #24]
 8012f66:	4798      	blx	r3
 8012f68:	4603      	mov	r3, r0
 8012f6a:	74fb      	strb	r3, [r7, #19]
 8012f6c:	e001      	b.n	8012f72 <tcp_input+0x5fa>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012f72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f76:	f113 0f0d 	cmn.w	r3, #13
 8012f7a:	f000 8099 	beq.w	80130b0 <tcp_input+0x738>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012f7e:	4b54      	ldr	r3, [pc, #336]	@ (80130d0 <tcp_input+0x758>)
 8012f80:	2200      	movs	r2, #0
 8012f82:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012f84:	69b8      	ldr	r0, [r7, #24]
 8012f86:	f000 f917 	bl	80131b8 <tcp_input_delayed_close>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	f040 8091 	bne.w	80130b4 <tcp_input+0x73c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012f92:	4b4d      	ldr	r3, [pc, #308]	@ (80130c8 <tcp_input+0x750>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d041      	beq.n	801301e <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012f9a:	69bb      	ldr	r3, [r7, #24]
 8012f9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d006      	beq.n	8012fb0 <tcp_input+0x638>
 8012fa2:	4b50      	ldr	r3, [pc, #320]	@ (80130e4 <tcp_input+0x76c>)
 8012fa4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012fa8:	494f      	ldr	r1, [pc, #316]	@ (80130e8 <tcp_input+0x770>)
 8012faa:	4850      	ldr	r0, [pc, #320]	@ (80130ec <tcp_input+0x774>)
 8012fac:	f009 fc40 	bl	801c830 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012fb0:	69bb      	ldr	r3, [r7, #24]
 8012fb2:	8b5b      	ldrh	r3, [r3, #26]
 8012fb4:	f003 0310 	and.w	r3, r3, #16
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d008      	beq.n	8012fce <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012fbc:	4b42      	ldr	r3, [pc, #264]	@ (80130c8 <tcp_input+0x750>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7fd fdf7 	bl	8010bb4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012fc6:	69b8      	ldr	r0, [r7, #24]
 8012fc8:	f7fe fc30 	bl	801182c <tcp_abort>
            goto aborted;
 8012fcc:	e091      	b.n	80130f2 <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012fce:	69bb      	ldr	r3, [r7, #24]
 8012fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d00c      	beq.n	8012ff2 <tcp_input+0x67a>
 8012fd8:	69bb      	ldr	r3, [r7, #24]
 8012fda:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012fde:	69bb      	ldr	r3, [r7, #24]
 8012fe0:	6918      	ldr	r0, [r3, #16]
 8012fe2:	4b39      	ldr	r3, [pc, #228]	@ (80130c8 <tcp_input+0x750>)
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	69b9      	ldr	r1, [r7, #24]
 8012fea:	47a0      	blx	r4
 8012fec:	4603      	mov	r3, r0
 8012fee:	74fb      	strb	r3, [r7, #19]
 8012ff0:	e008      	b.n	8013004 <tcp_input+0x68c>
 8012ff2:	4b35      	ldr	r3, [pc, #212]	@ (80130c8 <tcp_input+0x750>)
 8012ff4:	681a      	ldr	r2, [r3, #0]
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	69b9      	ldr	r1, [r7, #24]
 8012ffa:	2000      	movs	r0, #0
 8012ffc:	f7ff f94c 	bl	8012298 <tcp_recv_null>
 8013000:	4603      	mov	r3, r0
 8013002:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013004:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013008:	f113 0f0d 	cmn.w	r3, #13
 801300c:	d054      	beq.n	80130b8 <tcp_input+0x740>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801300e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d003      	beq.n	801301e <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013016:	4b2c      	ldr	r3, [pc, #176]	@ (80130c8 <tcp_input+0x750>)
 8013018:	681a      	ldr	r2, [r3, #0]
 801301a:	69bb      	ldr	r3, [r7, #24]
 801301c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801301e:	4b2b      	ldr	r3, [pc, #172]	@ (80130cc <tcp_input+0x754>)
 8013020:	781b      	ldrb	r3, [r3, #0]
 8013022:	f003 0320 	and.w	r3, r3, #32
 8013026:	2b00      	cmp	r3, #0
 8013028:	d031      	beq.n	801308e <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 801302a:	69bb      	ldr	r3, [r7, #24]
 801302c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801302e:	2b00      	cmp	r3, #0
 8013030:	d009      	beq.n	8013046 <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013032:	69bb      	ldr	r3, [r7, #24]
 8013034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013036:	7b5a      	ldrb	r2, [r3, #13]
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801303c:	f042 0220 	orr.w	r2, r2, #32
 8013040:	b2d2      	uxtb	r2, r2
 8013042:	735a      	strb	r2, [r3, #13]
 8013044:	e023      	b.n	801308e <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013046:	69bb      	ldr	r3, [r7, #24]
 8013048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801304a:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 801304e:	4293      	cmp	r3, r2
 8013050:	d005      	beq.n	801305e <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 8013052:	69bb      	ldr	r3, [r7, #24]
 8013054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013056:	3301      	adds	r3, #1
 8013058:	b29a      	uxth	r2, r3
 801305a:	69bb      	ldr	r3, [r7, #24]
 801305c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801305e:	69bb      	ldr	r3, [r7, #24]
 8013060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013064:	2b00      	cmp	r3, #0
 8013066:	d00b      	beq.n	8013080 <tcp_input+0x708>
 8013068:	69bb      	ldr	r3, [r7, #24]
 801306a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801306e:	69bb      	ldr	r3, [r7, #24]
 8013070:	6918      	ldr	r0, [r3, #16]
 8013072:	2300      	movs	r3, #0
 8013074:	2200      	movs	r2, #0
 8013076:	69b9      	ldr	r1, [r7, #24]
 8013078:	47a0      	blx	r4
 801307a:	4603      	mov	r3, r0
 801307c:	74fb      	strb	r3, [r7, #19]
 801307e:	e001      	b.n	8013084 <tcp_input+0x70c>
 8013080:	2300      	movs	r3, #0
 8013082:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013084:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013088:	f113 0f0d 	cmn.w	r3, #13
 801308c:	d016      	beq.n	80130bc <tcp_input+0x744>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801308e:	4b13      	ldr	r3, [pc, #76]	@ (80130dc <tcp_input+0x764>)
 8013090:	2200      	movs	r2, #0
 8013092:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013094:	69b8      	ldr	r0, [r7, #24]
 8013096:	f000 f88f 	bl	80131b8 <tcp_input_delayed_close>
 801309a:	4603      	mov	r3, r0
 801309c:	2b00      	cmp	r3, #0
 801309e:	d127      	bne.n	80130f0 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80130a0:	69b8      	ldr	r0, [r7, #24]
 80130a2:	f002 facd 	bl	8015640 <tcp_output>
 80130a6:	e024      	b.n	80130f2 <tcp_input+0x77a>
        goto aborted;
 80130a8:	bf00      	nop
 80130aa:	e022      	b.n	80130f2 <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80130ac:	bf00      	nop
 80130ae:	e020      	b.n	80130f2 <tcp_input+0x77a>
              goto aborted;
 80130b0:	bf00      	nop
 80130b2:	e01e      	b.n	80130f2 <tcp_input+0x77a>
          goto aborted;
 80130b4:	bf00      	nop
 80130b6:	e01c      	b.n	80130f2 <tcp_input+0x77a>
            goto aborted;
 80130b8:	bf00      	nop
 80130ba:	e01a      	b.n	80130f2 <tcp_input+0x77a>
              goto aborted;
 80130bc:	bf00      	nop
 80130be:	e018      	b.n	80130f2 <tcp_input+0x77a>
 80130c0:	20013d60 	.word	0x20013d60
 80130c4:	20013d74 	.word	0x20013d74
 80130c8:	20013d94 	.word	0x20013d94
 80130cc:	20013d91 	.word	0x20013d91
 80130d0:	20013d8c 	.word	0x20013d8c
 80130d4:	20013d90 	.word	0x20013d90
 80130d8:	20013d8e 	.word	0x20013d8e
 80130dc:	20013d98 	.word	0x20013d98
 80130e0:	20013d54 	.word	0x20013d54
 80130e4:	080207f8 	.word	0x080207f8
 80130e8:	080209ac 	.word	0x080209ac
 80130ec:	08020844 	.word	0x08020844
          goto aborted;
 80130f0:	bf00      	nop
    tcp_input_pcb = NULL;
 80130f2:	4b28      	ldr	r3, [pc, #160]	@ (8013194 <tcp_input+0x81c>)
 80130f4:	2200      	movs	r2, #0
 80130f6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80130f8:	4b27      	ldr	r3, [pc, #156]	@ (8013198 <tcp_input+0x820>)
 80130fa:	2200      	movs	r2, #0
 80130fc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80130fe:	4b27      	ldr	r3, [pc, #156]	@ (801319c <tcp_input+0x824>)
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d041      	beq.n	801318a <tcp_input+0x812>
      pbuf_free(inseg.p);
 8013106:	4b25      	ldr	r3, [pc, #148]	@ (801319c <tcp_input+0x824>)
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	4618      	mov	r0, r3
 801310c:	f7fd fd52 	bl	8010bb4 <pbuf_free>
      inseg.p = NULL;
 8013110:	4b22      	ldr	r3, [pc, #136]	@ (801319c <tcp_input+0x824>)
 8013112:	2200      	movs	r2, #0
 8013114:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013116:	e038      	b.n	801318a <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013118:	4b21      	ldr	r3, [pc, #132]	@ (80131a0 <tcp_input+0x828>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	899b      	ldrh	r3, [r3, #12]
 801311e:	b29b      	uxth	r3, r3
 8013120:	4618      	mov	r0, r3
 8013122:	f7fc f825 	bl	800f170 <lwip_htons>
 8013126:	4603      	mov	r3, r0
 8013128:	b2db      	uxtb	r3, r3
 801312a:	f003 0304 	and.w	r3, r3, #4
 801312e:	2b00      	cmp	r3, #0
 8013130:	d118      	bne.n	8013164 <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013132:	4b1c      	ldr	r3, [pc, #112]	@ (80131a4 <tcp_input+0x82c>)
 8013134:	6819      	ldr	r1, [r3, #0]
 8013136:	4b1c      	ldr	r3, [pc, #112]	@ (80131a8 <tcp_input+0x830>)
 8013138:	881b      	ldrh	r3, [r3, #0]
 801313a:	461a      	mov	r2, r3
 801313c:	4b1b      	ldr	r3, [pc, #108]	@ (80131ac <tcp_input+0x834>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013142:	4b17      	ldr	r3, [pc, #92]	@ (80131a0 <tcp_input+0x828>)
 8013144:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013146:	885b      	ldrh	r3, [r3, #2]
 8013148:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801314a:	4a15      	ldr	r2, [pc, #84]	@ (80131a0 <tcp_input+0x828>)
 801314c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801314e:	8812      	ldrh	r2, [r2, #0]
 8013150:	b292      	uxth	r2, r2
 8013152:	9202      	str	r2, [sp, #8]
 8013154:	9301      	str	r3, [sp, #4]
 8013156:	4b16      	ldr	r3, [pc, #88]	@ (80131b0 <tcp_input+0x838>)
 8013158:	9300      	str	r3, [sp, #0]
 801315a:	4b16      	ldr	r3, [pc, #88]	@ (80131b4 <tcp_input+0x83c>)
 801315c:	4602      	mov	r2, r0
 801315e:	2000      	movs	r0, #0
 8013160:	f003 f850 	bl	8016204 <tcp_rst>
    pbuf_free(p);
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	f7fd fd25 	bl	8010bb4 <pbuf_free>
  return;
 801316a:	e00e      	b.n	801318a <tcp_input+0x812>
    goto dropped;
 801316c:	bf00      	nop
 801316e:	e008      	b.n	8013182 <tcp_input+0x80a>
    goto dropped;
 8013170:	bf00      	nop
 8013172:	e006      	b.n	8013182 <tcp_input+0x80a>
      goto dropped;
 8013174:	bf00      	nop
 8013176:	e004      	b.n	8013182 <tcp_input+0x80a>
    goto dropped;
 8013178:	bf00      	nop
 801317a:	e002      	b.n	8013182 <tcp_input+0x80a>
      goto dropped;
 801317c:	bf00      	nop
 801317e:	e000      	b.n	8013182 <tcp_input+0x80a>
      goto dropped;
 8013180:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f7fd fd16 	bl	8010bb4 <pbuf_free>
 8013188:	e000      	b.n	801318c <tcp_input+0x814>
  return;
 801318a:	bf00      	nop
}
 801318c:	3724      	adds	r7, #36	@ 0x24
 801318e:	46bd      	mov	sp, r7
 8013190:	bd90      	pop	{r4, r7, pc}
 8013192:	bf00      	nop
 8013194:	20013d98 	.word	0x20013d98
 8013198:	20013d94 	.word	0x20013d94
 801319c:	20013d60 	.word	0x20013d60
 80131a0:	20013d74 	.word	0x20013d74
 80131a4:	20013d88 	.word	0x20013d88
 80131a8:	20013d8e 	.word	0x20013d8e
 80131ac:	20013d84 	.word	0x20013d84
 80131b0:	2000a2e4 	.word	0x2000a2e4
 80131b4:	2000a2e8 	.word	0x2000a2e8

080131b8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d106      	bne.n	80131d4 <tcp_input_delayed_close+0x1c>
 80131c6:	4b17      	ldr	r3, [pc, #92]	@ (8013224 <tcp_input_delayed_close+0x6c>)
 80131c8:	f240 225a 	movw	r2, #602	@ 0x25a
 80131cc:	4916      	ldr	r1, [pc, #88]	@ (8013228 <tcp_input_delayed_close+0x70>)
 80131ce:	4817      	ldr	r0, [pc, #92]	@ (801322c <tcp_input_delayed_close+0x74>)
 80131d0:	f009 fb2e 	bl	801c830 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80131d4:	4b16      	ldr	r3, [pc, #88]	@ (8013230 <tcp_input_delayed_close+0x78>)
 80131d6:	781b      	ldrb	r3, [r3, #0]
 80131d8:	f003 0310 	and.w	r3, r3, #16
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d01c      	beq.n	801321a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	8b5b      	ldrh	r3, [r3, #26]
 80131e4:	f003 0310 	and.w	r3, r3, #16
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d10d      	bne.n	8013208 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d008      	beq.n	8013208 <tcp_input_delayed_close+0x50>
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	6912      	ldr	r2, [r2, #16]
 8013200:	f06f 010e 	mvn.w	r1, #14
 8013204:	4610      	mov	r0, r2
 8013206:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013208:	6879      	ldr	r1, [r7, #4]
 801320a:	480a      	ldr	r0, [pc, #40]	@ (8013234 <tcp_input_delayed_close+0x7c>)
 801320c:	f7ff fa3c 	bl	8012688 <tcp_pcb_remove>
    tcp_free(pcb);
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f7fe f823 	bl	801125c <tcp_free>
    return 1;
 8013216:	2301      	movs	r3, #1
 8013218:	e000      	b.n	801321c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801321a:	2300      	movs	r3, #0
}
 801321c:	4618      	mov	r0, r3
 801321e:	3708      	adds	r7, #8
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	080207f8 	.word	0x080207f8
 8013228:	080209c8 	.word	0x080209c8
 801322c:	08020844 	.word	0x08020844
 8013230:	20013d91 	.word	0x20013d91
 8013234:	20013d54 	.word	0x20013d54

08013238 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013238:	b590      	push	{r4, r7, lr}
 801323a:	b08b      	sub	sp, #44	@ 0x2c
 801323c:	af04      	add	r7, sp, #16
 801323e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013240:	4b6f      	ldr	r3, [pc, #444]	@ (8013400 <tcp_listen_input+0x1c8>)
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	f003 0304 	and.w	r3, r3, #4
 8013248:	2b00      	cmp	r3, #0
 801324a:	f040 80d2 	bne.w	80133f2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d106      	bne.n	8013262 <tcp_listen_input+0x2a>
 8013254:	4b6b      	ldr	r3, [pc, #428]	@ (8013404 <tcp_listen_input+0x1cc>)
 8013256:	f240 2281 	movw	r2, #641	@ 0x281
 801325a:	496b      	ldr	r1, [pc, #428]	@ (8013408 <tcp_listen_input+0x1d0>)
 801325c:	486b      	ldr	r0, [pc, #428]	@ (801340c <tcp_listen_input+0x1d4>)
 801325e:	f009 fae7 	bl	801c830 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013262:	4b67      	ldr	r3, [pc, #412]	@ (8013400 <tcp_listen_input+0x1c8>)
 8013264:	781b      	ldrb	r3, [r3, #0]
 8013266:	f003 0310 	and.w	r3, r3, #16
 801326a:	2b00      	cmp	r3, #0
 801326c:	d019      	beq.n	80132a2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801326e:	4b68      	ldr	r3, [pc, #416]	@ (8013410 <tcp_listen_input+0x1d8>)
 8013270:	6819      	ldr	r1, [r3, #0]
 8013272:	4b68      	ldr	r3, [pc, #416]	@ (8013414 <tcp_listen_input+0x1dc>)
 8013274:	881b      	ldrh	r3, [r3, #0]
 8013276:	461a      	mov	r2, r3
 8013278:	4b67      	ldr	r3, [pc, #412]	@ (8013418 <tcp_listen_input+0x1e0>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801327e:	4b67      	ldr	r3, [pc, #412]	@ (801341c <tcp_listen_input+0x1e4>)
 8013280:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013282:	885b      	ldrh	r3, [r3, #2]
 8013284:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013286:	4a65      	ldr	r2, [pc, #404]	@ (801341c <tcp_listen_input+0x1e4>)
 8013288:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801328a:	8812      	ldrh	r2, [r2, #0]
 801328c:	b292      	uxth	r2, r2
 801328e:	9202      	str	r2, [sp, #8]
 8013290:	9301      	str	r3, [sp, #4]
 8013292:	4b63      	ldr	r3, [pc, #396]	@ (8013420 <tcp_listen_input+0x1e8>)
 8013294:	9300      	str	r3, [sp, #0]
 8013296:	4b63      	ldr	r3, [pc, #396]	@ (8013424 <tcp_listen_input+0x1ec>)
 8013298:	4602      	mov	r2, r0
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f002 ffb2 	bl	8016204 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80132a0:	e0a9      	b.n	80133f6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80132a2:	4b57      	ldr	r3, [pc, #348]	@ (8013400 <tcp_listen_input+0x1c8>)
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	f003 0302 	and.w	r3, r3, #2
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	f000 80a3 	beq.w	80133f6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	7d5b      	ldrb	r3, [r3, #21]
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7ff f913 	bl	80124e0 <tcp_alloc>
 80132ba:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d111      	bne.n	80132e6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	699b      	ldr	r3, [r3, #24]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d00a      	beq.n	80132e0 <tcp_listen_input+0xa8>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	699b      	ldr	r3, [r3, #24]
 80132ce:	687a      	ldr	r2, [r7, #4]
 80132d0:	6910      	ldr	r0, [r2, #16]
 80132d2:	f04f 32ff 	mov.w	r2, #4294967295
 80132d6:	2100      	movs	r1, #0
 80132d8:	4798      	blx	r3
 80132da:	4603      	mov	r3, r0
 80132dc:	73bb      	strb	r3, [r7, #14]
      return;
 80132de:	e08b      	b.n	80133f8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80132e0:	23f0      	movs	r3, #240	@ 0xf0
 80132e2:	73bb      	strb	r3, [r7, #14]
      return;
 80132e4:	e088      	b.n	80133f8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80132e6:	4b50      	ldr	r3, [pc, #320]	@ (8013428 <tcp_listen_input+0x1f0>)
 80132e8:	695a      	ldr	r2, [r3, #20]
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80132ee:	4b4e      	ldr	r3, [pc, #312]	@ (8013428 <tcp_listen_input+0x1f0>)
 80132f0:	691a      	ldr	r2, [r3, #16]
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	8ada      	ldrh	r2, [r3, #22]
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80132fe:	4b47      	ldr	r3, [pc, #284]	@ (801341c <tcp_listen_input+0x1e4>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	881b      	ldrh	r3, [r3, #0]
 8013304:	b29a      	uxth	r2, r3
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	2203      	movs	r2, #3
 801330e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013310:	4b41      	ldr	r3, [pc, #260]	@ (8013418 <tcp_listen_input+0x1e0>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	1c5a      	adds	r2, r3, #1
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8013322:	6978      	ldr	r0, [r7, #20]
 8013324:	f7ff fa44 	bl	80127b0 <tcp_next_iss>
 8013328:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	693a      	ldr	r2, [r7, #16]
 801332e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	693a      	ldr	r2, [r7, #16]
 8013334:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	693a      	ldr	r2, [r7, #16]
 801333a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	693a      	ldr	r2, [r7, #16]
 8013340:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013342:	4b35      	ldr	r3, [pc, #212]	@ (8013418 <tcp_listen_input+0x1e0>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	1e5a      	subs	r2, r3, #1
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	691a      	ldr	r2, [r3, #16]
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	7a5b      	ldrb	r3, [r3, #9]
 801335e:	f003 030c 	and.w	r3, r3, #12
 8013362:	b2da      	uxtb	r2, r3
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	7a1a      	ldrb	r2, [r3, #8]
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013370:	4b2e      	ldr	r3, [pc, #184]	@ (801342c <tcp_listen_input+0x1f4>)
 8013372:	681a      	ldr	r2, [r3, #0]
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	60da      	str	r2, [r3, #12]
 8013378:	4a2c      	ldr	r2, [pc, #176]	@ (801342c <tcp_listen_input+0x1f4>)
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	6013      	str	r3, [r2, #0]
 801337e:	f003 f903 	bl	8016588 <tcp_timer_needed>
 8013382:	4b2b      	ldr	r3, [pc, #172]	@ (8013430 <tcp_listen_input+0x1f8>)
 8013384:	2201      	movs	r2, #1
 8013386:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013388:	6978      	ldr	r0, [r7, #20]
 801338a:	f001 fd8b 	bl	8014ea4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801338e:	4b23      	ldr	r3, [pc, #140]	@ (801341c <tcp_listen_input+0x1e4>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	89db      	ldrh	r3, [r3, #14]
 8013394:	b29a      	uxth	r2, r3
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80133ac:	697b      	ldr	r3, [r7, #20]
 80133ae:	3304      	adds	r3, #4
 80133b0:	4618      	mov	r0, r3
 80133b2:	f006 fff9 	bl	801a3a8 <ip4_route>
 80133b6:	4601      	mov	r1, r0
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	3304      	adds	r3, #4
 80133bc:	461a      	mov	r2, r3
 80133be:	4620      	mov	r0, r4
 80133c0:	f7ff fa1c 	bl	80127fc <tcp_eff_send_mss_netif>
 80133c4:	4603      	mov	r3, r0
 80133c6:	461a      	mov	r2, r3
 80133c8:	697b      	ldr	r3, [r7, #20]
 80133ca:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80133cc:	2112      	movs	r1, #18
 80133ce:	6978      	ldr	r0, [r7, #20]
 80133d0:	f002 f848 	bl	8015464 <tcp_enqueue_flags>
 80133d4:	4603      	mov	r3, r0
 80133d6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80133d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d004      	beq.n	80133ea <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80133e0:	2100      	movs	r1, #0
 80133e2:	6978      	ldr	r0, [r7, #20]
 80133e4:	f7fe f964 	bl	80116b0 <tcp_abandon>
      return;
 80133e8:	e006      	b.n	80133f8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80133ea:	6978      	ldr	r0, [r7, #20]
 80133ec:	f002 f928 	bl	8015640 <tcp_output>
  return;
 80133f0:	e001      	b.n	80133f6 <tcp_listen_input+0x1be>
    return;
 80133f2:	bf00      	nop
 80133f4:	e000      	b.n	80133f8 <tcp_listen_input+0x1c0>
  return;
 80133f6:	bf00      	nop
}
 80133f8:	371c      	adds	r7, #28
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd90      	pop	{r4, r7, pc}
 80133fe:	bf00      	nop
 8013400:	20013d90 	.word	0x20013d90
 8013404:	080207f8 	.word	0x080207f8
 8013408:	080209f0 	.word	0x080209f0
 801340c:	08020844 	.word	0x08020844
 8013410:	20013d88 	.word	0x20013d88
 8013414:	20013d8e 	.word	0x20013d8e
 8013418:	20013d84 	.word	0x20013d84
 801341c:	20013d74 	.word	0x20013d74
 8013420:	2000a2e4 	.word	0x2000a2e4
 8013424:	2000a2e8 	.word	0x2000a2e8
 8013428:	2000a2d4 	.word	0x2000a2d4
 801342c:	20013d54 	.word	0x20013d54
 8013430:	20013d5c 	.word	0x20013d5c

08013434 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b086      	sub	sp, #24
 8013438:	af04      	add	r7, sp, #16
 801343a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801343c:	4b2f      	ldr	r3, [pc, #188]	@ (80134fc <tcp_timewait_input+0xc8>)
 801343e:	781b      	ldrb	r3, [r3, #0]
 8013440:	f003 0304 	and.w	r3, r3, #4
 8013444:	2b00      	cmp	r3, #0
 8013446:	d153      	bne.n	80134f0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d106      	bne.n	801345c <tcp_timewait_input+0x28>
 801344e:	4b2c      	ldr	r3, [pc, #176]	@ (8013500 <tcp_timewait_input+0xcc>)
 8013450:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013454:	492b      	ldr	r1, [pc, #172]	@ (8013504 <tcp_timewait_input+0xd0>)
 8013456:	482c      	ldr	r0, [pc, #176]	@ (8013508 <tcp_timewait_input+0xd4>)
 8013458:	f009 f9ea 	bl	801c830 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801345c:	4b27      	ldr	r3, [pc, #156]	@ (80134fc <tcp_timewait_input+0xc8>)
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	f003 0302 	and.w	r3, r3, #2
 8013464:	2b00      	cmp	r3, #0
 8013466:	d02a      	beq.n	80134be <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013468:	4b28      	ldr	r3, [pc, #160]	@ (801350c <tcp_timewait_input+0xd8>)
 801346a:	681a      	ldr	r2, [r3, #0]
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	2b00      	cmp	r3, #0
 8013474:	db2d      	blt.n	80134d2 <tcp_timewait_input+0x9e>
 8013476:	4b25      	ldr	r3, [pc, #148]	@ (801350c <tcp_timewait_input+0xd8>)
 8013478:	681a      	ldr	r2, [r3, #0]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801347e:	6879      	ldr	r1, [r7, #4]
 8013480:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013482:	440b      	add	r3, r1
 8013484:	1ad3      	subs	r3, r2, r3
 8013486:	2b00      	cmp	r3, #0
 8013488:	dc23      	bgt.n	80134d2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801348a:	4b21      	ldr	r3, [pc, #132]	@ (8013510 <tcp_timewait_input+0xdc>)
 801348c:	6819      	ldr	r1, [r3, #0]
 801348e:	4b21      	ldr	r3, [pc, #132]	@ (8013514 <tcp_timewait_input+0xe0>)
 8013490:	881b      	ldrh	r3, [r3, #0]
 8013492:	461a      	mov	r2, r3
 8013494:	4b1d      	ldr	r3, [pc, #116]	@ (801350c <tcp_timewait_input+0xd8>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801349a:	4b1f      	ldr	r3, [pc, #124]	@ (8013518 <tcp_timewait_input+0xe4>)
 801349c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801349e:	885b      	ldrh	r3, [r3, #2]
 80134a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80134a2:	4a1d      	ldr	r2, [pc, #116]	@ (8013518 <tcp_timewait_input+0xe4>)
 80134a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134a6:	8812      	ldrh	r2, [r2, #0]
 80134a8:	b292      	uxth	r2, r2
 80134aa:	9202      	str	r2, [sp, #8]
 80134ac:	9301      	str	r3, [sp, #4]
 80134ae:	4b1b      	ldr	r3, [pc, #108]	@ (801351c <tcp_timewait_input+0xe8>)
 80134b0:	9300      	str	r3, [sp, #0]
 80134b2:	4b1b      	ldr	r3, [pc, #108]	@ (8013520 <tcp_timewait_input+0xec>)
 80134b4:	4602      	mov	r2, r0
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f002 fea4 	bl	8016204 <tcp_rst>
      return;
 80134bc:	e01b      	b.n	80134f6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80134be:	4b0f      	ldr	r3, [pc, #60]	@ (80134fc <tcp_timewait_input+0xc8>)
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	f003 0301 	and.w	r3, r3, #1
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d003      	beq.n	80134d2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80134ca:	4b16      	ldr	r3, [pc, #88]	@ (8013524 <tcp_timewait_input+0xf0>)
 80134cc:	681a      	ldr	r2, [r3, #0]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80134d2:	4b10      	ldr	r3, [pc, #64]	@ (8013514 <tcp_timewait_input+0xe0>)
 80134d4:	881b      	ldrh	r3, [r3, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d00c      	beq.n	80134f4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	8b5b      	ldrh	r3, [r3, #26]
 80134de:	f043 0302 	orr.w	r3, r3, #2
 80134e2:	b29a      	uxth	r2, r3
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f002 f8a9 	bl	8015640 <tcp_output>
  }
  return;
 80134ee:	e001      	b.n	80134f4 <tcp_timewait_input+0xc0>
    return;
 80134f0:	bf00      	nop
 80134f2:	e000      	b.n	80134f6 <tcp_timewait_input+0xc2>
  return;
 80134f4:	bf00      	nop
}
 80134f6:	3708      	adds	r7, #8
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd80      	pop	{r7, pc}
 80134fc:	20013d90 	.word	0x20013d90
 8013500:	080207f8 	.word	0x080207f8
 8013504:	08020a10 	.word	0x08020a10
 8013508:	08020844 	.word	0x08020844
 801350c:	20013d84 	.word	0x20013d84
 8013510:	20013d88 	.word	0x20013d88
 8013514:	20013d8e 	.word	0x20013d8e
 8013518:	20013d74 	.word	0x20013d74
 801351c:	2000a2e4 	.word	0x2000a2e4
 8013520:	2000a2e8 	.word	0x2000a2e8
 8013524:	20013d48 	.word	0x20013d48

08013528 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013528:	b590      	push	{r4, r7, lr}
 801352a:	b08d      	sub	sp, #52	@ 0x34
 801352c:	af04      	add	r7, sp, #16
 801352e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013530:	2300      	movs	r3, #0
 8013532:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d106      	bne.n	801354c <tcp_process+0x24>
 801353e:	4b9d      	ldr	r3, [pc, #628]	@ (80137b4 <tcp_process+0x28c>)
 8013540:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8013544:	499c      	ldr	r1, [pc, #624]	@ (80137b8 <tcp_process+0x290>)
 8013546:	489d      	ldr	r0, [pc, #628]	@ (80137bc <tcp_process+0x294>)
 8013548:	f009 f972 	bl	801c830 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801354c:	4b9c      	ldr	r3, [pc, #624]	@ (80137c0 <tcp_process+0x298>)
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	f003 0304 	and.w	r3, r3, #4
 8013554:	2b00      	cmp	r3, #0
 8013556:	d04e      	beq.n	80135f6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	7d1b      	ldrb	r3, [r3, #20]
 801355c:	2b02      	cmp	r3, #2
 801355e:	d108      	bne.n	8013572 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013564:	4b97      	ldr	r3, [pc, #604]	@ (80137c4 <tcp_process+0x29c>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	429a      	cmp	r2, r3
 801356a:	d123      	bne.n	80135b4 <tcp_process+0x8c>
        acceptable = 1;
 801356c:	2301      	movs	r3, #1
 801356e:	77fb      	strb	r3, [r7, #31]
 8013570:	e020      	b.n	80135b4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013576:	4b94      	ldr	r3, [pc, #592]	@ (80137c8 <tcp_process+0x2a0>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	429a      	cmp	r2, r3
 801357c:	d102      	bne.n	8013584 <tcp_process+0x5c>
        acceptable = 1;
 801357e:	2301      	movs	r3, #1
 8013580:	77fb      	strb	r3, [r7, #31]
 8013582:	e017      	b.n	80135b4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013584:	4b90      	ldr	r3, [pc, #576]	@ (80137c8 <tcp_process+0x2a0>)
 8013586:	681a      	ldr	r2, [r3, #0]
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	2b00      	cmp	r3, #0
 8013590:	db10      	blt.n	80135b4 <tcp_process+0x8c>
 8013592:	4b8d      	ldr	r3, [pc, #564]	@ (80137c8 <tcp_process+0x2a0>)
 8013594:	681a      	ldr	r2, [r3, #0]
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801359a:	6879      	ldr	r1, [r7, #4]
 801359c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801359e:	440b      	add	r3, r1
 80135a0:	1ad3      	subs	r3, r2, r3
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	dc06      	bgt.n	80135b4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	8b5b      	ldrh	r3, [r3, #26]
 80135aa:	f043 0302 	orr.w	r3, r3, #2
 80135ae:	b29a      	uxth	r2, r3
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80135b4:	7ffb      	ldrb	r3, [r7, #31]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d01b      	beq.n	80135f2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	7d1b      	ldrb	r3, [r3, #20]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d106      	bne.n	80135d0 <tcp_process+0xa8>
 80135c2:	4b7c      	ldr	r3, [pc, #496]	@ (80137b4 <tcp_process+0x28c>)
 80135c4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80135c8:	4980      	ldr	r1, [pc, #512]	@ (80137cc <tcp_process+0x2a4>)
 80135ca:	487c      	ldr	r0, [pc, #496]	@ (80137bc <tcp_process+0x294>)
 80135cc:	f009 f930 	bl	801c830 <iprintf>
      recv_flags |= TF_RESET;
 80135d0:	4b7f      	ldr	r3, [pc, #508]	@ (80137d0 <tcp_process+0x2a8>)
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	f043 0308 	orr.w	r3, r3, #8
 80135d8:	b2da      	uxtb	r2, r3
 80135da:	4b7d      	ldr	r3, [pc, #500]	@ (80137d0 <tcp_process+0x2a8>)
 80135dc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	8b5b      	ldrh	r3, [r3, #26]
 80135e2:	f023 0301 	bic.w	r3, r3, #1
 80135e6:	b29a      	uxth	r2, r3
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80135ec:	f06f 030d 	mvn.w	r3, #13
 80135f0:	e37a      	b.n	8013ce8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80135f2:	2300      	movs	r3, #0
 80135f4:	e378      	b.n	8013ce8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80135f6:	4b72      	ldr	r3, [pc, #456]	@ (80137c0 <tcp_process+0x298>)
 80135f8:	781b      	ldrb	r3, [r3, #0]
 80135fa:	f003 0302 	and.w	r3, r3, #2
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d010      	beq.n	8013624 <tcp_process+0xfc>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	7d1b      	ldrb	r3, [r3, #20]
 8013606:	2b02      	cmp	r3, #2
 8013608:	d00c      	beq.n	8013624 <tcp_process+0xfc>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	7d1b      	ldrb	r3, [r3, #20]
 801360e:	2b03      	cmp	r3, #3
 8013610:	d008      	beq.n	8013624 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	8b5b      	ldrh	r3, [r3, #26]
 8013616:	f043 0302 	orr.w	r3, r3, #2
 801361a:	b29a      	uxth	r2, r3
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013620:	2300      	movs	r3, #0
 8013622:	e361      	b.n	8013ce8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	8b5b      	ldrh	r3, [r3, #26]
 8013628:	f003 0310 	and.w	r3, r3, #16
 801362c:	2b00      	cmp	r3, #0
 801362e:	d103      	bne.n	8013638 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013630:	4b68      	ldr	r3, [pc, #416]	@ (80137d4 <tcp_process+0x2ac>)
 8013632:	681a      	ldr	r2, [r3, #0]
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2200      	movs	r2, #0
 801363c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	2200      	movs	r2, #0
 8013644:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f001 fc2b 	bl	8014ea4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	7d1b      	ldrb	r3, [r3, #20]
 8013652:	3b02      	subs	r3, #2
 8013654:	2b07      	cmp	r3, #7
 8013656:	f200 8337 	bhi.w	8013cc8 <tcp_process+0x7a0>
 801365a:	a201      	add	r2, pc, #4	@ (adr r2, 8013660 <tcp_process+0x138>)
 801365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013660:	08013681 	.word	0x08013681
 8013664:	080138b1 	.word	0x080138b1
 8013668:	08013a29 	.word	0x08013a29
 801366c:	08013a53 	.word	0x08013a53
 8013670:	08013b77 	.word	0x08013b77
 8013674:	08013a29 	.word	0x08013a29
 8013678:	08013c03 	.word	0x08013c03
 801367c:	08013c93 	.word	0x08013c93
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013680:	4b4f      	ldr	r3, [pc, #316]	@ (80137c0 <tcp_process+0x298>)
 8013682:	781b      	ldrb	r3, [r3, #0]
 8013684:	f003 0310 	and.w	r3, r3, #16
 8013688:	2b00      	cmp	r3, #0
 801368a:	f000 80e4 	beq.w	8013856 <tcp_process+0x32e>
 801368e:	4b4c      	ldr	r3, [pc, #304]	@ (80137c0 <tcp_process+0x298>)
 8013690:	781b      	ldrb	r3, [r3, #0]
 8013692:	f003 0302 	and.w	r3, r3, #2
 8013696:	2b00      	cmp	r3, #0
 8013698:	f000 80dd 	beq.w	8013856 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80136a0:	1c5a      	adds	r2, r3, #1
 80136a2:	4b48      	ldr	r3, [pc, #288]	@ (80137c4 <tcp_process+0x29c>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	429a      	cmp	r2, r3
 80136a8:	f040 80d5 	bne.w	8013856 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80136ac:	4b46      	ldr	r3, [pc, #280]	@ (80137c8 <tcp_process+0x2a0>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	1c5a      	adds	r2, r3, #1
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80136be:	4b41      	ldr	r3, [pc, #260]	@ (80137c4 <tcp_process+0x29c>)
 80136c0:	681a      	ldr	r2, [r3, #0]
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80136c6:	4b44      	ldr	r3, [pc, #272]	@ (80137d8 <tcp_process+0x2b0>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	89db      	ldrh	r3, [r3, #14]
 80136cc:	b29a      	uxth	r2, r3
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80136e0:	4b39      	ldr	r3, [pc, #228]	@ (80137c8 <tcp_process+0x2a0>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	1e5a      	subs	r2, r3, #1
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	2204      	movs	r2, #4
 80136ee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	3304      	adds	r3, #4
 80136f8:	4618      	mov	r0, r3
 80136fa:	f006 fe55 	bl	801a3a8 <ip4_route>
 80136fe:	4601      	mov	r1, r0
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	3304      	adds	r3, #4
 8013704:	461a      	mov	r2, r3
 8013706:	4620      	mov	r0, r4
 8013708:	f7ff f878 	bl	80127fc <tcp_eff_send_mss_netif>
 801370c:	4603      	mov	r3, r0
 801370e:	461a      	mov	r2, r3
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013718:	009a      	lsls	r2, r3, #2
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801371e:	005b      	lsls	r3, r3, #1
 8013720:	f241 111c 	movw	r1, #4380	@ 0x111c
 8013724:	428b      	cmp	r3, r1
 8013726:	bf38      	it	cc
 8013728:	460b      	movcc	r3, r1
 801372a:	429a      	cmp	r2, r3
 801372c:	d204      	bcs.n	8013738 <tcp_process+0x210>
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013732:	009b      	lsls	r3, r3, #2
 8013734:	b29b      	uxth	r3, r3
 8013736:	e00d      	b.n	8013754 <tcp_process+0x22c>
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801373c:	005b      	lsls	r3, r3, #1
 801373e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8013742:	4293      	cmp	r3, r2
 8013744:	d904      	bls.n	8013750 <tcp_process+0x228>
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801374a:	005b      	lsls	r3, r3, #1
 801374c:	b29b      	uxth	r3, r3
 801374e:	e001      	b.n	8013754 <tcp_process+0x22c>
 8013750:	f241 131c 	movw	r3, #4380	@ 0x111c
 8013754:	687a      	ldr	r2, [r7, #4]
 8013756:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013760:	2b00      	cmp	r3, #0
 8013762:	d106      	bne.n	8013772 <tcp_process+0x24a>
 8013764:	4b13      	ldr	r3, [pc, #76]	@ (80137b4 <tcp_process+0x28c>)
 8013766:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801376a:	491c      	ldr	r1, [pc, #112]	@ (80137dc <tcp_process+0x2b4>)
 801376c:	4813      	ldr	r0, [pc, #76]	@ (80137bc <tcp_process+0x294>)
 801376e:	f009 f85f 	bl	801c830 <iprintf>
        --pcb->snd_queuelen;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013778:	3b01      	subs	r3, #1
 801377a:	b29a      	uxth	r2, r3
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013786:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8013788:	697b      	ldr	r3, [r7, #20]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d12a      	bne.n	80137e4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013792:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013794:	697b      	ldr	r3, [r7, #20]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d106      	bne.n	80137a8 <tcp_process+0x280>
 801379a:	4b06      	ldr	r3, [pc, #24]	@ (80137b4 <tcp_process+0x28c>)
 801379c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80137a0:	490f      	ldr	r1, [pc, #60]	@ (80137e0 <tcp_process+0x2b8>)
 80137a2:	4806      	ldr	r0, [pc, #24]	@ (80137bc <tcp_process+0x294>)
 80137a4:	f009 f844 	bl	801c830 <iprintf>
          pcb->unsent = rseg->next;
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	681a      	ldr	r2, [r3, #0]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	66da      	str	r2, [r3, #108]	@ 0x6c
 80137b0:	e01c      	b.n	80137ec <tcp_process+0x2c4>
 80137b2:	bf00      	nop
 80137b4:	080207f8 	.word	0x080207f8
 80137b8:	08020a30 	.word	0x08020a30
 80137bc:	08020844 	.word	0x08020844
 80137c0:	20013d90 	.word	0x20013d90
 80137c4:	20013d88 	.word	0x20013d88
 80137c8:	20013d84 	.word	0x20013d84
 80137cc:	08020a4c 	.word	0x08020a4c
 80137d0:	20013d91 	.word	0x20013d91
 80137d4:	20013d48 	.word	0x20013d48
 80137d8:	20013d74 	.word	0x20013d74
 80137dc:	08020a6c 	.word	0x08020a6c
 80137e0:	08020a84 	.word	0x08020a84
        } else {
          pcb->unacked = rseg->next;
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	681a      	ldr	r2, [r3, #0]
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80137ec:	6978      	ldr	r0, [r7, #20]
 80137ee:	f7fe fd0e 	bl	801220e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d104      	bne.n	8013804 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013800:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013802:	e006      	b.n	8013812 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	2200      	movs	r2, #0
 8013808:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	2200      	movs	r2, #0
 801380e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013818:	2b00      	cmp	r3, #0
 801381a:	d00a      	beq.n	8013832 <tcp_process+0x30a>
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	6910      	ldr	r0, [r2, #16]
 8013826:	2200      	movs	r2, #0
 8013828:	6879      	ldr	r1, [r7, #4]
 801382a:	4798      	blx	r3
 801382c:	4603      	mov	r3, r0
 801382e:	77bb      	strb	r3, [r7, #30]
 8013830:	e001      	b.n	8013836 <tcp_process+0x30e>
 8013832:	2300      	movs	r3, #0
 8013834:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8013836:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801383a:	f113 0f0d 	cmn.w	r3, #13
 801383e:	d102      	bne.n	8013846 <tcp_process+0x31e>
          return ERR_ABRT;
 8013840:	f06f 030c 	mvn.w	r3, #12
 8013844:	e250      	b.n	8013ce8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	8b5b      	ldrh	r3, [r3, #26]
 801384a:	f043 0302 	orr.w	r3, r3, #2
 801384e:	b29a      	uxth	r2, r3
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013854:	e23a      	b.n	8013ccc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013856:	4b98      	ldr	r3, [pc, #608]	@ (8013ab8 <tcp_process+0x590>)
 8013858:	781b      	ldrb	r3, [r3, #0]
 801385a:	f003 0310 	and.w	r3, r3, #16
 801385e:	2b00      	cmp	r3, #0
 8013860:	f000 8234 	beq.w	8013ccc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013864:	4b95      	ldr	r3, [pc, #596]	@ (8013abc <tcp_process+0x594>)
 8013866:	6819      	ldr	r1, [r3, #0]
 8013868:	4b95      	ldr	r3, [pc, #596]	@ (8013ac0 <tcp_process+0x598>)
 801386a:	881b      	ldrh	r3, [r3, #0]
 801386c:	461a      	mov	r2, r3
 801386e:	4b95      	ldr	r3, [pc, #596]	@ (8013ac4 <tcp_process+0x59c>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013874:	4b94      	ldr	r3, [pc, #592]	@ (8013ac8 <tcp_process+0x5a0>)
 8013876:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013878:	885b      	ldrh	r3, [r3, #2]
 801387a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801387c:	4a92      	ldr	r2, [pc, #584]	@ (8013ac8 <tcp_process+0x5a0>)
 801387e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013880:	8812      	ldrh	r2, [r2, #0]
 8013882:	b292      	uxth	r2, r2
 8013884:	9202      	str	r2, [sp, #8]
 8013886:	9301      	str	r3, [sp, #4]
 8013888:	4b90      	ldr	r3, [pc, #576]	@ (8013acc <tcp_process+0x5a4>)
 801388a:	9300      	str	r3, [sp, #0]
 801388c:	4b90      	ldr	r3, [pc, #576]	@ (8013ad0 <tcp_process+0x5a8>)
 801388e:	4602      	mov	r2, r0
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f002 fcb7 	bl	8016204 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801389c:	2b05      	cmp	r3, #5
 801389e:	f200 8215 	bhi.w	8013ccc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2200      	movs	r2, #0
 80138a6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80138a8:	6878      	ldr	r0, [r7, #4]
 80138aa:	f002 fa73 	bl	8015d94 <tcp_rexmit_rto>
      break;
 80138ae:	e20d      	b.n	8013ccc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80138b0:	4b81      	ldr	r3, [pc, #516]	@ (8013ab8 <tcp_process+0x590>)
 80138b2:	781b      	ldrb	r3, [r3, #0]
 80138b4:	f003 0310 	and.w	r3, r3, #16
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	f000 80a1 	beq.w	8013a00 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80138be:	4b7f      	ldr	r3, [pc, #508]	@ (8013abc <tcp_process+0x594>)
 80138c0:	681a      	ldr	r2, [r3, #0]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138c6:	1ad3      	subs	r3, r2, r3
 80138c8:	3b01      	subs	r3, #1
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	db7e      	blt.n	80139cc <tcp_process+0x4a4>
 80138ce:	4b7b      	ldr	r3, [pc, #492]	@ (8013abc <tcp_process+0x594>)
 80138d0:	681a      	ldr	r2, [r3, #0]
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80138d6:	1ad3      	subs	r3, r2, r3
 80138d8:	2b00      	cmp	r3, #0
 80138da:	dc77      	bgt.n	80139cc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2204      	movs	r2, #4
 80138e0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d102      	bne.n	80138f0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80138ea:	23fa      	movs	r3, #250	@ 0xfa
 80138ec:	77bb      	strb	r3, [r7, #30]
 80138ee:	e01d      	b.n	801392c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80138f4:	699b      	ldr	r3, [r3, #24]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d106      	bne.n	8013908 <tcp_process+0x3e0>
 80138fa:	4b76      	ldr	r3, [pc, #472]	@ (8013ad4 <tcp_process+0x5ac>)
 80138fc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8013900:	4975      	ldr	r1, [pc, #468]	@ (8013ad8 <tcp_process+0x5b0>)
 8013902:	4876      	ldr	r0, [pc, #472]	@ (8013adc <tcp_process+0x5b4>)
 8013904:	f008 ff94 	bl	801c830 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801390c:	699b      	ldr	r3, [r3, #24]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d00a      	beq.n	8013928 <tcp_process+0x400>
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013916:	699b      	ldr	r3, [r3, #24]
 8013918:	687a      	ldr	r2, [r7, #4]
 801391a:	6910      	ldr	r0, [r2, #16]
 801391c:	2200      	movs	r2, #0
 801391e:	6879      	ldr	r1, [r7, #4]
 8013920:	4798      	blx	r3
 8013922:	4603      	mov	r3, r0
 8013924:	77bb      	strb	r3, [r7, #30]
 8013926:	e001      	b.n	801392c <tcp_process+0x404>
 8013928:	23f0      	movs	r3, #240	@ 0xf0
 801392a:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 801392c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d00a      	beq.n	801394a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013934:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013938:	f113 0f0d 	cmn.w	r3, #13
 801393c:	d002      	beq.n	8013944 <tcp_process+0x41c>
              tcp_abort(pcb);
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f7fd ff74 	bl	801182c <tcp_abort>
            }
            return ERR_ABRT;
 8013944:	f06f 030c 	mvn.w	r3, #12
 8013948:	e1ce      	b.n	8013ce8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f000 fae0 	bl	8013f10 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013950:	4b63      	ldr	r3, [pc, #396]	@ (8013ae0 <tcp_process+0x5b8>)
 8013952:	881b      	ldrh	r3, [r3, #0]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d005      	beq.n	8013964 <tcp_process+0x43c>
            recv_acked--;
 8013958:	4b61      	ldr	r3, [pc, #388]	@ (8013ae0 <tcp_process+0x5b8>)
 801395a:	881b      	ldrh	r3, [r3, #0]
 801395c:	3b01      	subs	r3, #1
 801395e:	b29a      	uxth	r2, r3
 8013960:	4b5f      	ldr	r3, [pc, #380]	@ (8013ae0 <tcp_process+0x5b8>)
 8013962:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013968:	009a      	lsls	r2, r3, #2
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801396e:	005b      	lsls	r3, r3, #1
 8013970:	f241 111c 	movw	r1, #4380	@ 0x111c
 8013974:	428b      	cmp	r3, r1
 8013976:	bf38      	it	cc
 8013978:	460b      	movcc	r3, r1
 801397a:	429a      	cmp	r2, r3
 801397c:	d204      	bcs.n	8013988 <tcp_process+0x460>
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013982:	009b      	lsls	r3, r3, #2
 8013984:	b29b      	uxth	r3, r3
 8013986:	e00d      	b.n	80139a4 <tcp_process+0x47c>
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801398c:	005b      	lsls	r3, r3, #1
 801398e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8013992:	4293      	cmp	r3, r2
 8013994:	d904      	bls.n	80139a0 <tcp_process+0x478>
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801399a:	005b      	lsls	r3, r3, #1
 801399c:	b29b      	uxth	r3, r3
 801399e:	e001      	b.n	80139a4 <tcp_process+0x47c>
 80139a0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80139a4:	687a      	ldr	r2, [r7, #4]
 80139a6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80139aa:	4b4e      	ldr	r3, [pc, #312]	@ (8013ae4 <tcp_process+0x5bc>)
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	f003 0320 	and.w	r3, r3, #32
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d037      	beq.n	8013a26 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	8b5b      	ldrh	r3, [r3, #26]
 80139ba:	f043 0302 	orr.w	r3, r3, #2
 80139be:	b29a      	uxth	r2, r3
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2207      	movs	r2, #7
 80139c8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80139ca:	e02c      	b.n	8013a26 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139cc:	4b3b      	ldr	r3, [pc, #236]	@ (8013abc <tcp_process+0x594>)
 80139ce:	6819      	ldr	r1, [r3, #0]
 80139d0:	4b3b      	ldr	r3, [pc, #236]	@ (8013ac0 <tcp_process+0x598>)
 80139d2:	881b      	ldrh	r3, [r3, #0]
 80139d4:	461a      	mov	r2, r3
 80139d6:	4b3b      	ldr	r3, [pc, #236]	@ (8013ac4 <tcp_process+0x59c>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80139dc:	4b3a      	ldr	r3, [pc, #232]	@ (8013ac8 <tcp_process+0x5a0>)
 80139de:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139e0:	885b      	ldrh	r3, [r3, #2]
 80139e2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80139e4:	4a38      	ldr	r2, [pc, #224]	@ (8013ac8 <tcp_process+0x5a0>)
 80139e6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139e8:	8812      	ldrh	r2, [r2, #0]
 80139ea:	b292      	uxth	r2, r2
 80139ec:	9202      	str	r2, [sp, #8]
 80139ee:	9301      	str	r3, [sp, #4]
 80139f0:	4b36      	ldr	r3, [pc, #216]	@ (8013acc <tcp_process+0x5a4>)
 80139f2:	9300      	str	r3, [sp, #0]
 80139f4:	4b36      	ldr	r3, [pc, #216]	@ (8013ad0 <tcp_process+0x5a8>)
 80139f6:	4602      	mov	r2, r0
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f002 fc03 	bl	8016204 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80139fe:	e167      	b.n	8013cd0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013a00:	4b2d      	ldr	r3, [pc, #180]	@ (8013ab8 <tcp_process+0x590>)
 8013a02:	781b      	ldrb	r3, [r3, #0]
 8013a04:	f003 0302 	and.w	r3, r3, #2
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	f000 8161 	beq.w	8013cd0 <tcp_process+0x7a8>
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a12:	1e5a      	subs	r2, r3, #1
 8013a14:	4b2b      	ldr	r3, [pc, #172]	@ (8013ac4 <tcp_process+0x59c>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	f040 8159 	bne.w	8013cd0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	f002 f9da 	bl	8015dd8 <tcp_rexmit>
      break;
 8013a24:	e154      	b.n	8013cd0 <tcp_process+0x7a8>
 8013a26:	e153      	b.n	8013cd0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	f000 fa71 	bl	8013f10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8013ae4 <tcp_process+0x5bc>)
 8013a30:	781b      	ldrb	r3, [r3, #0]
 8013a32:	f003 0320 	and.w	r3, r3, #32
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	f000 814c 	beq.w	8013cd4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	8b5b      	ldrh	r3, [r3, #26]
 8013a40:	f043 0302 	orr.w	r3, r3, #2
 8013a44:	b29a      	uxth	r2, r3
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2207      	movs	r2, #7
 8013a4e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013a50:	e140      	b.n	8013cd4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f000 fa5c 	bl	8013f10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013a58:	4b22      	ldr	r3, [pc, #136]	@ (8013ae4 <tcp_process+0x5bc>)
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	f003 0320 	and.w	r3, r3, #32
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d071      	beq.n	8013b48 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a64:	4b14      	ldr	r3, [pc, #80]	@ (8013ab8 <tcp_process+0x590>)
 8013a66:	781b      	ldrb	r3, [r3, #0]
 8013a68:	f003 0310 	and.w	r3, r3, #16
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d060      	beq.n	8013b32 <tcp_process+0x60a>
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013a74:	4b11      	ldr	r3, [pc, #68]	@ (8013abc <tcp_process+0x594>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d15a      	bne.n	8013b32 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d156      	bne.n	8013b32 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	8b5b      	ldrh	r3, [r3, #26]
 8013a88:	f043 0302 	orr.w	r3, r3, #2
 8013a8c:	b29a      	uxth	r2, r3
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	f7fe fda8 	bl	80125e8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013a98:	4b13      	ldr	r3, [pc, #76]	@ (8013ae8 <tcp_process+0x5c0>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	687a      	ldr	r2, [r7, #4]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d105      	bne.n	8013aae <tcp_process+0x586>
 8013aa2:	4b11      	ldr	r3, [pc, #68]	@ (8013ae8 <tcp_process+0x5c0>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	68db      	ldr	r3, [r3, #12]
 8013aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8013ae8 <tcp_process+0x5c0>)
 8013aaa:	6013      	str	r3, [r2, #0]
 8013aac:	e02e      	b.n	8013b0c <tcp_process+0x5e4>
 8013aae:	4b0e      	ldr	r3, [pc, #56]	@ (8013ae8 <tcp_process+0x5c0>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	613b      	str	r3, [r7, #16]
 8013ab4:	e027      	b.n	8013b06 <tcp_process+0x5de>
 8013ab6:	bf00      	nop
 8013ab8:	20013d90 	.word	0x20013d90
 8013abc:	20013d88 	.word	0x20013d88
 8013ac0:	20013d8e 	.word	0x20013d8e
 8013ac4:	20013d84 	.word	0x20013d84
 8013ac8:	20013d74 	.word	0x20013d74
 8013acc:	2000a2e4 	.word	0x2000a2e4
 8013ad0:	2000a2e8 	.word	0x2000a2e8
 8013ad4:	080207f8 	.word	0x080207f8
 8013ad8:	08020a98 	.word	0x08020a98
 8013adc:	08020844 	.word	0x08020844
 8013ae0:	20013d8c 	.word	0x20013d8c
 8013ae4:	20013d91 	.word	0x20013d91
 8013ae8:	20013d54 	.word	0x20013d54
 8013aec:	693b      	ldr	r3, [r7, #16]
 8013aee:	68db      	ldr	r3, [r3, #12]
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	429a      	cmp	r2, r3
 8013af4:	d104      	bne.n	8013b00 <tcp_process+0x5d8>
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	68da      	ldr	r2, [r3, #12]
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	60da      	str	r2, [r3, #12]
 8013afe:	e005      	b.n	8013b0c <tcp_process+0x5e4>
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	68db      	ldr	r3, [r3, #12]
 8013b04:	613b      	str	r3, [r7, #16]
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d1ef      	bne.n	8013aec <tcp_process+0x5c4>
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	60da      	str	r2, [r3, #12]
 8013b12:	4b77      	ldr	r3, [pc, #476]	@ (8013cf0 <tcp_process+0x7c8>)
 8013b14:	2201      	movs	r2, #1
 8013b16:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	220a      	movs	r2, #10
 8013b1c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013b1e:	4b75      	ldr	r3, [pc, #468]	@ (8013cf4 <tcp_process+0x7cc>)
 8013b20:	681a      	ldr	r2, [r3, #0]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	60da      	str	r2, [r3, #12]
 8013b26:	4a73      	ldr	r2, [pc, #460]	@ (8013cf4 <tcp_process+0x7cc>)
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	6013      	str	r3, [r2, #0]
 8013b2c:	f002 fd2c 	bl	8016588 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013b30:	e0d2      	b.n	8013cd8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	8b5b      	ldrh	r3, [r3, #26]
 8013b36:	f043 0302 	orr.w	r3, r3, #2
 8013b3a:	b29a      	uxth	r2, r3
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2208      	movs	r2, #8
 8013b44:	751a      	strb	r2, [r3, #20]
      break;
 8013b46:	e0c7      	b.n	8013cd8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013b48:	4b6b      	ldr	r3, [pc, #428]	@ (8013cf8 <tcp_process+0x7d0>)
 8013b4a:	781b      	ldrb	r3, [r3, #0]
 8013b4c:	f003 0310 	and.w	r3, r3, #16
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	f000 80c1 	beq.w	8013cd8 <tcp_process+0x7b0>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013b5a:	4b68      	ldr	r3, [pc, #416]	@ (8013cfc <tcp_process+0x7d4>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	f040 80ba 	bne.w	8013cd8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	f040 80b5 	bne.w	8013cd8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2206      	movs	r2, #6
 8013b72:	751a      	strb	r2, [r3, #20]
      break;
 8013b74:	e0b0      	b.n	8013cd8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f000 f9ca 	bl	8013f10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013b7c:	4b60      	ldr	r3, [pc, #384]	@ (8013d00 <tcp_process+0x7d8>)
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	f003 0320 	and.w	r3, r3, #32
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	f000 80a9 	beq.w	8013cdc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	8b5b      	ldrh	r3, [r3, #26]
 8013b8e:	f043 0302 	orr.w	r3, r3, #2
 8013b92:	b29a      	uxth	r2, r3
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f7fe fd25 	bl	80125e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013b9e:	4b59      	ldr	r3, [pc, #356]	@ (8013d04 <tcp_process+0x7dc>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	687a      	ldr	r2, [r7, #4]
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d105      	bne.n	8013bb4 <tcp_process+0x68c>
 8013ba8:	4b56      	ldr	r3, [pc, #344]	@ (8013d04 <tcp_process+0x7dc>)
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	68db      	ldr	r3, [r3, #12]
 8013bae:	4a55      	ldr	r2, [pc, #340]	@ (8013d04 <tcp_process+0x7dc>)
 8013bb0:	6013      	str	r3, [r2, #0]
 8013bb2:	e013      	b.n	8013bdc <tcp_process+0x6b4>
 8013bb4:	4b53      	ldr	r3, [pc, #332]	@ (8013d04 <tcp_process+0x7dc>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	60fb      	str	r3, [r7, #12]
 8013bba:	e00c      	b.n	8013bd6 <tcp_process+0x6ae>
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d104      	bne.n	8013bd0 <tcp_process+0x6a8>
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	68da      	ldr	r2, [r3, #12]
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	60da      	str	r2, [r3, #12]
 8013bce:	e005      	b.n	8013bdc <tcp_process+0x6b4>
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	68db      	ldr	r3, [r3, #12]
 8013bd4:	60fb      	str	r3, [r7, #12]
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d1ef      	bne.n	8013bbc <tcp_process+0x694>
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2200      	movs	r2, #0
 8013be0:	60da      	str	r2, [r3, #12]
 8013be2:	4b43      	ldr	r3, [pc, #268]	@ (8013cf0 <tcp_process+0x7c8>)
 8013be4:	2201      	movs	r2, #1
 8013be6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	220a      	movs	r2, #10
 8013bec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013bee:	4b41      	ldr	r3, [pc, #260]	@ (8013cf4 <tcp_process+0x7cc>)
 8013bf0:	681a      	ldr	r2, [r3, #0]
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	60da      	str	r2, [r3, #12]
 8013bf6:	4a3f      	ldr	r2, [pc, #252]	@ (8013cf4 <tcp_process+0x7cc>)
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6013      	str	r3, [r2, #0]
 8013bfc:	f002 fcc4 	bl	8016588 <tcp_timer_needed>
      }
      break;
 8013c00:	e06c      	b.n	8013cdc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f000 f984 	bl	8013f10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013c08:	4b3b      	ldr	r3, [pc, #236]	@ (8013cf8 <tcp_process+0x7d0>)
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	f003 0310 	and.w	r3, r3, #16
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d065      	beq.n	8013ce0 <tcp_process+0x7b8>
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c18:	4b38      	ldr	r3, [pc, #224]	@ (8013cfc <tcp_process+0x7d4>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d15f      	bne.n	8013ce0 <tcp_process+0x7b8>
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d15b      	bne.n	8013ce0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013c28:	6878      	ldr	r0, [r7, #4]
 8013c2a:	f7fe fcdd 	bl	80125e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013c2e:	4b35      	ldr	r3, [pc, #212]	@ (8013d04 <tcp_process+0x7dc>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	687a      	ldr	r2, [r7, #4]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d105      	bne.n	8013c44 <tcp_process+0x71c>
 8013c38:	4b32      	ldr	r3, [pc, #200]	@ (8013d04 <tcp_process+0x7dc>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	68db      	ldr	r3, [r3, #12]
 8013c3e:	4a31      	ldr	r2, [pc, #196]	@ (8013d04 <tcp_process+0x7dc>)
 8013c40:	6013      	str	r3, [r2, #0]
 8013c42:	e013      	b.n	8013c6c <tcp_process+0x744>
 8013c44:	4b2f      	ldr	r3, [pc, #188]	@ (8013d04 <tcp_process+0x7dc>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	61bb      	str	r3, [r7, #24]
 8013c4a:	e00c      	b.n	8013c66 <tcp_process+0x73e>
 8013c4c:	69bb      	ldr	r3, [r7, #24]
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	687a      	ldr	r2, [r7, #4]
 8013c52:	429a      	cmp	r2, r3
 8013c54:	d104      	bne.n	8013c60 <tcp_process+0x738>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	68da      	ldr	r2, [r3, #12]
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	60da      	str	r2, [r3, #12]
 8013c5e:	e005      	b.n	8013c6c <tcp_process+0x744>
 8013c60:	69bb      	ldr	r3, [r7, #24]
 8013c62:	68db      	ldr	r3, [r3, #12]
 8013c64:	61bb      	str	r3, [r7, #24]
 8013c66:	69bb      	ldr	r3, [r7, #24]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d1ef      	bne.n	8013c4c <tcp_process+0x724>
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	60da      	str	r2, [r3, #12]
 8013c72:	4b1f      	ldr	r3, [pc, #124]	@ (8013cf0 <tcp_process+0x7c8>)
 8013c74:	2201      	movs	r2, #1
 8013c76:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	220a      	movs	r2, #10
 8013c7c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8013cf4 <tcp_process+0x7cc>)
 8013c80:	681a      	ldr	r2, [r3, #0]
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	60da      	str	r2, [r3, #12]
 8013c86:	4a1b      	ldr	r2, [pc, #108]	@ (8013cf4 <tcp_process+0x7cc>)
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	6013      	str	r3, [r2, #0]
 8013c8c:	f002 fc7c 	bl	8016588 <tcp_timer_needed>
      }
      break;
 8013c90:	e026      	b.n	8013ce0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	f000 f93c 	bl	8013f10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013c98:	4b17      	ldr	r3, [pc, #92]	@ (8013cf8 <tcp_process+0x7d0>)
 8013c9a:	781b      	ldrb	r3, [r3, #0]
 8013c9c:	f003 0310 	and.w	r3, r3, #16
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d01f      	beq.n	8013ce4 <tcp_process+0x7bc>
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013ca8:	4b14      	ldr	r3, [pc, #80]	@ (8013cfc <tcp_process+0x7d4>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d119      	bne.n	8013ce4 <tcp_process+0x7bc>
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d115      	bne.n	8013ce4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013cb8:	4b11      	ldr	r3, [pc, #68]	@ (8013d00 <tcp_process+0x7d8>)
 8013cba:	781b      	ldrb	r3, [r3, #0]
 8013cbc:	f043 0310 	orr.w	r3, r3, #16
 8013cc0:	b2da      	uxtb	r2, r3
 8013cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8013d00 <tcp_process+0x7d8>)
 8013cc4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013cc6:	e00d      	b.n	8013ce4 <tcp_process+0x7bc>
    default:
      break;
 8013cc8:	bf00      	nop
 8013cca:	e00c      	b.n	8013ce6 <tcp_process+0x7be>
      break;
 8013ccc:	bf00      	nop
 8013cce:	e00a      	b.n	8013ce6 <tcp_process+0x7be>
      break;
 8013cd0:	bf00      	nop
 8013cd2:	e008      	b.n	8013ce6 <tcp_process+0x7be>
      break;
 8013cd4:	bf00      	nop
 8013cd6:	e006      	b.n	8013ce6 <tcp_process+0x7be>
      break;
 8013cd8:	bf00      	nop
 8013cda:	e004      	b.n	8013ce6 <tcp_process+0x7be>
      break;
 8013cdc:	bf00      	nop
 8013cde:	e002      	b.n	8013ce6 <tcp_process+0x7be>
      break;
 8013ce0:	bf00      	nop
 8013ce2:	e000      	b.n	8013ce6 <tcp_process+0x7be>
      break;
 8013ce4:	bf00      	nop
  }
  return ERR_OK;
 8013ce6:	2300      	movs	r3, #0
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3724      	adds	r7, #36	@ 0x24
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd90      	pop	{r4, r7, pc}
 8013cf0:	20013d5c 	.word	0x20013d5c
 8013cf4:	20013d58 	.word	0x20013d58
 8013cf8:	20013d90 	.word	0x20013d90
 8013cfc:	20013d88 	.word	0x20013d88
 8013d00:	20013d91 	.word	0x20013d91
 8013d04:	20013d54 	.word	0x20013d54

08013d08 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013d08:	b590      	push	{r4, r7, lr}
 8013d0a:	b085      	sub	sp, #20
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
 8013d10:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d106      	bne.n	8013d26 <tcp_oos_insert_segment+0x1e>
 8013d18:	4b3b      	ldr	r3, [pc, #236]	@ (8013e08 <tcp_oos_insert_segment+0x100>)
 8013d1a:	f240 421f 	movw	r2, #1055	@ 0x41f
 8013d1e:	493b      	ldr	r1, [pc, #236]	@ (8013e0c <tcp_oos_insert_segment+0x104>)
 8013d20:	483b      	ldr	r0, [pc, #236]	@ (8013e10 <tcp_oos_insert_segment+0x108>)
 8013d22:	f008 fd85 	bl	801c830 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	691b      	ldr	r3, [r3, #16]
 8013d2a:	899b      	ldrh	r3, [r3, #12]
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7fb fa1e 	bl	800f170 <lwip_htons>
 8013d34:	4603      	mov	r3, r0
 8013d36:	b2db      	uxtb	r3, r3
 8013d38:	f003 0301 	and.w	r3, r3, #1
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d028      	beq.n	8013d92 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013d40:	6838      	ldr	r0, [r7, #0]
 8013d42:	f7fe fa4f 	bl	80121e4 <tcp_segs_free>
    next = NULL;
 8013d46:	2300      	movs	r3, #0
 8013d48:	603b      	str	r3, [r7, #0]
 8013d4a:	e056      	b.n	8013dfa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	691b      	ldr	r3, [r3, #16]
 8013d50:	899b      	ldrh	r3, [r3, #12]
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7fb fa0b 	bl	800f170 <lwip_htons>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	b2db      	uxtb	r3, r3
 8013d5e:	f003 0301 	and.w	r3, r3, #1
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d00d      	beq.n	8013d82 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	691b      	ldr	r3, [r3, #16]
 8013d6a:	899b      	ldrh	r3, [r3, #12]
 8013d6c:	b29c      	uxth	r4, r3
 8013d6e:	2001      	movs	r0, #1
 8013d70:	f7fb f9fe 	bl	800f170 <lwip_htons>
 8013d74:	4603      	mov	r3, r0
 8013d76:	461a      	mov	r2, r3
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	691b      	ldr	r3, [r3, #16]
 8013d7c:	4322      	orrs	r2, r4
 8013d7e:	b292      	uxth	r2, r2
 8013d80:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f7fe fa3e 	bl	801220e <tcp_seg_free>
    while (next &&
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d00e      	beq.n	8013db6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	891b      	ldrh	r3, [r3, #8]
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8013e14 <tcp_oos_insert_segment+0x10c>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	441a      	add	r2, r3
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	691b      	ldr	r3, [r3, #16]
 8013da8:	685b      	ldr	r3, [r3, #4]
 8013daa:	6839      	ldr	r1, [r7, #0]
 8013dac:	8909      	ldrh	r1, [r1, #8]
 8013dae:	440b      	add	r3, r1
 8013db0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	daca      	bge.n	8013d4c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d01e      	beq.n	8013dfa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	891b      	ldrh	r3, [r3, #8]
 8013dc0:	461a      	mov	r2, r3
 8013dc2:	4b14      	ldr	r3, [pc, #80]	@ (8013e14 <tcp_oos_insert_segment+0x10c>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	441a      	add	r2, r3
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	691b      	ldr	r3, [r3, #16]
 8013dcc:	685b      	ldr	r3, [r3, #4]
 8013dce:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	dd12      	ble.n	8013dfa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	691b      	ldr	r3, [r3, #16]
 8013dd8:	685b      	ldr	r3, [r3, #4]
 8013dda:	b29a      	uxth	r2, r3
 8013ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8013e14 <tcp_oos_insert_segment+0x10c>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	1ad3      	subs	r3, r2, r3
 8013de4:	b29a      	uxth	r2, r3
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	685a      	ldr	r2, [r3, #4]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	891b      	ldrh	r3, [r3, #8]
 8013df2:	4619      	mov	r1, r3
 8013df4:	4610      	mov	r0, r2
 8013df6:	f7fc fd57 	bl	80108a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	683a      	ldr	r2, [r7, #0]
 8013dfe:	601a      	str	r2, [r3, #0]
}
 8013e00:	bf00      	nop
 8013e02:	3714      	adds	r7, #20
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd90      	pop	{r4, r7, pc}
 8013e08:	080207f8 	.word	0x080207f8
 8013e0c:	08020ab8 	.word	0x08020ab8
 8013e10:	08020844 	.word	0x08020844
 8013e14:	20013d84 	.word	0x20013d84

08013e18 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013e18:	b5b0      	push	{r4, r5, r7, lr}
 8013e1a:	b086      	sub	sp, #24
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	60f8      	str	r0, [r7, #12]
 8013e20:	60b9      	str	r1, [r7, #8]
 8013e22:	607a      	str	r2, [r7, #4]
 8013e24:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013e26:	e03e      	b.n	8013ea6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7fc ff4a 	bl	8010cd0 <pbuf_clen>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013e46:	8a7a      	ldrh	r2, [r7, #18]
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	d906      	bls.n	8013e5a <tcp_free_acked_segments+0x42>
 8013e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8013ef8 <tcp_free_acked_segments+0xe0>)
 8013e4e:	f240 4257 	movw	r2, #1111	@ 0x457
 8013e52:	492a      	ldr	r1, [pc, #168]	@ (8013efc <tcp_free_acked_segments+0xe4>)
 8013e54:	482a      	ldr	r0, [pc, #168]	@ (8013f00 <tcp_free_acked_segments+0xe8>)
 8013e56:	f008 fceb 	bl	801c830 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8013e60:	8a7b      	ldrh	r3, [r7, #18]
 8013e62:	1ad3      	subs	r3, r2, r3
 8013e64:	b29a      	uxth	r2, r3
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013e6c:	697b      	ldr	r3, [r7, #20]
 8013e6e:	891a      	ldrh	r2, [r3, #8]
 8013e70:	4b24      	ldr	r3, [pc, #144]	@ (8013f04 <tcp_free_acked_segments+0xec>)
 8013e72:	881b      	ldrh	r3, [r3, #0]
 8013e74:	4413      	add	r3, r2
 8013e76:	b29a      	uxth	r2, r3
 8013e78:	4b22      	ldr	r3, [pc, #136]	@ (8013f04 <tcp_free_acked_segments+0xec>)
 8013e7a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013e7c:	6978      	ldr	r0, [r7, #20]
 8013e7e:	f7fe f9c6 	bl	801220e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d00c      	beq.n	8013ea6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d109      	bne.n	8013ea6 <tcp_free_acked_segments+0x8e>
 8013e92:	683b      	ldr	r3, [r7, #0]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d106      	bne.n	8013ea6 <tcp_free_acked_segments+0x8e>
 8013e98:	4b17      	ldr	r3, [pc, #92]	@ (8013ef8 <tcp_free_acked_segments+0xe0>)
 8013e9a:	f240 4261 	movw	r2, #1121	@ 0x461
 8013e9e:	491a      	ldr	r1, [pc, #104]	@ (8013f08 <tcp_free_acked_segments+0xf0>)
 8013ea0:	4817      	ldr	r0, [pc, #92]	@ (8013f00 <tcp_free_acked_segments+0xe8>)
 8013ea2:	f008 fcc5 	bl	801c830 <iprintf>
  while (seg_list != NULL &&
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d020      	beq.n	8013eee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	691b      	ldr	r3, [r3, #16]
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7fb f971 	bl	800f19a <lwip_htonl>
 8013eb8:	4604      	mov	r4, r0
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	891b      	ldrh	r3, [r3, #8]
 8013ebe:	461d      	mov	r5, r3
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	691b      	ldr	r3, [r3, #16]
 8013ec4:	899b      	ldrh	r3, [r3, #12]
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7fb f951 	bl	800f170 <lwip_htons>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	b2db      	uxtb	r3, r3
 8013ed2:	f003 0303 	and.w	r3, r3, #3
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d001      	beq.n	8013ede <tcp_free_acked_segments+0xc6>
 8013eda:	2301      	movs	r3, #1
 8013edc:	e000      	b.n	8013ee0 <tcp_free_acked_segments+0xc8>
 8013ede:	2300      	movs	r3, #0
 8013ee0:	442b      	add	r3, r5
 8013ee2:	18e2      	adds	r2, r4, r3
 8013ee4:	4b09      	ldr	r3, [pc, #36]	@ (8013f0c <tcp_free_acked_segments+0xf4>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	dd9c      	ble.n	8013e28 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013eee:	68bb      	ldr	r3, [r7, #8]
}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	3718      	adds	r7, #24
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8013ef8:	080207f8 	.word	0x080207f8
 8013efc:	08020ae0 	.word	0x08020ae0
 8013f00:	08020844 	.word	0x08020844
 8013f04:	20013d8c 	.word	0x20013d8c
 8013f08:	08020b08 	.word	0x08020b08
 8013f0c:	20013d88 	.word	0x20013d88

08013f10 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013f10:	b5b0      	push	{r4, r5, r7, lr}
 8013f12:	b094      	sub	sp, #80	@ 0x50
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013f18:	2300      	movs	r3, #0
 8013f1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d106      	bne.n	8013f30 <tcp_receive+0x20>
 8013f22:	4b91      	ldr	r3, [pc, #580]	@ (8014168 <tcp_receive+0x258>)
 8013f24:	f240 427b 	movw	r2, #1147	@ 0x47b
 8013f28:	4990      	ldr	r1, [pc, #576]	@ (801416c <tcp_receive+0x25c>)
 8013f2a:	4891      	ldr	r0, [pc, #580]	@ (8014170 <tcp_receive+0x260>)
 8013f2c:	f008 fc80 	bl	801c830 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	7d1b      	ldrb	r3, [r3, #20]
 8013f34:	2b03      	cmp	r3, #3
 8013f36:	d806      	bhi.n	8013f46 <tcp_receive+0x36>
 8013f38:	4b8b      	ldr	r3, [pc, #556]	@ (8014168 <tcp_receive+0x258>)
 8013f3a:	f240 427c 	movw	r2, #1148	@ 0x47c
 8013f3e:	498d      	ldr	r1, [pc, #564]	@ (8014174 <tcp_receive+0x264>)
 8013f40:	488b      	ldr	r0, [pc, #556]	@ (8014170 <tcp_receive+0x260>)
 8013f42:	f008 fc75 	bl	801c830 <iprintf>

  if (flags & TCP_ACK) {
 8013f46:	4b8c      	ldr	r3, [pc, #560]	@ (8014178 <tcp_receive+0x268>)
 8013f48:	781b      	ldrb	r3, [r3, #0]
 8013f4a:	f003 0310 	and.w	r3, r3, #16
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	f000 8264 	beq.w	801441c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013f5a:	461a      	mov	r2, r3
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013f60:	4413      	add	r3, r2
 8013f62:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013f68:	4b84      	ldr	r3, [pc, #528]	@ (801417c <tcp_receive+0x26c>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	1ad3      	subs	r3, r2, r3
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	db1b      	blt.n	8013faa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013f76:	4b81      	ldr	r3, [pc, #516]	@ (801417c <tcp_receive+0x26c>)
 8013f78:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d106      	bne.n	8013f8c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013f82:	4b7f      	ldr	r3, [pc, #508]	@ (8014180 <tcp_receive+0x270>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	1ad3      	subs	r3, r2, r3
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	db0e      	blt.n	8013faa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013f90:	4b7b      	ldr	r3, [pc, #492]	@ (8014180 <tcp_receive+0x270>)
 8013f92:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013f94:	429a      	cmp	r2, r3
 8013f96:	d125      	bne.n	8013fe4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013f98:	4b7a      	ldr	r3, [pc, #488]	@ (8014184 <tcp_receive+0x274>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	89db      	ldrh	r3, [r3, #14]
 8013f9e:	b29a      	uxth	r2, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013fa6:	429a      	cmp	r2, r3
 8013fa8:	d91c      	bls.n	8013fe4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013faa:	4b76      	ldr	r3, [pc, #472]	@ (8014184 <tcp_receive+0x274>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	89db      	ldrh	r3, [r3, #14]
 8013fb0:	b29a      	uxth	r2, r3
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	d205      	bcs.n	8013fd4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8013fd4:	4b69      	ldr	r3, [pc, #420]	@ (801417c <tcp_receive+0x26c>)
 8013fd6:	681a      	ldr	r2, [r3, #0]
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8013fdc:	4b68      	ldr	r3, [pc, #416]	@ (8014180 <tcp_receive+0x270>)
 8013fde:	681a      	ldr	r2, [r3, #0]
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013fe4:	4b66      	ldr	r3, [pc, #408]	@ (8014180 <tcp_receive+0x270>)
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013fec:	1ad3      	subs	r3, r2, r3
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	dc58      	bgt.n	80140a4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013ff2:	4b65      	ldr	r3, [pc, #404]	@ (8014188 <tcp_receive+0x278>)
 8013ff4:	881b      	ldrh	r3, [r3, #0]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d14b      	bne.n	8014092 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013ffe:	687a      	ldr	r2, [r7, #4]
 8014000:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8014004:	4413      	add	r3, r2
 8014006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014008:	429a      	cmp	r2, r3
 801400a:	d142      	bne.n	8014092 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014012:	2b00      	cmp	r3, #0
 8014014:	db3d      	blt.n	8014092 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801401a:	4b59      	ldr	r3, [pc, #356]	@ (8014180 <tcp_receive+0x270>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	429a      	cmp	r2, r3
 8014020:	d137      	bne.n	8014092 <tcp_receive+0x182>
              found_dupack = 1;
 8014022:	2301      	movs	r3, #1
 8014024:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801402c:	2bff      	cmp	r3, #255	@ 0xff
 801402e:	d007      	beq.n	8014040 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014036:	3301      	adds	r3, #1
 8014038:	b2da      	uxtb	r2, r3
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014046:	2b03      	cmp	r3, #3
 8014048:	d91b      	bls.n	8014082 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014054:	4413      	add	r3, r2
 8014056:	b29a      	uxth	r2, r3
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801405e:	429a      	cmp	r2, r3
 8014060:	d30a      	bcc.n	8014078 <tcp_receive+0x168>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801406c:	4413      	add	r3, r2
 801406e:	b29a      	uxth	r2, r3
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014076:	e004      	b.n	8014082 <tcp_receive+0x172>
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801407e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014088:	2b02      	cmp	r3, #2
 801408a:	d902      	bls.n	8014092 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f001 ff0f 	bl	8015eb0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014094:	2b00      	cmp	r3, #0
 8014096:	f040 8161 	bne.w	801435c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2200      	movs	r2, #0
 801409e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80140a2:	e15b      	b.n	801435c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80140a4:	4b36      	ldr	r3, [pc, #216]	@ (8014180 <tcp_receive+0x270>)
 80140a6:	681a      	ldr	r2, [r3, #0]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80140ac:	1ad3      	subs	r3, r2, r3
 80140ae:	3b01      	subs	r3, #1
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	f2c0 814e 	blt.w	8014352 <tcp_receive+0x442>
 80140b6:	4b32      	ldr	r3, [pc, #200]	@ (8014180 <tcp_receive+0x270>)
 80140b8:	681a      	ldr	r2, [r3, #0]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80140be:	1ad3      	subs	r3, r2, r3
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f300 8146 	bgt.w	8014352 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	8b5b      	ldrh	r3, [r3, #26]
 80140ca:	f003 0304 	and.w	r3, r3, #4
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d010      	beq.n	80140f4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	8b5b      	ldrh	r3, [r3, #26]
 80140d6:	f023 0304 	bic.w	r3, r3, #4
 80140da:	b29a      	uxth	r2, r3
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2200      	movs	r2, #0
 80140f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2200      	movs	r2, #0
 80140f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014102:	10db      	asrs	r3, r3, #3
 8014104:	b21b      	sxth	r3, r3
 8014106:	b29a      	uxth	r2, r3
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801410e:	b29b      	uxth	r3, r3
 8014110:	4413      	add	r3, r2
 8014112:	b29b      	uxth	r3, r3
 8014114:	b21a      	sxth	r2, r3
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801411c:	4b18      	ldr	r3, [pc, #96]	@ (8014180 <tcp_receive+0x270>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	b29a      	uxth	r2, r3
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014126:	b29b      	uxth	r3, r3
 8014128:	1ad3      	subs	r3, r2, r3
 801412a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2200      	movs	r2, #0
 8014130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8014134:	4b12      	ldr	r3, [pc, #72]	@ (8014180 <tcp_receive+0x270>)
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	7d1b      	ldrb	r3, [r3, #20]
 8014140:	2b03      	cmp	r3, #3
 8014142:	f240 8097 	bls.w	8014274 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014152:	429a      	cmp	r2, r3
 8014154:	d245      	bcs.n	80141e2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	8b5b      	ldrh	r3, [r3, #26]
 801415a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801415e:	2b00      	cmp	r3, #0
 8014160:	d014      	beq.n	801418c <tcp_receive+0x27c>
 8014162:	2301      	movs	r3, #1
 8014164:	e013      	b.n	801418e <tcp_receive+0x27e>
 8014166:	bf00      	nop
 8014168:	080207f8 	.word	0x080207f8
 801416c:	08020b28 	.word	0x08020b28
 8014170:	08020844 	.word	0x08020844
 8014174:	08020b44 	.word	0x08020b44
 8014178:	20013d90 	.word	0x20013d90
 801417c:	20013d84 	.word	0x20013d84
 8014180:	20013d88 	.word	0x20013d88
 8014184:	20013d74 	.word	0x20013d74
 8014188:	20013d8e 	.word	0x20013d8e
 801418c:	2302      	movs	r3, #2
 801418e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014192:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014196:	b29a      	uxth	r2, r3
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801419c:	fb12 f303 	smulbb	r3, r2, r3
 80141a0:	b29b      	uxth	r3, r3
 80141a2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80141a4:	4293      	cmp	r3, r2
 80141a6:	bf28      	it	cs
 80141a8:	4613      	movcs	r3, r2
 80141aa:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80141b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80141b4:	4413      	add	r3, r2
 80141b6:	b29a      	uxth	r2, r3
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80141be:	429a      	cmp	r2, r3
 80141c0:	d309      	bcc.n	80141d6 <tcp_receive+0x2c6>
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80141c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80141ca:	4413      	add	r3, r2
 80141cc:	b29a      	uxth	r2, r3
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80141d4:	e04e      	b.n	8014274 <tcp_receive+0x364>
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80141dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80141e0:	e048      	b.n	8014274 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80141e8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80141ea:	4413      	add	r3, r2
 80141ec:	b29a      	uxth	r2, r3
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d309      	bcc.n	801420c <tcp_receive+0x2fc>
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80141fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014200:	4413      	add	r3, r2
 8014202:	b29a      	uxth	r2, r3
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801420a:	e004      	b.n	8014216 <tcp_receive+0x306>
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014212:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014222:	429a      	cmp	r2, r3
 8014224:	d326      	bcc.n	8014274 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014232:	1ad3      	subs	r3, r2, r3
 8014234:	b29a      	uxth	r2, r3
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014246:	4413      	add	r3, r2
 8014248:	b29a      	uxth	r2, r3
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014250:	429a      	cmp	r2, r3
 8014252:	d30a      	bcc.n	801426a <tcp_receive+0x35a>
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801425e:	4413      	add	r3, r2
 8014260:	b29a      	uxth	r2, r3
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014268:	e004      	b.n	8014274 <tcp_receive+0x364>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014270:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801427c:	4a98      	ldr	r2, [pc, #608]	@ (80144e0 <tcp_receive+0x5d0>)
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f7ff fdca 	bl	8013e18 <tcp_free_acked_segments>
 8014284:	4602      	mov	r2, r0
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014292:	4a94      	ldr	r2, [pc, #592]	@ (80144e4 <tcp_receive+0x5d4>)
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f7ff fdbf 	bl	8013e18 <tcp_free_acked_segments>
 801429a:	4602      	mov	r2, r0
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d104      	bne.n	80142b2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80142ae:	861a      	strh	r2, [r3, #48]	@ 0x30
 80142b0:	e002      	b.n	80142b8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	2200      	movs	r2, #0
 80142b6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2200      	movs	r2, #0
 80142bc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d103      	bne.n	80142ce <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	2200      	movs	r2, #0
 80142ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80142d4:	4b84      	ldr	r3, [pc, #528]	@ (80144e8 <tcp_receive+0x5d8>)
 80142d6:	881b      	ldrh	r3, [r3, #0]
 80142d8:	4413      	add	r3, r2
 80142da:	b29a      	uxth	r2, r3
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	8b5b      	ldrh	r3, [r3, #26]
 80142e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d035      	beq.n	801435a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d118      	bne.n	8014328 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d00c      	beq.n	8014318 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014306:	691b      	ldr	r3, [r3, #16]
 8014308:	685b      	ldr	r3, [r3, #4]
 801430a:	4618      	mov	r0, r3
 801430c:	f7fa ff45 	bl	800f19a <lwip_htonl>
 8014310:	4603      	mov	r3, r0
 8014312:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014314:	2b00      	cmp	r3, #0
 8014316:	dc20      	bgt.n	801435a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	8b5b      	ldrh	r3, [r3, #26]
 801431c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014320:	b29a      	uxth	r2, r3
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014326:	e018      	b.n	801435a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014330:	691b      	ldr	r3, [r3, #16]
 8014332:	685b      	ldr	r3, [r3, #4]
 8014334:	4618      	mov	r0, r3
 8014336:	f7fa ff30 	bl	800f19a <lwip_htonl>
 801433a:	4603      	mov	r3, r0
 801433c:	1ae3      	subs	r3, r4, r3
 801433e:	2b00      	cmp	r3, #0
 8014340:	dc0b      	bgt.n	801435a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	8b5b      	ldrh	r3, [r3, #26]
 8014346:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801434a:	b29a      	uxth	r2, r3
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014350:	e003      	b.n	801435a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f001 ffa8 	bl	80162a8 <tcp_send_empty_ack>
 8014358:	e000      	b.n	801435c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801435a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014360:	2b00      	cmp	r3, #0
 8014362:	d05b      	beq.n	801441c <tcp_receive+0x50c>
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014368:	4b60      	ldr	r3, [pc, #384]	@ (80144ec <tcp_receive+0x5dc>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	1ad3      	subs	r3, r2, r3
 801436e:	2b00      	cmp	r3, #0
 8014370:	da54      	bge.n	801441c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014372:	4b5f      	ldr	r3, [pc, #380]	@ (80144f0 <tcp_receive+0x5e0>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	b29a      	uxth	r2, r3
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801437c:	b29b      	uxth	r3, r3
 801437e:	1ad3      	subs	r3, r2, r3
 8014380:	b29b      	uxth	r3, r3
 8014382:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014386:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014390:	10db      	asrs	r3, r3, #3
 8014392:	b21b      	sxth	r3, r3
 8014394:	b29b      	uxth	r3, r3
 8014396:	1ad3      	subs	r3, r2, r3
 8014398:	b29b      	uxth	r3, r3
 801439a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80143a4:	b29a      	uxth	r2, r3
 80143a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80143aa:	4413      	add	r3, r2
 80143ac:	b29b      	uxth	r3, r3
 80143ae:	b21a      	sxth	r2, r3
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80143b4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	da05      	bge.n	80143c8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80143bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80143c0:	425b      	negs	r3, r3
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80143c8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80143d2:	109b      	asrs	r3, r3, #2
 80143d4:	b21b      	sxth	r3, r3
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	1ad3      	subs	r3, r2, r3
 80143da:	b29b      	uxth	r3, r3
 80143dc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80143e6:	b29a      	uxth	r2, r3
 80143e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80143ec:	4413      	add	r3, r2
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	b21a      	sxth	r2, r3
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80143fc:	10db      	asrs	r3, r3, #3
 80143fe:	b21b      	sxth	r3, r3
 8014400:	b29a      	uxth	r2, r3
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014408:	b29b      	uxth	r3, r3
 801440a:	4413      	add	r3, r2
 801440c:	b29b      	uxth	r3, r3
 801440e:	b21a      	sxth	r2, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	2200      	movs	r2, #0
 801441a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801441c:	4b35      	ldr	r3, [pc, #212]	@ (80144f4 <tcp_receive+0x5e4>)
 801441e:	881b      	ldrh	r3, [r3, #0]
 8014420:	2b00      	cmp	r3, #0
 8014422:	f000 84df 	beq.w	8014de4 <tcp_receive+0xed4>
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	7d1b      	ldrb	r3, [r3, #20]
 801442a:	2b06      	cmp	r3, #6
 801442c:	f200 84da 	bhi.w	8014de4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014434:	4b30      	ldr	r3, [pc, #192]	@ (80144f8 <tcp_receive+0x5e8>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	1ad3      	subs	r3, r2, r3
 801443a:	3b01      	subs	r3, #1
 801443c:	2b00      	cmp	r3, #0
 801443e:	f2c0 808f 	blt.w	8014560 <tcp_receive+0x650>
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014446:	4b2b      	ldr	r3, [pc, #172]	@ (80144f4 <tcp_receive+0x5e4>)
 8014448:	881b      	ldrh	r3, [r3, #0]
 801444a:	4619      	mov	r1, r3
 801444c:	4b2a      	ldr	r3, [pc, #168]	@ (80144f8 <tcp_receive+0x5e8>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	440b      	add	r3, r1
 8014452:	1ad3      	subs	r3, r2, r3
 8014454:	3301      	adds	r3, #1
 8014456:	2b00      	cmp	r3, #0
 8014458:	f300 8082 	bgt.w	8014560 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801445c:	4b27      	ldr	r3, [pc, #156]	@ (80144fc <tcp_receive+0x5ec>)
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014466:	4b24      	ldr	r3, [pc, #144]	@ (80144f8 <tcp_receive+0x5e8>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	1ad3      	subs	r3, r2, r3
 801446c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801446e:	4b23      	ldr	r3, [pc, #140]	@ (80144fc <tcp_receive+0x5ec>)
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d106      	bne.n	8014484 <tcp_receive+0x574>
 8014476:	4b22      	ldr	r3, [pc, #136]	@ (8014500 <tcp_receive+0x5f0>)
 8014478:	f240 5294 	movw	r2, #1428	@ 0x594
 801447c:	4921      	ldr	r1, [pc, #132]	@ (8014504 <tcp_receive+0x5f4>)
 801447e:	4822      	ldr	r0, [pc, #136]	@ (8014508 <tcp_receive+0x5f8>)
 8014480:	f008 f9d6 	bl	801c830 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014486:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801448a:	4293      	cmp	r3, r2
 801448c:	d906      	bls.n	801449c <tcp_receive+0x58c>
 801448e:	4b1c      	ldr	r3, [pc, #112]	@ (8014500 <tcp_receive+0x5f0>)
 8014490:	f240 5295 	movw	r2, #1429	@ 0x595
 8014494:	491d      	ldr	r1, [pc, #116]	@ (801450c <tcp_receive+0x5fc>)
 8014496:	481c      	ldr	r0, [pc, #112]	@ (8014508 <tcp_receive+0x5f8>)
 8014498:	f008 f9ca 	bl	801c830 <iprintf>
      off = (u16_t)off32;
 801449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801449e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80144a2:	4b16      	ldr	r3, [pc, #88]	@ (80144fc <tcp_receive+0x5ec>)
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	891b      	ldrh	r3, [r3, #8]
 80144a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d906      	bls.n	80144be <tcp_receive+0x5ae>
 80144b0:	4b13      	ldr	r3, [pc, #76]	@ (8014500 <tcp_receive+0x5f0>)
 80144b2:	f240 5297 	movw	r2, #1431	@ 0x597
 80144b6:	4916      	ldr	r1, [pc, #88]	@ (8014510 <tcp_receive+0x600>)
 80144b8:	4813      	ldr	r0, [pc, #76]	@ (8014508 <tcp_receive+0x5f8>)
 80144ba:	f008 f9b9 	bl	801c830 <iprintf>
      inseg.len -= off;
 80144be:	4b0f      	ldr	r3, [pc, #60]	@ (80144fc <tcp_receive+0x5ec>)
 80144c0:	891a      	ldrh	r2, [r3, #8]
 80144c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80144c6:	1ad3      	subs	r3, r2, r3
 80144c8:	b29a      	uxth	r2, r3
 80144ca:	4b0c      	ldr	r3, [pc, #48]	@ (80144fc <tcp_receive+0x5ec>)
 80144cc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80144ce:	4b0b      	ldr	r3, [pc, #44]	@ (80144fc <tcp_receive+0x5ec>)
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	891a      	ldrh	r2, [r3, #8]
 80144d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80144d8:	1ad3      	subs	r3, r2, r3
 80144da:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80144dc:	e02a      	b.n	8014534 <tcp_receive+0x624>
 80144de:	bf00      	nop
 80144e0:	08020b60 	.word	0x08020b60
 80144e4:	08020b68 	.word	0x08020b68
 80144e8:	20013d8c 	.word	0x20013d8c
 80144ec:	20013d88 	.word	0x20013d88
 80144f0:	20013d48 	.word	0x20013d48
 80144f4:	20013d8e 	.word	0x20013d8e
 80144f8:	20013d84 	.word	0x20013d84
 80144fc:	20013d60 	.word	0x20013d60
 8014500:	080207f8 	.word	0x080207f8
 8014504:	08020b70 	.word	0x08020b70
 8014508:	08020844 	.word	0x08020844
 801450c:	08020b80 	.word	0x08020b80
 8014510:	08020b90 	.word	0x08020b90
        off -= p->len;
 8014514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014516:	895b      	ldrh	r3, [r3, #10]
 8014518:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801451c:	1ad3      	subs	r3, r2, r3
 801451e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014524:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014526:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801452a:	2200      	movs	r2, #0
 801452c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801452e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8014534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014536:	895b      	ldrh	r3, [r3, #10]
 8014538:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801453c:	429a      	cmp	r2, r3
 801453e:	d8e9      	bhi.n	8014514 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014540:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014544:	4619      	mov	r1, r3
 8014546:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8014548:	f7fc faae 	bl	8010aa8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014550:	4a90      	ldr	r2, [pc, #576]	@ (8014794 <tcp_receive+0x884>)
 8014552:	6013      	str	r3, [r2, #0]
 8014554:	4b90      	ldr	r3, [pc, #576]	@ (8014798 <tcp_receive+0x888>)
 8014556:	691b      	ldr	r3, [r3, #16]
 8014558:	4a8e      	ldr	r2, [pc, #568]	@ (8014794 <tcp_receive+0x884>)
 801455a:	6812      	ldr	r2, [r2, #0]
 801455c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801455e:	e00d      	b.n	801457c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014560:	4b8c      	ldr	r3, [pc, #560]	@ (8014794 <tcp_receive+0x884>)
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014568:	1ad3      	subs	r3, r2, r3
 801456a:	2b00      	cmp	r3, #0
 801456c:	da06      	bge.n	801457c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	8b5b      	ldrh	r3, [r3, #26]
 8014572:	f043 0302 	orr.w	r3, r3, #2
 8014576:	b29a      	uxth	r2, r3
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801457c:	4b85      	ldr	r3, [pc, #532]	@ (8014794 <tcp_receive+0x884>)
 801457e:	681a      	ldr	r2, [r3, #0]
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014584:	1ad3      	subs	r3, r2, r3
 8014586:	2b00      	cmp	r3, #0
 8014588:	f2c0 8427 	blt.w	8014dda <tcp_receive+0xeca>
 801458c:	4b81      	ldr	r3, [pc, #516]	@ (8014794 <tcp_receive+0x884>)
 801458e:	681a      	ldr	r2, [r3, #0]
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014594:	6879      	ldr	r1, [r7, #4]
 8014596:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014598:	440b      	add	r3, r1
 801459a:	1ad3      	subs	r3, r2, r3
 801459c:	3301      	adds	r3, #1
 801459e:	2b00      	cmp	r3, #0
 80145a0:	f300 841b 	bgt.w	8014dda <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80145a8:	4b7a      	ldr	r3, [pc, #488]	@ (8014794 <tcp_receive+0x884>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	429a      	cmp	r2, r3
 80145ae:	f040 8298 	bne.w	8014ae2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80145b2:	4b79      	ldr	r3, [pc, #484]	@ (8014798 <tcp_receive+0x888>)
 80145b4:	891c      	ldrh	r4, [r3, #8]
 80145b6:	4b78      	ldr	r3, [pc, #480]	@ (8014798 <tcp_receive+0x888>)
 80145b8:	691b      	ldr	r3, [r3, #16]
 80145ba:	899b      	ldrh	r3, [r3, #12]
 80145bc:	b29b      	uxth	r3, r3
 80145be:	4618      	mov	r0, r3
 80145c0:	f7fa fdd6 	bl	800f170 <lwip_htons>
 80145c4:	4603      	mov	r3, r0
 80145c6:	b2db      	uxtb	r3, r3
 80145c8:	f003 0303 	and.w	r3, r3, #3
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d001      	beq.n	80145d4 <tcp_receive+0x6c4>
 80145d0:	2301      	movs	r3, #1
 80145d2:	e000      	b.n	80145d6 <tcp_receive+0x6c6>
 80145d4:	2300      	movs	r3, #0
 80145d6:	4423      	add	r3, r4
 80145d8:	b29a      	uxth	r2, r3
 80145da:	4b70      	ldr	r3, [pc, #448]	@ (801479c <tcp_receive+0x88c>)
 80145dc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80145e2:	4b6e      	ldr	r3, [pc, #440]	@ (801479c <tcp_receive+0x88c>)
 80145e4:	881b      	ldrh	r3, [r3, #0]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d274      	bcs.n	80146d4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80145ea:	4b6b      	ldr	r3, [pc, #428]	@ (8014798 <tcp_receive+0x888>)
 80145ec:	691b      	ldr	r3, [r3, #16]
 80145ee:	899b      	ldrh	r3, [r3, #12]
 80145f0:	b29b      	uxth	r3, r3
 80145f2:	4618      	mov	r0, r3
 80145f4:	f7fa fdbc 	bl	800f170 <lwip_htons>
 80145f8:	4603      	mov	r3, r0
 80145fa:	b2db      	uxtb	r3, r3
 80145fc:	f003 0301 	and.w	r3, r3, #1
 8014600:	2b00      	cmp	r3, #0
 8014602:	d01e      	beq.n	8014642 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014604:	4b64      	ldr	r3, [pc, #400]	@ (8014798 <tcp_receive+0x888>)
 8014606:	691b      	ldr	r3, [r3, #16]
 8014608:	899b      	ldrh	r3, [r3, #12]
 801460a:	b29b      	uxth	r3, r3
 801460c:	b21b      	sxth	r3, r3
 801460e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014612:	b21c      	sxth	r4, r3
 8014614:	4b60      	ldr	r3, [pc, #384]	@ (8014798 <tcp_receive+0x888>)
 8014616:	691b      	ldr	r3, [r3, #16]
 8014618:	899b      	ldrh	r3, [r3, #12]
 801461a:	b29b      	uxth	r3, r3
 801461c:	4618      	mov	r0, r3
 801461e:	f7fa fda7 	bl	800f170 <lwip_htons>
 8014622:	4603      	mov	r3, r0
 8014624:	b2db      	uxtb	r3, r3
 8014626:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801462a:	b29b      	uxth	r3, r3
 801462c:	4618      	mov	r0, r3
 801462e:	f7fa fd9f 	bl	800f170 <lwip_htons>
 8014632:	4603      	mov	r3, r0
 8014634:	b21b      	sxth	r3, r3
 8014636:	4323      	orrs	r3, r4
 8014638:	b21a      	sxth	r2, r3
 801463a:	4b57      	ldr	r3, [pc, #348]	@ (8014798 <tcp_receive+0x888>)
 801463c:	691b      	ldr	r3, [r3, #16]
 801463e:	b292      	uxth	r2, r2
 8014640:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014646:	4b54      	ldr	r3, [pc, #336]	@ (8014798 <tcp_receive+0x888>)
 8014648:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801464a:	4b53      	ldr	r3, [pc, #332]	@ (8014798 <tcp_receive+0x888>)
 801464c:	691b      	ldr	r3, [r3, #16]
 801464e:	899b      	ldrh	r3, [r3, #12]
 8014650:	b29b      	uxth	r3, r3
 8014652:	4618      	mov	r0, r3
 8014654:	f7fa fd8c 	bl	800f170 <lwip_htons>
 8014658:	4603      	mov	r3, r0
 801465a:	b2db      	uxtb	r3, r3
 801465c:	f003 0302 	and.w	r3, r3, #2
 8014660:	2b00      	cmp	r3, #0
 8014662:	d005      	beq.n	8014670 <tcp_receive+0x760>
            inseg.len -= 1;
 8014664:	4b4c      	ldr	r3, [pc, #304]	@ (8014798 <tcp_receive+0x888>)
 8014666:	891b      	ldrh	r3, [r3, #8]
 8014668:	3b01      	subs	r3, #1
 801466a:	b29a      	uxth	r2, r3
 801466c:	4b4a      	ldr	r3, [pc, #296]	@ (8014798 <tcp_receive+0x888>)
 801466e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014670:	4b49      	ldr	r3, [pc, #292]	@ (8014798 <tcp_receive+0x888>)
 8014672:	685b      	ldr	r3, [r3, #4]
 8014674:	4a48      	ldr	r2, [pc, #288]	@ (8014798 <tcp_receive+0x888>)
 8014676:	8912      	ldrh	r2, [r2, #8]
 8014678:	4611      	mov	r1, r2
 801467a:	4618      	mov	r0, r3
 801467c:	f7fc f914 	bl	80108a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014680:	4b45      	ldr	r3, [pc, #276]	@ (8014798 <tcp_receive+0x888>)
 8014682:	891c      	ldrh	r4, [r3, #8]
 8014684:	4b44      	ldr	r3, [pc, #272]	@ (8014798 <tcp_receive+0x888>)
 8014686:	691b      	ldr	r3, [r3, #16]
 8014688:	899b      	ldrh	r3, [r3, #12]
 801468a:	b29b      	uxth	r3, r3
 801468c:	4618      	mov	r0, r3
 801468e:	f7fa fd6f 	bl	800f170 <lwip_htons>
 8014692:	4603      	mov	r3, r0
 8014694:	b2db      	uxtb	r3, r3
 8014696:	f003 0303 	and.w	r3, r3, #3
 801469a:	2b00      	cmp	r3, #0
 801469c:	d001      	beq.n	80146a2 <tcp_receive+0x792>
 801469e:	2301      	movs	r3, #1
 80146a0:	e000      	b.n	80146a4 <tcp_receive+0x794>
 80146a2:	2300      	movs	r3, #0
 80146a4:	4423      	add	r3, r4
 80146a6:	b29a      	uxth	r2, r3
 80146a8:	4b3c      	ldr	r3, [pc, #240]	@ (801479c <tcp_receive+0x88c>)
 80146aa:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80146ac:	4b3b      	ldr	r3, [pc, #236]	@ (801479c <tcp_receive+0x88c>)
 80146ae:	881b      	ldrh	r3, [r3, #0]
 80146b0:	461a      	mov	r2, r3
 80146b2:	4b38      	ldr	r3, [pc, #224]	@ (8014794 <tcp_receive+0x884>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	441a      	add	r2, r3
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146bc:	6879      	ldr	r1, [r7, #4]
 80146be:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80146c0:	440b      	add	r3, r1
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d006      	beq.n	80146d4 <tcp_receive+0x7c4>
 80146c6:	4b36      	ldr	r3, [pc, #216]	@ (80147a0 <tcp_receive+0x890>)
 80146c8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80146cc:	4935      	ldr	r1, [pc, #212]	@ (80147a4 <tcp_receive+0x894>)
 80146ce:	4836      	ldr	r0, [pc, #216]	@ (80147a8 <tcp_receive+0x898>)
 80146d0:	f008 f8ae 	bl	801c830 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80146d8:	2b00      	cmp	r3, #0
 80146da:	f000 80e6 	beq.w	80148aa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80146de:	4b2e      	ldr	r3, [pc, #184]	@ (8014798 <tcp_receive+0x888>)
 80146e0:	691b      	ldr	r3, [r3, #16]
 80146e2:	899b      	ldrh	r3, [r3, #12]
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	4618      	mov	r0, r3
 80146e8:	f7fa fd42 	bl	800f170 <lwip_htons>
 80146ec:	4603      	mov	r3, r0
 80146ee:	b2db      	uxtb	r3, r3
 80146f0:	f003 0301 	and.w	r3, r3, #1
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d010      	beq.n	801471a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80146f8:	e00a      	b.n	8014710 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80146fe:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801470a:	68f8      	ldr	r0, [r7, #12]
 801470c:	f7fd fd7f 	bl	801220e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014714:	2b00      	cmp	r3, #0
 8014716:	d1f0      	bne.n	80146fa <tcp_receive+0x7ea>
 8014718:	e0c7      	b.n	80148aa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801471e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014720:	e051      	b.n	80147c6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014724:	691b      	ldr	r3, [r3, #16]
 8014726:	899b      	ldrh	r3, [r3, #12]
 8014728:	b29b      	uxth	r3, r3
 801472a:	4618      	mov	r0, r3
 801472c:	f7fa fd20 	bl	800f170 <lwip_htons>
 8014730:	4603      	mov	r3, r0
 8014732:	b2db      	uxtb	r3, r3
 8014734:	f003 0301 	and.w	r3, r3, #1
 8014738:	2b00      	cmp	r3, #0
 801473a:	d03c      	beq.n	80147b6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801473c:	4b16      	ldr	r3, [pc, #88]	@ (8014798 <tcp_receive+0x888>)
 801473e:	691b      	ldr	r3, [r3, #16]
 8014740:	899b      	ldrh	r3, [r3, #12]
 8014742:	b29b      	uxth	r3, r3
 8014744:	4618      	mov	r0, r3
 8014746:	f7fa fd13 	bl	800f170 <lwip_htons>
 801474a:	4603      	mov	r3, r0
 801474c:	b2db      	uxtb	r3, r3
 801474e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014752:	2b00      	cmp	r3, #0
 8014754:	d12f      	bne.n	80147b6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014756:	4b10      	ldr	r3, [pc, #64]	@ (8014798 <tcp_receive+0x888>)
 8014758:	691b      	ldr	r3, [r3, #16]
 801475a:	899b      	ldrh	r3, [r3, #12]
 801475c:	b29c      	uxth	r4, r3
 801475e:	2001      	movs	r0, #1
 8014760:	f7fa fd06 	bl	800f170 <lwip_htons>
 8014764:	4603      	mov	r3, r0
 8014766:	461a      	mov	r2, r3
 8014768:	4b0b      	ldr	r3, [pc, #44]	@ (8014798 <tcp_receive+0x888>)
 801476a:	691b      	ldr	r3, [r3, #16]
 801476c:	4322      	orrs	r2, r4
 801476e:	b292      	uxth	r2, r2
 8014770:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014772:	4b09      	ldr	r3, [pc, #36]	@ (8014798 <tcp_receive+0x888>)
 8014774:	891c      	ldrh	r4, [r3, #8]
 8014776:	4b08      	ldr	r3, [pc, #32]	@ (8014798 <tcp_receive+0x888>)
 8014778:	691b      	ldr	r3, [r3, #16]
 801477a:	899b      	ldrh	r3, [r3, #12]
 801477c:	b29b      	uxth	r3, r3
 801477e:	4618      	mov	r0, r3
 8014780:	f7fa fcf6 	bl	800f170 <lwip_htons>
 8014784:	4603      	mov	r3, r0
 8014786:	b2db      	uxtb	r3, r3
 8014788:	f003 0303 	and.w	r3, r3, #3
 801478c:	2b00      	cmp	r3, #0
 801478e:	d00d      	beq.n	80147ac <tcp_receive+0x89c>
 8014790:	2301      	movs	r3, #1
 8014792:	e00c      	b.n	80147ae <tcp_receive+0x89e>
 8014794:	20013d84 	.word	0x20013d84
 8014798:	20013d60 	.word	0x20013d60
 801479c:	20013d8e 	.word	0x20013d8e
 80147a0:	080207f8 	.word	0x080207f8
 80147a4:	08020ba0 	.word	0x08020ba0
 80147a8:	08020844 	.word	0x08020844
 80147ac:	2300      	movs	r3, #0
 80147ae:	4423      	add	r3, r4
 80147b0:	b29a      	uxth	r2, r3
 80147b2:	4b98      	ldr	r3, [pc, #608]	@ (8014a14 <tcp_receive+0xb04>)
 80147b4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80147b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147b8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80147ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80147c0:	6938      	ldr	r0, [r7, #16]
 80147c2:	f7fd fd24 	bl	801220e <tcp_seg_free>
            while (next &&
 80147c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d00e      	beq.n	80147ea <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80147cc:	4b91      	ldr	r3, [pc, #580]	@ (8014a14 <tcp_receive+0xb04>)
 80147ce:	881b      	ldrh	r3, [r3, #0]
 80147d0:	461a      	mov	r2, r3
 80147d2:	4b91      	ldr	r3, [pc, #580]	@ (8014a18 <tcp_receive+0xb08>)
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	441a      	add	r2, r3
 80147d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147da:	691b      	ldr	r3, [r3, #16]
 80147dc:	685b      	ldr	r3, [r3, #4]
 80147de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80147e0:	8909      	ldrh	r1, [r1, #8]
 80147e2:	440b      	add	r3, r1
 80147e4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	da9b      	bge.n	8014722 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80147ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d059      	beq.n	80148a4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80147f0:	4b88      	ldr	r3, [pc, #544]	@ (8014a14 <tcp_receive+0xb04>)
 80147f2:	881b      	ldrh	r3, [r3, #0]
 80147f4:	461a      	mov	r2, r3
 80147f6:	4b88      	ldr	r3, [pc, #544]	@ (8014a18 <tcp_receive+0xb08>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	441a      	add	r2, r3
 80147fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147fe:	691b      	ldr	r3, [r3, #16]
 8014800:	685b      	ldr	r3, [r3, #4]
 8014802:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014804:	2b00      	cmp	r3, #0
 8014806:	dd4d      	ble.n	80148a4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801480a:	691b      	ldr	r3, [r3, #16]
 801480c:	685b      	ldr	r3, [r3, #4]
 801480e:	b29a      	uxth	r2, r3
 8014810:	4b81      	ldr	r3, [pc, #516]	@ (8014a18 <tcp_receive+0xb08>)
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	b29b      	uxth	r3, r3
 8014816:	1ad3      	subs	r3, r2, r3
 8014818:	b29a      	uxth	r2, r3
 801481a:	4b80      	ldr	r3, [pc, #512]	@ (8014a1c <tcp_receive+0xb0c>)
 801481c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801481e:	4b7f      	ldr	r3, [pc, #508]	@ (8014a1c <tcp_receive+0xb0c>)
 8014820:	691b      	ldr	r3, [r3, #16]
 8014822:	899b      	ldrh	r3, [r3, #12]
 8014824:	b29b      	uxth	r3, r3
 8014826:	4618      	mov	r0, r3
 8014828:	f7fa fca2 	bl	800f170 <lwip_htons>
 801482c:	4603      	mov	r3, r0
 801482e:	b2db      	uxtb	r3, r3
 8014830:	f003 0302 	and.w	r3, r3, #2
 8014834:	2b00      	cmp	r3, #0
 8014836:	d005      	beq.n	8014844 <tcp_receive+0x934>
                inseg.len -= 1;
 8014838:	4b78      	ldr	r3, [pc, #480]	@ (8014a1c <tcp_receive+0xb0c>)
 801483a:	891b      	ldrh	r3, [r3, #8]
 801483c:	3b01      	subs	r3, #1
 801483e:	b29a      	uxth	r2, r3
 8014840:	4b76      	ldr	r3, [pc, #472]	@ (8014a1c <tcp_receive+0xb0c>)
 8014842:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014844:	4b75      	ldr	r3, [pc, #468]	@ (8014a1c <tcp_receive+0xb0c>)
 8014846:	685b      	ldr	r3, [r3, #4]
 8014848:	4a74      	ldr	r2, [pc, #464]	@ (8014a1c <tcp_receive+0xb0c>)
 801484a:	8912      	ldrh	r2, [r2, #8]
 801484c:	4611      	mov	r1, r2
 801484e:	4618      	mov	r0, r3
 8014850:	f7fc f82a 	bl	80108a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014854:	4b71      	ldr	r3, [pc, #452]	@ (8014a1c <tcp_receive+0xb0c>)
 8014856:	891c      	ldrh	r4, [r3, #8]
 8014858:	4b70      	ldr	r3, [pc, #448]	@ (8014a1c <tcp_receive+0xb0c>)
 801485a:	691b      	ldr	r3, [r3, #16]
 801485c:	899b      	ldrh	r3, [r3, #12]
 801485e:	b29b      	uxth	r3, r3
 8014860:	4618      	mov	r0, r3
 8014862:	f7fa fc85 	bl	800f170 <lwip_htons>
 8014866:	4603      	mov	r3, r0
 8014868:	b2db      	uxtb	r3, r3
 801486a:	f003 0303 	and.w	r3, r3, #3
 801486e:	2b00      	cmp	r3, #0
 8014870:	d001      	beq.n	8014876 <tcp_receive+0x966>
 8014872:	2301      	movs	r3, #1
 8014874:	e000      	b.n	8014878 <tcp_receive+0x968>
 8014876:	2300      	movs	r3, #0
 8014878:	4423      	add	r3, r4
 801487a:	b29a      	uxth	r2, r3
 801487c:	4b65      	ldr	r3, [pc, #404]	@ (8014a14 <tcp_receive+0xb04>)
 801487e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014880:	4b64      	ldr	r3, [pc, #400]	@ (8014a14 <tcp_receive+0xb04>)
 8014882:	881b      	ldrh	r3, [r3, #0]
 8014884:	461a      	mov	r2, r3
 8014886:	4b64      	ldr	r3, [pc, #400]	@ (8014a18 <tcp_receive+0xb08>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	441a      	add	r2, r3
 801488c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801488e:	691b      	ldr	r3, [r3, #16]
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	429a      	cmp	r2, r3
 8014894:	d006      	beq.n	80148a4 <tcp_receive+0x994>
 8014896:	4b62      	ldr	r3, [pc, #392]	@ (8014a20 <tcp_receive+0xb10>)
 8014898:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801489c:	4961      	ldr	r1, [pc, #388]	@ (8014a24 <tcp_receive+0xb14>)
 801489e:	4862      	ldr	r0, [pc, #392]	@ (8014a28 <tcp_receive+0xb18>)
 80148a0:	f007 ffc6 	bl	801c830 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80148a8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80148aa:	4b5a      	ldr	r3, [pc, #360]	@ (8014a14 <tcp_receive+0xb04>)
 80148ac:	881b      	ldrh	r3, [r3, #0]
 80148ae:	461a      	mov	r2, r3
 80148b0:	4b59      	ldr	r3, [pc, #356]	@ (8014a18 <tcp_receive+0xb08>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	441a      	add	r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80148be:	4b55      	ldr	r3, [pc, #340]	@ (8014a14 <tcp_receive+0xb04>)
 80148c0:	881b      	ldrh	r3, [r3, #0]
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d206      	bcs.n	80148d4 <tcp_receive+0x9c4>
 80148c6:	4b56      	ldr	r3, [pc, #344]	@ (8014a20 <tcp_receive+0xb10>)
 80148c8:	f240 6207 	movw	r2, #1543	@ 0x607
 80148cc:	4957      	ldr	r1, [pc, #348]	@ (8014a2c <tcp_receive+0xb1c>)
 80148ce:	4856      	ldr	r0, [pc, #344]	@ (8014a28 <tcp_receive+0xb18>)
 80148d0:	f007 ffae 	bl	801c830 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80148d8:	4b4e      	ldr	r3, [pc, #312]	@ (8014a14 <tcp_receive+0xb04>)
 80148da:	881b      	ldrh	r3, [r3, #0]
 80148dc:	1ad3      	subs	r3, r2, r3
 80148de:	b29a      	uxth	r2, r3
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f7fc ffad 	bl	8011844 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80148ea:	4b4c      	ldr	r3, [pc, #304]	@ (8014a1c <tcp_receive+0xb0c>)
 80148ec:	685b      	ldr	r3, [r3, #4]
 80148ee:	891b      	ldrh	r3, [r3, #8]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d006      	beq.n	8014902 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80148f4:	4b49      	ldr	r3, [pc, #292]	@ (8014a1c <tcp_receive+0xb0c>)
 80148f6:	685b      	ldr	r3, [r3, #4]
 80148f8:	4a4d      	ldr	r2, [pc, #308]	@ (8014a30 <tcp_receive+0xb20>)
 80148fa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80148fc:	4b47      	ldr	r3, [pc, #284]	@ (8014a1c <tcp_receive+0xb0c>)
 80148fe:	2200      	movs	r2, #0
 8014900:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014902:	4b46      	ldr	r3, [pc, #280]	@ (8014a1c <tcp_receive+0xb0c>)
 8014904:	691b      	ldr	r3, [r3, #16]
 8014906:	899b      	ldrh	r3, [r3, #12]
 8014908:	b29b      	uxth	r3, r3
 801490a:	4618      	mov	r0, r3
 801490c:	f7fa fc30 	bl	800f170 <lwip_htons>
 8014910:	4603      	mov	r3, r0
 8014912:	b2db      	uxtb	r3, r3
 8014914:	f003 0301 	and.w	r3, r3, #1
 8014918:	2b00      	cmp	r3, #0
 801491a:	f000 80b8 	beq.w	8014a8e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801491e:	4b45      	ldr	r3, [pc, #276]	@ (8014a34 <tcp_receive+0xb24>)
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	f043 0320 	orr.w	r3, r3, #32
 8014926:	b2da      	uxtb	r2, r3
 8014928:	4b42      	ldr	r3, [pc, #264]	@ (8014a34 <tcp_receive+0xb24>)
 801492a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801492c:	e0af      	b.n	8014a8e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014932:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014938:	691b      	ldr	r3, [r3, #16]
 801493a:	685b      	ldr	r3, [r3, #4]
 801493c:	4a36      	ldr	r2, [pc, #216]	@ (8014a18 <tcp_receive+0xb08>)
 801493e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	891b      	ldrh	r3, [r3, #8]
 8014944:	461c      	mov	r4, r3
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	691b      	ldr	r3, [r3, #16]
 801494a:	899b      	ldrh	r3, [r3, #12]
 801494c:	b29b      	uxth	r3, r3
 801494e:	4618      	mov	r0, r3
 8014950:	f7fa fc0e 	bl	800f170 <lwip_htons>
 8014954:	4603      	mov	r3, r0
 8014956:	b2db      	uxtb	r3, r3
 8014958:	f003 0303 	and.w	r3, r3, #3
 801495c:	2b00      	cmp	r3, #0
 801495e:	d001      	beq.n	8014964 <tcp_receive+0xa54>
 8014960:	2301      	movs	r3, #1
 8014962:	e000      	b.n	8014966 <tcp_receive+0xa56>
 8014964:	2300      	movs	r3, #0
 8014966:	191a      	adds	r2, r3, r4
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801496c:	441a      	add	r2, r3
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014976:	461c      	mov	r4, r3
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	891b      	ldrh	r3, [r3, #8]
 801497c:	461d      	mov	r5, r3
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	691b      	ldr	r3, [r3, #16]
 8014982:	899b      	ldrh	r3, [r3, #12]
 8014984:	b29b      	uxth	r3, r3
 8014986:	4618      	mov	r0, r3
 8014988:	f7fa fbf2 	bl	800f170 <lwip_htons>
 801498c:	4603      	mov	r3, r0
 801498e:	b2db      	uxtb	r3, r3
 8014990:	f003 0303 	and.w	r3, r3, #3
 8014994:	2b00      	cmp	r3, #0
 8014996:	d001      	beq.n	801499c <tcp_receive+0xa8c>
 8014998:	2301      	movs	r3, #1
 801499a:	e000      	b.n	801499e <tcp_receive+0xa8e>
 801499c:	2300      	movs	r3, #0
 801499e:	442b      	add	r3, r5
 80149a0:	429c      	cmp	r4, r3
 80149a2:	d206      	bcs.n	80149b2 <tcp_receive+0xaa2>
 80149a4:	4b1e      	ldr	r3, [pc, #120]	@ (8014a20 <tcp_receive+0xb10>)
 80149a6:	f240 622b 	movw	r2, #1579	@ 0x62b
 80149aa:	4923      	ldr	r1, [pc, #140]	@ (8014a38 <tcp_receive+0xb28>)
 80149ac:	481e      	ldr	r0, [pc, #120]	@ (8014a28 <tcp_receive+0xb18>)
 80149ae:	f007 ff3f 	bl	801c830 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	891b      	ldrh	r3, [r3, #8]
 80149b6:	461c      	mov	r4, r3
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	691b      	ldr	r3, [r3, #16]
 80149bc:	899b      	ldrh	r3, [r3, #12]
 80149be:	b29b      	uxth	r3, r3
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7fa fbd5 	bl	800f170 <lwip_htons>
 80149c6:	4603      	mov	r3, r0
 80149c8:	b2db      	uxtb	r3, r3
 80149ca:	f003 0303 	and.w	r3, r3, #3
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d001      	beq.n	80149d6 <tcp_receive+0xac6>
 80149d2:	2301      	movs	r3, #1
 80149d4:	e000      	b.n	80149d8 <tcp_receive+0xac8>
 80149d6:	2300      	movs	r3, #0
 80149d8:	1919      	adds	r1, r3, r4
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80149de:	b28b      	uxth	r3, r1
 80149e0:	1ad3      	subs	r3, r2, r3
 80149e2:	b29a      	uxth	r2, r3
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f7fc ff2b 	bl	8011844 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	685b      	ldr	r3, [r3, #4]
 80149f2:	891b      	ldrh	r3, [r3, #8]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d028      	beq.n	8014a4a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80149f8:	4b0d      	ldr	r3, [pc, #52]	@ (8014a30 <tcp_receive+0xb20>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d01d      	beq.n	8014a3c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8014a00:	4b0b      	ldr	r3, [pc, #44]	@ (8014a30 <tcp_receive+0xb20>)
 8014a02:	681a      	ldr	r2, [r3, #0]
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	685b      	ldr	r3, [r3, #4]
 8014a08:	4619      	mov	r1, r3
 8014a0a:	4610      	mov	r0, r2
 8014a0c:	f7fc f9a0 	bl	8010d50 <pbuf_cat>
 8014a10:	e018      	b.n	8014a44 <tcp_receive+0xb34>
 8014a12:	bf00      	nop
 8014a14:	20013d8e 	.word	0x20013d8e
 8014a18:	20013d84 	.word	0x20013d84
 8014a1c:	20013d60 	.word	0x20013d60
 8014a20:	080207f8 	.word	0x080207f8
 8014a24:	08020bd8 	.word	0x08020bd8
 8014a28:	08020844 	.word	0x08020844
 8014a2c:	08020c14 	.word	0x08020c14
 8014a30:	20013d94 	.word	0x20013d94
 8014a34:	20013d91 	.word	0x20013d91
 8014a38:	08020c34 	.word	0x08020c34
            } else {
              recv_data = cseg->p;
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	685b      	ldr	r3, [r3, #4]
 8014a40:	4a70      	ldr	r2, [pc, #448]	@ (8014c04 <tcp_receive+0xcf4>)
 8014a42:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	2200      	movs	r2, #0
 8014a48:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	691b      	ldr	r3, [r3, #16]
 8014a4e:	899b      	ldrh	r3, [r3, #12]
 8014a50:	b29b      	uxth	r3, r3
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fa fb8c 	bl	800f170 <lwip_htons>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	b2db      	uxtb	r3, r3
 8014a5c:	f003 0301 	and.w	r3, r3, #1
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d00d      	beq.n	8014a80 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014a64:	4b68      	ldr	r3, [pc, #416]	@ (8014c08 <tcp_receive+0xcf8>)
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	f043 0320 	orr.w	r3, r3, #32
 8014a6c:	b2da      	uxtb	r2, r3
 8014a6e:	4b66      	ldr	r3, [pc, #408]	@ (8014c08 <tcp_receive+0xcf8>)
 8014a70:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	7d1b      	ldrb	r3, [r3, #20]
 8014a76:	2b04      	cmp	r3, #4
 8014a78:	d102      	bne.n	8014a80 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	2207      	movs	r2, #7
 8014a7e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	681a      	ldr	r2, [r3, #0]
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8014a88:	68b8      	ldr	r0, [r7, #8]
 8014a8a:	f7fd fbc0 	bl	801220e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d008      	beq.n	8014aa8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014a9a:	691b      	ldr	r3, [r3, #16]
 8014a9c:	685a      	ldr	r2, [r3, #4]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	f43f af43 	beq.w	801492e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	8b5b      	ldrh	r3, [r3, #26]
 8014aac:	f003 0301 	and.w	r3, r3, #1
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d00e      	beq.n	8014ad2 <tcp_receive+0xbc2>
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	8b5b      	ldrh	r3, [r3, #26]
 8014ab8:	f023 0301 	bic.w	r3, r3, #1
 8014abc:	b29a      	uxth	r2, r3
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	835a      	strh	r2, [r3, #26]
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	8b5b      	ldrh	r3, [r3, #26]
 8014ac6:	f043 0302 	orr.w	r3, r3, #2
 8014aca:	b29a      	uxth	r2, r3
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014ad0:	e187      	b.n	8014de2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	8b5b      	ldrh	r3, [r3, #26]
 8014ad6:	f043 0301 	orr.w	r3, r3, #1
 8014ada:	b29a      	uxth	r2, r3
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014ae0:	e17f      	b.n	8014de2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d106      	bne.n	8014af8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014aea:	4848      	ldr	r0, [pc, #288]	@ (8014c0c <tcp_receive+0xcfc>)
 8014aec:	f7fd fba8 	bl	8012240 <tcp_seg_copy>
 8014af0:	4602      	mov	r2, r0
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	675a      	str	r2, [r3, #116]	@ 0x74
 8014af6:	e16c      	b.n	8014dd2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014af8:	2300      	movs	r3, #0
 8014afa:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014b02:	e156      	b.n	8014db2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8014b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b06:	691b      	ldr	r3, [r3, #16]
 8014b08:	685a      	ldr	r2, [r3, #4]
 8014b0a:	4b41      	ldr	r3, [pc, #260]	@ (8014c10 <tcp_receive+0xd00>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	d11d      	bne.n	8014b4e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014b12:	4b3e      	ldr	r3, [pc, #248]	@ (8014c0c <tcp_receive+0xcfc>)
 8014b14:	891a      	ldrh	r2, [r3, #8]
 8014b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b18:	891b      	ldrh	r3, [r3, #8]
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	f240 814e 	bls.w	8014dbc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014b20:	483a      	ldr	r0, [pc, #232]	@ (8014c0c <tcp_receive+0xcfc>)
 8014b22:	f7fd fb8d 	bl	8012240 <tcp_seg_copy>
 8014b26:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	f000 8148 	beq.w	8014dc0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8014b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d003      	beq.n	8014b3e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8014b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b38:	697a      	ldr	r2, [r7, #20]
 8014b3a:	601a      	str	r2, [r3, #0]
 8014b3c:	e002      	b.n	8014b44 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	697a      	ldr	r2, [r7, #20]
 8014b42:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014b44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014b46:	6978      	ldr	r0, [r7, #20]
 8014b48:	f7ff f8de 	bl	8013d08 <tcp_oos_insert_segment>
                }
                break;
 8014b4c:	e138      	b.n	8014dc0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d117      	bne.n	8014b84 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014b54:	4b2e      	ldr	r3, [pc, #184]	@ (8014c10 <tcp_receive+0xd00>)
 8014b56:	681a      	ldr	r2, [r3, #0]
 8014b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b5a:	691b      	ldr	r3, [r3, #16]
 8014b5c:	685b      	ldr	r3, [r3, #4]
 8014b5e:	1ad3      	subs	r3, r2, r3
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	da57      	bge.n	8014c14 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014b64:	4829      	ldr	r0, [pc, #164]	@ (8014c0c <tcp_receive+0xcfc>)
 8014b66:	f7fd fb6b 	bl	8012240 <tcp_seg_copy>
 8014b6a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014b6c:	69bb      	ldr	r3, [r7, #24]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	f000 8128 	beq.w	8014dc4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	69ba      	ldr	r2, [r7, #24]
 8014b78:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014b7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014b7c:	69b8      	ldr	r0, [r7, #24]
 8014b7e:	f7ff f8c3 	bl	8013d08 <tcp_oos_insert_segment>
                  }
                  break;
 8014b82:	e11f      	b.n	8014dc4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014b84:	4b22      	ldr	r3, [pc, #136]	@ (8014c10 <tcp_receive+0xd00>)
 8014b86:	681a      	ldr	r2, [r3, #0]
 8014b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b8a:	691b      	ldr	r3, [r3, #16]
 8014b8c:	685b      	ldr	r3, [r3, #4]
 8014b8e:	1ad3      	subs	r3, r2, r3
 8014b90:	3b01      	subs	r3, #1
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	db3e      	blt.n	8014c14 <tcp_receive+0xd04>
 8014b96:	4b1e      	ldr	r3, [pc, #120]	@ (8014c10 <tcp_receive+0xd00>)
 8014b98:	681a      	ldr	r2, [r3, #0]
 8014b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b9c:	691b      	ldr	r3, [r3, #16]
 8014b9e:	685b      	ldr	r3, [r3, #4]
 8014ba0:	1ad3      	subs	r3, r2, r3
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	dc35      	bgt.n	8014c14 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014ba8:	4818      	ldr	r0, [pc, #96]	@ (8014c0c <tcp_receive+0xcfc>)
 8014baa:	f7fd fb49 	bl	8012240 <tcp_seg_copy>
 8014bae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014bb0:	69fb      	ldr	r3, [r7, #28]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	f000 8108 	beq.w	8014dc8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bba:	691b      	ldr	r3, [r3, #16]
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014bc0:	8912      	ldrh	r2, [r2, #8]
 8014bc2:	441a      	add	r2, r3
 8014bc4:	4b12      	ldr	r3, [pc, #72]	@ (8014c10 <tcp_receive+0xd00>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	1ad3      	subs	r3, r2, r3
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	dd12      	ble.n	8014bf4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014bce:	4b10      	ldr	r3, [pc, #64]	@ (8014c10 <tcp_receive+0xd00>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	b29a      	uxth	r2, r3
 8014bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bd6:	691b      	ldr	r3, [r3, #16]
 8014bd8:	685b      	ldr	r3, [r3, #4]
 8014bda:	b29b      	uxth	r3, r3
 8014bdc:	1ad3      	subs	r3, r2, r3
 8014bde:	b29a      	uxth	r2, r3
 8014be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014be2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014be6:	685a      	ldr	r2, [r3, #4]
 8014be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bea:	891b      	ldrh	r3, [r3, #8]
 8014bec:	4619      	mov	r1, r3
 8014bee:	4610      	mov	r0, r2
 8014bf0:	f7fb fe5a 	bl	80108a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bf6:	69fa      	ldr	r2, [r7, #28]
 8014bf8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014bfa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014bfc:	69f8      	ldr	r0, [r7, #28]
 8014bfe:	f7ff f883 	bl	8013d08 <tcp_oos_insert_segment>
                  }
                  break;
 8014c02:	e0e1      	b.n	8014dc8 <tcp_receive+0xeb8>
 8014c04:	20013d94 	.word	0x20013d94
 8014c08:	20013d91 	.word	0x20013d91
 8014c0c:	20013d60 	.word	0x20013d60
 8014c10:	20013d84 	.word	0x20013d84
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c16:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	f040 80c5 	bne.w	8014dac <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014c22:	4b7f      	ldr	r3, [pc, #508]	@ (8014e20 <tcp_receive+0xf10>)
 8014c24:	681a      	ldr	r2, [r3, #0]
 8014c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c28:	691b      	ldr	r3, [r3, #16]
 8014c2a:	685b      	ldr	r3, [r3, #4]
 8014c2c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	f340 80bc 	ble.w	8014dac <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c36:	691b      	ldr	r3, [r3, #16]
 8014c38:	899b      	ldrh	r3, [r3, #12]
 8014c3a:	b29b      	uxth	r3, r3
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f7fa fa97 	bl	800f170 <lwip_htons>
 8014c42:	4603      	mov	r3, r0
 8014c44:	b2db      	uxtb	r3, r3
 8014c46:	f003 0301 	and.w	r3, r3, #1
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	f040 80be 	bne.w	8014dcc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014c50:	4874      	ldr	r0, [pc, #464]	@ (8014e24 <tcp_receive+0xf14>)
 8014c52:	f7fd faf5 	bl	8012240 <tcp_seg_copy>
 8014c56:	4602      	mov	r2, r0
 8014c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c5a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	f000 80b5 	beq.w	8014dd0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c68:	691b      	ldr	r3, [r3, #16]
 8014c6a:	685b      	ldr	r3, [r3, #4]
 8014c6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c6e:	8912      	ldrh	r2, [r2, #8]
 8014c70:	441a      	add	r2, r3
 8014c72:	4b6b      	ldr	r3, [pc, #428]	@ (8014e20 <tcp_receive+0xf10>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	1ad3      	subs	r3, r2, r3
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	dd12      	ble.n	8014ca2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014c7c:	4b68      	ldr	r3, [pc, #416]	@ (8014e20 <tcp_receive+0xf10>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	b29a      	uxth	r2, r3
 8014c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c84:	691b      	ldr	r3, [r3, #16]
 8014c86:	685b      	ldr	r3, [r3, #4]
 8014c88:	b29b      	uxth	r3, r3
 8014c8a:	1ad3      	subs	r3, r2, r3
 8014c8c:	b29a      	uxth	r2, r3
 8014c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c90:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c94:	685a      	ldr	r2, [r3, #4]
 8014c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c98:	891b      	ldrh	r3, [r3, #8]
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	4610      	mov	r0, r2
 8014c9e:	f7fb fe03 	bl	80108a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014ca2:	4b61      	ldr	r3, [pc, #388]	@ (8014e28 <tcp_receive+0xf18>)
 8014ca4:	881b      	ldrh	r3, [r3, #0]
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	4b5d      	ldr	r3, [pc, #372]	@ (8014e20 <tcp_receive+0xf10>)
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	441a      	add	r2, r3
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cb2:	6879      	ldr	r1, [r7, #4]
 8014cb4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014cb6:	440b      	add	r3, r1
 8014cb8:	1ad3      	subs	r3, r2, r3
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	f340 8088 	ble.w	8014dd0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	691b      	ldr	r3, [r3, #16]
 8014cc6:	899b      	ldrh	r3, [r3, #12]
 8014cc8:	b29b      	uxth	r3, r3
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7fa fa50 	bl	800f170 <lwip_htons>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	b2db      	uxtb	r3, r3
 8014cd4:	f003 0301 	and.w	r3, r3, #1
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d021      	beq.n	8014d20 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	691b      	ldr	r3, [r3, #16]
 8014ce2:	899b      	ldrh	r3, [r3, #12]
 8014ce4:	b29b      	uxth	r3, r3
 8014ce6:	b21b      	sxth	r3, r3
 8014ce8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014cec:	b21c      	sxth	r4, r3
 8014cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	691b      	ldr	r3, [r3, #16]
 8014cf4:	899b      	ldrh	r3, [r3, #12]
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	f7fa fa39 	bl	800f170 <lwip_htons>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	b2db      	uxtb	r3, r3
 8014d02:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8014d06:	b29b      	uxth	r3, r3
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7fa fa31 	bl	800f170 <lwip_htons>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	b21b      	sxth	r3, r3
 8014d12:	4323      	orrs	r3, r4
 8014d14:	b21a      	sxth	r2, r3
 8014d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	691b      	ldr	r3, [r3, #16]
 8014d1c:	b292      	uxth	r2, r2
 8014d1e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d24:	b29a      	uxth	r2, r3
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d2a:	4413      	add	r3, r2
 8014d2c:	b299      	uxth	r1, r3
 8014d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8014e20 <tcp_receive+0xf10>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	1a8a      	subs	r2, r1, r2
 8014d3a:	b292      	uxth	r2, r2
 8014d3c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	685a      	ldr	r2, [r3, #4]
 8014d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	891b      	ldrh	r3, [r3, #8]
 8014d4a:	4619      	mov	r1, r3
 8014d4c:	4610      	mov	r0, r2
 8014d4e:	f7fb fdab 	bl	80108a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	891c      	ldrh	r4, [r3, #8]
 8014d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	691b      	ldr	r3, [r3, #16]
 8014d5e:	899b      	ldrh	r3, [r3, #12]
 8014d60:	b29b      	uxth	r3, r3
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7fa fa04 	bl	800f170 <lwip_htons>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	b2db      	uxtb	r3, r3
 8014d6c:	f003 0303 	and.w	r3, r3, #3
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d001      	beq.n	8014d78 <tcp_receive+0xe68>
 8014d74:	2301      	movs	r3, #1
 8014d76:	e000      	b.n	8014d7a <tcp_receive+0xe6a>
 8014d78:	2300      	movs	r3, #0
 8014d7a:	4423      	add	r3, r4
 8014d7c:	b29a      	uxth	r2, r3
 8014d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8014e28 <tcp_receive+0xf18>)
 8014d80:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014d82:	4b29      	ldr	r3, [pc, #164]	@ (8014e28 <tcp_receive+0xf18>)
 8014d84:	881b      	ldrh	r3, [r3, #0]
 8014d86:	461a      	mov	r2, r3
 8014d88:	4b25      	ldr	r3, [pc, #148]	@ (8014e20 <tcp_receive+0xf10>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	441a      	add	r2, r3
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d92:	6879      	ldr	r1, [r7, #4]
 8014d94:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014d96:	440b      	add	r3, r1
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d019      	beq.n	8014dd0 <tcp_receive+0xec0>
 8014d9c:	4b23      	ldr	r3, [pc, #140]	@ (8014e2c <tcp_receive+0xf1c>)
 8014d9e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8014da2:	4923      	ldr	r1, [pc, #140]	@ (8014e30 <tcp_receive+0xf20>)
 8014da4:	4823      	ldr	r0, [pc, #140]	@ (8014e34 <tcp_receive+0xf24>)
 8014da6:	f007 fd43 	bl	801c830 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014daa:	e011      	b.n	8014dd0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	f47f aea5 	bne.w	8014b04 <tcp_receive+0xbf4>
 8014dba:	e00a      	b.n	8014dd2 <tcp_receive+0xec2>
                break;
 8014dbc:	bf00      	nop
 8014dbe:	e008      	b.n	8014dd2 <tcp_receive+0xec2>
                break;
 8014dc0:	bf00      	nop
 8014dc2:	e006      	b.n	8014dd2 <tcp_receive+0xec2>
                  break;
 8014dc4:	bf00      	nop
 8014dc6:	e004      	b.n	8014dd2 <tcp_receive+0xec2>
                  break;
 8014dc8:	bf00      	nop
 8014dca:	e002      	b.n	8014dd2 <tcp_receive+0xec2>
                  break;
 8014dcc:	bf00      	nop
 8014dce:	e000      	b.n	8014dd2 <tcp_receive+0xec2>
                break;
 8014dd0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f001 fa68 	bl	80162a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014dd8:	e003      	b.n	8014de2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f001 fa64 	bl	80162a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014de0:	e01a      	b.n	8014e18 <tcp_receive+0xf08>
 8014de2:	e019      	b.n	8014e18 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014de4:	4b0e      	ldr	r3, [pc, #56]	@ (8014e20 <tcp_receive+0xf10>)
 8014de6:	681a      	ldr	r2, [r3, #0]
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dec:	1ad3      	subs	r3, r2, r3
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	db0a      	blt.n	8014e08 <tcp_receive+0xef8>
 8014df2:	4b0b      	ldr	r3, [pc, #44]	@ (8014e20 <tcp_receive+0xf10>)
 8014df4:	681a      	ldr	r2, [r3, #0]
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dfa:	6879      	ldr	r1, [r7, #4]
 8014dfc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014dfe:	440b      	add	r3, r1
 8014e00:	1ad3      	subs	r3, r2, r3
 8014e02:	3301      	adds	r3, #1
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	dd07      	ble.n	8014e18 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	8b5b      	ldrh	r3, [r3, #26]
 8014e0c:	f043 0302 	orr.w	r3, r3, #2
 8014e10:	b29a      	uxth	r2, r3
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014e16:	e7ff      	b.n	8014e18 <tcp_receive+0xf08>
 8014e18:	bf00      	nop
 8014e1a:	3750      	adds	r7, #80	@ 0x50
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8014e20:	20013d84 	.word	0x20013d84
 8014e24:	20013d60 	.word	0x20013d60
 8014e28:	20013d8e 	.word	0x20013d8e
 8014e2c:	080207f8 	.word	0x080207f8
 8014e30:	08020ba0 	.word	0x08020ba0
 8014e34:	08020844 	.word	0x08020844

08014e38 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014e38:	b480      	push	{r7}
 8014e3a:	b083      	sub	sp, #12
 8014e3c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014e3e:	4b15      	ldr	r3, [pc, #84]	@ (8014e94 <tcp_get_next_optbyte+0x5c>)
 8014e40:	881b      	ldrh	r3, [r3, #0]
 8014e42:	1c5a      	adds	r2, r3, #1
 8014e44:	b291      	uxth	r1, r2
 8014e46:	4a13      	ldr	r2, [pc, #76]	@ (8014e94 <tcp_get_next_optbyte+0x5c>)
 8014e48:	8011      	strh	r1, [r2, #0]
 8014e4a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014e4c:	4b12      	ldr	r3, [pc, #72]	@ (8014e98 <tcp_get_next_optbyte+0x60>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d004      	beq.n	8014e5e <tcp_get_next_optbyte+0x26>
 8014e54:	4b11      	ldr	r3, [pc, #68]	@ (8014e9c <tcp_get_next_optbyte+0x64>)
 8014e56:	881b      	ldrh	r3, [r3, #0]
 8014e58:	88fa      	ldrh	r2, [r7, #6]
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d208      	bcs.n	8014e70 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014e5e:	4b10      	ldr	r3, [pc, #64]	@ (8014ea0 <tcp_get_next_optbyte+0x68>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	3314      	adds	r3, #20
 8014e64:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014e66:	88fb      	ldrh	r3, [r7, #6]
 8014e68:	683a      	ldr	r2, [r7, #0]
 8014e6a:	4413      	add	r3, r2
 8014e6c:	781b      	ldrb	r3, [r3, #0]
 8014e6e:	e00b      	b.n	8014e88 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014e70:	88fb      	ldrh	r3, [r7, #6]
 8014e72:	b2da      	uxtb	r2, r3
 8014e74:	4b09      	ldr	r3, [pc, #36]	@ (8014e9c <tcp_get_next_optbyte+0x64>)
 8014e76:	881b      	ldrh	r3, [r3, #0]
 8014e78:	b2db      	uxtb	r3, r3
 8014e7a:	1ad3      	subs	r3, r2, r3
 8014e7c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014e7e:	4b06      	ldr	r3, [pc, #24]	@ (8014e98 <tcp_get_next_optbyte+0x60>)
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	797b      	ldrb	r3, [r7, #5]
 8014e84:	4413      	add	r3, r2
 8014e86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	370c      	adds	r7, #12
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e92:	4770      	bx	lr
 8014e94:	20013d80 	.word	0x20013d80
 8014e98:	20013d7c 	.word	0x20013d7c
 8014e9c:	20013d7a 	.word	0x20013d7a
 8014ea0:	20013d74 	.word	0x20013d74

08014ea4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d106      	bne.n	8014ec0 <tcp_parseopt+0x1c>
 8014eb2:	4b33      	ldr	r3, [pc, #204]	@ (8014f80 <tcp_parseopt+0xdc>)
 8014eb4:	f240 727d 	movw	r2, #1917	@ 0x77d
 8014eb8:	4932      	ldr	r1, [pc, #200]	@ (8014f84 <tcp_parseopt+0xe0>)
 8014eba:	4833      	ldr	r0, [pc, #204]	@ (8014f88 <tcp_parseopt+0xe4>)
 8014ebc:	f007 fcb8 	bl	801c830 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014ec0:	4b32      	ldr	r3, [pc, #200]	@ (8014f8c <tcp_parseopt+0xe8>)
 8014ec2:	881b      	ldrh	r3, [r3, #0]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d057      	beq.n	8014f78 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014ec8:	4b31      	ldr	r3, [pc, #196]	@ (8014f90 <tcp_parseopt+0xec>)
 8014eca:	2200      	movs	r2, #0
 8014ecc:	801a      	strh	r2, [r3, #0]
 8014ece:	e047      	b.n	8014f60 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8014ed0:	f7ff ffb2 	bl	8014e38 <tcp_get_next_optbyte>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014ed8:	7bfb      	ldrb	r3, [r7, #15]
 8014eda:	2b02      	cmp	r3, #2
 8014edc:	d006      	beq.n	8014eec <tcp_parseopt+0x48>
 8014ede:	2b02      	cmp	r3, #2
 8014ee0:	dc2b      	bgt.n	8014f3a <tcp_parseopt+0x96>
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d043      	beq.n	8014f6e <tcp_parseopt+0xca>
 8014ee6:	2b01      	cmp	r3, #1
 8014ee8:	d039      	beq.n	8014f5e <tcp_parseopt+0xba>
 8014eea:	e026      	b.n	8014f3a <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014eec:	f7ff ffa4 	bl	8014e38 <tcp_get_next_optbyte>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	2b04      	cmp	r3, #4
 8014ef4:	d13d      	bne.n	8014f72 <tcp_parseopt+0xce>
 8014ef6:	4b26      	ldr	r3, [pc, #152]	@ (8014f90 <tcp_parseopt+0xec>)
 8014ef8:	881b      	ldrh	r3, [r3, #0]
 8014efa:	3301      	adds	r3, #1
 8014efc:	4a23      	ldr	r2, [pc, #140]	@ (8014f8c <tcp_parseopt+0xe8>)
 8014efe:	8812      	ldrh	r2, [r2, #0]
 8014f00:	4293      	cmp	r3, r2
 8014f02:	da36      	bge.n	8014f72 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014f04:	f7ff ff98 	bl	8014e38 <tcp_get_next_optbyte>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	021b      	lsls	r3, r3, #8
 8014f0c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014f0e:	f7ff ff93 	bl	8014e38 <tcp_get_next_optbyte>
 8014f12:	4603      	mov	r3, r0
 8014f14:	461a      	mov	r2, r3
 8014f16:	89bb      	ldrh	r3, [r7, #12]
 8014f18:	4313      	orrs	r3, r2
 8014f1a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014f1c:	89bb      	ldrh	r3, [r7, #12]
 8014f1e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8014f22:	4293      	cmp	r3, r2
 8014f24:	d804      	bhi.n	8014f30 <tcp_parseopt+0x8c>
 8014f26:	89bb      	ldrh	r3, [r7, #12]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d001      	beq.n	8014f30 <tcp_parseopt+0x8c>
 8014f2c:	89ba      	ldrh	r2, [r7, #12]
 8014f2e:	e001      	b.n	8014f34 <tcp_parseopt+0x90>
 8014f30:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8014f38:	e012      	b.n	8014f60 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014f3a:	f7ff ff7d 	bl	8014e38 <tcp_get_next_optbyte>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014f42:	7afb      	ldrb	r3, [r7, #11]
 8014f44:	2b01      	cmp	r3, #1
 8014f46:	d916      	bls.n	8014f76 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014f48:	7afb      	ldrb	r3, [r7, #11]
 8014f4a:	b29a      	uxth	r2, r3
 8014f4c:	4b10      	ldr	r3, [pc, #64]	@ (8014f90 <tcp_parseopt+0xec>)
 8014f4e:	881b      	ldrh	r3, [r3, #0]
 8014f50:	4413      	add	r3, r2
 8014f52:	b29b      	uxth	r3, r3
 8014f54:	3b02      	subs	r3, #2
 8014f56:	b29a      	uxth	r2, r3
 8014f58:	4b0d      	ldr	r3, [pc, #52]	@ (8014f90 <tcp_parseopt+0xec>)
 8014f5a:	801a      	strh	r2, [r3, #0]
 8014f5c:	e000      	b.n	8014f60 <tcp_parseopt+0xbc>
          break;
 8014f5e:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014f60:	4b0b      	ldr	r3, [pc, #44]	@ (8014f90 <tcp_parseopt+0xec>)
 8014f62:	881a      	ldrh	r2, [r3, #0]
 8014f64:	4b09      	ldr	r3, [pc, #36]	@ (8014f8c <tcp_parseopt+0xe8>)
 8014f66:	881b      	ldrh	r3, [r3, #0]
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d3b1      	bcc.n	8014ed0 <tcp_parseopt+0x2c>
 8014f6c:	e004      	b.n	8014f78 <tcp_parseopt+0xd4>
          return;
 8014f6e:	bf00      	nop
 8014f70:	e002      	b.n	8014f78 <tcp_parseopt+0xd4>
            return;
 8014f72:	bf00      	nop
 8014f74:	e000      	b.n	8014f78 <tcp_parseopt+0xd4>
            return;
 8014f76:	bf00      	nop
      }
    }
  }
}
 8014f78:	3710      	adds	r7, #16
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	080207f8 	.word	0x080207f8
 8014f84:	08020c5c 	.word	0x08020c5c
 8014f88:	08020844 	.word	0x08020844
 8014f8c:	20013d78 	.word	0x20013d78
 8014f90:	20013d80 	.word	0x20013d80

08014f94 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014f94:	b480      	push	{r7}
 8014f96:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014f98:	4b05      	ldr	r3, [pc, #20]	@ (8014fb0 <tcp_trigger_input_pcb_close+0x1c>)
 8014f9a:	781b      	ldrb	r3, [r3, #0]
 8014f9c:	f043 0310 	orr.w	r3, r3, #16
 8014fa0:	b2da      	uxtb	r2, r3
 8014fa2:	4b03      	ldr	r3, [pc, #12]	@ (8014fb0 <tcp_trigger_input_pcb_close+0x1c>)
 8014fa4:	701a      	strb	r2, [r3, #0]
}
 8014fa6:	bf00      	nop
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fae:	4770      	bx	lr
 8014fb0:	20013d91 	.word	0x20013d91

08014fb4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b084      	sub	sp, #16
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	60b9      	str	r1, [r7, #8]
 8014fbe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d00a      	beq.n	8014fdc <tcp_route+0x28>
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	7a1b      	ldrb	r3, [r3, #8]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d006      	beq.n	8014fdc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	7a1b      	ldrb	r3, [r3, #8]
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7fb fa5c 	bl	8010490 <netif_get_by_index>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	e003      	b.n	8014fe4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f005 f9e3 	bl	801a3a8 <ip4_route>
 8014fe2:	4603      	mov	r3, r0
  }
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3710      	adds	r7, #16
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}

08014fec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014fec:	b590      	push	{r4, r7, lr}
 8014fee:	b087      	sub	sp, #28
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	60f8      	str	r0, [r7, #12]
 8014ff4:	60b9      	str	r1, [r7, #8]
 8014ff6:	603b      	str	r3, [r7, #0]
 8014ff8:	4613      	mov	r3, r2
 8014ffa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d105      	bne.n	801500e <tcp_create_segment+0x22>
 8015002:	4b45      	ldr	r3, [pc, #276]	@ (8015118 <tcp_create_segment+0x12c>)
 8015004:	22a3      	movs	r2, #163	@ 0xa3
 8015006:	4945      	ldr	r1, [pc, #276]	@ (801511c <tcp_create_segment+0x130>)
 8015008:	4845      	ldr	r0, [pc, #276]	@ (8015120 <tcp_create_segment+0x134>)
 801500a:	f007 fc11 	bl	801c830 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d105      	bne.n	8015020 <tcp_create_segment+0x34>
 8015014:	4b40      	ldr	r3, [pc, #256]	@ (8015118 <tcp_create_segment+0x12c>)
 8015016:	22a4      	movs	r2, #164	@ 0xa4
 8015018:	4942      	ldr	r1, [pc, #264]	@ (8015124 <tcp_create_segment+0x138>)
 801501a:	4841      	ldr	r0, [pc, #260]	@ (8015120 <tcp_create_segment+0x134>)
 801501c:	f007 fc08 	bl	801c830 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015020:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015024:	009b      	lsls	r3, r3, #2
 8015026:	b2db      	uxtb	r3, r3
 8015028:	f003 0304 	and.w	r3, r3, #4
 801502c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801502e:	2003      	movs	r0, #3
 8015030:	f7fa fecc 	bl	800fdcc <memp_malloc>
 8015034:	6138      	str	r0, [r7, #16]
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d104      	bne.n	8015046 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801503c:	68b8      	ldr	r0, [r7, #8]
 801503e:	f7fb fdb9 	bl	8010bb4 <pbuf_free>
    return NULL;
 8015042:	2300      	movs	r3, #0
 8015044:	e063      	b.n	801510e <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 8015046:	693b      	ldr	r3, [r7, #16]
 8015048:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801504c:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801504e:	693b      	ldr	r3, [r7, #16]
 8015050:	2200      	movs	r2, #0
 8015052:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015054:	693b      	ldr	r3, [r7, #16]
 8015056:	68ba      	ldr	r2, [r7, #8]
 8015058:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	891a      	ldrh	r2, [r3, #8]
 801505e:	7dfb      	ldrb	r3, [r7, #23]
 8015060:	b29b      	uxth	r3, r3
 8015062:	429a      	cmp	r2, r3
 8015064:	d205      	bcs.n	8015072 <tcp_create_segment+0x86>
 8015066:	4b2c      	ldr	r3, [pc, #176]	@ (8015118 <tcp_create_segment+0x12c>)
 8015068:	22b0      	movs	r2, #176	@ 0xb0
 801506a:	492f      	ldr	r1, [pc, #188]	@ (8015128 <tcp_create_segment+0x13c>)
 801506c:	482c      	ldr	r0, [pc, #176]	@ (8015120 <tcp_create_segment+0x134>)
 801506e:	f007 fbdf 	bl	801c830 <iprintf>
  seg->len = p->tot_len - optlen;
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	891a      	ldrh	r2, [r3, #8]
 8015076:	7dfb      	ldrb	r3, [r7, #23]
 8015078:	b29b      	uxth	r3, r3
 801507a:	1ad3      	subs	r3, r2, r3
 801507c:	b29a      	uxth	r2, r3
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8015082:	693b      	ldr	r3, [r7, #16]
 8015084:	2200      	movs	r2, #0
 8015086:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015088:	2114      	movs	r1, #20
 801508a:	68b8      	ldr	r0, [r7, #8]
 801508c:	f7fb fcfc 	bl	8010a88 <pbuf_add_header>
 8015090:	4603      	mov	r3, r0
 8015092:	2b00      	cmp	r3, #0
 8015094:	d004      	beq.n	80150a0 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015096:	6938      	ldr	r0, [r7, #16]
 8015098:	f7fd f8b9 	bl	801220e <tcp_seg_free>
    return NULL;
 801509c:	2300      	movs	r3, #0
 801509e:	e036      	b.n	801510e <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80150a0:	693b      	ldr	r3, [r7, #16]
 80150a2:	685b      	ldr	r3, [r3, #4]
 80150a4:	685a      	ldr	r2, [r3, #4]
 80150a6:	693b      	ldr	r3, [r7, #16]
 80150a8:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	8ada      	ldrh	r2, [r3, #22]
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	691c      	ldr	r4, [r3, #16]
 80150b2:	4610      	mov	r0, r2
 80150b4:	f7fa f85c 	bl	800f170 <lwip_htons>
 80150b8:	4603      	mov	r3, r0
 80150ba:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	8b1a      	ldrh	r2, [r3, #24]
 80150c0:	693b      	ldr	r3, [r7, #16]
 80150c2:	691c      	ldr	r4, [r3, #16]
 80150c4:	4610      	mov	r0, r2
 80150c6:	f7fa f853 	bl	800f170 <lwip_htons>
 80150ca:	4603      	mov	r3, r0
 80150cc:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80150ce:	693b      	ldr	r3, [r7, #16]
 80150d0:	691c      	ldr	r4, [r3, #16]
 80150d2:	6838      	ldr	r0, [r7, #0]
 80150d4:	f7fa f861 	bl	800f19a <lwip_htonl>
 80150d8:	4603      	mov	r3, r0
 80150da:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80150dc:	7dfb      	ldrb	r3, [r7, #23]
 80150de:	089b      	lsrs	r3, r3, #2
 80150e0:	b2db      	uxtb	r3, r3
 80150e2:	3305      	adds	r3, #5
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	031b      	lsls	r3, r3, #12
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	79fb      	ldrb	r3, [r7, #7]
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	4313      	orrs	r3, r2
 80150f0:	b29a      	uxth	r2, r3
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	691c      	ldr	r4, [r3, #16]
 80150f6:	4610      	mov	r0, r2
 80150f8:	f7fa f83a 	bl	800f170 <lwip_htons>
 80150fc:	4603      	mov	r3, r0
 80150fe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	691b      	ldr	r3, [r3, #16]
 8015104:	2200      	movs	r2, #0
 8015106:	749a      	strb	r2, [r3, #18]
 8015108:	2200      	movs	r2, #0
 801510a:	74da      	strb	r2, [r3, #19]
  return seg;
 801510c:	693b      	ldr	r3, [r7, #16]
}
 801510e:	4618      	mov	r0, r3
 8015110:	371c      	adds	r7, #28
 8015112:	46bd      	mov	sp, r7
 8015114:	bd90      	pop	{r4, r7, pc}
 8015116:	bf00      	nop
 8015118:	08020c78 	.word	0x08020c78
 801511c:	08020cac 	.word	0x08020cac
 8015120:	08020ccc 	.word	0x08020ccc
 8015124:	08020cf4 	.word	0x08020cf4
 8015128:	08020d18 	.word	0x08020d18

0801512c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801512c:	b590      	push	{r4, r7, lr}
 801512e:	b08b      	sub	sp, #44	@ 0x2c
 8015130:	af02      	add	r7, sp, #8
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	460b      	mov	r3, r1
 8015136:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015138:	2300      	movs	r3, #0
 801513a:	61bb      	str	r3, [r7, #24]
 801513c:	2300      	movs	r3, #0
 801513e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015140:	2300      	movs	r3, #0
 8015142:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d106      	bne.n	8015158 <tcp_split_unsent_seg+0x2c>
 801514a:	4b97      	ldr	r3, [pc, #604]	@ (80153a8 <tcp_split_unsent_seg+0x27c>)
 801514c:	f240 324b 	movw	r2, #843	@ 0x34b
 8015150:	4996      	ldr	r1, [pc, #600]	@ (80153ac <tcp_split_unsent_seg+0x280>)
 8015152:	4897      	ldr	r0, [pc, #604]	@ (80153b0 <tcp_split_unsent_seg+0x284>)
 8015154:	f007 fb6c 	bl	801c830 <iprintf>

  useg = pcb->unsent;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801515c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d102      	bne.n	801516a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015164:	f04f 33ff 	mov.w	r3, #4294967295
 8015168:	e119      	b.n	801539e <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 801516a:	887b      	ldrh	r3, [r7, #2]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d109      	bne.n	8015184 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015170:	4b8d      	ldr	r3, [pc, #564]	@ (80153a8 <tcp_split_unsent_seg+0x27c>)
 8015172:	f240 3253 	movw	r2, #851	@ 0x353
 8015176:	498f      	ldr	r1, [pc, #572]	@ (80153b4 <tcp_split_unsent_seg+0x288>)
 8015178:	488d      	ldr	r0, [pc, #564]	@ (80153b0 <tcp_split_unsent_seg+0x284>)
 801517a:	f007 fb59 	bl	801c830 <iprintf>
    return ERR_VAL;
 801517e:	f06f 0305 	mvn.w	r3, #5
 8015182:	e10c      	b.n	801539e <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 8015184:	697b      	ldr	r3, [r7, #20]
 8015186:	891b      	ldrh	r3, [r3, #8]
 8015188:	887a      	ldrh	r2, [r7, #2]
 801518a:	429a      	cmp	r2, r3
 801518c:	d301      	bcc.n	8015192 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801518e:	2300      	movs	r3, #0
 8015190:	e105      	b.n	801539e <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015196:	887a      	ldrh	r2, [r7, #2]
 8015198:	429a      	cmp	r2, r3
 801519a:	d906      	bls.n	80151aa <tcp_split_unsent_seg+0x7e>
 801519c:	4b82      	ldr	r3, [pc, #520]	@ (80153a8 <tcp_split_unsent_seg+0x27c>)
 801519e:	f240 325b 	movw	r2, #859	@ 0x35b
 80151a2:	4985      	ldr	r1, [pc, #532]	@ (80153b8 <tcp_split_unsent_seg+0x28c>)
 80151a4:	4882      	ldr	r0, [pc, #520]	@ (80153b0 <tcp_split_unsent_seg+0x284>)
 80151a6:	f007 fb43 	bl	801c830 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80151aa:	697b      	ldr	r3, [r7, #20]
 80151ac:	891b      	ldrh	r3, [r3, #8]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d106      	bne.n	80151c0 <tcp_split_unsent_seg+0x94>
 80151b2:	4b7d      	ldr	r3, [pc, #500]	@ (80153a8 <tcp_split_unsent_seg+0x27c>)
 80151b4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80151b8:	4980      	ldr	r1, [pc, #512]	@ (80153bc <tcp_split_unsent_seg+0x290>)
 80151ba:	487d      	ldr	r0, [pc, #500]	@ (80153b0 <tcp_split_unsent_seg+0x284>)
 80151bc:	f007 fb38 	bl	801c830 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80151c0:	697b      	ldr	r3, [r7, #20]
 80151c2:	7b1b      	ldrb	r3, [r3, #12]
 80151c4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80151c6:	7bfb      	ldrb	r3, [r7, #15]
 80151c8:	009b      	lsls	r3, r3, #2
 80151ca:	b2db      	uxtb	r3, r3
 80151cc:	f003 0304 	and.w	r3, r3, #4
 80151d0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80151d2:	697b      	ldr	r3, [r7, #20]
 80151d4:	891a      	ldrh	r2, [r3, #8]
 80151d6:	887b      	ldrh	r3, [r7, #2]
 80151d8:	1ad3      	subs	r3, r2, r3
 80151da:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80151dc:	7bbb      	ldrb	r3, [r7, #14]
 80151de:	b29a      	uxth	r2, r3
 80151e0:	89bb      	ldrh	r3, [r7, #12]
 80151e2:	4413      	add	r3, r2
 80151e4:	b29b      	uxth	r3, r3
 80151e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80151ea:	4619      	mov	r1, r3
 80151ec:	2036      	movs	r0, #54	@ 0x36
 80151ee:	f7fb f9f9 	bl	80105e4 <pbuf_alloc>
 80151f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80151f4:	693b      	ldr	r3, [r7, #16]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	f000 80ba 	beq.w	8015370 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80151fc:	697b      	ldr	r3, [r7, #20]
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	891a      	ldrh	r2, [r3, #8]
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	891b      	ldrh	r3, [r3, #8]
 8015206:	1ad3      	subs	r3, r2, r3
 8015208:	b29a      	uxth	r2, r3
 801520a:	887b      	ldrh	r3, [r7, #2]
 801520c:	4413      	add	r3, r2
 801520e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015210:	697b      	ldr	r3, [r7, #20]
 8015212:	6858      	ldr	r0, [r3, #4]
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	685a      	ldr	r2, [r3, #4]
 8015218:	7bbb      	ldrb	r3, [r7, #14]
 801521a:	18d1      	adds	r1, r2, r3
 801521c:	897b      	ldrh	r3, [r7, #10]
 801521e:	89ba      	ldrh	r2, [r7, #12]
 8015220:	f7fb fece 	bl	8010fc0 <pbuf_copy_partial>
 8015224:	4603      	mov	r3, r0
 8015226:	461a      	mov	r2, r3
 8015228:	89bb      	ldrh	r3, [r7, #12]
 801522a:	4293      	cmp	r3, r2
 801522c:	f040 80a2 	bne.w	8015374 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	691b      	ldr	r3, [r3, #16]
 8015234:	899b      	ldrh	r3, [r3, #12]
 8015236:	b29b      	uxth	r3, r3
 8015238:	4618      	mov	r0, r3
 801523a:	f7f9 ff99 	bl	800f170 <lwip_htons>
 801523e:	4603      	mov	r3, r0
 8015240:	b2db      	uxtb	r3, r3
 8015242:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015246:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015248:	2300      	movs	r3, #0
 801524a:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 801524c:	7ffb      	ldrb	r3, [r7, #31]
 801524e:	f003 0308 	and.w	r3, r3, #8
 8015252:	2b00      	cmp	r3, #0
 8015254:	d007      	beq.n	8015266 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015256:	7ffb      	ldrb	r3, [r7, #31]
 8015258:	f023 0308 	bic.w	r3, r3, #8
 801525c:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801525e:	7fbb      	ldrb	r3, [r7, #30]
 8015260:	f043 0308 	orr.w	r3, r3, #8
 8015264:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8015266:	7ffb      	ldrb	r3, [r7, #31]
 8015268:	f003 0301 	and.w	r3, r3, #1
 801526c:	2b00      	cmp	r3, #0
 801526e:	d007      	beq.n	8015280 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015270:	7ffb      	ldrb	r3, [r7, #31]
 8015272:	f023 0301 	bic.w	r3, r3, #1
 8015276:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8015278:	7fbb      	ldrb	r3, [r7, #30]
 801527a:	f043 0301 	orr.w	r3, r3, #1
 801527e:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015280:	697b      	ldr	r3, [r7, #20]
 8015282:	691b      	ldr	r3, [r3, #16]
 8015284:	685b      	ldr	r3, [r3, #4]
 8015286:	4618      	mov	r0, r3
 8015288:	f7f9 ff87 	bl	800f19a <lwip_htonl>
 801528c:	4602      	mov	r2, r0
 801528e:	887b      	ldrh	r3, [r7, #2]
 8015290:	18d1      	adds	r1, r2, r3
 8015292:	7fba      	ldrb	r2, [r7, #30]
 8015294:	7bfb      	ldrb	r3, [r7, #15]
 8015296:	9300      	str	r3, [sp, #0]
 8015298:	460b      	mov	r3, r1
 801529a:	6939      	ldr	r1, [r7, #16]
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f7ff fea5 	bl	8014fec <tcp_create_segment>
 80152a2:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d066      	beq.n	8015378 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80152aa:	697b      	ldr	r3, [r7, #20]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	4618      	mov	r0, r3
 80152b0:	f7fb fd0e 	bl	8010cd0 <pbuf_clen>
 80152b4:	4603      	mov	r3, r0
 80152b6:	461a      	mov	r2, r3
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80152be:	1a9b      	subs	r3, r3, r2
 80152c0:	b29a      	uxth	r2, r3
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	6858      	ldr	r0, [r3, #4]
 80152cc:	697b      	ldr	r3, [r7, #20]
 80152ce:	685b      	ldr	r3, [r3, #4]
 80152d0:	891a      	ldrh	r2, [r3, #8]
 80152d2:	89bb      	ldrh	r3, [r7, #12]
 80152d4:	1ad3      	subs	r3, r2, r3
 80152d6:	b29b      	uxth	r3, r3
 80152d8:	4619      	mov	r1, r3
 80152da:	f7fb fae5 	bl	80108a8 <pbuf_realloc>
  useg->len -= remainder;
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	891a      	ldrh	r2, [r3, #8]
 80152e2:	89bb      	ldrh	r3, [r7, #12]
 80152e4:	1ad3      	subs	r3, r2, r3
 80152e6:	b29a      	uxth	r2, r3
 80152e8:	697b      	ldr	r3, [r7, #20]
 80152ea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80152ec:	697b      	ldr	r3, [r7, #20]
 80152ee:	691b      	ldr	r3, [r3, #16]
 80152f0:	899b      	ldrh	r3, [r3, #12]
 80152f2:	b29c      	uxth	r4, r3
 80152f4:	7ffb      	ldrb	r3, [r7, #31]
 80152f6:	b29b      	uxth	r3, r3
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7f9 ff39 	bl	800f170 <lwip_htons>
 80152fe:	4603      	mov	r3, r0
 8015300:	461a      	mov	r2, r3
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	691b      	ldr	r3, [r3, #16]
 8015306:	4322      	orrs	r2, r4
 8015308:	b292      	uxth	r2, r2
 801530a:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 801530c:	697b      	ldr	r3, [r7, #20]
 801530e:	2200      	movs	r2, #0
 8015310:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015312:	697b      	ldr	r3, [r7, #20]
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	4618      	mov	r0, r3
 8015318:	f7fb fcda 	bl	8010cd0 <pbuf_clen>
 801531c:	4603      	mov	r3, r0
 801531e:	461a      	mov	r2, r3
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015326:	4413      	add	r3, r2
 8015328:	b29a      	uxth	r2, r3
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015330:	69bb      	ldr	r3, [r7, #24]
 8015332:	685b      	ldr	r3, [r3, #4]
 8015334:	4618      	mov	r0, r3
 8015336:	f7fb fccb 	bl	8010cd0 <pbuf_clen>
 801533a:	4603      	mov	r3, r0
 801533c:	461a      	mov	r2, r3
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015344:	4413      	add	r3, r2
 8015346:	b29a      	uxth	r2, r3
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801534e:	697b      	ldr	r3, [r7, #20]
 8015350:	681a      	ldr	r2, [r3, #0]
 8015352:	69bb      	ldr	r3, [r7, #24]
 8015354:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	69ba      	ldr	r2, [r7, #24]
 801535a:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801535c:	69bb      	ldr	r3, [r7, #24]
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d103      	bne.n	801536c <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	2200      	movs	r2, #0
 8015368:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801536c:	2300      	movs	r3, #0
 801536e:	e016      	b.n	801539e <tcp_split_unsent_seg+0x272>
    goto memerr;
 8015370:	bf00      	nop
 8015372:	e002      	b.n	801537a <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8015374:	bf00      	nop
 8015376:	e000      	b.n	801537a <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8015378:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801537a:	69bb      	ldr	r3, [r7, #24]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d006      	beq.n	801538e <tcp_split_unsent_seg+0x262>
 8015380:	4b09      	ldr	r3, [pc, #36]	@ (80153a8 <tcp_split_unsent_seg+0x27c>)
 8015382:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8015386:	490e      	ldr	r1, [pc, #56]	@ (80153c0 <tcp_split_unsent_seg+0x294>)
 8015388:	4809      	ldr	r0, [pc, #36]	@ (80153b0 <tcp_split_unsent_seg+0x284>)
 801538a:	f007 fa51 	bl	801c830 <iprintf>
  if (p != NULL) {
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d002      	beq.n	801539a <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8015394:	6938      	ldr	r0, [r7, #16]
 8015396:	f7fb fc0d 	bl	8010bb4 <pbuf_free>
  }

  return ERR_MEM;
 801539a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3724      	adds	r7, #36	@ 0x24
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd90      	pop	{r4, r7, pc}
 80153a6:	bf00      	nop
 80153a8:	08020c78 	.word	0x08020c78
 80153ac:	08021068 	.word	0x08021068
 80153b0:	08020ccc 	.word	0x08020ccc
 80153b4:	0802108c 	.word	0x0802108c
 80153b8:	080210b0 	.word	0x080210b0
 80153bc:	080210c0 	.word	0x080210c0
 80153c0:	080210d0 	.word	0x080210d0

080153c4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80153c4:	b590      	push	{r4, r7, lr}
 80153c6:	b085      	sub	sp, #20
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d106      	bne.n	80153e0 <tcp_send_fin+0x1c>
 80153d2:	4b21      	ldr	r3, [pc, #132]	@ (8015458 <tcp_send_fin+0x94>)
 80153d4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80153d8:	4920      	ldr	r1, [pc, #128]	@ (801545c <tcp_send_fin+0x98>)
 80153da:	4821      	ldr	r0, [pc, #132]	@ (8015460 <tcp_send_fin+0x9c>)
 80153dc:	f007 fa28 	bl	801c830 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d02e      	beq.n	8015446 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153ec:	60fb      	str	r3, [r7, #12]
 80153ee:	e002      	b.n	80153f6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d1f8      	bne.n	80153f0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	691b      	ldr	r3, [r3, #16]
 8015402:	899b      	ldrh	r3, [r3, #12]
 8015404:	b29b      	uxth	r3, r3
 8015406:	4618      	mov	r0, r3
 8015408:	f7f9 feb2 	bl	800f170 <lwip_htons>
 801540c:	4603      	mov	r3, r0
 801540e:	b2db      	uxtb	r3, r3
 8015410:	f003 0307 	and.w	r3, r3, #7
 8015414:	2b00      	cmp	r3, #0
 8015416:	d116      	bne.n	8015446 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	691b      	ldr	r3, [r3, #16]
 801541c:	899b      	ldrh	r3, [r3, #12]
 801541e:	b29c      	uxth	r4, r3
 8015420:	2001      	movs	r0, #1
 8015422:	f7f9 fea5 	bl	800f170 <lwip_htons>
 8015426:	4603      	mov	r3, r0
 8015428:	461a      	mov	r2, r3
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	691b      	ldr	r3, [r3, #16]
 801542e:	4322      	orrs	r2, r4
 8015430:	b292      	uxth	r2, r2
 8015432:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	8b5b      	ldrh	r3, [r3, #26]
 8015438:	f043 0320 	orr.w	r3, r3, #32
 801543c:	b29a      	uxth	r2, r3
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015442:	2300      	movs	r3, #0
 8015444:	e004      	b.n	8015450 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015446:	2101      	movs	r1, #1
 8015448:	6878      	ldr	r0, [r7, #4]
 801544a:	f000 f80b 	bl	8015464 <tcp_enqueue_flags>
 801544e:	4603      	mov	r3, r0
}
 8015450:	4618      	mov	r0, r3
 8015452:	3714      	adds	r7, #20
 8015454:	46bd      	mov	sp, r7
 8015456:	bd90      	pop	{r4, r7, pc}
 8015458:	08020c78 	.word	0x08020c78
 801545c:	080210dc 	.word	0x080210dc
 8015460:	08020ccc 	.word	0x08020ccc

08015464 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b088      	sub	sp, #32
 8015468:	af02      	add	r7, sp, #8
 801546a:	6078      	str	r0, [r7, #4]
 801546c:	460b      	mov	r3, r1
 801546e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015470:	2300      	movs	r3, #0
 8015472:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8015474:	2300      	movs	r3, #0
 8015476:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015478:	78fb      	ldrb	r3, [r7, #3]
 801547a:	f003 0303 	and.w	r3, r3, #3
 801547e:	2b00      	cmp	r3, #0
 8015480:	d106      	bne.n	8015490 <tcp_enqueue_flags+0x2c>
 8015482:	4b67      	ldr	r3, [pc, #412]	@ (8015620 <tcp_enqueue_flags+0x1bc>)
 8015484:	f240 4211 	movw	r2, #1041	@ 0x411
 8015488:	4966      	ldr	r1, [pc, #408]	@ (8015624 <tcp_enqueue_flags+0x1c0>)
 801548a:	4867      	ldr	r0, [pc, #412]	@ (8015628 <tcp_enqueue_flags+0x1c4>)
 801548c:	f007 f9d0 	bl	801c830 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d106      	bne.n	80154a4 <tcp_enqueue_flags+0x40>
 8015496:	4b62      	ldr	r3, [pc, #392]	@ (8015620 <tcp_enqueue_flags+0x1bc>)
 8015498:	f240 4213 	movw	r2, #1043	@ 0x413
 801549c:	4963      	ldr	r1, [pc, #396]	@ (801562c <tcp_enqueue_flags+0x1c8>)
 801549e:	4862      	ldr	r0, [pc, #392]	@ (8015628 <tcp_enqueue_flags+0x1c4>)
 80154a0:	f007 f9c6 	bl	801c830 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80154a4:	78fb      	ldrb	r3, [r7, #3]
 80154a6:	f003 0302 	and.w	r3, r3, #2
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d001      	beq.n	80154b2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80154ae:	2301      	movs	r3, #1
 80154b0:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80154b2:	7dfb      	ldrb	r3, [r7, #23]
 80154b4:	009b      	lsls	r3, r3, #2
 80154b6:	b2db      	uxtb	r3, r3
 80154b8:	f003 0304 	and.w	r3, r3, #4
 80154bc:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80154be:	7dbb      	ldrb	r3, [r7, #22]
 80154c0:	b29b      	uxth	r3, r3
 80154c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80154c6:	4619      	mov	r1, r3
 80154c8:	2036      	movs	r0, #54	@ 0x36
 80154ca:	f7fb f88b 	bl	80105e4 <pbuf_alloc>
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d109      	bne.n	80154ea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	8b5b      	ldrh	r3, [r3, #26]
 80154da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80154de:	b29a      	uxth	r2, r3
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80154e4:	f04f 33ff 	mov.w	r3, #4294967295
 80154e8:	e095      	b.n	8015616 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	895a      	ldrh	r2, [r3, #10]
 80154ee:	7dbb      	ldrb	r3, [r7, #22]
 80154f0:	b29b      	uxth	r3, r3
 80154f2:	429a      	cmp	r2, r3
 80154f4:	d206      	bcs.n	8015504 <tcp_enqueue_flags+0xa0>
 80154f6:	4b4a      	ldr	r3, [pc, #296]	@ (8015620 <tcp_enqueue_flags+0x1bc>)
 80154f8:	f240 4239 	movw	r2, #1081	@ 0x439
 80154fc:	494c      	ldr	r1, [pc, #304]	@ (8015630 <tcp_enqueue_flags+0x1cc>)
 80154fe:	484a      	ldr	r0, [pc, #296]	@ (8015628 <tcp_enqueue_flags+0x1c4>)
 8015500:	f007 f996 	bl	801c830 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8015508:	78fa      	ldrb	r2, [r7, #3]
 801550a:	7dfb      	ldrb	r3, [r7, #23]
 801550c:	9300      	str	r3, [sp, #0]
 801550e:	460b      	mov	r3, r1
 8015510:	68f9      	ldr	r1, [r7, #12]
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	f7ff fd6a 	bl	8014fec <tcp_create_segment>
 8015518:	60b8      	str	r0, [r7, #8]
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d109      	bne.n	8015534 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	8b5b      	ldrh	r3, [r3, #26]
 8015524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015528:	b29a      	uxth	r2, r3
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801552e:	f04f 33ff 	mov.w	r3, #4294967295
 8015532:	e070      	b.n	8015616 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015534:	68bb      	ldr	r3, [r7, #8]
 8015536:	691b      	ldr	r3, [r3, #16]
 8015538:	f003 0303 	and.w	r3, r3, #3
 801553c:	2b00      	cmp	r3, #0
 801553e:	d006      	beq.n	801554e <tcp_enqueue_flags+0xea>
 8015540:	4b37      	ldr	r3, [pc, #220]	@ (8015620 <tcp_enqueue_flags+0x1bc>)
 8015542:	f240 4242 	movw	r2, #1090	@ 0x442
 8015546:	493b      	ldr	r1, [pc, #236]	@ (8015634 <tcp_enqueue_flags+0x1d0>)
 8015548:	4837      	ldr	r0, [pc, #220]	@ (8015628 <tcp_enqueue_flags+0x1c4>)
 801554a:	f007 f971 	bl	801c830 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	891b      	ldrh	r3, [r3, #8]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d006      	beq.n	8015564 <tcp_enqueue_flags+0x100>
 8015556:	4b32      	ldr	r3, [pc, #200]	@ (8015620 <tcp_enqueue_flags+0x1bc>)
 8015558:	f240 4243 	movw	r2, #1091	@ 0x443
 801555c:	4936      	ldr	r1, [pc, #216]	@ (8015638 <tcp_enqueue_flags+0x1d4>)
 801555e:	4832      	ldr	r0, [pc, #200]	@ (8015628 <tcp_enqueue_flags+0x1c4>)
 8015560:	f007 f966 	bl	801c830 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015568:	2b00      	cmp	r3, #0
 801556a:	d103      	bne.n	8015574 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	68ba      	ldr	r2, [r7, #8]
 8015570:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015572:	e00d      	b.n	8015590 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015578:	613b      	str	r3, [r7, #16]
 801557a:	e002      	b.n	8015582 <tcp_enqueue_flags+0x11e>
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	613b      	str	r3, [r7, #16]
 8015582:	693b      	ldr	r3, [r7, #16]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d1f8      	bne.n	801557c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	68ba      	ldr	r2, [r7, #8]
 801558e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	2200      	movs	r2, #0
 8015594:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015598:	78fb      	ldrb	r3, [r7, #3]
 801559a:	f003 0302 	and.w	r3, r3, #2
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d104      	bne.n	80155ac <tcp_enqueue_flags+0x148>
 80155a2:	78fb      	ldrb	r3, [r7, #3]
 80155a4:	f003 0301 	and.w	r3, r3, #1
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d004      	beq.n	80155b6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80155b0:	1c5a      	adds	r2, r3, #1
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80155b6:	78fb      	ldrb	r3, [r7, #3]
 80155b8:	f003 0301 	and.w	r3, r3, #1
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d006      	beq.n	80155ce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	8b5b      	ldrh	r3, [r3, #26]
 80155c4:	f043 0320 	orr.w	r3, r3, #32
 80155c8:	b29a      	uxth	r2, r3
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	685b      	ldr	r3, [r3, #4]
 80155d2:	4618      	mov	r0, r3
 80155d4:	f7fb fb7c 	bl	8010cd0 <pbuf_clen>
 80155d8:	4603      	mov	r3, r0
 80155da:	461a      	mov	r2, r3
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80155e2:	4413      	add	r3, r2
 80155e4:	b29a      	uxth	r2, r3
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d00e      	beq.n	8015614 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d10a      	bne.n	8015614 <tcp_enqueue_flags+0x1b0>
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015602:	2b00      	cmp	r3, #0
 8015604:	d106      	bne.n	8015614 <tcp_enqueue_flags+0x1b0>
 8015606:	4b06      	ldr	r3, [pc, #24]	@ (8015620 <tcp_enqueue_flags+0x1bc>)
 8015608:	f240 4265 	movw	r2, #1125	@ 0x465
 801560c:	490b      	ldr	r1, [pc, #44]	@ (801563c <tcp_enqueue_flags+0x1d8>)
 801560e:	4806      	ldr	r0, [pc, #24]	@ (8015628 <tcp_enqueue_flags+0x1c4>)
 8015610:	f007 f90e 	bl	801c830 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015614:	2300      	movs	r3, #0
}
 8015616:	4618      	mov	r0, r3
 8015618:	3718      	adds	r7, #24
 801561a:	46bd      	mov	sp, r7
 801561c:	bd80      	pop	{r7, pc}
 801561e:	bf00      	nop
 8015620:	08020c78 	.word	0x08020c78
 8015624:	080210f8 	.word	0x080210f8
 8015628:	08020ccc 	.word	0x08020ccc
 801562c:	08021150 	.word	0x08021150
 8015630:	08021170 	.word	0x08021170
 8015634:	080211ac 	.word	0x080211ac
 8015638:	080211c4 	.word	0x080211c4
 801563c:	080211f0 	.word	0x080211f0

08015640 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015640:	b5b0      	push	{r4, r5, r7, lr}
 8015642:	b08a      	sub	sp, #40	@ 0x28
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d106      	bne.n	801565c <tcp_output+0x1c>
 801564e:	4b8a      	ldr	r3, [pc, #552]	@ (8015878 <tcp_output+0x238>)
 8015650:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8015654:	4989      	ldr	r1, [pc, #548]	@ (801587c <tcp_output+0x23c>)
 8015656:	488a      	ldr	r0, [pc, #552]	@ (8015880 <tcp_output+0x240>)
 8015658:	f007 f8ea 	bl	801c830 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	7d1b      	ldrb	r3, [r3, #20]
 8015660:	2b01      	cmp	r3, #1
 8015662:	d106      	bne.n	8015672 <tcp_output+0x32>
 8015664:	4b84      	ldr	r3, [pc, #528]	@ (8015878 <tcp_output+0x238>)
 8015666:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801566a:	4986      	ldr	r1, [pc, #536]	@ (8015884 <tcp_output+0x244>)
 801566c:	4884      	ldr	r0, [pc, #528]	@ (8015880 <tcp_output+0x240>)
 801566e:	f007 f8df 	bl	801c830 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015672:	4b85      	ldr	r3, [pc, #532]	@ (8015888 <tcp_output+0x248>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	687a      	ldr	r2, [r7, #4]
 8015678:	429a      	cmp	r2, r3
 801567a:	d101      	bne.n	8015680 <tcp_output+0x40>
    return ERR_OK;
 801567c:	2300      	movs	r3, #0
 801567e:	e1d1      	b.n	8015a24 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801568c:	4293      	cmp	r3, r2
 801568e:	bf28      	it	cs
 8015690:	4613      	movcs	r3, r2
 8015692:	b29b      	uxth	r3, r3
 8015694:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801569a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d10b      	bne.n	80156ba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	8b5b      	ldrh	r3, [r3, #26]
 80156a6:	f003 0302 	and.w	r3, r3, #2
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	f000 81ad 	beq.w	8015a0a <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f000 fdf9 	bl	80162a8 <tcp_send_empty_ack>
 80156b6:	4603      	mov	r3, r0
 80156b8:	e1b4      	b.n	8015a24 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80156ba:	6879      	ldr	r1, [r7, #4]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	3304      	adds	r3, #4
 80156c0:	461a      	mov	r2, r3
 80156c2:	6878      	ldr	r0, [r7, #4]
 80156c4:	f7ff fc76 	bl	8014fb4 <tcp_route>
 80156c8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80156ca:	697b      	ldr	r3, [r7, #20]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d102      	bne.n	80156d6 <tcp_output+0x96>
    return ERR_RTE;
 80156d0:	f06f 0303 	mvn.w	r3, #3
 80156d4:	e1a6      	b.n	8015a24 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d003      	beq.n	80156e4 <tcp_output+0xa4>
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d111      	bne.n	8015708 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80156e4:	697b      	ldr	r3, [r7, #20]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d002      	beq.n	80156f0 <tcp_output+0xb0>
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	3304      	adds	r3, #4
 80156ee:	e000      	b.n	80156f2 <tcp_output+0xb2>
 80156f0:	2300      	movs	r3, #0
 80156f2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80156f4:	693b      	ldr	r3, [r7, #16]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d102      	bne.n	8015700 <tcp_output+0xc0>
      return ERR_RTE;
 80156fa:	f06f 0303 	mvn.w	r3, #3
 80156fe:	e191      	b.n	8015a24 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015700:	693b      	ldr	r3, [r7, #16]
 8015702:	681a      	ldr	r2, [r3, #0]
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801570a:	691b      	ldr	r3, [r3, #16]
 801570c:	685b      	ldr	r3, [r3, #4]
 801570e:	4618      	mov	r0, r3
 8015710:	f7f9 fd43 	bl	800f19a <lwip_htonl>
 8015714:	4602      	mov	r2, r0
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801571a:	1ad3      	subs	r3, r2, r3
 801571c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801571e:	8912      	ldrh	r2, [r2, #8]
 8015720:	4413      	add	r3, r2
 8015722:	69ba      	ldr	r2, [r7, #24]
 8015724:	429a      	cmp	r2, r3
 8015726:	d227      	bcs.n	8015778 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801572e:	461a      	mov	r2, r3
 8015730:	69bb      	ldr	r3, [r7, #24]
 8015732:	4293      	cmp	r3, r2
 8015734:	d114      	bne.n	8015760 <tcp_output+0x120>
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801573a:	2b00      	cmp	r3, #0
 801573c:	d110      	bne.n	8015760 <tcp_output+0x120>
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015744:	2b00      	cmp	r3, #0
 8015746:	d10b      	bne.n	8015760 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	2200      	movs	r2, #0
 801574c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	2201      	movs	r2, #1
 8015754:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	2200      	movs	r2, #0
 801575c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	8b5b      	ldrh	r3, [r3, #26]
 8015764:	f003 0302 	and.w	r3, r3, #2
 8015768:	2b00      	cmp	r3, #0
 801576a:	f000 8150 	beq.w	8015a0e <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f000 fd9a 	bl	80162a8 <tcp_send_empty_ack>
 8015774:	4603      	mov	r3, r0
 8015776:	e155      	b.n	8015a24 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	2200      	movs	r2, #0
 801577c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015784:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015786:	6a3b      	ldr	r3, [r7, #32]
 8015788:	2b00      	cmp	r3, #0
 801578a:	f000 811f 	beq.w	80159cc <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801578e:	e002      	b.n	8015796 <tcp_output+0x156>
 8015790:	6a3b      	ldr	r3, [r7, #32]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	623b      	str	r3, [r7, #32]
 8015796:	6a3b      	ldr	r3, [r7, #32]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d1f8      	bne.n	8015790 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801579e:	e115      	b.n	80159cc <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80157a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157a2:	691b      	ldr	r3, [r3, #16]
 80157a4:	899b      	ldrh	r3, [r3, #12]
 80157a6:	b29b      	uxth	r3, r3
 80157a8:	4618      	mov	r0, r3
 80157aa:	f7f9 fce1 	bl	800f170 <lwip_htons>
 80157ae:	4603      	mov	r3, r0
 80157b0:	b2db      	uxtb	r3, r3
 80157b2:	f003 0304 	and.w	r3, r3, #4
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d006      	beq.n	80157c8 <tcp_output+0x188>
 80157ba:	4b2f      	ldr	r3, [pc, #188]	@ (8015878 <tcp_output+0x238>)
 80157bc:	f240 5236 	movw	r2, #1334	@ 0x536
 80157c0:	4932      	ldr	r1, [pc, #200]	@ (801588c <tcp_output+0x24c>)
 80157c2:	482f      	ldr	r0, [pc, #188]	@ (8015880 <tcp_output+0x240>)
 80157c4:	f007 f834 	bl	801c830 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d01f      	beq.n	8015810 <tcp_output+0x1d0>
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	8b5b      	ldrh	r3, [r3, #26]
 80157d4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d119      	bne.n	8015810 <tcp_output+0x1d0>
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d00b      	beq.n	80157fc <tcp_output+0x1bc>
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d110      	bne.n	8015810 <tcp_output+0x1d0>
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80157f2:	891a      	ldrh	r2, [r3, #8]
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80157f8:	429a      	cmp	r2, r3
 80157fa:	d209      	bcs.n	8015810 <tcp_output+0x1d0>
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015802:	2b00      	cmp	r3, #0
 8015804:	d004      	beq.n	8015810 <tcp_output+0x1d0>
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801580c:	2b0f      	cmp	r3, #15
 801580e:	d901      	bls.n	8015814 <tcp_output+0x1d4>
 8015810:	2301      	movs	r3, #1
 8015812:	e000      	b.n	8015816 <tcp_output+0x1d6>
 8015814:	2300      	movs	r3, #0
 8015816:	2b00      	cmp	r3, #0
 8015818:	d106      	bne.n	8015828 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	8b5b      	ldrh	r3, [r3, #26]
 801581e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015822:	2b00      	cmp	r3, #0
 8015824:	f000 80e7 	beq.w	80159f6 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	7d1b      	ldrb	r3, [r3, #20]
 801582c:	2b02      	cmp	r3, #2
 801582e:	d00d      	beq.n	801584c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015832:	691b      	ldr	r3, [r3, #16]
 8015834:	899b      	ldrh	r3, [r3, #12]
 8015836:	b29c      	uxth	r4, r3
 8015838:	2010      	movs	r0, #16
 801583a:	f7f9 fc99 	bl	800f170 <lwip_htons>
 801583e:	4603      	mov	r3, r0
 8015840:	461a      	mov	r2, r3
 8015842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015844:	691b      	ldr	r3, [r3, #16]
 8015846:	4322      	orrs	r2, r4
 8015848:	b292      	uxth	r2, r2
 801584a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801584c:	697a      	ldr	r2, [r7, #20]
 801584e:	6879      	ldr	r1, [r7, #4]
 8015850:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015852:	f000 f90b 	bl	8015a6c <tcp_output_segment>
 8015856:	4603      	mov	r3, r0
 8015858:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801585a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d016      	beq.n	8015890 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	8b5b      	ldrh	r3, [r3, #26]
 8015866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801586a:	b29a      	uxth	r2, r3
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	835a      	strh	r2, [r3, #26]
      return err;
 8015870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015874:	e0d6      	b.n	8015a24 <tcp_output+0x3e4>
 8015876:	bf00      	nop
 8015878:	08020c78 	.word	0x08020c78
 801587c:	08021218 	.word	0x08021218
 8015880:	08020ccc 	.word	0x08020ccc
 8015884:	08021230 	.word	0x08021230
 8015888:	20013d98 	.word	0x20013d98
 801588c:	08021258 	.word	0x08021258
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8015890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015892:	2200      	movs	r2, #0
 8015894:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015898:	681a      	ldr	r2, [r3, #0]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	7d1b      	ldrb	r3, [r3, #20]
 80158a2:	2b02      	cmp	r3, #2
 80158a4:	d006      	beq.n	80158b4 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	8b5b      	ldrh	r3, [r3, #26]
 80158aa:	f023 0303 	bic.w	r3, r3, #3
 80158ae:	b29a      	uxth	r2, r3
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80158b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158b6:	691b      	ldr	r3, [r3, #16]
 80158b8:	685b      	ldr	r3, [r3, #4]
 80158ba:	4618      	mov	r0, r3
 80158bc:	f7f9 fc6d 	bl	800f19a <lwip_htonl>
 80158c0:	4604      	mov	r4, r0
 80158c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158c4:	891b      	ldrh	r3, [r3, #8]
 80158c6:	461d      	mov	r5, r3
 80158c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158ca:	691b      	ldr	r3, [r3, #16]
 80158cc:	899b      	ldrh	r3, [r3, #12]
 80158ce:	b29b      	uxth	r3, r3
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7f9 fc4d 	bl	800f170 <lwip_htons>
 80158d6:	4603      	mov	r3, r0
 80158d8:	b2db      	uxtb	r3, r3
 80158da:	f003 0303 	and.w	r3, r3, #3
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d001      	beq.n	80158e6 <tcp_output+0x2a6>
 80158e2:	2301      	movs	r3, #1
 80158e4:	e000      	b.n	80158e8 <tcp_output+0x2a8>
 80158e6:	2300      	movs	r3, #0
 80158e8:	442b      	add	r3, r5
 80158ea:	4423      	add	r3, r4
 80158ec:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	1ad3      	subs	r3, r2, r3
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	da02      	bge.n	8015900 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	68ba      	ldr	r2, [r7, #8]
 80158fe:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015902:	891b      	ldrh	r3, [r3, #8]
 8015904:	461c      	mov	r4, r3
 8015906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015908:	691b      	ldr	r3, [r3, #16]
 801590a:	899b      	ldrh	r3, [r3, #12]
 801590c:	b29b      	uxth	r3, r3
 801590e:	4618      	mov	r0, r3
 8015910:	f7f9 fc2e 	bl	800f170 <lwip_htons>
 8015914:	4603      	mov	r3, r0
 8015916:	b2db      	uxtb	r3, r3
 8015918:	f003 0303 	and.w	r3, r3, #3
 801591c:	2b00      	cmp	r3, #0
 801591e:	d001      	beq.n	8015924 <tcp_output+0x2e4>
 8015920:	2301      	movs	r3, #1
 8015922:	e000      	b.n	8015926 <tcp_output+0x2e6>
 8015924:	2300      	movs	r3, #0
 8015926:	4423      	add	r3, r4
 8015928:	2b00      	cmp	r3, #0
 801592a:	d049      	beq.n	80159c0 <tcp_output+0x380>
      seg->next = NULL;
 801592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801592e:	2200      	movs	r2, #0
 8015930:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015936:	2b00      	cmp	r3, #0
 8015938:	d105      	bne.n	8015946 <tcp_output+0x306>
        pcb->unacked = seg;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801593e:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8015940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015942:	623b      	str	r3, [r7, #32]
 8015944:	e03f      	b.n	80159c6 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015948:	691b      	ldr	r3, [r3, #16]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	4618      	mov	r0, r3
 801594e:	f7f9 fc24 	bl	800f19a <lwip_htonl>
 8015952:	4604      	mov	r4, r0
 8015954:	6a3b      	ldr	r3, [r7, #32]
 8015956:	691b      	ldr	r3, [r3, #16]
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	4618      	mov	r0, r3
 801595c:	f7f9 fc1d 	bl	800f19a <lwip_htonl>
 8015960:	4603      	mov	r3, r0
 8015962:	1ae3      	subs	r3, r4, r3
 8015964:	2b00      	cmp	r3, #0
 8015966:	da24      	bge.n	80159b2 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	3370      	adds	r3, #112	@ 0x70
 801596c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801596e:	e002      	b.n	8015976 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015970:	69fb      	ldr	r3, [r7, #28]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015976:	69fb      	ldr	r3, [r7, #28]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d011      	beq.n	80159a2 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801597e:	69fb      	ldr	r3, [r7, #28]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	691b      	ldr	r3, [r3, #16]
 8015984:	685b      	ldr	r3, [r3, #4]
 8015986:	4618      	mov	r0, r3
 8015988:	f7f9 fc07 	bl	800f19a <lwip_htonl>
 801598c:	4604      	mov	r4, r0
 801598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015990:	691b      	ldr	r3, [r3, #16]
 8015992:	685b      	ldr	r3, [r3, #4]
 8015994:	4618      	mov	r0, r3
 8015996:	f7f9 fc00 	bl	800f19a <lwip_htonl>
 801599a:	4603      	mov	r3, r0
 801599c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801599e:	2b00      	cmp	r3, #0
 80159a0:	dbe6      	blt.n	8015970 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 80159a2:	69fb      	ldr	r3, [r7, #28]
 80159a4:	681a      	ldr	r2, [r3, #0]
 80159a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159a8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80159aa:	69fb      	ldr	r3, [r7, #28]
 80159ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159ae:	601a      	str	r2, [r3, #0]
 80159b0:	e009      	b.n	80159c6 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80159b2:	6a3b      	ldr	r3, [r7, #32]
 80159b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159b6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80159b8:	6a3b      	ldr	r3, [r7, #32]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	623b      	str	r3, [r7, #32]
 80159be:	e002      	b.n	80159c6 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80159c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80159c2:	f7fc fc24 	bl	801220e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80159ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80159cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d012      	beq.n	80159f8 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80159d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159d4:	691b      	ldr	r3, [r3, #16]
 80159d6:	685b      	ldr	r3, [r3, #4]
 80159d8:	4618      	mov	r0, r3
 80159da:	f7f9 fbde 	bl	800f19a <lwip_htonl>
 80159de:	4602      	mov	r2, r0
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80159e4:	1ad3      	subs	r3, r2, r3
 80159e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159e8:	8912      	ldrh	r2, [r2, #8]
 80159ea:	4413      	add	r3, r2
  while (seg != NULL &&
 80159ec:	69ba      	ldr	r2, [r7, #24]
 80159ee:	429a      	cmp	r2, r3
 80159f0:	f4bf aed6 	bcs.w	80157a0 <tcp_output+0x160>
 80159f4:	e000      	b.n	80159f8 <tcp_output+0x3b8>
      break;
 80159f6:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d108      	bne.n	8015a12 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	2200      	movs	r2, #0
 8015a04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8015a08:	e004      	b.n	8015a14 <tcp_output+0x3d4>
    goto output_done;
 8015a0a:	bf00      	nop
 8015a0c:	e002      	b.n	8015a14 <tcp_output+0x3d4>
    goto output_done;
 8015a0e:	bf00      	nop
 8015a10:	e000      	b.n	8015a14 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015a12:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	8b5b      	ldrh	r3, [r3, #26]
 8015a18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015a1c:	b29a      	uxth	r2, r3
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015a22:	2300      	movs	r3, #0
}
 8015a24:	4618      	mov	r0, r3
 8015a26:	3728      	adds	r7, #40	@ 0x28
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bdb0      	pop	{r4, r5, r7, pc}

08015a2c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b082      	sub	sp, #8
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d106      	bne.n	8015a48 <tcp_output_segment_busy+0x1c>
 8015a3a:	4b09      	ldr	r3, [pc, #36]	@ (8015a60 <tcp_output_segment_busy+0x34>)
 8015a3c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8015a40:	4908      	ldr	r1, [pc, #32]	@ (8015a64 <tcp_output_segment_busy+0x38>)
 8015a42:	4809      	ldr	r0, [pc, #36]	@ (8015a68 <tcp_output_segment_busy+0x3c>)
 8015a44:	f006 fef4 	bl	801c830 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	685b      	ldr	r3, [r3, #4]
 8015a4c:	7b9b      	ldrb	r3, [r3, #14]
 8015a4e:	2b01      	cmp	r3, #1
 8015a50:	d001      	beq.n	8015a56 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015a52:	2301      	movs	r3, #1
 8015a54:	e000      	b.n	8015a58 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015a56:	2300      	movs	r3, #0
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3708      	adds	r7, #8
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}
 8015a60:	08020c78 	.word	0x08020c78
 8015a64:	08021270 	.word	0x08021270
 8015a68:	08020ccc 	.word	0x08020ccc

08015a6c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015a6c:	b5b0      	push	{r4, r5, r7, lr}
 8015a6e:	b08c      	sub	sp, #48	@ 0x30
 8015a70:	af04      	add	r7, sp, #16
 8015a72:	60f8      	str	r0, [r7, #12]
 8015a74:	60b9      	str	r1, [r7, #8]
 8015a76:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d106      	bne.n	8015a8c <tcp_output_segment+0x20>
 8015a7e:	4b6d      	ldr	r3, [pc, #436]	@ (8015c34 <tcp_output_segment+0x1c8>)
 8015a80:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8015a84:	496c      	ldr	r1, [pc, #432]	@ (8015c38 <tcp_output_segment+0x1cc>)
 8015a86:	486d      	ldr	r0, [pc, #436]	@ (8015c3c <tcp_output_segment+0x1d0>)
 8015a88:	f006 fed2 	bl	801c830 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015a8c:	68bb      	ldr	r3, [r7, #8]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d106      	bne.n	8015aa0 <tcp_output_segment+0x34>
 8015a92:	4b68      	ldr	r3, [pc, #416]	@ (8015c34 <tcp_output_segment+0x1c8>)
 8015a94:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8015a98:	4969      	ldr	r1, [pc, #420]	@ (8015c40 <tcp_output_segment+0x1d4>)
 8015a9a:	4868      	ldr	r0, [pc, #416]	@ (8015c3c <tcp_output_segment+0x1d0>)
 8015a9c:	f006 fec8 	bl	801c830 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d106      	bne.n	8015ab4 <tcp_output_segment+0x48>
 8015aa6:	4b63      	ldr	r3, [pc, #396]	@ (8015c34 <tcp_output_segment+0x1c8>)
 8015aa8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8015aac:	4965      	ldr	r1, [pc, #404]	@ (8015c44 <tcp_output_segment+0x1d8>)
 8015aae:	4863      	ldr	r0, [pc, #396]	@ (8015c3c <tcp_output_segment+0x1d0>)
 8015ab0:	f006 febe 	bl	801c830 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015ab4:	68f8      	ldr	r0, [r7, #12]
 8015ab6:	f7ff ffb9 	bl	8015a2c <tcp_output_segment_busy>
 8015aba:	4603      	mov	r3, r0
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d001      	beq.n	8015ac4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	e0b3      	b.n	8015c2c <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	691c      	ldr	r4, [r3, #16]
 8015acc:	4610      	mov	r0, r2
 8015ace:	f7f9 fb64 	bl	800f19a <lwip_htonl>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015ad6:	68bb      	ldr	r3, [r7, #8]
 8015ad8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	691c      	ldr	r4, [r3, #16]
 8015ade:	4610      	mov	r0, r2
 8015ae0:	f7f9 fb46 	bl	800f170 <lwip_htons>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015aec:	68ba      	ldr	r2, [r7, #8]
 8015aee:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015af0:	441a      	add	r2, r3
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	691b      	ldr	r3, [r3, #16]
 8015afa:	3314      	adds	r3, #20
 8015afc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	7b1b      	ldrb	r3, [r3, #12]
 8015b02:	f003 0301 	and.w	r3, r3, #1
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d015      	beq.n	8015b36 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	3304      	adds	r3, #4
 8015b0e:	461a      	mov	r2, r3
 8015b10:	6879      	ldr	r1, [r7, #4]
 8015b12:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8015b16:	f7fc fe71 	bl	80127fc <tcp_eff_send_mss_netif>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015b1e:	8b7b      	ldrh	r3, [r7, #26]
 8015b20:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8015b24:	4618      	mov	r0, r3
 8015b26:	f7f9 fb38 	bl	800f19a <lwip_htonl>
 8015b2a:	4602      	mov	r2, r0
 8015b2c:	69fb      	ldr	r3, [r7, #28]
 8015b2e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015b30:	69fb      	ldr	r3, [r7, #28]
 8015b32:	3304      	adds	r3, #4
 8015b34:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015b36:	68bb      	ldr	r3, [r7, #8]
 8015b38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	da02      	bge.n	8015b46 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	2200      	movs	r2, #0
 8015b44:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d10c      	bne.n	8015b68 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8015c48 <tcp_output_segment+0x1dc>)
 8015b50:	681a      	ldr	r2, [r3, #0]
 8015b52:	68bb      	ldr	r3, [r7, #8]
 8015b54:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	691b      	ldr	r3, [r3, #16]
 8015b5a:	685b      	ldr	r3, [r3, #4]
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7f9 fb1c 	bl	800f19a <lwip_htonl>
 8015b62:	4602      	mov	r2, r0
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	691a      	ldr	r2, [r3, #16]
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	685b      	ldr	r3, [r3, #4]
 8015b70:	685b      	ldr	r3, [r3, #4]
 8015b72:	1ad3      	subs	r3, r2, r3
 8015b74:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	685b      	ldr	r3, [r3, #4]
 8015b7a:	8959      	ldrh	r1, [r3, #10]
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	685b      	ldr	r3, [r3, #4]
 8015b80:	8b3a      	ldrh	r2, [r7, #24]
 8015b82:	1a8a      	subs	r2, r1, r2
 8015b84:	b292      	uxth	r2, r2
 8015b86:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	685b      	ldr	r3, [r3, #4]
 8015b8c:	8919      	ldrh	r1, [r3, #8]
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	8b3a      	ldrh	r2, [r7, #24]
 8015b94:	1a8a      	subs	r2, r1, r2
 8015b96:	b292      	uxth	r2, r2
 8015b98:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	685b      	ldr	r3, [r3, #4]
 8015b9e:	68fa      	ldr	r2, [r7, #12]
 8015ba0:	6912      	ldr	r2, [r2, #16]
 8015ba2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	691b      	ldr	r3, [r3, #16]
 8015ba8:	2200      	movs	r2, #0
 8015baa:	741a      	strb	r2, [r3, #16]
 8015bac:	2200      	movs	r2, #0
 8015bae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	691a      	ldr	r2, [r3, #16]
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	7b1b      	ldrb	r3, [r3, #12]
 8015bb8:	f003 0301 	and.w	r3, r3, #1
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d001      	beq.n	8015bc4 <tcp_output_segment+0x158>
 8015bc0:	2318      	movs	r3, #24
 8015bc2:	e000      	b.n	8015bc6 <tcp_output_segment+0x15a>
 8015bc4:	2314      	movs	r3, #20
 8015bc6:	4413      	add	r3, r2
 8015bc8:	69fa      	ldr	r2, [r7, #28]
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d006      	beq.n	8015bdc <tcp_output_segment+0x170>
 8015bce:	4b19      	ldr	r3, [pc, #100]	@ (8015c34 <tcp_output_segment+0x1c8>)
 8015bd0:	f240 621c 	movw	r2, #1564	@ 0x61c
 8015bd4:	491d      	ldr	r1, [pc, #116]	@ (8015c4c <tcp_output_segment+0x1e0>)
 8015bd6:	4819      	ldr	r0, [pc, #100]	@ (8015c3c <tcp_output_segment+0x1d0>)
 8015bd8:	f006 fe2a 	bl	801c830 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8015be4:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8015be6:	68bd      	ldr	r5, [r7, #8]
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8015bec:	68fa      	ldr	r2, [r7, #12]
 8015bee:	6914      	ldr	r4, [r2, #16]
 8015bf0:	9300      	str	r3, [sp, #0]
 8015bf2:	462b      	mov	r3, r5
 8015bf4:	460a      	mov	r2, r1
 8015bf6:	2106      	movs	r1, #6
 8015bf8:	f7f9 fbec 	bl	800f3d4 <ip_chksum_pseudo>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	6858      	ldr	r0, [r3, #4]
 8015c04:	68b9      	ldr	r1, [r7, #8]
 8015c06:	68bb      	ldr	r3, [r7, #8]
 8015c08:	1d1c      	adds	r4, r3, #4
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	7add      	ldrb	r5, [r3, #11]
 8015c0e:	68bb      	ldr	r3, [r7, #8]
 8015c10:	7a9b      	ldrb	r3, [r3, #10]
 8015c12:	687a      	ldr	r2, [r7, #4]
 8015c14:	9202      	str	r2, [sp, #8]
 8015c16:	2206      	movs	r2, #6
 8015c18:	9201      	str	r2, [sp, #4]
 8015c1a:	9300      	str	r3, [sp, #0]
 8015c1c:	462b      	mov	r3, r5
 8015c1e:	4622      	mov	r2, r4
 8015c20:	f004 fdaa 	bl	801a778 <ip4_output_if>
 8015c24:	4603      	mov	r3, r0
 8015c26:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3720      	adds	r7, #32
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bdb0      	pop	{r4, r5, r7, pc}
 8015c34:	08020c78 	.word	0x08020c78
 8015c38:	08021298 	.word	0x08021298
 8015c3c:	08020ccc 	.word	0x08020ccc
 8015c40:	080212b8 	.word	0x080212b8
 8015c44:	080212d8 	.word	0x080212d8
 8015c48:	20013d48 	.word	0x20013d48
 8015c4c:	080212fc 	.word	0x080212fc

08015c50 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015c50:	b5b0      	push	{r4, r5, r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d106      	bne.n	8015c6c <tcp_rexmit_rto_prepare+0x1c>
 8015c5e:	4b36      	ldr	r3, [pc, #216]	@ (8015d38 <tcp_rexmit_rto_prepare+0xe8>)
 8015c60:	f240 6263 	movw	r2, #1635	@ 0x663
 8015c64:	4935      	ldr	r1, [pc, #212]	@ (8015d3c <tcp_rexmit_rto_prepare+0xec>)
 8015c66:	4836      	ldr	r0, [pc, #216]	@ (8015d40 <tcp_rexmit_rto_prepare+0xf0>)
 8015c68:	f006 fde2 	bl	801c830 <iprintf>

  if (pcb->unacked == NULL) {
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d102      	bne.n	8015c7a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015c74:	f06f 0305 	mvn.w	r3, #5
 8015c78:	e059      	b.n	8015d2e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c7e:	60fb      	str	r3, [r7, #12]
 8015c80:	e00b      	b.n	8015c9a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015c82:	68f8      	ldr	r0, [r7, #12]
 8015c84:	f7ff fed2 	bl	8015a2c <tcp_output_segment_busy>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d002      	beq.n	8015c94 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015c8e:	f06f 0305 	mvn.w	r3, #5
 8015c92:	e04c      	b.n	8015d2e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	60fb      	str	r3, [r7, #12]
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d1ef      	bne.n	8015c82 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015ca2:	68f8      	ldr	r0, [r7, #12]
 8015ca4:	f7ff fec2 	bl	8015a2c <tcp_output_segment_busy>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d002      	beq.n	8015cb4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015cae:	f06f 0305 	mvn.w	r3, #5
 8015cb2:	e03c      	b.n	8015d2e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d104      	bne.n	8015cce <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	895a      	ldrh	r2, [r3, #10]
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2200      	movs	r2, #0
 8015cda:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	8b5b      	ldrh	r3, [r3, #26]
 8015ce0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015ce4:	b29a      	uxth	r2, r3
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	691b      	ldr	r3, [r3, #16]
 8015cee:	685b      	ldr	r3, [r3, #4]
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f7f9 fa52 	bl	800f19a <lwip_htonl>
 8015cf6:	4604      	mov	r4, r0
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	891b      	ldrh	r3, [r3, #8]
 8015cfc:	461d      	mov	r5, r3
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	691b      	ldr	r3, [r3, #16]
 8015d02:	899b      	ldrh	r3, [r3, #12]
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	4618      	mov	r0, r3
 8015d08:	f7f9 fa32 	bl	800f170 <lwip_htons>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	b2db      	uxtb	r3, r3
 8015d10:	f003 0303 	and.w	r3, r3, #3
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d001      	beq.n	8015d1c <tcp_rexmit_rto_prepare+0xcc>
 8015d18:	2301      	movs	r3, #1
 8015d1a:	e000      	b.n	8015d1e <tcp_rexmit_rto_prepare+0xce>
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	442b      	add	r3, r5
 8015d20:	18e2      	adds	r2, r4, r3
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2200      	movs	r2, #0
 8015d2a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8015d2c:	2300      	movs	r3, #0
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3710      	adds	r7, #16
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bdb0      	pop	{r4, r5, r7, pc}
 8015d36:	bf00      	nop
 8015d38:	08020c78 	.word	0x08020c78
 8015d3c:	08021310 	.word	0x08021310
 8015d40:	08020ccc 	.word	0x08020ccc

08015d44 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d106      	bne.n	8015d60 <tcp_rexmit_rto_commit+0x1c>
 8015d52:	4b0d      	ldr	r3, [pc, #52]	@ (8015d88 <tcp_rexmit_rto_commit+0x44>)
 8015d54:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015d58:	490c      	ldr	r1, [pc, #48]	@ (8015d8c <tcp_rexmit_rto_commit+0x48>)
 8015d5a:	480d      	ldr	r0, [pc, #52]	@ (8015d90 <tcp_rexmit_rto_commit+0x4c>)
 8015d5c:	f006 fd68 	bl	801c830 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015d66:	2bff      	cmp	r3, #255	@ 0xff
 8015d68:	d007      	beq.n	8015d7a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015d70:	3301      	adds	r3, #1
 8015d72:	b2da      	uxtb	r2, r3
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f7ff fc60 	bl	8015640 <tcp_output>
}
 8015d80:	bf00      	nop
 8015d82:	3708      	adds	r7, #8
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}
 8015d88:	08020c78 	.word	0x08020c78
 8015d8c:	08021334 	.word	0x08021334
 8015d90:	08020ccc 	.word	0x08020ccc

08015d94 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d106      	bne.n	8015db0 <tcp_rexmit_rto+0x1c>
 8015da2:	4b0a      	ldr	r3, [pc, #40]	@ (8015dcc <tcp_rexmit_rto+0x38>)
 8015da4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8015da8:	4909      	ldr	r1, [pc, #36]	@ (8015dd0 <tcp_rexmit_rto+0x3c>)
 8015daa:	480a      	ldr	r0, [pc, #40]	@ (8015dd4 <tcp_rexmit_rto+0x40>)
 8015dac:	f006 fd40 	bl	801c830 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015db0:	6878      	ldr	r0, [r7, #4]
 8015db2:	f7ff ff4d 	bl	8015c50 <tcp_rexmit_rto_prepare>
 8015db6:	4603      	mov	r3, r0
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d102      	bne.n	8015dc2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015dbc:	6878      	ldr	r0, [r7, #4]
 8015dbe:	f7ff ffc1 	bl	8015d44 <tcp_rexmit_rto_commit>
  }
}
 8015dc2:	bf00      	nop
 8015dc4:	3708      	adds	r7, #8
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}
 8015dca:	bf00      	nop
 8015dcc:	08020c78 	.word	0x08020c78
 8015dd0:	08021358 	.word	0x08021358
 8015dd4:	08020ccc 	.word	0x08020ccc

08015dd8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015dd8:	b590      	push	{r4, r7, lr}
 8015dda:	b085      	sub	sp, #20
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d106      	bne.n	8015df4 <tcp_rexmit+0x1c>
 8015de6:	4b2f      	ldr	r3, [pc, #188]	@ (8015ea4 <tcp_rexmit+0xcc>)
 8015de8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8015dec:	492e      	ldr	r1, [pc, #184]	@ (8015ea8 <tcp_rexmit+0xd0>)
 8015dee:	482f      	ldr	r0, [pc, #188]	@ (8015eac <tcp_rexmit+0xd4>)
 8015df0:	f006 fd1e 	bl	801c830 <iprintf>

  if (pcb->unacked == NULL) {
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d102      	bne.n	8015e02 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015dfc:	f06f 0305 	mvn.w	r3, #5
 8015e00:	e04c      	b.n	8015e9c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015e06:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015e08:	68b8      	ldr	r0, [r7, #8]
 8015e0a:	f7ff fe0f 	bl	8015a2c <tcp_output_segment_busy>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d002      	beq.n	8015e1a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015e14:	f06f 0305 	mvn.w	r3, #5
 8015e18:	e040      	b.n	8015e9c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015e1a:	68bb      	ldr	r3, [r7, #8]
 8015e1c:	681a      	ldr	r2, [r3, #0]
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	336c      	adds	r3, #108	@ 0x6c
 8015e26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015e28:	e002      	b.n	8015e30 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d011      	beq.n	8015e5c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	691b      	ldr	r3, [r3, #16]
 8015e3e:	685b      	ldr	r3, [r3, #4]
 8015e40:	4618      	mov	r0, r3
 8015e42:	f7f9 f9aa 	bl	800f19a <lwip_htonl>
 8015e46:	4604      	mov	r4, r0
 8015e48:	68bb      	ldr	r3, [r7, #8]
 8015e4a:	691b      	ldr	r3, [r3, #16]
 8015e4c:	685b      	ldr	r3, [r3, #4]
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7f9 f9a3 	bl	800f19a <lwip_htonl>
 8015e54:	4603      	mov	r3, r0
 8015e56:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	dbe6      	blt.n	8015e2a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	681a      	ldr	r2, [r3, #0]
 8015e60:	68bb      	ldr	r3, [r7, #8]
 8015e62:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	68ba      	ldr	r2, [r7, #8]
 8015e68:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015e6a:	68bb      	ldr	r3, [r7, #8]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d103      	bne.n	8015e7a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2200      	movs	r2, #0
 8015e76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015e80:	2bff      	cmp	r3, #255	@ 0xff
 8015e82:	d007      	beq.n	8015e94 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015e8a:	3301      	adds	r3, #1
 8015e8c:	b2da      	uxtb	r2, r3
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	2200      	movs	r2, #0
 8015e98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015e9a:	2300      	movs	r3, #0
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	3714      	adds	r7, #20
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd90      	pop	{r4, r7, pc}
 8015ea4:	08020c78 	.word	0x08020c78
 8015ea8:	08021374 	.word	0x08021374
 8015eac:	08020ccc 	.word	0x08020ccc

08015eb0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b082      	sub	sp, #8
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d106      	bne.n	8015ecc <tcp_rexmit_fast+0x1c>
 8015ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8015f68 <tcp_rexmit_fast+0xb8>)
 8015ec0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8015ec4:	4929      	ldr	r1, [pc, #164]	@ (8015f6c <tcp_rexmit_fast+0xbc>)
 8015ec6:	482a      	ldr	r0, [pc, #168]	@ (8015f70 <tcp_rexmit_fast+0xc0>)
 8015ec8:	f006 fcb2 	bl	801c830 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d044      	beq.n	8015f5e <tcp_rexmit_fast+0xae>
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	8b5b      	ldrh	r3, [r3, #26]
 8015ed8:	f003 0304 	and.w	r3, r3, #4
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d13e      	bne.n	8015f5e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015ee0:	6878      	ldr	r0, [r7, #4]
 8015ee2:	f7ff ff79 	bl	8015dd8 <tcp_rexmit>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d138      	bne.n	8015f5e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015ef8:	4293      	cmp	r3, r2
 8015efa:	bf28      	it	cs
 8015efc:	4613      	movcs	r3, r2
 8015efe:	b29b      	uxth	r3, r3
 8015f00:	0fda      	lsrs	r2, r3, #31
 8015f02:	4413      	add	r3, r2
 8015f04:	105b      	asrs	r3, r3, #1
 8015f06:	b29a      	uxth	r2, r3
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015f14:	461a      	mov	r2, r3
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f1a:	005b      	lsls	r3, r3, #1
 8015f1c:	429a      	cmp	r2, r3
 8015f1e:	d206      	bcs.n	8015f2e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f24:	005b      	lsls	r3, r3, #1
 8015f26:	b29a      	uxth	r2, r3
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f38:	4619      	mov	r1, r3
 8015f3a:	0049      	lsls	r1, r1, #1
 8015f3c:	440b      	add	r3, r1
 8015f3e:	b29b      	uxth	r3, r3
 8015f40:	4413      	add	r3, r2
 8015f42:	b29a      	uxth	r2, r3
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	8b5b      	ldrh	r3, [r3, #26]
 8015f4e:	f043 0304 	orr.w	r3, r3, #4
 8015f52:	b29a      	uxth	r2, r3
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8015f5e:	bf00      	nop
 8015f60:	3708      	adds	r7, #8
 8015f62:	46bd      	mov	sp, r7
 8015f64:	bd80      	pop	{r7, pc}
 8015f66:	bf00      	nop
 8015f68:	08020c78 	.word	0x08020c78
 8015f6c:	0802138c 	.word	0x0802138c
 8015f70:	08020ccc 	.word	0x08020ccc

08015f74 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b086      	sub	sp, #24
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	607b      	str	r3, [r7, #4]
 8015f7e:	460b      	mov	r3, r1
 8015f80:	817b      	strh	r3, [r7, #10]
 8015f82:	4613      	mov	r3, r2
 8015f84:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015f86:	897a      	ldrh	r2, [r7, #10]
 8015f88:	893b      	ldrh	r3, [r7, #8]
 8015f8a:	4413      	add	r3, r2
 8015f8c:	b29b      	uxth	r3, r3
 8015f8e:	3314      	adds	r3, #20
 8015f90:	b29b      	uxth	r3, r3
 8015f92:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015f96:	4619      	mov	r1, r3
 8015f98:	2022      	movs	r0, #34	@ 0x22
 8015f9a:	f7fa fb23 	bl	80105e4 <pbuf_alloc>
 8015f9e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d04d      	beq.n	8016042 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015fa6:	897b      	ldrh	r3, [r7, #10]
 8015fa8:	3313      	adds	r3, #19
 8015faa:	697a      	ldr	r2, [r7, #20]
 8015fac:	8952      	ldrh	r2, [r2, #10]
 8015fae:	4293      	cmp	r3, r2
 8015fb0:	db06      	blt.n	8015fc0 <tcp_output_alloc_header_common+0x4c>
 8015fb2:	4b26      	ldr	r3, [pc, #152]	@ (801604c <tcp_output_alloc_header_common+0xd8>)
 8015fb4:	f240 7223 	movw	r2, #1827	@ 0x723
 8015fb8:	4925      	ldr	r1, [pc, #148]	@ (8016050 <tcp_output_alloc_header_common+0xdc>)
 8015fba:	4826      	ldr	r0, [pc, #152]	@ (8016054 <tcp_output_alloc_header_common+0xe0>)
 8015fbc:	f006 fc38 	bl	801c830 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015fc6:	8c3b      	ldrh	r3, [r7, #32]
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f7f9 f8d1 	bl	800f170 <lwip_htons>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	461a      	mov	r2, r3
 8015fd2:	693b      	ldr	r3, [r7, #16]
 8015fd4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015fd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7f9 f8c9 	bl	800f170 <lwip_htons>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	461a      	mov	r2, r3
 8015fe2:	693b      	ldr	r3, [r7, #16]
 8015fe4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015fe6:	693b      	ldr	r3, [r7, #16]
 8015fe8:	687a      	ldr	r2, [r7, #4]
 8015fea:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015fec:	68f8      	ldr	r0, [r7, #12]
 8015fee:	f7f9 f8d4 	bl	800f19a <lwip_htonl>
 8015ff2:	4602      	mov	r2, r0
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015ff8:	897b      	ldrh	r3, [r7, #10]
 8015ffa:	089b      	lsrs	r3, r3, #2
 8015ffc:	b29b      	uxth	r3, r3
 8015ffe:	3305      	adds	r3, #5
 8016000:	b29b      	uxth	r3, r3
 8016002:	031b      	lsls	r3, r3, #12
 8016004:	b29a      	uxth	r2, r3
 8016006:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801600a:	b29b      	uxth	r3, r3
 801600c:	4313      	orrs	r3, r2
 801600e:	b29b      	uxth	r3, r3
 8016010:	4618      	mov	r0, r3
 8016012:	f7f9 f8ad 	bl	800f170 <lwip_htons>
 8016016:	4603      	mov	r3, r0
 8016018:	461a      	mov	r2, r3
 801601a:	693b      	ldr	r3, [r7, #16]
 801601c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801601e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016020:	4618      	mov	r0, r3
 8016022:	f7f9 f8a5 	bl	800f170 <lwip_htons>
 8016026:	4603      	mov	r3, r0
 8016028:	461a      	mov	r2, r3
 801602a:	693b      	ldr	r3, [r7, #16]
 801602c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801602e:	693b      	ldr	r3, [r7, #16]
 8016030:	2200      	movs	r2, #0
 8016032:	741a      	strb	r2, [r3, #16]
 8016034:	2200      	movs	r2, #0
 8016036:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	2200      	movs	r2, #0
 801603c:	749a      	strb	r2, [r3, #18]
 801603e:	2200      	movs	r2, #0
 8016040:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016042:	697b      	ldr	r3, [r7, #20]
}
 8016044:	4618      	mov	r0, r3
 8016046:	3718      	adds	r7, #24
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}
 801604c:	08020c78 	.word	0x08020c78
 8016050:	080213ac 	.word	0x080213ac
 8016054:	08020ccc 	.word	0x08020ccc

08016058 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016058:	b5b0      	push	{r4, r5, r7, lr}
 801605a:	b08a      	sub	sp, #40	@ 0x28
 801605c:	af04      	add	r7, sp, #16
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	607b      	str	r3, [r7, #4]
 8016062:	460b      	mov	r3, r1
 8016064:	817b      	strh	r3, [r7, #10]
 8016066:	4613      	mov	r3, r2
 8016068:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d106      	bne.n	801607e <tcp_output_alloc_header+0x26>
 8016070:	4b15      	ldr	r3, [pc, #84]	@ (80160c8 <tcp_output_alloc_header+0x70>)
 8016072:	f240 7242 	movw	r2, #1858	@ 0x742
 8016076:	4915      	ldr	r1, [pc, #84]	@ (80160cc <tcp_output_alloc_header+0x74>)
 8016078:	4815      	ldr	r0, [pc, #84]	@ (80160d0 <tcp_output_alloc_header+0x78>)
 801607a:	f006 fbd9 	bl	801c830 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	8adb      	ldrh	r3, [r3, #22]
 8016086:	68fa      	ldr	r2, [r7, #12]
 8016088:	8b12      	ldrh	r2, [r2, #24]
 801608a:	68f9      	ldr	r1, [r7, #12]
 801608c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801608e:	893d      	ldrh	r5, [r7, #8]
 8016090:	897c      	ldrh	r4, [r7, #10]
 8016092:	9103      	str	r1, [sp, #12]
 8016094:	2110      	movs	r1, #16
 8016096:	9102      	str	r1, [sp, #8]
 8016098:	9201      	str	r2, [sp, #4]
 801609a:	9300      	str	r3, [sp, #0]
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	462a      	mov	r2, r5
 80160a0:	4621      	mov	r1, r4
 80160a2:	f7ff ff67 	bl	8015f74 <tcp_output_alloc_header_common>
 80160a6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80160a8:	697b      	ldr	r3, [r7, #20]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d006      	beq.n	80160bc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160b2:	68fa      	ldr	r2, [r7, #12]
 80160b4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80160b6:	441a      	add	r2, r3
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80160bc:	697b      	ldr	r3, [r7, #20]
}
 80160be:	4618      	mov	r0, r3
 80160c0:	3718      	adds	r7, #24
 80160c2:	46bd      	mov	sp, r7
 80160c4:	bdb0      	pop	{r4, r5, r7, pc}
 80160c6:	bf00      	nop
 80160c8:	08020c78 	.word	0x08020c78
 80160cc:	080213dc 	.word	0x080213dc
 80160d0:	08020ccc 	.word	0x08020ccc

080160d4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b088      	sub	sp, #32
 80160d8:	af00      	add	r7, sp, #0
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	60b9      	str	r1, [r7, #8]
 80160de:	4611      	mov	r1, r2
 80160e0:	461a      	mov	r2, r3
 80160e2:	460b      	mov	r3, r1
 80160e4:	71fb      	strb	r3, [r7, #7]
 80160e6:	4613      	mov	r3, r2
 80160e8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80160ea:	2300      	movs	r3, #0
 80160ec:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d106      	bne.n	8016102 <tcp_output_fill_options+0x2e>
 80160f4:	4b12      	ldr	r3, [pc, #72]	@ (8016140 <tcp_output_fill_options+0x6c>)
 80160f6:	f240 7256 	movw	r2, #1878	@ 0x756
 80160fa:	4912      	ldr	r1, [pc, #72]	@ (8016144 <tcp_output_fill_options+0x70>)
 80160fc:	4812      	ldr	r0, [pc, #72]	@ (8016148 <tcp_output_fill_options+0x74>)
 80160fe:	f006 fb97 	bl	801c830 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016102:	68bb      	ldr	r3, [r7, #8]
 8016104:	685b      	ldr	r3, [r3, #4]
 8016106:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016108:	69bb      	ldr	r3, [r7, #24]
 801610a:	3314      	adds	r3, #20
 801610c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801610e:	8bfb      	ldrh	r3, [r7, #30]
 8016110:	009b      	lsls	r3, r3, #2
 8016112:	461a      	mov	r2, r3
 8016114:	79fb      	ldrb	r3, [r7, #7]
 8016116:	009b      	lsls	r3, r3, #2
 8016118:	f003 0304 	and.w	r3, r3, #4
 801611c:	4413      	add	r3, r2
 801611e:	3314      	adds	r3, #20
 8016120:	69ba      	ldr	r2, [r7, #24]
 8016122:	4413      	add	r3, r2
 8016124:	697a      	ldr	r2, [r7, #20]
 8016126:	429a      	cmp	r2, r3
 8016128:	d006      	beq.n	8016138 <tcp_output_fill_options+0x64>
 801612a:	4b05      	ldr	r3, [pc, #20]	@ (8016140 <tcp_output_fill_options+0x6c>)
 801612c:	f240 7275 	movw	r2, #1909	@ 0x775
 8016130:	4906      	ldr	r1, [pc, #24]	@ (801614c <tcp_output_fill_options+0x78>)
 8016132:	4805      	ldr	r0, [pc, #20]	@ (8016148 <tcp_output_fill_options+0x74>)
 8016134:	f006 fb7c 	bl	801c830 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016138:	bf00      	nop
 801613a:	3720      	adds	r7, #32
 801613c:	46bd      	mov	sp, r7
 801613e:	bd80      	pop	{r7, pc}
 8016140:	08020c78 	.word	0x08020c78
 8016144:	08021404 	.word	0x08021404
 8016148:	08020ccc 	.word	0x08020ccc
 801614c:	080212fc 	.word	0x080212fc

08016150 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016150:	b580      	push	{r7, lr}
 8016152:	b08c      	sub	sp, #48	@ 0x30
 8016154:	af04      	add	r7, sp, #16
 8016156:	60f8      	str	r0, [r7, #12]
 8016158:	60b9      	str	r1, [r7, #8]
 801615a:	607a      	str	r2, [r7, #4]
 801615c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d106      	bne.n	8016172 <tcp_output_control_segment+0x22>
 8016164:	4b24      	ldr	r3, [pc, #144]	@ (80161f8 <tcp_output_control_segment+0xa8>)
 8016166:	f240 7287 	movw	r2, #1927	@ 0x787
 801616a:	4924      	ldr	r1, [pc, #144]	@ (80161fc <tcp_output_control_segment+0xac>)
 801616c:	4824      	ldr	r0, [pc, #144]	@ (8016200 <tcp_output_control_segment+0xb0>)
 801616e:	f006 fb5f 	bl	801c830 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016172:	683a      	ldr	r2, [r7, #0]
 8016174:	6879      	ldr	r1, [r7, #4]
 8016176:	68f8      	ldr	r0, [r7, #12]
 8016178:	f7fe ff1c 	bl	8014fb4 <tcp_route>
 801617c:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 801617e:	69bb      	ldr	r3, [r7, #24]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d102      	bne.n	801618a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016184:	23fc      	movs	r3, #252	@ 0xfc
 8016186:	77fb      	strb	r3, [r7, #31]
 8016188:	e02c      	b.n	80161e4 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	685b      	ldr	r3, [r3, #4]
 801618e:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8016190:	68bb      	ldr	r3, [r7, #8]
 8016192:	891a      	ldrh	r2, [r3, #8]
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	9300      	str	r3, [sp, #0]
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	2106      	movs	r1, #6
 801619c:	68b8      	ldr	r0, [r7, #8]
 801619e:	f7f9 f919 	bl	800f3d4 <ip_chksum_pseudo>
 80161a2:	4603      	mov	r3, r0
 80161a4:	461a      	mov	r2, r3
 80161a6:	697b      	ldr	r3, [r7, #20]
 80161a8:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d006      	beq.n	80161be <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	7adb      	ldrb	r3, [r3, #11]
 80161b4:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	7a9b      	ldrb	r3, [r3, #10]
 80161ba:	777b      	strb	r3, [r7, #29]
 80161bc:	e003      	b.n	80161c6 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80161be:	23ff      	movs	r3, #255	@ 0xff
 80161c0:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 80161c2:	2300      	movs	r3, #0
 80161c4:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80161c6:	7fba      	ldrb	r2, [r7, #30]
 80161c8:	69bb      	ldr	r3, [r7, #24]
 80161ca:	9302      	str	r3, [sp, #8]
 80161cc:	2306      	movs	r3, #6
 80161ce:	9301      	str	r3, [sp, #4]
 80161d0:	7f7b      	ldrb	r3, [r7, #29]
 80161d2:	9300      	str	r3, [sp, #0]
 80161d4:	4613      	mov	r3, r2
 80161d6:	683a      	ldr	r2, [r7, #0]
 80161d8:	6879      	ldr	r1, [r7, #4]
 80161da:	68b8      	ldr	r0, [r7, #8]
 80161dc:	f004 facc 	bl	801a778 <ip4_output_if>
 80161e0:	4603      	mov	r3, r0
 80161e2:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80161e4:	68b8      	ldr	r0, [r7, #8]
 80161e6:	f7fa fce5 	bl	8010bb4 <pbuf_free>
  return err;
 80161ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80161ee:	4618      	mov	r0, r3
 80161f0:	3720      	adds	r7, #32
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}
 80161f6:	bf00      	nop
 80161f8:	08020c78 	.word	0x08020c78
 80161fc:	0802142c 	.word	0x0802142c
 8016200:	08020ccc 	.word	0x08020ccc

08016204 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016204:	b590      	push	{r4, r7, lr}
 8016206:	b08b      	sub	sp, #44	@ 0x2c
 8016208:	af04      	add	r7, sp, #16
 801620a:	60f8      	str	r0, [r7, #12]
 801620c:	60b9      	str	r1, [r7, #8]
 801620e:	607a      	str	r2, [r7, #4]
 8016210:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016212:	683b      	ldr	r3, [r7, #0]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d106      	bne.n	8016226 <tcp_rst+0x22>
 8016218:	4b1f      	ldr	r3, [pc, #124]	@ (8016298 <tcp_rst+0x94>)
 801621a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801621e:	491f      	ldr	r1, [pc, #124]	@ (801629c <tcp_rst+0x98>)
 8016220:	481f      	ldr	r0, [pc, #124]	@ (80162a0 <tcp_rst+0x9c>)
 8016222:	f006 fb05 	bl	801c830 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016228:	2b00      	cmp	r3, #0
 801622a:	d106      	bne.n	801623a <tcp_rst+0x36>
 801622c:	4b1a      	ldr	r3, [pc, #104]	@ (8016298 <tcp_rst+0x94>)
 801622e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8016232:	491c      	ldr	r1, [pc, #112]	@ (80162a4 <tcp_rst+0xa0>)
 8016234:	481a      	ldr	r0, [pc, #104]	@ (80162a0 <tcp_rst+0x9c>)
 8016236:	f006 fafb 	bl	801c830 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801623a:	2300      	movs	r3, #0
 801623c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801623e:	f24a 032d 	movw	r3, #41005	@ 0xa02d
 8016242:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016244:	7dfb      	ldrb	r3, [r7, #23]
 8016246:	b29c      	uxth	r4, r3
 8016248:	68b8      	ldr	r0, [r7, #8]
 801624a:	f7f8 ffa6 	bl	800f19a <lwip_htonl>
 801624e:	4602      	mov	r2, r0
 8016250:	8abb      	ldrh	r3, [r7, #20]
 8016252:	9303      	str	r3, [sp, #12]
 8016254:	2314      	movs	r3, #20
 8016256:	9302      	str	r3, [sp, #8]
 8016258:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801625a:	9301      	str	r3, [sp, #4]
 801625c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801625e:	9300      	str	r3, [sp, #0]
 8016260:	4613      	mov	r3, r2
 8016262:	2200      	movs	r2, #0
 8016264:	4621      	mov	r1, r4
 8016266:	6878      	ldr	r0, [r7, #4]
 8016268:	f7ff fe84 	bl	8015f74 <tcp_output_alloc_header_common>
 801626c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801626e:	693b      	ldr	r3, [r7, #16]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d00c      	beq.n	801628e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016274:	7dfb      	ldrb	r3, [r7, #23]
 8016276:	2200      	movs	r2, #0
 8016278:	6939      	ldr	r1, [r7, #16]
 801627a:	68f8      	ldr	r0, [r7, #12]
 801627c:	f7ff ff2a 	bl	80160d4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016282:	683a      	ldr	r2, [r7, #0]
 8016284:	6939      	ldr	r1, [r7, #16]
 8016286:	68f8      	ldr	r0, [r7, #12]
 8016288:	f7ff ff62 	bl	8016150 <tcp_output_control_segment>
 801628c:	e000      	b.n	8016290 <tcp_rst+0x8c>
    return;
 801628e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016290:	371c      	adds	r7, #28
 8016292:	46bd      	mov	sp, r7
 8016294:	bd90      	pop	{r4, r7, pc}
 8016296:	bf00      	nop
 8016298:	08020c78 	.word	0x08020c78
 801629c:	08021458 	.word	0x08021458
 80162a0:	08020ccc 	.word	0x08020ccc
 80162a4:	08021474 	.word	0x08021474

080162a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80162a8:	b590      	push	{r4, r7, lr}
 80162aa:	b087      	sub	sp, #28
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80162b0:	2300      	movs	r3, #0
 80162b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80162b4:	2300      	movs	r3, #0
 80162b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d106      	bne.n	80162cc <tcp_send_empty_ack+0x24>
 80162be:	4b28      	ldr	r3, [pc, #160]	@ (8016360 <tcp_send_empty_ack+0xb8>)
 80162c0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80162c4:	4927      	ldr	r1, [pc, #156]	@ (8016364 <tcp_send_empty_ack+0xbc>)
 80162c6:	4828      	ldr	r0, [pc, #160]	@ (8016368 <tcp_send_empty_ack+0xc0>)
 80162c8:	f006 fab2 	bl	801c830 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80162cc:	7dfb      	ldrb	r3, [r7, #23]
 80162ce:	009b      	lsls	r3, r3, #2
 80162d0:	b2db      	uxtb	r3, r3
 80162d2:	f003 0304 	and.w	r3, r3, #4
 80162d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80162d8:	7d7b      	ldrb	r3, [r7, #21]
 80162da:	b29c      	uxth	r4, r3
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80162e0:	4618      	mov	r0, r3
 80162e2:	f7f8 ff5a 	bl	800f19a <lwip_htonl>
 80162e6:	4603      	mov	r3, r0
 80162e8:	2200      	movs	r2, #0
 80162ea:	4621      	mov	r1, r4
 80162ec:	6878      	ldr	r0, [r7, #4]
 80162ee:	f7ff feb3 	bl	8016058 <tcp_output_alloc_header>
 80162f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80162f4:	693b      	ldr	r3, [r7, #16]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d109      	bne.n	801630e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	8b5b      	ldrh	r3, [r3, #26]
 80162fe:	f043 0303 	orr.w	r3, r3, #3
 8016302:	b29a      	uxth	r2, r3
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016308:	f06f 0301 	mvn.w	r3, #1
 801630c:	e023      	b.n	8016356 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801630e:	7dbb      	ldrb	r3, [r7, #22]
 8016310:	7dfa      	ldrb	r2, [r7, #23]
 8016312:	6939      	ldr	r1, [r7, #16]
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f7ff fedd 	bl	80160d4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801631a:	687a      	ldr	r2, [r7, #4]
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	3304      	adds	r3, #4
 8016320:	6939      	ldr	r1, [r7, #16]
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f7ff ff14 	bl	8016150 <tcp_output_control_segment>
 8016328:	4603      	mov	r3, r0
 801632a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801632c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d007      	beq.n	8016344 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	8b5b      	ldrh	r3, [r3, #26]
 8016338:	f043 0303 	orr.w	r3, r3, #3
 801633c:	b29a      	uxth	r2, r3
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	835a      	strh	r2, [r3, #26]
 8016342:	e006      	b.n	8016352 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	8b5b      	ldrh	r3, [r3, #26]
 8016348:	f023 0303 	bic.w	r3, r3, #3
 801634c:	b29a      	uxth	r2, r3
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016352:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016356:	4618      	mov	r0, r3
 8016358:	371c      	adds	r7, #28
 801635a:	46bd      	mov	sp, r7
 801635c:	bd90      	pop	{r4, r7, pc}
 801635e:	bf00      	nop
 8016360:	08020c78 	.word	0x08020c78
 8016364:	08021490 	.word	0x08021490
 8016368:	08020ccc 	.word	0x08020ccc

0801636c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801636c:	b590      	push	{r4, r7, lr}
 801636e:	b085      	sub	sp, #20
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016374:	2300      	movs	r3, #0
 8016376:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d106      	bne.n	801638c <tcp_keepalive+0x20>
 801637e:	4b18      	ldr	r3, [pc, #96]	@ (80163e0 <tcp_keepalive+0x74>)
 8016380:	f640 0224 	movw	r2, #2084	@ 0x824
 8016384:	4917      	ldr	r1, [pc, #92]	@ (80163e4 <tcp_keepalive+0x78>)
 8016386:	4818      	ldr	r0, [pc, #96]	@ (80163e8 <tcp_keepalive+0x7c>)
 8016388:	f006 fa52 	bl	801c830 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801638c:	7abb      	ldrb	r3, [r7, #10]
 801638e:	b29c      	uxth	r4, r3
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016394:	3b01      	subs	r3, #1
 8016396:	4618      	mov	r0, r3
 8016398:	f7f8 feff 	bl	800f19a <lwip_htonl>
 801639c:	4603      	mov	r3, r0
 801639e:	2200      	movs	r2, #0
 80163a0:	4621      	mov	r1, r4
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f7ff fe58 	bl	8016058 <tcp_output_alloc_header>
 80163a8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d102      	bne.n	80163b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80163b0:	f04f 33ff 	mov.w	r3, #4294967295
 80163b4:	e010      	b.n	80163d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80163b6:	7abb      	ldrb	r3, [r7, #10]
 80163b8:	2200      	movs	r2, #0
 80163ba:	68f9      	ldr	r1, [r7, #12]
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f7ff fe89 	bl	80160d4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80163c2:	687a      	ldr	r2, [r7, #4]
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	3304      	adds	r3, #4
 80163c8:	68f9      	ldr	r1, [r7, #12]
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	f7ff fec0 	bl	8016150 <tcp_output_control_segment>
 80163d0:	4603      	mov	r3, r0
 80163d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80163d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80163d8:	4618      	mov	r0, r3
 80163da:	3714      	adds	r7, #20
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd90      	pop	{r4, r7, pc}
 80163e0:	08020c78 	.word	0x08020c78
 80163e4:	080214b0 	.word	0x080214b0
 80163e8:	08020ccc 	.word	0x08020ccc

080163ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80163ec:	b590      	push	{r4, r7, lr}
 80163ee:	b08b      	sub	sp, #44	@ 0x2c
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80163f4:	2300      	movs	r3, #0
 80163f6:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d106      	bne.n	801640c <tcp_zero_window_probe+0x20>
 80163fe:	4b4d      	ldr	r3, [pc, #308]	@ (8016534 <tcp_zero_window_probe+0x148>)
 8016400:	f640 024f 	movw	r2, #2127	@ 0x84f
 8016404:	494c      	ldr	r1, [pc, #304]	@ (8016538 <tcp_zero_window_probe+0x14c>)
 8016406:	484d      	ldr	r0, [pc, #308]	@ (801653c <tcp_zero_window_probe+0x150>)
 8016408:	f006 fa12 	bl	801c830 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016410:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 8016412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016414:	2b00      	cmp	r3, #0
 8016416:	d101      	bne.n	801641c <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016418:	2300      	movs	r3, #0
 801641a:	e087      	b.n	801652c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8016422:	2bff      	cmp	r3, #255	@ 0xff
 8016424:	d007      	beq.n	8016436 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801642c:	3301      	adds	r3, #1
 801642e:	b2da      	uxtb	r2, r3
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016438:	691b      	ldr	r3, [r3, #16]
 801643a:	899b      	ldrh	r3, [r3, #12]
 801643c:	b29b      	uxth	r3, r3
 801643e:	4618      	mov	r0, r3
 8016440:	f7f8 fe96 	bl	800f170 <lwip_htons>
 8016444:	4603      	mov	r3, r0
 8016446:	b2db      	uxtb	r3, r3
 8016448:	f003 0301 	and.w	r3, r3, #1
 801644c:	2b00      	cmp	r3, #0
 801644e:	d005      	beq.n	801645c <tcp_zero_window_probe+0x70>
 8016450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016452:	891b      	ldrh	r3, [r3, #8]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d101      	bne.n	801645c <tcp_zero_window_probe+0x70>
 8016458:	2301      	movs	r3, #1
 801645a:	e000      	b.n	801645e <tcp_zero_window_probe+0x72>
 801645c:	2300      	movs	r3, #0
 801645e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016462:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016466:	2b00      	cmp	r3, #0
 8016468:	bf0c      	ite	eq
 801646a:	2301      	moveq	r3, #1
 801646c:	2300      	movne	r3, #0
 801646e:	b2db      	uxtb	r3, r3
 8016470:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016472:	7cfb      	ldrb	r3, [r7, #19]
 8016474:	b299      	uxth	r1, r3
 8016476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016478:	691b      	ldr	r3, [r3, #16]
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	8c3a      	ldrh	r2, [r7, #32]
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f7ff fdea 	bl	8016058 <tcp_output_alloc_header>
 8016484:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8016486:	69fb      	ldr	r3, [r7, #28]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d102      	bne.n	8016492 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801648c:	f04f 33ff 	mov.w	r3, #4294967295
 8016490:	e04c      	b.n	801652c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016492:	69fb      	ldr	r3, [r7, #28]
 8016494:	685b      	ldr	r3, [r3, #4]
 8016496:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8016498:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801649c:	2b00      	cmp	r3, #0
 801649e:	d011      	beq.n	80164c4 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80164a0:	69bb      	ldr	r3, [r7, #24]
 80164a2:	899b      	ldrh	r3, [r3, #12]
 80164a4:	b29b      	uxth	r3, r3
 80164a6:	b21b      	sxth	r3, r3
 80164a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80164ac:	b21c      	sxth	r4, r3
 80164ae:	2011      	movs	r0, #17
 80164b0:	f7f8 fe5e 	bl	800f170 <lwip_htons>
 80164b4:	4603      	mov	r3, r0
 80164b6:	b21b      	sxth	r3, r3
 80164b8:	4323      	orrs	r3, r4
 80164ba:	b21b      	sxth	r3, r3
 80164bc:	b29a      	uxth	r2, r3
 80164be:	69bb      	ldr	r3, [r7, #24]
 80164c0:	819a      	strh	r2, [r3, #12]
 80164c2:	e010      	b.n	80164e6 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80164c4:	69fb      	ldr	r3, [r7, #28]
 80164c6:	685b      	ldr	r3, [r3, #4]
 80164c8:	3314      	adds	r3, #20
 80164ca:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80164cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164ce:	6858      	ldr	r0, [r3, #4]
 80164d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164d2:	685b      	ldr	r3, [r3, #4]
 80164d4:	891a      	ldrh	r2, [r3, #8]
 80164d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164d8:	891b      	ldrh	r3, [r3, #8]
 80164da:	1ad3      	subs	r3, r2, r3
 80164dc:	b29b      	uxth	r3, r3
 80164de:	2201      	movs	r2, #1
 80164e0:	6979      	ldr	r1, [r7, #20]
 80164e2:	f7fa fd6d 	bl	8010fc0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80164e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164e8:	691b      	ldr	r3, [r3, #16]
 80164ea:	685b      	ldr	r3, [r3, #4]
 80164ec:	4618      	mov	r0, r3
 80164ee:	f7f8 fe54 	bl	800f19a <lwip_htonl>
 80164f2:	4603      	mov	r3, r0
 80164f4:	3301      	adds	r3, #1
 80164f6:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	1ad3      	subs	r3, r2, r3
 8016500:	2b00      	cmp	r3, #0
 8016502:	da02      	bge.n	801650a <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	68fa      	ldr	r2, [r7, #12]
 8016508:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801650a:	7cfb      	ldrb	r3, [r7, #19]
 801650c:	2200      	movs	r2, #0
 801650e:	69f9      	ldr	r1, [r7, #28]
 8016510:	6878      	ldr	r0, [r7, #4]
 8016512:	f7ff fddf 	bl	80160d4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016516:	687a      	ldr	r2, [r7, #4]
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	3304      	adds	r3, #4
 801651c:	69f9      	ldr	r1, [r7, #28]
 801651e:	6878      	ldr	r0, [r7, #4]
 8016520:	f7ff fe16 	bl	8016150 <tcp_output_control_segment>
 8016524:	4603      	mov	r3, r0
 8016526:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016528:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801652c:	4618      	mov	r0, r3
 801652e:	372c      	adds	r7, #44	@ 0x2c
 8016530:	46bd      	mov	sp, r7
 8016532:	bd90      	pop	{r4, r7, pc}
 8016534:	08020c78 	.word	0x08020c78
 8016538:	080214cc 	.word	0x080214cc
 801653c:	08020ccc 	.word	0x08020ccc

08016540 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b082      	sub	sp, #8
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016548:	f7fa fec0 	bl	80112cc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801654c:	4b0a      	ldr	r3, [pc, #40]	@ (8016578 <tcpip_tcp_timer+0x38>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d103      	bne.n	801655c <tcpip_tcp_timer+0x1c>
 8016554:	4b09      	ldr	r3, [pc, #36]	@ (801657c <tcpip_tcp_timer+0x3c>)
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d005      	beq.n	8016568 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801655c:	2200      	movs	r2, #0
 801655e:	4908      	ldr	r1, [pc, #32]	@ (8016580 <tcpip_tcp_timer+0x40>)
 8016560:	20fa      	movs	r0, #250	@ 0xfa
 8016562:	f000 f8f3 	bl	801674c <sys_timeout>
 8016566:	e003      	b.n	8016570 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016568:	4b06      	ldr	r3, [pc, #24]	@ (8016584 <tcpip_tcp_timer+0x44>)
 801656a:	2200      	movs	r2, #0
 801656c:	601a      	str	r2, [r3, #0]
  }
}
 801656e:	bf00      	nop
 8016570:	bf00      	nop
 8016572:	3708      	adds	r7, #8
 8016574:	46bd      	mov	sp, r7
 8016576:	bd80      	pop	{r7, pc}
 8016578:	20013d54 	.word	0x20013d54
 801657c:	20013d58 	.word	0x20013d58
 8016580:	08016541 	.word	0x08016541
 8016584:	20013da4 	.word	0x20013da4

08016588 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801658c:	4b0a      	ldr	r3, [pc, #40]	@ (80165b8 <tcp_timer_needed+0x30>)
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d10f      	bne.n	80165b4 <tcp_timer_needed+0x2c>
 8016594:	4b09      	ldr	r3, [pc, #36]	@ (80165bc <tcp_timer_needed+0x34>)
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d103      	bne.n	80165a4 <tcp_timer_needed+0x1c>
 801659c:	4b08      	ldr	r3, [pc, #32]	@ (80165c0 <tcp_timer_needed+0x38>)
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d007      	beq.n	80165b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80165a4:	4b04      	ldr	r3, [pc, #16]	@ (80165b8 <tcp_timer_needed+0x30>)
 80165a6:	2201      	movs	r2, #1
 80165a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80165aa:	2200      	movs	r2, #0
 80165ac:	4905      	ldr	r1, [pc, #20]	@ (80165c4 <tcp_timer_needed+0x3c>)
 80165ae:	20fa      	movs	r0, #250	@ 0xfa
 80165b0:	f000 f8cc 	bl	801674c <sys_timeout>
  }
}
 80165b4:	bf00      	nop
 80165b6:	bd80      	pop	{r7, pc}
 80165b8:	20013da4 	.word	0x20013da4
 80165bc:	20013d54 	.word	0x20013d54
 80165c0:	20013d58 	.word	0x20013d58
 80165c4:	08016541 	.word	0x08016541

080165c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b086      	sub	sp, #24
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	60f8      	str	r0, [r7, #12]
 80165d0:	60b9      	str	r1, [r7, #8]
 80165d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80165d4:	200a      	movs	r0, #10
 80165d6:	f7f9 fbf9 	bl	800fdcc <memp_malloc>
 80165da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80165dc:	693b      	ldr	r3, [r7, #16]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d109      	bne.n	80165f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80165e2:	693b      	ldr	r3, [r7, #16]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d151      	bne.n	801668c <sys_timeout_abs+0xc4>
 80165e8:	4b2a      	ldr	r3, [pc, #168]	@ (8016694 <sys_timeout_abs+0xcc>)
 80165ea:	22be      	movs	r2, #190	@ 0xbe
 80165ec:	492a      	ldr	r1, [pc, #168]	@ (8016698 <sys_timeout_abs+0xd0>)
 80165ee:	482b      	ldr	r0, [pc, #172]	@ (801669c <sys_timeout_abs+0xd4>)
 80165f0:	f006 f91e 	bl	801c830 <iprintf>
    return;
 80165f4:	e04a      	b.n	801668c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80165f6:	693b      	ldr	r3, [r7, #16]
 80165f8:	2200      	movs	r2, #0
 80165fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80165fc:	693b      	ldr	r3, [r7, #16]
 80165fe:	68ba      	ldr	r2, [r7, #8]
 8016600:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016602:	693b      	ldr	r3, [r7, #16]
 8016604:	687a      	ldr	r2, [r7, #4]
 8016606:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016608:	693b      	ldr	r3, [r7, #16]
 801660a:	68fa      	ldr	r2, [r7, #12]
 801660c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801660e:	4b24      	ldr	r3, [pc, #144]	@ (80166a0 <sys_timeout_abs+0xd8>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d103      	bne.n	801661e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016616:	4a22      	ldr	r2, [pc, #136]	@ (80166a0 <sys_timeout_abs+0xd8>)
 8016618:	693b      	ldr	r3, [r7, #16]
 801661a:	6013      	str	r3, [r2, #0]
    return;
 801661c:	e037      	b.n	801668e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801661e:	693b      	ldr	r3, [r7, #16]
 8016620:	685a      	ldr	r2, [r3, #4]
 8016622:	4b1f      	ldr	r3, [pc, #124]	@ (80166a0 <sys_timeout_abs+0xd8>)
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	685b      	ldr	r3, [r3, #4]
 8016628:	1ad3      	subs	r3, r2, r3
 801662a:	0fdb      	lsrs	r3, r3, #31
 801662c:	f003 0301 	and.w	r3, r3, #1
 8016630:	b2db      	uxtb	r3, r3
 8016632:	2b00      	cmp	r3, #0
 8016634:	d007      	beq.n	8016646 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016636:	4b1a      	ldr	r3, [pc, #104]	@ (80166a0 <sys_timeout_abs+0xd8>)
 8016638:	681a      	ldr	r2, [r3, #0]
 801663a:	693b      	ldr	r3, [r7, #16]
 801663c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801663e:	4a18      	ldr	r2, [pc, #96]	@ (80166a0 <sys_timeout_abs+0xd8>)
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	6013      	str	r3, [r2, #0]
 8016644:	e023      	b.n	801668e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016646:	4b16      	ldr	r3, [pc, #88]	@ (80166a0 <sys_timeout_abs+0xd8>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	617b      	str	r3, [r7, #20]
 801664c:	e01a      	b.n	8016684 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801664e:	697b      	ldr	r3, [r7, #20]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d00b      	beq.n	801666e <sys_timeout_abs+0xa6>
 8016656:	693b      	ldr	r3, [r7, #16]
 8016658:	685a      	ldr	r2, [r3, #4]
 801665a:	697b      	ldr	r3, [r7, #20]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	685b      	ldr	r3, [r3, #4]
 8016660:	1ad3      	subs	r3, r2, r3
 8016662:	0fdb      	lsrs	r3, r3, #31
 8016664:	f003 0301 	and.w	r3, r3, #1
 8016668:	b2db      	uxtb	r3, r3
 801666a:	2b00      	cmp	r3, #0
 801666c:	d007      	beq.n	801667e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801666e:	697b      	ldr	r3, [r7, #20]
 8016670:	681a      	ldr	r2, [r3, #0]
 8016672:	693b      	ldr	r3, [r7, #16]
 8016674:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016676:	697b      	ldr	r3, [r7, #20]
 8016678:	693a      	ldr	r2, [r7, #16]
 801667a:	601a      	str	r2, [r3, #0]
        break;
 801667c:	e007      	b.n	801668e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801667e:	697b      	ldr	r3, [r7, #20]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	617b      	str	r3, [r7, #20]
 8016684:	697b      	ldr	r3, [r7, #20]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d1e1      	bne.n	801664e <sys_timeout_abs+0x86>
 801668a:	e000      	b.n	801668e <sys_timeout_abs+0xc6>
    return;
 801668c:	bf00      	nop
      }
    }
  }
}
 801668e:	3718      	adds	r7, #24
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}
 8016694:	080214f0 	.word	0x080214f0
 8016698:	08021524 	.word	0x08021524
 801669c:	08021564 	.word	0x08021564
 80166a0:	20013d9c 	.word	0x20013d9c

080166a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b086      	sub	sp, #24
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80166b0:	697b      	ldr	r3, [r7, #20]
 80166b2:	685b      	ldr	r3, [r3, #4]
 80166b4:	4798      	blx	r3

  now = sys_now();
 80166b6:	f7ee f995 	bl	80049e4 <sys_now>
 80166ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80166bc:	697b      	ldr	r3, [r7, #20]
 80166be:	681a      	ldr	r2, [r3, #0]
 80166c0:	4b0f      	ldr	r3, [pc, #60]	@ (8016700 <lwip_cyclic_timer+0x5c>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	4413      	add	r3, r2
 80166c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80166c8:	68fa      	ldr	r2, [r7, #12]
 80166ca:	693b      	ldr	r3, [r7, #16]
 80166cc:	1ad3      	subs	r3, r2, r3
 80166ce:	0fdb      	lsrs	r3, r3, #31
 80166d0:	f003 0301 	and.w	r3, r3, #1
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d009      	beq.n	80166ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80166da:	697b      	ldr	r3, [r7, #20]
 80166dc:	681a      	ldr	r2, [r3, #0]
 80166de:	693b      	ldr	r3, [r7, #16]
 80166e0:	4413      	add	r3, r2
 80166e2:	687a      	ldr	r2, [r7, #4]
 80166e4:	4907      	ldr	r1, [pc, #28]	@ (8016704 <lwip_cyclic_timer+0x60>)
 80166e6:	4618      	mov	r0, r3
 80166e8:	f7ff ff6e 	bl	80165c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80166ec:	e004      	b.n	80166f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80166ee:	687a      	ldr	r2, [r7, #4]
 80166f0:	4904      	ldr	r1, [pc, #16]	@ (8016704 <lwip_cyclic_timer+0x60>)
 80166f2:	68f8      	ldr	r0, [r7, #12]
 80166f4:	f7ff ff68 	bl	80165c8 <sys_timeout_abs>
}
 80166f8:	bf00      	nop
 80166fa:	3718      	adds	r7, #24
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd80      	pop	{r7, pc}
 8016700:	20013da0 	.word	0x20013da0
 8016704:	080166a5 	.word	0x080166a5

08016708 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801670e:	2301      	movs	r3, #1
 8016710:	607b      	str	r3, [r7, #4]
 8016712:	e00e      	b.n	8016732 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016714:	4a0b      	ldr	r2, [pc, #44]	@ (8016744 <sys_timeouts_init+0x3c>)
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	00db      	lsls	r3, r3, #3
 8016720:	4a08      	ldr	r2, [pc, #32]	@ (8016744 <sys_timeouts_init+0x3c>)
 8016722:	4413      	add	r3, r2
 8016724:	461a      	mov	r2, r3
 8016726:	4908      	ldr	r1, [pc, #32]	@ (8016748 <sys_timeouts_init+0x40>)
 8016728:	f000 f810 	bl	801674c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	3301      	adds	r3, #1
 8016730:	607b      	str	r3, [r7, #4]
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	2b04      	cmp	r3, #4
 8016736:	d9ed      	bls.n	8016714 <sys_timeouts_init+0xc>
  }
}
 8016738:	bf00      	nop
 801673a:	bf00      	nop
 801673c:	3708      	adds	r7, #8
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}
 8016742:	bf00      	nop
 8016744:	0806e16c 	.word	0x0806e16c
 8016748:	080166a5 	.word	0x080166a5

0801674c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b086      	sub	sp, #24
 8016750:	af00      	add	r7, sp, #0
 8016752:	60f8      	str	r0, [r7, #12]
 8016754:	60b9      	str	r1, [r7, #8]
 8016756:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801675e:	d306      	bcc.n	801676e <sys_timeout+0x22>
 8016760:	4b0a      	ldr	r3, [pc, #40]	@ (801678c <sys_timeout+0x40>)
 8016762:	f240 1229 	movw	r2, #297	@ 0x129
 8016766:	490a      	ldr	r1, [pc, #40]	@ (8016790 <sys_timeout+0x44>)
 8016768:	480a      	ldr	r0, [pc, #40]	@ (8016794 <sys_timeout+0x48>)
 801676a:	f006 f861 	bl	801c830 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801676e:	f7ee f939 	bl	80049e4 <sys_now>
 8016772:	4602      	mov	r2, r0
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	4413      	add	r3, r2
 8016778:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801677a:	687a      	ldr	r2, [r7, #4]
 801677c:	68b9      	ldr	r1, [r7, #8]
 801677e:	6978      	ldr	r0, [r7, #20]
 8016780:	f7ff ff22 	bl	80165c8 <sys_timeout_abs>
#endif
}
 8016784:	bf00      	nop
 8016786:	3718      	adds	r7, #24
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	080214f0 	.word	0x080214f0
 8016790:	0802158c 	.word	0x0802158c
 8016794:	08021564 	.word	0x08021564

08016798 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b084      	sub	sp, #16
 801679c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801679e:	f7ee f921 	bl	80049e4 <sys_now>
 80167a2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80167a4:	4b17      	ldr	r3, [pc, #92]	@ (8016804 <sys_check_timeouts+0x6c>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80167aa:	68bb      	ldr	r3, [r7, #8]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d022      	beq.n	80167f6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80167b0:	68bb      	ldr	r3, [r7, #8]
 80167b2:	685b      	ldr	r3, [r3, #4]
 80167b4:	68fa      	ldr	r2, [r7, #12]
 80167b6:	1ad3      	subs	r3, r2, r3
 80167b8:	0fdb      	lsrs	r3, r3, #31
 80167ba:	f003 0301 	and.w	r3, r3, #1
 80167be:	b2db      	uxtb	r3, r3
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d11a      	bne.n	80167fa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80167c4:	68bb      	ldr	r3, [r7, #8]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	4a0e      	ldr	r2, [pc, #56]	@ (8016804 <sys_check_timeouts+0x6c>)
 80167ca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	689b      	ldr	r3, [r3, #8]
 80167d0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80167d2:	68bb      	ldr	r3, [r7, #8]
 80167d4:	68db      	ldr	r3, [r3, #12]
 80167d6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80167d8:	68bb      	ldr	r3, [r7, #8]
 80167da:	685b      	ldr	r3, [r3, #4]
 80167dc:	4a0a      	ldr	r2, [pc, #40]	@ (8016808 <sys_check_timeouts+0x70>)
 80167de:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80167e0:	68b9      	ldr	r1, [r7, #8]
 80167e2:	200a      	movs	r0, #10
 80167e4:	f7f9 fb44 	bl	800fe70 <memp_free>
    if (handler != NULL) {
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d0da      	beq.n	80167a4 <sys_check_timeouts+0xc>
      handler(arg);
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	6838      	ldr	r0, [r7, #0]
 80167f2:	4798      	blx	r3
  do {
 80167f4:	e7d6      	b.n	80167a4 <sys_check_timeouts+0xc>
      return;
 80167f6:	bf00      	nop
 80167f8:	e000      	b.n	80167fc <sys_check_timeouts+0x64>
      return;
 80167fa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80167fc:	3710      	adds	r7, #16
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}
 8016802:	bf00      	nop
 8016804:	20013d9c 	.word	0x20013d9c
 8016808:	20013da0 	.word	0x20013da0

0801680c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b082      	sub	sp, #8
 8016810:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016812:	4b16      	ldr	r3, [pc, #88]	@ (801686c <sys_timeouts_sleeptime+0x60>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d102      	bne.n	8016820 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801681a:	f04f 33ff 	mov.w	r3, #4294967295
 801681e:	e020      	b.n	8016862 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016820:	f7ee f8e0 	bl	80049e4 <sys_now>
 8016824:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016826:	4b11      	ldr	r3, [pc, #68]	@ (801686c <sys_timeouts_sleeptime+0x60>)
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	685a      	ldr	r2, [r3, #4]
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	1ad3      	subs	r3, r2, r3
 8016830:	0fdb      	lsrs	r3, r3, #31
 8016832:	f003 0301 	and.w	r3, r3, #1
 8016836:	b2db      	uxtb	r3, r3
 8016838:	2b00      	cmp	r3, #0
 801683a:	d001      	beq.n	8016840 <sys_timeouts_sleeptime+0x34>
    return 0;
 801683c:	2300      	movs	r3, #0
 801683e:	e010      	b.n	8016862 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016840:	4b0a      	ldr	r3, [pc, #40]	@ (801686c <sys_timeouts_sleeptime+0x60>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	685a      	ldr	r2, [r3, #4]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	1ad3      	subs	r3, r2, r3
 801684a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	2b00      	cmp	r3, #0
 8016850:	da06      	bge.n	8016860 <sys_timeouts_sleeptime+0x54>
 8016852:	4b07      	ldr	r3, [pc, #28]	@ (8016870 <sys_timeouts_sleeptime+0x64>)
 8016854:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8016858:	4906      	ldr	r1, [pc, #24]	@ (8016874 <sys_timeouts_sleeptime+0x68>)
 801685a:	4807      	ldr	r0, [pc, #28]	@ (8016878 <sys_timeouts_sleeptime+0x6c>)
 801685c:	f005 ffe8 	bl	801c830 <iprintf>
    return ret;
 8016860:	683b      	ldr	r3, [r7, #0]
  }
}
 8016862:	4618      	mov	r0, r3
 8016864:	3708      	adds	r7, #8
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}
 801686a:	bf00      	nop
 801686c:	20013d9c 	.word	0x20013d9c
 8016870:	080214f0 	.word	0x080214f0
 8016874:	080215c4 	.word	0x080215c4
 8016878:	08021564 	.word	0x08021564

0801687c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016880:	f005 fa06 	bl	801bc90 <rand>
 8016884:	4603      	mov	r3, r0
 8016886:	b29b      	uxth	r3, r3
 8016888:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801688c:	b29b      	uxth	r3, r3
 801688e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8016892:	b29a      	uxth	r2, r3
 8016894:	4b01      	ldr	r3, [pc, #4]	@ (801689c <udp_init+0x20>)
 8016896:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016898:	bf00      	nop
 801689a:	bd80      	pop	{r7, pc}
 801689c:	200000bc 	.word	0x200000bc

080168a0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80168a0:	b480      	push	{r7}
 80168a2:	b083      	sub	sp, #12
 80168a4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80168a6:	2300      	movs	r3, #0
 80168a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80168aa:	4b17      	ldr	r3, [pc, #92]	@ (8016908 <udp_new_port+0x68>)
 80168ac:	881b      	ldrh	r3, [r3, #0]
 80168ae:	1c5a      	adds	r2, r3, #1
 80168b0:	b291      	uxth	r1, r2
 80168b2:	4a15      	ldr	r2, [pc, #84]	@ (8016908 <udp_new_port+0x68>)
 80168b4:	8011      	strh	r1, [r2, #0]
 80168b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80168ba:	4293      	cmp	r3, r2
 80168bc:	d103      	bne.n	80168c6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80168be:	4b12      	ldr	r3, [pc, #72]	@ (8016908 <udp_new_port+0x68>)
 80168c0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80168c4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80168c6:	4b11      	ldr	r3, [pc, #68]	@ (801690c <udp_new_port+0x6c>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	603b      	str	r3, [r7, #0]
 80168cc:	e011      	b.n	80168f2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80168ce:	683b      	ldr	r3, [r7, #0]
 80168d0:	8a5a      	ldrh	r2, [r3, #18]
 80168d2:	4b0d      	ldr	r3, [pc, #52]	@ (8016908 <udp_new_port+0x68>)
 80168d4:	881b      	ldrh	r3, [r3, #0]
 80168d6:	429a      	cmp	r2, r3
 80168d8:	d108      	bne.n	80168ec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80168da:	88fb      	ldrh	r3, [r7, #6]
 80168dc:	3301      	adds	r3, #1
 80168de:	80fb      	strh	r3, [r7, #6]
 80168e0:	88fb      	ldrh	r3, [r7, #6]
 80168e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80168e6:	d3e0      	bcc.n	80168aa <udp_new_port+0xa>
        return 0;
 80168e8:	2300      	movs	r3, #0
 80168ea:	e007      	b.n	80168fc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	68db      	ldr	r3, [r3, #12]
 80168f0:	603b      	str	r3, [r7, #0]
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d1ea      	bne.n	80168ce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80168f8:	4b03      	ldr	r3, [pc, #12]	@ (8016908 <udp_new_port+0x68>)
 80168fa:	881b      	ldrh	r3, [r3, #0]
}
 80168fc:	4618      	mov	r0, r3
 80168fe:	370c      	adds	r7, #12
 8016900:	46bd      	mov	sp, r7
 8016902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016906:	4770      	bx	lr
 8016908:	200000bc 	.word	0x200000bc
 801690c:	20013da8 	.word	0x20013da8

08016910 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b084      	sub	sp, #16
 8016914:	af00      	add	r7, sp, #0
 8016916:	60f8      	str	r0, [r7, #12]
 8016918:	60b9      	str	r1, [r7, #8]
 801691a:	4613      	mov	r3, r2
 801691c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d105      	bne.n	8016930 <udp_input_local_match+0x20>
 8016924:	4b27      	ldr	r3, [pc, #156]	@ (80169c4 <udp_input_local_match+0xb4>)
 8016926:	2287      	movs	r2, #135	@ 0x87
 8016928:	4927      	ldr	r1, [pc, #156]	@ (80169c8 <udp_input_local_match+0xb8>)
 801692a:	4828      	ldr	r0, [pc, #160]	@ (80169cc <udp_input_local_match+0xbc>)
 801692c:	f005 ff80 	bl	801c830 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d105      	bne.n	8016942 <udp_input_local_match+0x32>
 8016936:	4b23      	ldr	r3, [pc, #140]	@ (80169c4 <udp_input_local_match+0xb4>)
 8016938:	2288      	movs	r2, #136	@ 0x88
 801693a:	4925      	ldr	r1, [pc, #148]	@ (80169d0 <udp_input_local_match+0xc0>)
 801693c:	4823      	ldr	r0, [pc, #140]	@ (80169cc <udp_input_local_match+0xbc>)
 801693e:	f005 ff77 	bl	801c830 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	7a1b      	ldrb	r3, [r3, #8]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d00b      	beq.n	8016962 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	7a1a      	ldrb	r2, [r3, #8]
 801694e:	4b21      	ldr	r3, [pc, #132]	@ (80169d4 <udp_input_local_match+0xc4>)
 8016950:	685b      	ldr	r3, [r3, #4]
 8016952:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016956:	3301      	adds	r3, #1
 8016958:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801695a:	429a      	cmp	r2, r3
 801695c:	d001      	beq.n	8016962 <udp_input_local_match+0x52>
    return 0;
 801695e:	2300      	movs	r3, #0
 8016960:	e02b      	b.n	80169ba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016962:	79fb      	ldrb	r3, [r7, #7]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d018      	beq.n	801699a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d013      	beq.n	8016996 <udp_input_local_match+0x86>
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d00f      	beq.n	8016996 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016976:	4b17      	ldr	r3, [pc, #92]	@ (80169d4 <udp_input_local_match+0xc4>)
 8016978:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801697a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801697e:	d00a      	beq.n	8016996 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	681a      	ldr	r2, [r3, #0]
 8016984:	4b13      	ldr	r3, [pc, #76]	@ (80169d4 <udp_input_local_match+0xc4>)
 8016986:	695b      	ldr	r3, [r3, #20]
 8016988:	405a      	eors	r2, r3
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	3308      	adds	r3, #8
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016992:	2b00      	cmp	r3, #0
 8016994:	d110      	bne.n	80169b8 <udp_input_local_match+0xa8>
          return 1;
 8016996:	2301      	movs	r3, #1
 8016998:	e00f      	b.n	80169ba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d009      	beq.n	80169b4 <udp_input_local_match+0xa4>
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d005      	beq.n	80169b4 <udp_input_local_match+0xa4>
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	681a      	ldr	r2, [r3, #0]
 80169ac:	4b09      	ldr	r3, [pc, #36]	@ (80169d4 <udp_input_local_match+0xc4>)
 80169ae:	695b      	ldr	r3, [r3, #20]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d101      	bne.n	80169b8 <udp_input_local_match+0xa8>
        return 1;
 80169b4:	2301      	movs	r3, #1
 80169b6:	e000      	b.n	80169ba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80169b8:	2300      	movs	r3, #0
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3710      	adds	r7, #16
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}
 80169c2:	bf00      	nop
 80169c4:	080215d8 	.word	0x080215d8
 80169c8:	08021608 	.word	0x08021608
 80169cc:	0802162c 	.word	0x0802162c
 80169d0:	08021654 	.word	0x08021654
 80169d4:	2000a2d4 	.word	0x2000a2d4

080169d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80169d8:	b590      	push	{r4, r7, lr}
 80169da:	b08d      	sub	sp, #52	@ 0x34
 80169dc:	af02      	add	r7, sp, #8
 80169de:	6078      	str	r0, [r7, #4]
 80169e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80169e2:	2300      	movs	r3, #0
 80169e4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d105      	bne.n	80169f8 <udp_input+0x20>
 80169ec:	4b87      	ldr	r3, [pc, #540]	@ (8016c0c <udp_input+0x234>)
 80169ee:	22cf      	movs	r2, #207	@ 0xcf
 80169f0:	4987      	ldr	r1, [pc, #540]	@ (8016c10 <udp_input+0x238>)
 80169f2:	4888      	ldr	r0, [pc, #544]	@ (8016c14 <udp_input+0x23c>)
 80169f4:	f005 ff1c 	bl	801c830 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d105      	bne.n	8016a0a <udp_input+0x32>
 80169fe:	4b83      	ldr	r3, [pc, #524]	@ (8016c0c <udp_input+0x234>)
 8016a00:	22d0      	movs	r2, #208	@ 0xd0
 8016a02:	4985      	ldr	r1, [pc, #532]	@ (8016c18 <udp_input+0x240>)
 8016a04:	4883      	ldr	r0, [pc, #524]	@ (8016c14 <udp_input+0x23c>)
 8016a06:	f005 ff13 	bl	801c830 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	895b      	ldrh	r3, [r3, #10]
 8016a0e:	2b07      	cmp	r3, #7
 8016a10:	d803      	bhi.n	8016a1a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016a12:	6878      	ldr	r0, [r7, #4]
 8016a14:	f7fa f8ce 	bl	8010bb4 <pbuf_free>
    goto end;
 8016a18:	e0f0      	b.n	8016bfc <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	685b      	ldr	r3, [r3, #4]
 8016a1e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016a20:	4b7e      	ldr	r3, [pc, #504]	@ (8016c1c <udp_input+0x244>)
 8016a22:	695b      	ldr	r3, [r3, #20]
 8016a24:	4a7d      	ldr	r2, [pc, #500]	@ (8016c1c <udp_input+0x244>)
 8016a26:	6812      	ldr	r2, [r2, #0]
 8016a28:	4611      	mov	r1, r2
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f003 ffe2 	bl	801a9f4 <ip4_addr_isbroadcast_u32>
 8016a30:	4603      	mov	r3, r0
 8016a32:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016a34:	697b      	ldr	r3, [r7, #20]
 8016a36:	881b      	ldrh	r3, [r3, #0]
 8016a38:	b29b      	uxth	r3, r3
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7f8 fb98 	bl	800f170 <lwip_htons>
 8016a40:	4603      	mov	r3, r0
 8016a42:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016a44:	697b      	ldr	r3, [r7, #20]
 8016a46:	885b      	ldrh	r3, [r3, #2]
 8016a48:	b29b      	uxth	r3, r3
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f7f8 fb90 	bl	800f170 <lwip_htons>
 8016a50:	4603      	mov	r3, r0
 8016a52:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016a54:	2300      	movs	r3, #0
 8016a56:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 8016a58:	2300      	movs	r3, #0
 8016a5a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a60:	4b6f      	ldr	r3, [pc, #444]	@ (8016c20 <udp_input+0x248>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	61fb      	str	r3, [r7, #28]
 8016a66:	e054      	b.n	8016b12 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016a68:	69fb      	ldr	r3, [r7, #28]
 8016a6a:	8a5b      	ldrh	r3, [r3, #18]
 8016a6c:	89fa      	ldrh	r2, [r7, #14]
 8016a6e:	429a      	cmp	r2, r3
 8016a70:	d14a      	bne.n	8016b08 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016a72:	7cfb      	ldrb	r3, [r7, #19]
 8016a74:	461a      	mov	r2, r3
 8016a76:	6839      	ldr	r1, [r7, #0]
 8016a78:	69f8      	ldr	r0, [r7, #28]
 8016a7a:	f7ff ff49 	bl	8016910 <udp_input_local_match>
 8016a7e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d041      	beq.n	8016b08 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016a84:	69fb      	ldr	r3, [r7, #28]
 8016a86:	7c1b      	ldrb	r3, [r3, #16]
 8016a88:	f003 0304 	and.w	r3, r3, #4
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d11d      	bne.n	8016acc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d102      	bne.n	8016a9c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016a96:	69fb      	ldr	r3, [r7, #28]
 8016a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8016a9a:	e017      	b.n	8016acc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016a9c:	7cfb      	ldrb	r3, [r7, #19]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d014      	beq.n	8016acc <udp_input+0xf4>
 8016aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8016c1c <udp_input+0x244>)
 8016aa4:	695b      	ldr	r3, [r3, #20]
 8016aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016aaa:	d10f      	bne.n	8016acc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aae:	681a      	ldr	r2, [r3, #0]
 8016ab0:	683b      	ldr	r3, [r7, #0]
 8016ab2:	3304      	adds	r3, #4
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d008      	beq.n	8016acc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016aba:	69fb      	ldr	r3, [r7, #28]
 8016abc:	681a      	ldr	r2, [r3, #0]
 8016abe:	683b      	ldr	r3, [r7, #0]
 8016ac0:	3304      	adds	r3, #4
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	429a      	cmp	r2, r3
 8016ac6:	d101      	bne.n	8016acc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016ac8:	69fb      	ldr	r3, [r7, #28]
 8016aca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016acc:	69fb      	ldr	r3, [r7, #28]
 8016ace:	8a9b      	ldrh	r3, [r3, #20]
 8016ad0:	8a3a      	ldrh	r2, [r7, #16]
 8016ad2:	429a      	cmp	r2, r3
 8016ad4:	d118      	bne.n	8016b08 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016ad6:	69fb      	ldr	r3, [r7, #28]
 8016ad8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d005      	beq.n	8016aea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016ade:	69fb      	ldr	r3, [r7, #28]
 8016ae0:	685a      	ldr	r2, [r3, #4]
 8016ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8016c1c <udp_input+0x244>)
 8016ae4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d10e      	bne.n	8016b08 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016aea:	6a3b      	ldr	r3, [r7, #32]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d014      	beq.n	8016b1a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016af0:	69fb      	ldr	r3, [r7, #28]
 8016af2:	68da      	ldr	r2, [r3, #12]
 8016af4:	6a3b      	ldr	r3, [r7, #32]
 8016af6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016af8:	4b49      	ldr	r3, [pc, #292]	@ (8016c20 <udp_input+0x248>)
 8016afa:	681a      	ldr	r2, [r3, #0]
 8016afc:	69fb      	ldr	r3, [r7, #28]
 8016afe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016b00:	4a47      	ldr	r2, [pc, #284]	@ (8016c20 <udp_input+0x248>)
 8016b02:	69fb      	ldr	r3, [r7, #28]
 8016b04:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016b06:	e008      	b.n	8016b1a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016b08:	69fb      	ldr	r3, [r7, #28]
 8016b0a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b0c:	69fb      	ldr	r3, [r7, #28]
 8016b0e:	68db      	ldr	r3, [r3, #12]
 8016b10:	61fb      	str	r3, [r7, #28]
 8016b12:	69fb      	ldr	r3, [r7, #28]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d1a7      	bne.n	8016a68 <udp_input+0x90>
 8016b18:	e000      	b.n	8016b1c <udp_input+0x144>
        break;
 8016b1a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016b1c:	69fb      	ldr	r3, [r7, #28]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d101      	bne.n	8016b26 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b24:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016b26:	69fb      	ldr	r3, [r7, #28]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d002      	beq.n	8016b32 <udp_input+0x15a>
    for_us = 1;
 8016b2c:	2301      	movs	r3, #1
 8016b2e:	76fb      	strb	r3, [r7, #27]
 8016b30:	e00a      	b.n	8016b48 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016b32:	683b      	ldr	r3, [r7, #0]
 8016b34:	3304      	adds	r3, #4
 8016b36:	681a      	ldr	r2, [r3, #0]
 8016b38:	4b38      	ldr	r3, [pc, #224]	@ (8016c1c <udp_input+0x244>)
 8016b3a:	695b      	ldr	r3, [r3, #20]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	bf0c      	ite	eq
 8016b40:	2301      	moveq	r3, #1
 8016b42:	2300      	movne	r3, #0
 8016b44:	b2db      	uxtb	r3, r3
 8016b46:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016b48:	7efb      	ldrb	r3, [r7, #27]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d052      	beq.n	8016bf4 <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 8016b4e:	697b      	ldr	r3, [r7, #20]
 8016b50:	88db      	ldrh	r3, [r3, #6]
 8016b52:	b29b      	uxth	r3, r3
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d00b      	beq.n	8016b70 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	891a      	ldrh	r2, [r3, #8]
 8016b5c:	4b31      	ldr	r3, [pc, #196]	@ (8016c24 <udp_input+0x24c>)
 8016b5e:	9300      	str	r3, [sp, #0]
 8016b60:	4b31      	ldr	r3, [pc, #196]	@ (8016c28 <udp_input+0x250>)
 8016b62:	2111      	movs	r1, #17
 8016b64:	6878      	ldr	r0, [r7, #4]
 8016b66:	f7f8 fc35 	bl	800f3d4 <ip_chksum_pseudo>
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d146      	bne.n	8016bfe <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016b70:	2108      	movs	r1, #8
 8016b72:	6878      	ldr	r0, [r7, #4]
 8016b74:	f7f9 ff98 	bl	8010aa8 <pbuf_remove_header>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d00a      	beq.n	8016b94 <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016b7e:	4b23      	ldr	r3, [pc, #140]	@ (8016c0c <udp_input+0x234>)
 8016b80:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8016b84:	4929      	ldr	r1, [pc, #164]	@ (8016c2c <udp_input+0x254>)
 8016b86:	4823      	ldr	r0, [pc, #140]	@ (8016c14 <udp_input+0x23c>)
 8016b88:	f005 fe52 	bl	801c830 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	f7fa f811 	bl	8010bb4 <pbuf_free>
      goto end;
 8016b92:	e033      	b.n	8016bfc <udp_input+0x224>
    }

    if (pcb != NULL) {
 8016b94:	69fb      	ldr	r3, [r7, #28]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d012      	beq.n	8016bc0 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016b9a:	69fb      	ldr	r3, [r7, #28]
 8016b9c:	699b      	ldr	r3, [r3, #24]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d00a      	beq.n	8016bb8 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016ba2:	69fb      	ldr	r3, [r7, #28]
 8016ba4:	699c      	ldr	r4, [r3, #24]
 8016ba6:	69fb      	ldr	r3, [r7, #28]
 8016ba8:	69d8      	ldr	r0, [r3, #28]
 8016baa:	8a3b      	ldrh	r3, [r7, #16]
 8016bac:	9300      	str	r3, [sp, #0]
 8016bae:	4b1e      	ldr	r3, [pc, #120]	@ (8016c28 <udp_input+0x250>)
 8016bb0:	687a      	ldr	r2, [r7, #4]
 8016bb2:	69f9      	ldr	r1, [r7, #28]
 8016bb4:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016bb6:	e026      	b.n	8016c06 <udp_input+0x22e>
        pbuf_free(p);
 8016bb8:	6878      	ldr	r0, [r7, #4]
 8016bba:	f7f9 fffb 	bl	8010bb4 <pbuf_free>
        goto end;
 8016bbe:	e01d      	b.n	8016bfc <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016bc0:	7cfb      	ldrb	r3, [r7, #19]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d112      	bne.n	8016bec <udp_input+0x214>
 8016bc6:	4b15      	ldr	r3, [pc, #84]	@ (8016c1c <udp_input+0x244>)
 8016bc8:	695b      	ldr	r3, [r3, #20]
 8016bca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016bce:	2be0      	cmp	r3, #224	@ 0xe0
 8016bd0:	d00c      	beq.n	8016bec <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016bd2:	4b12      	ldr	r3, [pc, #72]	@ (8016c1c <udp_input+0x244>)
 8016bd4:	899b      	ldrh	r3, [r3, #12]
 8016bd6:	3308      	adds	r3, #8
 8016bd8:	b29b      	uxth	r3, r3
 8016bda:	b21b      	sxth	r3, r3
 8016bdc:	4619      	mov	r1, r3
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f7f9 ffd5 	bl	8010b8e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016be4:	2103      	movs	r1, #3
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	f003 fb4a 	bl	801a280 <icmp_dest_unreach>
      pbuf_free(p);
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f7f9 ffe1 	bl	8010bb4 <pbuf_free>
  return;
 8016bf2:	e008      	b.n	8016c06 <udp_input+0x22e>
    pbuf_free(p);
 8016bf4:	6878      	ldr	r0, [r7, #4]
 8016bf6:	f7f9 ffdd 	bl	8010bb4 <pbuf_free>
  return;
 8016bfa:	e004      	b.n	8016c06 <udp_input+0x22e>
 8016bfc:	e003      	b.n	8016c06 <udp_input+0x22e>
            goto chkerr;
 8016bfe:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8016c00:	6878      	ldr	r0, [r7, #4]
 8016c02:	f7f9 ffd7 	bl	8010bb4 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016c06:	372c      	adds	r7, #44	@ 0x2c
 8016c08:	46bd      	mov	sp, r7
 8016c0a:	bd90      	pop	{r4, r7, pc}
 8016c0c:	080215d8 	.word	0x080215d8
 8016c10:	0802167c 	.word	0x0802167c
 8016c14:	0802162c 	.word	0x0802162c
 8016c18:	08021694 	.word	0x08021694
 8016c1c:	2000a2d4 	.word	0x2000a2d4
 8016c20:	20013da8 	.word	0x20013da8
 8016c24:	2000a2e8 	.word	0x2000a2e8
 8016c28:	2000a2e4 	.word	0x2000a2e4
 8016c2c:	080216b0 	.word	0x080216b0

08016c30 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b088      	sub	sp, #32
 8016c34:	af02      	add	r7, sp, #8
 8016c36:	60f8      	str	r0, [r7, #12]
 8016c38:	60b9      	str	r1, [r7, #8]
 8016c3a:	607a      	str	r2, [r7, #4]
 8016c3c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d109      	bne.n	8016c58 <udp_sendto+0x28>
 8016c44:	4b23      	ldr	r3, [pc, #140]	@ (8016cd4 <udp_sendto+0xa4>)
 8016c46:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016c4a:	4923      	ldr	r1, [pc, #140]	@ (8016cd8 <udp_sendto+0xa8>)
 8016c4c:	4823      	ldr	r0, [pc, #140]	@ (8016cdc <udp_sendto+0xac>)
 8016c4e:	f005 fdef 	bl	801c830 <iprintf>
 8016c52:	f06f 030f 	mvn.w	r3, #15
 8016c56:	e038      	b.n	8016cca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8016c58:	68bb      	ldr	r3, [r7, #8]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d109      	bne.n	8016c72 <udp_sendto+0x42>
 8016c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8016cd4 <udp_sendto+0xa4>)
 8016c60:	f240 2219 	movw	r2, #537	@ 0x219
 8016c64:	491e      	ldr	r1, [pc, #120]	@ (8016ce0 <udp_sendto+0xb0>)
 8016c66:	481d      	ldr	r0, [pc, #116]	@ (8016cdc <udp_sendto+0xac>)
 8016c68:	f005 fde2 	bl	801c830 <iprintf>
 8016c6c:	f06f 030f 	mvn.w	r3, #15
 8016c70:	e02b      	b.n	8016cca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d109      	bne.n	8016c8c <udp_sendto+0x5c>
 8016c78:	4b16      	ldr	r3, [pc, #88]	@ (8016cd4 <udp_sendto+0xa4>)
 8016c7a:	f240 221a 	movw	r2, #538	@ 0x21a
 8016c7e:	4919      	ldr	r1, [pc, #100]	@ (8016ce4 <udp_sendto+0xb4>)
 8016c80:	4816      	ldr	r0, [pc, #88]	@ (8016cdc <udp_sendto+0xac>)
 8016c82:	f005 fdd5 	bl	801c830 <iprintf>
 8016c86:	f06f 030f 	mvn.w	r3, #15
 8016c8a:	e01e      	b.n	8016cca <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	7a1b      	ldrb	r3, [r3, #8]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d006      	beq.n	8016ca2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	7a1b      	ldrb	r3, [r3, #8]
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7f9 fbf9 	bl	8010490 <netif_get_by_index>
 8016c9e:	6178      	str	r0, [r7, #20]
 8016ca0:	e003      	b.n	8016caa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8016ca2:	6878      	ldr	r0, [r7, #4]
 8016ca4:	f003 fb80 	bl	801a3a8 <ip4_route>
 8016ca8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8016caa:	697b      	ldr	r3, [r7, #20]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d102      	bne.n	8016cb6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016cb0:	f06f 0303 	mvn.w	r3, #3
 8016cb4:	e009      	b.n	8016cca <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8016cb6:	887a      	ldrh	r2, [r7, #2]
 8016cb8:	697b      	ldr	r3, [r7, #20]
 8016cba:	9300      	str	r3, [sp, #0]
 8016cbc:	4613      	mov	r3, r2
 8016cbe:	687a      	ldr	r2, [r7, #4]
 8016cc0:	68b9      	ldr	r1, [r7, #8]
 8016cc2:	68f8      	ldr	r0, [r7, #12]
 8016cc4:	f000 f810 	bl	8016ce8 <udp_sendto_if>
 8016cc8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016cca:	4618      	mov	r0, r3
 8016ccc:	3718      	adds	r7, #24
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd80      	pop	{r7, pc}
 8016cd2:	bf00      	nop
 8016cd4:	080215d8 	.word	0x080215d8
 8016cd8:	080216fc 	.word	0x080216fc
 8016cdc:	0802162c 	.word	0x0802162c
 8016ce0:	08021714 	.word	0x08021714
 8016ce4:	08021730 	.word	0x08021730

08016ce8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b088      	sub	sp, #32
 8016cec:	af02      	add	r7, sp, #8
 8016cee:	60f8      	str	r0, [r7, #12]
 8016cf0:	60b9      	str	r1, [r7, #8]
 8016cf2:	607a      	str	r2, [r7, #4]
 8016cf4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d109      	bne.n	8016d10 <udp_sendto_if+0x28>
 8016cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8016db8 <udp_sendto_if+0xd0>)
 8016cfe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016d02:	492e      	ldr	r1, [pc, #184]	@ (8016dbc <udp_sendto_if+0xd4>)
 8016d04:	482e      	ldr	r0, [pc, #184]	@ (8016dc0 <udp_sendto_if+0xd8>)
 8016d06:	f005 fd93 	bl	801c830 <iprintf>
 8016d0a:	f06f 030f 	mvn.w	r3, #15
 8016d0e:	e04f      	b.n	8016db0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d109      	bne.n	8016d2a <udp_sendto_if+0x42>
 8016d16:	4b28      	ldr	r3, [pc, #160]	@ (8016db8 <udp_sendto_if+0xd0>)
 8016d18:	f240 2281 	movw	r2, #641	@ 0x281
 8016d1c:	4929      	ldr	r1, [pc, #164]	@ (8016dc4 <udp_sendto_if+0xdc>)
 8016d1e:	4828      	ldr	r0, [pc, #160]	@ (8016dc0 <udp_sendto_if+0xd8>)
 8016d20:	f005 fd86 	bl	801c830 <iprintf>
 8016d24:	f06f 030f 	mvn.w	r3, #15
 8016d28:	e042      	b.n	8016db0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d109      	bne.n	8016d44 <udp_sendto_if+0x5c>
 8016d30:	4b21      	ldr	r3, [pc, #132]	@ (8016db8 <udp_sendto_if+0xd0>)
 8016d32:	f240 2282 	movw	r2, #642	@ 0x282
 8016d36:	4924      	ldr	r1, [pc, #144]	@ (8016dc8 <udp_sendto_if+0xe0>)
 8016d38:	4821      	ldr	r0, [pc, #132]	@ (8016dc0 <udp_sendto_if+0xd8>)
 8016d3a:	f005 fd79 	bl	801c830 <iprintf>
 8016d3e:	f06f 030f 	mvn.w	r3, #15
 8016d42:	e035      	b.n	8016db0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016d44:	6a3b      	ldr	r3, [r7, #32]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d109      	bne.n	8016d5e <udp_sendto_if+0x76>
 8016d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8016db8 <udp_sendto_if+0xd0>)
 8016d4c:	f240 2283 	movw	r2, #643	@ 0x283
 8016d50:	491e      	ldr	r1, [pc, #120]	@ (8016dcc <udp_sendto_if+0xe4>)
 8016d52:	481b      	ldr	r0, [pc, #108]	@ (8016dc0 <udp_sendto_if+0xd8>)
 8016d54:	f005 fd6c 	bl	801c830 <iprintf>
 8016d58:	f06f 030f 	mvn.w	r3, #15
 8016d5c:	e028      	b.n	8016db0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d009      	beq.n	8016d78 <udp_sendto_if+0x90>
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d005      	beq.n	8016d78 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016d74:	2be0      	cmp	r3, #224	@ 0xe0
 8016d76:	d103      	bne.n	8016d80 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016d78:	6a3b      	ldr	r3, [r7, #32]
 8016d7a:	3304      	adds	r3, #4
 8016d7c:	617b      	str	r3, [r7, #20]
 8016d7e:	e00b      	b.n	8016d98 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	681a      	ldr	r2, [r3, #0]
 8016d84:	6a3b      	ldr	r3, [r7, #32]
 8016d86:	3304      	adds	r3, #4
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	d002      	beq.n	8016d94 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016d8e:	f06f 0303 	mvn.w	r3, #3
 8016d92:	e00d      	b.n	8016db0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016d98:	887a      	ldrh	r2, [r7, #2]
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	9301      	str	r3, [sp, #4]
 8016d9e:	6a3b      	ldr	r3, [r7, #32]
 8016da0:	9300      	str	r3, [sp, #0]
 8016da2:	4613      	mov	r3, r2
 8016da4:	687a      	ldr	r2, [r7, #4]
 8016da6:	68b9      	ldr	r1, [r7, #8]
 8016da8:	68f8      	ldr	r0, [r7, #12]
 8016daa:	f000 f811 	bl	8016dd0 <udp_sendto_if_src>
 8016dae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016db0:	4618      	mov	r0, r3
 8016db2:	3718      	adds	r7, #24
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}
 8016db8:	080215d8 	.word	0x080215d8
 8016dbc:	0802174c 	.word	0x0802174c
 8016dc0:	0802162c 	.word	0x0802162c
 8016dc4:	08021768 	.word	0x08021768
 8016dc8:	08021784 	.word	0x08021784
 8016dcc:	080217a4 	.word	0x080217a4

08016dd0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b08c      	sub	sp, #48	@ 0x30
 8016dd4:	af04      	add	r7, sp, #16
 8016dd6:	60f8      	str	r0, [r7, #12]
 8016dd8:	60b9      	str	r1, [r7, #8]
 8016dda:	607a      	str	r2, [r7, #4]
 8016ddc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d109      	bne.n	8016df8 <udp_sendto_if_src+0x28>
 8016de4:	4b65      	ldr	r3, [pc, #404]	@ (8016f7c <udp_sendto_if_src+0x1ac>)
 8016de6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8016dea:	4965      	ldr	r1, [pc, #404]	@ (8016f80 <udp_sendto_if_src+0x1b0>)
 8016dec:	4865      	ldr	r0, [pc, #404]	@ (8016f84 <udp_sendto_if_src+0x1b4>)
 8016dee:	f005 fd1f 	bl	801c830 <iprintf>
 8016df2:	f06f 030f 	mvn.w	r3, #15
 8016df6:	e0bc      	b.n	8016f72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016df8:	68bb      	ldr	r3, [r7, #8]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d109      	bne.n	8016e12 <udp_sendto_if_src+0x42>
 8016dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8016f7c <udp_sendto_if_src+0x1ac>)
 8016e00:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8016e04:	4960      	ldr	r1, [pc, #384]	@ (8016f88 <udp_sendto_if_src+0x1b8>)
 8016e06:	485f      	ldr	r0, [pc, #380]	@ (8016f84 <udp_sendto_if_src+0x1b4>)
 8016e08:	f005 fd12 	bl	801c830 <iprintf>
 8016e0c:	f06f 030f 	mvn.w	r3, #15
 8016e10:	e0af      	b.n	8016f72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d109      	bne.n	8016e2c <udp_sendto_if_src+0x5c>
 8016e18:	4b58      	ldr	r3, [pc, #352]	@ (8016f7c <udp_sendto_if_src+0x1ac>)
 8016e1a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8016e1e:	495b      	ldr	r1, [pc, #364]	@ (8016f8c <udp_sendto_if_src+0x1bc>)
 8016e20:	4858      	ldr	r0, [pc, #352]	@ (8016f84 <udp_sendto_if_src+0x1b4>)
 8016e22:	f005 fd05 	bl	801c830 <iprintf>
 8016e26:	f06f 030f 	mvn.w	r3, #15
 8016e2a:	e0a2      	b.n	8016f72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d109      	bne.n	8016e46 <udp_sendto_if_src+0x76>
 8016e32:	4b52      	ldr	r3, [pc, #328]	@ (8016f7c <udp_sendto_if_src+0x1ac>)
 8016e34:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8016e38:	4955      	ldr	r1, [pc, #340]	@ (8016f90 <udp_sendto_if_src+0x1c0>)
 8016e3a:	4852      	ldr	r0, [pc, #328]	@ (8016f84 <udp_sendto_if_src+0x1b4>)
 8016e3c:	f005 fcf8 	bl	801c830 <iprintf>
 8016e40:	f06f 030f 	mvn.w	r3, #15
 8016e44:	e095      	b.n	8016f72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8016e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d109      	bne.n	8016e60 <udp_sendto_if_src+0x90>
 8016e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8016f7c <udp_sendto_if_src+0x1ac>)
 8016e4e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8016e52:	4950      	ldr	r1, [pc, #320]	@ (8016f94 <udp_sendto_if_src+0x1c4>)
 8016e54:	484b      	ldr	r0, [pc, #300]	@ (8016f84 <udp_sendto_if_src+0x1b4>)
 8016e56:	f005 fceb 	bl	801c830 <iprintf>
 8016e5a:	f06f 030f 	mvn.w	r3, #15
 8016e5e:	e088      	b.n	8016f72 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	8a5b      	ldrh	r3, [r3, #18]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d10f      	bne.n	8016e88 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016e68:	68f9      	ldr	r1, [r7, #12]
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	8a5b      	ldrh	r3, [r3, #18]
 8016e6e:	461a      	mov	r2, r3
 8016e70:	68f8      	ldr	r0, [r7, #12]
 8016e72:	f000 f893 	bl	8016f9c <udp_bind>
 8016e76:	4603      	mov	r3, r0
 8016e78:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016e7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d002      	beq.n	8016e88 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8016e82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016e86:	e074      	b.n	8016f72 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	891b      	ldrh	r3, [r3, #8]
 8016e8c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8016e90:	4293      	cmp	r3, r2
 8016e92:	d902      	bls.n	8016e9a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016e94:	f04f 33ff 	mov.w	r3, #4294967295
 8016e98:	e06b      	b.n	8016f72 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016e9a:	2108      	movs	r1, #8
 8016e9c:	68b8      	ldr	r0, [r7, #8]
 8016e9e:	f7f9 fdf3 	bl	8010a88 <pbuf_add_header>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d015      	beq.n	8016ed4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016ea8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016eac:	2108      	movs	r1, #8
 8016eae:	2022      	movs	r0, #34	@ 0x22
 8016eb0:	f7f9 fb98 	bl	80105e4 <pbuf_alloc>
 8016eb4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016eb6:	69fb      	ldr	r3, [r7, #28]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d102      	bne.n	8016ec2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8016ec0:	e057      	b.n	8016f72 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8016ec2:	68bb      	ldr	r3, [r7, #8]
 8016ec4:	891b      	ldrh	r3, [r3, #8]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d006      	beq.n	8016ed8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016eca:	68b9      	ldr	r1, [r7, #8]
 8016ecc:	69f8      	ldr	r0, [r7, #28]
 8016ece:	f7f9 ff95 	bl	8010dfc <pbuf_chain>
 8016ed2:	e001      	b.n	8016ed8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016ed4:	68bb      	ldr	r3, [r7, #8]
 8016ed6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016ed8:	69fb      	ldr	r3, [r7, #28]
 8016eda:	895b      	ldrh	r3, [r3, #10]
 8016edc:	2b07      	cmp	r3, #7
 8016ede:	d806      	bhi.n	8016eee <udp_sendto_if_src+0x11e>
 8016ee0:	4b26      	ldr	r3, [pc, #152]	@ (8016f7c <udp_sendto_if_src+0x1ac>)
 8016ee2:	f240 320d 	movw	r2, #781	@ 0x30d
 8016ee6:	492c      	ldr	r1, [pc, #176]	@ (8016f98 <udp_sendto_if_src+0x1c8>)
 8016ee8:	4826      	ldr	r0, [pc, #152]	@ (8016f84 <udp_sendto_if_src+0x1b4>)
 8016eea:	f005 fca1 	bl	801c830 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016eee:	69fb      	ldr	r3, [r7, #28]
 8016ef0:	685b      	ldr	r3, [r3, #4]
 8016ef2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	8a5b      	ldrh	r3, [r3, #18]
 8016ef8:	4618      	mov	r0, r3
 8016efa:	f7f8 f939 	bl	800f170 <lwip_htons>
 8016efe:	4603      	mov	r3, r0
 8016f00:	461a      	mov	r2, r3
 8016f02:	697b      	ldr	r3, [r7, #20]
 8016f04:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8016f06:	887b      	ldrh	r3, [r7, #2]
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f7f8 f931 	bl	800f170 <lwip_htons>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	461a      	mov	r2, r3
 8016f12:	697b      	ldr	r3, [r7, #20]
 8016f14:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016f16:	697b      	ldr	r3, [r7, #20]
 8016f18:	2200      	movs	r2, #0
 8016f1a:	719a      	strb	r2, [r3, #6]
 8016f1c:	2200      	movs	r2, #0
 8016f1e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016f20:	69fb      	ldr	r3, [r7, #28]
 8016f22:	891b      	ldrh	r3, [r3, #8]
 8016f24:	4618      	mov	r0, r3
 8016f26:	f7f8 f923 	bl	800f170 <lwip_htons>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	461a      	mov	r2, r3
 8016f2e:	697b      	ldr	r3, [r7, #20]
 8016f30:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016f32:	2311      	movs	r3, #17
 8016f34:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	7adb      	ldrb	r3, [r3, #11]
 8016f3a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	7a9b      	ldrb	r3, [r3, #10]
 8016f40:	7cb9      	ldrb	r1, [r7, #18]
 8016f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016f44:	9202      	str	r2, [sp, #8]
 8016f46:	7cfa      	ldrb	r2, [r7, #19]
 8016f48:	9201      	str	r2, [sp, #4]
 8016f4a:	9300      	str	r3, [sp, #0]
 8016f4c:	460b      	mov	r3, r1
 8016f4e:	687a      	ldr	r2, [r7, #4]
 8016f50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016f52:	69f8      	ldr	r0, [r7, #28]
 8016f54:	f003 fc3a 	bl	801a7cc <ip4_output_if_src>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016f5c:	69fa      	ldr	r2, [r7, #28]
 8016f5e:	68bb      	ldr	r3, [r7, #8]
 8016f60:	429a      	cmp	r2, r3
 8016f62:	d004      	beq.n	8016f6e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8016f64:	69f8      	ldr	r0, [r7, #28]
 8016f66:	f7f9 fe25 	bl	8010bb4 <pbuf_free>
    q = NULL;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016f6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016f72:	4618      	mov	r0, r3
 8016f74:	3720      	adds	r7, #32
 8016f76:	46bd      	mov	sp, r7
 8016f78:	bd80      	pop	{r7, pc}
 8016f7a:	bf00      	nop
 8016f7c:	080215d8 	.word	0x080215d8
 8016f80:	080217c4 	.word	0x080217c4
 8016f84:	0802162c 	.word	0x0802162c
 8016f88:	080217e4 	.word	0x080217e4
 8016f8c:	08021804 	.word	0x08021804
 8016f90:	08021828 	.word	0x08021828
 8016f94:	0802184c 	.word	0x0802184c
 8016f98:	08021870 	.word	0x08021870

08016f9c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b086      	sub	sp, #24
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	60f8      	str	r0, [r7, #12]
 8016fa4:	60b9      	str	r1, [r7, #8]
 8016fa6:	4613      	mov	r3, r2
 8016fa8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016faa:	68bb      	ldr	r3, [r7, #8]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d101      	bne.n	8016fb4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016fb0:	4b39      	ldr	r3, [pc, #228]	@ (8017098 <udp_bind+0xfc>)
 8016fb2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d109      	bne.n	8016fce <udp_bind+0x32>
 8016fba:	4b38      	ldr	r3, [pc, #224]	@ (801709c <udp_bind+0x100>)
 8016fbc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8016fc0:	4937      	ldr	r1, [pc, #220]	@ (80170a0 <udp_bind+0x104>)
 8016fc2:	4838      	ldr	r0, [pc, #224]	@ (80170a4 <udp_bind+0x108>)
 8016fc4:	f005 fc34 	bl	801c830 <iprintf>
 8016fc8:	f06f 030f 	mvn.w	r3, #15
 8016fcc:	e060      	b.n	8017090 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016fce:	2300      	movs	r3, #0
 8016fd0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016fd2:	4b35      	ldr	r3, [pc, #212]	@ (80170a8 <udp_bind+0x10c>)
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	617b      	str	r3, [r7, #20]
 8016fd8:	e009      	b.n	8016fee <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016fda:	68fa      	ldr	r2, [r7, #12]
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	429a      	cmp	r2, r3
 8016fe0:	d102      	bne.n	8016fe8 <udp_bind+0x4c>
      rebind = 1;
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8016fe6:	e005      	b.n	8016ff4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016fe8:	697b      	ldr	r3, [r7, #20]
 8016fea:	68db      	ldr	r3, [r3, #12]
 8016fec:	617b      	str	r3, [r7, #20]
 8016fee:	697b      	ldr	r3, [r7, #20]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d1f2      	bne.n	8016fda <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016ff4:	88fb      	ldrh	r3, [r7, #6]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d109      	bne.n	801700e <udp_bind+0x72>
    port = udp_new_port();
 8016ffa:	f7ff fc51 	bl	80168a0 <udp_new_port>
 8016ffe:	4603      	mov	r3, r0
 8017000:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017002:	88fb      	ldrh	r3, [r7, #6]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d12c      	bne.n	8017062 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017008:	f06f 0307 	mvn.w	r3, #7
 801700c:	e040      	b.n	8017090 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801700e:	4b26      	ldr	r3, [pc, #152]	@ (80170a8 <udp_bind+0x10c>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	617b      	str	r3, [r7, #20]
 8017014:	e022      	b.n	801705c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8017016:	68fa      	ldr	r2, [r7, #12]
 8017018:	697b      	ldr	r3, [r7, #20]
 801701a:	429a      	cmp	r2, r3
 801701c:	d01b      	beq.n	8017056 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801701e:	697b      	ldr	r3, [r7, #20]
 8017020:	8a5b      	ldrh	r3, [r3, #18]
 8017022:	88fa      	ldrh	r2, [r7, #6]
 8017024:	429a      	cmp	r2, r3
 8017026:	d116      	bne.n	8017056 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017028:	697b      	ldr	r3, [r7, #20]
 801702a:	681a      	ldr	r2, [r3, #0]
 801702c:	68bb      	ldr	r3, [r7, #8]
 801702e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017030:	429a      	cmp	r2, r3
 8017032:	d00d      	beq.n	8017050 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d00a      	beq.n	8017050 <udp_bind+0xb4>
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d006      	beq.n	8017050 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017042:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017044:	2b00      	cmp	r3, #0
 8017046:	d003      	beq.n	8017050 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017048:	697b      	ldr	r3, [r7, #20]
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d102      	bne.n	8017056 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017050:	f06f 0307 	mvn.w	r3, #7
 8017054:	e01c      	b.n	8017090 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017056:	697b      	ldr	r3, [r7, #20]
 8017058:	68db      	ldr	r3, [r3, #12]
 801705a:	617b      	str	r3, [r7, #20]
 801705c:	697b      	ldr	r3, [r7, #20]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d1d9      	bne.n	8017016 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d002      	beq.n	801706e <udp_bind+0xd2>
 8017068:	68bb      	ldr	r3, [r7, #8]
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	e000      	b.n	8017070 <udp_bind+0xd4>
 801706e:	2300      	movs	r3, #0
 8017070:	68fa      	ldr	r2, [r7, #12]
 8017072:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	88fa      	ldrh	r2, [r7, #6]
 8017078:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801707a:	7cfb      	ldrb	r3, [r7, #19]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d106      	bne.n	801708e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017080:	4b09      	ldr	r3, [pc, #36]	@ (80170a8 <udp_bind+0x10c>)
 8017082:	681a      	ldr	r2, [r3, #0]
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017088:	4a07      	ldr	r2, [pc, #28]	@ (80170a8 <udp_bind+0x10c>)
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801708e:	2300      	movs	r3, #0
}
 8017090:	4618      	mov	r0, r3
 8017092:	3718      	adds	r7, #24
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}
 8017098:	0806e194 	.word	0x0806e194
 801709c:	080215d8 	.word	0x080215d8
 80170a0:	080218a0 	.word	0x080218a0
 80170a4:	0802162c 	.word	0x0802162c
 80170a8:	20013da8 	.word	0x20013da8

080170ac <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 80170ac:	b480      	push	{r7}
 80170ae:	b083      	sub	sp, #12
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
 80170b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 80170b6:	683b      	ldr	r3, [r7, #0]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d007      	beq.n	80170cc <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80170c2:	3301      	adds	r3, #1
 80170c4:	b2da      	uxtb	r2, r3
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 80170ca:	e002      	b.n	80170d2 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	2200      	movs	r2, #0
 80170d0:	721a      	strb	r2, [r3, #8]
}
 80170d2:	bf00      	nop
 80170d4:	370c      	adds	r7, #12
 80170d6:	46bd      	mov	sp, r7
 80170d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170dc:	4770      	bx	lr
	...

080170e0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b086      	sub	sp, #24
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	60f8      	str	r0, [r7, #12]
 80170e8:	60b9      	str	r1, [r7, #8]
 80170ea:	4613      	mov	r3, r2
 80170ec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d109      	bne.n	8017108 <udp_connect+0x28>
 80170f4:	4b2c      	ldr	r3, [pc, #176]	@ (80171a8 <udp_connect+0xc8>)
 80170f6:	f240 4235 	movw	r2, #1077	@ 0x435
 80170fa:	492c      	ldr	r1, [pc, #176]	@ (80171ac <udp_connect+0xcc>)
 80170fc:	482c      	ldr	r0, [pc, #176]	@ (80171b0 <udp_connect+0xd0>)
 80170fe:	f005 fb97 	bl	801c830 <iprintf>
 8017102:	f06f 030f 	mvn.w	r3, #15
 8017106:	e04b      	b.n	80171a0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017108:	68bb      	ldr	r3, [r7, #8]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d109      	bne.n	8017122 <udp_connect+0x42>
 801710e:	4b26      	ldr	r3, [pc, #152]	@ (80171a8 <udp_connect+0xc8>)
 8017110:	f240 4236 	movw	r2, #1078	@ 0x436
 8017114:	4927      	ldr	r1, [pc, #156]	@ (80171b4 <udp_connect+0xd4>)
 8017116:	4826      	ldr	r0, [pc, #152]	@ (80171b0 <udp_connect+0xd0>)
 8017118:	f005 fb8a 	bl	801c830 <iprintf>
 801711c:	f06f 030f 	mvn.w	r3, #15
 8017120:	e03e      	b.n	80171a0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	8a5b      	ldrh	r3, [r3, #18]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d10f      	bne.n	801714a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801712a:	68f9      	ldr	r1, [r7, #12]
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	8a5b      	ldrh	r3, [r3, #18]
 8017130:	461a      	mov	r2, r3
 8017132:	68f8      	ldr	r0, [r7, #12]
 8017134:	f7ff ff32 	bl	8016f9c <udp_bind>
 8017138:	4603      	mov	r3, r0
 801713a:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 801713c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d002      	beq.n	801714a <udp_connect+0x6a>
      return err;
 8017144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017148:	e02a      	b.n	80171a0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801714a:	68bb      	ldr	r3, [r7, #8]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d002      	beq.n	8017156 <udp_connect+0x76>
 8017150:	68bb      	ldr	r3, [r7, #8]
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	e000      	b.n	8017158 <udp_connect+0x78>
 8017156:	2300      	movs	r3, #0
 8017158:	68fa      	ldr	r2, [r7, #12]
 801715a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	88fa      	ldrh	r2, [r7, #6]
 8017160:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	7c1b      	ldrb	r3, [r3, #16]
 8017166:	f043 0304 	orr.w	r3, r3, #4
 801716a:	b2da      	uxtb	r2, r3
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017170:	4b11      	ldr	r3, [pc, #68]	@ (80171b8 <udp_connect+0xd8>)
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	613b      	str	r3, [r7, #16]
 8017176:	e008      	b.n	801718a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8017178:	68fa      	ldr	r2, [r7, #12]
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	429a      	cmp	r2, r3
 801717e:	d101      	bne.n	8017184 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8017180:	2300      	movs	r3, #0
 8017182:	e00d      	b.n	80171a0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	68db      	ldr	r3, [r3, #12]
 8017188:	613b      	str	r3, [r7, #16]
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d1f3      	bne.n	8017178 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8017190:	4b09      	ldr	r3, [pc, #36]	@ (80171b8 <udp_connect+0xd8>)
 8017192:	681a      	ldr	r2, [r3, #0]
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8017198:	4a07      	ldr	r2, [pc, #28]	@ (80171b8 <udp_connect+0xd8>)
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801719e:	2300      	movs	r3, #0
}
 80171a0:	4618      	mov	r0, r3
 80171a2:	3718      	adds	r7, #24
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bd80      	pop	{r7, pc}
 80171a8:	080215d8 	.word	0x080215d8
 80171ac:	080218b8 	.word	0x080218b8
 80171b0:	0802162c 	.word	0x0802162c
 80171b4:	080218d4 	.word	0x080218d4
 80171b8:	20013da8 	.word	0x20013da8

080171bc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b082      	sub	sp, #8
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d107      	bne.n	80171da <udp_disconnect+0x1e>
 80171ca:	4b0d      	ldr	r3, [pc, #52]	@ (8017200 <udp_disconnect+0x44>)
 80171cc:	f240 426a 	movw	r2, #1130	@ 0x46a
 80171d0:	490c      	ldr	r1, [pc, #48]	@ (8017204 <udp_disconnect+0x48>)
 80171d2:	480d      	ldr	r0, [pc, #52]	@ (8017208 <udp_disconnect+0x4c>)
 80171d4:	f005 fb2c 	bl	801c830 <iprintf>
 80171d8:	e00f      	b.n	80171fa <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	2200      	movs	r2, #0
 80171de:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	2200      	movs	r2, #0
 80171e4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	2200      	movs	r2, #0
 80171ea:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	7c1b      	ldrb	r3, [r3, #16]
 80171f0:	f023 0304 	bic.w	r3, r3, #4
 80171f4:	b2da      	uxtb	r2, r3
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	741a      	strb	r2, [r3, #16]
}
 80171fa:	3708      	adds	r7, #8
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bd80      	pop	{r7, pc}
 8017200:	080215d8 	.word	0x080215d8
 8017204:	080218f0 	.word	0x080218f0
 8017208:	0802162c 	.word	0x0802162c

0801720c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b084      	sub	sp, #16
 8017210:	af00      	add	r7, sp, #0
 8017212:	60f8      	str	r0, [r7, #12]
 8017214:	60b9      	str	r1, [r7, #8]
 8017216:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d107      	bne.n	801722e <udp_recv+0x22>
 801721e:	4b08      	ldr	r3, [pc, #32]	@ (8017240 <udp_recv+0x34>)
 8017220:	f240 428a 	movw	r2, #1162	@ 0x48a
 8017224:	4907      	ldr	r1, [pc, #28]	@ (8017244 <udp_recv+0x38>)
 8017226:	4808      	ldr	r0, [pc, #32]	@ (8017248 <udp_recv+0x3c>)
 8017228:	f005 fb02 	bl	801c830 <iprintf>
 801722c:	e005      	b.n	801723a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	68ba      	ldr	r2, [r7, #8]
 8017232:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	687a      	ldr	r2, [r7, #4]
 8017238:	61da      	str	r2, [r3, #28]
}
 801723a:	3710      	adds	r7, #16
 801723c:	46bd      	mov	sp, r7
 801723e:	bd80      	pop	{r7, pc}
 8017240:	080215d8 	.word	0x080215d8
 8017244:	0802190c 	.word	0x0802190c
 8017248:	0802162c 	.word	0x0802162c

0801724c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b084      	sub	sp, #16
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d107      	bne.n	801726a <udp_remove+0x1e>
 801725a:	4b19      	ldr	r3, [pc, #100]	@ (80172c0 <udp_remove+0x74>)
 801725c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8017260:	4918      	ldr	r1, [pc, #96]	@ (80172c4 <udp_remove+0x78>)
 8017262:	4819      	ldr	r0, [pc, #100]	@ (80172c8 <udp_remove+0x7c>)
 8017264:	f005 fae4 	bl	801c830 <iprintf>
 8017268:	e026      	b.n	80172b8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801726a:	4b18      	ldr	r3, [pc, #96]	@ (80172cc <udp_remove+0x80>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	687a      	ldr	r2, [r7, #4]
 8017270:	429a      	cmp	r2, r3
 8017272:	d105      	bne.n	8017280 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8017274:	4b15      	ldr	r3, [pc, #84]	@ (80172cc <udp_remove+0x80>)
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	68db      	ldr	r3, [r3, #12]
 801727a:	4a14      	ldr	r2, [pc, #80]	@ (80172cc <udp_remove+0x80>)
 801727c:	6013      	str	r3, [r2, #0]
 801727e:	e017      	b.n	80172b0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017280:	4b12      	ldr	r3, [pc, #72]	@ (80172cc <udp_remove+0x80>)
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	60fb      	str	r3, [r7, #12]
 8017286:	e010      	b.n	80172aa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	68db      	ldr	r3, [r3, #12]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d009      	beq.n	80172a4 <udp_remove+0x58>
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	68db      	ldr	r3, [r3, #12]
 8017294:	687a      	ldr	r2, [r7, #4]
 8017296:	429a      	cmp	r2, r3
 8017298:	d104      	bne.n	80172a4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	68da      	ldr	r2, [r3, #12]
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	60da      	str	r2, [r3, #12]
        break;
 80172a2:	e005      	b.n	80172b0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	68db      	ldr	r3, [r3, #12]
 80172a8:	60fb      	str	r3, [r7, #12]
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d1eb      	bne.n	8017288 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80172b0:	6879      	ldr	r1, [r7, #4]
 80172b2:	2000      	movs	r0, #0
 80172b4:	f7f8 fddc 	bl	800fe70 <memp_free>
}
 80172b8:	3710      	adds	r7, #16
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}
 80172be:	bf00      	nop
 80172c0:	080215d8 	.word	0x080215d8
 80172c4:	08021924 	.word	0x08021924
 80172c8:	0802162c 	.word	0x0802162c
 80172cc:	20013da8 	.word	0x20013da8

080172d0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b082      	sub	sp, #8
 80172d4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80172d6:	2000      	movs	r0, #0
 80172d8:	f7f8 fd78 	bl	800fdcc <memp_malloc>
 80172dc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d007      	beq.n	80172f4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80172e4:	2220      	movs	r2, #32
 80172e6:	2100      	movs	r1, #0
 80172e8:	6878      	ldr	r0, [r7, #4]
 80172ea:	f005 fc03 	bl	801caf4 <memset>
    pcb->ttl = UDP_TTL;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	22ff      	movs	r2, #255	@ 0xff
 80172f2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80172f4:	687b      	ldr	r3, [r7, #4]
}
 80172f6:	4618      	mov	r0, r3
 80172f8:	3708      	adds	r7, #8
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bd80      	pop	{r7, pc}
	...

08017300 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017300:	b480      	push	{r7}
 8017302:	b085      	sub	sp, #20
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]
 8017308:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d01e      	beq.n	801734e <udp_netif_ip_addr_changed+0x4e>
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d01a      	beq.n	801734e <udp_netif_ip_addr_changed+0x4e>
 8017318:	683b      	ldr	r3, [r7, #0]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d017      	beq.n	801734e <udp_netif_ip_addr_changed+0x4e>
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d013      	beq.n	801734e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017326:	4b0d      	ldr	r3, [pc, #52]	@ (801735c <udp_netif_ip_addr_changed+0x5c>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	60fb      	str	r3, [r7, #12]
 801732c:	e00c      	b.n	8017348 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	681a      	ldr	r2, [r3, #0]
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	429a      	cmp	r2, r3
 8017338:	d103      	bne.n	8017342 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801733a:	683b      	ldr	r3, [r7, #0]
 801733c:	681a      	ldr	r2, [r3, #0]
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	68db      	ldr	r3, [r3, #12]
 8017346:	60fb      	str	r3, [r7, #12]
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d1ef      	bne.n	801732e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801734e:	bf00      	nop
 8017350:	3714      	adds	r7, #20
 8017352:	46bd      	mov	sp, r7
 8017354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017358:	4770      	bx	lr
 801735a:	bf00      	nop
 801735c:	20013da8 	.word	0x20013da8

08017360 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8017360:	b580      	push	{r7, lr}
 8017362:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8017364:	4b20      	ldr	r3, [pc, #128]	@ (80173e8 <dhcp_inc_pcb_refcount+0x88>)
 8017366:	781b      	ldrb	r3, [r3, #0]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d133      	bne.n	80173d4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801736c:	4b1f      	ldr	r3, [pc, #124]	@ (80173ec <dhcp_inc_pcb_refcount+0x8c>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d005      	beq.n	8017380 <dhcp_inc_pcb_refcount+0x20>
 8017374:	4b1e      	ldr	r3, [pc, #120]	@ (80173f0 <dhcp_inc_pcb_refcount+0x90>)
 8017376:	22e5      	movs	r2, #229	@ 0xe5
 8017378:	491e      	ldr	r1, [pc, #120]	@ (80173f4 <dhcp_inc_pcb_refcount+0x94>)
 801737a:	481f      	ldr	r0, [pc, #124]	@ (80173f8 <dhcp_inc_pcb_refcount+0x98>)
 801737c:	f005 fa58 	bl	801c830 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8017380:	f7ff ffa6 	bl	80172d0 <udp_new>
 8017384:	4603      	mov	r3, r0
 8017386:	4a19      	ldr	r2, [pc, #100]	@ (80173ec <dhcp_inc_pcb_refcount+0x8c>)
 8017388:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801738a:	4b18      	ldr	r3, [pc, #96]	@ (80173ec <dhcp_inc_pcb_refcount+0x8c>)
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d102      	bne.n	8017398 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8017392:	f04f 33ff 	mov.w	r3, #4294967295
 8017396:	e024      	b.n	80173e2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8017398:	4b14      	ldr	r3, [pc, #80]	@ (80173ec <dhcp_inc_pcb_refcount+0x8c>)
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	7a5a      	ldrb	r2, [r3, #9]
 801739e:	4b13      	ldr	r3, [pc, #76]	@ (80173ec <dhcp_inc_pcb_refcount+0x8c>)
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	f042 0220 	orr.w	r2, r2, #32
 80173a6:	b2d2      	uxtb	r2, r2
 80173a8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80173aa:	4b10      	ldr	r3, [pc, #64]	@ (80173ec <dhcp_inc_pcb_refcount+0x8c>)
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	2244      	movs	r2, #68	@ 0x44
 80173b0:	4912      	ldr	r1, [pc, #72]	@ (80173fc <dhcp_inc_pcb_refcount+0x9c>)
 80173b2:	4618      	mov	r0, r3
 80173b4:	f7ff fdf2 	bl	8016f9c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80173b8:	4b0c      	ldr	r3, [pc, #48]	@ (80173ec <dhcp_inc_pcb_refcount+0x8c>)
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	2243      	movs	r2, #67	@ 0x43
 80173be:	490f      	ldr	r1, [pc, #60]	@ (80173fc <dhcp_inc_pcb_refcount+0x9c>)
 80173c0:	4618      	mov	r0, r3
 80173c2:	f7ff fe8d 	bl	80170e0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80173c6:	4b09      	ldr	r3, [pc, #36]	@ (80173ec <dhcp_inc_pcb_refcount+0x8c>)
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	2200      	movs	r2, #0
 80173cc:	490c      	ldr	r1, [pc, #48]	@ (8017400 <dhcp_inc_pcb_refcount+0xa0>)
 80173ce:	4618      	mov	r0, r3
 80173d0:	f7ff ff1c 	bl	801720c <udp_recv>
  }

  dhcp_pcb_refcount++;
 80173d4:	4b04      	ldr	r3, [pc, #16]	@ (80173e8 <dhcp_inc_pcb_refcount+0x88>)
 80173d6:	781b      	ldrb	r3, [r3, #0]
 80173d8:	3301      	adds	r3, #1
 80173da:	b2da      	uxtb	r2, r3
 80173dc:	4b02      	ldr	r3, [pc, #8]	@ (80173e8 <dhcp_inc_pcb_refcount+0x88>)
 80173de:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80173e0:	2300      	movs	r3, #0
}
 80173e2:	4618      	mov	r0, r3
 80173e4:	bd80      	pop	{r7, pc}
 80173e6:	bf00      	nop
 80173e8:	20013dd8 	.word	0x20013dd8
 80173ec:	20013dd4 	.word	0x20013dd4
 80173f0:	0802193c 	.word	0x0802193c
 80173f4:	08021974 	.word	0x08021974
 80173f8:	0802199c 	.word	0x0802199c
 80173fc:	0806e194 	.word	0x0806e194
 8017400:	08018cc1 	.word	0x08018cc1

08017404 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8017408:	4b0e      	ldr	r3, [pc, #56]	@ (8017444 <dhcp_dec_pcb_refcount+0x40>)
 801740a:	781b      	ldrb	r3, [r3, #0]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d105      	bne.n	801741c <dhcp_dec_pcb_refcount+0x18>
 8017410:	4b0d      	ldr	r3, [pc, #52]	@ (8017448 <dhcp_dec_pcb_refcount+0x44>)
 8017412:	22ff      	movs	r2, #255	@ 0xff
 8017414:	490d      	ldr	r1, [pc, #52]	@ (801744c <dhcp_dec_pcb_refcount+0x48>)
 8017416:	480e      	ldr	r0, [pc, #56]	@ (8017450 <dhcp_dec_pcb_refcount+0x4c>)
 8017418:	f005 fa0a 	bl	801c830 <iprintf>
  dhcp_pcb_refcount--;
 801741c:	4b09      	ldr	r3, [pc, #36]	@ (8017444 <dhcp_dec_pcb_refcount+0x40>)
 801741e:	781b      	ldrb	r3, [r3, #0]
 8017420:	3b01      	subs	r3, #1
 8017422:	b2da      	uxtb	r2, r3
 8017424:	4b07      	ldr	r3, [pc, #28]	@ (8017444 <dhcp_dec_pcb_refcount+0x40>)
 8017426:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8017428:	4b06      	ldr	r3, [pc, #24]	@ (8017444 <dhcp_dec_pcb_refcount+0x40>)
 801742a:	781b      	ldrb	r3, [r3, #0]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d107      	bne.n	8017440 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8017430:	4b08      	ldr	r3, [pc, #32]	@ (8017454 <dhcp_dec_pcb_refcount+0x50>)
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	4618      	mov	r0, r3
 8017436:	f7ff ff09 	bl	801724c <udp_remove>
    dhcp_pcb = NULL;
 801743a:	4b06      	ldr	r3, [pc, #24]	@ (8017454 <dhcp_dec_pcb_refcount+0x50>)
 801743c:	2200      	movs	r2, #0
 801743e:	601a      	str	r2, [r3, #0]
  }
}
 8017440:	bf00      	nop
 8017442:	bd80      	pop	{r7, pc}
 8017444:	20013dd8 	.word	0x20013dd8
 8017448:	0802193c 	.word	0x0802193c
 801744c:	080219c4 	.word	0x080219c4
 8017450:	0802199c 	.word	0x0802199c
 8017454:	20013dd4 	.word	0x20013dd4

08017458 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b084      	sub	sp, #16
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017464:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8017466:	210c      	movs	r1, #12
 8017468:	68f8      	ldr	r0, [r7, #12]
 801746a:	f001 f85a 	bl	8018522 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801746e:	4b06      	ldr	r3, [pc, #24]	@ (8017488 <dhcp_handle_nak+0x30>)
 8017470:	4a05      	ldr	r2, [pc, #20]	@ (8017488 <dhcp_handle_nak+0x30>)
 8017472:	4905      	ldr	r1, [pc, #20]	@ (8017488 <dhcp_handle_nak+0x30>)
 8017474:	6878      	ldr	r0, [r7, #4]
 8017476:	f7f8 fe9d 	bl	80101b4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801747a:	6878      	ldr	r0, [r7, #4]
 801747c:	f000 fc48 	bl	8017d10 <dhcp_discover>
}
 8017480:	bf00      	nop
 8017482:	3710      	adds	r7, #16
 8017484:	46bd      	mov	sp, r7
 8017486:	bd80      	pop	{r7, pc}
 8017488:	0806e194 	.word	0x0806e194

0801748c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b084      	sub	sp, #16
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017498:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801749a:	2108      	movs	r1, #8
 801749c:	68f8      	ldr	r0, [r7, #12]
 801749e:	f001 f840 	bl	8018522 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	331c      	adds	r3, #28
 80174a6:	2200      	movs	r2, #0
 80174a8:	4619      	mov	r1, r3
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f002 fbbc 	bl	8019c28 <etharp_query>
 80174b0:	4603      	mov	r3, r0
 80174b2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	799b      	ldrb	r3, [r3, #6]
 80174b8:	2bff      	cmp	r3, #255	@ 0xff
 80174ba:	d005      	beq.n	80174c8 <dhcp_check+0x3c>
    dhcp->tries++;
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	799b      	ldrb	r3, [r3, #6]
 80174c0:	3301      	adds	r3, #1
 80174c2:	b2da      	uxtb	r2, r3
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80174c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80174cc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80174ce:	893b      	ldrh	r3, [r7, #8]
 80174d0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80174d4:	4a06      	ldr	r2, [pc, #24]	@ (80174f0 <dhcp_check+0x64>)
 80174d6:	fb82 1203 	smull	r1, r2, r2, r3
 80174da:	1152      	asrs	r2, r2, #5
 80174dc:	17db      	asrs	r3, r3, #31
 80174de:	1ad3      	subs	r3, r2, r3
 80174e0:	b29a      	uxth	r2, r3
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80174e6:	bf00      	nop
 80174e8:	3710      	adds	r7, #16
 80174ea:	46bd      	mov	sp, r7
 80174ec:	bd80      	pop	{r7, pc}
 80174ee:	bf00      	nop
 80174f0:	10624dd3 	.word	0x10624dd3

080174f4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b084      	sub	sp, #16
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
 80174fc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017502:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8017504:	4b0c      	ldr	r3, [pc, #48]	@ (8017538 <dhcp_handle_offer+0x44>)
 8017506:	789b      	ldrb	r3, [r3, #2]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d011      	beq.n	8017530 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	2200      	movs	r2, #0
 8017510:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8017512:	4b0a      	ldr	r3, [pc, #40]	@ (801753c <dhcp_handle_offer+0x48>)
 8017514:	689b      	ldr	r3, [r3, #8]
 8017516:	4618      	mov	r0, r3
 8017518:	f7f7 fe3f 	bl	800f19a <lwip_htonl>
 801751c:	4602      	mov	r2, r0
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8017522:	683b      	ldr	r3, [r7, #0]
 8017524:	691a      	ldr	r2, [r3, #16]
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	f000 f808 	bl	8017540 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8017530:	bf00      	nop
 8017532:	3710      	adds	r7, #16
 8017534:	46bd      	mov	sp, r7
 8017536:	bd80      	pop	{r7, pc}
 8017538:	20013dcc 	.word	0x20013dcc
 801753c:	20013dac 	.word	0x20013dac

08017540 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8017540:	b5b0      	push	{r4, r5, r7, lr}
 8017542:	b08a      	sub	sp, #40	@ 0x28
 8017544:	af02      	add	r7, sp, #8
 8017546:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d109      	bne.n	8017562 <dhcp_select+0x22>
 801754e:	4b71      	ldr	r3, [pc, #452]	@ (8017714 <dhcp_select+0x1d4>)
 8017550:	f240 1277 	movw	r2, #375	@ 0x177
 8017554:	4970      	ldr	r1, [pc, #448]	@ (8017718 <dhcp_select+0x1d8>)
 8017556:	4871      	ldr	r0, [pc, #452]	@ (801771c <dhcp_select+0x1dc>)
 8017558:	f005 f96a 	bl	801c830 <iprintf>
 801755c:	f06f 030f 	mvn.w	r3, #15
 8017560:	e0d3      	b.n	801770a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017566:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8017568:	69bb      	ldr	r3, [r7, #24]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d109      	bne.n	8017582 <dhcp_select+0x42>
 801756e:	4b69      	ldr	r3, [pc, #420]	@ (8017714 <dhcp_select+0x1d4>)
 8017570:	f240 1279 	movw	r2, #377	@ 0x179
 8017574:	496a      	ldr	r1, [pc, #424]	@ (8017720 <dhcp_select+0x1e0>)
 8017576:	4869      	ldr	r0, [pc, #420]	@ (801771c <dhcp_select+0x1dc>)
 8017578:	f005 f95a 	bl	801c830 <iprintf>
 801757c:	f06f 0305 	mvn.w	r3, #5
 8017580:	e0c3      	b.n	801770a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8017582:	2101      	movs	r1, #1
 8017584:	69b8      	ldr	r0, [r7, #24]
 8017586:	f000 ffcc 	bl	8018522 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801758a:	f107 030c 	add.w	r3, r7, #12
 801758e:	2203      	movs	r2, #3
 8017590:	69b9      	ldr	r1, [r7, #24]
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f001 fc5e 	bl	8018e54 <dhcp_create_msg>
 8017598:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801759a:	697b      	ldr	r3, [r7, #20]
 801759c:	2b00      	cmp	r3, #0
 801759e:	f000 8085 	beq.w	80176ac <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80175a2:	697b      	ldr	r3, [r7, #20]
 80175a4:	685b      	ldr	r3, [r3, #4]
 80175a6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80175a8:	89b8      	ldrh	r0, [r7, #12]
 80175aa:	693b      	ldr	r3, [r7, #16]
 80175ac:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80175b0:	2302      	movs	r3, #2
 80175b2:	2239      	movs	r2, #57	@ 0x39
 80175b4:	f000 ffd0 	bl	8018558 <dhcp_option>
 80175b8:	4603      	mov	r3, r0
 80175ba:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80175bc:	89b8      	ldrh	r0, [r7, #12]
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80175c8:	461a      	mov	r2, r3
 80175ca:	f001 f81f 	bl	801860c <dhcp_option_short>
 80175ce:	4603      	mov	r3, r0
 80175d0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80175d2:	89b8      	ldrh	r0, [r7, #12]
 80175d4:	693b      	ldr	r3, [r7, #16]
 80175d6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80175da:	2304      	movs	r3, #4
 80175dc:	2232      	movs	r2, #50	@ 0x32
 80175de:	f000 ffbb 	bl	8018558 <dhcp_option>
 80175e2:	4603      	mov	r3, r0
 80175e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80175e6:	89bc      	ldrh	r4, [r7, #12]
 80175e8:	693b      	ldr	r3, [r7, #16]
 80175ea:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80175ee:	69bb      	ldr	r3, [r7, #24]
 80175f0:	69db      	ldr	r3, [r3, #28]
 80175f2:	4618      	mov	r0, r3
 80175f4:	f7f7 fdd1 	bl	800f19a <lwip_htonl>
 80175f8:	4603      	mov	r3, r0
 80175fa:	461a      	mov	r2, r3
 80175fc:	4629      	mov	r1, r5
 80175fe:	4620      	mov	r0, r4
 8017600:	f001 f836 	bl	8018670 <dhcp_option_long>
 8017604:	4603      	mov	r3, r0
 8017606:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8017608:	89b8      	ldrh	r0, [r7, #12]
 801760a:	693b      	ldr	r3, [r7, #16]
 801760c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017610:	2304      	movs	r3, #4
 8017612:	2236      	movs	r2, #54	@ 0x36
 8017614:	f000 ffa0 	bl	8018558 <dhcp_option>
 8017618:	4603      	mov	r3, r0
 801761a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801761c:	89bc      	ldrh	r4, [r7, #12]
 801761e:	693b      	ldr	r3, [r7, #16]
 8017620:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8017624:	69bb      	ldr	r3, [r7, #24]
 8017626:	699b      	ldr	r3, [r3, #24]
 8017628:	4618      	mov	r0, r3
 801762a:	f7f7 fdb6 	bl	800f19a <lwip_htonl>
 801762e:	4603      	mov	r3, r0
 8017630:	461a      	mov	r2, r3
 8017632:	4629      	mov	r1, r5
 8017634:	4620      	mov	r0, r4
 8017636:	f001 f81b 	bl	8018670 <dhcp_option_long>
 801763a:	4603      	mov	r3, r0
 801763c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801763e:	89b8      	ldrh	r0, [r7, #12]
 8017640:	693b      	ldr	r3, [r7, #16]
 8017642:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017646:	2303      	movs	r3, #3
 8017648:	2237      	movs	r2, #55	@ 0x37
 801764a:	f000 ff85 	bl	8018558 <dhcp_option>
 801764e:	4603      	mov	r3, r0
 8017650:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017652:	2300      	movs	r3, #0
 8017654:	77fb      	strb	r3, [r7, #31]
 8017656:	e00e      	b.n	8017676 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017658:	89b8      	ldrh	r0, [r7, #12]
 801765a:	693b      	ldr	r3, [r7, #16]
 801765c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017660:	7ffb      	ldrb	r3, [r7, #31]
 8017662:	4a30      	ldr	r2, [pc, #192]	@ (8017724 <dhcp_select+0x1e4>)
 8017664:	5cd3      	ldrb	r3, [r2, r3]
 8017666:	461a      	mov	r2, r3
 8017668:	f000 ffaa 	bl	80185c0 <dhcp_option_byte>
 801766c:	4603      	mov	r3, r0
 801766e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017670:	7ffb      	ldrb	r3, [r7, #31]
 8017672:	3301      	adds	r3, #1
 8017674:	77fb      	strb	r3, [r7, #31]
 8017676:	7ffb      	ldrb	r3, [r7, #31]
 8017678:	2b02      	cmp	r3, #2
 801767a:	d9ed      	bls.n	8017658 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801767c:	89b8      	ldrh	r0, [r7, #12]
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	33f0      	adds	r3, #240	@ 0xf0
 8017682:	697a      	ldr	r2, [r7, #20]
 8017684:	4619      	mov	r1, r3
 8017686:	f001 fcbb 	bl	8019000 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801768a:	4b27      	ldr	r3, [pc, #156]	@ (8017728 <dhcp_select+0x1e8>)
 801768c:	6818      	ldr	r0, [r3, #0]
 801768e:	4b27      	ldr	r3, [pc, #156]	@ (801772c <dhcp_select+0x1ec>)
 8017690:	9301      	str	r3, [sp, #4]
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	9300      	str	r3, [sp, #0]
 8017696:	2343      	movs	r3, #67	@ 0x43
 8017698:	4a25      	ldr	r2, [pc, #148]	@ (8017730 <dhcp_select+0x1f0>)
 801769a:	6979      	ldr	r1, [r7, #20]
 801769c:	f7ff fb98 	bl	8016dd0 <udp_sendto_if_src>
 80176a0:	4603      	mov	r3, r0
 80176a2:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 80176a4:	6978      	ldr	r0, [r7, #20]
 80176a6:	f7f9 fa85 	bl	8010bb4 <pbuf_free>
 80176aa:	e001      	b.n	80176b0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80176ac:	23ff      	movs	r3, #255	@ 0xff
 80176ae:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 80176b0:	69bb      	ldr	r3, [r7, #24]
 80176b2:	799b      	ldrb	r3, [r3, #6]
 80176b4:	2bff      	cmp	r3, #255	@ 0xff
 80176b6:	d005      	beq.n	80176c4 <dhcp_select+0x184>
    dhcp->tries++;
 80176b8:	69bb      	ldr	r3, [r7, #24]
 80176ba:	799b      	ldrb	r3, [r3, #6]
 80176bc:	3301      	adds	r3, #1
 80176be:	b2da      	uxtb	r2, r3
 80176c0:	69bb      	ldr	r3, [r7, #24]
 80176c2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80176c4:	69bb      	ldr	r3, [r7, #24]
 80176c6:	799b      	ldrb	r3, [r3, #6]
 80176c8:	2b05      	cmp	r3, #5
 80176ca:	d80d      	bhi.n	80176e8 <dhcp_select+0x1a8>
 80176cc:	69bb      	ldr	r3, [r7, #24]
 80176ce:	799b      	ldrb	r3, [r3, #6]
 80176d0:	461a      	mov	r2, r3
 80176d2:	2301      	movs	r3, #1
 80176d4:	4093      	lsls	r3, r2
 80176d6:	b29b      	uxth	r3, r3
 80176d8:	461a      	mov	r2, r3
 80176da:	0152      	lsls	r2, r2, #5
 80176dc:	1ad2      	subs	r2, r2, r3
 80176de:	0092      	lsls	r2, r2, #2
 80176e0:	4413      	add	r3, r2
 80176e2:	00db      	lsls	r3, r3, #3
 80176e4:	b29b      	uxth	r3, r3
 80176e6:	e001      	b.n	80176ec <dhcp_select+0x1ac>
 80176e8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80176ec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80176ee:	89fb      	ldrh	r3, [r7, #14]
 80176f0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80176f4:	4a0f      	ldr	r2, [pc, #60]	@ (8017734 <dhcp_select+0x1f4>)
 80176f6:	fb82 1203 	smull	r1, r2, r2, r3
 80176fa:	1152      	asrs	r2, r2, #5
 80176fc:	17db      	asrs	r3, r3, #31
 80176fe:	1ad3      	subs	r3, r2, r3
 8017700:	b29a      	uxth	r2, r3
 8017702:	69bb      	ldr	r3, [r7, #24]
 8017704:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017706:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 801770a:	4618      	mov	r0, r3
 801770c:	3720      	adds	r7, #32
 801770e:	46bd      	mov	sp, r7
 8017710:	bdb0      	pop	{r4, r5, r7, pc}
 8017712:	bf00      	nop
 8017714:	0802193c 	.word	0x0802193c
 8017718:	080219e8 	.word	0x080219e8
 801771c:	0802199c 	.word	0x0802199c
 8017720:	08021a04 	.word	0x08021a04
 8017724:	200000c0 	.word	0x200000c0
 8017728:	20013dd4 	.word	0x20013dd4
 801772c:	0806e194 	.word	0x0806e194
 8017730:	0806e198 	.word	0x0806e198
 8017734:	10624dd3 	.word	0x10624dd3

08017738 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b082      	sub	sp, #8
 801773c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801773e:	4b27      	ldr	r3, [pc, #156]	@ (80177dc <dhcp_coarse_tmr+0xa4>)
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	607b      	str	r3, [r7, #4]
 8017744:	e042      	b.n	80177cc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801774a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801774c:	683b      	ldr	r3, [r7, #0]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d039      	beq.n	80177c6 <dhcp_coarse_tmr+0x8e>
 8017752:	683b      	ldr	r3, [r7, #0]
 8017754:	795b      	ldrb	r3, [r3, #5]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d035      	beq.n	80177c6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	8a9b      	ldrh	r3, [r3, #20]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d012      	beq.n	8017788 <dhcp_coarse_tmr+0x50>
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	8a5b      	ldrh	r3, [r3, #18]
 8017766:	3301      	adds	r3, #1
 8017768:	b29a      	uxth	r2, r3
 801776a:	683b      	ldr	r3, [r7, #0]
 801776c:	825a      	strh	r2, [r3, #18]
 801776e:	683b      	ldr	r3, [r7, #0]
 8017770:	8a5a      	ldrh	r2, [r3, #18]
 8017772:	683b      	ldr	r3, [r7, #0]
 8017774:	8a9b      	ldrh	r3, [r3, #20]
 8017776:	429a      	cmp	r2, r3
 8017778:	d106      	bne.n	8017788 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801777a:	6878      	ldr	r0, [r7, #4]
 801777c:	f000 fe2c 	bl	80183d8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8017780:	6878      	ldr	r0, [r7, #4]
 8017782:	f000 f969 	bl	8017a58 <dhcp_start>
 8017786:	e01e      	b.n	80177c6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	8a1b      	ldrh	r3, [r3, #16]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d00b      	beq.n	80177a8 <dhcp_coarse_tmr+0x70>
 8017790:	683b      	ldr	r3, [r7, #0]
 8017792:	8a1b      	ldrh	r3, [r3, #16]
 8017794:	1e5a      	subs	r2, r3, #1
 8017796:	b291      	uxth	r1, r2
 8017798:	683a      	ldr	r2, [r7, #0]
 801779a:	8211      	strh	r1, [r2, #16]
 801779c:	2b01      	cmp	r3, #1
 801779e:	d103      	bne.n	80177a8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80177a0:	6878      	ldr	r0, [r7, #4]
 80177a2:	f000 f8c6 	bl	8017932 <dhcp_t2_timeout>
 80177a6:	e00e      	b.n	80177c6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	89db      	ldrh	r3, [r3, #14]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d00a      	beq.n	80177c6 <dhcp_coarse_tmr+0x8e>
 80177b0:	683b      	ldr	r3, [r7, #0]
 80177b2:	89db      	ldrh	r3, [r3, #14]
 80177b4:	1e5a      	subs	r2, r3, #1
 80177b6:	b291      	uxth	r1, r2
 80177b8:	683a      	ldr	r2, [r7, #0]
 80177ba:	81d1      	strh	r1, [r2, #14]
 80177bc:	2b01      	cmp	r3, #1
 80177be:	d102      	bne.n	80177c6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80177c0:	6878      	ldr	r0, [r7, #4]
 80177c2:	f000 f888 	bl	80178d6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	607b      	str	r3, [r7, #4]
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d1b9      	bne.n	8017746 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80177d2:	bf00      	nop
 80177d4:	bf00      	nop
 80177d6:	3708      	adds	r7, #8
 80177d8:	46bd      	mov	sp, r7
 80177da:	bd80      	pop	{r7, pc}
 80177dc:	20013d3c 	.word	0x20013d3c

080177e0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b082      	sub	sp, #8
 80177e4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80177e6:	4b16      	ldr	r3, [pc, #88]	@ (8017840 <dhcp_fine_tmr+0x60>)
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	607b      	str	r3, [r7, #4]
 80177ec:	e020      	b.n	8017830 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177f2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80177f4:	683b      	ldr	r3, [r7, #0]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d017      	beq.n	801782a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80177fa:	683b      	ldr	r3, [r7, #0]
 80177fc:	891b      	ldrh	r3, [r3, #8]
 80177fe:	2b01      	cmp	r3, #1
 8017800:	d906      	bls.n	8017810 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8017802:	683b      	ldr	r3, [r7, #0]
 8017804:	891b      	ldrh	r3, [r3, #8]
 8017806:	3b01      	subs	r3, #1
 8017808:	b29a      	uxth	r2, r3
 801780a:	683b      	ldr	r3, [r7, #0]
 801780c:	811a      	strh	r2, [r3, #8]
 801780e:	e00c      	b.n	801782a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8017810:	683b      	ldr	r3, [r7, #0]
 8017812:	891b      	ldrh	r3, [r3, #8]
 8017814:	2b01      	cmp	r3, #1
 8017816:	d108      	bne.n	801782a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8017818:	683b      	ldr	r3, [r7, #0]
 801781a:	891b      	ldrh	r3, [r3, #8]
 801781c:	3b01      	subs	r3, #1
 801781e:	b29a      	uxth	r2, r3
 8017820:	683b      	ldr	r3, [r7, #0]
 8017822:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8017824:	6878      	ldr	r0, [r7, #4]
 8017826:	f000 f80d 	bl	8017844 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	607b      	str	r3, [r7, #4]
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d1db      	bne.n	80177ee <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8017836:	bf00      	nop
 8017838:	bf00      	nop
 801783a:	3708      	adds	r7, #8
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}
 8017840:	20013d3c 	.word	0x20013d3c

08017844 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b084      	sub	sp, #16
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017850:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	795b      	ldrb	r3, [r3, #5]
 8017856:	2b0c      	cmp	r3, #12
 8017858:	d003      	beq.n	8017862 <dhcp_timeout+0x1e>
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	795b      	ldrb	r3, [r3, #5]
 801785e:	2b06      	cmp	r3, #6
 8017860:	d103      	bne.n	801786a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	f000 fa54 	bl	8017d10 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8017868:	e031      	b.n	80178ce <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	795b      	ldrb	r3, [r3, #5]
 801786e:	2b01      	cmp	r3, #1
 8017870:	d10e      	bne.n	8017890 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	799b      	ldrb	r3, [r3, #6]
 8017876:	2b05      	cmp	r3, #5
 8017878:	d803      	bhi.n	8017882 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801787a:	6878      	ldr	r0, [r7, #4]
 801787c:	f7ff fe60 	bl	8017540 <dhcp_select>
}
 8017880:	e025      	b.n	80178ce <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8017882:	6878      	ldr	r0, [r7, #4]
 8017884:	f000 fda8 	bl	80183d8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8017888:	6878      	ldr	r0, [r7, #4]
 801788a:	f000 f8e5 	bl	8017a58 <dhcp_start>
}
 801788e:	e01e      	b.n	80178ce <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	795b      	ldrb	r3, [r3, #5]
 8017894:	2b08      	cmp	r3, #8
 8017896:	d10b      	bne.n	80178b0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	799b      	ldrb	r3, [r3, #6]
 801789c:	2b01      	cmp	r3, #1
 801789e:	d803      	bhi.n	80178a8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80178a0:	6878      	ldr	r0, [r7, #4]
 80178a2:	f7ff fdf3 	bl	801748c <dhcp_check>
}
 80178a6:	e012      	b.n	80178ce <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80178a8:	6878      	ldr	r0, [r7, #4]
 80178aa:	f000 fad3 	bl	8017e54 <dhcp_bind>
}
 80178ae:	e00e      	b.n	80178ce <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	795b      	ldrb	r3, [r3, #5]
 80178b4:	2b03      	cmp	r3, #3
 80178b6:	d10a      	bne.n	80178ce <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	799b      	ldrb	r3, [r3, #6]
 80178bc:	2b01      	cmp	r3, #1
 80178be:	d803      	bhi.n	80178c8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80178c0:	6878      	ldr	r0, [r7, #4]
 80178c2:	f000 fcd5 	bl	8018270 <dhcp_reboot>
}
 80178c6:	e002      	b.n	80178ce <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80178c8:	6878      	ldr	r0, [r7, #4]
 80178ca:	f000 fa21 	bl	8017d10 <dhcp_discover>
}
 80178ce:	bf00      	nop
 80178d0:	3710      	adds	r7, #16
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}

080178d6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80178d6:	b580      	push	{r7, lr}
 80178d8:	b084      	sub	sp, #16
 80178da:	af00      	add	r7, sp, #0
 80178dc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178e2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	795b      	ldrb	r3, [r3, #5]
 80178e8:	2b01      	cmp	r3, #1
 80178ea:	d007      	beq.n	80178fc <dhcp_t1_timeout+0x26>
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	795b      	ldrb	r3, [r3, #5]
 80178f0:	2b0a      	cmp	r3, #10
 80178f2:	d003      	beq.n	80178fc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80178f8:	2b05      	cmp	r3, #5
 80178fa:	d116      	bne.n	801792a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80178fc:	6878      	ldr	r0, [r7, #4]
 80178fe:	f000 fb83 	bl	8018008 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	899b      	ldrh	r3, [r3, #12]
 8017906:	461a      	mov	r2, r3
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	8a5b      	ldrh	r3, [r3, #18]
 801790c:	1ad3      	subs	r3, r2, r3
 801790e:	2b01      	cmp	r3, #1
 8017910:	dd0b      	ble.n	801792a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	899b      	ldrh	r3, [r3, #12]
 8017916:	461a      	mov	r2, r3
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	8a5b      	ldrh	r3, [r3, #18]
 801791c:	1ad3      	subs	r3, r2, r3
 801791e:	0fda      	lsrs	r2, r3, #31
 8017920:	4413      	add	r3, r2
 8017922:	105b      	asrs	r3, r3, #1
 8017924:	b29a      	uxth	r2, r3
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801792a:	bf00      	nop
 801792c:	3710      	adds	r7, #16
 801792e:	46bd      	mov	sp, r7
 8017930:	bd80      	pop	{r7, pc}

08017932 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8017932:	b580      	push	{r7, lr}
 8017934:	b084      	sub	sp, #16
 8017936:	af00      	add	r7, sp, #0
 8017938:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801793e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	795b      	ldrb	r3, [r3, #5]
 8017944:	2b01      	cmp	r3, #1
 8017946:	d00b      	beq.n	8017960 <dhcp_t2_timeout+0x2e>
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	795b      	ldrb	r3, [r3, #5]
 801794c:	2b0a      	cmp	r3, #10
 801794e:	d007      	beq.n	8017960 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017954:	2b05      	cmp	r3, #5
 8017956:	d003      	beq.n	8017960 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	795b      	ldrb	r3, [r3, #5]
 801795c:	2b04      	cmp	r3, #4
 801795e:	d116      	bne.n	801798e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8017960:	6878      	ldr	r0, [r7, #4]
 8017962:	f000 fbeb 	bl	801813c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	8a9b      	ldrh	r3, [r3, #20]
 801796a:	461a      	mov	r2, r3
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	8a5b      	ldrh	r3, [r3, #18]
 8017970:	1ad3      	subs	r3, r2, r3
 8017972:	2b01      	cmp	r3, #1
 8017974:	dd0b      	ble.n	801798e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	8a9b      	ldrh	r3, [r3, #20]
 801797a:	461a      	mov	r2, r3
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	8a5b      	ldrh	r3, [r3, #18]
 8017980:	1ad3      	subs	r3, r2, r3
 8017982:	0fda      	lsrs	r2, r3, #31
 8017984:	4413      	add	r3, r2
 8017986:	105b      	asrs	r3, r3, #1
 8017988:	b29a      	uxth	r2, r3
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801798e:	bf00      	nop
 8017990:	3710      	adds	r7, #16
 8017992:	46bd      	mov	sp, r7
 8017994:	bd80      	pop	{r7, pc}
	...

08017998 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b084      	sub	sp, #16
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]
 80179a0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179a6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	2200      	movs	r2, #0
 80179ac:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	2200      	movs	r2, #0
 80179b2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80179b4:	4b26      	ldr	r3, [pc, #152]	@ (8017a50 <dhcp_handle_ack+0xb8>)
 80179b6:	78db      	ldrb	r3, [r3, #3]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d003      	beq.n	80179c4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80179bc:	4b25      	ldr	r3, [pc, #148]	@ (8017a54 <dhcp_handle_ack+0xbc>)
 80179be:	68da      	ldr	r2, [r3, #12]
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80179c4:	4b22      	ldr	r3, [pc, #136]	@ (8017a50 <dhcp_handle_ack+0xb8>)
 80179c6:	791b      	ldrb	r3, [r3, #4]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d004      	beq.n	80179d6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80179cc:	4b21      	ldr	r3, [pc, #132]	@ (8017a54 <dhcp_handle_ack+0xbc>)
 80179ce:	691a      	ldr	r2, [r3, #16]
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80179d4:	e004      	b.n	80179e0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179da:	085a      	lsrs	r2, r3, #1
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80179e0:	4b1b      	ldr	r3, [pc, #108]	@ (8017a50 <dhcp_handle_ack+0xb8>)
 80179e2:	795b      	ldrb	r3, [r3, #5]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d004      	beq.n	80179f2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80179e8:	4b1a      	ldr	r3, [pc, #104]	@ (8017a54 <dhcp_handle_ack+0xbc>)
 80179ea:	695a      	ldr	r2, [r3, #20]
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80179f0:	e007      	b.n	8017a02 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80179f6:	4613      	mov	r3, r2
 80179f8:	00db      	lsls	r3, r3, #3
 80179fa:	1a9b      	subs	r3, r3, r2
 80179fc:	08da      	lsrs	r2, r3, #3
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8017a02:	683b      	ldr	r3, [r7, #0]
 8017a04:	691a      	ldr	r2, [r3, #16]
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8017a0a:	4b11      	ldr	r3, [pc, #68]	@ (8017a50 <dhcp_handle_ack+0xb8>)
 8017a0c:	799b      	ldrb	r3, [r3, #6]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d00b      	beq.n	8017a2a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8017a12:	4b10      	ldr	r3, [pc, #64]	@ (8017a54 <dhcp_handle_ack+0xbc>)
 8017a14:	699b      	ldr	r3, [r3, #24]
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7f7 fbbf 	bl	800f19a <lwip_htonl>
 8017a1c:	4602      	mov	r2, r0
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	2201      	movs	r2, #1
 8017a26:	71da      	strb	r2, [r3, #7]
 8017a28:	e002      	b.n	8017a30 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8017a30:	4b07      	ldr	r3, [pc, #28]	@ (8017a50 <dhcp_handle_ack+0xb8>)
 8017a32:	79db      	ldrb	r3, [r3, #7]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d007      	beq.n	8017a48 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8017a38:	4b06      	ldr	r3, [pc, #24]	@ (8017a54 <dhcp_handle_ack+0xbc>)
 8017a3a:	69db      	ldr	r3, [r3, #28]
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7f7 fbac 	bl	800f19a <lwip_htonl>
 8017a42:	4602      	mov	r2, r0
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8017a48:	bf00      	nop
 8017a4a:	3710      	adds	r7, #16
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}
 8017a50:	20013dcc 	.word	0x20013dcc
 8017a54:	20013dac 	.word	0x20013dac

08017a58 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b084      	sub	sp, #16
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d109      	bne.n	8017a7a <dhcp_start+0x22>
 8017a66:	4b37      	ldr	r3, [pc, #220]	@ (8017b44 <dhcp_start+0xec>)
 8017a68:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8017a6c:	4936      	ldr	r1, [pc, #216]	@ (8017b48 <dhcp_start+0xf0>)
 8017a6e:	4837      	ldr	r0, [pc, #220]	@ (8017b4c <dhcp_start+0xf4>)
 8017a70:	f004 fede 	bl	801c830 <iprintf>
 8017a74:	f06f 030f 	mvn.w	r3, #15
 8017a78:	e060      	b.n	8017b3c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017a80:	f003 0301 	and.w	r3, r3, #1
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d109      	bne.n	8017a9c <dhcp_start+0x44>
 8017a88:	4b2e      	ldr	r3, [pc, #184]	@ (8017b44 <dhcp_start+0xec>)
 8017a8a:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8017a8e:	4930      	ldr	r1, [pc, #192]	@ (8017b50 <dhcp_start+0xf8>)
 8017a90:	482e      	ldr	r0, [pc, #184]	@ (8017b4c <dhcp_start+0xf4>)
 8017a92:	f004 fecd 	bl	801c830 <iprintf>
 8017a96:	f06f 030f 	mvn.w	r3, #15
 8017a9a:	e04f      	b.n	8017b3c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017aa0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017aa6:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8017aaa:	d202      	bcs.n	8017ab2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8017aac:	f04f 33ff 	mov.w	r3, #4294967295
 8017ab0:	e044      	b.n	8017b3c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d10d      	bne.n	8017ad4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8017ab8:	2034      	movs	r0, #52	@ 0x34
 8017aba:	f7f8 f805 	bl	800fac8 <mem_malloc>
 8017abe:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d102      	bne.n	8017acc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8017ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8017aca:	e037      	b.n	8017b3c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	68fa      	ldr	r2, [r7, #12]
 8017ad0:	625a      	str	r2, [r3, #36]	@ 0x24
 8017ad2:	e005      	b.n	8017ae0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	791b      	ldrb	r3, [r3, #4]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d001      	beq.n	8017ae0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8017adc:	f7ff fc92 	bl	8017404 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8017ae0:	2234      	movs	r2, #52	@ 0x34
 8017ae2:	2100      	movs	r1, #0
 8017ae4:	68f8      	ldr	r0, [r7, #12]
 8017ae6:	f005 f805 	bl	801caf4 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8017aea:	f7ff fc39 	bl	8017360 <dhcp_inc_pcb_refcount>
 8017aee:	4603      	mov	r3, r0
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d002      	beq.n	8017afa <dhcp_start+0xa2>
    return ERR_MEM;
 8017af4:	f04f 33ff 	mov.w	r3, #4294967295
 8017af8:	e020      	b.n	8017b3c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	2201      	movs	r2, #1
 8017afe:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017b06:	f003 0304 	and.w	r3, r3, #4
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d105      	bne.n	8017b1a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8017b0e:	2102      	movs	r1, #2
 8017b10:	68f8      	ldr	r0, [r7, #12]
 8017b12:	f000 fd06 	bl	8018522 <dhcp_set_state>
    return ERR_OK;
 8017b16:	2300      	movs	r3, #0
 8017b18:	e010      	b.n	8017b3c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8017b1a:	6878      	ldr	r0, [r7, #4]
 8017b1c:	f000 f8f8 	bl	8017d10 <dhcp_discover>
 8017b20:	4603      	mov	r3, r0
 8017b22:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8017b24:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d005      	beq.n	8017b38 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8017b2c:	6878      	ldr	r0, [r7, #4]
 8017b2e:	f000 fc53 	bl	80183d8 <dhcp_release_and_stop>
    return ERR_MEM;
 8017b32:	f04f 33ff 	mov.w	r3, #4294967295
 8017b36:	e001      	b.n	8017b3c <dhcp_start+0xe4>
  }
  return result;
 8017b38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	3710      	adds	r7, #16
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd80      	pop	{r7, pc}
 8017b44:	0802193c 	.word	0x0802193c
 8017b48:	08021a20 	.word	0x08021a20
 8017b4c:	0802199c 	.word	0x0802199c
 8017b50:	08021a64 	.word	0x08021a64

08017b54 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b084      	sub	sp, #16
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b60:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d025      	beq.n	8017bb4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	795b      	ldrb	r3, [r3, #5]
 8017b6c:	2b0a      	cmp	r3, #10
 8017b6e:	d008      	beq.n	8017b82 <dhcp_network_changed+0x2e>
 8017b70:	2b0a      	cmp	r3, #10
 8017b72:	dc0d      	bgt.n	8017b90 <dhcp_network_changed+0x3c>
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d01f      	beq.n	8017bb8 <dhcp_network_changed+0x64>
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	db09      	blt.n	8017b90 <dhcp_network_changed+0x3c>
 8017b7c:	3b03      	subs	r3, #3
 8017b7e:	2b02      	cmp	r3, #2
 8017b80:	d806      	bhi.n	8017b90 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	2200      	movs	r2, #0
 8017b86:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8017b88:	6878      	ldr	r0, [r7, #4]
 8017b8a:	f000 fb71 	bl	8018270 <dhcp_reboot>
      break;
 8017b8e:	e014      	b.n	8017bba <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	795b      	ldrb	r3, [r3, #5]
 8017b94:	2b0c      	cmp	r3, #12
 8017b96:	d906      	bls.n	8017ba6 <dhcp_network_changed+0x52>
 8017b98:	4b09      	ldr	r3, [pc, #36]	@ (8017bc0 <dhcp_network_changed+0x6c>)
 8017b9a:	f240 326d 	movw	r2, #877	@ 0x36d
 8017b9e:	4909      	ldr	r1, [pc, #36]	@ (8017bc4 <dhcp_network_changed+0x70>)
 8017ba0:	4809      	ldr	r0, [pc, #36]	@ (8017bc8 <dhcp_network_changed+0x74>)
 8017ba2:	f004 fe45 	bl	801c830 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	2200      	movs	r2, #0
 8017baa:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8017bac:	6878      	ldr	r0, [r7, #4]
 8017bae:	f000 f8af 	bl	8017d10 <dhcp_discover>
      break;
 8017bb2:	e002      	b.n	8017bba <dhcp_network_changed+0x66>
    return;
 8017bb4:	bf00      	nop
 8017bb6:	e000      	b.n	8017bba <dhcp_network_changed+0x66>
      break;
 8017bb8:	bf00      	nop
  }
}
 8017bba:	3710      	adds	r7, #16
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bd80      	pop	{r7, pc}
 8017bc0:	0802193c 	.word	0x0802193c
 8017bc4:	08021a88 	.word	0x08021a88
 8017bc8:	0802199c 	.word	0x0802199c

08017bcc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b084      	sub	sp, #16
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
 8017bd4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d107      	bne.n	8017bec <dhcp_arp_reply+0x20>
 8017bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8017c18 <dhcp_arp_reply+0x4c>)
 8017bde:	f240 328b 	movw	r2, #907	@ 0x38b
 8017be2:	490e      	ldr	r1, [pc, #56]	@ (8017c1c <dhcp_arp_reply+0x50>)
 8017be4:	480e      	ldr	r0, [pc, #56]	@ (8017c20 <dhcp_arp_reply+0x54>)
 8017be6:	f004 fe23 	bl	801c830 <iprintf>
 8017bea:	e012      	b.n	8017c12 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017bf0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d00c      	beq.n	8017c12 <dhcp_arp_reply+0x46>
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	795b      	ldrb	r3, [r3, #5]
 8017bfc:	2b08      	cmp	r3, #8
 8017bfe:	d108      	bne.n	8017c12 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8017c00:	683b      	ldr	r3, [r7, #0]
 8017c02:	681a      	ldr	r2, [r3, #0]
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	69db      	ldr	r3, [r3, #28]
 8017c08:	429a      	cmp	r2, r3
 8017c0a:	d102      	bne.n	8017c12 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8017c0c:	6878      	ldr	r0, [r7, #4]
 8017c0e:	f000 f809 	bl	8017c24 <dhcp_decline>
    }
  }
}
 8017c12:	3710      	adds	r7, #16
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}
 8017c18:	0802193c 	.word	0x0802193c
 8017c1c:	08021a20 	.word	0x08021a20
 8017c20:	0802199c 	.word	0x0802199c

08017c24 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8017c24:	b5b0      	push	{r4, r5, r7, lr}
 8017c26:	b08a      	sub	sp, #40	@ 0x28
 8017c28:	af02      	add	r7, sp, #8
 8017c2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c30:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8017c32:	210c      	movs	r1, #12
 8017c34:	69b8      	ldr	r0, [r7, #24]
 8017c36:	f000 fc74 	bl	8018522 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8017c3a:	f107 030c 	add.w	r3, r7, #12
 8017c3e:	2204      	movs	r2, #4
 8017c40:	69b9      	ldr	r1, [r7, #24]
 8017c42:	6878      	ldr	r0, [r7, #4]
 8017c44:	f001 f906 	bl	8018e54 <dhcp_create_msg>
 8017c48:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017c4a:	697b      	ldr	r3, [r7, #20]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d035      	beq.n	8017cbc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017c50:	697b      	ldr	r3, [r7, #20]
 8017c52:	685b      	ldr	r3, [r3, #4]
 8017c54:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017c56:	89b8      	ldrh	r0, [r7, #12]
 8017c58:	693b      	ldr	r3, [r7, #16]
 8017c5a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017c5e:	2304      	movs	r3, #4
 8017c60:	2232      	movs	r2, #50	@ 0x32
 8017c62:	f000 fc79 	bl	8018558 <dhcp_option>
 8017c66:	4603      	mov	r3, r0
 8017c68:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017c6a:	89bc      	ldrh	r4, [r7, #12]
 8017c6c:	693b      	ldr	r3, [r7, #16]
 8017c6e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8017c72:	69bb      	ldr	r3, [r7, #24]
 8017c74:	69db      	ldr	r3, [r3, #28]
 8017c76:	4618      	mov	r0, r3
 8017c78:	f7f7 fa8f 	bl	800f19a <lwip_htonl>
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	461a      	mov	r2, r3
 8017c80:	4629      	mov	r1, r5
 8017c82:	4620      	mov	r0, r4
 8017c84:	f000 fcf4 	bl	8018670 <dhcp_option_long>
 8017c88:	4603      	mov	r3, r0
 8017c8a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017c8c:	89b8      	ldrh	r0, [r7, #12]
 8017c8e:	693b      	ldr	r3, [r7, #16]
 8017c90:	33f0      	adds	r3, #240	@ 0xf0
 8017c92:	697a      	ldr	r2, [r7, #20]
 8017c94:	4619      	mov	r1, r3
 8017c96:	f001 f9b3 	bl	8019000 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017c9a:	4b19      	ldr	r3, [pc, #100]	@ (8017d00 <dhcp_decline+0xdc>)
 8017c9c:	6818      	ldr	r0, [r3, #0]
 8017c9e:	4b19      	ldr	r3, [pc, #100]	@ (8017d04 <dhcp_decline+0xe0>)
 8017ca0:	9301      	str	r3, [sp, #4]
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	9300      	str	r3, [sp, #0]
 8017ca6:	2343      	movs	r3, #67	@ 0x43
 8017ca8:	4a17      	ldr	r2, [pc, #92]	@ (8017d08 <dhcp_decline+0xe4>)
 8017caa:	6979      	ldr	r1, [r7, #20]
 8017cac:	f7ff f890 	bl	8016dd0 <udp_sendto_if_src>
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017cb4:	6978      	ldr	r0, [r7, #20]
 8017cb6:	f7f8 ff7d 	bl	8010bb4 <pbuf_free>
 8017cba:	e001      	b.n	8017cc0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017cbc:	23ff      	movs	r3, #255	@ 0xff
 8017cbe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017cc0:	69bb      	ldr	r3, [r7, #24]
 8017cc2:	799b      	ldrb	r3, [r3, #6]
 8017cc4:	2bff      	cmp	r3, #255	@ 0xff
 8017cc6:	d005      	beq.n	8017cd4 <dhcp_decline+0xb0>
    dhcp->tries++;
 8017cc8:	69bb      	ldr	r3, [r7, #24]
 8017cca:	799b      	ldrb	r3, [r3, #6]
 8017ccc:	3301      	adds	r3, #1
 8017cce:	b2da      	uxtb	r2, r3
 8017cd0:	69bb      	ldr	r3, [r7, #24]
 8017cd2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8017cd4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8017cd8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017cda:	89fb      	ldrh	r3, [r7, #14]
 8017cdc:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8017ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8017d0c <dhcp_decline+0xe8>)
 8017ce2:	fb82 1203 	smull	r1, r2, r2, r3
 8017ce6:	1152      	asrs	r2, r2, #5
 8017ce8:	17db      	asrs	r3, r3, #31
 8017cea:	1ad3      	subs	r3, r2, r3
 8017cec:	b29a      	uxth	r2, r3
 8017cee:	69bb      	ldr	r3, [r7, #24]
 8017cf0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017cf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	3720      	adds	r7, #32
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8017cfe:	bf00      	nop
 8017d00:	20013dd4 	.word	0x20013dd4
 8017d04:	0806e194 	.word	0x0806e194
 8017d08:	0806e198 	.word	0x0806e198
 8017d0c:	10624dd3 	.word	0x10624dd3

08017d10 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b08a      	sub	sp, #40	@ 0x28
 8017d14:	af02      	add	r7, sp, #8
 8017d16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d1c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8017d1e:	2300      	movs	r3, #0
 8017d20:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8017d22:	69bb      	ldr	r3, [r7, #24]
 8017d24:	2200      	movs	r2, #0
 8017d26:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8017d28:	2106      	movs	r1, #6
 8017d2a:	69b8      	ldr	r0, [r7, #24]
 8017d2c:	f000 fbf9 	bl	8018522 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8017d30:	f107 0308 	add.w	r3, r7, #8
 8017d34:	2201      	movs	r2, #1
 8017d36:	69b9      	ldr	r1, [r7, #24]
 8017d38:	6878      	ldr	r0, [r7, #4]
 8017d3a:	f001 f88b 	bl	8018e54 <dhcp_create_msg>
 8017d3e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8017d40:	693b      	ldr	r3, [r7, #16]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d04b      	beq.n	8017dde <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017d46:	693b      	ldr	r3, [r7, #16]
 8017d48:	685b      	ldr	r3, [r3, #4]
 8017d4a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017d4c:	8938      	ldrh	r0, [r7, #8]
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017d54:	2302      	movs	r3, #2
 8017d56:	2239      	movs	r2, #57	@ 0x39
 8017d58:	f000 fbfe 	bl	8018558 <dhcp_option>
 8017d5c:	4603      	mov	r3, r0
 8017d5e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017d60:	8938      	ldrh	r0, [r7, #8]
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017d6c:	461a      	mov	r2, r3
 8017d6e:	f000 fc4d 	bl	801860c <dhcp_option_short>
 8017d72:	4603      	mov	r3, r0
 8017d74:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017d76:	8938      	ldrh	r0, [r7, #8]
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017d7e:	2303      	movs	r3, #3
 8017d80:	2237      	movs	r2, #55	@ 0x37
 8017d82:	f000 fbe9 	bl	8018558 <dhcp_option>
 8017d86:	4603      	mov	r3, r0
 8017d88:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	77fb      	strb	r3, [r7, #31]
 8017d8e:	e00e      	b.n	8017dae <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017d90:	8938      	ldrh	r0, [r7, #8]
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017d98:	7ffb      	ldrb	r3, [r7, #31]
 8017d9a:	4a29      	ldr	r2, [pc, #164]	@ (8017e40 <dhcp_discover+0x130>)
 8017d9c:	5cd3      	ldrb	r3, [r2, r3]
 8017d9e:	461a      	mov	r2, r3
 8017da0:	f000 fc0e 	bl	80185c0 <dhcp_option_byte>
 8017da4:	4603      	mov	r3, r0
 8017da6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017da8:	7ffb      	ldrb	r3, [r7, #31]
 8017daa:	3301      	adds	r3, #1
 8017dac:	77fb      	strb	r3, [r7, #31]
 8017dae:	7ffb      	ldrb	r3, [r7, #31]
 8017db0:	2b02      	cmp	r3, #2
 8017db2:	d9ed      	bls.n	8017d90 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017db4:	8938      	ldrh	r0, [r7, #8]
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	33f0      	adds	r3, #240	@ 0xf0
 8017dba:	693a      	ldr	r2, [r7, #16]
 8017dbc:	4619      	mov	r1, r3
 8017dbe:	f001 f91f 	bl	8019000 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017dc2:	4b20      	ldr	r3, [pc, #128]	@ (8017e44 <dhcp_discover+0x134>)
 8017dc4:	6818      	ldr	r0, [r3, #0]
 8017dc6:	4b20      	ldr	r3, [pc, #128]	@ (8017e48 <dhcp_discover+0x138>)
 8017dc8:	9301      	str	r3, [sp, #4]
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	9300      	str	r3, [sp, #0]
 8017dce:	2343      	movs	r3, #67	@ 0x43
 8017dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8017e4c <dhcp_discover+0x13c>)
 8017dd2:	6939      	ldr	r1, [r7, #16]
 8017dd4:	f7fe fffc 	bl	8016dd0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8017dd8:	6938      	ldr	r0, [r7, #16]
 8017dda:	f7f8 feeb 	bl	8010bb4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017dde:	69bb      	ldr	r3, [r7, #24]
 8017de0:	799b      	ldrb	r3, [r3, #6]
 8017de2:	2bff      	cmp	r3, #255	@ 0xff
 8017de4:	d005      	beq.n	8017df2 <dhcp_discover+0xe2>
    dhcp->tries++;
 8017de6:	69bb      	ldr	r3, [r7, #24]
 8017de8:	799b      	ldrb	r3, [r3, #6]
 8017dea:	3301      	adds	r3, #1
 8017dec:	b2da      	uxtb	r2, r3
 8017dee:	69bb      	ldr	r3, [r7, #24]
 8017df0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8017df2:	69bb      	ldr	r3, [r7, #24]
 8017df4:	799b      	ldrb	r3, [r3, #6]
 8017df6:	2b05      	cmp	r3, #5
 8017df8:	d80d      	bhi.n	8017e16 <dhcp_discover+0x106>
 8017dfa:	69bb      	ldr	r3, [r7, #24]
 8017dfc:	799b      	ldrb	r3, [r3, #6]
 8017dfe:	461a      	mov	r2, r3
 8017e00:	2301      	movs	r3, #1
 8017e02:	4093      	lsls	r3, r2
 8017e04:	b29b      	uxth	r3, r3
 8017e06:	461a      	mov	r2, r3
 8017e08:	0152      	lsls	r2, r2, #5
 8017e0a:	1ad2      	subs	r2, r2, r3
 8017e0c:	0092      	lsls	r2, r2, #2
 8017e0e:	4413      	add	r3, r2
 8017e10:	00db      	lsls	r3, r3, #3
 8017e12:	b29b      	uxth	r3, r3
 8017e14:	e001      	b.n	8017e1a <dhcp_discover+0x10a>
 8017e16:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8017e1a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017e1c:	897b      	ldrh	r3, [r7, #10]
 8017e1e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8017e22:	4a0b      	ldr	r2, [pc, #44]	@ (8017e50 <dhcp_discover+0x140>)
 8017e24:	fb82 1203 	smull	r1, r2, r2, r3
 8017e28:	1152      	asrs	r2, r2, #5
 8017e2a:	17db      	asrs	r3, r3, #31
 8017e2c:	1ad3      	subs	r3, r2, r3
 8017e2e:	b29a      	uxth	r2, r3
 8017e30:	69bb      	ldr	r3, [r7, #24]
 8017e32:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017e38:	4618      	mov	r0, r3
 8017e3a:	3720      	adds	r7, #32
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}
 8017e40:	200000c0 	.word	0x200000c0
 8017e44:	20013dd4 	.word	0x20013dd4
 8017e48:	0806e194 	.word	0x0806e194
 8017e4c:	0806e198 	.word	0x0806e198
 8017e50:	10624dd3 	.word	0x10624dd3

08017e54 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b088      	sub	sp, #32
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d107      	bne.n	8017e72 <dhcp_bind+0x1e>
 8017e62:	4b64      	ldr	r3, [pc, #400]	@ (8017ff4 <dhcp_bind+0x1a0>)
 8017e64:	f240 4215 	movw	r2, #1045	@ 0x415
 8017e68:	4963      	ldr	r1, [pc, #396]	@ (8017ff8 <dhcp_bind+0x1a4>)
 8017e6a:	4864      	ldr	r0, [pc, #400]	@ (8017ffc <dhcp_bind+0x1a8>)
 8017e6c:	f004 fce0 	bl	801c830 <iprintf>
 8017e70:	e0bc      	b.n	8017fec <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e76:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8017e78:	69fb      	ldr	r3, [r7, #28]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d107      	bne.n	8017e8e <dhcp_bind+0x3a>
 8017e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8017ff4 <dhcp_bind+0x1a0>)
 8017e80:	f240 4217 	movw	r2, #1047	@ 0x417
 8017e84:	495e      	ldr	r1, [pc, #376]	@ (8018000 <dhcp_bind+0x1ac>)
 8017e86:	485d      	ldr	r0, [pc, #372]	@ (8017ffc <dhcp_bind+0x1a8>)
 8017e88:	f004 fcd2 	bl	801c830 <iprintf>
 8017e8c:	e0ae      	b.n	8017fec <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8017e8e:	69fb      	ldr	r3, [r7, #28]
 8017e90:	2200      	movs	r2, #0
 8017e92:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8017e94:	69fb      	ldr	r3, [r7, #28]
 8017e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e9c:	d019      	beq.n	8017ed2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017e9e:	69fb      	ldr	r3, [r7, #28]
 8017ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ea2:	331e      	adds	r3, #30
 8017ea4:	4a57      	ldr	r2, [pc, #348]	@ (8018004 <dhcp_bind+0x1b0>)
 8017ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8017eaa:	095b      	lsrs	r3, r3, #5
 8017eac:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8017eae:	69bb      	ldr	r3, [r7, #24]
 8017eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017eb4:	d302      	bcc.n	8017ebc <dhcp_bind+0x68>
      timeout = 0xffff;
 8017eb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017eba:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8017ebc:	69bb      	ldr	r3, [r7, #24]
 8017ebe:	b29a      	uxth	r2, r3
 8017ec0:	69fb      	ldr	r3, [r7, #28]
 8017ec2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8017ec4:	69fb      	ldr	r3, [r7, #28]
 8017ec6:	8a9b      	ldrh	r3, [r3, #20]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d102      	bne.n	8017ed2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8017ecc:	69fb      	ldr	r3, [r7, #28]
 8017ece:	2201      	movs	r2, #1
 8017ed0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8017ed2:	69fb      	ldr	r3, [r7, #28]
 8017ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017eda:	d01d      	beq.n	8017f18 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017edc:	69fb      	ldr	r3, [r7, #28]
 8017ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ee0:	331e      	adds	r3, #30
 8017ee2:	4a48      	ldr	r2, [pc, #288]	@ (8018004 <dhcp_bind+0x1b0>)
 8017ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8017ee8:	095b      	lsrs	r3, r3, #5
 8017eea:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8017eec:	69bb      	ldr	r3, [r7, #24]
 8017eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017ef2:	d302      	bcc.n	8017efa <dhcp_bind+0xa6>
      timeout = 0xffff;
 8017ef4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ef8:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8017efa:	69bb      	ldr	r3, [r7, #24]
 8017efc:	b29a      	uxth	r2, r3
 8017efe:	69fb      	ldr	r3, [r7, #28]
 8017f00:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8017f02:	69fb      	ldr	r3, [r7, #28]
 8017f04:	895b      	ldrh	r3, [r3, #10]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d102      	bne.n	8017f10 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8017f0a:	69fb      	ldr	r3, [r7, #28]
 8017f0c:	2201      	movs	r2, #1
 8017f0e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8017f10:	69fb      	ldr	r3, [r7, #28]
 8017f12:	895a      	ldrh	r2, [r3, #10]
 8017f14:	69fb      	ldr	r3, [r7, #28]
 8017f16:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8017f18:	69fb      	ldr	r3, [r7, #28]
 8017f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f20:	d01d      	beq.n	8017f5e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017f22:	69fb      	ldr	r3, [r7, #28]
 8017f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f26:	331e      	adds	r3, #30
 8017f28:	4a36      	ldr	r2, [pc, #216]	@ (8018004 <dhcp_bind+0x1b0>)
 8017f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8017f2e:	095b      	lsrs	r3, r3, #5
 8017f30:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8017f32:	69bb      	ldr	r3, [r7, #24]
 8017f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017f38:	d302      	bcc.n	8017f40 <dhcp_bind+0xec>
      timeout = 0xffff;
 8017f3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017f3e:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8017f40:	69bb      	ldr	r3, [r7, #24]
 8017f42:	b29a      	uxth	r2, r3
 8017f44:	69fb      	ldr	r3, [r7, #28]
 8017f46:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8017f48:	69fb      	ldr	r3, [r7, #28]
 8017f4a:	899b      	ldrh	r3, [r3, #12]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d102      	bne.n	8017f56 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8017f50:	69fb      	ldr	r3, [r7, #28]
 8017f52:	2201      	movs	r2, #1
 8017f54:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8017f56:	69fb      	ldr	r3, [r7, #28]
 8017f58:	899a      	ldrh	r2, [r3, #12]
 8017f5a:	69fb      	ldr	r3, [r7, #28]
 8017f5c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8017f5e:	69fb      	ldr	r3, [r7, #28]
 8017f60:	895a      	ldrh	r2, [r3, #10]
 8017f62:	69fb      	ldr	r3, [r7, #28]
 8017f64:	899b      	ldrh	r3, [r3, #12]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d306      	bcc.n	8017f78 <dhcp_bind+0x124>
 8017f6a:	69fb      	ldr	r3, [r7, #28]
 8017f6c:	899b      	ldrh	r3, [r3, #12]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d002      	beq.n	8017f78 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8017f72:	69fb      	ldr	r3, [r7, #28]
 8017f74:	2200      	movs	r2, #0
 8017f76:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8017f78:	69fb      	ldr	r3, [r7, #28]
 8017f7a:	79db      	ldrb	r3, [r3, #7]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d003      	beq.n	8017f88 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8017f80:	69fb      	ldr	r3, [r7, #28]
 8017f82:	6a1b      	ldr	r3, [r3, #32]
 8017f84:	613b      	str	r3, [r7, #16]
 8017f86:	e014      	b.n	8017fb2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8017f88:	69fb      	ldr	r3, [r7, #28]
 8017f8a:	331c      	adds	r3, #28
 8017f8c:	781b      	ldrb	r3, [r3, #0]
 8017f8e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8017f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	db02      	blt.n	8017f9e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8017f98:	23ff      	movs	r3, #255	@ 0xff
 8017f9a:	613b      	str	r3, [r7, #16]
 8017f9c:	e009      	b.n	8017fb2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8017f9e:	7dfb      	ldrb	r3, [r7, #23]
 8017fa0:	2bbf      	cmp	r3, #191	@ 0xbf
 8017fa2:	d903      	bls.n	8017fac <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8017fa4:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8017fa8:	613b      	str	r3, [r7, #16]
 8017faa:	e002      	b.n	8017fb2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8017fac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017fb0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8017fb2:	69fb      	ldr	r3, [r7, #28]
 8017fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fb6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d108      	bne.n	8017fd0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8017fbe:	69fb      	ldr	r3, [r7, #28]
 8017fc0:	69da      	ldr	r2, [r3, #28]
 8017fc2:	693b      	ldr	r3, [r7, #16]
 8017fc4:	4013      	ands	r3, r2
 8017fc6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8017fce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8017fd0:	210a      	movs	r1, #10
 8017fd2:	69f8      	ldr	r0, [r7, #28]
 8017fd4:	f000 faa5 	bl	8018522 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8017fd8:	69fb      	ldr	r3, [r7, #28]
 8017fda:	f103 011c 	add.w	r1, r3, #28
 8017fde:	f107 030c 	add.w	r3, r7, #12
 8017fe2:	f107 0210 	add.w	r2, r7, #16
 8017fe6:	6878      	ldr	r0, [r7, #4]
 8017fe8:	f7f8 f8e4 	bl	80101b4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8017fec:	3720      	adds	r7, #32
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}
 8017ff2:	bf00      	nop
 8017ff4:	0802193c 	.word	0x0802193c
 8017ff8:	08021a9c 	.word	0x08021a9c
 8017ffc:	0802199c 	.word	0x0802199c
 8018000:	08021ab8 	.word	0x08021ab8
 8018004:	88888889 	.word	0x88888889

08018008 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b08a      	sub	sp, #40	@ 0x28
 801800c:	af02      	add	r7, sp, #8
 801800e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018014:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8018016:	2105      	movs	r1, #5
 8018018:	69b8      	ldr	r0, [r7, #24]
 801801a:	f000 fa82 	bl	8018522 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801801e:	f107 030c 	add.w	r3, r7, #12
 8018022:	2203      	movs	r2, #3
 8018024:	69b9      	ldr	r1, [r7, #24]
 8018026:	6878      	ldr	r0, [r7, #4]
 8018028:	f000 ff14 	bl	8018e54 <dhcp_create_msg>
 801802c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801802e:	697b      	ldr	r3, [r7, #20]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d04e      	beq.n	80180d2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018034:	697b      	ldr	r3, [r7, #20]
 8018036:	685b      	ldr	r3, [r3, #4]
 8018038:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801803a:	89b8      	ldrh	r0, [r7, #12]
 801803c:	693b      	ldr	r3, [r7, #16]
 801803e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018042:	2302      	movs	r3, #2
 8018044:	2239      	movs	r2, #57	@ 0x39
 8018046:	f000 fa87 	bl	8018558 <dhcp_option>
 801804a:	4603      	mov	r3, r0
 801804c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801804e:	89b8      	ldrh	r0, [r7, #12]
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801805a:	461a      	mov	r2, r3
 801805c:	f000 fad6 	bl	801860c <dhcp_option_short>
 8018060:	4603      	mov	r3, r0
 8018062:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018064:	89b8      	ldrh	r0, [r7, #12]
 8018066:	693b      	ldr	r3, [r7, #16]
 8018068:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801806c:	2303      	movs	r3, #3
 801806e:	2237      	movs	r2, #55	@ 0x37
 8018070:	f000 fa72 	bl	8018558 <dhcp_option>
 8018074:	4603      	mov	r3, r0
 8018076:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018078:	2300      	movs	r3, #0
 801807a:	77bb      	strb	r3, [r7, #30]
 801807c:	e00e      	b.n	801809c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801807e:	89b8      	ldrh	r0, [r7, #12]
 8018080:	693b      	ldr	r3, [r7, #16]
 8018082:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018086:	7fbb      	ldrb	r3, [r7, #30]
 8018088:	4a29      	ldr	r2, [pc, #164]	@ (8018130 <dhcp_renew+0x128>)
 801808a:	5cd3      	ldrb	r3, [r2, r3]
 801808c:	461a      	mov	r2, r3
 801808e:	f000 fa97 	bl	80185c0 <dhcp_option_byte>
 8018092:	4603      	mov	r3, r0
 8018094:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018096:	7fbb      	ldrb	r3, [r7, #30]
 8018098:	3301      	adds	r3, #1
 801809a:	77bb      	strb	r3, [r7, #30]
 801809c:	7fbb      	ldrb	r3, [r7, #30]
 801809e:	2b02      	cmp	r3, #2
 80180a0:	d9ed      	bls.n	801807e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80180a2:	89b8      	ldrh	r0, [r7, #12]
 80180a4:	693b      	ldr	r3, [r7, #16]
 80180a6:	33f0      	adds	r3, #240	@ 0xf0
 80180a8:	697a      	ldr	r2, [r7, #20]
 80180aa:	4619      	mov	r1, r3
 80180ac:	f000 ffa8 	bl	8019000 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80180b0:	4b20      	ldr	r3, [pc, #128]	@ (8018134 <dhcp_renew+0x12c>)
 80180b2:	6818      	ldr	r0, [r3, #0]
 80180b4:	69bb      	ldr	r3, [r7, #24]
 80180b6:	f103 0218 	add.w	r2, r3, #24
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	9300      	str	r3, [sp, #0]
 80180be:	2343      	movs	r3, #67	@ 0x43
 80180c0:	6979      	ldr	r1, [r7, #20]
 80180c2:	f7fe fe11 	bl	8016ce8 <udp_sendto_if>
 80180c6:	4603      	mov	r3, r0
 80180c8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80180ca:	6978      	ldr	r0, [r7, #20]
 80180cc:	f7f8 fd72 	bl	8010bb4 <pbuf_free>
 80180d0:	e001      	b.n	80180d6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80180d2:	23ff      	movs	r3, #255	@ 0xff
 80180d4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80180d6:	69bb      	ldr	r3, [r7, #24]
 80180d8:	799b      	ldrb	r3, [r3, #6]
 80180da:	2bff      	cmp	r3, #255	@ 0xff
 80180dc:	d005      	beq.n	80180ea <dhcp_renew+0xe2>
    dhcp->tries++;
 80180de:	69bb      	ldr	r3, [r7, #24]
 80180e0:	799b      	ldrb	r3, [r3, #6]
 80180e2:	3301      	adds	r3, #1
 80180e4:	b2da      	uxtb	r2, r3
 80180e6:	69bb      	ldr	r3, [r7, #24]
 80180e8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80180ea:	69bb      	ldr	r3, [r7, #24]
 80180ec:	799b      	ldrb	r3, [r3, #6]
 80180ee:	2b09      	cmp	r3, #9
 80180f0:	d809      	bhi.n	8018106 <dhcp_renew+0xfe>
 80180f2:	69bb      	ldr	r3, [r7, #24]
 80180f4:	799b      	ldrb	r3, [r3, #6]
 80180f6:	461a      	mov	r2, r3
 80180f8:	0152      	lsls	r2, r2, #5
 80180fa:	1ad2      	subs	r2, r2, r3
 80180fc:	0092      	lsls	r2, r2, #2
 80180fe:	4413      	add	r3, r2
 8018100:	011b      	lsls	r3, r3, #4
 8018102:	b29b      	uxth	r3, r3
 8018104:	e001      	b.n	801810a <dhcp_renew+0x102>
 8018106:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801810a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801810c:	89fb      	ldrh	r3, [r7, #14]
 801810e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018112:	4a09      	ldr	r2, [pc, #36]	@ (8018138 <dhcp_renew+0x130>)
 8018114:	fb82 1203 	smull	r1, r2, r2, r3
 8018118:	1152      	asrs	r2, r2, #5
 801811a:	17db      	asrs	r3, r3, #31
 801811c:	1ad3      	subs	r3, r2, r3
 801811e:	b29a      	uxth	r2, r3
 8018120:	69bb      	ldr	r3, [r7, #24]
 8018122:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018124:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018128:	4618      	mov	r0, r3
 801812a:	3720      	adds	r7, #32
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}
 8018130:	200000c0 	.word	0x200000c0
 8018134:	20013dd4 	.word	0x20013dd4
 8018138:	10624dd3 	.word	0x10624dd3

0801813c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b08a      	sub	sp, #40	@ 0x28
 8018140:	af02      	add	r7, sp, #8
 8018142:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018148:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801814a:	2104      	movs	r1, #4
 801814c:	69b8      	ldr	r0, [r7, #24]
 801814e:	f000 f9e8 	bl	8018522 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018152:	f107 030c 	add.w	r3, r7, #12
 8018156:	2203      	movs	r2, #3
 8018158:	69b9      	ldr	r1, [r7, #24]
 801815a:	6878      	ldr	r0, [r7, #4]
 801815c:	f000 fe7a 	bl	8018e54 <dhcp_create_msg>
 8018160:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018162:	697b      	ldr	r3, [r7, #20]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d04c      	beq.n	8018202 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	685b      	ldr	r3, [r3, #4]
 801816c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801816e:	89b8      	ldrh	r0, [r7, #12]
 8018170:	693b      	ldr	r3, [r7, #16]
 8018172:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018176:	2302      	movs	r3, #2
 8018178:	2239      	movs	r2, #57	@ 0x39
 801817a:	f000 f9ed 	bl	8018558 <dhcp_option>
 801817e:	4603      	mov	r3, r0
 8018180:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018182:	89b8      	ldrh	r0, [r7, #12]
 8018184:	693b      	ldr	r3, [r7, #16]
 8018186:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801818e:	461a      	mov	r2, r3
 8018190:	f000 fa3c 	bl	801860c <dhcp_option_short>
 8018194:	4603      	mov	r3, r0
 8018196:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018198:	89b8      	ldrh	r0, [r7, #12]
 801819a:	693b      	ldr	r3, [r7, #16]
 801819c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80181a0:	2303      	movs	r3, #3
 80181a2:	2237      	movs	r2, #55	@ 0x37
 80181a4:	f000 f9d8 	bl	8018558 <dhcp_option>
 80181a8:	4603      	mov	r3, r0
 80181aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80181ac:	2300      	movs	r3, #0
 80181ae:	77bb      	strb	r3, [r7, #30]
 80181b0:	e00e      	b.n	80181d0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80181b2:	89b8      	ldrh	r0, [r7, #12]
 80181b4:	693b      	ldr	r3, [r7, #16]
 80181b6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80181ba:	7fbb      	ldrb	r3, [r7, #30]
 80181bc:	4a28      	ldr	r2, [pc, #160]	@ (8018260 <dhcp_rebind+0x124>)
 80181be:	5cd3      	ldrb	r3, [r2, r3]
 80181c0:	461a      	mov	r2, r3
 80181c2:	f000 f9fd 	bl	80185c0 <dhcp_option_byte>
 80181c6:	4603      	mov	r3, r0
 80181c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80181ca:	7fbb      	ldrb	r3, [r7, #30]
 80181cc:	3301      	adds	r3, #1
 80181ce:	77bb      	strb	r3, [r7, #30]
 80181d0:	7fbb      	ldrb	r3, [r7, #30]
 80181d2:	2b02      	cmp	r3, #2
 80181d4:	d9ed      	bls.n	80181b2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80181d6:	89b8      	ldrh	r0, [r7, #12]
 80181d8:	693b      	ldr	r3, [r7, #16]
 80181da:	33f0      	adds	r3, #240	@ 0xf0
 80181dc:	697a      	ldr	r2, [r7, #20]
 80181de:	4619      	mov	r1, r3
 80181e0:	f000 ff0e 	bl	8019000 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80181e4:	4b1f      	ldr	r3, [pc, #124]	@ (8018264 <dhcp_rebind+0x128>)
 80181e6:	6818      	ldr	r0, [r3, #0]
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	9300      	str	r3, [sp, #0]
 80181ec:	2343      	movs	r3, #67	@ 0x43
 80181ee:	4a1e      	ldr	r2, [pc, #120]	@ (8018268 <dhcp_rebind+0x12c>)
 80181f0:	6979      	ldr	r1, [r7, #20]
 80181f2:	f7fe fd79 	bl	8016ce8 <udp_sendto_if>
 80181f6:	4603      	mov	r3, r0
 80181f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80181fa:	6978      	ldr	r0, [r7, #20]
 80181fc:	f7f8 fcda 	bl	8010bb4 <pbuf_free>
 8018200:	e001      	b.n	8018206 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018202:	23ff      	movs	r3, #255	@ 0xff
 8018204:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018206:	69bb      	ldr	r3, [r7, #24]
 8018208:	799b      	ldrb	r3, [r3, #6]
 801820a:	2bff      	cmp	r3, #255	@ 0xff
 801820c:	d005      	beq.n	801821a <dhcp_rebind+0xde>
    dhcp->tries++;
 801820e:	69bb      	ldr	r3, [r7, #24]
 8018210:	799b      	ldrb	r3, [r3, #6]
 8018212:	3301      	adds	r3, #1
 8018214:	b2da      	uxtb	r2, r3
 8018216:	69bb      	ldr	r3, [r7, #24]
 8018218:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801821a:	69bb      	ldr	r3, [r7, #24]
 801821c:	799b      	ldrb	r3, [r3, #6]
 801821e:	2b09      	cmp	r3, #9
 8018220:	d809      	bhi.n	8018236 <dhcp_rebind+0xfa>
 8018222:	69bb      	ldr	r3, [r7, #24]
 8018224:	799b      	ldrb	r3, [r3, #6]
 8018226:	461a      	mov	r2, r3
 8018228:	0152      	lsls	r2, r2, #5
 801822a:	1ad2      	subs	r2, r2, r3
 801822c:	0092      	lsls	r2, r2, #2
 801822e:	4413      	add	r3, r2
 8018230:	00db      	lsls	r3, r3, #3
 8018232:	b29b      	uxth	r3, r3
 8018234:	e001      	b.n	801823a <dhcp_rebind+0xfe>
 8018236:	f242 7310 	movw	r3, #10000	@ 0x2710
 801823a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801823c:	89fb      	ldrh	r3, [r7, #14]
 801823e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018242:	4a0a      	ldr	r2, [pc, #40]	@ (801826c <dhcp_rebind+0x130>)
 8018244:	fb82 1203 	smull	r1, r2, r2, r3
 8018248:	1152      	asrs	r2, r2, #5
 801824a:	17db      	asrs	r3, r3, #31
 801824c:	1ad3      	subs	r3, r2, r3
 801824e:	b29a      	uxth	r2, r3
 8018250:	69bb      	ldr	r3, [r7, #24]
 8018252:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018254:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018258:	4618      	mov	r0, r3
 801825a:	3720      	adds	r7, #32
 801825c:	46bd      	mov	sp, r7
 801825e:	bd80      	pop	{r7, pc}
 8018260:	200000c0 	.word	0x200000c0
 8018264:	20013dd4 	.word	0x20013dd4
 8018268:	0806e198 	.word	0x0806e198
 801826c:	10624dd3 	.word	0x10624dd3

08018270 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8018270:	b5b0      	push	{r4, r5, r7, lr}
 8018272:	b08a      	sub	sp, #40	@ 0x28
 8018274:	af02      	add	r7, sp, #8
 8018276:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801827c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801827e:	2103      	movs	r1, #3
 8018280:	69b8      	ldr	r0, [r7, #24]
 8018282:	f000 f94e 	bl	8018522 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018286:	f107 030c 	add.w	r3, r7, #12
 801828a:	2203      	movs	r2, #3
 801828c:	69b9      	ldr	r1, [r7, #24]
 801828e:	6878      	ldr	r0, [r7, #4]
 8018290:	f000 fde0 	bl	8018e54 <dhcp_create_msg>
 8018294:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018296:	697b      	ldr	r3, [r7, #20]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d066      	beq.n	801836a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801829c:	697b      	ldr	r3, [r7, #20]
 801829e:	685b      	ldr	r3, [r3, #4]
 80182a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80182a2:	89b8      	ldrh	r0, [r7, #12]
 80182a4:	693b      	ldr	r3, [r7, #16]
 80182a6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80182aa:	2302      	movs	r3, #2
 80182ac:	2239      	movs	r2, #57	@ 0x39
 80182ae:	f000 f953 	bl	8018558 <dhcp_option>
 80182b2:	4603      	mov	r3, r0
 80182b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80182b6:	89b8      	ldrh	r0, [r7, #12]
 80182b8:	693b      	ldr	r3, [r7, #16]
 80182ba:	33f0      	adds	r3, #240	@ 0xf0
 80182bc:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80182c0:	4619      	mov	r1, r3
 80182c2:	f000 f9a3 	bl	801860c <dhcp_option_short>
 80182c6:	4603      	mov	r3, r0
 80182c8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80182ca:	89b8      	ldrh	r0, [r7, #12]
 80182cc:	693b      	ldr	r3, [r7, #16]
 80182ce:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80182d2:	2304      	movs	r3, #4
 80182d4:	2232      	movs	r2, #50	@ 0x32
 80182d6:	f000 f93f 	bl	8018558 <dhcp_option>
 80182da:	4603      	mov	r3, r0
 80182dc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80182de:	89bc      	ldrh	r4, [r7, #12]
 80182e0:	693b      	ldr	r3, [r7, #16]
 80182e2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80182e6:	69bb      	ldr	r3, [r7, #24]
 80182e8:	69db      	ldr	r3, [r3, #28]
 80182ea:	4618      	mov	r0, r3
 80182ec:	f7f6 ff55 	bl	800f19a <lwip_htonl>
 80182f0:	4603      	mov	r3, r0
 80182f2:	461a      	mov	r2, r3
 80182f4:	4629      	mov	r1, r5
 80182f6:	4620      	mov	r0, r4
 80182f8:	f000 f9ba 	bl	8018670 <dhcp_option_long>
 80182fc:	4603      	mov	r3, r0
 80182fe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018300:	89b8      	ldrh	r0, [r7, #12]
 8018302:	693b      	ldr	r3, [r7, #16]
 8018304:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018308:	2303      	movs	r3, #3
 801830a:	2237      	movs	r2, #55	@ 0x37
 801830c:	f000 f924 	bl	8018558 <dhcp_option>
 8018310:	4603      	mov	r3, r0
 8018312:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018314:	2300      	movs	r3, #0
 8018316:	77bb      	strb	r3, [r7, #30]
 8018318:	e00e      	b.n	8018338 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801831a:	89b8      	ldrh	r0, [r7, #12]
 801831c:	693b      	ldr	r3, [r7, #16]
 801831e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018322:	7fbb      	ldrb	r3, [r7, #30]
 8018324:	4a28      	ldr	r2, [pc, #160]	@ (80183c8 <dhcp_reboot+0x158>)
 8018326:	5cd3      	ldrb	r3, [r2, r3]
 8018328:	461a      	mov	r2, r3
 801832a:	f000 f949 	bl	80185c0 <dhcp_option_byte>
 801832e:	4603      	mov	r3, r0
 8018330:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018332:	7fbb      	ldrb	r3, [r7, #30]
 8018334:	3301      	adds	r3, #1
 8018336:	77bb      	strb	r3, [r7, #30]
 8018338:	7fbb      	ldrb	r3, [r7, #30]
 801833a:	2b02      	cmp	r3, #2
 801833c:	d9ed      	bls.n	801831a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801833e:	89b8      	ldrh	r0, [r7, #12]
 8018340:	693b      	ldr	r3, [r7, #16]
 8018342:	33f0      	adds	r3, #240	@ 0xf0
 8018344:	697a      	ldr	r2, [r7, #20]
 8018346:	4619      	mov	r1, r3
 8018348:	f000 fe5a 	bl	8019000 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801834c:	4b1f      	ldr	r3, [pc, #124]	@ (80183cc <dhcp_reboot+0x15c>)
 801834e:	6818      	ldr	r0, [r3, #0]
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	9300      	str	r3, [sp, #0]
 8018354:	2343      	movs	r3, #67	@ 0x43
 8018356:	4a1e      	ldr	r2, [pc, #120]	@ (80183d0 <dhcp_reboot+0x160>)
 8018358:	6979      	ldr	r1, [r7, #20]
 801835a:	f7fe fcc5 	bl	8016ce8 <udp_sendto_if>
 801835e:	4603      	mov	r3, r0
 8018360:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018362:	6978      	ldr	r0, [r7, #20]
 8018364:	f7f8 fc26 	bl	8010bb4 <pbuf_free>
 8018368:	e001      	b.n	801836e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801836a:	23ff      	movs	r3, #255	@ 0xff
 801836c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801836e:	69bb      	ldr	r3, [r7, #24]
 8018370:	799b      	ldrb	r3, [r3, #6]
 8018372:	2bff      	cmp	r3, #255	@ 0xff
 8018374:	d005      	beq.n	8018382 <dhcp_reboot+0x112>
    dhcp->tries++;
 8018376:	69bb      	ldr	r3, [r7, #24]
 8018378:	799b      	ldrb	r3, [r3, #6]
 801837a:	3301      	adds	r3, #1
 801837c:	b2da      	uxtb	r2, r3
 801837e:	69bb      	ldr	r3, [r7, #24]
 8018380:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8018382:	69bb      	ldr	r3, [r7, #24]
 8018384:	799b      	ldrb	r3, [r3, #6]
 8018386:	2b09      	cmp	r3, #9
 8018388:	d809      	bhi.n	801839e <dhcp_reboot+0x12e>
 801838a:	69bb      	ldr	r3, [r7, #24]
 801838c:	799b      	ldrb	r3, [r3, #6]
 801838e:	461a      	mov	r2, r3
 8018390:	0152      	lsls	r2, r2, #5
 8018392:	1ad2      	subs	r2, r2, r3
 8018394:	0092      	lsls	r2, r2, #2
 8018396:	4413      	add	r3, r2
 8018398:	00db      	lsls	r3, r3, #3
 801839a:	b29b      	uxth	r3, r3
 801839c:	e001      	b.n	80183a2 <dhcp_reboot+0x132>
 801839e:	f242 7310 	movw	r3, #10000	@ 0x2710
 80183a2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80183a4:	89fb      	ldrh	r3, [r7, #14]
 80183a6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80183aa:	4a0a      	ldr	r2, [pc, #40]	@ (80183d4 <dhcp_reboot+0x164>)
 80183ac:	fb82 1203 	smull	r1, r2, r2, r3
 80183b0:	1152      	asrs	r2, r2, #5
 80183b2:	17db      	asrs	r3, r3, #31
 80183b4:	1ad3      	subs	r3, r2, r3
 80183b6:	b29a      	uxth	r2, r3
 80183b8:	69bb      	ldr	r3, [r7, #24]
 80183ba:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80183bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80183c0:	4618      	mov	r0, r3
 80183c2:	3720      	adds	r7, #32
 80183c4:	46bd      	mov	sp, r7
 80183c6:	bdb0      	pop	{r4, r5, r7, pc}
 80183c8:	200000c0 	.word	0x200000c0
 80183cc:	20013dd4 	.word	0x20013dd4
 80183d0:	0806e198 	.word	0x0806e198
 80183d4:	10624dd3 	.word	0x10624dd3

080183d8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80183d8:	b5b0      	push	{r4, r5, r7, lr}
 80183da:	b08a      	sub	sp, #40	@ 0x28
 80183dc:	af02      	add	r7, sp, #8
 80183de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80183e6:	69fb      	ldr	r3, [r7, #28]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	f000 8084 	beq.w	80184f6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80183ee:	69fb      	ldr	r3, [r7, #28]
 80183f0:	795b      	ldrb	r3, [r3, #5]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	f000 8081 	beq.w	80184fa <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80183f8:	69fb      	ldr	r3, [r7, #28]
 80183fa:	699b      	ldr	r3, [r3, #24]
 80183fc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80183fe:	69fb      	ldr	r3, [r7, #28]
 8018400:	2200      	movs	r2, #0
 8018402:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8018404:	69fb      	ldr	r3, [r7, #28]
 8018406:	2200      	movs	r2, #0
 8018408:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801840a:	69fb      	ldr	r3, [r7, #28]
 801840c:	2200      	movs	r2, #0
 801840e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8018410:	69fb      	ldr	r3, [r7, #28]
 8018412:	2200      	movs	r2, #0
 8018414:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8018416:	69fb      	ldr	r3, [r7, #28]
 8018418:	2200      	movs	r2, #0
 801841a:	631a      	str	r2, [r3, #48]	@ 0x30
 801841c:	69fb      	ldr	r3, [r7, #28]
 801841e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018420:	69fb      	ldr	r3, [r7, #28]
 8018422:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018424:	69fb      	ldr	r3, [r7, #28]
 8018426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018428:	69fb      	ldr	r3, [r7, #28]
 801842a:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801842c:	69fb      	ldr	r3, [r7, #28]
 801842e:	2200      	movs	r2, #0
 8018430:	829a      	strh	r2, [r3, #20]
 8018432:	69fb      	ldr	r3, [r7, #28]
 8018434:	8a9a      	ldrh	r2, [r3, #20]
 8018436:	69fb      	ldr	r3, [r7, #28]
 8018438:	825a      	strh	r2, [r3, #18]
 801843a:	69fb      	ldr	r3, [r7, #28]
 801843c:	8a5a      	ldrh	r2, [r3, #18]
 801843e:	69fb      	ldr	r3, [r7, #28]
 8018440:	821a      	strh	r2, [r3, #16]
 8018442:	69fb      	ldr	r3, [r7, #28]
 8018444:	8a1a      	ldrh	r2, [r3, #16]
 8018446:	69fb      	ldr	r3, [r7, #28]
 8018448:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801844a:	6878      	ldr	r0, [r7, #4]
 801844c:	f000 fe06 	bl	801905c <dhcp_supplied_address>
 8018450:	4603      	mov	r3, r0
 8018452:	2b00      	cmp	r3, #0
 8018454:	d03b      	beq.n	80184ce <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8018456:	f107 030e 	add.w	r3, r7, #14
 801845a:	2207      	movs	r2, #7
 801845c:	69f9      	ldr	r1, [r7, #28]
 801845e:	6878      	ldr	r0, [r7, #4]
 8018460:	f000 fcf8 	bl	8018e54 <dhcp_create_msg>
 8018464:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8018466:	69bb      	ldr	r3, [r7, #24]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d030      	beq.n	80184ce <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801846c:	69bb      	ldr	r3, [r7, #24]
 801846e:	685b      	ldr	r3, [r3, #4]
 8018470:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8018472:	89f8      	ldrh	r0, [r7, #14]
 8018474:	697b      	ldr	r3, [r7, #20]
 8018476:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801847a:	2304      	movs	r3, #4
 801847c:	2236      	movs	r2, #54	@ 0x36
 801847e:	f000 f86b 	bl	8018558 <dhcp_option>
 8018482:	4603      	mov	r3, r0
 8018484:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8018486:	89fc      	ldrh	r4, [r7, #14]
 8018488:	697b      	ldr	r3, [r7, #20]
 801848a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801848e:	693b      	ldr	r3, [r7, #16]
 8018490:	4618      	mov	r0, r3
 8018492:	f7f6 fe82 	bl	800f19a <lwip_htonl>
 8018496:	4603      	mov	r3, r0
 8018498:	461a      	mov	r2, r3
 801849a:	4629      	mov	r1, r5
 801849c:	4620      	mov	r0, r4
 801849e:	f000 f8e7 	bl	8018670 <dhcp_option_long>
 80184a2:	4603      	mov	r3, r0
 80184a4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80184a6:	89f8      	ldrh	r0, [r7, #14]
 80184a8:	697b      	ldr	r3, [r7, #20]
 80184aa:	33f0      	adds	r3, #240	@ 0xf0
 80184ac:	69ba      	ldr	r2, [r7, #24]
 80184ae:	4619      	mov	r1, r3
 80184b0:	f000 fda6 	bl	8019000 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80184b4:	4b13      	ldr	r3, [pc, #76]	@ (8018504 <dhcp_release_and_stop+0x12c>)
 80184b6:	6818      	ldr	r0, [r3, #0]
 80184b8:	f107 0210 	add.w	r2, r7, #16
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	9300      	str	r3, [sp, #0]
 80184c0:	2343      	movs	r3, #67	@ 0x43
 80184c2:	69b9      	ldr	r1, [r7, #24]
 80184c4:	f7fe fc10 	bl	8016ce8 <udp_sendto_if>
      pbuf_free(p_out);
 80184c8:	69b8      	ldr	r0, [r7, #24]
 80184ca:	f7f8 fb73 	bl	8010bb4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80184ce:	4b0e      	ldr	r3, [pc, #56]	@ (8018508 <dhcp_release_and_stop+0x130>)
 80184d0:	4a0d      	ldr	r2, [pc, #52]	@ (8018508 <dhcp_release_and_stop+0x130>)
 80184d2:	490d      	ldr	r1, [pc, #52]	@ (8018508 <dhcp_release_and_stop+0x130>)
 80184d4:	6878      	ldr	r0, [r7, #4]
 80184d6:	f7f7 fe6d 	bl	80101b4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80184da:	2100      	movs	r1, #0
 80184dc:	69f8      	ldr	r0, [r7, #28]
 80184de:	f000 f820 	bl	8018522 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80184e2:	69fb      	ldr	r3, [r7, #28]
 80184e4:	791b      	ldrb	r3, [r3, #4]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d008      	beq.n	80184fc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80184ea:	f7fe ff8b 	bl	8017404 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80184ee:	69fb      	ldr	r3, [r7, #28]
 80184f0:	2200      	movs	r2, #0
 80184f2:	711a      	strb	r2, [r3, #4]
 80184f4:	e002      	b.n	80184fc <dhcp_release_and_stop+0x124>
    return;
 80184f6:	bf00      	nop
 80184f8:	e000      	b.n	80184fc <dhcp_release_and_stop+0x124>
    return;
 80184fa:	bf00      	nop
  }
}
 80184fc:	3720      	adds	r7, #32
 80184fe:	46bd      	mov	sp, r7
 8018500:	bdb0      	pop	{r4, r5, r7, pc}
 8018502:	bf00      	nop
 8018504:	20013dd4 	.word	0x20013dd4
 8018508:	0806e194 	.word	0x0806e194

0801850c <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b082      	sub	sp, #8
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8018514:	6878      	ldr	r0, [r7, #4]
 8018516:	f7ff ff5f 	bl	80183d8 <dhcp_release_and_stop>
}
 801851a:	bf00      	nop
 801851c:	3708      	adds	r7, #8
 801851e:	46bd      	mov	sp, r7
 8018520:	bd80      	pop	{r7, pc}

08018522 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8018522:	b480      	push	{r7}
 8018524:	b083      	sub	sp, #12
 8018526:	af00      	add	r7, sp, #0
 8018528:	6078      	str	r0, [r7, #4]
 801852a:	460b      	mov	r3, r1
 801852c:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	795b      	ldrb	r3, [r3, #5]
 8018532:	78fa      	ldrb	r2, [r7, #3]
 8018534:	429a      	cmp	r2, r3
 8018536:	d008      	beq.n	801854a <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	78fa      	ldrb	r2, [r7, #3]
 801853c:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	2200      	movs	r2, #0
 8018542:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	2200      	movs	r2, #0
 8018548:	811a      	strh	r2, [r3, #8]
  }
}
 801854a:	bf00      	nop
 801854c:	370c      	adds	r7, #12
 801854e:	46bd      	mov	sp, r7
 8018550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018554:	4770      	bx	lr
	...

08018558 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b082      	sub	sp, #8
 801855c:	af00      	add	r7, sp, #0
 801855e:	6039      	str	r1, [r7, #0]
 8018560:	4611      	mov	r1, r2
 8018562:	461a      	mov	r2, r3
 8018564:	4603      	mov	r3, r0
 8018566:	80fb      	strh	r3, [r7, #6]
 8018568:	460b      	mov	r3, r1
 801856a:	717b      	strb	r3, [r7, #5]
 801856c:	4613      	mov	r3, r2
 801856e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8018570:	88fa      	ldrh	r2, [r7, #6]
 8018572:	793b      	ldrb	r3, [r7, #4]
 8018574:	4413      	add	r3, r2
 8018576:	3302      	adds	r3, #2
 8018578:	2b44      	cmp	r3, #68	@ 0x44
 801857a:	d906      	bls.n	801858a <dhcp_option+0x32>
 801857c:	4b0d      	ldr	r3, [pc, #52]	@ (80185b4 <dhcp_option+0x5c>)
 801857e:	f240 529a 	movw	r2, #1434	@ 0x59a
 8018582:	490d      	ldr	r1, [pc, #52]	@ (80185b8 <dhcp_option+0x60>)
 8018584:	480d      	ldr	r0, [pc, #52]	@ (80185bc <dhcp_option+0x64>)
 8018586:	f004 f953 	bl	801c830 <iprintf>
  options[options_out_len++] = option_type;
 801858a:	88fb      	ldrh	r3, [r7, #6]
 801858c:	1c5a      	adds	r2, r3, #1
 801858e:	80fa      	strh	r2, [r7, #6]
 8018590:	461a      	mov	r2, r3
 8018592:	683b      	ldr	r3, [r7, #0]
 8018594:	4413      	add	r3, r2
 8018596:	797a      	ldrb	r2, [r7, #5]
 8018598:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801859a:	88fb      	ldrh	r3, [r7, #6]
 801859c:	1c5a      	adds	r2, r3, #1
 801859e:	80fa      	strh	r2, [r7, #6]
 80185a0:	461a      	mov	r2, r3
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	4413      	add	r3, r2
 80185a6:	793a      	ldrb	r2, [r7, #4]
 80185a8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80185aa:	88fb      	ldrh	r3, [r7, #6]
}
 80185ac:	4618      	mov	r0, r3
 80185ae:	3708      	adds	r7, #8
 80185b0:	46bd      	mov	sp, r7
 80185b2:	bd80      	pop	{r7, pc}
 80185b4:	0802193c 	.word	0x0802193c
 80185b8:	08021ad0 	.word	0x08021ad0
 80185bc:	0802199c 	.word	0x0802199c

080185c0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b082      	sub	sp, #8
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	4603      	mov	r3, r0
 80185c8:	6039      	str	r1, [r7, #0]
 80185ca:	80fb      	strh	r3, [r7, #6]
 80185cc:	4613      	mov	r3, r2
 80185ce:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80185d0:	88fb      	ldrh	r3, [r7, #6]
 80185d2:	2b43      	cmp	r3, #67	@ 0x43
 80185d4:	d906      	bls.n	80185e4 <dhcp_option_byte+0x24>
 80185d6:	4b0a      	ldr	r3, [pc, #40]	@ (8018600 <dhcp_option_byte+0x40>)
 80185d8:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 80185dc:	4909      	ldr	r1, [pc, #36]	@ (8018604 <dhcp_option_byte+0x44>)
 80185de:	480a      	ldr	r0, [pc, #40]	@ (8018608 <dhcp_option_byte+0x48>)
 80185e0:	f004 f926 	bl	801c830 <iprintf>
  options[options_out_len++] = value;
 80185e4:	88fb      	ldrh	r3, [r7, #6]
 80185e6:	1c5a      	adds	r2, r3, #1
 80185e8:	80fa      	strh	r2, [r7, #6]
 80185ea:	461a      	mov	r2, r3
 80185ec:	683b      	ldr	r3, [r7, #0]
 80185ee:	4413      	add	r3, r2
 80185f0:	797a      	ldrb	r2, [r7, #5]
 80185f2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80185f4:	88fb      	ldrh	r3, [r7, #6]
}
 80185f6:	4618      	mov	r0, r3
 80185f8:	3708      	adds	r7, #8
 80185fa:	46bd      	mov	sp, r7
 80185fc:	bd80      	pop	{r7, pc}
 80185fe:	bf00      	nop
 8018600:	0802193c 	.word	0x0802193c
 8018604:	08021b14 	.word	0x08021b14
 8018608:	0802199c 	.word	0x0802199c

0801860c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b082      	sub	sp, #8
 8018610:	af00      	add	r7, sp, #0
 8018612:	4603      	mov	r3, r0
 8018614:	6039      	str	r1, [r7, #0]
 8018616:	80fb      	strh	r3, [r7, #6]
 8018618:	4613      	mov	r3, r2
 801861a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801861c:	88fb      	ldrh	r3, [r7, #6]
 801861e:	3302      	adds	r3, #2
 8018620:	2b44      	cmp	r3, #68	@ 0x44
 8018622:	d906      	bls.n	8018632 <dhcp_option_short+0x26>
 8018624:	4b0f      	ldr	r3, [pc, #60]	@ (8018664 <dhcp_option_short+0x58>)
 8018626:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801862a:	490f      	ldr	r1, [pc, #60]	@ (8018668 <dhcp_option_short+0x5c>)
 801862c:	480f      	ldr	r0, [pc, #60]	@ (801866c <dhcp_option_short+0x60>)
 801862e:	f004 f8ff 	bl	801c830 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8018632:	88bb      	ldrh	r3, [r7, #4]
 8018634:	0a1b      	lsrs	r3, r3, #8
 8018636:	b29a      	uxth	r2, r3
 8018638:	88fb      	ldrh	r3, [r7, #6]
 801863a:	1c59      	adds	r1, r3, #1
 801863c:	80f9      	strh	r1, [r7, #6]
 801863e:	4619      	mov	r1, r3
 8018640:	683b      	ldr	r3, [r7, #0]
 8018642:	440b      	add	r3, r1
 8018644:	b2d2      	uxtb	r2, r2
 8018646:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8018648:	88fb      	ldrh	r3, [r7, #6]
 801864a:	1c5a      	adds	r2, r3, #1
 801864c:	80fa      	strh	r2, [r7, #6]
 801864e:	461a      	mov	r2, r3
 8018650:	683b      	ldr	r3, [r7, #0]
 8018652:	4413      	add	r3, r2
 8018654:	88ba      	ldrh	r2, [r7, #4]
 8018656:	b2d2      	uxtb	r2, r2
 8018658:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801865a:	88fb      	ldrh	r3, [r7, #6]
}
 801865c:	4618      	mov	r0, r3
 801865e:	3708      	adds	r7, #8
 8018660:	46bd      	mov	sp, r7
 8018662:	bd80      	pop	{r7, pc}
 8018664:	0802193c 	.word	0x0802193c
 8018668:	08021b4c 	.word	0x08021b4c
 801866c:	0802199c 	.word	0x0802199c

08018670 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b084      	sub	sp, #16
 8018674:	af00      	add	r7, sp, #0
 8018676:	4603      	mov	r3, r0
 8018678:	60b9      	str	r1, [r7, #8]
 801867a:	607a      	str	r2, [r7, #4]
 801867c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801867e:	89fb      	ldrh	r3, [r7, #14]
 8018680:	3304      	adds	r3, #4
 8018682:	2b44      	cmp	r3, #68	@ 0x44
 8018684:	d906      	bls.n	8018694 <dhcp_option_long+0x24>
 8018686:	4b19      	ldr	r3, [pc, #100]	@ (80186ec <dhcp_option_long+0x7c>)
 8018688:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 801868c:	4918      	ldr	r1, [pc, #96]	@ (80186f0 <dhcp_option_long+0x80>)
 801868e:	4819      	ldr	r0, [pc, #100]	@ (80186f4 <dhcp_option_long+0x84>)
 8018690:	f004 f8ce 	bl	801c830 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	0e1a      	lsrs	r2, r3, #24
 8018698:	89fb      	ldrh	r3, [r7, #14]
 801869a:	1c59      	adds	r1, r3, #1
 801869c:	81f9      	strh	r1, [r7, #14]
 801869e:	4619      	mov	r1, r3
 80186a0:	68bb      	ldr	r3, [r7, #8]
 80186a2:	440b      	add	r3, r1
 80186a4:	b2d2      	uxtb	r2, r2
 80186a6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	0c1a      	lsrs	r2, r3, #16
 80186ac:	89fb      	ldrh	r3, [r7, #14]
 80186ae:	1c59      	adds	r1, r3, #1
 80186b0:	81f9      	strh	r1, [r7, #14]
 80186b2:	4619      	mov	r1, r3
 80186b4:	68bb      	ldr	r3, [r7, #8]
 80186b6:	440b      	add	r3, r1
 80186b8:	b2d2      	uxtb	r2, r2
 80186ba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	0a1a      	lsrs	r2, r3, #8
 80186c0:	89fb      	ldrh	r3, [r7, #14]
 80186c2:	1c59      	adds	r1, r3, #1
 80186c4:	81f9      	strh	r1, [r7, #14]
 80186c6:	4619      	mov	r1, r3
 80186c8:	68bb      	ldr	r3, [r7, #8]
 80186ca:	440b      	add	r3, r1
 80186cc:	b2d2      	uxtb	r2, r2
 80186ce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80186d0:	89fb      	ldrh	r3, [r7, #14]
 80186d2:	1c5a      	adds	r2, r3, #1
 80186d4:	81fa      	strh	r2, [r7, #14]
 80186d6:	461a      	mov	r2, r3
 80186d8:	68bb      	ldr	r3, [r7, #8]
 80186da:	4413      	add	r3, r2
 80186dc:	687a      	ldr	r2, [r7, #4]
 80186de:	b2d2      	uxtb	r2, r2
 80186e0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80186e2:	89fb      	ldrh	r3, [r7, #14]
}
 80186e4:	4618      	mov	r0, r3
 80186e6:	3710      	adds	r7, #16
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bd80      	pop	{r7, pc}
 80186ec:	0802193c 	.word	0x0802193c
 80186f0:	08021b88 	.word	0x08021b88
 80186f4:	0802199c 	.word	0x0802199c

080186f8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b092      	sub	sp, #72	@ 0x48
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	6078      	str	r0, [r7, #4]
 8018700:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8018702:	2300      	movs	r3, #0
 8018704:	633b      	str	r3, [r7, #48]	@ 0x30
  int parse_sname_as_options = 0;
 8018706:	2300      	movs	r3, #0
 8018708:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801870a:	2208      	movs	r2, #8
 801870c:	2100      	movs	r1, #0
 801870e:	48b8      	ldr	r0, [pc, #736]	@ (80189f0 <dhcp_parse_reply+0x2f8>)
 8018710:	f004 f9f0 	bl	801caf4 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	895b      	ldrh	r3, [r3, #10]
 8018718:	2b2b      	cmp	r3, #43	@ 0x2b
 801871a:	d802      	bhi.n	8018722 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801871c:	f06f 0301 	mvn.w	r3, #1
 8018720:	e2b8      	b.n	8018c94 <dhcp_parse_reply+0x59c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	685b      	ldr	r3, [r3, #4]
 8018726:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8018728:	23f0      	movs	r3, #240	@ 0xf0
 801872a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	891b      	ldrh	r3, [r3, #8]
 8018730:	877b      	strh	r3, [r7, #58]	@ 0x3a
again:
  q = p;
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8018736:	e00c      	b.n	8018752 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8018738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801873a:	895b      	ldrh	r3, [r3, #10]
 801873c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 801873e:	1ad3      	subs	r3, r2, r3
 8018740:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8018742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018744:	895b      	ldrh	r3, [r3, #10]
 8018746:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018748:	1ad3      	subs	r3, r2, r3
 801874a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    q = q->next;
 801874c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8018752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018754:	2b00      	cmp	r3, #0
 8018756:	d004      	beq.n	8018762 <dhcp_parse_reply+0x6a>
 8018758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801875a:	895b      	ldrh	r3, [r3, #10]
 801875c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 801875e:	429a      	cmp	r2, r3
 8018760:	d2ea      	bcs.n	8018738 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8018762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018764:	2b00      	cmp	r3, #0
 8018766:	d102      	bne.n	801876e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8018768:	f06f 0301 	mvn.w	r3, #1
 801876c:	e292      	b.n	8018c94 <dhcp_parse_reply+0x59c>
  }
  offset = options_idx;
 801876e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018770:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  offset_max = options_idx_max;
 8018774:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018776:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  options = (u8_t *)q->payload;
 8018778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801877a:	685b      	ldr	r3, [r3, #4]
 801877c:	643b      	str	r3, [r7, #64]	@ 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801877e:	e247      	b.n	8018c10 <dhcp_parse_reply+0x518>
    u8_t op = options[offset];
 8018780:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018784:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018786:	4413      	add	r3, r2
 8018788:	781b      	ldrb	r3, [r3, #0]
 801878a:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 801878c:	2300      	movs	r3, #0
 801878e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    int decode_idx = -1;
 8018792:	f04f 33ff 	mov.w	r3, #4294967295
 8018796:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 8018798:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801879c:	3302      	adds	r3, #2
 801879e:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (val_offset < offset) {
 80187a0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80187a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80187a6:	429a      	cmp	r2, r3
 80187a8:	d202      	bcs.n	80187b0 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 80187aa:	f06f 0301 	mvn.w	r3, #1
 80187ae:	e271      	b.n	8018c94 <dhcp_parse_reply+0x59c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80187b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80187b4:	3301      	adds	r3, #1
 80187b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80187b8:	8952      	ldrh	r2, [r2, #10]
 80187ba:	4293      	cmp	r3, r2
 80187bc:	da08      	bge.n	80187d0 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 80187be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80187c2:	3301      	adds	r3, #1
 80187c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80187c6:	4413      	add	r3, r2
 80187c8:	781b      	ldrb	r3, [r3, #0]
 80187ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80187ce:	e00b      	b.n	80187e8 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80187d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d004      	beq.n	80187e2 <dhcp_parse_reply+0xea>
 80187d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	685b      	ldr	r3, [r3, #4]
 80187de:	781b      	ldrb	r3, [r3, #0]
 80187e0:	e000      	b.n	80187e4 <dhcp_parse_reply+0xec>
 80187e2:	2300      	movs	r3, #0
 80187e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80187e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80187ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    switch (op) {
 80187f0:	7efb      	ldrb	r3, [r7, #27]
 80187f2:	2b3b      	cmp	r3, #59	@ 0x3b
 80187f4:	f200 812c 	bhi.w	8018a50 <dhcp_parse_reply+0x358>
 80187f8:	a201      	add	r2, pc, #4	@ (adr r2, 8018800 <dhcp_parse_reply+0x108>)
 80187fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187fe:	bf00      	nop
 8018800:	080188f1 	.word	0x080188f1
 8018804:	08018901 	.word	0x08018901
 8018808:	08018a51 	.word	0x08018a51
 801880c:	08018923 	.word	0x08018923
 8018810:	08018a51 	.word	0x08018a51
 8018814:	08018a51 	.word	0x08018a51
 8018818:	08018a51 	.word	0x08018a51
 801881c:	08018a51 	.word	0x08018a51
 8018820:	08018a51 	.word	0x08018a51
 8018824:	08018a51 	.word	0x08018a51
 8018828:	08018a51 	.word	0x08018a51
 801882c:	08018a51 	.word	0x08018a51
 8018830:	08018a51 	.word	0x08018a51
 8018834:	08018a51 	.word	0x08018a51
 8018838:	08018a51 	.word	0x08018a51
 801883c:	08018a51 	.word	0x08018a51
 8018840:	08018a51 	.word	0x08018a51
 8018844:	08018a51 	.word	0x08018a51
 8018848:	08018a51 	.word	0x08018a51
 801884c:	08018a51 	.word	0x08018a51
 8018850:	08018a51 	.word	0x08018a51
 8018854:	08018a51 	.word	0x08018a51
 8018858:	08018a51 	.word	0x08018a51
 801885c:	08018a51 	.word	0x08018a51
 8018860:	08018a51 	.word	0x08018a51
 8018864:	08018a51 	.word	0x08018a51
 8018868:	08018a51 	.word	0x08018a51
 801886c:	08018a51 	.word	0x08018a51
 8018870:	08018a51 	.word	0x08018a51
 8018874:	08018a51 	.word	0x08018a51
 8018878:	08018a51 	.word	0x08018a51
 801887c:	08018a51 	.word	0x08018a51
 8018880:	08018a51 	.word	0x08018a51
 8018884:	08018a51 	.word	0x08018a51
 8018888:	08018a51 	.word	0x08018a51
 801888c:	08018a51 	.word	0x08018a51
 8018890:	08018a51 	.word	0x08018a51
 8018894:	08018a51 	.word	0x08018a51
 8018898:	08018a51 	.word	0x08018a51
 801889c:	08018a51 	.word	0x08018a51
 80188a0:	08018a51 	.word	0x08018a51
 80188a4:	08018a51 	.word	0x08018a51
 80188a8:	08018a51 	.word	0x08018a51
 80188ac:	08018a51 	.word	0x08018a51
 80188b0:	08018a51 	.word	0x08018a51
 80188b4:	08018a51 	.word	0x08018a51
 80188b8:	08018a51 	.word	0x08018a51
 80188bc:	08018a51 	.word	0x08018a51
 80188c0:	08018a51 	.word	0x08018a51
 80188c4:	08018a51 	.word	0x08018a51
 80188c8:	08018a51 	.word	0x08018a51
 80188cc:	0801894f 	.word	0x0801894f
 80188d0:	08018971 	.word	0x08018971
 80188d4:	080189ad 	.word	0x080189ad
 80188d8:	080189cf 	.word	0x080189cf
 80188dc:	08018a51 	.word	0x08018a51
 80188e0:	08018a51 	.word	0x08018a51
 80188e4:	08018a51 	.word	0x08018a51
 80188e8:	08018a0d 	.word	0x08018a0d
 80188ec:	08018a2f 	.word	0x08018a2f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80188f0:	2300      	movs	r3, #0
 80188f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80188f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80188fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        /* will be increased below */
        break;
 80188fe:	e0ab      	b.n	8018a58 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018900:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018904:	2b04      	cmp	r3, #4
 8018906:	d009      	beq.n	801891c <dhcp_parse_reply+0x224>
 8018908:	4b3a      	ldr	r3, [pc, #232]	@ (80189f4 <dhcp_parse_reply+0x2fc>)
 801890a:	f240 622e 	movw	r2, #1582	@ 0x62e
 801890e:	493a      	ldr	r1, [pc, #232]	@ (80189f8 <dhcp_parse_reply+0x300>)
 8018910:	483a      	ldr	r0, [pc, #232]	@ (80189fc <dhcp_parse_reply+0x304>)
 8018912:	f003 ff8d 	bl	801c830 <iprintf>
 8018916:	f06f 0305 	mvn.w	r3, #5
 801891a:	e1bb      	b.n	8018c94 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801891c:	2306      	movs	r3, #6
 801891e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8018920:	e09a      	b.n	8018a58 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8018922:	2304      	movs	r3, #4
 8018924:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8018928:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 801892c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8018930:	429a      	cmp	r2, r3
 8018932:	d209      	bcs.n	8018948 <dhcp_parse_reply+0x250>
 8018934:	4b2f      	ldr	r3, [pc, #188]	@ (80189f4 <dhcp_parse_reply+0x2fc>)
 8018936:	f240 6233 	movw	r2, #1587	@ 0x633
 801893a:	4931      	ldr	r1, [pc, #196]	@ (8018a00 <dhcp_parse_reply+0x308>)
 801893c:	482f      	ldr	r0, [pc, #188]	@ (80189fc <dhcp_parse_reply+0x304>)
 801893e:	f003 ff77 	bl	801c830 <iprintf>
 8018942:	f06f 0305 	mvn.w	r3, #5
 8018946:	e1a5      	b.n	8018c94 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8018948:	2307      	movs	r3, #7
 801894a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801894c:	e084      	b.n	8018a58 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801894e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018952:	2b04      	cmp	r3, #4
 8018954:	d009      	beq.n	801896a <dhcp_parse_reply+0x272>
 8018956:	4b27      	ldr	r3, [pc, #156]	@ (80189f4 <dhcp_parse_reply+0x2fc>)
 8018958:	f240 6241 	movw	r2, #1601	@ 0x641
 801895c:	4926      	ldr	r1, [pc, #152]	@ (80189f8 <dhcp_parse_reply+0x300>)
 801895e:	4827      	ldr	r0, [pc, #156]	@ (80189fc <dhcp_parse_reply+0x304>)
 8018960:	f003 ff66 	bl	801c830 <iprintf>
 8018964:	f06f 0305 	mvn.w	r3, #5
 8018968:	e194      	b.n	8018c94 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801896a:	2303      	movs	r3, #3
 801896c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801896e:	e073      	b.n	8018a58 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8018970:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018974:	2b01      	cmp	r3, #1
 8018976:	d009      	beq.n	801898c <dhcp_parse_reply+0x294>
 8018978:	4b1e      	ldr	r3, [pc, #120]	@ (80189f4 <dhcp_parse_reply+0x2fc>)
 801897a:	f240 624f 	movw	r2, #1615	@ 0x64f
 801897e:	4921      	ldr	r1, [pc, #132]	@ (8018a04 <dhcp_parse_reply+0x30c>)
 8018980:	481e      	ldr	r0, [pc, #120]	@ (80189fc <dhcp_parse_reply+0x304>)
 8018982:	f003 ff55 	bl	801c830 <iprintf>
 8018986:	f06f 0305 	mvn.w	r3, #5
 801898a:	e183      	b.n	8018c94 <dhcp_parse_reply+0x59c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801898c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801898e:	2bf0      	cmp	r3, #240	@ 0xf0
 8018990:	d009      	beq.n	80189a6 <dhcp_parse_reply+0x2ae>
 8018992:	4b18      	ldr	r3, [pc, #96]	@ (80189f4 <dhcp_parse_reply+0x2fc>)
 8018994:	f240 6251 	movw	r2, #1617	@ 0x651
 8018998:	491b      	ldr	r1, [pc, #108]	@ (8018a08 <dhcp_parse_reply+0x310>)
 801899a:	4818      	ldr	r0, [pc, #96]	@ (80189fc <dhcp_parse_reply+0x304>)
 801899c:	f003 ff48 	bl	801c830 <iprintf>
 80189a0:	f06f 0305 	mvn.w	r3, #5
 80189a4:	e176      	b.n	8018c94 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80189a6:	2300      	movs	r3, #0
 80189a8:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80189aa:	e055      	b.n	8018a58 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80189ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80189b0:	2b01      	cmp	r3, #1
 80189b2:	d009      	beq.n	80189c8 <dhcp_parse_reply+0x2d0>
 80189b4:	4b0f      	ldr	r3, [pc, #60]	@ (80189f4 <dhcp_parse_reply+0x2fc>)
 80189b6:	f240 6255 	movw	r2, #1621	@ 0x655
 80189ba:	4912      	ldr	r1, [pc, #72]	@ (8018a04 <dhcp_parse_reply+0x30c>)
 80189bc:	480f      	ldr	r0, [pc, #60]	@ (80189fc <dhcp_parse_reply+0x304>)
 80189be:	f003 ff37 	bl	801c830 <iprintf>
 80189c2:	f06f 0305 	mvn.w	r3, #5
 80189c6:	e165      	b.n	8018c94 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80189c8:	2301      	movs	r3, #1
 80189ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80189cc:	e044      	b.n	8018a58 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80189ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80189d2:	2b04      	cmp	r3, #4
 80189d4:	d009      	beq.n	80189ea <dhcp_parse_reply+0x2f2>
 80189d6:	4b07      	ldr	r3, [pc, #28]	@ (80189f4 <dhcp_parse_reply+0x2fc>)
 80189d8:	f240 6259 	movw	r2, #1625	@ 0x659
 80189dc:	4906      	ldr	r1, [pc, #24]	@ (80189f8 <dhcp_parse_reply+0x300>)
 80189de:	4807      	ldr	r0, [pc, #28]	@ (80189fc <dhcp_parse_reply+0x304>)
 80189e0:	f003 ff26 	bl	801c830 <iprintf>
 80189e4:	f06f 0305 	mvn.w	r3, #5
 80189e8:	e154      	b.n	8018c94 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80189ea:	2302      	movs	r3, #2
 80189ec:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80189ee:	e033      	b.n	8018a58 <dhcp_parse_reply+0x360>
 80189f0:	20013dcc 	.word	0x20013dcc
 80189f4:	0802193c 	.word	0x0802193c
 80189f8:	08021bc4 	.word	0x08021bc4
 80189fc:	0802199c 	.word	0x0802199c
 8018a00:	08021bd0 	.word	0x08021bd0
 8018a04:	08021be4 	.word	0x08021be4
 8018a08:	08021bf0 	.word	0x08021bf0
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018a10:	2b04      	cmp	r3, #4
 8018a12:	d009      	beq.n	8018a28 <dhcp_parse_reply+0x330>
 8018a14:	4ba1      	ldr	r3, [pc, #644]	@ (8018c9c <dhcp_parse_reply+0x5a4>)
 8018a16:	f240 625d 	movw	r2, #1629	@ 0x65d
 8018a1a:	49a1      	ldr	r1, [pc, #644]	@ (8018ca0 <dhcp_parse_reply+0x5a8>)
 8018a1c:	48a1      	ldr	r0, [pc, #644]	@ (8018ca4 <dhcp_parse_reply+0x5ac>)
 8018a1e:	f003 ff07 	bl	801c830 <iprintf>
 8018a22:	f06f 0305 	mvn.w	r3, #5
 8018a26:	e135      	b.n	8018c94 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8018a28:	2304      	movs	r3, #4
 8018a2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8018a2c:	e014      	b.n	8018a58 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018a2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018a32:	2b04      	cmp	r3, #4
 8018a34:	d009      	beq.n	8018a4a <dhcp_parse_reply+0x352>
 8018a36:	4b99      	ldr	r3, [pc, #612]	@ (8018c9c <dhcp_parse_reply+0x5a4>)
 8018a38:	f240 6261 	movw	r2, #1633	@ 0x661
 8018a3c:	4998      	ldr	r1, [pc, #608]	@ (8018ca0 <dhcp_parse_reply+0x5a8>)
 8018a3e:	4899      	ldr	r0, [pc, #612]	@ (8018ca4 <dhcp_parse_reply+0x5ac>)
 8018a40:	f003 fef6 	bl	801c830 <iprintf>
 8018a44:	f06f 0305 	mvn.w	r3, #5
 8018a48:	e124      	b.n	8018c94 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8018a4a:	2305      	movs	r3, #5
 8018a4c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8018a4e:	e003      	b.n	8018a58 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 8018a50:	2300      	movs	r3, #0
 8018a52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8018a56:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8018a58:	7efb      	ldrb	r3, [r7, #27]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d105      	bne.n	8018a6a <dhcp_parse_reply+0x372>
      offset++;
 8018a5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018a62:	3301      	adds	r3, #1
 8018a64:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8018a68:	e0a4      	b.n	8018bb4 <dhcp_parse_reply+0x4bc>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8018a6a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018a72:	4413      	add	r3, r2
 8018a74:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8018a78:	4293      	cmp	r3, r2
 8018a7a:	dd02      	ble.n	8018a82 <dhcp_parse_reply+0x38a>
        /* overflow */
        return ERR_BUF;
 8018a7c:	f06f 0301 	mvn.w	r3, #1
 8018a80:	e108      	b.n	8018c94 <dhcp_parse_reply+0x59c>
      }
      offset = (u16_t)(offset + len + 2);
 8018a82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018a86:	b29a      	uxth	r2, r3
 8018a88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018a8c:	4413      	add	r3, r2
 8018a8e:	b29b      	uxth	r3, r3
 8018a90:	3302      	adds	r3, #2
 8018a92:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      if (decode_len > 0) {
 8018a96:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	f000 808a 	beq.w	8018bb4 <dhcp_parse_reply+0x4bc>
        u32_t value = 0;
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8018aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	db02      	blt.n	8018ab0 <dhcp_parse_reply+0x3b8>
 8018aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018aac:	2b07      	cmp	r3, #7
 8018aae:	dd06      	ble.n	8018abe <dhcp_parse_reply+0x3c6>
 8018ab0:	4b7a      	ldr	r3, [pc, #488]	@ (8018c9c <dhcp_parse_reply+0x5a4>)
 8018ab2:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8018ab6:	497c      	ldr	r1, [pc, #496]	@ (8018ca8 <dhcp_parse_reply+0x5b0>)
 8018ab8:	487a      	ldr	r0, [pc, #488]	@ (8018ca4 <dhcp_parse_reply+0x5ac>)
 8018aba:	f003 feb9 	bl	801c830 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8018abe:	4a7b      	ldr	r2, [pc, #492]	@ (8018cac <dhcp_parse_reply+0x5b4>)
 8018ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ac2:	4413      	add	r3, r2
 8018ac4:	781b      	ldrb	r3, [r3, #0]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d174      	bne.n	8018bb4 <dhcp_parse_reply+0x4bc>
          copy_len = LWIP_MIN(decode_len, 4);
 8018aca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8018ace:	2b04      	cmp	r3, #4
 8018ad0:	bf28      	it	cs
 8018ad2:	2304      	movcs	r3, #4
 8018ad4:	b2db      	uxtb	r3, r3
 8018ad6:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8018ad8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018ada:	8b3a      	ldrh	r2, [r7, #24]
 8018adc:	f107 010c 	add.w	r1, r7, #12
 8018ae0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018ae2:	f7f8 fa6d 	bl	8010fc0 <pbuf_copy_partial>
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	461a      	mov	r2, r3
 8018aea:	8b3b      	ldrh	r3, [r7, #24]
 8018aec:	4293      	cmp	r3, r2
 8018aee:	d002      	beq.n	8018af6 <dhcp_parse_reply+0x3fe>
            return ERR_BUF;
 8018af0:	f06f 0301 	mvn.w	r3, #1
 8018af4:	e0ce      	b.n	8018c94 <dhcp_parse_reply+0x59c>
          }
          if (decode_len > 4) {
 8018af6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8018afa:	2b04      	cmp	r3, #4
 8018afc:	d933      	bls.n	8018b66 <dhcp_parse_reply+0x46e>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8018afe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8018b02:	f003 0303 	and.w	r3, r3, #3
 8018b06:	b2db      	uxtb	r3, r3
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d009      	beq.n	8018b20 <dhcp_parse_reply+0x428>
 8018b0c:	4b63      	ldr	r3, [pc, #396]	@ (8018c9c <dhcp_parse_reply+0x5a4>)
 8018b0e:	f240 6281 	movw	r2, #1665	@ 0x681
 8018b12:	4967      	ldr	r1, [pc, #412]	@ (8018cb0 <dhcp_parse_reply+0x5b8>)
 8018b14:	4863      	ldr	r0, [pc, #396]	@ (8018ca4 <dhcp_parse_reply+0x5ac>)
 8018b16:	f003 fe8b 	bl	801c830 <iprintf>
 8018b1a:	f06f 0305 	mvn.w	r3, #5
 8018b1e:	e0b9      	b.n	8018c94 <dhcp_parse_reply+0x59c>
            dhcp_got_option(dhcp, decode_idx);
 8018b20:	4a62      	ldr	r2, [pc, #392]	@ (8018cac <dhcp_parse_reply+0x5b4>)
 8018b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b24:	4413      	add	r3, r2
 8018b26:	2201      	movs	r2, #1
 8018b28:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	f7f6 fb34 	bl	800f19a <lwip_htonl>
 8018b32:	4602      	mov	r2, r0
 8018b34:	495f      	ldr	r1, [pc, #380]	@ (8018cb4 <dhcp_parse_reply+0x5bc>)
 8018b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8018b3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8018b40:	3b04      	subs	r3, #4
 8018b42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 8018b46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018b48:	3304      	adds	r3, #4
 8018b4a:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 8018b4c:	8afa      	ldrh	r2, [r7, #22]
 8018b4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018b50:	429a      	cmp	r2, r3
 8018b52:	d202      	bcs.n	8018b5a <dhcp_parse_reply+0x462>
              /* overflow */
              return ERR_BUF;
 8018b54:	f06f 0301 	mvn.w	r3, #1
 8018b58:	e09c      	b.n	8018c94 <dhcp_parse_reply+0x59c>
            }
            val_offset = next_val_offset;
 8018b5a:	8afb      	ldrh	r3, [r7, #22]
 8018b5c:	847b      	strh	r3, [r7, #34]	@ 0x22
            decode_idx++;
 8018b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b60:	3301      	adds	r3, #1
 8018b62:	627b      	str	r3, [r7, #36]	@ 0x24
            goto decode_next;
 8018b64:	e79e      	b.n	8018aa4 <dhcp_parse_reply+0x3ac>
          } else if (decode_len == 4) {
 8018b66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8018b6a:	2b04      	cmp	r3, #4
 8018b6c:	d106      	bne.n	8018b7c <dhcp_parse_reply+0x484>
            value = lwip_ntohl(value);
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	4618      	mov	r0, r3
 8018b72:	f7f6 fb12 	bl	800f19a <lwip_htonl>
 8018b76:	4603      	mov	r3, r0
 8018b78:	60fb      	str	r3, [r7, #12]
 8018b7a:	e011      	b.n	8018ba0 <dhcp_parse_reply+0x4a8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8018b7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8018b80:	2b01      	cmp	r3, #1
 8018b82:	d009      	beq.n	8018b98 <dhcp_parse_reply+0x4a0>
 8018b84:	4b45      	ldr	r3, [pc, #276]	@ (8018c9c <dhcp_parse_reply+0x5a4>)
 8018b86:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8018b8a:	494b      	ldr	r1, [pc, #300]	@ (8018cb8 <dhcp_parse_reply+0x5c0>)
 8018b8c:	4845      	ldr	r0, [pc, #276]	@ (8018ca4 <dhcp_parse_reply+0x5ac>)
 8018b8e:	f003 fe4f 	bl	801c830 <iprintf>
 8018b92:	f06f 0305 	mvn.w	r3, #5
 8018b96:	e07d      	b.n	8018c94 <dhcp_parse_reply+0x59c>
            value = ((u8_t *)&value)[0];
 8018b98:	f107 030c 	add.w	r3, r7, #12
 8018b9c:	781b      	ldrb	r3, [r3, #0]
 8018b9e:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 8018ba0:	4a42      	ldr	r2, [pc, #264]	@ (8018cac <dhcp_parse_reply+0x5b4>)
 8018ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ba4:	4413      	add	r3, r2
 8018ba6:	2201      	movs	r2, #1
 8018ba8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8018baa:	68fa      	ldr	r2, [r7, #12]
 8018bac:	4941      	ldr	r1, [pc, #260]	@ (8018cb4 <dhcp_parse_reply+0x5bc>)
 8018bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8018bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018bb6:	895b      	ldrh	r3, [r3, #10]
 8018bb8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018bbc:	429a      	cmp	r2, r3
 8018bbe:	d327      	bcc.n	8018c10 <dhcp_parse_reply+0x518>
      offset = (u16_t)(offset - q->len);
 8018bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018bc2:	895b      	ldrh	r3, [r3, #10]
 8018bc4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018bc8:	1ad3      	subs	r3, r2, r3
 8018bca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      offset_max = (u16_t)(offset_max - q->len);
 8018bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018bd0:	895b      	ldrh	r3, [r3, #10]
 8018bd2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018bd4:	1ad3      	subs	r3, r2, r3
 8018bd6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      if (offset < offset_max) {
 8018bd8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018bdc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018bde:	429a      	cmp	r2, r3
 8018be0:	d213      	bcs.n	8018c0a <dhcp_parse_reply+0x512>
        q = q->next;
 8018be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	637b      	str	r3, [r7, #52]	@ 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8018be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d109      	bne.n	8018c02 <dhcp_parse_reply+0x50a>
 8018bee:	4b2b      	ldr	r3, [pc, #172]	@ (8018c9c <dhcp_parse_reply+0x5a4>)
 8018bf0:	f240 629d 	movw	r2, #1693	@ 0x69d
 8018bf4:	4931      	ldr	r1, [pc, #196]	@ (8018cbc <dhcp_parse_reply+0x5c4>)
 8018bf6:	482b      	ldr	r0, [pc, #172]	@ (8018ca4 <dhcp_parse_reply+0x5ac>)
 8018bf8:	f003 fe1a 	bl	801c830 <iprintf>
 8018bfc:	f06f 0305 	mvn.w	r3, #5
 8018c00:	e048      	b.n	8018c94 <dhcp_parse_reply+0x59c>
        options = (u8_t *)q->payload;
 8018c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018c04:	685b      	ldr	r3, [r3, #4]
 8018c06:	643b      	str	r3, [r7, #64]	@ 0x40
 8018c08:	e002      	b.n	8018c10 <dhcp_parse_reply+0x518>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8018c0a:	f06f 0301 	mvn.w	r3, #1
 8018c0e:	e041      	b.n	8018c94 <dhcp_parse_reply+0x59c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8018c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d00c      	beq.n	8018c30 <dhcp_parse_reply+0x538>
 8018c16:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018c1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018c1c:	429a      	cmp	r2, r3
 8018c1e:	d207      	bcs.n	8018c30 <dhcp_parse_reply+0x538>
 8018c20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018c24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018c26:	4413      	add	r3, r2
 8018c28:	781b      	ldrb	r3, [r3, #0]
 8018c2a:	2bff      	cmp	r3, #255	@ 0xff
 8018c2c:	f47f ada8 	bne.w	8018780 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8018c30:	4b1e      	ldr	r3, [pc, #120]	@ (8018cac <dhcp_parse_reply+0x5b4>)
 8018c32:	781b      	ldrb	r3, [r3, #0]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d018      	beq.n	8018c6a <dhcp_parse_reply+0x572>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018c38:	4b1e      	ldr	r3, [pc, #120]	@ (8018cb4 <dhcp_parse_reply+0x5bc>)
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8018cac <dhcp_parse_reply+0x5b4>)
 8018c40:	2200      	movs	r2, #0
 8018c42:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8018c44:	693b      	ldr	r3, [r7, #16]
 8018c46:	2b01      	cmp	r3, #1
 8018c48:	d102      	bne.n	8018c50 <dhcp_parse_reply+0x558>
      parse_file_as_options = 1;
 8018c4a:	2301      	movs	r3, #1
 8018c4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8018c4e:	e00c      	b.n	8018c6a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8018c50:	693b      	ldr	r3, [r7, #16]
 8018c52:	2b02      	cmp	r3, #2
 8018c54:	d102      	bne.n	8018c5c <dhcp_parse_reply+0x564>
      parse_sname_as_options = 1;
 8018c56:	2301      	movs	r3, #1
 8018c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018c5a:	e006      	b.n	8018c6a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8018c5c:	693b      	ldr	r3, [r7, #16]
 8018c5e:	2b03      	cmp	r3, #3
 8018c60:	d103      	bne.n	8018c6a <dhcp_parse_reply+0x572>
      parse_sname_as_options = 1;
 8018c62:	2301      	movs	r3, #1
 8018c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      parse_file_as_options = 1;
 8018c66:	2301      	movs	r3, #1
 8018c68:	633b      	str	r3, [r7, #48]	@ 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8018c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d006      	beq.n	8018c7e <dhcp_parse_reply+0x586>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8018c70:	2300      	movs	r3, #0
 8018c72:	633b      	str	r3, [r7, #48]	@ 0x30
    options_idx = DHCP_FILE_OFS;
 8018c74:	236c      	movs	r3, #108	@ 0x6c
 8018c76:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8018c78:	23ec      	movs	r3, #236	@ 0xec
 8018c7a:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8018c7c:	e559      	b.n	8018732 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8018c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d006      	beq.n	8018c92 <dhcp_parse_reply+0x59a>
    parse_sname_as_options = 0;
 8018c84:	2300      	movs	r3, #0
 8018c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_SNAME_OFS;
 8018c88:	232c      	movs	r3, #44	@ 0x2c
 8018c8a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8018c8c:	236c      	movs	r3, #108	@ 0x6c
 8018c8e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    goto again;
 8018c90:	e54f      	b.n	8018732 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8018c92:	2300      	movs	r3, #0
}
 8018c94:	4618      	mov	r0, r3
 8018c96:	3748      	adds	r7, #72	@ 0x48
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	bd80      	pop	{r7, pc}
 8018c9c:	0802193c 	.word	0x0802193c
 8018ca0:	08021bc4 	.word	0x08021bc4
 8018ca4:	0802199c 	.word	0x0802199c
 8018ca8:	08021c08 	.word	0x08021c08
 8018cac:	20013dcc 	.word	0x20013dcc
 8018cb0:	08021c1c 	.word	0x08021c1c
 8018cb4:	20013dac 	.word	0x20013dac
 8018cb8:	08021c34 	.word	0x08021c34
 8018cbc:	08021c48 	.word	0x08021c48

08018cc0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	b08a      	sub	sp, #40	@ 0x28
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	60f8      	str	r0, [r7, #12]
 8018cc8:	60b9      	str	r1, [r7, #8]
 8018cca:	607a      	str	r2, [r7, #4]
 8018ccc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8018cce:	4b5e      	ldr	r3, [pc, #376]	@ (8018e48 <dhcp_recv+0x188>)
 8018cd0:	685b      	ldr	r3, [r3, #4]
 8018cd2:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018cd4:	69fb      	ldr	r3, [r7, #28]
 8018cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cd8:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	685b      	ldr	r3, [r3, #4]
 8018cde:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8018ce0:	69bb      	ldr	r3, [r7, #24]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	f000 809a 	beq.w	8018e1c <dhcp_recv+0x15c>
 8018ce8:	69bb      	ldr	r3, [r7, #24]
 8018cea:	791b      	ldrb	r3, [r3, #4]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	f000 8095 	beq.w	8018e1c <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	895b      	ldrh	r3, [r3, #10]
 8018cf6:	2b2b      	cmp	r3, #43	@ 0x2b
 8018cf8:	f240 8092 	bls.w	8018e20 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8018cfc:	697b      	ldr	r3, [r7, #20]
 8018cfe:	781b      	ldrb	r3, [r3, #0]
 8018d00:	2b02      	cmp	r3, #2
 8018d02:	f040 808f 	bne.w	8018e24 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018d06:	2300      	movs	r3, #0
 8018d08:	74fb      	strb	r3, [r7, #19]
 8018d0a:	e00e      	b.n	8018d2a <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8018d0c:	7cfb      	ldrb	r3, [r7, #19]
 8018d0e:	69fa      	ldr	r2, [r7, #28]
 8018d10:	4413      	add	r3, r2
 8018d12:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8018d16:	7cfb      	ldrb	r3, [r7, #19]
 8018d18:	6979      	ldr	r1, [r7, #20]
 8018d1a:	440b      	add	r3, r1
 8018d1c:	7f1b      	ldrb	r3, [r3, #28]
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	f040 8082 	bne.w	8018e28 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018d24:	7cfb      	ldrb	r3, [r7, #19]
 8018d26:	3301      	adds	r3, #1
 8018d28:	74fb      	strb	r3, [r7, #19]
 8018d2a:	69fb      	ldr	r3, [r7, #28]
 8018d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018d30:	7cfa      	ldrb	r2, [r7, #19]
 8018d32:	429a      	cmp	r2, r3
 8018d34:	d202      	bcs.n	8018d3c <dhcp_recv+0x7c>
 8018d36:	7cfb      	ldrb	r3, [r7, #19]
 8018d38:	2b05      	cmp	r3, #5
 8018d3a:	d9e7      	bls.n	8018d0c <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8018d3c:	697b      	ldr	r3, [r7, #20]
 8018d3e:	685b      	ldr	r3, [r3, #4]
 8018d40:	4618      	mov	r0, r3
 8018d42:	f7f6 fa2a 	bl	800f19a <lwip_htonl>
 8018d46:	4602      	mov	r2, r0
 8018d48:	69bb      	ldr	r3, [r7, #24]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	429a      	cmp	r2, r3
 8018d4e:	d16d      	bne.n	8018e2c <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8018d50:	69b9      	ldr	r1, [r7, #24]
 8018d52:	6878      	ldr	r0, [r7, #4]
 8018d54:	f7ff fcd0 	bl	80186f8 <dhcp_parse_reply>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d168      	bne.n	8018e30 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8018d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8018e4c <dhcp_recv+0x18c>)
 8018d60:	785b      	ldrb	r3, [r3, #1]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d066      	beq.n	8018e34 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	685b      	ldr	r3, [r3, #4]
 8018d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8018d6c:	4b38      	ldr	r3, [pc, #224]	@ (8018e50 <dhcp_recv+0x190>)
 8018d6e:	685b      	ldr	r3, [r3, #4]
 8018d70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8018d74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018d78:	2b05      	cmp	r3, #5
 8018d7a:	d12a      	bne.n	8018dd2 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8018d7c:	69bb      	ldr	r3, [r7, #24]
 8018d7e:	795b      	ldrb	r3, [r3, #5]
 8018d80:	2b01      	cmp	r3, #1
 8018d82:	d112      	bne.n	8018daa <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 8018d84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018d86:	69f8      	ldr	r0, [r7, #28]
 8018d88:	f7fe fe06 	bl	8017998 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8018d8c:	69fb      	ldr	r3, [r7, #28]
 8018d8e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018d92:	f003 0308 	and.w	r3, r3, #8
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d003      	beq.n	8018da2 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8018d9a:	69f8      	ldr	r0, [r7, #28]
 8018d9c:	f7fe fb76 	bl	801748c <dhcp_check>
 8018da0:	e04b      	b.n	8018e3a <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8018da2:	69f8      	ldr	r0, [r7, #28]
 8018da4:	f7ff f856 	bl	8017e54 <dhcp_bind>
 8018da8:	e047      	b.n	8018e3a <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8018daa:	69bb      	ldr	r3, [r7, #24]
 8018dac:	795b      	ldrb	r3, [r3, #5]
 8018dae:	2b03      	cmp	r3, #3
 8018db0:	d007      	beq.n	8018dc2 <dhcp_recv+0x102>
 8018db2:	69bb      	ldr	r3, [r7, #24]
 8018db4:	795b      	ldrb	r3, [r3, #5]
 8018db6:	2b04      	cmp	r3, #4
 8018db8:	d003      	beq.n	8018dc2 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8018dba:	69bb      	ldr	r3, [r7, #24]
 8018dbc:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8018dbe:	2b05      	cmp	r3, #5
 8018dc0:	d13b      	bne.n	8018e3a <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 8018dc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018dc4:	69f8      	ldr	r0, [r7, #28]
 8018dc6:	f7fe fde7 	bl	8017998 <dhcp_handle_ack>
      dhcp_bind(netif);
 8018dca:	69f8      	ldr	r0, [r7, #28]
 8018dcc:	f7ff f842 	bl	8017e54 <dhcp_bind>
 8018dd0:	e033      	b.n	8018e3a <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8018dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018dd6:	2b06      	cmp	r3, #6
 8018dd8:	d113      	bne.n	8018e02 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018dda:	69bb      	ldr	r3, [r7, #24]
 8018ddc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8018dde:	2b03      	cmp	r3, #3
 8018de0:	d00b      	beq.n	8018dfa <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018de2:	69bb      	ldr	r3, [r7, #24]
 8018de4:	795b      	ldrb	r3, [r3, #5]
 8018de6:	2b01      	cmp	r3, #1
 8018de8:	d007      	beq.n	8018dfa <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8018dea:	69bb      	ldr	r3, [r7, #24]
 8018dec:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018dee:	2b04      	cmp	r3, #4
 8018df0:	d003      	beq.n	8018dfa <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8018df2:	69bb      	ldr	r3, [r7, #24]
 8018df4:	795b      	ldrb	r3, [r3, #5]
 8018df6:	2b05      	cmp	r3, #5
 8018df8:	d103      	bne.n	8018e02 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8018dfa:	69f8      	ldr	r0, [r7, #28]
 8018dfc:	f7fe fb2c 	bl	8017458 <dhcp_handle_nak>
 8018e00:	e01b      	b.n	8018e3a <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8018e02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018e06:	2b02      	cmp	r3, #2
 8018e08:	d116      	bne.n	8018e38 <dhcp_recv+0x178>
 8018e0a:	69bb      	ldr	r3, [r7, #24]
 8018e0c:	795b      	ldrb	r3, [r3, #5]
 8018e0e:	2b06      	cmp	r3, #6
 8018e10:	d112      	bne.n	8018e38 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8018e12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018e14:	69f8      	ldr	r0, [r7, #28]
 8018e16:	f7fe fb6d 	bl	80174f4 <dhcp_handle_offer>
 8018e1a:	e00e      	b.n	8018e3a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8018e1c:	bf00      	nop
 8018e1e:	e00c      	b.n	8018e3a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8018e20:	bf00      	nop
 8018e22:	e00a      	b.n	8018e3a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8018e24:	bf00      	nop
 8018e26:	e008      	b.n	8018e3a <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 8018e28:	bf00      	nop
 8018e2a:	e006      	b.n	8018e3a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8018e2c:	bf00      	nop
 8018e2e:	e004      	b.n	8018e3a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8018e30:	bf00      	nop
 8018e32:	e002      	b.n	8018e3a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8018e34:	bf00      	nop
 8018e36:	e000      	b.n	8018e3a <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 8018e38:	bf00      	nop
  pbuf_free(p);
 8018e3a:	6878      	ldr	r0, [r7, #4]
 8018e3c:	f7f7 feba 	bl	8010bb4 <pbuf_free>
}
 8018e40:	bf00      	nop
 8018e42:	3728      	adds	r7, #40	@ 0x28
 8018e44:	46bd      	mov	sp, r7
 8018e46:	bd80      	pop	{r7, pc}
 8018e48:	2000a2d4 	.word	0x2000a2d4
 8018e4c:	20013dcc 	.word	0x20013dcc
 8018e50:	20013dac 	.word	0x20013dac

08018e54 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b088      	sub	sp, #32
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	60f8      	str	r0, [r7, #12]
 8018e5c:	60b9      	str	r1, [r7, #8]
 8018e5e:	603b      	str	r3, [r7, #0]
 8018e60:	4613      	mov	r3, r2
 8018e62:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d108      	bne.n	8018e7c <dhcp_create_msg+0x28>
 8018e6a:	4b5f      	ldr	r3, [pc, #380]	@ (8018fe8 <dhcp_create_msg+0x194>)
 8018e6c:	f240 7269 	movw	r2, #1897	@ 0x769
 8018e70:	495e      	ldr	r1, [pc, #376]	@ (8018fec <dhcp_create_msg+0x198>)
 8018e72:	485f      	ldr	r0, [pc, #380]	@ (8018ff0 <dhcp_create_msg+0x19c>)
 8018e74:	f003 fcdc 	bl	801c830 <iprintf>
 8018e78:	2300      	movs	r3, #0
 8018e7a:	e0b1      	b.n	8018fe0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8018e7c:	68bb      	ldr	r3, [r7, #8]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d108      	bne.n	8018e94 <dhcp_create_msg+0x40>
 8018e82:	4b59      	ldr	r3, [pc, #356]	@ (8018fe8 <dhcp_create_msg+0x194>)
 8018e84:	f240 726a 	movw	r2, #1898	@ 0x76a
 8018e88:	495a      	ldr	r1, [pc, #360]	@ (8018ff4 <dhcp_create_msg+0x1a0>)
 8018e8a:	4859      	ldr	r0, [pc, #356]	@ (8018ff0 <dhcp_create_msg+0x19c>)
 8018e8c:	f003 fcd0 	bl	801c830 <iprintf>
 8018e90:	2300      	movs	r3, #0
 8018e92:	e0a5      	b.n	8018fe0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8018e94:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018e98:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8018e9c:	2036      	movs	r0, #54	@ 0x36
 8018e9e:	f7f7 fba1 	bl	80105e4 <pbuf_alloc>
 8018ea2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8018ea4:	69bb      	ldr	r3, [r7, #24]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d101      	bne.n	8018eae <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8018eaa:	2300      	movs	r3, #0
 8018eac:	e098      	b.n	8018fe0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8018eae:	69bb      	ldr	r3, [r7, #24]
 8018eb0:	895b      	ldrh	r3, [r3, #10]
 8018eb2:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8018eb6:	d206      	bcs.n	8018ec6 <dhcp_create_msg+0x72>
 8018eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8018fe8 <dhcp_create_msg+0x194>)
 8018eba:	f240 7271 	movw	r2, #1905	@ 0x771
 8018ebe:	494e      	ldr	r1, [pc, #312]	@ (8018ff8 <dhcp_create_msg+0x1a4>)
 8018ec0:	484b      	ldr	r0, [pc, #300]	@ (8018ff0 <dhcp_create_msg+0x19c>)
 8018ec2:	f003 fcb5 	bl	801c830 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8018ec6:	79fb      	ldrb	r3, [r7, #7]
 8018ec8:	2b03      	cmp	r3, #3
 8018eca:	d103      	bne.n	8018ed4 <dhcp_create_msg+0x80>
 8018ecc:	68bb      	ldr	r3, [r7, #8]
 8018ece:	795b      	ldrb	r3, [r3, #5]
 8018ed0:	2b03      	cmp	r3, #3
 8018ed2:	d10d      	bne.n	8018ef0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8018ed4:	68bb      	ldr	r3, [r7, #8]
 8018ed6:	799b      	ldrb	r3, [r3, #6]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d105      	bne.n	8018ee8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8018edc:	f002 fed8 	bl	801bc90 <rand>
 8018ee0:	4603      	mov	r3, r0
 8018ee2:	461a      	mov	r2, r3
 8018ee4:	4b45      	ldr	r3, [pc, #276]	@ (8018ffc <dhcp_create_msg+0x1a8>)
 8018ee6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8018ee8:	4b44      	ldr	r3, [pc, #272]	@ (8018ffc <dhcp_create_msg+0x1a8>)
 8018eea:	681a      	ldr	r2, [r3, #0]
 8018eec:	68bb      	ldr	r3, [r7, #8]
 8018eee:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8018ef0:	69bb      	ldr	r3, [r7, #24]
 8018ef2:	685b      	ldr	r3, [r3, #4]
 8018ef4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8018ef6:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8018efa:	2100      	movs	r1, #0
 8018efc:	6978      	ldr	r0, [r7, #20]
 8018efe:	f003 fdf9 	bl	801caf4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8018f02:	697b      	ldr	r3, [r7, #20]
 8018f04:	2201      	movs	r2, #1
 8018f06:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8018f08:	697b      	ldr	r3, [r7, #20]
 8018f0a:	2201      	movs	r2, #1
 8018f0c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8018f14:	697b      	ldr	r3, [r7, #20]
 8018f16:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8018f18:	68bb      	ldr	r3, [r7, #8]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	f7f6 f93c 	bl	800f19a <lwip_htonl>
 8018f22:	4602      	mov	r2, r0
 8018f24:	697b      	ldr	r3, [r7, #20]
 8018f26:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8018f28:	79fb      	ldrb	r3, [r7, #7]
 8018f2a:	2b08      	cmp	r3, #8
 8018f2c:	d010      	beq.n	8018f50 <dhcp_create_msg+0xfc>
 8018f2e:	79fb      	ldrb	r3, [r7, #7]
 8018f30:	2b04      	cmp	r3, #4
 8018f32:	d00d      	beq.n	8018f50 <dhcp_create_msg+0xfc>
 8018f34:	79fb      	ldrb	r3, [r7, #7]
 8018f36:	2b07      	cmp	r3, #7
 8018f38:	d00a      	beq.n	8018f50 <dhcp_create_msg+0xfc>
 8018f3a:	79fb      	ldrb	r3, [r7, #7]
 8018f3c:	2b03      	cmp	r3, #3
 8018f3e:	d10c      	bne.n	8018f5a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018f40:	68bb      	ldr	r3, [r7, #8]
 8018f42:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8018f44:	2b05      	cmp	r3, #5
 8018f46:	d003      	beq.n	8018f50 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018f48:	68bb      	ldr	r3, [r7, #8]
 8018f4a:	795b      	ldrb	r3, [r3, #5]
 8018f4c:	2b04      	cmp	r3, #4
 8018f4e:	d104      	bne.n	8018f5a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	3304      	adds	r3, #4
 8018f54:	681a      	ldr	r2, [r3, #0]
 8018f56:	697b      	ldr	r3, [r7, #20]
 8018f58:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018f5a:	2300      	movs	r3, #0
 8018f5c:	83fb      	strh	r3, [r7, #30]
 8018f5e:	e00c      	b.n	8018f7a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8018f60:	8bfa      	ldrh	r2, [r7, #30]
 8018f62:	8bfb      	ldrh	r3, [r7, #30]
 8018f64:	68f9      	ldr	r1, [r7, #12]
 8018f66:	440a      	add	r2, r1
 8018f68:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8018f6c:	697a      	ldr	r2, [r7, #20]
 8018f6e:	4413      	add	r3, r2
 8018f70:	460a      	mov	r2, r1
 8018f72:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018f74:	8bfb      	ldrh	r3, [r7, #30]
 8018f76:	3301      	adds	r3, #1
 8018f78:	83fb      	strh	r3, [r7, #30]
 8018f7a:	8bfb      	ldrh	r3, [r7, #30]
 8018f7c:	2b05      	cmp	r3, #5
 8018f7e:	d9ef      	bls.n	8018f60 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8018f80:	697b      	ldr	r3, [r7, #20]
 8018f82:	2200      	movs	r2, #0
 8018f84:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8018f88:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8018f8c:	2200      	movs	r2, #0
 8018f8e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8018f92:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8018f96:	2200      	movs	r2, #0
 8018f98:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8018f9c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8018fa0:	2200      	movs	r2, #0
 8018fa2:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8018fa6:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8018faa:	697b      	ldr	r3, [r7, #20]
 8018fac:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018fb0:	2301      	movs	r3, #1
 8018fb2:	2235      	movs	r2, #53	@ 0x35
 8018fb4:	2000      	movs	r0, #0
 8018fb6:	f7ff facf 	bl	8018558 <dhcp_option>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8018fbe:	697b      	ldr	r3, [r7, #20]
 8018fc0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018fc4:	79fa      	ldrb	r2, [r7, #7]
 8018fc6:	8a7b      	ldrh	r3, [r7, #18]
 8018fc8:	4618      	mov	r0, r3
 8018fca:	f7ff faf9 	bl	80185c0 <dhcp_option_byte>
 8018fce:	4603      	mov	r3, r0
 8018fd0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8018fd2:	683b      	ldr	r3, [r7, #0]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d002      	beq.n	8018fde <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8018fd8:	683b      	ldr	r3, [r7, #0]
 8018fda:	8a7a      	ldrh	r2, [r7, #18]
 8018fdc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8018fde:	69bb      	ldr	r3, [r7, #24]
}
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	3720      	adds	r7, #32
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	bd80      	pop	{r7, pc}
 8018fe8:	0802193c 	.word	0x0802193c
 8018fec:	08021c5c 	.word	0x08021c5c
 8018ff0:	0802199c 	.word	0x0802199c
 8018ff4:	08021c7c 	.word	0x08021c7c
 8018ff8:	08021c9c 	.word	0x08021c9c
 8018ffc:	20013ddc 	.word	0x20013ddc

08019000 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8019000:	b580      	push	{r7, lr}
 8019002:	b084      	sub	sp, #16
 8019004:	af00      	add	r7, sp, #0
 8019006:	4603      	mov	r3, r0
 8019008:	60b9      	str	r1, [r7, #8]
 801900a:	607a      	str	r2, [r7, #4]
 801900c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801900e:	89fb      	ldrh	r3, [r7, #14]
 8019010:	1c5a      	adds	r2, r3, #1
 8019012:	81fa      	strh	r2, [r7, #14]
 8019014:	461a      	mov	r2, r3
 8019016:	68bb      	ldr	r3, [r7, #8]
 8019018:	4413      	add	r3, r2
 801901a:	22ff      	movs	r2, #255	@ 0xff
 801901c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801901e:	e007      	b.n	8019030 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8019020:	89fb      	ldrh	r3, [r7, #14]
 8019022:	1c5a      	adds	r2, r3, #1
 8019024:	81fa      	strh	r2, [r7, #14]
 8019026:	461a      	mov	r2, r3
 8019028:	68bb      	ldr	r3, [r7, #8]
 801902a:	4413      	add	r3, r2
 801902c:	2200      	movs	r2, #0
 801902e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8019030:	89fb      	ldrh	r3, [r7, #14]
 8019032:	2b43      	cmp	r3, #67	@ 0x43
 8019034:	d904      	bls.n	8019040 <dhcp_option_trailer+0x40>
 8019036:	89fb      	ldrh	r3, [r7, #14]
 8019038:	f003 0303 	and.w	r3, r3, #3
 801903c:	2b00      	cmp	r3, #0
 801903e:	d002      	beq.n	8019046 <dhcp_option_trailer+0x46>
 8019040:	89fb      	ldrh	r3, [r7, #14]
 8019042:	2b43      	cmp	r3, #67	@ 0x43
 8019044:	d9ec      	bls.n	8019020 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8019046:	89fb      	ldrh	r3, [r7, #14]
 8019048:	33f0      	adds	r3, #240	@ 0xf0
 801904a:	b29b      	uxth	r3, r3
 801904c:	4619      	mov	r1, r3
 801904e:	6878      	ldr	r0, [r7, #4]
 8019050:	f7f7 fc2a 	bl	80108a8 <pbuf_realloc>
}
 8019054:	bf00      	nop
 8019056:	3710      	adds	r7, #16
 8019058:	46bd      	mov	sp, r7
 801905a:	bd80      	pop	{r7, pc}

0801905c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801905c:	b480      	push	{r7}
 801905e:	b085      	sub	sp, #20
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d017      	beq.n	801909a <dhcp_supplied_address+0x3e>
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801906e:	2b00      	cmp	r3, #0
 8019070:	d013      	beq.n	801909a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019076:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	795b      	ldrb	r3, [r3, #5]
 801907c:	2b0a      	cmp	r3, #10
 801907e:	d007      	beq.n	8019090 <dhcp_supplied_address+0x34>
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	795b      	ldrb	r3, [r3, #5]
 8019084:	2b05      	cmp	r3, #5
 8019086:	d003      	beq.n	8019090 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801908c:	2b04      	cmp	r3, #4
 801908e:	d101      	bne.n	8019094 <dhcp_supplied_address+0x38>
 8019090:	2301      	movs	r3, #1
 8019092:	e000      	b.n	8019096 <dhcp_supplied_address+0x3a>
 8019094:	2300      	movs	r3, #0
 8019096:	b2db      	uxtb	r3, r3
 8019098:	e000      	b.n	801909c <dhcp_supplied_address+0x40>
  }
  return 0;
 801909a:	2300      	movs	r3, #0
}
 801909c:	4618      	mov	r0, r3
 801909e:	3714      	adds	r7, #20
 80190a0:	46bd      	mov	sp, r7
 80190a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a6:	4770      	bx	lr

080190a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b082      	sub	sp, #8
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80190b0:	492b      	ldr	r1, [pc, #172]	@ (8019160 <etharp_free_entry+0xb8>)
 80190b2:	687a      	ldr	r2, [r7, #4]
 80190b4:	4613      	mov	r3, r2
 80190b6:	005b      	lsls	r3, r3, #1
 80190b8:	4413      	add	r3, r2
 80190ba:	00db      	lsls	r3, r3, #3
 80190bc:	440b      	add	r3, r1
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d013      	beq.n	80190ec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80190c4:	4926      	ldr	r1, [pc, #152]	@ (8019160 <etharp_free_entry+0xb8>)
 80190c6:	687a      	ldr	r2, [r7, #4]
 80190c8:	4613      	mov	r3, r2
 80190ca:	005b      	lsls	r3, r3, #1
 80190cc:	4413      	add	r3, r2
 80190ce:	00db      	lsls	r3, r3, #3
 80190d0:	440b      	add	r3, r1
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	4618      	mov	r0, r3
 80190d6:	f7f7 fd6d 	bl	8010bb4 <pbuf_free>
    arp_table[i].q = NULL;
 80190da:	4921      	ldr	r1, [pc, #132]	@ (8019160 <etharp_free_entry+0xb8>)
 80190dc:	687a      	ldr	r2, [r7, #4]
 80190de:	4613      	mov	r3, r2
 80190e0:	005b      	lsls	r3, r3, #1
 80190e2:	4413      	add	r3, r2
 80190e4:	00db      	lsls	r3, r3, #3
 80190e6:	440b      	add	r3, r1
 80190e8:	2200      	movs	r2, #0
 80190ea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80190ec:	491c      	ldr	r1, [pc, #112]	@ (8019160 <etharp_free_entry+0xb8>)
 80190ee:	687a      	ldr	r2, [r7, #4]
 80190f0:	4613      	mov	r3, r2
 80190f2:	005b      	lsls	r3, r3, #1
 80190f4:	4413      	add	r3, r2
 80190f6:	00db      	lsls	r3, r3, #3
 80190f8:	440b      	add	r3, r1
 80190fa:	3314      	adds	r3, #20
 80190fc:	2200      	movs	r2, #0
 80190fe:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8019100:	4917      	ldr	r1, [pc, #92]	@ (8019160 <etharp_free_entry+0xb8>)
 8019102:	687a      	ldr	r2, [r7, #4]
 8019104:	4613      	mov	r3, r2
 8019106:	005b      	lsls	r3, r3, #1
 8019108:	4413      	add	r3, r2
 801910a:	00db      	lsls	r3, r3, #3
 801910c:	440b      	add	r3, r1
 801910e:	3312      	adds	r3, #18
 8019110:	2200      	movs	r2, #0
 8019112:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8019114:	4912      	ldr	r1, [pc, #72]	@ (8019160 <etharp_free_entry+0xb8>)
 8019116:	687a      	ldr	r2, [r7, #4]
 8019118:	4613      	mov	r3, r2
 801911a:	005b      	lsls	r3, r3, #1
 801911c:	4413      	add	r3, r2
 801911e:	00db      	lsls	r3, r3, #3
 8019120:	440b      	add	r3, r1
 8019122:	3308      	adds	r3, #8
 8019124:	2200      	movs	r2, #0
 8019126:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8019128:	490d      	ldr	r1, [pc, #52]	@ (8019160 <etharp_free_entry+0xb8>)
 801912a:	687a      	ldr	r2, [r7, #4]
 801912c:	4613      	mov	r3, r2
 801912e:	005b      	lsls	r3, r3, #1
 8019130:	4413      	add	r3, r2
 8019132:	00db      	lsls	r3, r3, #3
 8019134:	440b      	add	r3, r1
 8019136:	3304      	adds	r3, #4
 8019138:	2200      	movs	r2, #0
 801913a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801913c:	4908      	ldr	r1, [pc, #32]	@ (8019160 <etharp_free_entry+0xb8>)
 801913e:	687a      	ldr	r2, [r7, #4]
 8019140:	4613      	mov	r3, r2
 8019142:	005b      	lsls	r3, r3, #1
 8019144:	4413      	add	r3, r2
 8019146:	00db      	lsls	r3, r3, #3
 8019148:	440b      	add	r3, r1
 801914a:	3308      	adds	r3, #8
 801914c:	4a05      	ldr	r2, [pc, #20]	@ (8019164 <etharp_free_entry+0xbc>)
 801914e:	3304      	adds	r3, #4
 8019150:	6810      	ldr	r0, [r2, #0]
 8019152:	6018      	str	r0, [r3, #0]
 8019154:	8892      	ldrh	r2, [r2, #4]
 8019156:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8019158:	bf00      	nop
 801915a:	3708      	adds	r7, #8
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}
 8019160:	20013de0 	.word	0x20013de0
 8019164:	0806e1a4 	.word	0x0806e1a4

08019168 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b082      	sub	sp, #8
 801916c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801916e:	2300      	movs	r3, #0
 8019170:	607b      	str	r3, [r7, #4]
 8019172:	e09a      	b.n	80192aa <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 8019174:	4951      	ldr	r1, [pc, #324]	@ (80192bc <etharp_tmr+0x154>)
 8019176:	687a      	ldr	r2, [r7, #4]
 8019178:	4613      	mov	r3, r2
 801917a:	005b      	lsls	r3, r3, #1
 801917c:	4413      	add	r3, r2
 801917e:	00db      	lsls	r3, r3, #3
 8019180:	440b      	add	r3, r1
 8019182:	3314      	adds	r3, #20
 8019184:	781b      	ldrb	r3, [r3, #0]
 8019186:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019188:	78fb      	ldrb	r3, [r7, #3]
 801918a:	2b00      	cmp	r3, #0
 801918c:	f000 808a 	beq.w	80192a4 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 8019190:	78fb      	ldrb	r3, [r7, #3]
 8019192:	2b05      	cmp	r3, #5
 8019194:	f000 8086 	beq.w	80192a4 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019198:	4948      	ldr	r1, [pc, #288]	@ (80192bc <etharp_tmr+0x154>)
 801919a:	687a      	ldr	r2, [r7, #4]
 801919c:	4613      	mov	r3, r2
 801919e:	005b      	lsls	r3, r3, #1
 80191a0:	4413      	add	r3, r2
 80191a2:	00db      	lsls	r3, r3, #3
 80191a4:	440b      	add	r3, r1
 80191a6:	3312      	adds	r3, #18
 80191a8:	881b      	ldrh	r3, [r3, #0]
 80191aa:	3301      	adds	r3, #1
 80191ac:	b298      	uxth	r0, r3
 80191ae:	4943      	ldr	r1, [pc, #268]	@ (80192bc <etharp_tmr+0x154>)
 80191b0:	687a      	ldr	r2, [r7, #4]
 80191b2:	4613      	mov	r3, r2
 80191b4:	005b      	lsls	r3, r3, #1
 80191b6:	4413      	add	r3, r2
 80191b8:	00db      	lsls	r3, r3, #3
 80191ba:	440b      	add	r3, r1
 80191bc:	3312      	adds	r3, #18
 80191be:	4602      	mov	r2, r0
 80191c0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80191c2:	493e      	ldr	r1, [pc, #248]	@ (80192bc <etharp_tmr+0x154>)
 80191c4:	687a      	ldr	r2, [r7, #4]
 80191c6:	4613      	mov	r3, r2
 80191c8:	005b      	lsls	r3, r3, #1
 80191ca:	4413      	add	r3, r2
 80191cc:	00db      	lsls	r3, r3, #3
 80191ce:	440b      	add	r3, r1
 80191d0:	3312      	adds	r3, #18
 80191d2:	881b      	ldrh	r3, [r3, #0]
 80191d4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80191d8:	d215      	bcs.n	8019206 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80191da:	4938      	ldr	r1, [pc, #224]	@ (80192bc <etharp_tmr+0x154>)
 80191dc:	687a      	ldr	r2, [r7, #4]
 80191de:	4613      	mov	r3, r2
 80191e0:	005b      	lsls	r3, r3, #1
 80191e2:	4413      	add	r3, r2
 80191e4:	00db      	lsls	r3, r3, #3
 80191e6:	440b      	add	r3, r1
 80191e8:	3314      	adds	r3, #20
 80191ea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80191ec:	2b01      	cmp	r3, #1
 80191ee:	d10e      	bne.n	801920e <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80191f0:	4932      	ldr	r1, [pc, #200]	@ (80192bc <etharp_tmr+0x154>)
 80191f2:	687a      	ldr	r2, [r7, #4]
 80191f4:	4613      	mov	r3, r2
 80191f6:	005b      	lsls	r3, r3, #1
 80191f8:	4413      	add	r3, r2
 80191fa:	00db      	lsls	r3, r3, #3
 80191fc:	440b      	add	r3, r1
 80191fe:	3312      	adds	r3, #18
 8019200:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019202:	2b04      	cmp	r3, #4
 8019204:	d903      	bls.n	801920e <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019206:	6878      	ldr	r0, [r7, #4]
 8019208:	f7ff ff4e 	bl	80190a8 <etharp_free_entry>
 801920c:	e04a      	b.n	80192a4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801920e:	492b      	ldr	r1, [pc, #172]	@ (80192bc <etharp_tmr+0x154>)
 8019210:	687a      	ldr	r2, [r7, #4]
 8019212:	4613      	mov	r3, r2
 8019214:	005b      	lsls	r3, r3, #1
 8019216:	4413      	add	r3, r2
 8019218:	00db      	lsls	r3, r3, #3
 801921a:	440b      	add	r3, r1
 801921c:	3314      	adds	r3, #20
 801921e:	781b      	ldrb	r3, [r3, #0]
 8019220:	2b03      	cmp	r3, #3
 8019222:	d10a      	bne.n	801923a <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019224:	4925      	ldr	r1, [pc, #148]	@ (80192bc <etharp_tmr+0x154>)
 8019226:	687a      	ldr	r2, [r7, #4]
 8019228:	4613      	mov	r3, r2
 801922a:	005b      	lsls	r3, r3, #1
 801922c:	4413      	add	r3, r2
 801922e:	00db      	lsls	r3, r3, #3
 8019230:	440b      	add	r3, r1
 8019232:	3314      	adds	r3, #20
 8019234:	2204      	movs	r2, #4
 8019236:	701a      	strb	r2, [r3, #0]
 8019238:	e034      	b.n	80192a4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801923a:	4920      	ldr	r1, [pc, #128]	@ (80192bc <etharp_tmr+0x154>)
 801923c:	687a      	ldr	r2, [r7, #4]
 801923e:	4613      	mov	r3, r2
 8019240:	005b      	lsls	r3, r3, #1
 8019242:	4413      	add	r3, r2
 8019244:	00db      	lsls	r3, r3, #3
 8019246:	440b      	add	r3, r1
 8019248:	3314      	adds	r3, #20
 801924a:	781b      	ldrb	r3, [r3, #0]
 801924c:	2b04      	cmp	r3, #4
 801924e:	d10a      	bne.n	8019266 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019250:	491a      	ldr	r1, [pc, #104]	@ (80192bc <etharp_tmr+0x154>)
 8019252:	687a      	ldr	r2, [r7, #4]
 8019254:	4613      	mov	r3, r2
 8019256:	005b      	lsls	r3, r3, #1
 8019258:	4413      	add	r3, r2
 801925a:	00db      	lsls	r3, r3, #3
 801925c:	440b      	add	r3, r1
 801925e:	3314      	adds	r3, #20
 8019260:	2202      	movs	r2, #2
 8019262:	701a      	strb	r2, [r3, #0]
 8019264:	e01e      	b.n	80192a4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019266:	4915      	ldr	r1, [pc, #84]	@ (80192bc <etharp_tmr+0x154>)
 8019268:	687a      	ldr	r2, [r7, #4]
 801926a:	4613      	mov	r3, r2
 801926c:	005b      	lsls	r3, r3, #1
 801926e:	4413      	add	r3, r2
 8019270:	00db      	lsls	r3, r3, #3
 8019272:	440b      	add	r3, r1
 8019274:	3314      	adds	r3, #20
 8019276:	781b      	ldrb	r3, [r3, #0]
 8019278:	2b01      	cmp	r3, #1
 801927a:	d113      	bne.n	80192a4 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801927c:	490f      	ldr	r1, [pc, #60]	@ (80192bc <etharp_tmr+0x154>)
 801927e:	687a      	ldr	r2, [r7, #4]
 8019280:	4613      	mov	r3, r2
 8019282:	005b      	lsls	r3, r3, #1
 8019284:	4413      	add	r3, r2
 8019286:	00db      	lsls	r3, r3, #3
 8019288:	440b      	add	r3, r1
 801928a:	3308      	adds	r3, #8
 801928c:	6818      	ldr	r0, [r3, #0]
 801928e:	687a      	ldr	r2, [r7, #4]
 8019290:	4613      	mov	r3, r2
 8019292:	005b      	lsls	r3, r3, #1
 8019294:	4413      	add	r3, r2
 8019296:	00db      	lsls	r3, r3, #3
 8019298:	4a08      	ldr	r2, [pc, #32]	@ (80192bc <etharp_tmr+0x154>)
 801929a:	4413      	add	r3, r2
 801929c:	3304      	adds	r3, #4
 801929e:	4619      	mov	r1, r3
 80192a0:	f000 feae 	bl	801a000 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	3301      	adds	r3, #1
 80192a8:	607b      	str	r3, [r7, #4]
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	2b09      	cmp	r3, #9
 80192ae:	f77f af61 	ble.w	8019174 <etharp_tmr+0xc>
      }
    }
  }
}
 80192b2:	bf00      	nop
 80192b4:	bf00      	nop
 80192b6:	3708      	adds	r7, #8
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}
 80192bc:	20013de0 	.word	0x20013de0

080192c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b08a      	sub	sp, #40	@ 0x28
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	60f8      	str	r0, [r7, #12]
 80192c8:	460b      	mov	r3, r1
 80192ca:	607a      	str	r2, [r7, #4]
 80192cc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80192ce:	230a      	movs	r3, #10
 80192d0:	843b      	strh	r3, [r7, #32]
 80192d2:	230a      	movs	r3, #10
 80192d4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 80192d6:	230a      	movs	r3, #10
 80192d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 80192da:	2300      	movs	r3, #0
 80192dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80192de:	230a      	movs	r3, #10
 80192e0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80192e2:	2300      	movs	r3, #0
 80192e4:	83bb      	strh	r3, [r7, #28]
 80192e6:	2300      	movs	r3, #0
 80192e8:	837b      	strh	r3, [r7, #26]
 80192ea:	2300      	movs	r3, #0
 80192ec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80192ee:	2300      	movs	r3, #0
 80192f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80192f2:	e0b1      	b.n	8019458 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 80192f4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80192f8:	49a7      	ldr	r1, [pc, #668]	@ (8019598 <etharp_find_entry+0x2d8>)
 80192fa:	4613      	mov	r3, r2
 80192fc:	005b      	lsls	r3, r3, #1
 80192fe:	4413      	add	r3, r2
 8019300:	00db      	lsls	r3, r3, #3
 8019302:	440b      	add	r3, r1
 8019304:	3314      	adds	r3, #20
 8019306:	781b      	ldrb	r3, [r3, #0]
 8019308:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801930a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801930e:	2b0a      	cmp	r3, #10
 8019310:	d105      	bne.n	801931e <etharp_find_entry+0x5e>
 8019312:	7dfb      	ldrb	r3, [r7, #23]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d102      	bne.n	801931e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019318:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801931a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801931c:	e098      	b.n	8019450 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 801931e:	7dfb      	ldrb	r3, [r7, #23]
 8019320:	2b00      	cmp	r3, #0
 8019322:	f000 8095 	beq.w	8019450 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019326:	7dfb      	ldrb	r3, [r7, #23]
 8019328:	2b01      	cmp	r3, #1
 801932a:	d009      	beq.n	8019340 <etharp_find_entry+0x80>
 801932c:	7dfb      	ldrb	r3, [r7, #23]
 801932e:	2b01      	cmp	r3, #1
 8019330:	d806      	bhi.n	8019340 <etharp_find_entry+0x80>
 8019332:	4b9a      	ldr	r3, [pc, #616]	@ (801959c <etharp_find_entry+0x2dc>)
 8019334:	f240 1223 	movw	r2, #291	@ 0x123
 8019338:	4999      	ldr	r1, [pc, #612]	@ (80195a0 <etharp_find_entry+0x2e0>)
 801933a:	489a      	ldr	r0, [pc, #616]	@ (80195a4 <etharp_find_entry+0x2e4>)
 801933c:	f003 fa78 	bl	801c830 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	2b00      	cmp	r3, #0
 8019344:	d020      	beq.n	8019388 <etharp_find_entry+0xc8>
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	6819      	ldr	r1, [r3, #0]
 801934a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801934e:	4892      	ldr	r0, [pc, #584]	@ (8019598 <etharp_find_entry+0x2d8>)
 8019350:	4613      	mov	r3, r2
 8019352:	005b      	lsls	r3, r3, #1
 8019354:	4413      	add	r3, r2
 8019356:	00db      	lsls	r3, r3, #3
 8019358:	4403      	add	r3, r0
 801935a:	3304      	adds	r3, #4
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	4299      	cmp	r1, r3
 8019360:	d112      	bne.n	8019388 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	2b00      	cmp	r3, #0
 8019366:	d00c      	beq.n	8019382 <etharp_find_entry+0xc2>
 8019368:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801936c:	498a      	ldr	r1, [pc, #552]	@ (8019598 <etharp_find_entry+0x2d8>)
 801936e:	4613      	mov	r3, r2
 8019370:	005b      	lsls	r3, r3, #1
 8019372:	4413      	add	r3, r2
 8019374:	00db      	lsls	r3, r3, #3
 8019376:	440b      	add	r3, r1
 8019378:	3308      	adds	r3, #8
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	687a      	ldr	r2, [r7, #4]
 801937e:	429a      	cmp	r2, r3
 8019380:	d102      	bne.n	8019388 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019382:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8019386:	e103      	b.n	8019590 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019388:	7dfb      	ldrb	r3, [r7, #23]
 801938a:	2b01      	cmp	r3, #1
 801938c:	d140      	bne.n	8019410 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801938e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019392:	4981      	ldr	r1, [pc, #516]	@ (8019598 <etharp_find_entry+0x2d8>)
 8019394:	4613      	mov	r3, r2
 8019396:	005b      	lsls	r3, r3, #1
 8019398:	4413      	add	r3, r2
 801939a:	00db      	lsls	r3, r3, #3
 801939c:	440b      	add	r3, r1
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d01a      	beq.n	80193da <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80193a4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80193a8:	497b      	ldr	r1, [pc, #492]	@ (8019598 <etharp_find_entry+0x2d8>)
 80193aa:	4613      	mov	r3, r2
 80193ac:	005b      	lsls	r3, r3, #1
 80193ae:	4413      	add	r3, r2
 80193b0:	00db      	lsls	r3, r3, #3
 80193b2:	440b      	add	r3, r1
 80193b4:	3312      	adds	r3, #18
 80193b6:	881b      	ldrh	r3, [r3, #0]
 80193b8:	8bba      	ldrh	r2, [r7, #28]
 80193ba:	429a      	cmp	r2, r3
 80193bc:	d848      	bhi.n	8019450 <etharp_find_entry+0x190>
            old_queue = i;
 80193be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80193c0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80193c2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80193c6:	4974      	ldr	r1, [pc, #464]	@ (8019598 <etharp_find_entry+0x2d8>)
 80193c8:	4613      	mov	r3, r2
 80193ca:	005b      	lsls	r3, r3, #1
 80193cc:	4413      	add	r3, r2
 80193ce:	00db      	lsls	r3, r3, #3
 80193d0:	440b      	add	r3, r1
 80193d2:	3312      	adds	r3, #18
 80193d4:	881b      	ldrh	r3, [r3, #0]
 80193d6:	83bb      	strh	r3, [r7, #28]
 80193d8:	e03a      	b.n	8019450 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80193da:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80193de:	496e      	ldr	r1, [pc, #440]	@ (8019598 <etharp_find_entry+0x2d8>)
 80193e0:	4613      	mov	r3, r2
 80193e2:	005b      	lsls	r3, r3, #1
 80193e4:	4413      	add	r3, r2
 80193e6:	00db      	lsls	r3, r3, #3
 80193e8:	440b      	add	r3, r1
 80193ea:	3312      	adds	r3, #18
 80193ec:	881b      	ldrh	r3, [r3, #0]
 80193ee:	8b7a      	ldrh	r2, [r7, #26]
 80193f0:	429a      	cmp	r2, r3
 80193f2:	d82d      	bhi.n	8019450 <etharp_find_entry+0x190>
            old_pending = i;
 80193f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80193f6:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 80193f8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80193fc:	4966      	ldr	r1, [pc, #408]	@ (8019598 <etharp_find_entry+0x2d8>)
 80193fe:	4613      	mov	r3, r2
 8019400:	005b      	lsls	r3, r3, #1
 8019402:	4413      	add	r3, r2
 8019404:	00db      	lsls	r3, r3, #3
 8019406:	440b      	add	r3, r1
 8019408:	3312      	adds	r3, #18
 801940a:	881b      	ldrh	r3, [r3, #0]
 801940c:	837b      	strh	r3, [r7, #26]
 801940e:	e01f      	b.n	8019450 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019410:	7dfb      	ldrb	r3, [r7, #23]
 8019412:	2b01      	cmp	r3, #1
 8019414:	d91c      	bls.n	8019450 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8019416:	7dfb      	ldrb	r3, [r7, #23]
 8019418:	2b04      	cmp	r3, #4
 801941a:	d819      	bhi.n	8019450 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801941c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019420:	495d      	ldr	r1, [pc, #372]	@ (8019598 <etharp_find_entry+0x2d8>)
 8019422:	4613      	mov	r3, r2
 8019424:	005b      	lsls	r3, r3, #1
 8019426:	4413      	add	r3, r2
 8019428:	00db      	lsls	r3, r3, #3
 801942a:	440b      	add	r3, r1
 801942c:	3312      	adds	r3, #18
 801942e:	881b      	ldrh	r3, [r3, #0]
 8019430:	8b3a      	ldrh	r2, [r7, #24]
 8019432:	429a      	cmp	r2, r3
 8019434:	d80c      	bhi.n	8019450 <etharp_find_entry+0x190>
            old_stable = i;
 8019436:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019438:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 801943a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801943e:	4956      	ldr	r1, [pc, #344]	@ (8019598 <etharp_find_entry+0x2d8>)
 8019440:	4613      	mov	r3, r2
 8019442:	005b      	lsls	r3, r3, #1
 8019444:	4413      	add	r3, r2
 8019446:	00db      	lsls	r3, r3, #3
 8019448:	440b      	add	r3, r1
 801944a:	3312      	adds	r3, #18
 801944c:	881b      	ldrh	r3, [r3, #0]
 801944e:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019450:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019452:	3301      	adds	r3, #1
 8019454:	b29b      	uxth	r3, r3
 8019456:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8019458:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801945c:	2b09      	cmp	r3, #9
 801945e:	f77f af49 	ble.w	80192f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019462:	7afb      	ldrb	r3, [r7, #11]
 8019464:	f003 0302 	and.w	r3, r3, #2
 8019468:	2b00      	cmp	r3, #0
 801946a:	d108      	bne.n	801947e <etharp_find_entry+0x1be>
 801946c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8019470:	2b0a      	cmp	r3, #10
 8019472:	d107      	bne.n	8019484 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019474:	7afb      	ldrb	r3, [r7, #11]
 8019476:	f003 0301 	and.w	r3, r3, #1
 801947a:	2b00      	cmp	r3, #0
 801947c:	d102      	bne.n	8019484 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801947e:	f04f 33ff 	mov.w	r3, #4294967295
 8019482:	e085      	b.n	8019590 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019484:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8019488:	2b09      	cmp	r3, #9
 801948a:	dc02      	bgt.n	8019492 <etharp_find_entry+0x1d2>
    i = empty;
 801948c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801948e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8019490:	e039      	b.n	8019506 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019492:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019496:	2b09      	cmp	r3, #9
 8019498:	dc14      	bgt.n	80194c4 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 801949a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801949c:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801949e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80194a2:	493d      	ldr	r1, [pc, #244]	@ (8019598 <etharp_find_entry+0x2d8>)
 80194a4:	4613      	mov	r3, r2
 80194a6:	005b      	lsls	r3, r3, #1
 80194a8:	4413      	add	r3, r2
 80194aa:	00db      	lsls	r3, r3, #3
 80194ac:	440b      	add	r3, r1
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d018      	beq.n	80194e6 <etharp_find_entry+0x226>
 80194b4:	4b39      	ldr	r3, [pc, #228]	@ (801959c <etharp_find_entry+0x2dc>)
 80194b6:	f240 126d 	movw	r2, #365	@ 0x16d
 80194ba:	493b      	ldr	r1, [pc, #236]	@ (80195a8 <etharp_find_entry+0x2e8>)
 80194bc:	4839      	ldr	r0, [pc, #228]	@ (80195a4 <etharp_find_entry+0x2e4>)
 80194be:	f003 f9b7 	bl	801c830 <iprintf>
 80194c2:	e010      	b.n	80194e6 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80194c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80194c8:	2b09      	cmp	r3, #9
 80194ca:	dc02      	bgt.n	80194d2 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 80194cc:	8c3b      	ldrh	r3, [r7, #32]
 80194ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80194d0:	e009      	b.n	80194e6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80194d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80194d6:	2b09      	cmp	r3, #9
 80194d8:	dc02      	bgt.n	80194e0 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80194da:	8bfb      	ldrh	r3, [r7, #30]
 80194dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80194de:	e002      	b.n	80194e6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80194e0:	f04f 33ff 	mov.w	r3, #4294967295
 80194e4:	e054      	b.n	8019590 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80194e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80194ea:	2b09      	cmp	r3, #9
 80194ec:	dd06      	ble.n	80194fc <etharp_find_entry+0x23c>
 80194ee:	4b2b      	ldr	r3, [pc, #172]	@ (801959c <etharp_find_entry+0x2dc>)
 80194f0:	f240 127f 	movw	r2, #383	@ 0x17f
 80194f4:	492d      	ldr	r1, [pc, #180]	@ (80195ac <etharp_find_entry+0x2ec>)
 80194f6:	482b      	ldr	r0, [pc, #172]	@ (80195a4 <etharp_find_entry+0x2e4>)
 80194f8:	f003 f99a 	bl	801c830 <iprintf>
    etharp_free_entry(i);
 80194fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8019500:	4618      	mov	r0, r3
 8019502:	f7ff fdd1 	bl	80190a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019506:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801950a:	2b09      	cmp	r3, #9
 801950c:	dd06      	ble.n	801951c <etharp_find_entry+0x25c>
 801950e:	4b23      	ldr	r3, [pc, #140]	@ (801959c <etharp_find_entry+0x2dc>)
 8019510:	f240 1283 	movw	r2, #387	@ 0x183
 8019514:	4925      	ldr	r1, [pc, #148]	@ (80195ac <etharp_find_entry+0x2ec>)
 8019516:	4823      	ldr	r0, [pc, #140]	@ (80195a4 <etharp_find_entry+0x2e4>)
 8019518:	f003 f98a 	bl	801c830 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801951c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019520:	491d      	ldr	r1, [pc, #116]	@ (8019598 <etharp_find_entry+0x2d8>)
 8019522:	4613      	mov	r3, r2
 8019524:	005b      	lsls	r3, r3, #1
 8019526:	4413      	add	r3, r2
 8019528:	00db      	lsls	r3, r3, #3
 801952a:	440b      	add	r3, r1
 801952c:	3314      	adds	r3, #20
 801952e:	781b      	ldrb	r3, [r3, #0]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d006      	beq.n	8019542 <etharp_find_entry+0x282>
 8019534:	4b19      	ldr	r3, [pc, #100]	@ (801959c <etharp_find_entry+0x2dc>)
 8019536:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801953a:	491d      	ldr	r1, [pc, #116]	@ (80195b0 <etharp_find_entry+0x2f0>)
 801953c:	4819      	ldr	r0, [pc, #100]	@ (80195a4 <etharp_find_entry+0x2e4>)
 801953e:	f003 f977 	bl	801c830 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019542:	68fb      	ldr	r3, [r7, #12]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d00b      	beq.n	8019560 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8019548:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801954c:	68fb      	ldr	r3, [r7, #12]
 801954e:	6819      	ldr	r1, [r3, #0]
 8019550:	4811      	ldr	r0, [pc, #68]	@ (8019598 <etharp_find_entry+0x2d8>)
 8019552:	4613      	mov	r3, r2
 8019554:	005b      	lsls	r3, r3, #1
 8019556:	4413      	add	r3, r2
 8019558:	00db      	lsls	r3, r3, #3
 801955a:	4403      	add	r3, r0
 801955c:	3304      	adds	r3, #4
 801955e:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019560:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019564:	490c      	ldr	r1, [pc, #48]	@ (8019598 <etharp_find_entry+0x2d8>)
 8019566:	4613      	mov	r3, r2
 8019568:	005b      	lsls	r3, r3, #1
 801956a:	4413      	add	r3, r2
 801956c:	00db      	lsls	r3, r3, #3
 801956e:	440b      	add	r3, r1
 8019570:	3312      	adds	r3, #18
 8019572:	2200      	movs	r2, #0
 8019574:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019576:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801957a:	4907      	ldr	r1, [pc, #28]	@ (8019598 <etharp_find_entry+0x2d8>)
 801957c:	4613      	mov	r3, r2
 801957e:	005b      	lsls	r3, r3, #1
 8019580:	4413      	add	r3, r2
 8019582:	00db      	lsls	r3, r3, #3
 8019584:	440b      	add	r3, r1
 8019586:	3308      	adds	r3, #8
 8019588:	687a      	ldr	r2, [r7, #4]
 801958a:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801958c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8019590:	4618      	mov	r0, r3
 8019592:	3728      	adds	r7, #40	@ 0x28
 8019594:	46bd      	mov	sp, r7
 8019596:	bd80      	pop	{r7, pc}
 8019598:	20013de0 	.word	0x20013de0
 801959c:	08021cdc 	.word	0x08021cdc
 80195a0:	08021d14 	.word	0x08021d14
 80195a4:	08021d54 	.word	0x08021d54
 80195a8:	08021d7c 	.word	0x08021d7c
 80195ac:	08021d94 	.word	0x08021d94
 80195b0:	08021da8 	.word	0x08021da8

080195b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b088      	sub	sp, #32
 80195b8:	af02      	add	r7, sp, #8
 80195ba:	60f8      	str	r0, [r7, #12]
 80195bc:	60b9      	str	r1, [r7, #8]
 80195be:	607a      	str	r2, [r7, #4]
 80195c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80195c8:	2b06      	cmp	r3, #6
 80195ca:	d006      	beq.n	80195da <etharp_update_arp_entry+0x26>
 80195cc:	4b58      	ldr	r3, [pc, #352]	@ (8019730 <etharp_update_arp_entry+0x17c>)
 80195ce:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80195d2:	4958      	ldr	r1, [pc, #352]	@ (8019734 <etharp_update_arp_entry+0x180>)
 80195d4:	4858      	ldr	r0, [pc, #352]	@ (8019738 <etharp_update_arp_entry+0x184>)
 80195d6:	f003 f92b 	bl	801c830 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80195da:	68bb      	ldr	r3, [r7, #8]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d012      	beq.n	8019606 <etharp_update_arp_entry+0x52>
 80195e0:	68bb      	ldr	r3, [r7, #8]
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d00e      	beq.n	8019606 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80195e8:	68bb      	ldr	r3, [r7, #8]
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	68f9      	ldr	r1, [r7, #12]
 80195ee:	4618      	mov	r0, r3
 80195f0:	f001 fa00 	bl	801a9f4 <ip4_addr_isbroadcast_u32>
 80195f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d105      	bne.n	8019606 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80195fa:	68bb      	ldr	r3, [r7, #8]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019602:	2be0      	cmp	r3, #224	@ 0xe0
 8019604:	d102      	bne.n	801960c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019606:	f06f 030f 	mvn.w	r3, #15
 801960a:	e08c      	b.n	8019726 <etharp_update_arp_entry+0x172>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801960c:	78fb      	ldrb	r3, [r7, #3]
 801960e:	68fa      	ldr	r2, [r7, #12]
 8019610:	4619      	mov	r1, r3
 8019612:	68b8      	ldr	r0, [r7, #8]
 8019614:	f7ff fe54 	bl	80192c0 <etharp_find_entry>
 8019618:	4603      	mov	r3, r0
 801961a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801961c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019620:	2b00      	cmp	r3, #0
 8019622:	da02      	bge.n	801962a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8019624:	8afb      	ldrh	r3, [r7, #22]
 8019626:	b25b      	sxtb	r3, r3
 8019628:	e07d      	b.n	8019726 <etharp_update_arp_entry+0x172>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 801962a:	78fb      	ldrb	r3, [r7, #3]
 801962c:	f003 0304 	and.w	r3, r3, #4
 8019630:	2b00      	cmp	r3, #0
 8019632:	d00b      	beq.n	801964c <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8019634:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019638:	4940      	ldr	r1, [pc, #256]	@ (801973c <etharp_update_arp_entry+0x188>)
 801963a:	4613      	mov	r3, r2
 801963c:	005b      	lsls	r3, r3, #1
 801963e:	4413      	add	r3, r2
 8019640:	00db      	lsls	r3, r3, #3
 8019642:	440b      	add	r3, r1
 8019644:	3314      	adds	r3, #20
 8019646:	2205      	movs	r2, #5
 8019648:	701a      	strb	r2, [r3, #0]
 801964a:	e019      	b.n	8019680 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 801964c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019650:	493a      	ldr	r1, [pc, #232]	@ (801973c <etharp_update_arp_entry+0x188>)
 8019652:	4613      	mov	r3, r2
 8019654:	005b      	lsls	r3, r3, #1
 8019656:	4413      	add	r3, r2
 8019658:	00db      	lsls	r3, r3, #3
 801965a:	440b      	add	r3, r1
 801965c:	3314      	adds	r3, #20
 801965e:	781b      	ldrb	r3, [r3, #0]
 8019660:	2b05      	cmp	r3, #5
 8019662:	d102      	bne.n	801966a <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 8019664:	f06f 0305 	mvn.w	r3, #5
 8019668:	e05d      	b.n	8019726 <etharp_update_arp_entry+0x172>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801966a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801966e:	4933      	ldr	r1, [pc, #204]	@ (801973c <etharp_update_arp_entry+0x188>)
 8019670:	4613      	mov	r3, r2
 8019672:	005b      	lsls	r3, r3, #1
 8019674:	4413      	add	r3, r2
 8019676:	00db      	lsls	r3, r3, #3
 8019678:	440b      	add	r3, r1
 801967a:	3314      	adds	r3, #20
 801967c:	2202      	movs	r2, #2
 801967e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019680:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019684:	492d      	ldr	r1, [pc, #180]	@ (801973c <etharp_update_arp_entry+0x188>)
 8019686:	4613      	mov	r3, r2
 8019688:	005b      	lsls	r3, r3, #1
 801968a:	4413      	add	r3, r2
 801968c:	00db      	lsls	r3, r3, #3
 801968e:	440b      	add	r3, r1
 8019690:	3308      	adds	r3, #8
 8019692:	68fa      	ldr	r2, [r7, #12]
 8019694:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8019696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801969a:	4613      	mov	r3, r2
 801969c:	005b      	lsls	r3, r3, #1
 801969e:	4413      	add	r3, r2
 80196a0:	00db      	lsls	r3, r3, #3
 80196a2:	3308      	adds	r3, #8
 80196a4:	4a25      	ldr	r2, [pc, #148]	@ (801973c <etharp_update_arp_entry+0x188>)
 80196a6:	4413      	add	r3, r2
 80196a8:	3304      	adds	r3, #4
 80196aa:	2206      	movs	r2, #6
 80196ac:	6879      	ldr	r1, [r7, #4]
 80196ae:	4618      	mov	r0, r3
 80196b0:	f003 fadd 	bl	801cc6e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80196b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80196b8:	4920      	ldr	r1, [pc, #128]	@ (801973c <etharp_update_arp_entry+0x188>)
 80196ba:	4613      	mov	r3, r2
 80196bc:	005b      	lsls	r3, r3, #1
 80196be:	4413      	add	r3, r2
 80196c0:	00db      	lsls	r3, r3, #3
 80196c2:	440b      	add	r3, r1
 80196c4:	3312      	adds	r3, #18
 80196c6:	2200      	movs	r2, #0
 80196c8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80196ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80196ce:	491b      	ldr	r1, [pc, #108]	@ (801973c <etharp_update_arp_entry+0x188>)
 80196d0:	4613      	mov	r3, r2
 80196d2:	005b      	lsls	r3, r3, #1
 80196d4:	4413      	add	r3, r2
 80196d6:	00db      	lsls	r3, r3, #3
 80196d8:	440b      	add	r3, r1
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d021      	beq.n	8019724 <etharp_update_arp_entry+0x170>
    struct pbuf *p = arp_table[i].q;
 80196e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80196e4:	4915      	ldr	r1, [pc, #84]	@ (801973c <etharp_update_arp_entry+0x188>)
 80196e6:	4613      	mov	r3, r2
 80196e8:	005b      	lsls	r3, r3, #1
 80196ea:	4413      	add	r3, r2
 80196ec:	00db      	lsls	r3, r3, #3
 80196ee:	440b      	add	r3, r1
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80196f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80196f8:	4910      	ldr	r1, [pc, #64]	@ (801973c <etharp_update_arp_entry+0x188>)
 80196fa:	4613      	mov	r3, r2
 80196fc:	005b      	lsls	r3, r3, #1
 80196fe:	4413      	add	r3, r2
 8019700:	00db      	lsls	r3, r3, #3
 8019702:	440b      	add	r3, r1
 8019704:	2200      	movs	r2, #0
 8019706:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801970e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019712:	9300      	str	r3, [sp, #0]
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	6939      	ldr	r1, [r7, #16]
 8019718:	68f8      	ldr	r0, [r7, #12]
 801971a:	f002 f889 	bl	801b830 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801971e:	6938      	ldr	r0, [r7, #16]
 8019720:	f7f7 fa48 	bl	8010bb4 <pbuf_free>
  }
  return ERR_OK;
 8019724:	2300      	movs	r3, #0
}
 8019726:	4618      	mov	r0, r3
 8019728:	3718      	adds	r7, #24
 801972a:	46bd      	mov	sp, r7
 801972c:	bd80      	pop	{r7, pc}
 801972e:	bf00      	nop
 8019730:	08021cdc 	.word	0x08021cdc
 8019734:	08021dd4 	.word	0x08021dd4
 8019738:	08021d54 	.word	0x08021d54
 801973c:	20013de0 	.word	0x20013de0

08019740 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 8019740:	b580      	push	{r7, lr}
 8019742:	b084      	sub	sp, #16
 8019744:	af00      	add	r7, sp, #0
 8019746:	6078      	str	r0, [r7, #4]
 8019748:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 801974a:	6878      	ldr	r0, [r7, #4]
 801974c:	f000 fe2c 	bl	801a3a8 <ip4_route>
 8019750:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d102      	bne.n	801975e <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 8019758:	f06f 0303 	mvn.w	r3, #3
 801975c:	e006      	b.n	801976c <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 801975e:	2305      	movs	r3, #5
 8019760:	683a      	ldr	r2, [r7, #0]
 8019762:	6879      	ldr	r1, [r7, #4]
 8019764:	68f8      	ldr	r0, [r7, #12]
 8019766:	f7ff ff25 	bl	80195b4 <etharp_update_arp_entry>
 801976a:	4603      	mov	r3, r0
}
 801976c:	4618      	mov	r0, r3
 801976e:	3710      	adds	r7, #16
 8019770:	46bd      	mov	sp, r7
 8019772:	bd80      	pop	{r7, pc}

08019774 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019774:	b580      	push	{r7, lr}
 8019776:	b084      	sub	sp, #16
 8019778:	af00      	add	r7, sp, #0
 801977a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801977c:	2300      	movs	r3, #0
 801977e:	60fb      	str	r3, [r7, #12]
 8019780:	e01e      	b.n	80197c0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019782:	4913      	ldr	r1, [pc, #76]	@ (80197d0 <etharp_cleanup_netif+0x5c>)
 8019784:	68fa      	ldr	r2, [r7, #12]
 8019786:	4613      	mov	r3, r2
 8019788:	005b      	lsls	r3, r3, #1
 801978a:	4413      	add	r3, r2
 801978c:	00db      	lsls	r3, r3, #3
 801978e:	440b      	add	r3, r1
 8019790:	3314      	adds	r3, #20
 8019792:	781b      	ldrb	r3, [r3, #0]
 8019794:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8019796:	7afb      	ldrb	r3, [r7, #11]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d00e      	beq.n	80197ba <etharp_cleanup_netif+0x46>
 801979c:	490c      	ldr	r1, [pc, #48]	@ (80197d0 <etharp_cleanup_netif+0x5c>)
 801979e:	68fa      	ldr	r2, [r7, #12]
 80197a0:	4613      	mov	r3, r2
 80197a2:	005b      	lsls	r3, r3, #1
 80197a4:	4413      	add	r3, r2
 80197a6:	00db      	lsls	r3, r3, #3
 80197a8:	440b      	add	r3, r1
 80197aa:	3308      	adds	r3, #8
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	687a      	ldr	r2, [r7, #4]
 80197b0:	429a      	cmp	r2, r3
 80197b2:	d102      	bne.n	80197ba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80197b4:	68f8      	ldr	r0, [r7, #12]
 80197b6:	f7ff fc77 	bl	80190a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	3301      	adds	r3, #1
 80197be:	60fb      	str	r3, [r7, #12]
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	2b09      	cmp	r3, #9
 80197c4:	dddd      	ble.n	8019782 <etharp_cleanup_netif+0xe>
    }
  }
}
 80197c6:	bf00      	nop
 80197c8:	bf00      	nop
 80197ca:	3710      	adds	r7, #16
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bd80      	pop	{r7, pc}
 80197d0:	20013de0 	.word	0x20013de0

080197d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80197d4:	b5b0      	push	{r4, r5, r7, lr}
 80197d6:	b08a      	sub	sp, #40	@ 0x28
 80197d8:	af04      	add	r7, sp, #16
 80197da:	6078      	str	r0, [r7, #4]
 80197dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80197de:	683b      	ldr	r3, [r7, #0]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d107      	bne.n	80197f4 <etharp_input+0x20>
 80197e4:	4b3f      	ldr	r3, [pc, #252]	@ (80198e4 <etharp_input+0x110>)
 80197e6:	f240 228a 	movw	r2, #650	@ 0x28a
 80197ea:	493f      	ldr	r1, [pc, #252]	@ (80198e8 <etharp_input+0x114>)
 80197ec:	483f      	ldr	r0, [pc, #252]	@ (80198ec <etharp_input+0x118>)
 80197ee:	f003 f81f 	bl	801c830 <iprintf>
 80197f2:	e074      	b.n	80198de <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	685b      	ldr	r3, [r3, #4]
 80197f8:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80197fa:	697b      	ldr	r3, [r7, #20]
 80197fc:	881b      	ldrh	r3, [r3, #0]
 80197fe:	b29b      	uxth	r3, r3
 8019800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019804:	d10c      	bne.n	8019820 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019806:	697b      	ldr	r3, [r7, #20]
 8019808:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801980a:	2b06      	cmp	r3, #6
 801980c:	d108      	bne.n	8019820 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801980e:	697b      	ldr	r3, [r7, #20]
 8019810:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019812:	2b04      	cmp	r3, #4
 8019814:	d104      	bne.n	8019820 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8019816:	697b      	ldr	r3, [r7, #20]
 8019818:	885b      	ldrh	r3, [r3, #2]
 801981a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801981c:	2b08      	cmp	r3, #8
 801981e:	d003      	beq.n	8019828 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019820:	6878      	ldr	r0, [r7, #4]
 8019822:	f7f7 f9c7 	bl	8010bb4 <pbuf_free>
    return;
 8019826:	e05a      	b.n	80198de <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8019828:	697b      	ldr	r3, [r7, #20]
 801982a:	330e      	adds	r3, #14
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019830:	697b      	ldr	r3, [r7, #20]
 8019832:	3318      	adds	r3, #24
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019838:	683b      	ldr	r3, [r7, #0]
 801983a:	3304      	adds	r3, #4
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	2b00      	cmp	r3, #0
 8019840:	d102      	bne.n	8019848 <etharp_input+0x74>
    for_us = 0;
 8019842:	2300      	movs	r3, #0
 8019844:	74fb      	strb	r3, [r7, #19]
 8019846:	e009      	b.n	801985c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019848:	68ba      	ldr	r2, [r7, #8]
 801984a:	683b      	ldr	r3, [r7, #0]
 801984c:	3304      	adds	r3, #4
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	429a      	cmp	r2, r3
 8019852:	bf0c      	ite	eq
 8019854:	2301      	moveq	r3, #1
 8019856:	2300      	movne	r3, #0
 8019858:	b2db      	uxtb	r3, r3
 801985a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801985c:	697b      	ldr	r3, [r7, #20]
 801985e:	f103 0208 	add.w	r2, r3, #8
 8019862:	7cfb      	ldrb	r3, [r7, #19]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d001      	beq.n	801986c <etharp_input+0x98>
 8019868:	2301      	movs	r3, #1
 801986a:	e000      	b.n	801986e <etharp_input+0x9a>
 801986c:	2302      	movs	r3, #2
 801986e:	f107 010c 	add.w	r1, r7, #12
 8019872:	6838      	ldr	r0, [r7, #0]
 8019874:	f7ff fe9e 	bl	80195b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019878:	697b      	ldr	r3, [r7, #20]
 801987a:	88db      	ldrh	r3, [r3, #6]
 801987c:	b29b      	uxth	r3, r3
 801987e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019882:	d003      	beq.n	801988c <etharp_input+0xb8>
 8019884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019888:	d01e      	beq.n	80198c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801988a:	e025      	b.n	80198d8 <etharp_input+0x104>
      if (for_us) {
 801988c:	7cfb      	ldrb	r3, [r7, #19]
 801988e:	2b00      	cmp	r3, #0
 8019890:	d021      	beq.n	80198d6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019892:	683b      	ldr	r3, [r7, #0]
 8019894:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8019898:	697b      	ldr	r3, [r7, #20]
 801989a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80198a8:	697a      	ldr	r2, [r7, #20]
 80198aa:	3208      	adds	r2, #8
        etharp_raw(netif,
 80198ac:	2102      	movs	r1, #2
 80198ae:	9103      	str	r1, [sp, #12]
 80198b0:	f107 010c 	add.w	r1, r7, #12
 80198b4:	9102      	str	r1, [sp, #8]
 80198b6:	9201      	str	r2, [sp, #4]
 80198b8:	9300      	str	r3, [sp, #0]
 80198ba:	462b      	mov	r3, r5
 80198bc:	4622      	mov	r2, r4
 80198be:	4601      	mov	r1, r0
 80198c0:	6838      	ldr	r0, [r7, #0]
 80198c2:	f000 faef 	bl	8019ea4 <etharp_raw>
      break;
 80198c6:	e006      	b.n	80198d6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80198c8:	f107 030c 	add.w	r3, r7, #12
 80198cc:	4619      	mov	r1, r3
 80198ce:	6838      	ldr	r0, [r7, #0]
 80198d0:	f7fe f97c 	bl	8017bcc <dhcp_arp_reply>
      break;
 80198d4:	e000      	b.n	80198d8 <etharp_input+0x104>
      break;
 80198d6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80198d8:	6878      	ldr	r0, [r7, #4]
 80198da:	f7f7 f96b 	bl	8010bb4 <pbuf_free>
}
 80198de:	3718      	adds	r7, #24
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bdb0      	pop	{r4, r5, r7, pc}
 80198e4:	08021cdc 	.word	0x08021cdc
 80198e8:	08021e2c 	.word	0x08021e2c
 80198ec:	08021d54 	.word	0x08021d54

080198f0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b086      	sub	sp, #24
 80198f4:	af02      	add	r7, sp, #8
 80198f6:	60f8      	str	r0, [r7, #12]
 80198f8:	60b9      	str	r1, [r7, #8]
 80198fa:	4613      	mov	r3, r2
 80198fc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80198fe:	79fa      	ldrb	r2, [r7, #7]
 8019900:	4944      	ldr	r1, [pc, #272]	@ (8019a14 <etharp_output_to_arp_index+0x124>)
 8019902:	4613      	mov	r3, r2
 8019904:	005b      	lsls	r3, r3, #1
 8019906:	4413      	add	r3, r2
 8019908:	00db      	lsls	r3, r3, #3
 801990a:	440b      	add	r3, r1
 801990c:	3314      	adds	r3, #20
 801990e:	781b      	ldrb	r3, [r3, #0]
 8019910:	2b01      	cmp	r3, #1
 8019912:	d806      	bhi.n	8019922 <etharp_output_to_arp_index+0x32>
 8019914:	4b40      	ldr	r3, [pc, #256]	@ (8019a18 <etharp_output_to_arp_index+0x128>)
 8019916:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801991a:	4940      	ldr	r1, [pc, #256]	@ (8019a1c <etharp_output_to_arp_index+0x12c>)
 801991c:	4840      	ldr	r0, [pc, #256]	@ (8019a20 <etharp_output_to_arp_index+0x130>)
 801991e:	f002 ff87 	bl	801c830 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8019922:	79fa      	ldrb	r2, [r7, #7]
 8019924:	493b      	ldr	r1, [pc, #236]	@ (8019a14 <etharp_output_to_arp_index+0x124>)
 8019926:	4613      	mov	r3, r2
 8019928:	005b      	lsls	r3, r3, #1
 801992a:	4413      	add	r3, r2
 801992c:	00db      	lsls	r3, r3, #3
 801992e:	440b      	add	r3, r1
 8019930:	3314      	adds	r3, #20
 8019932:	781b      	ldrb	r3, [r3, #0]
 8019934:	2b02      	cmp	r3, #2
 8019936:	d153      	bne.n	80199e0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019938:	79fa      	ldrb	r2, [r7, #7]
 801993a:	4936      	ldr	r1, [pc, #216]	@ (8019a14 <etharp_output_to_arp_index+0x124>)
 801993c:	4613      	mov	r3, r2
 801993e:	005b      	lsls	r3, r3, #1
 8019940:	4413      	add	r3, r2
 8019942:	00db      	lsls	r3, r3, #3
 8019944:	440b      	add	r3, r1
 8019946:	3312      	adds	r3, #18
 8019948:	881b      	ldrh	r3, [r3, #0]
 801994a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801994e:	d919      	bls.n	8019984 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019950:	79fa      	ldrb	r2, [r7, #7]
 8019952:	4613      	mov	r3, r2
 8019954:	005b      	lsls	r3, r3, #1
 8019956:	4413      	add	r3, r2
 8019958:	00db      	lsls	r3, r3, #3
 801995a:	4a2e      	ldr	r2, [pc, #184]	@ (8019a14 <etharp_output_to_arp_index+0x124>)
 801995c:	4413      	add	r3, r2
 801995e:	3304      	adds	r3, #4
 8019960:	4619      	mov	r1, r3
 8019962:	68f8      	ldr	r0, [r7, #12]
 8019964:	f000 fb4c 	bl	801a000 <etharp_request>
 8019968:	4603      	mov	r3, r0
 801996a:	2b00      	cmp	r3, #0
 801996c:	d138      	bne.n	80199e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801996e:	79fa      	ldrb	r2, [r7, #7]
 8019970:	4928      	ldr	r1, [pc, #160]	@ (8019a14 <etharp_output_to_arp_index+0x124>)
 8019972:	4613      	mov	r3, r2
 8019974:	005b      	lsls	r3, r3, #1
 8019976:	4413      	add	r3, r2
 8019978:	00db      	lsls	r3, r3, #3
 801997a:	440b      	add	r3, r1
 801997c:	3314      	adds	r3, #20
 801997e:	2203      	movs	r2, #3
 8019980:	701a      	strb	r2, [r3, #0]
 8019982:	e02d      	b.n	80199e0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019984:	79fa      	ldrb	r2, [r7, #7]
 8019986:	4923      	ldr	r1, [pc, #140]	@ (8019a14 <etharp_output_to_arp_index+0x124>)
 8019988:	4613      	mov	r3, r2
 801998a:	005b      	lsls	r3, r3, #1
 801998c:	4413      	add	r3, r2
 801998e:	00db      	lsls	r3, r3, #3
 8019990:	440b      	add	r3, r1
 8019992:	3312      	adds	r3, #18
 8019994:	881b      	ldrh	r3, [r3, #0]
 8019996:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801999a:	d321      	bcc.n	80199e0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801999c:	79fa      	ldrb	r2, [r7, #7]
 801999e:	4613      	mov	r3, r2
 80199a0:	005b      	lsls	r3, r3, #1
 80199a2:	4413      	add	r3, r2
 80199a4:	00db      	lsls	r3, r3, #3
 80199a6:	4a1b      	ldr	r2, [pc, #108]	@ (8019a14 <etharp_output_to_arp_index+0x124>)
 80199a8:	4413      	add	r3, r2
 80199aa:	1d19      	adds	r1, r3, #4
 80199ac:	79fa      	ldrb	r2, [r7, #7]
 80199ae:	4613      	mov	r3, r2
 80199b0:	005b      	lsls	r3, r3, #1
 80199b2:	4413      	add	r3, r2
 80199b4:	00db      	lsls	r3, r3, #3
 80199b6:	3308      	adds	r3, #8
 80199b8:	4a16      	ldr	r2, [pc, #88]	@ (8019a14 <etharp_output_to_arp_index+0x124>)
 80199ba:	4413      	add	r3, r2
 80199bc:	3304      	adds	r3, #4
 80199be:	461a      	mov	r2, r3
 80199c0:	68f8      	ldr	r0, [r7, #12]
 80199c2:	f000 fafb 	bl	8019fbc <etharp_request_dst>
 80199c6:	4603      	mov	r3, r0
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d109      	bne.n	80199e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80199cc:	79fa      	ldrb	r2, [r7, #7]
 80199ce:	4911      	ldr	r1, [pc, #68]	@ (8019a14 <etharp_output_to_arp_index+0x124>)
 80199d0:	4613      	mov	r3, r2
 80199d2:	005b      	lsls	r3, r3, #1
 80199d4:	4413      	add	r3, r2
 80199d6:	00db      	lsls	r3, r3, #3
 80199d8:	440b      	add	r3, r1
 80199da:	3314      	adds	r3, #20
 80199dc:	2203      	movs	r2, #3
 80199de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 80199e6:	79fa      	ldrb	r2, [r7, #7]
 80199e8:	4613      	mov	r3, r2
 80199ea:	005b      	lsls	r3, r3, #1
 80199ec:	4413      	add	r3, r2
 80199ee:	00db      	lsls	r3, r3, #3
 80199f0:	3308      	adds	r3, #8
 80199f2:	4a08      	ldr	r2, [pc, #32]	@ (8019a14 <etharp_output_to_arp_index+0x124>)
 80199f4:	4413      	add	r3, r2
 80199f6:	3304      	adds	r3, #4
 80199f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80199fc:	9200      	str	r2, [sp, #0]
 80199fe:	460a      	mov	r2, r1
 8019a00:	68b9      	ldr	r1, [r7, #8]
 8019a02:	68f8      	ldr	r0, [r7, #12]
 8019a04:	f001 ff14 	bl	801b830 <ethernet_output>
 8019a08:	4603      	mov	r3, r0
}
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	3710      	adds	r7, #16
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bd80      	pop	{r7, pc}
 8019a12:	bf00      	nop
 8019a14:	20013de0 	.word	0x20013de0
 8019a18:	08021cdc 	.word	0x08021cdc
 8019a1c:	08021e4c 	.word	0x08021e4c
 8019a20:	08021d54 	.word	0x08021d54

08019a24 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	b08a      	sub	sp, #40	@ 0x28
 8019a28:	af02      	add	r7, sp, #8
 8019a2a:	60f8      	str	r0, [r7, #12]
 8019a2c:	60b9      	str	r1, [r7, #8]
 8019a2e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d106      	bne.n	8019a48 <etharp_output+0x24>
 8019a3a:	4b73      	ldr	r3, [pc, #460]	@ (8019c08 <etharp_output+0x1e4>)
 8019a3c:	f240 321e 	movw	r2, #798	@ 0x31e
 8019a40:	4972      	ldr	r1, [pc, #456]	@ (8019c0c <etharp_output+0x1e8>)
 8019a42:	4873      	ldr	r0, [pc, #460]	@ (8019c10 <etharp_output+0x1ec>)
 8019a44:	f002 fef4 	bl	801c830 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019a48:	68bb      	ldr	r3, [r7, #8]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d106      	bne.n	8019a5c <etharp_output+0x38>
 8019a4e:	4b6e      	ldr	r3, [pc, #440]	@ (8019c08 <etharp_output+0x1e4>)
 8019a50:	f240 321f 	movw	r2, #799	@ 0x31f
 8019a54:	496f      	ldr	r1, [pc, #444]	@ (8019c14 <etharp_output+0x1f0>)
 8019a56:	486e      	ldr	r0, [pc, #440]	@ (8019c10 <etharp_output+0x1ec>)
 8019a58:	f002 feea 	bl	801c830 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d106      	bne.n	8019a70 <etharp_output+0x4c>
 8019a62:	4b69      	ldr	r3, [pc, #420]	@ (8019c08 <etharp_output+0x1e4>)
 8019a64:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8019a68:	496b      	ldr	r1, [pc, #428]	@ (8019c18 <etharp_output+0x1f4>)
 8019a6a:	4869      	ldr	r0, [pc, #420]	@ (8019c10 <etharp_output+0x1ec>)
 8019a6c:	f002 fee0 	bl	801c830 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	68f9      	ldr	r1, [r7, #12]
 8019a76:	4618      	mov	r0, r3
 8019a78:	f000 ffbc 	bl	801a9f4 <ip4_addr_isbroadcast_u32>
 8019a7c:	4603      	mov	r3, r0
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d002      	beq.n	8019a88 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019a82:	4b66      	ldr	r3, [pc, #408]	@ (8019c1c <etharp_output+0x1f8>)
 8019a84:	61fb      	str	r3, [r7, #28]
 8019a86:	e0af      	b.n	8019be8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019a90:	2be0      	cmp	r3, #224	@ 0xe0
 8019a92:	d118      	bne.n	8019ac6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019a94:	2301      	movs	r3, #1
 8019a96:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019a98:	2300      	movs	r3, #0
 8019a9a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019a9c:	235e      	movs	r3, #94	@ 0x5e
 8019a9e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	3301      	adds	r3, #1
 8019aa4:	781b      	ldrb	r3, [r3, #0]
 8019aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019aaa:	b2db      	uxtb	r3, r3
 8019aac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	3302      	adds	r3, #2
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	3303      	adds	r3, #3
 8019aba:	781b      	ldrb	r3, [r3, #0]
 8019abc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8019abe:	f107 0310 	add.w	r3, r7, #16
 8019ac2:	61fb      	str	r3, [r7, #28]
 8019ac4:	e090      	b.n	8019be8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	681a      	ldr	r2, [r3, #0]
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	3304      	adds	r3, #4
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	405a      	eors	r2, r3
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	3308      	adds	r3, #8
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	4013      	ands	r3, r2
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d012      	beq.n	8019b04 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019ae4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8019ae8:	4293      	cmp	r3, r2
 8019aea:	d00b      	beq.n	8019b04 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	330c      	adds	r3, #12
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d003      	beq.n	8019afe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	330c      	adds	r3, #12
 8019afa:	61bb      	str	r3, [r7, #24]
 8019afc:	e002      	b.n	8019b04 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019afe:	f06f 0303 	mvn.w	r3, #3
 8019b02:	e07d      	b.n	8019c00 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019b04:	4b46      	ldr	r3, [pc, #280]	@ (8019c20 <etharp_output+0x1fc>)
 8019b06:	781b      	ldrb	r3, [r3, #0]
 8019b08:	4619      	mov	r1, r3
 8019b0a:	4a46      	ldr	r2, [pc, #280]	@ (8019c24 <etharp_output+0x200>)
 8019b0c:	460b      	mov	r3, r1
 8019b0e:	005b      	lsls	r3, r3, #1
 8019b10:	440b      	add	r3, r1
 8019b12:	00db      	lsls	r3, r3, #3
 8019b14:	4413      	add	r3, r2
 8019b16:	3314      	adds	r3, #20
 8019b18:	781b      	ldrb	r3, [r3, #0]
 8019b1a:	2b01      	cmp	r3, #1
 8019b1c:	d925      	bls.n	8019b6a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019b1e:	4b40      	ldr	r3, [pc, #256]	@ (8019c20 <etharp_output+0x1fc>)
 8019b20:	781b      	ldrb	r3, [r3, #0]
 8019b22:	4619      	mov	r1, r3
 8019b24:	4a3f      	ldr	r2, [pc, #252]	@ (8019c24 <etharp_output+0x200>)
 8019b26:	460b      	mov	r3, r1
 8019b28:	005b      	lsls	r3, r3, #1
 8019b2a:	440b      	add	r3, r1
 8019b2c:	00db      	lsls	r3, r3, #3
 8019b2e:	4413      	add	r3, r2
 8019b30:	3308      	adds	r3, #8
 8019b32:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019b34:	68fa      	ldr	r2, [r7, #12]
 8019b36:	429a      	cmp	r2, r3
 8019b38:	d117      	bne.n	8019b6a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019b3a:	69bb      	ldr	r3, [r7, #24]
 8019b3c:	681a      	ldr	r2, [r3, #0]
 8019b3e:	4b38      	ldr	r3, [pc, #224]	@ (8019c20 <etharp_output+0x1fc>)
 8019b40:	781b      	ldrb	r3, [r3, #0]
 8019b42:	4618      	mov	r0, r3
 8019b44:	4937      	ldr	r1, [pc, #220]	@ (8019c24 <etharp_output+0x200>)
 8019b46:	4603      	mov	r3, r0
 8019b48:	005b      	lsls	r3, r3, #1
 8019b4a:	4403      	add	r3, r0
 8019b4c:	00db      	lsls	r3, r3, #3
 8019b4e:	440b      	add	r3, r1
 8019b50:	3304      	adds	r3, #4
 8019b52:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019b54:	429a      	cmp	r2, r3
 8019b56:	d108      	bne.n	8019b6a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019b58:	4b31      	ldr	r3, [pc, #196]	@ (8019c20 <etharp_output+0x1fc>)
 8019b5a:	781b      	ldrb	r3, [r3, #0]
 8019b5c:	461a      	mov	r2, r3
 8019b5e:	68b9      	ldr	r1, [r7, #8]
 8019b60:	68f8      	ldr	r0, [r7, #12]
 8019b62:	f7ff fec5 	bl	80198f0 <etharp_output_to_arp_index>
 8019b66:	4603      	mov	r3, r0
 8019b68:	e04a      	b.n	8019c00 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	75fb      	strb	r3, [r7, #23]
 8019b6e:	e031      	b.n	8019bd4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019b70:	7dfa      	ldrb	r2, [r7, #23]
 8019b72:	492c      	ldr	r1, [pc, #176]	@ (8019c24 <etharp_output+0x200>)
 8019b74:	4613      	mov	r3, r2
 8019b76:	005b      	lsls	r3, r3, #1
 8019b78:	4413      	add	r3, r2
 8019b7a:	00db      	lsls	r3, r3, #3
 8019b7c:	440b      	add	r3, r1
 8019b7e:	3314      	adds	r3, #20
 8019b80:	781b      	ldrb	r3, [r3, #0]
 8019b82:	2b01      	cmp	r3, #1
 8019b84:	d923      	bls.n	8019bce <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019b86:	7dfa      	ldrb	r2, [r7, #23]
 8019b88:	4926      	ldr	r1, [pc, #152]	@ (8019c24 <etharp_output+0x200>)
 8019b8a:	4613      	mov	r3, r2
 8019b8c:	005b      	lsls	r3, r3, #1
 8019b8e:	4413      	add	r3, r2
 8019b90:	00db      	lsls	r3, r3, #3
 8019b92:	440b      	add	r3, r1
 8019b94:	3308      	adds	r3, #8
 8019b96:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019b98:	68fa      	ldr	r2, [r7, #12]
 8019b9a:	429a      	cmp	r2, r3
 8019b9c:	d117      	bne.n	8019bce <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019b9e:	69bb      	ldr	r3, [r7, #24]
 8019ba0:	6819      	ldr	r1, [r3, #0]
 8019ba2:	7dfa      	ldrb	r2, [r7, #23]
 8019ba4:	481f      	ldr	r0, [pc, #124]	@ (8019c24 <etharp_output+0x200>)
 8019ba6:	4613      	mov	r3, r2
 8019ba8:	005b      	lsls	r3, r3, #1
 8019baa:	4413      	add	r3, r2
 8019bac:	00db      	lsls	r3, r3, #3
 8019bae:	4403      	add	r3, r0
 8019bb0:	3304      	adds	r3, #4
 8019bb2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019bb4:	4299      	cmp	r1, r3
 8019bb6:	d10a      	bne.n	8019bce <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019bb8:	4a19      	ldr	r2, [pc, #100]	@ (8019c20 <etharp_output+0x1fc>)
 8019bba:	7dfb      	ldrb	r3, [r7, #23]
 8019bbc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019bbe:	7dfb      	ldrb	r3, [r7, #23]
 8019bc0:	461a      	mov	r2, r3
 8019bc2:	68b9      	ldr	r1, [r7, #8]
 8019bc4:	68f8      	ldr	r0, [r7, #12]
 8019bc6:	f7ff fe93 	bl	80198f0 <etharp_output_to_arp_index>
 8019bca:	4603      	mov	r3, r0
 8019bcc:	e018      	b.n	8019c00 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019bce:	7dfb      	ldrb	r3, [r7, #23]
 8019bd0:	3301      	adds	r3, #1
 8019bd2:	75fb      	strb	r3, [r7, #23]
 8019bd4:	7dfb      	ldrb	r3, [r7, #23]
 8019bd6:	2b09      	cmp	r3, #9
 8019bd8:	d9ca      	bls.n	8019b70 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019bda:	68ba      	ldr	r2, [r7, #8]
 8019bdc:	69b9      	ldr	r1, [r7, #24]
 8019bde:	68f8      	ldr	r0, [r7, #12]
 8019be0:	f000 f822 	bl	8019c28 <etharp_query>
 8019be4:	4603      	mov	r3, r0
 8019be6:	e00b      	b.n	8019c00 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8019bee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019bf2:	9300      	str	r3, [sp, #0]
 8019bf4:	69fb      	ldr	r3, [r7, #28]
 8019bf6:	68b9      	ldr	r1, [r7, #8]
 8019bf8:	68f8      	ldr	r0, [r7, #12]
 8019bfa:	f001 fe19 	bl	801b830 <ethernet_output>
 8019bfe:	4603      	mov	r3, r0
}
 8019c00:	4618      	mov	r0, r3
 8019c02:	3720      	adds	r7, #32
 8019c04:	46bd      	mov	sp, r7
 8019c06:	bd80      	pop	{r7, pc}
 8019c08:	08021cdc 	.word	0x08021cdc
 8019c0c:	08021e2c 	.word	0x08021e2c
 8019c10:	08021d54 	.word	0x08021d54
 8019c14:	08021e7c 	.word	0x08021e7c
 8019c18:	08021e1c 	.word	0x08021e1c
 8019c1c:	0806e19c 	.word	0x0806e19c
 8019c20:	20013ed0 	.word	0x20013ed0
 8019c24:	20013de0 	.word	0x20013de0

08019c28 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	b08c      	sub	sp, #48	@ 0x30
 8019c2c:	af02      	add	r7, sp, #8
 8019c2e:	60f8      	str	r0, [r7, #12]
 8019c30:	60b9      	str	r1, [r7, #8]
 8019c32:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	332a      	adds	r3, #42	@ 0x2a
 8019c38:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019c3a:	23ff      	movs	r3, #255	@ 0xff
 8019c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8019c40:	2300      	movs	r3, #0
 8019c42:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019c44:	68bb      	ldr	r3, [r7, #8]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	68f9      	ldr	r1, [r7, #12]
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f000 fed2 	bl	801a9f4 <ip4_addr_isbroadcast_u32>
 8019c50:	4603      	mov	r3, r0
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d10c      	bne.n	8019c70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019c56:	68bb      	ldr	r3, [r7, #8]
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019c5e:	2be0      	cmp	r3, #224	@ 0xe0
 8019c60:	d006      	beq.n	8019c70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019c62:	68bb      	ldr	r3, [r7, #8]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d003      	beq.n	8019c70 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019c68:	68bb      	ldr	r3, [r7, #8]
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d102      	bne.n	8019c76 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019c70:	f06f 030f 	mvn.w	r3, #15
 8019c74:	e101      	b.n	8019e7a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019c76:	68fa      	ldr	r2, [r7, #12]
 8019c78:	2101      	movs	r1, #1
 8019c7a:	68b8      	ldr	r0, [r7, #8]
 8019c7c:	f7ff fb20 	bl	80192c0 <etharp_find_entry>
 8019c80:	4603      	mov	r3, r0
 8019c82:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019c84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	da02      	bge.n	8019c92 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019c8c:	8a7b      	ldrh	r3, [r7, #18]
 8019c8e:	b25b      	sxtb	r3, r3
 8019c90:	e0f3      	b.n	8019e7a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019c92:	8a7b      	ldrh	r3, [r7, #18]
 8019c94:	2b7e      	cmp	r3, #126	@ 0x7e
 8019c96:	d906      	bls.n	8019ca6 <etharp_query+0x7e>
 8019c98:	4b7a      	ldr	r3, [pc, #488]	@ (8019e84 <etharp_query+0x25c>)
 8019c9a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8019c9e:	497a      	ldr	r1, [pc, #488]	@ (8019e88 <etharp_query+0x260>)
 8019ca0:	487a      	ldr	r0, [pc, #488]	@ (8019e8c <etharp_query+0x264>)
 8019ca2:	f002 fdc5 	bl	801c830 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019ca6:	8a7b      	ldrh	r3, [r7, #18]
 8019ca8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019caa:	7c7a      	ldrb	r2, [r7, #17]
 8019cac:	4978      	ldr	r1, [pc, #480]	@ (8019e90 <etharp_query+0x268>)
 8019cae:	4613      	mov	r3, r2
 8019cb0:	005b      	lsls	r3, r3, #1
 8019cb2:	4413      	add	r3, r2
 8019cb4:	00db      	lsls	r3, r3, #3
 8019cb6:	440b      	add	r3, r1
 8019cb8:	3314      	adds	r3, #20
 8019cba:	781b      	ldrb	r3, [r3, #0]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d115      	bne.n	8019cec <etharp_query+0xc4>
    is_new_entry = 1;
 8019cc0:	2301      	movs	r3, #1
 8019cc2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019cc4:	7c7a      	ldrb	r2, [r7, #17]
 8019cc6:	4972      	ldr	r1, [pc, #456]	@ (8019e90 <etharp_query+0x268>)
 8019cc8:	4613      	mov	r3, r2
 8019cca:	005b      	lsls	r3, r3, #1
 8019ccc:	4413      	add	r3, r2
 8019cce:	00db      	lsls	r3, r3, #3
 8019cd0:	440b      	add	r3, r1
 8019cd2:	3314      	adds	r3, #20
 8019cd4:	2201      	movs	r2, #1
 8019cd6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019cd8:	7c7a      	ldrb	r2, [r7, #17]
 8019cda:	496d      	ldr	r1, [pc, #436]	@ (8019e90 <etharp_query+0x268>)
 8019cdc:	4613      	mov	r3, r2
 8019cde:	005b      	lsls	r3, r3, #1
 8019ce0:	4413      	add	r3, r2
 8019ce2:	00db      	lsls	r3, r3, #3
 8019ce4:	440b      	add	r3, r1
 8019ce6:	3308      	adds	r3, #8
 8019ce8:	68fa      	ldr	r2, [r7, #12]
 8019cea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019cec:	7c7a      	ldrb	r2, [r7, #17]
 8019cee:	4968      	ldr	r1, [pc, #416]	@ (8019e90 <etharp_query+0x268>)
 8019cf0:	4613      	mov	r3, r2
 8019cf2:	005b      	lsls	r3, r3, #1
 8019cf4:	4413      	add	r3, r2
 8019cf6:	00db      	lsls	r3, r3, #3
 8019cf8:	440b      	add	r3, r1
 8019cfa:	3314      	adds	r3, #20
 8019cfc:	781b      	ldrb	r3, [r3, #0]
 8019cfe:	2b01      	cmp	r3, #1
 8019d00:	d011      	beq.n	8019d26 <etharp_query+0xfe>
 8019d02:	7c7a      	ldrb	r2, [r7, #17]
 8019d04:	4962      	ldr	r1, [pc, #392]	@ (8019e90 <etharp_query+0x268>)
 8019d06:	4613      	mov	r3, r2
 8019d08:	005b      	lsls	r3, r3, #1
 8019d0a:	4413      	add	r3, r2
 8019d0c:	00db      	lsls	r3, r3, #3
 8019d0e:	440b      	add	r3, r1
 8019d10:	3314      	adds	r3, #20
 8019d12:	781b      	ldrb	r3, [r3, #0]
 8019d14:	2b01      	cmp	r3, #1
 8019d16:	d806      	bhi.n	8019d26 <etharp_query+0xfe>
 8019d18:	4b5a      	ldr	r3, [pc, #360]	@ (8019e84 <etharp_query+0x25c>)
 8019d1a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8019d1e:	495d      	ldr	r1, [pc, #372]	@ (8019e94 <etharp_query+0x26c>)
 8019d20:	485a      	ldr	r0, [pc, #360]	@ (8019e8c <etharp_query+0x264>)
 8019d22:	f002 fd85 	bl	801c830 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019d26:	6a3b      	ldr	r3, [r7, #32]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d102      	bne.n	8019d32 <etharp_query+0x10a>
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d10c      	bne.n	8019d4c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019d32:	68b9      	ldr	r1, [r7, #8]
 8019d34:	68f8      	ldr	r0, [r7, #12]
 8019d36:	f000 f963 	bl	801a000 <etharp_request>
 8019d3a:	4603      	mov	r3, r0
 8019d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d102      	bne.n	8019d4c <etharp_query+0x124>
      return result;
 8019d46:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8019d4a:	e096      	b.n	8019e7a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d106      	bne.n	8019d60 <etharp_query+0x138>
 8019d52:	4b4c      	ldr	r3, [pc, #304]	@ (8019e84 <etharp_query+0x25c>)
 8019d54:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8019d58:	494f      	ldr	r1, [pc, #316]	@ (8019e98 <etharp_query+0x270>)
 8019d5a:	484c      	ldr	r0, [pc, #304]	@ (8019e8c <etharp_query+0x264>)
 8019d5c:	f002 fd68 	bl	801c830 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019d60:	7c7a      	ldrb	r2, [r7, #17]
 8019d62:	494b      	ldr	r1, [pc, #300]	@ (8019e90 <etharp_query+0x268>)
 8019d64:	4613      	mov	r3, r2
 8019d66:	005b      	lsls	r3, r3, #1
 8019d68:	4413      	add	r3, r2
 8019d6a:	00db      	lsls	r3, r3, #3
 8019d6c:	440b      	add	r3, r1
 8019d6e:	3314      	adds	r3, #20
 8019d70:	781b      	ldrb	r3, [r3, #0]
 8019d72:	2b01      	cmp	r3, #1
 8019d74:	d917      	bls.n	8019da6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019d76:	4a49      	ldr	r2, [pc, #292]	@ (8019e9c <etharp_query+0x274>)
 8019d78:	7c7b      	ldrb	r3, [r7, #17]
 8019d7a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019d7c:	7c7a      	ldrb	r2, [r7, #17]
 8019d7e:	4613      	mov	r3, r2
 8019d80:	005b      	lsls	r3, r3, #1
 8019d82:	4413      	add	r3, r2
 8019d84:	00db      	lsls	r3, r3, #3
 8019d86:	3308      	adds	r3, #8
 8019d88:	4a41      	ldr	r2, [pc, #260]	@ (8019e90 <etharp_query+0x268>)
 8019d8a:	4413      	add	r3, r2
 8019d8c:	3304      	adds	r3, #4
 8019d8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019d92:	9200      	str	r2, [sp, #0]
 8019d94:	697a      	ldr	r2, [r7, #20]
 8019d96:	6879      	ldr	r1, [r7, #4]
 8019d98:	68f8      	ldr	r0, [r7, #12]
 8019d9a:	f001 fd49 	bl	801b830 <ethernet_output>
 8019d9e:	4603      	mov	r3, r0
 8019da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019da4:	e067      	b.n	8019e76 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019da6:	7c7a      	ldrb	r2, [r7, #17]
 8019da8:	4939      	ldr	r1, [pc, #228]	@ (8019e90 <etharp_query+0x268>)
 8019daa:	4613      	mov	r3, r2
 8019dac:	005b      	lsls	r3, r3, #1
 8019dae:	4413      	add	r3, r2
 8019db0:	00db      	lsls	r3, r3, #3
 8019db2:	440b      	add	r3, r1
 8019db4:	3314      	adds	r3, #20
 8019db6:	781b      	ldrb	r3, [r3, #0]
 8019db8:	2b01      	cmp	r3, #1
 8019dba:	d15c      	bne.n	8019e76 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019dbc:	2300      	movs	r3, #0
 8019dbe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019dc4:	e01c      	b.n	8019e00 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019dc6:	69fb      	ldr	r3, [r7, #28]
 8019dc8:	895a      	ldrh	r2, [r3, #10]
 8019dca:	69fb      	ldr	r3, [r7, #28]
 8019dcc:	891b      	ldrh	r3, [r3, #8]
 8019dce:	429a      	cmp	r2, r3
 8019dd0:	d10a      	bne.n	8019de8 <etharp_query+0x1c0>
 8019dd2:	69fb      	ldr	r3, [r7, #28]
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d006      	beq.n	8019de8 <etharp_query+0x1c0>
 8019dda:	4b2a      	ldr	r3, [pc, #168]	@ (8019e84 <etharp_query+0x25c>)
 8019ddc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8019de0:	492f      	ldr	r1, [pc, #188]	@ (8019ea0 <etharp_query+0x278>)
 8019de2:	482a      	ldr	r0, [pc, #168]	@ (8019e8c <etharp_query+0x264>)
 8019de4:	f002 fd24 	bl	801c830 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019de8:	69fb      	ldr	r3, [r7, #28]
 8019dea:	7b1b      	ldrb	r3, [r3, #12]
 8019dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d002      	beq.n	8019dfa <etharp_query+0x1d2>
        copy_needed = 1;
 8019df4:	2301      	movs	r3, #1
 8019df6:	61bb      	str	r3, [r7, #24]
        break;
 8019df8:	e005      	b.n	8019e06 <etharp_query+0x1de>
      }
      p = p->next;
 8019dfa:	69fb      	ldr	r3, [r7, #28]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019e00:	69fb      	ldr	r3, [r7, #28]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d1df      	bne.n	8019dc6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019e06:	69bb      	ldr	r3, [r7, #24]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d007      	beq.n	8019e1c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019e0c:	687a      	ldr	r2, [r7, #4]
 8019e0e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8019e12:	200e      	movs	r0, #14
 8019e14:	f7f7 f982 	bl	801111c <pbuf_clone>
 8019e18:	61f8      	str	r0, [r7, #28]
 8019e1a:	e004      	b.n	8019e26 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019e20:	69f8      	ldr	r0, [r7, #28]
 8019e22:	f7f6 ff6d 	bl	8010d00 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019e26:	69fb      	ldr	r3, [r7, #28]
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d021      	beq.n	8019e70 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019e2c:	7c7a      	ldrb	r2, [r7, #17]
 8019e2e:	4918      	ldr	r1, [pc, #96]	@ (8019e90 <etharp_query+0x268>)
 8019e30:	4613      	mov	r3, r2
 8019e32:	005b      	lsls	r3, r3, #1
 8019e34:	4413      	add	r3, r2
 8019e36:	00db      	lsls	r3, r3, #3
 8019e38:	440b      	add	r3, r1
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d00a      	beq.n	8019e56 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019e40:	7c7a      	ldrb	r2, [r7, #17]
 8019e42:	4913      	ldr	r1, [pc, #76]	@ (8019e90 <etharp_query+0x268>)
 8019e44:	4613      	mov	r3, r2
 8019e46:	005b      	lsls	r3, r3, #1
 8019e48:	4413      	add	r3, r2
 8019e4a:	00db      	lsls	r3, r3, #3
 8019e4c:	440b      	add	r3, r1
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	4618      	mov	r0, r3
 8019e52:	f7f6 feaf 	bl	8010bb4 <pbuf_free>
      }
      arp_table[i].q = p;
 8019e56:	7c7a      	ldrb	r2, [r7, #17]
 8019e58:	490d      	ldr	r1, [pc, #52]	@ (8019e90 <etharp_query+0x268>)
 8019e5a:	4613      	mov	r3, r2
 8019e5c:	005b      	lsls	r3, r3, #1
 8019e5e:	4413      	add	r3, r2
 8019e60:	00db      	lsls	r3, r3, #3
 8019e62:	440b      	add	r3, r1
 8019e64:	69fa      	ldr	r2, [r7, #28]
 8019e66:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019e68:	2300      	movs	r3, #0
 8019e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019e6e:	e002      	b.n	8019e76 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019e70:	23ff      	movs	r3, #255	@ 0xff
 8019e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8019e76:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	3728      	adds	r7, #40	@ 0x28
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	bd80      	pop	{r7, pc}
 8019e82:	bf00      	nop
 8019e84:	08021cdc 	.word	0x08021cdc
 8019e88:	08021e88 	.word	0x08021e88
 8019e8c:	08021d54 	.word	0x08021d54
 8019e90:	20013de0 	.word	0x20013de0
 8019e94:	08021e98 	.word	0x08021e98
 8019e98:	08021e7c 	.word	0x08021e7c
 8019e9c:	20013ed0 	.word	0x20013ed0
 8019ea0:	08021ec0 	.word	0x08021ec0

08019ea4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019ea4:	b580      	push	{r7, lr}
 8019ea6:	b08a      	sub	sp, #40	@ 0x28
 8019ea8:	af02      	add	r7, sp, #8
 8019eaa:	60f8      	str	r0, [r7, #12]
 8019eac:	60b9      	str	r1, [r7, #8]
 8019eae:	607a      	str	r2, [r7, #4]
 8019eb0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019eb2:	2300      	movs	r3, #0
 8019eb4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d106      	bne.n	8019eca <etharp_raw+0x26>
 8019ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8019fa8 <etharp_raw+0x104>)
 8019ebe:	f240 4257 	movw	r2, #1111	@ 0x457
 8019ec2:	493a      	ldr	r1, [pc, #232]	@ (8019fac <etharp_raw+0x108>)
 8019ec4:	483a      	ldr	r0, [pc, #232]	@ (8019fb0 <etharp_raw+0x10c>)
 8019ec6:	f002 fcb3 	bl	801c830 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019eca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019ece:	211c      	movs	r1, #28
 8019ed0:	200e      	movs	r0, #14
 8019ed2:	f7f6 fb87 	bl	80105e4 <pbuf_alloc>
 8019ed6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019ed8:	69bb      	ldr	r3, [r7, #24]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d102      	bne.n	8019ee4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019ede:	f04f 33ff 	mov.w	r3, #4294967295
 8019ee2:	e05d      	b.n	8019fa0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019ee4:	69bb      	ldr	r3, [r7, #24]
 8019ee6:	895b      	ldrh	r3, [r3, #10]
 8019ee8:	2b1b      	cmp	r3, #27
 8019eea:	d806      	bhi.n	8019efa <etharp_raw+0x56>
 8019eec:	4b2e      	ldr	r3, [pc, #184]	@ (8019fa8 <etharp_raw+0x104>)
 8019eee:	f240 4262 	movw	r2, #1122	@ 0x462
 8019ef2:	4930      	ldr	r1, [pc, #192]	@ (8019fb4 <etharp_raw+0x110>)
 8019ef4:	482e      	ldr	r0, [pc, #184]	@ (8019fb0 <etharp_raw+0x10c>)
 8019ef6:	f002 fc9b 	bl	801c830 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019efa:	69bb      	ldr	r3, [r7, #24]
 8019efc:	685b      	ldr	r3, [r3, #4]
 8019efe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019f00:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019f02:	4618      	mov	r0, r3
 8019f04:	f7f5 f934 	bl	800f170 <lwip_htons>
 8019f08:	4603      	mov	r3, r0
 8019f0a:	461a      	mov	r2, r3
 8019f0c:	697b      	ldr	r3, [r7, #20]
 8019f0e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019f16:	2b06      	cmp	r3, #6
 8019f18:	d006      	beq.n	8019f28 <etharp_raw+0x84>
 8019f1a:	4b23      	ldr	r3, [pc, #140]	@ (8019fa8 <etharp_raw+0x104>)
 8019f1c:	f240 4269 	movw	r2, #1129	@ 0x469
 8019f20:	4925      	ldr	r1, [pc, #148]	@ (8019fb8 <etharp_raw+0x114>)
 8019f22:	4823      	ldr	r0, [pc, #140]	@ (8019fb0 <etharp_raw+0x10c>)
 8019f24:	f002 fc84 	bl	801c830 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019f28:	697b      	ldr	r3, [r7, #20]
 8019f2a:	3308      	adds	r3, #8
 8019f2c:	2206      	movs	r2, #6
 8019f2e:	6839      	ldr	r1, [r7, #0]
 8019f30:	4618      	mov	r0, r3
 8019f32:	f002 fe9c 	bl	801cc6e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019f36:	697b      	ldr	r3, [r7, #20]
 8019f38:	3312      	adds	r3, #18
 8019f3a:	2206      	movs	r2, #6
 8019f3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019f3e:	4618      	mov	r0, r3
 8019f40:	f002 fe95 	bl	801cc6e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019f44:	697b      	ldr	r3, [r7, #20]
 8019f46:	330e      	adds	r3, #14
 8019f48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019f4a:	6812      	ldr	r2, [r2, #0]
 8019f4c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019f4e:	697b      	ldr	r3, [r7, #20]
 8019f50:	3318      	adds	r3, #24
 8019f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019f54:	6812      	ldr	r2, [r2, #0]
 8019f56:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019f58:	697b      	ldr	r3, [r7, #20]
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	701a      	strb	r2, [r3, #0]
 8019f5e:	2200      	movs	r2, #0
 8019f60:	f042 0201 	orr.w	r2, r2, #1
 8019f64:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019f66:	697b      	ldr	r3, [r7, #20]
 8019f68:	2200      	movs	r2, #0
 8019f6a:	f042 0208 	orr.w	r2, r2, #8
 8019f6e:	709a      	strb	r2, [r3, #2]
 8019f70:	2200      	movs	r2, #0
 8019f72:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019f74:	697b      	ldr	r3, [r7, #20]
 8019f76:	2206      	movs	r2, #6
 8019f78:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019f7a:	697b      	ldr	r3, [r7, #20]
 8019f7c:	2204      	movs	r2, #4
 8019f7e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019f80:	f640 0306 	movw	r3, #2054	@ 0x806
 8019f84:	9300      	str	r3, [sp, #0]
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	68ba      	ldr	r2, [r7, #8]
 8019f8a:	69b9      	ldr	r1, [r7, #24]
 8019f8c:	68f8      	ldr	r0, [r7, #12]
 8019f8e:	f001 fc4f 	bl	801b830 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019f92:	69b8      	ldr	r0, [r7, #24]
 8019f94:	f7f6 fe0e 	bl	8010bb4 <pbuf_free>
  p = NULL;
 8019f98:	2300      	movs	r3, #0
 8019f9a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019f9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	3720      	adds	r7, #32
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	bd80      	pop	{r7, pc}
 8019fa8:	08021cdc 	.word	0x08021cdc
 8019fac:	08021e2c 	.word	0x08021e2c
 8019fb0:	08021d54 	.word	0x08021d54
 8019fb4:	08021edc 	.word	0x08021edc
 8019fb8:	08021f10 	.word	0x08021f10

08019fbc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	b088      	sub	sp, #32
 8019fc0:	af04      	add	r7, sp, #16
 8019fc2:	60f8      	str	r0, [r7, #12]
 8019fc4:	60b9      	str	r1, [r7, #8]
 8019fc6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019fd8:	2201      	movs	r2, #1
 8019fda:	9203      	str	r2, [sp, #12]
 8019fdc:	68ba      	ldr	r2, [r7, #8]
 8019fde:	9202      	str	r2, [sp, #8]
 8019fe0:	4a06      	ldr	r2, [pc, #24]	@ (8019ffc <etharp_request_dst+0x40>)
 8019fe2:	9201      	str	r2, [sp, #4]
 8019fe4:	9300      	str	r3, [sp, #0]
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	687a      	ldr	r2, [r7, #4]
 8019fea:	68f8      	ldr	r0, [r7, #12]
 8019fec:	f7ff ff5a 	bl	8019ea4 <etharp_raw>
 8019ff0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	3710      	adds	r7, #16
 8019ff6:	46bd      	mov	sp, r7
 8019ff8:	bd80      	pop	{r7, pc}
 8019ffa:	bf00      	nop
 8019ffc:	0806e1a4 	.word	0x0806e1a4

0801a000 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a000:	b580      	push	{r7, lr}
 801a002:	b082      	sub	sp, #8
 801a004:	af00      	add	r7, sp, #0
 801a006:	6078      	str	r0, [r7, #4]
 801a008:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a00a:	4a05      	ldr	r2, [pc, #20]	@ (801a020 <etharp_request+0x20>)
 801a00c:	6839      	ldr	r1, [r7, #0]
 801a00e:	6878      	ldr	r0, [r7, #4]
 801a010:	f7ff ffd4 	bl	8019fbc <etharp_request_dst>
 801a014:	4603      	mov	r3, r0
}
 801a016:	4618      	mov	r0, r3
 801a018:	3708      	adds	r7, #8
 801a01a:	46bd      	mov	sp, r7
 801a01c:	bd80      	pop	{r7, pc}
 801a01e:	bf00      	nop
 801a020:	0806e19c 	.word	0x0806e19c

0801a024 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b08e      	sub	sp, #56	@ 0x38
 801a028:	af04      	add	r7, sp, #16
 801a02a:	6078      	str	r0, [r7, #4]
 801a02c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a02e:	4b8e      	ldr	r3, [pc, #568]	@ (801a268 <icmp_input+0x244>)
 801a030:	689b      	ldr	r3, [r3, #8]
 801a032:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801a034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a036:	781b      	ldrb	r3, [r3, #0]
 801a038:	f003 030f 	and.w	r3, r3, #15
 801a03c:	b2db      	uxtb	r3, r3
 801a03e:	009b      	lsls	r3, r3, #2
 801a040:	b2db      	uxtb	r3, r3
 801a042:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801a044:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a046:	2b13      	cmp	r3, #19
 801a048:	f240 80f6 	bls.w	801a238 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	895b      	ldrh	r3, [r3, #10]
 801a050:	2b03      	cmp	r3, #3
 801a052:	f240 80f3 	bls.w	801a23c <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	685b      	ldr	r3, [r3, #4]
 801a05a:	781b      	ldrb	r3, [r3, #0]
 801a05c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	685b      	ldr	r3, [r3, #4]
 801a064:	785b      	ldrb	r3, [r3, #1]
 801a066:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a06a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801a06e:	2b00      	cmp	r3, #0
 801a070:	f000 80db 	beq.w	801a22a <icmp_input+0x206>
 801a074:	2b08      	cmp	r3, #8
 801a076:	f040 80db 	bne.w	801a230 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801a07a:	4b7c      	ldr	r3, [pc, #496]	@ (801a26c <icmp_input+0x248>)
 801a07c:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a07e:	4b7a      	ldr	r3, [pc, #488]	@ (801a268 <icmp_input+0x244>)
 801a080:	695b      	ldr	r3, [r3, #20]
 801a082:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a086:	2be0      	cmp	r3, #224	@ 0xe0
 801a088:	f000 80df 	beq.w	801a24a <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a08c:	4b76      	ldr	r3, [pc, #472]	@ (801a268 <icmp_input+0x244>)
 801a08e:	695b      	ldr	r3, [r3, #20]
 801a090:	4a75      	ldr	r2, [pc, #468]	@ (801a268 <icmp_input+0x244>)
 801a092:	6812      	ldr	r2, [r2, #0]
 801a094:	4611      	mov	r1, r2
 801a096:	4618      	mov	r0, r3
 801a098:	f000 fcac 	bl	801a9f4 <ip4_addr_isbroadcast_u32>
 801a09c:	4603      	mov	r3, r0
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	f040 80d5 	bne.w	801a24e <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	891b      	ldrh	r3, [r3, #8]
 801a0a8:	2b07      	cmp	r3, #7
 801a0aa:	f240 80c9 	bls.w	801a240 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801a0ae:	6878      	ldr	r0, [r7, #4]
 801a0b0:	f7f5 f9b8 	bl	800f424 <inet_chksum_pbuf>
 801a0b4:	4603      	mov	r3, r0
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d003      	beq.n	801a0c2 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801a0ba:	6878      	ldr	r0, [r7, #4]
 801a0bc:	f7f6 fd7a 	bl	8010bb4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801a0c0:	e0ce      	b.n	801a260 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a0c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a0c4:	330e      	adds	r3, #14
 801a0c6:	4619      	mov	r1, r3
 801a0c8:	6878      	ldr	r0, [r7, #4]
 801a0ca:	f7f6 fcdd 	bl	8010a88 <pbuf_add_header>
 801a0ce:	4603      	mov	r3, r0
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d04b      	beq.n	801a16c <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	891a      	ldrh	r2, [r3, #8]
 801a0d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a0da:	4413      	add	r3, r2
 801a0dc:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	891b      	ldrh	r3, [r3, #8]
 801a0e2:	8b7a      	ldrh	r2, [r7, #26]
 801a0e4:	429a      	cmp	r2, r3
 801a0e6:	f0c0 80b4 	bcc.w	801a252 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801a0ea:	8b7b      	ldrh	r3, [r7, #26]
 801a0ec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a0f0:	4619      	mov	r1, r3
 801a0f2:	200e      	movs	r0, #14
 801a0f4:	f7f6 fa76 	bl	80105e4 <pbuf_alloc>
 801a0f8:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801a0fa:	697b      	ldr	r3, [r7, #20]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	f000 80aa 	beq.w	801a256 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a102:	697b      	ldr	r3, [r7, #20]
 801a104:	895b      	ldrh	r3, [r3, #10]
 801a106:	461a      	mov	r2, r3
 801a108:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a10a:	3308      	adds	r3, #8
 801a10c:	429a      	cmp	r2, r3
 801a10e:	d203      	bcs.n	801a118 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801a110:	6978      	ldr	r0, [r7, #20]
 801a112:	f7f6 fd4f 	bl	8010bb4 <pbuf_free>
          goto icmperr;
 801a116:	e09f      	b.n	801a258 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801a118:	697b      	ldr	r3, [r7, #20]
 801a11a:	685b      	ldr	r3, [r3, #4]
 801a11c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801a11e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a120:	4618      	mov	r0, r3
 801a122:	f002 fda4 	bl	801cc6e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801a126:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a128:	4619      	mov	r1, r3
 801a12a:	6978      	ldr	r0, [r7, #20]
 801a12c:	f7f6 fcbc 	bl	8010aa8 <pbuf_remove_header>
 801a130:	4603      	mov	r3, r0
 801a132:	2b00      	cmp	r3, #0
 801a134:	d009      	beq.n	801a14a <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a136:	4b4e      	ldr	r3, [pc, #312]	@ (801a270 <icmp_input+0x24c>)
 801a138:	22b6      	movs	r2, #182	@ 0xb6
 801a13a:	494e      	ldr	r1, [pc, #312]	@ (801a274 <icmp_input+0x250>)
 801a13c:	484e      	ldr	r0, [pc, #312]	@ (801a278 <icmp_input+0x254>)
 801a13e:	f002 fb77 	bl	801c830 <iprintf>
          pbuf_free(r);
 801a142:	6978      	ldr	r0, [r7, #20]
 801a144:	f7f6 fd36 	bl	8010bb4 <pbuf_free>
          goto icmperr;
 801a148:	e086      	b.n	801a258 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801a14a:	6879      	ldr	r1, [r7, #4]
 801a14c:	6978      	ldr	r0, [r7, #20]
 801a14e:	f7f6 fe65 	bl	8010e1c <pbuf_copy>
 801a152:	4603      	mov	r3, r0
 801a154:	2b00      	cmp	r3, #0
 801a156:	d003      	beq.n	801a160 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801a158:	6978      	ldr	r0, [r7, #20]
 801a15a:	f7f6 fd2b 	bl	8010bb4 <pbuf_free>
          goto icmperr;
 801a15e:	e07b      	b.n	801a258 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 801a160:	6878      	ldr	r0, [r7, #4]
 801a162:	f7f6 fd27 	bl	8010bb4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801a166:	697b      	ldr	r3, [r7, #20]
 801a168:	607b      	str	r3, [r7, #4]
 801a16a:	e00f      	b.n	801a18c <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a16c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a16e:	330e      	adds	r3, #14
 801a170:	4619      	mov	r1, r3
 801a172:	6878      	ldr	r0, [r7, #4]
 801a174:	f7f6 fc98 	bl	8010aa8 <pbuf_remove_header>
 801a178:	4603      	mov	r3, r0
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d006      	beq.n	801a18c <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a17e:	4b3c      	ldr	r3, [pc, #240]	@ (801a270 <icmp_input+0x24c>)
 801a180:	22c7      	movs	r2, #199	@ 0xc7
 801a182:	493e      	ldr	r1, [pc, #248]	@ (801a27c <icmp_input+0x258>)
 801a184:	483c      	ldr	r0, [pc, #240]	@ (801a278 <icmp_input+0x254>)
 801a186:	f002 fb53 	bl	801c830 <iprintf>
          goto icmperr;
 801a18a:	e065      	b.n	801a258 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	685b      	ldr	r3, [r3, #4]
 801a190:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801a192:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a194:	4619      	mov	r1, r3
 801a196:	6878      	ldr	r0, [r7, #4]
 801a198:	f7f6 fc76 	bl	8010a88 <pbuf_add_header>
 801a19c:	4603      	mov	r3, r0
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d145      	bne.n	801a22e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	685b      	ldr	r3, [r3, #4]
 801a1a6:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801a1a8:	69fb      	ldr	r3, [r7, #28]
 801a1aa:	681a      	ldr	r2, [r3, #0]
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a1b0:	4b2d      	ldr	r3, [pc, #180]	@ (801a268 <icmp_input+0x244>)
 801a1b2:	691a      	ldr	r2, [r3, #16]
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a1b8:	693b      	ldr	r3, [r7, #16]
 801a1ba:	2200      	movs	r2, #0
 801a1bc:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801a1be:	693b      	ldr	r3, [r7, #16]
 801a1c0:	885b      	ldrh	r3, [r3, #2]
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801a1c8:	4293      	cmp	r3, r2
 801a1ca:	d907      	bls.n	801a1dc <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801a1cc:	693b      	ldr	r3, [r7, #16]
 801a1ce:	885b      	ldrh	r3, [r3, #2]
 801a1d0:	b29b      	uxth	r3, r3
 801a1d2:	3309      	adds	r3, #9
 801a1d4:	b29a      	uxth	r2, r3
 801a1d6:	693b      	ldr	r3, [r7, #16]
 801a1d8:	805a      	strh	r2, [r3, #2]
 801a1da:	e006      	b.n	801a1ea <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801a1dc:	693b      	ldr	r3, [r7, #16]
 801a1de:	885b      	ldrh	r3, [r3, #2]
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	3308      	adds	r3, #8
 801a1e4:	b29a      	uxth	r2, r3
 801a1e6:	693b      	ldr	r3, [r7, #16]
 801a1e8:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	22ff      	movs	r2, #255	@ 0xff
 801a1ee:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	729a      	strb	r2, [r3, #10]
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801a1fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a1fc:	4619      	mov	r1, r3
 801a1fe:	68f8      	ldr	r0, [r7, #12]
 801a200:	f7f5 f8fe 	bl	800f400 <inet_chksum>
 801a204:	4603      	mov	r3, r0
 801a206:	461a      	mov	r2, r3
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a20c:	683b      	ldr	r3, [r7, #0]
 801a20e:	9302      	str	r3, [sp, #8]
 801a210:	2301      	movs	r3, #1
 801a212:	9301      	str	r3, [sp, #4]
 801a214:	2300      	movs	r3, #0
 801a216:	9300      	str	r3, [sp, #0]
 801a218:	23ff      	movs	r3, #255	@ 0xff
 801a21a:	2200      	movs	r2, #0
 801a21c:	69f9      	ldr	r1, [r7, #28]
 801a21e:	6878      	ldr	r0, [r7, #4]
 801a220:	f000 faaa 	bl	801a778 <ip4_output_if>
 801a224:	4603      	mov	r3, r0
 801a226:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801a228:	e001      	b.n	801a22e <icmp_input+0x20a>
      break;
 801a22a:	bf00      	nop
 801a22c:	e000      	b.n	801a230 <icmp_input+0x20c>
      break;
 801a22e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a230:	6878      	ldr	r0, [r7, #4]
 801a232:	f7f6 fcbf 	bl	8010bb4 <pbuf_free>
  return;
 801a236:	e013      	b.n	801a260 <icmp_input+0x23c>
    goto lenerr;
 801a238:	bf00      	nop
 801a23a:	e002      	b.n	801a242 <icmp_input+0x21e>
    goto lenerr;
 801a23c:	bf00      	nop
 801a23e:	e000      	b.n	801a242 <icmp_input+0x21e>
        goto lenerr;
 801a240:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a242:	6878      	ldr	r0, [r7, #4]
 801a244:	f7f6 fcb6 	bl	8010bb4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a248:	e00a      	b.n	801a260 <icmp_input+0x23c>
        goto icmperr;
 801a24a:	bf00      	nop
 801a24c:	e004      	b.n	801a258 <icmp_input+0x234>
        goto icmperr;
 801a24e:	bf00      	nop
 801a250:	e002      	b.n	801a258 <icmp_input+0x234>
          goto icmperr;
 801a252:	bf00      	nop
 801a254:	e000      	b.n	801a258 <icmp_input+0x234>
          goto icmperr;
 801a256:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a258:	6878      	ldr	r0, [r7, #4]
 801a25a:	f7f6 fcab 	bl	8010bb4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a25e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a260:	3728      	adds	r7, #40	@ 0x28
 801a262:	46bd      	mov	sp, r7
 801a264:	bd80      	pop	{r7, pc}
 801a266:	bf00      	nop
 801a268:	2000a2d4 	.word	0x2000a2d4
 801a26c:	2000a2e8 	.word	0x2000a2e8
 801a270:	08021f54 	.word	0x08021f54
 801a274:	08021f8c 	.word	0x08021f8c
 801a278:	08021fc4 	.word	0x08021fc4
 801a27c:	08021fec 	.word	0x08021fec

0801a280 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a280:	b580      	push	{r7, lr}
 801a282:	b082      	sub	sp, #8
 801a284:	af00      	add	r7, sp, #0
 801a286:	6078      	str	r0, [r7, #4]
 801a288:	460b      	mov	r3, r1
 801a28a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a28c:	78fb      	ldrb	r3, [r7, #3]
 801a28e:	461a      	mov	r2, r3
 801a290:	2103      	movs	r1, #3
 801a292:	6878      	ldr	r0, [r7, #4]
 801a294:	f000 f814 	bl	801a2c0 <icmp_send_response>
}
 801a298:	bf00      	nop
 801a29a:	3708      	adds	r7, #8
 801a29c:	46bd      	mov	sp, r7
 801a29e:	bd80      	pop	{r7, pc}

0801a2a0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a2a0:	b580      	push	{r7, lr}
 801a2a2:	b082      	sub	sp, #8
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	6078      	str	r0, [r7, #4]
 801a2a8:	460b      	mov	r3, r1
 801a2aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a2ac:	78fb      	ldrb	r3, [r7, #3]
 801a2ae:	461a      	mov	r2, r3
 801a2b0:	210b      	movs	r1, #11
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f000 f804 	bl	801a2c0 <icmp_send_response>
}
 801a2b8:	bf00      	nop
 801a2ba:	3708      	adds	r7, #8
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	bd80      	pop	{r7, pc}

0801a2c0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b08c      	sub	sp, #48	@ 0x30
 801a2c4:	af04      	add	r7, sp, #16
 801a2c6:	6078      	str	r0, [r7, #4]
 801a2c8:	460b      	mov	r3, r1
 801a2ca:	70fb      	strb	r3, [r7, #3]
 801a2cc:	4613      	mov	r3, r2
 801a2ce:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a2d0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a2d4:	2124      	movs	r1, #36	@ 0x24
 801a2d6:	2022      	movs	r0, #34	@ 0x22
 801a2d8:	f7f6 f984 	bl	80105e4 <pbuf_alloc>
 801a2dc:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801a2de:	69bb      	ldr	r3, [r7, #24]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d056      	beq.n	801a392 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a2e4:	69bb      	ldr	r3, [r7, #24]
 801a2e6:	895b      	ldrh	r3, [r3, #10]
 801a2e8:	2b23      	cmp	r3, #35	@ 0x23
 801a2ea:	d806      	bhi.n	801a2fa <icmp_send_response+0x3a>
 801a2ec:	4b2b      	ldr	r3, [pc, #172]	@ (801a39c <icmp_send_response+0xdc>)
 801a2ee:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801a2f2:	492b      	ldr	r1, [pc, #172]	@ (801a3a0 <icmp_send_response+0xe0>)
 801a2f4:	482b      	ldr	r0, [pc, #172]	@ (801a3a4 <icmp_send_response+0xe4>)
 801a2f6:	f002 fa9b 	bl	801c830 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	685b      	ldr	r3, [r3, #4]
 801a2fe:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a300:	69bb      	ldr	r3, [r7, #24]
 801a302:	685b      	ldr	r3, [r3, #4]
 801a304:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 801a306:	693b      	ldr	r3, [r7, #16]
 801a308:	78fa      	ldrb	r2, [r7, #3]
 801a30a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a30c:	693b      	ldr	r3, [r7, #16]
 801a30e:	78ba      	ldrb	r2, [r7, #2]
 801a310:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a312:	693b      	ldr	r3, [r7, #16]
 801a314:	2200      	movs	r2, #0
 801a316:	711a      	strb	r2, [r3, #4]
 801a318:	2200      	movs	r2, #0
 801a31a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a31c:	693b      	ldr	r3, [r7, #16]
 801a31e:	2200      	movs	r2, #0
 801a320:	719a      	strb	r2, [r3, #6]
 801a322:	2200      	movs	r2, #0
 801a324:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a326:	69bb      	ldr	r3, [r7, #24]
 801a328:	685b      	ldr	r3, [r3, #4]
 801a32a:	f103 0008 	add.w	r0, r3, #8
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	685b      	ldr	r3, [r3, #4]
 801a332:	221c      	movs	r2, #28
 801a334:	4619      	mov	r1, r3
 801a336:	f002 fc9a 	bl	801cc6e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a33a:	697b      	ldr	r3, [r7, #20]
 801a33c:	68db      	ldr	r3, [r3, #12]
 801a33e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a340:	f107 030c 	add.w	r3, r7, #12
 801a344:	4618      	mov	r0, r3
 801a346:	f000 f82f 	bl	801a3a8 <ip4_route>
 801a34a:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 801a34c:	69fb      	ldr	r3, [r7, #28]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d01b      	beq.n	801a38a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a352:	693b      	ldr	r3, [r7, #16]
 801a354:	2200      	movs	r2, #0
 801a356:	709a      	strb	r2, [r3, #2]
 801a358:	2200      	movs	r2, #0
 801a35a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801a35c:	69bb      	ldr	r3, [r7, #24]
 801a35e:	895b      	ldrh	r3, [r3, #10]
 801a360:	4619      	mov	r1, r3
 801a362:	6938      	ldr	r0, [r7, #16]
 801a364:	f7f5 f84c 	bl	800f400 <inet_chksum>
 801a368:	4603      	mov	r3, r0
 801a36a:	461a      	mov	r2, r3
 801a36c:	693b      	ldr	r3, [r7, #16]
 801a36e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a370:	f107 020c 	add.w	r2, r7, #12
 801a374:	69fb      	ldr	r3, [r7, #28]
 801a376:	9302      	str	r3, [sp, #8]
 801a378:	2301      	movs	r3, #1
 801a37a:	9301      	str	r3, [sp, #4]
 801a37c:	2300      	movs	r3, #0
 801a37e:	9300      	str	r3, [sp, #0]
 801a380:	23ff      	movs	r3, #255	@ 0xff
 801a382:	2100      	movs	r1, #0
 801a384:	69b8      	ldr	r0, [r7, #24]
 801a386:	f000 f9f7 	bl	801a778 <ip4_output_if>
  }
  pbuf_free(q);
 801a38a:	69b8      	ldr	r0, [r7, #24]
 801a38c:	f7f6 fc12 	bl	8010bb4 <pbuf_free>
 801a390:	e000      	b.n	801a394 <icmp_send_response+0xd4>
    return;
 801a392:	bf00      	nop
}
 801a394:	3720      	adds	r7, #32
 801a396:	46bd      	mov	sp, r7
 801a398:	bd80      	pop	{r7, pc}
 801a39a:	bf00      	nop
 801a39c:	08021f54 	.word	0x08021f54
 801a3a0:	08022020 	.word	0x08022020
 801a3a4:	08021fc4 	.word	0x08021fc4

0801a3a8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a3a8:	b480      	push	{r7}
 801a3aa:	b085      	sub	sp, #20
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801a3b0:	4b33      	ldr	r3, [pc, #204]	@ (801a480 <ip4_route+0xd8>)
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	60fb      	str	r3, [r7, #12]
 801a3b6:	e036      	b.n	801a426 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a3be:	f003 0301 	and.w	r3, r3, #1
 801a3c2:	b2db      	uxtb	r3, r3
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d02b      	beq.n	801a420 <ip4_route+0x78>
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a3ce:	089b      	lsrs	r3, r3, #2
 801a3d0:	f003 0301 	and.w	r3, r3, #1
 801a3d4:	b2db      	uxtb	r3, r3
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d022      	beq.n	801a420 <ip4_route+0x78>
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	3304      	adds	r3, #4
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d01d      	beq.n	801a420 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	681a      	ldr	r2, [r3, #0]
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	3304      	adds	r3, #4
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	405a      	eors	r2, r3
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	3308      	adds	r3, #8
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	4013      	ands	r3, r2
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d101      	bne.n	801a400 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	e038      	b.n	801a472 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a406:	f003 0302 	and.w	r3, r3, #2
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d108      	bne.n	801a420 <ip4_route+0x78>
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681a      	ldr	r2, [r3, #0]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	330c      	adds	r3, #12
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	429a      	cmp	r2, r3
 801a41a:	d101      	bne.n	801a420 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	e028      	b.n	801a472 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	60fb      	str	r3, [r7, #12]
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d1c5      	bne.n	801a3b8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a42c:	4b15      	ldr	r3, [pc, #84]	@ (801a484 <ip4_route+0xdc>)
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d01a      	beq.n	801a46a <ip4_route+0xc2>
 801a434:	4b13      	ldr	r3, [pc, #76]	@ (801a484 <ip4_route+0xdc>)
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a43c:	f003 0301 	and.w	r3, r3, #1
 801a440:	2b00      	cmp	r3, #0
 801a442:	d012      	beq.n	801a46a <ip4_route+0xc2>
 801a444:	4b0f      	ldr	r3, [pc, #60]	@ (801a484 <ip4_route+0xdc>)
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a44c:	f003 0304 	and.w	r3, r3, #4
 801a450:	2b00      	cmp	r3, #0
 801a452:	d00a      	beq.n	801a46a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a454:	4b0b      	ldr	r3, [pc, #44]	@ (801a484 <ip4_route+0xdc>)
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	3304      	adds	r3, #4
 801a45a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d004      	beq.n	801a46a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	b2db      	uxtb	r3, r3
 801a466:	2b7f      	cmp	r3, #127	@ 0x7f
 801a468:	d101      	bne.n	801a46e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a46a:	2300      	movs	r3, #0
 801a46c:	e001      	b.n	801a472 <ip4_route+0xca>
  }

  return netif_default;
 801a46e:	4b05      	ldr	r3, [pc, #20]	@ (801a484 <ip4_route+0xdc>)
 801a470:	681b      	ldr	r3, [r3, #0]
}
 801a472:	4618      	mov	r0, r3
 801a474:	3714      	adds	r7, #20
 801a476:	46bd      	mov	sp, r7
 801a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a47c:	4770      	bx	lr
 801a47e:	bf00      	nop
 801a480:	20013d3c 	.word	0x20013d3c
 801a484:	20013d40 	.word	0x20013d40

0801a488 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b082      	sub	sp, #8
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a496:	f003 0301 	and.w	r3, r3, #1
 801a49a:	b2db      	uxtb	r3, r3
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d016      	beq.n	801a4ce <ip4_input_accept+0x46>
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	3304      	adds	r3, #4
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d011      	beq.n	801a4ce <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a4aa:	4b0b      	ldr	r3, [pc, #44]	@ (801a4d8 <ip4_input_accept+0x50>)
 801a4ac:	695a      	ldr	r2, [r3, #20]
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	3304      	adds	r3, #4
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	429a      	cmp	r2, r3
 801a4b6:	d008      	beq.n	801a4ca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a4b8:	4b07      	ldr	r3, [pc, #28]	@ (801a4d8 <ip4_input_accept+0x50>)
 801a4ba:	695b      	ldr	r3, [r3, #20]
 801a4bc:	6879      	ldr	r1, [r7, #4]
 801a4be:	4618      	mov	r0, r3
 801a4c0:	f000 fa98 	bl	801a9f4 <ip4_addr_isbroadcast_u32>
 801a4c4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d001      	beq.n	801a4ce <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a4ca:	2301      	movs	r3, #1
 801a4cc:	e000      	b.n	801a4d0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a4ce:	2300      	movs	r3, #0
}
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	3708      	adds	r7, #8
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	bd80      	pop	{r7, pc}
 801a4d8:	2000a2d4 	.word	0x2000a2d4

0801a4dc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a4dc:	b580      	push	{r7, lr}
 801a4de:	b088      	sub	sp, #32
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	6078      	str	r0, [r7, #4]
 801a4e4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801a4e6:	2301      	movs	r3, #1
 801a4e8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	685b      	ldr	r3, [r3, #4]
 801a4ee:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801a4f0:	693b      	ldr	r3, [r7, #16]
 801a4f2:	781b      	ldrb	r3, [r3, #0]
 801a4f4:	091b      	lsrs	r3, r3, #4
 801a4f6:	b2db      	uxtb	r3, r3
 801a4f8:	2b04      	cmp	r3, #4
 801a4fa:	d004      	beq.n	801a506 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a4fc:	6878      	ldr	r0, [r7, #4]
 801a4fe:	f7f6 fb59 	bl	8010bb4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a502:	2300      	movs	r3, #0
 801a504:	e130      	b.n	801a768 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a506:	693b      	ldr	r3, [r7, #16]
 801a508:	781b      	ldrb	r3, [r3, #0]
 801a50a:	f003 030f 	and.w	r3, r3, #15
 801a50e:	b2db      	uxtb	r3, r3
 801a510:	009b      	lsls	r3, r3, #2
 801a512:	b2db      	uxtb	r3, r3
 801a514:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a516:	693b      	ldr	r3, [r7, #16]
 801a518:	885b      	ldrh	r3, [r3, #2]
 801a51a:	b29b      	uxth	r3, r3
 801a51c:	4618      	mov	r0, r3
 801a51e:	f7f4 fe27 	bl	800f170 <lwip_htons>
 801a522:	4603      	mov	r3, r0
 801a524:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	891b      	ldrh	r3, [r3, #8]
 801a52a:	89ba      	ldrh	r2, [r7, #12]
 801a52c:	429a      	cmp	r2, r3
 801a52e:	d204      	bcs.n	801a53a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801a530:	89bb      	ldrh	r3, [r7, #12]
 801a532:	4619      	mov	r1, r3
 801a534:	6878      	ldr	r0, [r7, #4]
 801a536:	f7f6 f9b7 	bl	80108a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	895b      	ldrh	r3, [r3, #10]
 801a53e:	89fa      	ldrh	r2, [r7, #14]
 801a540:	429a      	cmp	r2, r3
 801a542:	d807      	bhi.n	801a554 <ip4_input+0x78>
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	891b      	ldrh	r3, [r3, #8]
 801a548:	89ba      	ldrh	r2, [r7, #12]
 801a54a:	429a      	cmp	r2, r3
 801a54c:	d802      	bhi.n	801a554 <ip4_input+0x78>
 801a54e:	89fb      	ldrh	r3, [r7, #14]
 801a550:	2b13      	cmp	r3, #19
 801a552:	d804      	bhi.n	801a55e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a554:	6878      	ldr	r0, [r7, #4]
 801a556:	f7f6 fb2d 	bl	8010bb4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a55a:	2300      	movs	r3, #0
 801a55c:	e104      	b.n	801a768 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 801a55e:	89fb      	ldrh	r3, [r7, #14]
 801a560:	4619      	mov	r1, r3
 801a562:	6938      	ldr	r0, [r7, #16]
 801a564:	f7f4 ff4c 	bl	800f400 <inet_chksum>
 801a568:	4603      	mov	r3, r0
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d004      	beq.n	801a578 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 801a56e:	6878      	ldr	r0, [r7, #4]
 801a570:	f7f6 fb20 	bl	8010bb4 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 801a574:	2300      	movs	r3, #0
 801a576:	e0f7      	b.n	801a768 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a578:	693b      	ldr	r3, [r7, #16]
 801a57a:	691b      	ldr	r3, [r3, #16]
 801a57c:	4a7c      	ldr	r2, [pc, #496]	@ (801a770 <ip4_input+0x294>)
 801a57e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a580:	693b      	ldr	r3, [r7, #16]
 801a582:	68db      	ldr	r3, [r3, #12]
 801a584:	4a7a      	ldr	r2, [pc, #488]	@ (801a770 <ip4_input+0x294>)
 801a586:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a588:	4b79      	ldr	r3, [pc, #484]	@ (801a770 <ip4_input+0x294>)
 801a58a:	695b      	ldr	r3, [r3, #20]
 801a58c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a590:	2be0      	cmp	r3, #224	@ 0xe0
 801a592:	d112      	bne.n	801a5ba <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a594:	683b      	ldr	r3, [r7, #0]
 801a596:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a59a:	f003 0301 	and.w	r3, r3, #1
 801a59e:	b2db      	uxtb	r3, r3
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d007      	beq.n	801a5b4 <ip4_input+0xd8>
 801a5a4:	683b      	ldr	r3, [r7, #0]
 801a5a6:	3304      	adds	r3, #4
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d002      	beq.n	801a5b4 <ip4_input+0xd8>
      netif = inp;
 801a5ae:	683b      	ldr	r3, [r7, #0]
 801a5b0:	61fb      	str	r3, [r7, #28]
 801a5b2:	e02a      	b.n	801a60a <ip4_input+0x12e>
    } else {
      netif = NULL;
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	61fb      	str	r3, [r7, #28]
 801a5b8:	e027      	b.n	801a60a <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a5ba:	6838      	ldr	r0, [r7, #0]
 801a5bc:	f7ff ff64 	bl	801a488 <ip4_input_accept>
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d002      	beq.n	801a5cc <ip4_input+0xf0>
      netif = inp;
 801a5c6:	683b      	ldr	r3, [r7, #0]
 801a5c8:	61fb      	str	r3, [r7, #28]
 801a5ca:	e01e      	b.n	801a60a <ip4_input+0x12e>
    } else {
      netif = NULL;
 801a5cc:	2300      	movs	r3, #0
 801a5ce:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a5d0:	4b67      	ldr	r3, [pc, #412]	@ (801a770 <ip4_input+0x294>)
 801a5d2:	695b      	ldr	r3, [r3, #20]
 801a5d4:	b2db      	uxtb	r3, r3
 801a5d6:	2b7f      	cmp	r3, #127	@ 0x7f
 801a5d8:	d017      	beq.n	801a60a <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a5da:	4b66      	ldr	r3, [pc, #408]	@ (801a774 <ip4_input+0x298>)
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	61fb      	str	r3, [r7, #28]
 801a5e0:	e00e      	b.n	801a600 <ip4_input+0x124>
          if (netif == inp) {
 801a5e2:	69fa      	ldr	r2, [r7, #28]
 801a5e4:	683b      	ldr	r3, [r7, #0]
 801a5e6:	429a      	cmp	r2, r3
 801a5e8:	d006      	beq.n	801a5f8 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a5ea:	69f8      	ldr	r0, [r7, #28]
 801a5ec:	f7ff ff4c 	bl	801a488 <ip4_input_accept>
 801a5f0:	4603      	mov	r3, r0
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d108      	bne.n	801a608 <ip4_input+0x12c>
 801a5f6:	e000      	b.n	801a5fa <ip4_input+0x11e>
            continue;
 801a5f8:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a5fa:	69fb      	ldr	r3, [r7, #28]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	61fb      	str	r3, [r7, #28]
 801a600:	69fb      	ldr	r3, [r7, #28]
 801a602:	2b00      	cmp	r3, #0
 801a604:	d1ed      	bne.n	801a5e2 <ip4_input+0x106>
 801a606:	e000      	b.n	801a60a <ip4_input+0x12e>
            break;
 801a608:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801a60a:	69fb      	ldr	r3, [r7, #28]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d111      	bne.n	801a634 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801a610:	693b      	ldr	r3, [r7, #16]
 801a612:	7a5b      	ldrb	r3, [r3, #9]
 801a614:	2b11      	cmp	r3, #17
 801a616:	d10d      	bne.n	801a634 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801a618:	89fb      	ldrh	r3, [r7, #14]
 801a61a:	693a      	ldr	r2, [r7, #16]
 801a61c:	4413      	add	r3, r2
 801a61e:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801a620:	69bb      	ldr	r3, [r7, #24]
 801a622:	885b      	ldrh	r3, [r3, #2]
 801a624:	b29b      	uxth	r3, r3
 801a626:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801a62a:	d103      	bne.n	801a634 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801a62c:	683b      	ldr	r3, [r7, #0]
 801a62e:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 801a630:	2300      	movs	r3, #0
 801a632:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801a634:	697b      	ldr	r3, [r7, #20]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d017      	beq.n	801a66a <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801a63a:	4b4d      	ldr	r3, [pc, #308]	@ (801a770 <ip4_input+0x294>)
 801a63c:	691b      	ldr	r3, [r3, #16]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d013      	beq.n	801a66a <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a642:	4b4b      	ldr	r3, [pc, #300]	@ (801a770 <ip4_input+0x294>)
 801a644:	691b      	ldr	r3, [r3, #16]
 801a646:	6839      	ldr	r1, [r7, #0]
 801a648:	4618      	mov	r0, r3
 801a64a:	f000 f9d3 	bl	801a9f4 <ip4_addr_isbroadcast_u32>
 801a64e:	4603      	mov	r3, r0
 801a650:	2b00      	cmp	r3, #0
 801a652:	d105      	bne.n	801a660 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a654:	4b46      	ldr	r3, [pc, #280]	@ (801a770 <ip4_input+0x294>)
 801a656:	691b      	ldr	r3, [r3, #16]
 801a658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a65c:	2be0      	cmp	r3, #224	@ 0xe0
 801a65e:	d104      	bne.n	801a66a <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f7f6 faa7 	bl	8010bb4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a666:	2300      	movs	r3, #0
 801a668:	e07e      	b.n	801a768 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a66a:	69fb      	ldr	r3, [r7, #28]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d104      	bne.n	801a67a <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a670:	6878      	ldr	r0, [r7, #4]
 801a672:	f7f6 fa9f 	bl	8010bb4 <pbuf_free>
    return ERR_OK;
 801a676:	2300      	movs	r3, #0
 801a678:	e076      	b.n	801a768 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a67a:	693b      	ldr	r3, [r7, #16]
 801a67c:	88db      	ldrh	r3, [r3, #6]
 801a67e:	b29b      	uxth	r3, r3
 801a680:	461a      	mov	r2, r3
 801a682:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801a686:	4013      	ands	r3, r2
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d00b      	beq.n	801a6a4 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a68c:	6878      	ldr	r0, [r7, #4]
 801a68e:	f000 fcf7 	bl	801b080 <ip4_reass>
 801a692:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d101      	bne.n	801a69e <ip4_input+0x1c2>
      return ERR_OK;
 801a69a:	2300      	movs	r3, #0
 801a69c:	e064      	b.n	801a768 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	685b      	ldr	r3, [r3, #4]
 801a6a2:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a6a4:	4a32      	ldr	r2, [pc, #200]	@ (801a770 <ip4_input+0x294>)
 801a6a6:	69fb      	ldr	r3, [r7, #28]
 801a6a8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a6aa:	4a31      	ldr	r2, [pc, #196]	@ (801a770 <ip4_input+0x294>)
 801a6ac:	683b      	ldr	r3, [r7, #0]
 801a6ae:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a6b0:	4a2f      	ldr	r2, [pc, #188]	@ (801a770 <ip4_input+0x294>)
 801a6b2:	693b      	ldr	r3, [r7, #16]
 801a6b4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a6b6:	693b      	ldr	r3, [r7, #16]
 801a6b8:	781b      	ldrb	r3, [r3, #0]
 801a6ba:	f003 030f 	and.w	r3, r3, #15
 801a6be:	b2db      	uxtb	r3, r3
 801a6c0:	009b      	lsls	r3, r3, #2
 801a6c2:	b2db      	uxtb	r3, r3
 801a6c4:	461a      	mov	r2, r3
 801a6c6:	4b2a      	ldr	r3, [pc, #168]	@ (801a770 <ip4_input+0x294>)
 801a6c8:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a6ca:	89fb      	ldrh	r3, [r7, #14]
 801a6cc:	4619      	mov	r1, r3
 801a6ce:	6878      	ldr	r0, [r7, #4]
 801a6d0:	f7f6 f9ea 	bl	8010aa8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a6d4:	693b      	ldr	r3, [r7, #16]
 801a6d6:	7a5b      	ldrb	r3, [r3, #9]
 801a6d8:	2b11      	cmp	r3, #17
 801a6da:	d006      	beq.n	801a6ea <ip4_input+0x20e>
 801a6dc:	2b11      	cmp	r3, #17
 801a6de:	dc13      	bgt.n	801a708 <ip4_input+0x22c>
 801a6e0:	2b01      	cmp	r3, #1
 801a6e2:	d00c      	beq.n	801a6fe <ip4_input+0x222>
 801a6e4:	2b06      	cmp	r3, #6
 801a6e6:	d005      	beq.n	801a6f4 <ip4_input+0x218>
 801a6e8:	e00e      	b.n	801a708 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a6ea:	6839      	ldr	r1, [r7, #0]
 801a6ec:	6878      	ldr	r0, [r7, #4]
 801a6ee:	f7fc f973 	bl	80169d8 <udp_input>
        break;
 801a6f2:	e026      	b.n	801a742 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a6f4:	6839      	ldr	r1, [r7, #0]
 801a6f6:	6878      	ldr	r0, [r7, #4]
 801a6f8:	f7f8 f93e 	bl	8012978 <tcp_input>
        break;
 801a6fc:	e021      	b.n	801a742 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a6fe:	6839      	ldr	r1, [r7, #0]
 801a700:	6878      	ldr	r0, [r7, #4]
 801a702:	f7ff fc8f 	bl	801a024 <icmp_input>
        break;
 801a706:	e01c      	b.n	801a742 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a708:	4b19      	ldr	r3, [pc, #100]	@ (801a770 <ip4_input+0x294>)
 801a70a:	695b      	ldr	r3, [r3, #20]
 801a70c:	69f9      	ldr	r1, [r7, #28]
 801a70e:	4618      	mov	r0, r3
 801a710:	f000 f970 	bl	801a9f4 <ip4_addr_isbroadcast_u32>
 801a714:	4603      	mov	r3, r0
 801a716:	2b00      	cmp	r3, #0
 801a718:	d10f      	bne.n	801a73a <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a71a:	4b15      	ldr	r3, [pc, #84]	@ (801a770 <ip4_input+0x294>)
 801a71c:	695b      	ldr	r3, [r3, #20]
 801a71e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a722:	2be0      	cmp	r3, #224	@ 0xe0
 801a724:	d009      	beq.n	801a73a <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a726:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a72a:	4619      	mov	r1, r3
 801a72c:	6878      	ldr	r0, [r7, #4]
 801a72e:	f7f6 fa2e 	bl	8010b8e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a732:	2102      	movs	r1, #2
 801a734:	6878      	ldr	r0, [r7, #4]
 801a736:	f7ff fda3 	bl	801a280 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a73a:	6878      	ldr	r0, [r7, #4]
 801a73c:	f7f6 fa3a 	bl	8010bb4 <pbuf_free>
        break;
 801a740:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a742:	4b0b      	ldr	r3, [pc, #44]	@ (801a770 <ip4_input+0x294>)
 801a744:	2200      	movs	r2, #0
 801a746:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a748:	4b09      	ldr	r3, [pc, #36]	@ (801a770 <ip4_input+0x294>)
 801a74a:	2200      	movs	r2, #0
 801a74c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a74e:	4b08      	ldr	r3, [pc, #32]	@ (801a770 <ip4_input+0x294>)
 801a750:	2200      	movs	r2, #0
 801a752:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a754:	4b06      	ldr	r3, [pc, #24]	@ (801a770 <ip4_input+0x294>)
 801a756:	2200      	movs	r2, #0
 801a758:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a75a:	4b05      	ldr	r3, [pc, #20]	@ (801a770 <ip4_input+0x294>)
 801a75c:	2200      	movs	r2, #0
 801a75e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a760:	4b03      	ldr	r3, [pc, #12]	@ (801a770 <ip4_input+0x294>)
 801a762:	2200      	movs	r2, #0
 801a764:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a766:	2300      	movs	r3, #0
}
 801a768:	4618      	mov	r0, r3
 801a76a:	3720      	adds	r7, #32
 801a76c:	46bd      	mov	sp, r7
 801a76e:	bd80      	pop	{r7, pc}
 801a770:	2000a2d4 	.word	0x2000a2d4
 801a774:	20013d3c 	.word	0x20013d3c

0801a778 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a778:	b580      	push	{r7, lr}
 801a77a:	b08a      	sub	sp, #40	@ 0x28
 801a77c:	af04      	add	r7, sp, #16
 801a77e:	60f8      	str	r0, [r7, #12]
 801a780:	60b9      	str	r1, [r7, #8]
 801a782:	607a      	str	r2, [r7, #4]
 801a784:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a786:	68bb      	ldr	r3, [r7, #8]
 801a788:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d009      	beq.n	801a7a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d003      	beq.n	801a79e <ip4_output_if+0x26>
 801a796:	68bb      	ldr	r3, [r7, #8]
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d102      	bne.n	801a7a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7a0:	3304      	adds	r3, #4
 801a7a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a7a4:	78fa      	ldrb	r2, [r7, #3]
 801a7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7a8:	9302      	str	r3, [sp, #8]
 801a7aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801a7ae:	9301      	str	r3, [sp, #4]
 801a7b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a7b4:	9300      	str	r3, [sp, #0]
 801a7b6:	4613      	mov	r3, r2
 801a7b8:	687a      	ldr	r2, [r7, #4]
 801a7ba:	6979      	ldr	r1, [r7, #20]
 801a7bc:	68f8      	ldr	r0, [r7, #12]
 801a7be:	f000 f805 	bl	801a7cc <ip4_output_if_src>
 801a7c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	3718      	adds	r7, #24
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	bd80      	pop	{r7, pc}

0801a7cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a7cc:	b580      	push	{r7, lr}
 801a7ce:	b088      	sub	sp, #32
 801a7d0:	af00      	add	r7, sp, #0
 801a7d2:	60f8      	str	r0, [r7, #12]
 801a7d4:	60b9      	str	r1, [r7, #8]
 801a7d6:	607a      	str	r2, [r7, #4]
 801a7d8:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 801a7da:	2300      	movs	r3, #0
 801a7dc:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a7de:	68fb      	ldr	r3, [r7, #12]
 801a7e0:	7b9b      	ldrb	r3, [r3, #14]
 801a7e2:	2b01      	cmp	r3, #1
 801a7e4:	d006      	beq.n	801a7f4 <ip4_output_if_src+0x28>
 801a7e6:	4b7d      	ldr	r3, [pc, #500]	@ (801a9dc <ip4_output_if_src+0x210>)
 801a7e8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801a7ec:	497c      	ldr	r1, [pc, #496]	@ (801a9e0 <ip4_output_if_src+0x214>)
 801a7ee:	487d      	ldr	r0, [pc, #500]	@ (801a9e4 <ip4_output_if_src+0x218>)
 801a7f0:	f002 f81e 	bl	801c830 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	f000 80c4 	beq.w	801a984 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 801a7fc:	2314      	movs	r3, #20
 801a7fe:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a800:	2114      	movs	r1, #20
 801a802:	68f8      	ldr	r0, [r7, #12]
 801a804:	f7f6 f940 	bl	8010a88 <pbuf_add_header>
 801a808:	4603      	mov	r3, r0
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d002      	beq.n	801a814 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a80e:	f06f 0301 	mvn.w	r3, #1
 801a812:	e0df      	b.n	801a9d4 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	685b      	ldr	r3, [r3, #4]
 801a818:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	895b      	ldrh	r3, [r3, #10]
 801a81e:	2b13      	cmp	r3, #19
 801a820:	d806      	bhi.n	801a830 <ip4_output_if_src+0x64>
 801a822:	4b6e      	ldr	r3, [pc, #440]	@ (801a9dc <ip4_output_if_src+0x210>)
 801a824:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801a828:	496f      	ldr	r1, [pc, #444]	@ (801a9e8 <ip4_output_if_src+0x21c>)
 801a82a:	486e      	ldr	r0, [pc, #440]	@ (801a9e4 <ip4_output_if_src+0x218>)
 801a82c:	f002 f800 	bl	801c830 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a830:	69bb      	ldr	r3, [r7, #24]
 801a832:	78fa      	ldrb	r2, [r7, #3]
 801a834:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a836:	69bb      	ldr	r3, [r7, #24]
 801a838:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801a83c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801a83e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801a842:	78fb      	ldrb	r3, [r7, #3]
 801a844:	021b      	lsls	r3, r3, #8
 801a846:	4313      	orrs	r3, r2
 801a848:	021b      	lsls	r3, r3, #8
 801a84a:	b21a      	sxth	r2, r3
 801a84c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 801a850:	78fb      	ldrb	r3, [r7, #3]
 801a852:	021b      	lsls	r3, r3, #8
 801a854:	430b      	orrs	r3, r1
 801a856:	121b      	asrs	r3, r3, #8
 801a858:	b21b      	sxth	r3, r3
 801a85a:	b2db      	uxtb	r3, r3
 801a85c:	b21b      	sxth	r3, r3
 801a85e:	4313      	orrs	r3, r2
 801a860:	b21b      	sxth	r3, r3
 801a862:	b29b      	uxth	r3, r3
 801a864:	461a      	mov	r2, r3
 801a866:	69fb      	ldr	r3, [r7, #28]
 801a868:	4413      	add	r3, r2
 801a86a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	681a      	ldr	r2, [r3, #0]
 801a870:	69bb      	ldr	r3, [r7, #24]
 801a872:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 801a874:	69bb      	ldr	r3, [r7, #24]
 801a876:	691b      	ldr	r3, [r3, #16]
 801a878:	b29b      	uxth	r3, r3
 801a87a:	69fa      	ldr	r2, [r7, #28]
 801a87c:	4413      	add	r3, r2
 801a87e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801a880:	69bb      	ldr	r3, [r7, #24]
 801a882:	691b      	ldr	r3, [r3, #16]
 801a884:	0c1b      	lsrs	r3, r3, #16
 801a886:	69fa      	ldr	r2, [r7, #28]
 801a888:	4413      	add	r3, r2
 801a88a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a88c:	8afb      	ldrh	r3, [r7, #22]
 801a88e:	089b      	lsrs	r3, r3, #2
 801a890:	b29b      	uxth	r3, r3
 801a892:	b2db      	uxtb	r3, r3
 801a894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a898:	b2da      	uxtb	r2, r3
 801a89a:	69bb      	ldr	r3, [r7, #24]
 801a89c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a89e:	69bb      	ldr	r3, [r7, #24]
 801a8a0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801a8a4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801a8a6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801a8aa:	69bb      	ldr	r3, [r7, #24]
 801a8ac:	781b      	ldrb	r3, [r3, #0]
 801a8ae:	021b      	lsls	r3, r3, #8
 801a8b0:	4313      	orrs	r3, r2
 801a8b2:	021b      	lsls	r3, r3, #8
 801a8b4:	b21a      	sxth	r2, r3
 801a8b6:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 801a8ba:	69bb      	ldr	r3, [r7, #24]
 801a8bc:	781b      	ldrb	r3, [r3, #0]
 801a8be:	021b      	lsls	r3, r3, #8
 801a8c0:	430b      	orrs	r3, r1
 801a8c2:	121b      	asrs	r3, r3, #8
 801a8c4:	b21b      	sxth	r3, r3
 801a8c6:	b2db      	uxtb	r3, r3
 801a8c8:	b21b      	sxth	r3, r3
 801a8ca:	4313      	orrs	r3, r2
 801a8cc:	b21b      	sxth	r3, r3
 801a8ce:	b29b      	uxth	r3, r3
 801a8d0:	461a      	mov	r2, r3
 801a8d2:	69fb      	ldr	r3, [r7, #28]
 801a8d4:	4413      	add	r3, r2
 801a8d6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	891b      	ldrh	r3, [r3, #8]
 801a8dc:	4618      	mov	r0, r3
 801a8de:	f7f4 fc47 	bl	800f170 <lwip_htons>
 801a8e2:	4603      	mov	r3, r0
 801a8e4:	461a      	mov	r2, r3
 801a8e6:	69bb      	ldr	r3, [r7, #24]
 801a8e8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 801a8ea:	69bb      	ldr	r3, [r7, #24]
 801a8ec:	885b      	ldrh	r3, [r3, #2]
 801a8ee:	b29b      	uxth	r3, r3
 801a8f0:	461a      	mov	r2, r3
 801a8f2:	69fb      	ldr	r3, [r7, #28]
 801a8f4:	4413      	add	r3, r2
 801a8f6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a8f8:	69bb      	ldr	r3, [r7, #24]
 801a8fa:	2200      	movs	r2, #0
 801a8fc:	719a      	strb	r2, [r3, #6]
 801a8fe:	2200      	movs	r2, #0
 801a900:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a902:	4b3a      	ldr	r3, [pc, #232]	@ (801a9ec <ip4_output_if_src+0x220>)
 801a904:	881b      	ldrh	r3, [r3, #0]
 801a906:	4618      	mov	r0, r3
 801a908:	f7f4 fc32 	bl	800f170 <lwip_htons>
 801a90c:	4603      	mov	r3, r0
 801a90e:	461a      	mov	r2, r3
 801a910:	69bb      	ldr	r3, [r7, #24]
 801a912:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 801a914:	69bb      	ldr	r3, [r7, #24]
 801a916:	889b      	ldrh	r3, [r3, #4]
 801a918:	b29b      	uxth	r3, r3
 801a91a:	461a      	mov	r2, r3
 801a91c:	69fb      	ldr	r3, [r7, #28]
 801a91e:	4413      	add	r3, r2
 801a920:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a922:	4b32      	ldr	r3, [pc, #200]	@ (801a9ec <ip4_output_if_src+0x220>)
 801a924:	881b      	ldrh	r3, [r3, #0]
 801a926:	3301      	adds	r3, #1
 801a928:	b29a      	uxth	r2, r3
 801a92a:	4b30      	ldr	r3, [pc, #192]	@ (801a9ec <ip4_output_if_src+0x220>)
 801a92c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a92e:	68bb      	ldr	r3, [r7, #8]
 801a930:	2b00      	cmp	r3, #0
 801a932:	d104      	bne.n	801a93e <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a934:	4b2e      	ldr	r3, [pc, #184]	@ (801a9f0 <ip4_output_if_src+0x224>)
 801a936:	681a      	ldr	r2, [r3, #0]
 801a938:	69bb      	ldr	r3, [r7, #24]
 801a93a:	60da      	str	r2, [r3, #12]
 801a93c:	e003      	b.n	801a946 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a93e:	68bb      	ldr	r3, [r7, #8]
 801a940:	681a      	ldr	r2, [r3, #0]
 801a942:	69bb      	ldr	r3, [r7, #24]
 801a944:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 801a946:	69bb      	ldr	r3, [r7, #24]
 801a948:	68db      	ldr	r3, [r3, #12]
 801a94a:	b29b      	uxth	r3, r3
 801a94c:	69fa      	ldr	r2, [r7, #28]
 801a94e:	4413      	add	r3, r2
 801a950:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801a952:	69bb      	ldr	r3, [r7, #24]
 801a954:	68db      	ldr	r3, [r3, #12]
 801a956:	0c1b      	lsrs	r3, r3, #16
 801a958:	69fa      	ldr	r2, [r7, #28]
 801a95a:	4413      	add	r3, r2
 801a95c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801a95e:	69fb      	ldr	r3, [r7, #28]
 801a960:	0c1a      	lsrs	r2, r3, #16
 801a962:	69fb      	ldr	r3, [r7, #28]
 801a964:	b29b      	uxth	r3, r3
 801a966:	4413      	add	r3, r2
 801a968:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 801a96a:	69fb      	ldr	r3, [r7, #28]
 801a96c:	0c1b      	lsrs	r3, r3, #16
 801a96e:	69fa      	ldr	r2, [r7, #28]
 801a970:	4413      	add	r3, r2
 801a972:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 801a974:	69fb      	ldr	r3, [r7, #28]
 801a976:	43db      	mvns	r3, r3
 801a978:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801a97a:	69fb      	ldr	r3, [r7, #28]
 801a97c:	b29a      	uxth	r2, r3
 801a97e:	69bb      	ldr	r3, [r7, #24]
 801a980:	815a      	strh	r2, [r3, #10]
 801a982:	e00f      	b.n	801a9a4 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a984:	68fb      	ldr	r3, [r7, #12]
 801a986:	895b      	ldrh	r3, [r3, #10]
 801a988:	2b13      	cmp	r3, #19
 801a98a:	d802      	bhi.n	801a992 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a98c:	f06f 0301 	mvn.w	r3, #1
 801a990:	e020      	b.n	801a9d4 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	685b      	ldr	r3, [r3, #4]
 801a996:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a998:	69bb      	ldr	r3, [r7, #24]
 801a99a:	691b      	ldr	r3, [r3, #16]
 801a99c:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801a99e:	f107 0310 	add.w	r3, r7, #16
 801a9a2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d00c      	beq.n	801a9c6 <ip4_output_if_src+0x1fa>
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	891a      	ldrh	r2, [r3, #8]
 801a9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a9b4:	429a      	cmp	r2, r3
 801a9b6:	d906      	bls.n	801a9c6 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 801a9b8:	687a      	ldr	r2, [r7, #4]
 801a9ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801a9bc:	68f8      	ldr	r0, [r7, #12]
 801a9be:	f000 fd5b 	bl	801b478 <ip4_frag>
 801a9c2:	4603      	mov	r3, r0
 801a9c4:	e006      	b.n	801a9d4 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9c8:	695b      	ldr	r3, [r3, #20]
 801a9ca:	687a      	ldr	r2, [r7, #4]
 801a9cc:	68f9      	ldr	r1, [r7, #12]
 801a9ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a9d0:	4798      	blx	r3
 801a9d2:	4603      	mov	r3, r0
}
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	3720      	adds	r7, #32
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bd80      	pop	{r7, pc}
 801a9dc:	0802204c 	.word	0x0802204c
 801a9e0:	08022080 	.word	0x08022080
 801a9e4:	0802208c 	.word	0x0802208c
 801a9e8:	080220b4 	.word	0x080220b4
 801a9ec:	20013ed2 	.word	0x20013ed2
 801a9f0:	0806e194 	.word	0x0806e194

0801a9f4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a9f4:	b480      	push	{r7}
 801a9f6:	b085      	sub	sp, #20
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	6078      	str	r0, [r7, #4]
 801a9fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa08:	d002      	beq.n	801aa10 <ip4_addr_isbroadcast_u32+0x1c>
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d101      	bne.n	801aa14 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801aa10:	2301      	movs	r3, #1
 801aa12:	e02a      	b.n	801aa6a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801aa14:	683b      	ldr	r3, [r7, #0]
 801aa16:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801aa1a:	f003 0302 	and.w	r3, r3, #2
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d101      	bne.n	801aa26 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801aa22:	2300      	movs	r3, #0
 801aa24:	e021      	b.n	801aa6a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801aa26:	683b      	ldr	r3, [r7, #0]
 801aa28:	3304      	adds	r3, #4
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	687a      	ldr	r2, [r7, #4]
 801aa2e:	429a      	cmp	r2, r3
 801aa30:	d101      	bne.n	801aa36 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801aa32:	2300      	movs	r3, #0
 801aa34:	e019      	b.n	801aa6a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801aa36:	68fa      	ldr	r2, [r7, #12]
 801aa38:	683b      	ldr	r3, [r7, #0]
 801aa3a:	3304      	adds	r3, #4
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	405a      	eors	r2, r3
 801aa40:	683b      	ldr	r3, [r7, #0]
 801aa42:	3308      	adds	r3, #8
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	4013      	ands	r3, r2
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d10d      	bne.n	801aa68 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801aa4c:	683b      	ldr	r3, [r7, #0]
 801aa4e:	3308      	adds	r3, #8
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	43da      	mvns	r2, r3
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801aa58:	683b      	ldr	r3, [r7, #0]
 801aa5a:	3308      	adds	r3, #8
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801aa60:	429a      	cmp	r2, r3
 801aa62:	d101      	bne.n	801aa68 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801aa64:	2301      	movs	r3, #1
 801aa66:	e000      	b.n	801aa6a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801aa68:	2300      	movs	r3, #0
  }
}
 801aa6a:	4618      	mov	r0, r3
 801aa6c:	3714      	adds	r7, #20
 801aa6e:	46bd      	mov	sp, r7
 801aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa74:	4770      	bx	lr
	...

0801aa78 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801aa78:	b580      	push	{r7, lr}
 801aa7a:	b084      	sub	sp, #16
 801aa7c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801aa7e:	2300      	movs	r3, #0
 801aa80:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801aa82:	4b12      	ldr	r3, [pc, #72]	@ (801aacc <ip_reass_tmr+0x54>)
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801aa88:	e018      	b.n	801aabc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	7fdb      	ldrb	r3, [r3, #31]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d00b      	beq.n	801aaaa <ip_reass_tmr+0x32>
      r->timer--;
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	7fdb      	ldrb	r3, [r3, #31]
 801aa96:	3b01      	subs	r3, #1
 801aa98:	b2da      	uxtb	r2, r3
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	60fb      	str	r3, [r7, #12]
 801aaa8:	e008      	b.n	801aabc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801aab4:	68b9      	ldr	r1, [r7, #8]
 801aab6:	6878      	ldr	r0, [r7, #4]
 801aab8:	f000 f80a 	bl	801aad0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d1e3      	bne.n	801aa8a <ip_reass_tmr+0x12>
    }
  }
}
 801aac2:	bf00      	nop
 801aac4:	bf00      	nop
 801aac6:	3710      	adds	r7, #16
 801aac8:	46bd      	mov	sp, r7
 801aaca:	bd80      	pop	{r7, pc}
 801aacc:	20013ed4 	.word	0x20013ed4

0801aad0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801aad0:	b580      	push	{r7, lr}
 801aad2:	b088      	sub	sp, #32
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	6078      	str	r0, [r7, #4]
 801aad8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801aada:	2300      	movs	r3, #0
 801aadc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801aade:	683a      	ldr	r2, [r7, #0]
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	429a      	cmp	r2, r3
 801aae4:	d105      	bne.n	801aaf2 <ip_reass_free_complete_datagram+0x22>
 801aae6:	4b45      	ldr	r3, [pc, #276]	@ (801abfc <ip_reass_free_complete_datagram+0x12c>)
 801aae8:	22ab      	movs	r2, #171	@ 0xab
 801aaea:	4945      	ldr	r1, [pc, #276]	@ (801ac00 <ip_reass_free_complete_datagram+0x130>)
 801aaec:	4845      	ldr	r0, [pc, #276]	@ (801ac04 <ip_reass_free_complete_datagram+0x134>)
 801aaee:	f001 fe9f 	bl	801c830 <iprintf>
  if (prev != NULL) {
 801aaf2:	683b      	ldr	r3, [r7, #0]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d00a      	beq.n	801ab0e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801aaf8:	683b      	ldr	r3, [r7, #0]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	687a      	ldr	r2, [r7, #4]
 801aafe:	429a      	cmp	r2, r3
 801ab00:	d005      	beq.n	801ab0e <ip_reass_free_complete_datagram+0x3e>
 801ab02:	4b3e      	ldr	r3, [pc, #248]	@ (801abfc <ip_reass_free_complete_datagram+0x12c>)
 801ab04:	22ad      	movs	r2, #173	@ 0xad
 801ab06:	4940      	ldr	r1, [pc, #256]	@ (801ac08 <ip_reass_free_complete_datagram+0x138>)
 801ab08:	483e      	ldr	r0, [pc, #248]	@ (801ac04 <ip_reass_free_complete_datagram+0x134>)
 801ab0a:	f001 fe91 	bl	801c830 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	685b      	ldr	r3, [r3, #4]
 801ab12:	685b      	ldr	r3, [r3, #4]
 801ab14:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ab16:	697b      	ldr	r3, [r7, #20]
 801ab18:	889b      	ldrh	r3, [r3, #4]
 801ab1a:	b29b      	uxth	r3, r3
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d12a      	bne.n	801ab76 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	685b      	ldr	r3, [r3, #4]
 801ab24:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ab26:	697b      	ldr	r3, [r7, #20]
 801ab28:	681a      	ldr	r2, [r3, #0]
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ab2e:	69bb      	ldr	r3, [r7, #24]
 801ab30:	6858      	ldr	r0, [r3, #4]
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	3308      	adds	r3, #8
 801ab36:	2214      	movs	r2, #20
 801ab38:	4619      	mov	r1, r3
 801ab3a:	f002 f898 	bl	801cc6e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ab3e:	2101      	movs	r1, #1
 801ab40:	69b8      	ldr	r0, [r7, #24]
 801ab42:	f7ff fbad 	bl	801a2a0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ab46:	69b8      	ldr	r0, [r7, #24]
 801ab48:	f7f6 f8c2 	bl	8010cd0 <pbuf_clen>
 801ab4c:	4603      	mov	r3, r0
 801ab4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ab50:	8bfa      	ldrh	r2, [r7, #30]
 801ab52:	8a7b      	ldrh	r3, [r7, #18]
 801ab54:	4413      	add	r3, r2
 801ab56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ab5a:	db05      	blt.n	801ab68 <ip_reass_free_complete_datagram+0x98>
 801ab5c:	4b27      	ldr	r3, [pc, #156]	@ (801abfc <ip_reass_free_complete_datagram+0x12c>)
 801ab5e:	22bc      	movs	r2, #188	@ 0xbc
 801ab60:	492a      	ldr	r1, [pc, #168]	@ (801ac0c <ip_reass_free_complete_datagram+0x13c>)
 801ab62:	4828      	ldr	r0, [pc, #160]	@ (801ac04 <ip_reass_free_complete_datagram+0x134>)
 801ab64:	f001 fe64 	bl	801c830 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ab68:	8bfa      	ldrh	r2, [r7, #30]
 801ab6a:	8a7b      	ldrh	r3, [r7, #18]
 801ab6c:	4413      	add	r3, r2
 801ab6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ab70:	69b8      	ldr	r0, [r7, #24]
 801ab72:	f7f6 f81f 	bl	8010bb4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	685b      	ldr	r3, [r3, #4]
 801ab7a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ab7c:	e01f      	b.n	801abbe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ab7e:	69bb      	ldr	r3, [r7, #24]
 801ab80:	685b      	ldr	r3, [r3, #4]
 801ab82:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ab84:	69bb      	ldr	r3, [r7, #24]
 801ab86:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801ab88:	697b      	ldr	r3, [r7, #20]
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ab8e:	68f8      	ldr	r0, [r7, #12]
 801ab90:	f7f6 f89e 	bl	8010cd0 <pbuf_clen>
 801ab94:	4603      	mov	r3, r0
 801ab96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ab98:	8bfa      	ldrh	r2, [r7, #30]
 801ab9a:	8a7b      	ldrh	r3, [r7, #18]
 801ab9c:	4413      	add	r3, r2
 801ab9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801aba2:	db05      	blt.n	801abb0 <ip_reass_free_complete_datagram+0xe0>
 801aba4:	4b15      	ldr	r3, [pc, #84]	@ (801abfc <ip_reass_free_complete_datagram+0x12c>)
 801aba6:	22cc      	movs	r2, #204	@ 0xcc
 801aba8:	4918      	ldr	r1, [pc, #96]	@ (801ac0c <ip_reass_free_complete_datagram+0x13c>)
 801abaa:	4816      	ldr	r0, [pc, #88]	@ (801ac04 <ip_reass_free_complete_datagram+0x134>)
 801abac:	f001 fe40 	bl	801c830 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801abb0:	8bfa      	ldrh	r2, [r7, #30]
 801abb2:	8a7b      	ldrh	r3, [r7, #18]
 801abb4:	4413      	add	r3, r2
 801abb6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801abb8:	68f8      	ldr	r0, [r7, #12]
 801abba:	f7f5 fffb 	bl	8010bb4 <pbuf_free>
  while (p != NULL) {
 801abbe:	69bb      	ldr	r3, [r7, #24]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d1dc      	bne.n	801ab7e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801abc4:	6839      	ldr	r1, [r7, #0]
 801abc6:	6878      	ldr	r0, [r7, #4]
 801abc8:	f000 f8c2 	bl	801ad50 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801abcc:	4b10      	ldr	r3, [pc, #64]	@ (801ac10 <ip_reass_free_complete_datagram+0x140>)
 801abce:	881b      	ldrh	r3, [r3, #0]
 801abd0:	8bfa      	ldrh	r2, [r7, #30]
 801abd2:	429a      	cmp	r2, r3
 801abd4:	d905      	bls.n	801abe2 <ip_reass_free_complete_datagram+0x112>
 801abd6:	4b09      	ldr	r3, [pc, #36]	@ (801abfc <ip_reass_free_complete_datagram+0x12c>)
 801abd8:	22d2      	movs	r2, #210	@ 0xd2
 801abda:	490e      	ldr	r1, [pc, #56]	@ (801ac14 <ip_reass_free_complete_datagram+0x144>)
 801abdc:	4809      	ldr	r0, [pc, #36]	@ (801ac04 <ip_reass_free_complete_datagram+0x134>)
 801abde:	f001 fe27 	bl	801c830 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801abe2:	4b0b      	ldr	r3, [pc, #44]	@ (801ac10 <ip_reass_free_complete_datagram+0x140>)
 801abe4:	881a      	ldrh	r2, [r3, #0]
 801abe6:	8bfb      	ldrh	r3, [r7, #30]
 801abe8:	1ad3      	subs	r3, r2, r3
 801abea:	b29a      	uxth	r2, r3
 801abec:	4b08      	ldr	r3, [pc, #32]	@ (801ac10 <ip_reass_free_complete_datagram+0x140>)
 801abee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801abf0:	8bfb      	ldrh	r3, [r7, #30]
}
 801abf2:	4618      	mov	r0, r3
 801abf4:	3720      	adds	r7, #32
 801abf6:	46bd      	mov	sp, r7
 801abf8:	bd80      	pop	{r7, pc}
 801abfa:	bf00      	nop
 801abfc:	080220e4 	.word	0x080220e4
 801ac00:	08022120 	.word	0x08022120
 801ac04:	0802212c 	.word	0x0802212c
 801ac08:	08022154 	.word	0x08022154
 801ac0c:	08022168 	.word	0x08022168
 801ac10:	20013ed8 	.word	0x20013ed8
 801ac14:	08022188 	.word	0x08022188

0801ac18 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ac18:	b580      	push	{r7, lr}
 801ac1a:	b08a      	sub	sp, #40	@ 0x28
 801ac1c:	af00      	add	r7, sp, #0
 801ac1e:	6078      	str	r0, [r7, #4]
 801ac20:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ac22:	2300      	movs	r3, #0
 801ac24:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ac26:	2300      	movs	r3, #0
 801ac28:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ac2e:	2300      	movs	r3, #0
 801ac30:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ac32:	2300      	movs	r3, #0
 801ac34:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ac36:	4b28      	ldr	r3, [pc, #160]	@ (801acd8 <ip_reass_remove_oldest_datagram+0xc0>)
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801ac3c:	e030      	b.n	801aca0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ac3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac40:	695a      	ldr	r2, [r3, #20]
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	68db      	ldr	r3, [r3, #12]
 801ac46:	429a      	cmp	r2, r3
 801ac48:	d10c      	bne.n	801ac64 <ip_reass_remove_oldest_datagram+0x4c>
 801ac4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac4c:	699a      	ldr	r2, [r3, #24]
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	691b      	ldr	r3, [r3, #16]
 801ac52:	429a      	cmp	r2, r3
 801ac54:	d106      	bne.n	801ac64 <ip_reass_remove_oldest_datagram+0x4c>
 801ac56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac58:	899a      	ldrh	r2, [r3, #12]
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	889b      	ldrh	r3, [r3, #4]
 801ac5e:	b29b      	uxth	r3, r3
 801ac60:	429a      	cmp	r2, r3
 801ac62:	d014      	beq.n	801ac8e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ac64:	693b      	ldr	r3, [r7, #16]
 801ac66:	3301      	adds	r3, #1
 801ac68:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ac6a:	6a3b      	ldr	r3, [r7, #32]
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d104      	bne.n	801ac7a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ac70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac72:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ac74:	69fb      	ldr	r3, [r7, #28]
 801ac76:	61bb      	str	r3, [r7, #24]
 801ac78:	e009      	b.n	801ac8e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac7c:	7fda      	ldrb	r2, [r3, #31]
 801ac7e:	6a3b      	ldr	r3, [r7, #32]
 801ac80:	7fdb      	ldrb	r3, [r3, #31]
 801ac82:	429a      	cmp	r2, r3
 801ac84:	d803      	bhi.n	801ac8e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ac86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac88:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ac8a:	69fb      	ldr	r3, [r7, #28]
 801ac8c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ac8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d001      	beq.n	801ac9a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ac96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac98:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ac9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801aca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	d1cb      	bne.n	801ac3e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801aca6:	6a3b      	ldr	r3, [r7, #32]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d008      	beq.n	801acbe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801acac:	69b9      	ldr	r1, [r7, #24]
 801acae:	6a38      	ldr	r0, [r7, #32]
 801acb0:	f7ff ff0e 	bl	801aad0 <ip_reass_free_complete_datagram>
 801acb4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801acb6:	697a      	ldr	r2, [r7, #20]
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	4413      	add	r3, r2
 801acbc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801acbe:	697a      	ldr	r2, [r7, #20]
 801acc0:	683b      	ldr	r3, [r7, #0]
 801acc2:	429a      	cmp	r2, r3
 801acc4:	da02      	bge.n	801accc <ip_reass_remove_oldest_datagram+0xb4>
 801acc6:	693b      	ldr	r3, [r7, #16]
 801acc8:	2b01      	cmp	r3, #1
 801acca:	dcac      	bgt.n	801ac26 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801accc:	697b      	ldr	r3, [r7, #20]
}
 801acce:	4618      	mov	r0, r3
 801acd0:	3728      	adds	r7, #40	@ 0x28
 801acd2:	46bd      	mov	sp, r7
 801acd4:	bd80      	pop	{r7, pc}
 801acd6:	bf00      	nop
 801acd8:	20013ed4 	.word	0x20013ed4

0801acdc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b084      	sub	sp, #16
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	6078      	str	r0, [r7, #4]
 801ace4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ace6:	2004      	movs	r0, #4
 801ace8:	f7f5 f870 	bl	800fdcc <memp_malloc>
 801acec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801acee:	68fb      	ldr	r3, [r7, #12]
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d110      	bne.n	801ad16 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801acf4:	6839      	ldr	r1, [r7, #0]
 801acf6:	6878      	ldr	r0, [r7, #4]
 801acf8:	f7ff ff8e 	bl	801ac18 <ip_reass_remove_oldest_datagram>
 801acfc:	4602      	mov	r2, r0
 801acfe:	683b      	ldr	r3, [r7, #0]
 801ad00:	4293      	cmp	r3, r2
 801ad02:	dc03      	bgt.n	801ad0c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ad04:	2004      	movs	r0, #4
 801ad06:	f7f5 f861 	bl	800fdcc <memp_malloc>
 801ad0a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d101      	bne.n	801ad16 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801ad12:	2300      	movs	r3, #0
 801ad14:	e016      	b.n	801ad44 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ad16:	2220      	movs	r2, #32
 801ad18:	2100      	movs	r1, #0
 801ad1a:	68f8      	ldr	r0, [r7, #12]
 801ad1c:	f001 feea 	bl	801caf4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	220f      	movs	r2, #15
 801ad24:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ad26:	4b09      	ldr	r3, [pc, #36]	@ (801ad4c <ip_reass_enqueue_new_datagram+0x70>)
 801ad28:	681a      	ldr	r2, [r3, #0]
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ad2e:	4a07      	ldr	r2, [pc, #28]	@ (801ad4c <ip_reass_enqueue_new_datagram+0x70>)
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	3308      	adds	r3, #8
 801ad38:	2214      	movs	r2, #20
 801ad3a:	6879      	ldr	r1, [r7, #4]
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	f001 ff96 	bl	801cc6e <memcpy>
  return ipr;
 801ad42:	68fb      	ldr	r3, [r7, #12]
}
 801ad44:	4618      	mov	r0, r3
 801ad46:	3710      	adds	r7, #16
 801ad48:	46bd      	mov	sp, r7
 801ad4a:	bd80      	pop	{r7, pc}
 801ad4c:	20013ed4 	.word	0x20013ed4

0801ad50 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b082      	sub	sp, #8
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	6078      	str	r0, [r7, #4]
 801ad58:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ad5a:	4b10      	ldr	r3, [pc, #64]	@ (801ad9c <ip_reass_dequeue_datagram+0x4c>)
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	687a      	ldr	r2, [r7, #4]
 801ad60:	429a      	cmp	r2, r3
 801ad62:	d104      	bne.n	801ad6e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	4a0c      	ldr	r2, [pc, #48]	@ (801ad9c <ip_reass_dequeue_datagram+0x4c>)
 801ad6a:	6013      	str	r3, [r2, #0]
 801ad6c:	e00d      	b.n	801ad8a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801ad6e:	683b      	ldr	r3, [r7, #0]
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d106      	bne.n	801ad82 <ip_reass_dequeue_datagram+0x32>
 801ad74:	4b0a      	ldr	r3, [pc, #40]	@ (801ada0 <ip_reass_dequeue_datagram+0x50>)
 801ad76:	f240 1245 	movw	r2, #325	@ 0x145
 801ad7a:	490a      	ldr	r1, [pc, #40]	@ (801ada4 <ip_reass_dequeue_datagram+0x54>)
 801ad7c:	480a      	ldr	r0, [pc, #40]	@ (801ada8 <ip_reass_dequeue_datagram+0x58>)
 801ad7e:	f001 fd57 	bl	801c830 <iprintf>
    prev->next = ipr->next;
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	681a      	ldr	r2, [r3, #0]
 801ad86:	683b      	ldr	r3, [r7, #0]
 801ad88:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ad8a:	6879      	ldr	r1, [r7, #4]
 801ad8c:	2004      	movs	r0, #4
 801ad8e:	f7f5 f86f 	bl	800fe70 <memp_free>
}
 801ad92:	bf00      	nop
 801ad94:	3708      	adds	r7, #8
 801ad96:	46bd      	mov	sp, r7
 801ad98:	bd80      	pop	{r7, pc}
 801ad9a:	bf00      	nop
 801ad9c:	20013ed4 	.word	0x20013ed4
 801ada0:	080220e4 	.word	0x080220e4
 801ada4:	080221ac 	.word	0x080221ac
 801ada8:	0802212c 	.word	0x0802212c

0801adac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801adac:	b580      	push	{r7, lr}
 801adae:	b08c      	sub	sp, #48	@ 0x30
 801adb0:	af00      	add	r7, sp, #0
 801adb2:	60f8      	str	r0, [r7, #12]
 801adb4:	60b9      	str	r1, [r7, #8]
 801adb6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801adb8:	2300      	movs	r3, #0
 801adba:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801adbc:	2301      	movs	r3, #1
 801adbe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801adc0:	68bb      	ldr	r3, [r7, #8]
 801adc2:	685b      	ldr	r3, [r3, #4]
 801adc4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801adc6:	69fb      	ldr	r3, [r7, #28]
 801adc8:	885b      	ldrh	r3, [r3, #2]
 801adca:	b29b      	uxth	r3, r3
 801adcc:	4618      	mov	r0, r3
 801adce:	f7f4 f9cf 	bl	800f170 <lwip_htons>
 801add2:	4603      	mov	r3, r0
 801add4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801add6:	69fb      	ldr	r3, [r7, #28]
 801add8:	781b      	ldrb	r3, [r3, #0]
 801adda:	f003 030f 	and.w	r3, r3, #15
 801adde:	b2db      	uxtb	r3, r3
 801ade0:	009b      	lsls	r3, r3, #2
 801ade2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ade4:	7e7b      	ldrb	r3, [r7, #25]
 801ade6:	b29b      	uxth	r3, r3
 801ade8:	8b7a      	ldrh	r2, [r7, #26]
 801adea:	429a      	cmp	r2, r3
 801adec:	d202      	bcs.n	801adf4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801adee:	f04f 33ff 	mov.w	r3, #4294967295
 801adf2:	e135      	b.n	801b060 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801adf4:	7e7b      	ldrb	r3, [r7, #25]
 801adf6:	b29b      	uxth	r3, r3
 801adf8:	8b7a      	ldrh	r2, [r7, #26]
 801adfa:	1ad3      	subs	r3, r2, r3
 801adfc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801adfe:	69fb      	ldr	r3, [r7, #28]
 801ae00:	88db      	ldrh	r3, [r3, #6]
 801ae02:	b29b      	uxth	r3, r3
 801ae04:	4618      	mov	r0, r3
 801ae06:	f7f4 f9b3 	bl	800f170 <lwip_htons>
 801ae0a:	4603      	mov	r3, r0
 801ae0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ae10:	b29b      	uxth	r3, r3
 801ae12:	00db      	lsls	r3, r3, #3
 801ae14:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ae16:	68bb      	ldr	r3, [r7, #8]
 801ae18:	685b      	ldr	r3, [r3, #4]
 801ae1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801ae1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae1e:	2200      	movs	r2, #0
 801ae20:	701a      	strb	r2, [r3, #0]
 801ae22:	2200      	movs	r2, #0
 801ae24:	705a      	strb	r2, [r3, #1]
 801ae26:	2200      	movs	r2, #0
 801ae28:	709a      	strb	r2, [r3, #2]
 801ae2a:	2200      	movs	r2, #0
 801ae2c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ae2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae30:	8afa      	ldrh	r2, [r7, #22]
 801ae32:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ae34:	8afa      	ldrh	r2, [r7, #22]
 801ae36:	8b7b      	ldrh	r3, [r7, #26]
 801ae38:	4413      	add	r3, r2
 801ae3a:	b29a      	uxth	r2, r3
 801ae3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae3e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ae40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae42:	88db      	ldrh	r3, [r3, #6]
 801ae44:	b29b      	uxth	r3, r3
 801ae46:	8afa      	ldrh	r2, [r7, #22]
 801ae48:	429a      	cmp	r2, r3
 801ae4a:	d902      	bls.n	801ae52 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ae4c:	f04f 33ff 	mov.w	r3, #4294967295
 801ae50:	e106      	b.n	801b060 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	685b      	ldr	r3, [r3, #4]
 801ae56:	627b      	str	r3, [r7, #36]	@ 0x24
 801ae58:	e068      	b.n	801af2c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae5c:	685b      	ldr	r3, [r3, #4]
 801ae5e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801ae60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae62:	889b      	ldrh	r3, [r3, #4]
 801ae64:	b29a      	uxth	r2, r3
 801ae66:	693b      	ldr	r3, [r7, #16]
 801ae68:	889b      	ldrh	r3, [r3, #4]
 801ae6a:	b29b      	uxth	r3, r3
 801ae6c:	429a      	cmp	r2, r3
 801ae6e:	d235      	bcs.n	801aedc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801ae70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ae74:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801ae76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	d020      	beq.n	801aebe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801ae7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae7e:	889b      	ldrh	r3, [r3, #4]
 801ae80:	b29a      	uxth	r2, r3
 801ae82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae84:	88db      	ldrh	r3, [r3, #6]
 801ae86:	b29b      	uxth	r3, r3
 801ae88:	429a      	cmp	r2, r3
 801ae8a:	d307      	bcc.n	801ae9c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801ae8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae8e:	88db      	ldrh	r3, [r3, #6]
 801ae90:	b29a      	uxth	r2, r3
 801ae92:	693b      	ldr	r3, [r7, #16]
 801ae94:	889b      	ldrh	r3, [r3, #4]
 801ae96:	b29b      	uxth	r3, r3
 801ae98:	429a      	cmp	r2, r3
 801ae9a:	d902      	bls.n	801aea2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ae9c:	f04f 33ff 	mov.w	r3, #4294967295
 801aea0:	e0de      	b.n	801b060 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801aea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aea4:	68ba      	ldr	r2, [r7, #8]
 801aea6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801aea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeaa:	88db      	ldrh	r3, [r3, #6]
 801aeac:	b29a      	uxth	r2, r3
 801aeae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aeb0:	889b      	ldrh	r3, [r3, #4]
 801aeb2:	b29b      	uxth	r3, r3
 801aeb4:	429a      	cmp	r2, r3
 801aeb6:	d03d      	beq.n	801af34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801aeb8:	2300      	movs	r3, #0
 801aeba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801aebc:	e03a      	b.n	801af34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801aebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aec0:	88db      	ldrh	r3, [r3, #6]
 801aec2:	b29a      	uxth	r2, r3
 801aec4:	693b      	ldr	r3, [r7, #16]
 801aec6:	889b      	ldrh	r3, [r3, #4]
 801aec8:	b29b      	uxth	r3, r3
 801aeca:	429a      	cmp	r2, r3
 801aecc:	d902      	bls.n	801aed4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aece:	f04f 33ff 	mov.w	r3, #4294967295
 801aed2:	e0c5      	b.n	801b060 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	68ba      	ldr	r2, [r7, #8]
 801aed8:	605a      	str	r2, [r3, #4]
      break;
 801aeda:	e02b      	b.n	801af34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801aedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aede:	889b      	ldrh	r3, [r3, #4]
 801aee0:	b29a      	uxth	r2, r3
 801aee2:	693b      	ldr	r3, [r7, #16]
 801aee4:	889b      	ldrh	r3, [r3, #4]
 801aee6:	b29b      	uxth	r3, r3
 801aee8:	429a      	cmp	r2, r3
 801aeea:	d102      	bne.n	801aef2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aeec:	f04f 33ff 	mov.w	r3, #4294967295
 801aef0:	e0b6      	b.n	801b060 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801aef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aef4:	889b      	ldrh	r3, [r3, #4]
 801aef6:	b29a      	uxth	r2, r3
 801aef8:	693b      	ldr	r3, [r7, #16]
 801aefa:	88db      	ldrh	r3, [r3, #6]
 801aefc:	b29b      	uxth	r3, r3
 801aefe:	429a      	cmp	r2, r3
 801af00:	d202      	bcs.n	801af08 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801af02:	f04f 33ff 	mov.w	r3, #4294967295
 801af06:	e0ab      	b.n	801b060 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801af08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d009      	beq.n	801af22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801af0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af10:	88db      	ldrh	r3, [r3, #6]
 801af12:	b29a      	uxth	r2, r3
 801af14:	693b      	ldr	r3, [r7, #16]
 801af16:	889b      	ldrh	r3, [r3, #4]
 801af18:	b29b      	uxth	r3, r3
 801af1a:	429a      	cmp	r2, r3
 801af1c:	d001      	beq.n	801af22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801af1e:	2300      	movs	r3, #0
 801af20:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801af22:	693b      	ldr	r3, [r7, #16]
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801af28:	693b      	ldr	r3, [r7, #16]
 801af2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801af2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d193      	bne.n	801ae5a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801af32:	e000      	b.n	801af36 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801af34:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d12d      	bne.n	801af98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801af3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d01c      	beq.n	801af7c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801af42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af44:	88db      	ldrh	r3, [r3, #6]
 801af46:	b29a      	uxth	r2, r3
 801af48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af4a:	889b      	ldrh	r3, [r3, #4]
 801af4c:	b29b      	uxth	r3, r3
 801af4e:	429a      	cmp	r2, r3
 801af50:	d906      	bls.n	801af60 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801af52:	4b45      	ldr	r3, [pc, #276]	@ (801b068 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801af54:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801af58:	4944      	ldr	r1, [pc, #272]	@ (801b06c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801af5a:	4845      	ldr	r0, [pc, #276]	@ (801b070 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801af5c:	f001 fc68 	bl	801c830 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801af60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af62:	68ba      	ldr	r2, [r7, #8]
 801af64:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801af66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af68:	88db      	ldrh	r3, [r3, #6]
 801af6a:	b29a      	uxth	r2, r3
 801af6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af6e:	889b      	ldrh	r3, [r3, #4]
 801af70:	b29b      	uxth	r3, r3
 801af72:	429a      	cmp	r2, r3
 801af74:	d010      	beq.n	801af98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801af76:	2300      	movs	r3, #0
 801af78:	623b      	str	r3, [r7, #32]
 801af7a:	e00d      	b.n	801af98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	685b      	ldr	r3, [r3, #4]
 801af80:	2b00      	cmp	r3, #0
 801af82:	d006      	beq.n	801af92 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801af84:	4b38      	ldr	r3, [pc, #224]	@ (801b068 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801af86:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801af8a:	493a      	ldr	r1, [pc, #232]	@ (801b074 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801af8c:	4838      	ldr	r0, [pc, #224]	@ (801b070 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801af8e:	f001 fc4f 	bl	801c830 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	68ba      	ldr	r2, [r7, #8]
 801af96:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d105      	bne.n	801afaa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	7f9b      	ldrb	r3, [r3, #30]
 801afa2:	f003 0301 	and.w	r3, r3, #1
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d059      	beq.n	801b05e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801afaa:	6a3b      	ldr	r3, [r7, #32]
 801afac:	2b00      	cmp	r3, #0
 801afae:	d04f      	beq.n	801b050 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	685b      	ldr	r3, [r3, #4]
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d006      	beq.n	801afc6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	685b      	ldr	r3, [r3, #4]
 801afbc:	685b      	ldr	r3, [r3, #4]
 801afbe:	889b      	ldrh	r3, [r3, #4]
 801afc0:	b29b      	uxth	r3, r3
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d002      	beq.n	801afcc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801afc6:	2300      	movs	r3, #0
 801afc8:	623b      	str	r3, [r7, #32]
 801afca:	e041      	b.n	801b050 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801afcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afce:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801afd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801afd6:	e012      	b.n	801affe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801afd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afda:	685b      	ldr	r3, [r3, #4]
 801afdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801afde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801afe0:	88db      	ldrh	r3, [r3, #6]
 801afe2:	b29a      	uxth	r2, r3
 801afe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afe6:	889b      	ldrh	r3, [r3, #4]
 801afe8:	b29b      	uxth	r3, r3
 801afea:	429a      	cmp	r2, r3
 801afec:	d002      	beq.n	801aff4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801afee:	2300      	movs	r3, #0
 801aff0:	623b      	str	r3, [r7, #32]
            break;
 801aff2:	e007      	b.n	801b004 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801aff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aff6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801aff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801affe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b000:	2b00      	cmp	r3, #0
 801b002:	d1e9      	bne.n	801afd8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b004:	6a3b      	ldr	r3, [r7, #32]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d022      	beq.n	801b050 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	685b      	ldr	r3, [r3, #4]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d106      	bne.n	801b020 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b012:	4b15      	ldr	r3, [pc, #84]	@ (801b068 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b014:	f240 12df 	movw	r2, #479	@ 0x1df
 801b018:	4917      	ldr	r1, [pc, #92]	@ (801b078 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b01a:	4815      	ldr	r0, [pc, #84]	@ (801b070 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b01c:	f001 fc08 	bl	801c830 <iprintf>
          LWIP_ASSERT("sanity check",
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	685b      	ldr	r3, [r3, #4]
 801b024:	685b      	ldr	r3, [r3, #4]
 801b026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b028:	429a      	cmp	r2, r3
 801b02a:	d106      	bne.n	801b03a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b02c:	4b0e      	ldr	r3, [pc, #56]	@ (801b068 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b02e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801b032:	4911      	ldr	r1, [pc, #68]	@ (801b078 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b034:	480e      	ldr	r0, [pc, #56]	@ (801b070 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b036:	f001 fbfb 	bl	801c830 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	2b00      	cmp	r3, #0
 801b040:	d006      	beq.n	801b050 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801b042:	4b09      	ldr	r3, [pc, #36]	@ (801b068 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b044:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801b048:	490c      	ldr	r1, [pc, #48]	@ (801b07c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801b04a:	4809      	ldr	r0, [pc, #36]	@ (801b070 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b04c:	f001 fbf0 	bl	801c830 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b050:	6a3b      	ldr	r3, [r7, #32]
 801b052:	2b00      	cmp	r3, #0
 801b054:	bf14      	ite	ne
 801b056:	2301      	movne	r3, #1
 801b058:	2300      	moveq	r3, #0
 801b05a:	b2db      	uxtb	r3, r3
 801b05c:	e000      	b.n	801b060 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b05e:	2300      	movs	r3, #0
}
 801b060:	4618      	mov	r0, r3
 801b062:	3730      	adds	r7, #48	@ 0x30
 801b064:	46bd      	mov	sp, r7
 801b066:	bd80      	pop	{r7, pc}
 801b068:	080220e4 	.word	0x080220e4
 801b06c:	080221c8 	.word	0x080221c8
 801b070:	0802212c 	.word	0x0802212c
 801b074:	080221e8 	.word	0x080221e8
 801b078:	08022220 	.word	0x08022220
 801b07c:	08022230 	.word	0x08022230

0801b080 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b080:	b580      	push	{r7, lr}
 801b082:	b08e      	sub	sp, #56	@ 0x38
 801b084:	af00      	add	r7, sp, #0
 801b086:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	685b      	ldr	r3, [r3, #4]
 801b08c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b090:	781b      	ldrb	r3, [r3, #0]
 801b092:	f003 030f 	and.w	r3, r3, #15
 801b096:	b2db      	uxtb	r3, r3
 801b098:	009b      	lsls	r3, r3, #2
 801b09a:	b2db      	uxtb	r3, r3
 801b09c:	2b14      	cmp	r3, #20
 801b09e:	f040 8179 	bne.w	801b394 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801b0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0a4:	88db      	ldrh	r3, [r3, #6]
 801b0a6:	b29b      	uxth	r3, r3
 801b0a8:	4618      	mov	r0, r3
 801b0aa:	f7f4 f861 	bl	800f170 <lwip_htons>
 801b0ae:	4603      	mov	r3, r0
 801b0b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b0b4:	b29b      	uxth	r3, r3
 801b0b6:	00db      	lsls	r3, r3, #3
 801b0b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0bc:	885b      	ldrh	r3, [r3, #2]
 801b0be:	b29b      	uxth	r3, r3
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	f7f4 f855 	bl	800f170 <lwip_htons>
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801b0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0cc:	781b      	ldrb	r3, [r3, #0]
 801b0ce:	f003 030f 	and.w	r3, r3, #15
 801b0d2:	b2db      	uxtb	r3, r3
 801b0d4:	009b      	lsls	r3, r3, #2
 801b0d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801b0da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b0de:	b29b      	uxth	r3, r3
 801b0e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b0e2:	429a      	cmp	r2, r3
 801b0e4:	f0c0 8158 	bcc.w	801b398 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801b0e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b0ec:	b29b      	uxth	r3, r3
 801b0ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b0f0:	1ad3      	subs	r3, r2, r3
 801b0f2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b0f4:	6878      	ldr	r0, [r7, #4]
 801b0f6:	f7f5 fdeb 	bl	8010cd0 <pbuf_clen>
 801b0fa:	4603      	mov	r3, r0
 801b0fc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b0fe:	4b90      	ldr	r3, [pc, #576]	@ (801b340 <ip4_reass+0x2c0>)
 801b100:	881b      	ldrh	r3, [r3, #0]
 801b102:	461a      	mov	r2, r3
 801b104:	8c3b      	ldrh	r3, [r7, #32]
 801b106:	4413      	add	r3, r2
 801b108:	2b0a      	cmp	r3, #10
 801b10a:	dd10      	ble.n	801b12e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b10c:	8c3b      	ldrh	r3, [r7, #32]
 801b10e:	4619      	mov	r1, r3
 801b110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b112:	f7ff fd81 	bl	801ac18 <ip_reass_remove_oldest_datagram>
 801b116:	4603      	mov	r3, r0
 801b118:	2b00      	cmp	r3, #0
 801b11a:	f000 813f 	beq.w	801b39c <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b11e:	4b88      	ldr	r3, [pc, #544]	@ (801b340 <ip4_reass+0x2c0>)
 801b120:	881b      	ldrh	r3, [r3, #0]
 801b122:	461a      	mov	r2, r3
 801b124:	8c3b      	ldrh	r3, [r7, #32]
 801b126:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b128:	2b0a      	cmp	r3, #10
 801b12a:	f300 8137 	bgt.w	801b39c <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b12e:	4b85      	ldr	r3, [pc, #532]	@ (801b344 <ip4_reass+0x2c4>)
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	633b      	str	r3, [r7, #48]	@ 0x30
 801b134:	e015      	b.n	801b162 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b138:	695a      	ldr	r2, [r3, #20]
 801b13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b13c:	68db      	ldr	r3, [r3, #12]
 801b13e:	429a      	cmp	r2, r3
 801b140:	d10c      	bne.n	801b15c <ip4_reass+0xdc>
 801b142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b144:	699a      	ldr	r2, [r3, #24]
 801b146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b148:	691b      	ldr	r3, [r3, #16]
 801b14a:	429a      	cmp	r2, r3
 801b14c:	d106      	bne.n	801b15c <ip4_reass+0xdc>
 801b14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b150:	899a      	ldrh	r2, [r3, #12]
 801b152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b154:	889b      	ldrh	r3, [r3, #4]
 801b156:	b29b      	uxth	r3, r3
 801b158:	429a      	cmp	r2, r3
 801b15a:	d006      	beq.n	801b16a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	633b      	str	r3, [r7, #48]	@ 0x30
 801b162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b164:	2b00      	cmp	r3, #0
 801b166:	d1e6      	bne.n	801b136 <ip4_reass+0xb6>
 801b168:	e000      	b.n	801b16c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b16a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d109      	bne.n	801b186 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b172:	8c3b      	ldrh	r3, [r7, #32]
 801b174:	4619      	mov	r1, r3
 801b176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b178:	f7ff fdb0 	bl	801acdc <ip_reass_enqueue_new_datagram>
 801b17c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b180:	2b00      	cmp	r3, #0
 801b182:	d11c      	bne.n	801b1be <ip4_reass+0x13e>
      goto nullreturn;
 801b184:	e10d      	b.n	801b3a2 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b188:	88db      	ldrh	r3, [r3, #6]
 801b18a:	b29b      	uxth	r3, r3
 801b18c:	4618      	mov	r0, r3
 801b18e:	f7f3 ffef 	bl	800f170 <lwip_htons>
 801b192:	4603      	mov	r3, r0
 801b194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d110      	bne.n	801b1be <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b19e:	89db      	ldrh	r3, [r3, #14]
 801b1a0:	4618      	mov	r0, r3
 801b1a2:	f7f3 ffe5 	bl	800f170 <lwip_htons>
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d006      	beq.n	801b1be <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b1b2:	3308      	adds	r3, #8
 801b1b4:	2214      	movs	r2, #20
 801b1b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	f001 fd58 	bl	801cc6e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b1c0:	88db      	ldrh	r3, [r3, #6]
 801b1c2:	b29b      	uxth	r3, r3
 801b1c4:	f003 0320 	and.w	r3, r3, #32
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	bf0c      	ite	eq
 801b1cc:	2301      	moveq	r3, #1
 801b1ce:	2300      	movne	r3, #0
 801b1d0:	b2db      	uxtb	r3, r3
 801b1d2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b1d4:	69fb      	ldr	r3, [r7, #28]
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	d00e      	beq.n	801b1f8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801b1da:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801b1dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b1de:	4413      	add	r3, r2
 801b1e0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b1e2:	8b7a      	ldrh	r2, [r7, #26]
 801b1e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b1e6:	429a      	cmp	r2, r3
 801b1e8:	f0c0 80a8 	bcc.w	801b33c <ip4_reass+0x2bc>
 801b1ec:	8b7b      	ldrh	r3, [r7, #26]
 801b1ee:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801b1f2:	4293      	cmp	r3, r2
 801b1f4:	f200 80a2 	bhi.w	801b33c <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b1f8:	69fa      	ldr	r2, [r7, #28]
 801b1fa:	6879      	ldr	r1, [r7, #4]
 801b1fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b1fe:	f7ff fdd5 	bl	801adac <ip_reass_chain_frag_into_datagram_and_validate>
 801b202:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b204:	697b      	ldr	r3, [r7, #20]
 801b206:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b20a:	f000 80a3 	beq.w	801b354 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b20e:	4b4c      	ldr	r3, [pc, #304]	@ (801b340 <ip4_reass+0x2c0>)
 801b210:	881a      	ldrh	r2, [r3, #0]
 801b212:	8c3b      	ldrh	r3, [r7, #32]
 801b214:	4413      	add	r3, r2
 801b216:	b29a      	uxth	r2, r3
 801b218:	4b49      	ldr	r3, [pc, #292]	@ (801b340 <ip4_reass+0x2c0>)
 801b21a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b21c:	69fb      	ldr	r3, [r7, #28]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d00d      	beq.n	801b23e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801b222:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801b224:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b226:	4413      	add	r3, r2
 801b228:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b22c:	8a7a      	ldrh	r2, [r7, #18]
 801b22e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b232:	7f9b      	ldrb	r3, [r3, #30]
 801b234:	f043 0301 	orr.w	r3, r3, #1
 801b238:	b2da      	uxtb	r2, r3
 801b23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b23c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b23e:	697b      	ldr	r3, [r7, #20]
 801b240:	2b01      	cmp	r3, #1
 801b242:	d179      	bne.n	801b338 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b246:	8b9b      	ldrh	r3, [r3, #28]
 801b248:	3314      	adds	r3, #20
 801b24a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b24e:	685b      	ldr	r3, [r3, #4]
 801b250:	685b      	ldr	r3, [r3, #4]
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b258:	685b      	ldr	r3, [r3, #4]
 801b25a:	685b      	ldr	r3, [r3, #4]
 801b25c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b260:	3308      	adds	r3, #8
 801b262:	2214      	movs	r2, #20
 801b264:	4619      	mov	r1, r3
 801b266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b268:	f001 fd01 	bl	801cc6e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b26c:	8a3b      	ldrh	r3, [r7, #16]
 801b26e:	4618      	mov	r0, r3
 801b270:	f7f3 ff7e 	bl	800f170 <lwip_htons>
 801b274:	4603      	mov	r3, r0
 801b276:	461a      	mov	r2, r3
 801b278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b27a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b27e:	2200      	movs	r2, #0
 801b280:	719a      	strb	r2, [r3, #6]
 801b282:	2200      	movs	r2, #0
 801b284:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b288:	2200      	movs	r2, #0
 801b28a:	729a      	strb	r2, [r3, #10]
 801b28c:	2200      	movs	r2, #0
 801b28e:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801b290:	2114      	movs	r1, #20
 801b292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b294:	f7f4 f8b4 	bl	800f400 <inet_chksum>
 801b298:	4603      	mov	r3, r0
 801b29a:	461a      	mov	r2, r3
 801b29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b29e:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b2a2:	685b      	ldr	r3, [r3, #4]
 801b2a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b2a6:	e00d      	b.n	801b2c4 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 801b2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2aa:	685b      	ldr	r3, [r3, #4]
 801b2ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b2ae:	2114      	movs	r1, #20
 801b2b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b2b2:	f7f5 fbf9 	bl	8010aa8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801b2b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b2b8:	6878      	ldr	r0, [r7, #4]
 801b2ba:	f7f5 fd49 	bl	8010d50 <pbuf_cat>
      r = iprh->next_pbuf;
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801b2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d1ee      	bne.n	801b2a8 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b2ca:	4b1e      	ldr	r3, [pc, #120]	@ (801b344 <ip4_reass+0x2c4>)
 801b2cc:	681b      	ldr	r3, [r3, #0]
 801b2ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b2d0:	429a      	cmp	r2, r3
 801b2d2:	d102      	bne.n	801b2da <ip4_reass+0x25a>
      ipr_prev = NULL;
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	637b      	str	r3, [r7, #52]	@ 0x34
 801b2d8:	e010      	b.n	801b2fc <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b2da:	4b1a      	ldr	r3, [pc, #104]	@ (801b344 <ip4_reass+0x2c4>)
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	637b      	str	r3, [r7, #52]	@ 0x34
 801b2e0:	e007      	b.n	801b2f2 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 801b2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b2e8:	429a      	cmp	r2, r3
 801b2ea:	d006      	beq.n	801b2fa <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b2ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	637b      	str	r3, [r7, #52]	@ 0x34
 801b2f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d1f4      	bne.n	801b2e2 <ip4_reass+0x262>
 801b2f8:	e000      	b.n	801b2fc <ip4_reass+0x27c>
          break;
 801b2fa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b2fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801b2fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b300:	f7ff fd26 	bl	801ad50 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b304:	6878      	ldr	r0, [r7, #4]
 801b306:	f7f5 fce3 	bl	8010cd0 <pbuf_clen>
 801b30a:	4603      	mov	r3, r0
 801b30c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b30e:	4b0c      	ldr	r3, [pc, #48]	@ (801b340 <ip4_reass+0x2c0>)
 801b310:	881b      	ldrh	r3, [r3, #0]
 801b312:	8c3a      	ldrh	r2, [r7, #32]
 801b314:	429a      	cmp	r2, r3
 801b316:	d906      	bls.n	801b326 <ip4_reass+0x2a6>
 801b318:	4b0b      	ldr	r3, [pc, #44]	@ (801b348 <ip4_reass+0x2c8>)
 801b31a:	f240 229b 	movw	r2, #667	@ 0x29b
 801b31e:	490b      	ldr	r1, [pc, #44]	@ (801b34c <ip4_reass+0x2cc>)
 801b320:	480b      	ldr	r0, [pc, #44]	@ (801b350 <ip4_reass+0x2d0>)
 801b322:	f001 fa85 	bl	801c830 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b326:	4b06      	ldr	r3, [pc, #24]	@ (801b340 <ip4_reass+0x2c0>)
 801b328:	881a      	ldrh	r2, [r3, #0]
 801b32a:	8c3b      	ldrh	r3, [r7, #32]
 801b32c:	1ad3      	subs	r3, r2, r3
 801b32e:	b29a      	uxth	r2, r3
 801b330:	4b03      	ldr	r3, [pc, #12]	@ (801b340 <ip4_reass+0x2c0>)
 801b332:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	e038      	b.n	801b3aa <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b338:	2300      	movs	r3, #0
 801b33a:	e036      	b.n	801b3aa <ip4_reass+0x32a>
      goto nullreturn_ipr;
 801b33c:	bf00      	nop
 801b33e:	e00a      	b.n	801b356 <ip4_reass+0x2d6>
 801b340:	20013ed8 	.word	0x20013ed8
 801b344:	20013ed4 	.word	0x20013ed4
 801b348:	080220e4 	.word	0x080220e4
 801b34c:	08022254 	.word	0x08022254
 801b350:	0802212c 	.word	0x0802212c
    goto nullreturn_ipr;
 801b354:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d106      	bne.n	801b36a <ip4_reass+0x2ea>
 801b35c:	4b15      	ldr	r3, [pc, #84]	@ (801b3b4 <ip4_reass+0x334>)
 801b35e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801b362:	4915      	ldr	r1, [pc, #84]	@ (801b3b8 <ip4_reass+0x338>)
 801b364:	4815      	ldr	r0, [pc, #84]	@ (801b3bc <ip4_reass+0x33c>)
 801b366:	f001 fa63 	bl	801c830 <iprintf>
  if (ipr->p == NULL) {
 801b36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b36c:	685b      	ldr	r3, [r3, #4]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d116      	bne.n	801b3a0 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b372:	4b13      	ldr	r3, [pc, #76]	@ (801b3c0 <ip4_reass+0x340>)
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b378:	429a      	cmp	r2, r3
 801b37a:	d006      	beq.n	801b38a <ip4_reass+0x30a>
 801b37c:	4b0d      	ldr	r3, [pc, #52]	@ (801b3b4 <ip4_reass+0x334>)
 801b37e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801b382:	4910      	ldr	r1, [pc, #64]	@ (801b3c4 <ip4_reass+0x344>)
 801b384:	480d      	ldr	r0, [pc, #52]	@ (801b3bc <ip4_reass+0x33c>)
 801b386:	f001 fa53 	bl	801c830 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b38a:	2100      	movs	r1, #0
 801b38c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b38e:	f7ff fcdf 	bl	801ad50 <ip_reass_dequeue_datagram>
 801b392:	e006      	b.n	801b3a2 <ip4_reass+0x322>
    goto nullreturn;
 801b394:	bf00      	nop
 801b396:	e004      	b.n	801b3a2 <ip4_reass+0x322>
    goto nullreturn;
 801b398:	bf00      	nop
 801b39a:	e002      	b.n	801b3a2 <ip4_reass+0x322>
      goto nullreturn;
 801b39c:	bf00      	nop
 801b39e:	e000      	b.n	801b3a2 <ip4_reass+0x322>
  }

nullreturn:
 801b3a0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b3a2:	6878      	ldr	r0, [r7, #4]
 801b3a4:	f7f5 fc06 	bl	8010bb4 <pbuf_free>
  return NULL;
 801b3a8:	2300      	movs	r3, #0
}
 801b3aa:	4618      	mov	r0, r3
 801b3ac:	3738      	adds	r7, #56	@ 0x38
 801b3ae:	46bd      	mov	sp, r7
 801b3b0:	bd80      	pop	{r7, pc}
 801b3b2:	bf00      	nop
 801b3b4:	080220e4 	.word	0x080220e4
 801b3b8:	08022270 	.word	0x08022270
 801b3bc:	0802212c 	.word	0x0802212c
 801b3c0:	20013ed4 	.word	0x20013ed4
 801b3c4:	0802227c 	.word	0x0802227c

0801b3c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b3c8:	b580      	push	{r7, lr}
 801b3ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b3cc:	2005      	movs	r0, #5
 801b3ce:	f7f4 fcfd 	bl	800fdcc <memp_malloc>
 801b3d2:	4603      	mov	r3, r0
}
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	bd80      	pop	{r7, pc}

0801b3d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b082      	sub	sp, #8
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d106      	bne.n	801b3f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b3e6:	4b07      	ldr	r3, [pc, #28]	@ (801b404 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b3e8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801b3ec:	4906      	ldr	r1, [pc, #24]	@ (801b408 <ip_frag_free_pbuf_custom_ref+0x30>)
 801b3ee:	4807      	ldr	r0, [pc, #28]	@ (801b40c <ip_frag_free_pbuf_custom_ref+0x34>)
 801b3f0:	f001 fa1e 	bl	801c830 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b3f4:	6879      	ldr	r1, [r7, #4]
 801b3f6:	2005      	movs	r0, #5
 801b3f8:	f7f4 fd3a 	bl	800fe70 <memp_free>
}
 801b3fc:	bf00      	nop
 801b3fe:	3708      	adds	r7, #8
 801b400:	46bd      	mov	sp, r7
 801b402:	bd80      	pop	{r7, pc}
 801b404:	080220e4 	.word	0x080220e4
 801b408:	0802229c 	.word	0x0802229c
 801b40c:	0802212c 	.word	0x0802212c

0801b410 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b410:	b580      	push	{r7, lr}
 801b412:	b084      	sub	sp, #16
 801b414:	af00      	add	r7, sp, #0
 801b416:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d106      	bne.n	801b430 <ipfrag_free_pbuf_custom+0x20>
 801b422:	4b11      	ldr	r3, [pc, #68]	@ (801b468 <ipfrag_free_pbuf_custom+0x58>)
 801b424:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801b428:	4910      	ldr	r1, [pc, #64]	@ (801b46c <ipfrag_free_pbuf_custom+0x5c>)
 801b42a:	4811      	ldr	r0, [pc, #68]	@ (801b470 <ipfrag_free_pbuf_custom+0x60>)
 801b42c:	f001 fa00 	bl	801c830 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b430:	68fa      	ldr	r2, [r7, #12]
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	429a      	cmp	r2, r3
 801b436:	d006      	beq.n	801b446 <ipfrag_free_pbuf_custom+0x36>
 801b438:	4b0b      	ldr	r3, [pc, #44]	@ (801b468 <ipfrag_free_pbuf_custom+0x58>)
 801b43a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801b43e:	490d      	ldr	r1, [pc, #52]	@ (801b474 <ipfrag_free_pbuf_custom+0x64>)
 801b440:	480b      	ldr	r0, [pc, #44]	@ (801b470 <ipfrag_free_pbuf_custom+0x60>)
 801b442:	f001 f9f5 	bl	801c830 <iprintf>
  if (pcr->original != NULL) {
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	695b      	ldr	r3, [r3, #20]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d004      	beq.n	801b458 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	695b      	ldr	r3, [r3, #20]
 801b452:	4618      	mov	r0, r3
 801b454:	f7f5 fbae 	bl	8010bb4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b458:	68f8      	ldr	r0, [r7, #12]
 801b45a:	f7ff ffbd 	bl	801b3d8 <ip_frag_free_pbuf_custom_ref>
}
 801b45e:	bf00      	nop
 801b460:	3710      	adds	r7, #16
 801b462:	46bd      	mov	sp, r7
 801b464:	bd80      	pop	{r7, pc}
 801b466:	bf00      	nop
 801b468:	080220e4 	.word	0x080220e4
 801b46c:	080222a8 	.word	0x080222a8
 801b470:	0802212c 	.word	0x0802212c
 801b474:	080222b4 	.word	0x080222b4

0801b478 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b478:	b580      	push	{r7, lr}
 801b47a:	b094      	sub	sp, #80	@ 0x50
 801b47c:	af02      	add	r7, sp, #8
 801b47e:	60f8      	str	r0, [r7, #12]
 801b480:	60b9      	str	r1, [r7, #8]
 801b482:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b484:	2300      	movs	r3, #0
 801b486:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b48a:	68bb      	ldr	r3, [r7, #8]
 801b48c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b48e:	3b14      	subs	r3, #20
 801b490:	2b00      	cmp	r3, #0
 801b492:	da00      	bge.n	801b496 <ip4_frag+0x1e>
 801b494:	3307      	adds	r3, #7
 801b496:	10db      	asrs	r3, r3, #3
 801b498:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b49a:	2314      	movs	r3, #20
 801b49c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b49e:	68fb      	ldr	r3, [r7, #12]
 801b4a0:	685b      	ldr	r3, [r3, #4]
 801b4a2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801b4a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b4a6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b4aa:	781b      	ldrb	r3, [r3, #0]
 801b4ac:	f003 030f 	and.w	r3, r3, #15
 801b4b0:	b2db      	uxtb	r3, r3
 801b4b2:	009b      	lsls	r3, r3, #2
 801b4b4:	b2db      	uxtb	r3, r3
 801b4b6:	2b14      	cmp	r3, #20
 801b4b8:	d002      	beq.n	801b4c0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b4ba:	f06f 0305 	mvn.w	r3, #5
 801b4be:	e118      	b.n	801b6f2 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	895b      	ldrh	r3, [r3, #10]
 801b4c4:	2b13      	cmp	r3, #19
 801b4c6:	d809      	bhi.n	801b4dc <ip4_frag+0x64>
 801b4c8:	4b8c      	ldr	r3, [pc, #560]	@ (801b6fc <ip4_frag+0x284>)
 801b4ca:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801b4ce:	498c      	ldr	r1, [pc, #560]	@ (801b700 <ip4_frag+0x288>)
 801b4d0:	488c      	ldr	r0, [pc, #560]	@ (801b704 <ip4_frag+0x28c>)
 801b4d2:	f001 f9ad 	bl	801c830 <iprintf>
 801b4d6:	f06f 0305 	mvn.w	r3, #5
 801b4da:	e10a      	b.n	801b6f2 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b4de:	88db      	ldrh	r3, [r3, #6]
 801b4e0:	b29b      	uxth	r3, r3
 801b4e2:	4618      	mov	r0, r3
 801b4e4:	f7f3 fe44 	bl	800f170 <lwip_htons>
 801b4e8:	4603      	mov	r3, r0
 801b4ea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801b4ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b4ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b4f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b4f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b4f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b4fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b4fe:	68fb      	ldr	r3, [r7, #12]
 801b500:	891b      	ldrh	r3, [r3, #8]
 801b502:	3b14      	subs	r3, #20
 801b504:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801b508:	e0e9      	b.n	801b6de <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b50a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801b50c:	00db      	lsls	r3, r3, #3
 801b50e:	b29b      	uxth	r3, r3
 801b510:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801b514:	4293      	cmp	r3, r2
 801b516:	bf28      	it	cs
 801b518:	4613      	movcs	r3, r2
 801b51a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b51c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b520:	2114      	movs	r1, #20
 801b522:	200e      	movs	r0, #14
 801b524:	f7f5 f85e 	bl	80105e4 <pbuf_alloc>
 801b528:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801b52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	f000 80dd 	beq.w	801b6ec <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b534:	895b      	ldrh	r3, [r3, #10]
 801b536:	2b13      	cmp	r3, #19
 801b538:	d806      	bhi.n	801b548 <ip4_frag+0xd0>
 801b53a:	4b70      	ldr	r3, [pc, #448]	@ (801b6fc <ip4_frag+0x284>)
 801b53c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801b540:	4971      	ldr	r1, [pc, #452]	@ (801b708 <ip4_frag+0x290>)
 801b542:	4870      	ldr	r0, [pc, #448]	@ (801b704 <ip4_frag+0x28c>)
 801b544:	f001 f974 	bl	801c830 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b54a:	685b      	ldr	r3, [r3, #4]
 801b54c:	2214      	movs	r2, #20
 801b54e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801b550:	4618      	mov	r0, r3
 801b552:	f001 fb8c 	bl	801cc6e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b558:	685b      	ldr	r3, [r3, #4]
 801b55a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801b55c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801b55e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801b562:	e064      	b.n	801b62e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b564:	68fb      	ldr	r3, [r7, #12]
 801b566:	895a      	ldrh	r2, [r3, #10]
 801b568:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b56a:	1ad3      	subs	r3, r2, r3
 801b56c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	895b      	ldrh	r3, [r3, #10]
 801b572:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801b574:	429a      	cmp	r2, r3
 801b576:	d906      	bls.n	801b586 <ip4_frag+0x10e>
 801b578:	4b60      	ldr	r3, [pc, #384]	@ (801b6fc <ip4_frag+0x284>)
 801b57a:	f240 322d 	movw	r2, #813	@ 0x32d
 801b57e:	4963      	ldr	r1, [pc, #396]	@ (801b70c <ip4_frag+0x294>)
 801b580:	4860      	ldr	r0, [pc, #384]	@ (801b704 <ip4_frag+0x28c>)
 801b582:	f001 f955 	bl	801c830 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b586:	8bfa      	ldrh	r2, [r7, #30]
 801b588:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801b58c:	4293      	cmp	r3, r2
 801b58e:	bf28      	it	cs
 801b590:	4613      	movcs	r3, r2
 801b592:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b596:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d105      	bne.n	801b5aa <ip4_frag+0x132>
        poff = 0;
 801b59e:	2300      	movs	r3, #0
 801b5a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	60fb      	str	r3, [r7, #12]
        continue;
 801b5a8:	e041      	b.n	801b62e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b5aa:	f7ff ff0d 	bl	801b3c8 <ip_frag_alloc_pbuf_custom_ref>
 801b5ae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b5b0:	69bb      	ldr	r3, [r7, #24]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d103      	bne.n	801b5be <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b5b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b5b8:	f7f5 fafc 	bl	8010bb4 <pbuf_free>
        goto memerr;
 801b5bc:	e097      	b.n	801b6ee <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b5be:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b5c0:	68fb      	ldr	r3, [r7, #12]
 801b5c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b5c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b5c6:	4413      	add	r3, r2
 801b5c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801b5cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801b5d0:	9201      	str	r2, [sp, #4]
 801b5d2:	9300      	str	r3, [sp, #0]
 801b5d4:	4603      	mov	r3, r0
 801b5d6:	2241      	movs	r2, #65	@ 0x41
 801b5d8:	2000      	movs	r0, #0
 801b5da:	f7f5 f931 	bl	8010840 <pbuf_alloced_custom>
 801b5de:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b5e0:	697b      	ldr	r3, [r7, #20]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d106      	bne.n	801b5f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b5e6:	69b8      	ldr	r0, [r7, #24]
 801b5e8:	f7ff fef6 	bl	801b3d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b5ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b5ee:	f7f5 fae1 	bl	8010bb4 <pbuf_free>
        goto memerr;
 801b5f2:	e07c      	b.n	801b6ee <ip4_frag+0x276>
      }
      pbuf_ref(p);
 801b5f4:	68f8      	ldr	r0, [r7, #12]
 801b5f6:	f7f5 fb83 	bl	8010d00 <pbuf_ref>
      pcr->original = p;
 801b5fa:	69bb      	ldr	r3, [r7, #24]
 801b5fc:	68fa      	ldr	r2, [r7, #12]
 801b5fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b600:	69bb      	ldr	r3, [r7, #24]
 801b602:	4a43      	ldr	r2, [pc, #268]	@ (801b710 <ip4_frag+0x298>)
 801b604:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b606:	6979      	ldr	r1, [r7, #20]
 801b608:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b60a:	f7f5 fba1 	bl	8010d50 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b60e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801b612:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801b616:	1ad3      	subs	r3, r2, r3
 801b618:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801b61c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801b620:	2b00      	cmp	r3, #0
 801b622:	d004      	beq.n	801b62e <ip4_frag+0x1b6>
        poff = 0;
 801b624:	2300      	movs	r3, #0
 801b626:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	681b      	ldr	r3, [r3, #0]
 801b62c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b62e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801b632:	2b00      	cmp	r3, #0
 801b634:	d196      	bne.n	801b564 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b636:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801b638:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801b63c:	4413      	add	r3, r2
 801b63e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b640:	68bb      	ldr	r3, [r7, #8]
 801b642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b644:	f1a3 0213 	sub.w	r2, r3, #19
 801b648:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801b64c:	429a      	cmp	r2, r3
 801b64e:	bfcc      	ite	gt
 801b650:	2301      	movgt	r3, #1
 801b652:	2300      	movle	r3, #0
 801b654:	b2db      	uxtb	r3, r3
 801b656:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b658:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801b65c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b660:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801b662:	6a3b      	ldr	r3, [r7, #32]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d002      	beq.n	801b66e <ip4_frag+0x1f6>
 801b668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d003      	beq.n	801b676 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b66e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b670:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801b674:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b676:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b678:	4618      	mov	r0, r3
 801b67a:	f7f3 fd79 	bl	800f170 <lwip_htons>
 801b67e:	4603      	mov	r3, r0
 801b680:	461a      	mov	r2, r3
 801b682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b684:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b686:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801b688:	3314      	adds	r3, #20
 801b68a:	b29b      	uxth	r3, r3
 801b68c:	4618      	mov	r0, r3
 801b68e:	f7f3 fd6f 	bl	800f170 <lwip_htons>
 801b692:	4603      	mov	r3, r0
 801b694:	461a      	mov	r2, r3
 801b696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b698:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b69c:	2200      	movs	r2, #0
 801b69e:	729a      	strb	r2, [r3, #10]
 801b6a0:	2200      	movs	r2, #0
 801b6a2:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801b6a4:	2114      	movs	r1, #20
 801b6a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b6a8:	f7f3 feaa 	bl	800f400 <inet_chksum>
 801b6ac:	4603      	mov	r3, r0
 801b6ae:	461a      	mov	r2, r3
 801b6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b6b2:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b6b4:	68bb      	ldr	r3, [r7, #8]
 801b6b6:	695b      	ldr	r3, [r3, #20]
 801b6b8:	687a      	ldr	r2, [r7, #4]
 801b6ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b6bc:	68b8      	ldr	r0, [r7, #8]
 801b6be:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b6c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b6c2:	f7f5 fa77 	bl	8010bb4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b6c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801b6ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801b6cc:	1ad3      	subs	r3, r2, r3
 801b6ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801b6d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801b6d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801b6d8:	4413      	add	r3, r2
 801b6da:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801b6de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	f47f af11 	bne.w	801b50a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	e002      	b.n	801b6f2 <ip4_frag+0x27a>
      goto memerr;
 801b6ec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b6ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b6f2:	4618      	mov	r0, r3
 801b6f4:	3748      	adds	r7, #72	@ 0x48
 801b6f6:	46bd      	mov	sp, r7
 801b6f8:	bd80      	pop	{r7, pc}
 801b6fa:	bf00      	nop
 801b6fc:	080220e4 	.word	0x080220e4
 801b700:	080222c0 	.word	0x080222c0
 801b704:	0802212c 	.word	0x0802212c
 801b708:	080222dc 	.word	0x080222dc
 801b70c:	080222fc 	.word	0x080222fc
 801b710:	0801b411 	.word	0x0801b411

0801b714 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b714:	b580      	push	{r7, lr}
 801b716:	b086      	sub	sp, #24
 801b718:	af00      	add	r7, sp, #0
 801b71a:	6078      	str	r0, [r7, #4]
 801b71c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b71e:	230e      	movs	r3, #14
 801b720:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	895b      	ldrh	r3, [r3, #10]
 801b726:	2b0e      	cmp	r3, #14
 801b728:	d96e      	bls.n	801b808 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	7bdb      	ldrb	r3, [r3, #15]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d106      	bne.n	801b740 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b732:	683b      	ldr	r3, [r7, #0]
 801b734:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801b738:	3301      	adds	r3, #1
 801b73a:	b2da      	uxtb	r2, r3
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	685b      	ldr	r3, [r3, #4]
 801b744:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b746:	693b      	ldr	r3, [r7, #16]
 801b748:	7b1a      	ldrb	r2, [r3, #12]
 801b74a:	7b5b      	ldrb	r3, [r3, #13]
 801b74c:	021b      	lsls	r3, r3, #8
 801b74e:	4313      	orrs	r3, r2
 801b750:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b752:	693b      	ldr	r3, [r7, #16]
 801b754:	781b      	ldrb	r3, [r3, #0]
 801b756:	f003 0301 	and.w	r3, r3, #1
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d023      	beq.n	801b7a6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b75e:	693b      	ldr	r3, [r7, #16]
 801b760:	781b      	ldrb	r3, [r3, #0]
 801b762:	2b01      	cmp	r3, #1
 801b764:	d10f      	bne.n	801b786 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b766:	693b      	ldr	r3, [r7, #16]
 801b768:	785b      	ldrb	r3, [r3, #1]
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d11b      	bne.n	801b7a6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b76e:	693b      	ldr	r3, [r7, #16]
 801b770:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b772:	2b5e      	cmp	r3, #94	@ 0x5e
 801b774:	d117      	bne.n	801b7a6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	7b5b      	ldrb	r3, [r3, #13]
 801b77a:	f043 0310 	orr.w	r3, r3, #16
 801b77e:	b2da      	uxtb	r2, r3
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	735a      	strb	r2, [r3, #13]
 801b784:	e00f      	b.n	801b7a6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b786:	693b      	ldr	r3, [r7, #16]
 801b788:	2206      	movs	r2, #6
 801b78a:	4928      	ldr	r1, [pc, #160]	@ (801b82c <ethernet_input+0x118>)
 801b78c:	4618      	mov	r0, r3
 801b78e:	f001 f9a1 	bl	801cad4 <memcmp>
 801b792:	4603      	mov	r3, r0
 801b794:	2b00      	cmp	r3, #0
 801b796:	d106      	bne.n	801b7a6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	7b5b      	ldrb	r3, [r3, #13]
 801b79c:	f043 0308 	orr.w	r3, r3, #8
 801b7a0:	b2da      	uxtb	r2, r3
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b7a6:	89fb      	ldrh	r3, [r7, #14]
 801b7a8:	2b08      	cmp	r3, #8
 801b7aa:	d003      	beq.n	801b7b4 <ethernet_input+0xa0>
 801b7ac:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801b7b0:	d014      	beq.n	801b7dc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b7b2:	e032      	b.n	801b81a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b7b4:	683b      	ldr	r3, [r7, #0]
 801b7b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b7ba:	f003 0308 	and.w	r3, r3, #8
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d024      	beq.n	801b80c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b7c2:	8afb      	ldrh	r3, [r7, #22]
 801b7c4:	4619      	mov	r1, r3
 801b7c6:	6878      	ldr	r0, [r7, #4]
 801b7c8:	f7f5 f96e 	bl	8010aa8 <pbuf_remove_header>
 801b7cc:	4603      	mov	r3, r0
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d11e      	bne.n	801b810 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b7d2:	6839      	ldr	r1, [r7, #0]
 801b7d4:	6878      	ldr	r0, [r7, #4]
 801b7d6:	f7fe fe81 	bl	801a4dc <ip4_input>
      break;
 801b7da:	e013      	b.n	801b804 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b7dc:	683b      	ldr	r3, [r7, #0]
 801b7de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b7e2:	f003 0308 	and.w	r3, r3, #8
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d014      	beq.n	801b814 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b7ea:	8afb      	ldrh	r3, [r7, #22]
 801b7ec:	4619      	mov	r1, r3
 801b7ee:	6878      	ldr	r0, [r7, #4]
 801b7f0:	f7f5 f95a 	bl	8010aa8 <pbuf_remove_header>
 801b7f4:	4603      	mov	r3, r0
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d10e      	bne.n	801b818 <ethernet_input+0x104>
        etharp_input(p, netif);
 801b7fa:	6839      	ldr	r1, [r7, #0]
 801b7fc:	6878      	ldr	r0, [r7, #4]
 801b7fe:	f7fd ffe9 	bl	80197d4 <etharp_input>
      break;
 801b802:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b804:	2300      	movs	r3, #0
 801b806:	e00c      	b.n	801b822 <ethernet_input+0x10e>
    goto free_and_return;
 801b808:	bf00      	nop
 801b80a:	e006      	b.n	801b81a <ethernet_input+0x106>
        goto free_and_return;
 801b80c:	bf00      	nop
 801b80e:	e004      	b.n	801b81a <ethernet_input+0x106>
        goto free_and_return;
 801b810:	bf00      	nop
 801b812:	e002      	b.n	801b81a <ethernet_input+0x106>
        goto free_and_return;
 801b814:	bf00      	nop
 801b816:	e000      	b.n	801b81a <ethernet_input+0x106>
        goto free_and_return;
 801b818:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b81a:	6878      	ldr	r0, [r7, #4]
 801b81c:	f7f5 f9ca 	bl	8010bb4 <pbuf_free>
  return ERR_OK;
 801b820:	2300      	movs	r3, #0
}
 801b822:	4618      	mov	r0, r3
 801b824:	3718      	adds	r7, #24
 801b826:	46bd      	mov	sp, r7
 801b828:	bd80      	pop	{r7, pc}
 801b82a:	bf00      	nop
 801b82c:	0806e19c 	.word	0x0806e19c

0801b830 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b830:	b580      	push	{r7, lr}
 801b832:	b086      	sub	sp, #24
 801b834:	af00      	add	r7, sp, #0
 801b836:	60f8      	str	r0, [r7, #12]
 801b838:	60b9      	str	r1, [r7, #8]
 801b83a:	607a      	str	r2, [r7, #4]
 801b83c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b83e:	8c3b      	ldrh	r3, [r7, #32]
 801b840:	4618      	mov	r0, r3
 801b842:	f7f3 fc95 	bl	800f170 <lwip_htons>
 801b846:	4603      	mov	r3, r0
 801b848:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b84a:	210e      	movs	r1, #14
 801b84c:	68b8      	ldr	r0, [r7, #8]
 801b84e:	f7f5 f91b 	bl	8010a88 <pbuf_add_header>
 801b852:	4603      	mov	r3, r0
 801b854:	2b00      	cmp	r3, #0
 801b856:	d125      	bne.n	801b8a4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b858:	68bb      	ldr	r3, [r7, #8]
 801b85a:	685b      	ldr	r3, [r3, #4]
 801b85c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b85e:	693b      	ldr	r3, [r7, #16]
 801b860:	8afa      	ldrh	r2, [r7, #22]
 801b862:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b864:	693b      	ldr	r3, [r7, #16]
 801b866:	2206      	movs	r2, #6
 801b868:	6839      	ldr	r1, [r7, #0]
 801b86a:	4618      	mov	r0, r3
 801b86c:	f001 f9ff 	bl	801cc6e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b870:	693b      	ldr	r3, [r7, #16]
 801b872:	3306      	adds	r3, #6
 801b874:	2206      	movs	r2, #6
 801b876:	6879      	ldr	r1, [r7, #4]
 801b878:	4618      	mov	r0, r3
 801b87a:	f001 f9f8 	bl	801cc6e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b884:	2b06      	cmp	r3, #6
 801b886:	d006      	beq.n	801b896 <ethernet_output+0x66>
 801b888:	4b0a      	ldr	r3, [pc, #40]	@ (801b8b4 <ethernet_output+0x84>)
 801b88a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801b88e:	490a      	ldr	r1, [pc, #40]	@ (801b8b8 <ethernet_output+0x88>)
 801b890:	480a      	ldr	r0, [pc, #40]	@ (801b8bc <ethernet_output+0x8c>)
 801b892:	f000 ffcd 	bl	801c830 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	699b      	ldr	r3, [r3, #24]
 801b89a:	68b9      	ldr	r1, [r7, #8]
 801b89c:	68f8      	ldr	r0, [r7, #12]
 801b89e:	4798      	blx	r3
 801b8a0:	4603      	mov	r3, r0
 801b8a2:	e002      	b.n	801b8aa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b8a4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b8a6:	f06f 0301 	mvn.w	r3, #1
}
 801b8aa:	4618      	mov	r0, r3
 801b8ac:	3718      	adds	r7, #24
 801b8ae:	46bd      	mov	sp, r7
 801b8b0:	bd80      	pop	{r7, pc}
 801b8b2:	bf00      	nop
 801b8b4:	0802230c 	.word	0x0802230c
 801b8b8:	08022344 	.word	0x08022344
 801b8bc:	08022378 	.word	0x08022378

0801b8c0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b8c0:	b580      	push	{r7, lr}
 801b8c2:	b084      	sub	sp, #16
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
 801b8c8:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 801b8ca:	683b      	ldr	r3, [r7, #0]
 801b8cc:	60bb      	str	r3, [r7, #8]
 801b8ce:	2304      	movs	r3, #4
 801b8d0:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801b8d2:	f107 0308 	add.w	r3, r7, #8
 801b8d6:	2100      	movs	r1, #0
 801b8d8:	4618      	mov	r0, r3
 801b8da:	f7ef fef4 	bl	800b6c6 <osMessageCreate>
 801b8de:	4602      	mov	r2, r0
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d102      	bne.n	801b8f2 <sys_mbox_new+0x32>
  return ERR_MEM;
 801b8ec:	f04f 33ff 	mov.w	r3, #4294967295
 801b8f0:	e000      	b.n	801b8f4 <sys_mbox_new+0x34>
 
 return ERR_OK;
 801b8f2:	2300      	movs	r3, #0
}
 801b8f4:	4618      	mov	r0, r3
 801b8f6:	3710      	adds	r7, #16
 801b8f8:	46bd      	mov	sp, r7
 801b8fa:	bd80      	pop	{r7, pc}

0801b8fc <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801b8fc:	b580      	push	{r7, lr}
 801b8fe:	b082      	sub	sp, #8
 801b900:	af00      	add	r7, sp, #0
 801b902:	6078      	str	r0, [r7, #4]
 801b904:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801b906:	bf00      	nop
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	6839      	ldr	r1, [r7, #0]
 801b90e:	f04f 32ff 	mov.w	r2, #4294967295
 801b912:	4618      	mov	r0, r3
 801b914:	f7ef feea 	bl	800b6ec <osMessagePut>
 801b918:	4603      	mov	r3, r0
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d1f4      	bne.n	801b908 <sys_mbox_post+0xc>
}
 801b91e:	bf00      	nop
 801b920:	bf00      	nop
 801b922:	3708      	adds	r7, #8
 801b924:	46bd      	mov	sp, r7
 801b926:	bd80      	pop	{r7, pc}

0801b928 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b928:	b580      	push	{r7, lr}
 801b92a:	b084      	sub	sp, #16
 801b92c:	af00      	add	r7, sp, #0
 801b92e:	6078      	str	r0, [r7, #4]
 801b930:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	6839      	ldr	r1, [r7, #0]
 801b938:	2200      	movs	r2, #0
 801b93a:	4618      	mov	r0, r3
 801b93c:	f7ef fed6 	bl	800b6ec <osMessagePut>
 801b940:	4603      	mov	r3, r0
 801b942:	2b00      	cmp	r3, #0
 801b944:	d102      	bne.n	801b94c <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 801b946:	2300      	movs	r3, #0
 801b948:	73fb      	strb	r3, [r7, #15]
 801b94a:	e001      	b.n	801b950 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 801b94c:	23ff      	movs	r3, #255	@ 0xff
 801b94e:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 801b950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b954:	4618      	mov	r0, r3
 801b956:	3710      	adds	r7, #16
 801b958:	46bd      	mov	sp, r7
 801b95a:	bd80      	pop	{r7, pc}

0801b95c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b95c:	b580      	push	{r7, lr}
 801b95e:	b08c      	sub	sp, #48	@ 0x30
 801b960:	af00      	add	r7, sp, #0
 801b962:	61f8      	str	r0, [r7, #28]
 801b964:	61b9      	str	r1, [r7, #24]
 801b966:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801b968:	f7ef fdb1 	bl	800b4ce <osKernelSysTick>
 801b96c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  
  if(timeout != 0)
 801b96e:	697b      	ldr	r3, [r7, #20]
 801b970:	2b00      	cmp	r3, #0
 801b972:	d017      	beq.n	801b9a4 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 801b974:	69fb      	ldr	r3, [r7, #28]
 801b976:	6819      	ldr	r1, [r3, #0]
 801b978:	f107 0320 	add.w	r3, r7, #32
 801b97c:	697a      	ldr	r2, [r7, #20]
 801b97e:	4618      	mov	r0, r3
 801b980:	f7ef fef6 	bl	800b770 <osMessageGet>
    
    if(event.status == osEventMessage)
 801b984:	6a3b      	ldr	r3, [r7, #32]
 801b986:	2b10      	cmp	r3, #16
 801b988:	d109      	bne.n	801b99e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801b98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b98c:	461a      	mov	r2, r3
 801b98e:	69bb      	ldr	r3, [r7, #24]
 801b990:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801b992:	f7ef fd9c 	bl	800b4ce <osKernelSysTick>
 801b996:	4602      	mov	r2, r0
 801b998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b99a:	1ad3      	subs	r3, r2, r3
 801b99c:	e019      	b.n	801b9d2 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b99e:	f04f 33ff 	mov.w	r3, #4294967295
 801b9a2:	e016      	b.n	801b9d2 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801b9a4:	69fb      	ldr	r3, [r7, #28]
 801b9a6:	6819      	ldr	r1, [r3, #0]
 801b9a8:	463b      	mov	r3, r7
 801b9aa:	f04f 32ff 	mov.w	r2, #4294967295
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	f7ef fede 	bl	800b770 <osMessageGet>
 801b9b4:	f107 0320 	add.w	r3, r7, #32
 801b9b8:	463a      	mov	r2, r7
 801b9ba:	ca07      	ldmia	r2, {r0, r1, r2}
 801b9bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801b9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9c2:	461a      	mov	r2, r3
 801b9c4:	69bb      	ldr	r3, [r7, #24]
 801b9c6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801b9c8:	f7ef fd81 	bl	800b4ce <osKernelSysTick>
 801b9cc:	4602      	mov	r2, r0
 801b9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9d0:	1ad3      	subs	r3, r2, r3
  }
}
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	3730      	adds	r7, #48	@ 0x30
 801b9d6:	46bd      	mov	sp, r7
 801b9d8:	bd80      	pop	{r7, pc}

0801b9da <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 801b9da:	b480      	push	{r7}
 801b9dc:	b083      	sub	sp, #12
 801b9de:	af00      	add	r7, sp, #0
 801b9e0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d101      	bne.n	801b9ee <sys_mbox_valid+0x14>
    return 0;
 801b9ea:	2300      	movs	r3, #0
 801b9ec:	e000      	b.n	801b9f0 <sys_mbox_valid+0x16>
  else
    return 1;
 801b9ee:	2301      	movs	r3, #1
}                                             
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	370c      	adds	r7, #12
 801b9f4:	46bd      	mov	sp, r7
 801b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9fa:	4770      	bx	lr

0801b9fc <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801b9fc:	b580      	push	{r7, lr}
 801b9fe:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801ba00:	4803      	ldr	r0, [pc, #12]	@ (801ba10 <sys_init+0x14>)
 801ba02:	f7ef fdbc 	bl	800b57e <osMutexCreate>
 801ba06:	4603      	mov	r3, r0
 801ba08:	4a02      	ldr	r2, [pc, #8]	@ (801ba14 <sys_init+0x18>)
 801ba0a:	6013      	str	r3, [r2, #0]
}
 801ba0c:	bf00      	nop
 801ba0e:	bd80      	pop	{r7, pc}
 801ba10:	0806e1ac 	.word	0x0806e1ac
 801ba14:	20013edc 	.word	0x20013edc

0801ba18 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	b084      	sub	sp, #16
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 801ba20:	2300      	movs	r3, #0
 801ba22:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801ba24:	f107 030c 	add.w	r3, r7, #12
 801ba28:	4618      	mov	r0, r3
 801ba2a:	f7ef fda8 	bl	800b57e <osMutexCreate>
 801ba2e:	4602      	mov	r2, r0
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d102      	bne.n	801ba42 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 801ba3c:	f04f 33ff 	mov.w	r3, #4294967295
 801ba40:	e000      	b.n	801ba44 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801ba42:	2300      	movs	r3, #0
}
 801ba44:	4618      	mov	r0, r3
 801ba46:	3710      	adds	r7, #16
 801ba48:	46bd      	mov	sp, r7
 801ba4a:	bd80      	pop	{r7, pc}

0801ba4c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ba4c:	b580      	push	{r7, lr}
 801ba4e:	b082      	sub	sp, #8
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	f04f 31ff 	mov.w	r1, #4294967295
 801ba5c:	4618      	mov	r0, r3
 801ba5e:	f7ef fd9b 	bl	800b598 <osMutexWait>
}
 801ba62:	bf00      	nop
 801ba64:	3708      	adds	r7, #8
 801ba66:	46bd      	mov	sp, r7
 801ba68:	bd80      	pop	{r7, pc}

0801ba6a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801ba6a:	b580      	push	{r7, lr}
 801ba6c:	b082      	sub	sp, #8
 801ba6e:	af00      	add	r7, sp, #0
 801ba70:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	4618      	mov	r0, r3
 801ba78:	f7ef fddc 	bl	800b634 <osMutexRelease>
}
 801ba7c:	bf00      	nop
 801ba7e:	3708      	adds	r7, #8
 801ba80:	46bd      	mov	sp, r7
 801ba82:	bd80      	pop	{r7, pc}

0801ba84 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ba84:	b580      	push	{r7, lr}
 801ba86:	b08a      	sub	sp, #40	@ 0x28
 801ba88:	af00      	add	r7, sp, #0
 801ba8a:	60f8      	str	r0, [r7, #12]
 801ba8c:	60b9      	str	r1, [r7, #8]
 801ba8e:	607a      	str	r2, [r7, #4]
 801ba90:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ba92:	68fb      	ldr	r3, [r7, #12]
 801ba94:	617b      	str	r3, [r7, #20]
 801ba96:	68bb      	ldr	r3, [r7, #8]
 801ba98:	61bb      	str	r3, [r7, #24]
 801ba9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba9c:	b21b      	sxth	r3, r3
 801ba9e:	83bb      	strh	r3, [r7, #28]
 801baa0:	2300      	movs	r3, #0
 801baa2:	623b      	str	r3, [r7, #32]
 801baa4:	683b      	ldr	r3, [r7, #0]
 801baa6:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801baa8:	f107 0314 	add.w	r3, r7, #20
 801baac:	6879      	ldr	r1, [r7, #4]
 801baae:	4618      	mov	r0, r3
 801bab0:	f7ef fd1d 	bl	800b4ee <osThreadCreate>
 801bab4:	4603      	mov	r3, r0
}
 801bab6:	4618      	mov	r0, r3
 801bab8:	3728      	adds	r7, #40	@ 0x28
 801baba:	46bd      	mov	sp, r7
 801babc:	bd80      	pop	{r7, pc}
	...

0801bac0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801bac0:	b580      	push	{r7, lr}
 801bac2:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801bac4:	4b04      	ldr	r3, [pc, #16]	@ (801bad8 <sys_arch_protect+0x18>)
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	f04f 31ff 	mov.w	r1, #4294967295
 801bacc:	4618      	mov	r0, r3
 801bace:	f7ef fd63 	bl	800b598 <osMutexWait>
  return (sys_prot_t)1;
 801bad2:	2301      	movs	r3, #1
}
 801bad4:	4618      	mov	r0, r3
 801bad6:	bd80      	pop	{r7, pc}
 801bad8:	20013edc 	.word	0x20013edc

0801badc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801badc:	b580      	push	{r7, lr}
 801bade:	b082      	sub	sp, #8
 801bae0:	af00      	add	r7, sp, #0
 801bae2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801bae4:	4b04      	ldr	r3, [pc, #16]	@ (801baf8 <sys_arch_unprotect+0x1c>)
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	4618      	mov	r0, r3
 801baea:	f7ef fda3 	bl	800b634 <osMutexRelease>
}
 801baee:	bf00      	nop
 801baf0:	3708      	adds	r7, #8
 801baf2:	46bd      	mov	sp, r7
 801baf4:	bd80      	pop	{r7, pc}
 801baf6:	bf00      	nop
 801baf8:	20013edc 	.word	0x20013edc

0801bafc <_calloc_r>:
 801bafc:	b570      	push	{r4, r5, r6, lr}
 801bafe:	fba1 5402 	umull	r5, r4, r1, r2
 801bb02:	b93c      	cbnz	r4, 801bb14 <_calloc_r+0x18>
 801bb04:	4629      	mov	r1, r5
 801bb06:	f000 f837 	bl	801bb78 <_malloc_r>
 801bb0a:	4606      	mov	r6, r0
 801bb0c:	b928      	cbnz	r0, 801bb1a <_calloc_r+0x1e>
 801bb0e:	2600      	movs	r6, #0
 801bb10:	4630      	mov	r0, r6
 801bb12:	bd70      	pop	{r4, r5, r6, pc}
 801bb14:	220c      	movs	r2, #12
 801bb16:	6002      	str	r2, [r0, #0]
 801bb18:	e7f9      	b.n	801bb0e <_calloc_r+0x12>
 801bb1a:	462a      	mov	r2, r5
 801bb1c:	4621      	mov	r1, r4
 801bb1e:	f000 ffe9 	bl	801caf4 <memset>
 801bb22:	e7f5      	b.n	801bb10 <_calloc_r+0x14>

0801bb24 <malloc>:
 801bb24:	4b02      	ldr	r3, [pc, #8]	@ (801bb30 <malloc+0xc>)
 801bb26:	4601      	mov	r1, r0
 801bb28:	6818      	ldr	r0, [r3, #0]
 801bb2a:	f000 b825 	b.w	801bb78 <_malloc_r>
 801bb2e:	bf00      	nop
 801bb30:	200000d0 	.word	0x200000d0

0801bb34 <sbrk_aligned>:
 801bb34:	b570      	push	{r4, r5, r6, lr}
 801bb36:	4e0f      	ldr	r6, [pc, #60]	@ (801bb74 <sbrk_aligned+0x40>)
 801bb38:	460c      	mov	r4, r1
 801bb3a:	6831      	ldr	r1, [r6, #0]
 801bb3c:	4605      	mov	r5, r0
 801bb3e:	b911      	cbnz	r1, 801bb46 <sbrk_aligned+0x12>
 801bb40:	f001 f83e 	bl	801cbc0 <_sbrk_r>
 801bb44:	6030      	str	r0, [r6, #0]
 801bb46:	4621      	mov	r1, r4
 801bb48:	4628      	mov	r0, r5
 801bb4a:	f001 f839 	bl	801cbc0 <_sbrk_r>
 801bb4e:	1c43      	adds	r3, r0, #1
 801bb50:	d103      	bne.n	801bb5a <sbrk_aligned+0x26>
 801bb52:	f04f 34ff 	mov.w	r4, #4294967295
 801bb56:	4620      	mov	r0, r4
 801bb58:	bd70      	pop	{r4, r5, r6, pc}
 801bb5a:	1cc4      	adds	r4, r0, #3
 801bb5c:	f024 0403 	bic.w	r4, r4, #3
 801bb60:	42a0      	cmp	r0, r4
 801bb62:	d0f8      	beq.n	801bb56 <sbrk_aligned+0x22>
 801bb64:	1a21      	subs	r1, r4, r0
 801bb66:	4628      	mov	r0, r5
 801bb68:	f001 f82a 	bl	801cbc0 <_sbrk_r>
 801bb6c:	3001      	adds	r0, #1
 801bb6e:	d1f2      	bne.n	801bb56 <sbrk_aligned+0x22>
 801bb70:	e7ef      	b.n	801bb52 <sbrk_aligned+0x1e>
 801bb72:	bf00      	nop
 801bb74:	20013ee0 	.word	0x20013ee0

0801bb78 <_malloc_r>:
 801bb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb7c:	1ccd      	adds	r5, r1, #3
 801bb7e:	f025 0503 	bic.w	r5, r5, #3
 801bb82:	3508      	adds	r5, #8
 801bb84:	2d0c      	cmp	r5, #12
 801bb86:	bf38      	it	cc
 801bb88:	250c      	movcc	r5, #12
 801bb8a:	2d00      	cmp	r5, #0
 801bb8c:	4606      	mov	r6, r0
 801bb8e:	db01      	blt.n	801bb94 <_malloc_r+0x1c>
 801bb90:	42a9      	cmp	r1, r5
 801bb92:	d904      	bls.n	801bb9e <_malloc_r+0x26>
 801bb94:	230c      	movs	r3, #12
 801bb96:	6033      	str	r3, [r6, #0]
 801bb98:	2000      	movs	r0, #0
 801bb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bc74 <_malloc_r+0xfc>
 801bba2:	f000 f869 	bl	801bc78 <__malloc_lock>
 801bba6:	f8d8 3000 	ldr.w	r3, [r8]
 801bbaa:	461c      	mov	r4, r3
 801bbac:	bb44      	cbnz	r4, 801bc00 <_malloc_r+0x88>
 801bbae:	4629      	mov	r1, r5
 801bbb0:	4630      	mov	r0, r6
 801bbb2:	f7ff ffbf 	bl	801bb34 <sbrk_aligned>
 801bbb6:	1c43      	adds	r3, r0, #1
 801bbb8:	4604      	mov	r4, r0
 801bbba:	d158      	bne.n	801bc6e <_malloc_r+0xf6>
 801bbbc:	f8d8 4000 	ldr.w	r4, [r8]
 801bbc0:	4627      	mov	r7, r4
 801bbc2:	2f00      	cmp	r7, #0
 801bbc4:	d143      	bne.n	801bc4e <_malloc_r+0xd6>
 801bbc6:	2c00      	cmp	r4, #0
 801bbc8:	d04b      	beq.n	801bc62 <_malloc_r+0xea>
 801bbca:	6823      	ldr	r3, [r4, #0]
 801bbcc:	4639      	mov	r1, r7
 801bbce:	4630      	mov	r0, r6
 801bbd0:	eb04 0903 	add.w	r9, r4, r3
 801bbd4:	f000 fff4 	bl	801cbc0 <_sbrk_r>
 801bbd8:	4581      	cmp	r9, r0
 801bbda:	d142      	bne.n	801bc62 <_malloc_r+0xea>
 801bbdc:	6821      	ldr	r1, [r4, #0]
 801bbde:	1a6d      	subs	r5, r5, r1
 801bbe0:	4629      	mov	r1, r5
 801bbe2:	4630      	mov	r0, r6
 801bbe4:	f7ff ffa6 	bl	801bb34 <sbrk_aligned>
 801bbe8:	3001      	adds	r0, #1
 801bbea:	d03a      	beq.n	801bc62 <_malloc_r+0xea>
 801bbec:	6823      	ldr	r3, [r4, #0]
 801bbee:	442b      	add	r3, r5
 801bbf0:	6023      	str	r3, [r4, #0]
 801bbf2:	f8d8 3000 	ldr.w	r3, [r8]
 801bbf6:	685a      	ldr	r2, [r3, #4]
 801bbf8:	bb62      	cbnz	r2, 801bc54 <_malloc_r+0xdc>
 801bbfa:	f8c8 7000 	str.w	r7, [r8]
 801bbfe:	e00f      	b.n	801bc20 <_malloc_r+0xa8>
 801bc00:	6822      	ldr	r2, [r4, #0]
 801bc02:	1b52      	subs	r2, r2, r5
 801bc04:	d420      	bmi.n	801bc48 <_malloc_r+0xd0>
 801bc06:	2a0b      	cmp	r2, #11
 801bc08:	d917      	bls.n	801bc3a <_malloc_r+0xc2>
 801bc0a:	1961      	adds	r1, r4, r5
 801bc0c:	42a3      	cmp	r3, r4
 801bc0e:	6025      	str	r5, [r4, #0]
 801bc10:	bf18      	it	ne
 801bc12:	6059      	strne	r1, [r3, #4]
 801bc14:	6863      	ldr	r3, [r4, #4]
 801bc16:	bf08      	it	eq
 801bc18:	f8c8 1000 	streq.w	r1, [r8]
 801bc1c:	5162      	str	r2, [r4, r5]
 801bc1e:	604b      	str	r3, [r1, #4]
 801bc20:	4630      	mov	r0, r6
 801bc22:	f000 f82f 	bl	801bc84 <__malloc_unlock>
 801bc26:	f104 000b 	add.w	r0, r4, #11
 801bc2a:	1d23      	adds	r3, r4, #4
 801bc2c:	f020 0007 	bic.w	r0, r0, #7
 801bc30:	1ac2      	subs	r2, r0, r3
 801bc32:	bf1c      	itt	ne
 801bc34:	1a1b      	subne	r3, r3, r0
 801bc36:	50a3      	strne	r3, [r4, r2]
 801bc38:	e7af      	b.n	801bb9a <_malloc_r+0x22>
 801bc3a:	6862      	ldr	r2, [r4, #4]
 801bc3c:	42a3      	cmp	r3, r4
 801bc3e:	bf0c      	ite	eq
 801bc40:	f8c8 2000 	streq.w	r2, [r8]
 801bc44:	605a      	strne	r2, [r3, #4]
 801bc46:	e7eb      	b.n	801bc20 <_malloc_r+0xa8>
 801bc48:	4623      	mov	r3, r4
 801bc4a:	6864      	ldr	r4, [r4, #4]
 801bc4c:	e7ae      	b.n	801bbac <_malloc_r+0x34>
 801bc4e:	463c      	mov	r4, r7
 801bc50:	687f      	ldr	r7, [r7, #4]
 801bc52:	e7b6      	b.n	801bbc2 <_malloc_r+0x4a>
 801bc54:	461a      	mov	r2, r3
 801bc56:	685b      	ldr	r3, [r3, #4]
 801bc58:	42a3      	cmp	r3, r4
 801bc5a:	d1fb      	bne.n	801bc54 <_malloc_r+0xdc>
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	6053      	str	r3, [r2, #4]
 801bc60:	e7de      	b.n	801bc20 <_malloc_r+0xa8>
 801bc62:	230c      	movs	r3, #12
 801bc64:	6033      	str	r3, [r6, #0]
 801bc66:	4630      	mov	r0, r6
 801bc68:	f000 f80c 	bl	801bc84 <__malloc_unlock>
 801bc6c:	e794      	b.n	801bb98 <_malloc_r+0x20>
 801bc6e:	6005      	str	r5, [r0, #0]
 801bc70:	e7d6      	b.n	801bc20 <_malloc_r+0xa8>
 801bc72:	bf00      	nop
 801bc74:	20013ee4 	.word	0x20013ee4

0801bc78 <__malloc_lock>:
 801bc78:	4801      	ldr	r0, [pc, #4]	@ (801bc80 <__malloc_lock+0x8>)
 801bc7a:	f000 bfee 	b.w	801cc5a <__retarget_lock_acquire_recursive>
 801bc7e:	bf00      	nop
 801bc80:	20014028 	.word	0x20014028

0801bc84 <__malloc_unlock>:
 801bc84:	4801      	ldr	r0, [pc, #4]	@ (801bc8c <__malloc_unlock+0x8>)
 801bc86:	f000 bfe9 	b.w	801cc5c <__retarget_lock_release_recursive>
 801bc8a:	bf00      	nop
 801bc8c:	20014028 	.word	0x20014028

0801bc90 <rand>:
 801bc90:	4b16      	ldr	r3, [pc, #88]	@ (801bcec <rand+0x5c>)
 801bc92:	b510      	push	{r4, lr}
 801bc94:	681c      	ldr	r4, [r3, #0]
 801bc96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bc98:	b9b3      	cbnz	r3, 801bcc8 <rand+0x38>
 801bc9a:	2018      	movs	r0, #24
 801bc9c:	f7ff ff42 	bl	801bb24 <malloc>
 801bca0:	4602      	mov	r2, r0
 801bca2:	6320      	str	r0, [r4, #48]	@ 0x30
 801bca4:	b920      	cbnz	r0, 801bcb0 <rand+0x20>
 801bca6:	4b12      	ldr	r3, [pc, #72]	@ (801bcf0 <rand+0x60>)
 801bca8:	4812      	ldr	r0, [pc, #72]	@ (801bcf4 <rand+0x64>)
 801bcaa:	2152      	movs	r1, #82	@ 0x52
 801bcac:	f000 ffee 	bl	801cc8c <__assert_func>
 801bcb0:	4911      	ldr	r1, [pc, #68]	@ (801bcf8 <rand+0x68>)
 801bcb2:	4b12      	ldr	r3, [pc, #72]	@ (801bcfc <rand+0x6c>)
 801bcb4:	e9c0 1300 	strd	r1, r3, [r0]
 801bcb8:	4b11      	ldr	r3, [pc, #68]	@ (801bd00 <rand+0x70>)
 801bcba:	6083      	str	r3, [r0, #8]
 801bcbc:	230b      	movs	r3, #11
 801bcbe:	8183      	strh	r3, [r0, #12]
 801bcc0:	2100      	movs	r1, #0
 801bcc2:	2001      	movs	r0, #1
 801bcc4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801bcc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801bcca:	480e      	ldr	r0, [pc, #56]	@ (801bd04 <rand+0x74>)
 801bccc:	690b      	ldr	r3, [r1, #16]
 801bcce:	694c      	ldr	r4, [r1, #20]
 801bcd0:	4a0d      	ldr	r2, [pc, #52]	@ (801bd08 <rand+0x78>)
 801bcd2:	4358      	muls	r0, r3
 801bcd4:	fb02 0004 	mla	r0, r2, r4, r0
 801bcd8:	fba3 3202 	umull	r3, r2, r3, r2
 801bcdc:	3301      	adds	r3, #1
 801bcde:	eb40 0002 	adc.w	r0, r0, r2
 801bce2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801bce6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801bcea:	bd10      	pop	{r4, pc}
 801bcec:	200000d0 	.word	0x200000d0
 801bcf0:	0806e1b0 	.word	0x0806e1b0
 801bcf4:	0806e1c7 	.word	0x0806e1c7
 801bcf8:	abcd330e 	.word	0xabcd330e
 801bcfc:	e66d1234 	.word	0xe66d1234
 801bd00:	0005deec 	.word	0x0005deec
 801bd04:	5851f42d 	.word	0x5851f42d
 801bd08:	4c957f2d 	.word	0x4c957f2d

0801bd0c <_strtoul_l.constprop.0>:
 801bd0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd10:	4e34      	ldr	r6, [pc, #208]	@ (801bde4 <_strtoul_l.constprop.0+0xd8>)
 801bd12:	4686      	mov	lr, r0
 801bd14:	460d      	mov	r5, r1
 801bd16:	4628      	mov	r0, r5
 801bd18:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bd1c:	5d37      	ldrb	r7, [r6, r4]
 801bd1e:	f017 0708 	ands.w	r7, r7, #8
 801bd22:	d1f8      	bne.n	801bd16 <_strtoul_l.constprop.0+0xa>
 801bd24:	2c2d      	cmp	r4, #45	@ 0x2d
 801bd26:	d12f      	bne.n	801bd88 <_strtoul_l.constprop.0+0x7c>
 801bd28:	782c      	ldrb	r4, [r5, #0]
 801bd2a:	2701      	movs	r7, #1
 801bd2c:	1c85      	adds	r5, r0, #2
 801bd2e:	f033 0010 	bics.w	r0, r3, #16
 801bd32:	d109      	bne.n	801bd48 <_strtoul_l.constprop.0+0x3c>
 801bd34:	2c30      	cmp	r4, #48	@ 0x30
 801bd36:	d12c      	bne.n	801bd92 <_strtoul_l.constprop.0+0x86>
 801bd38:	7828      	ldrb	r0, [r5, #0]
 801bd3a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801bd3e:	2858      	cmp	r0, #88	@ 0x58
 801bd40:	d127      	bne.n	801bd92 <_strtoul_l.constprop.0+0x86>
 801bd42:	786c      	ldrb	r4, [r5, #1]
 801bd44:	2310      	movs	r3, #16
 801bd46:	3502      	adds	r5, #2
 801bd48:	f04f 38ff 	mov.w	r8, #4294967295
 801bd4c:	2600      	movs	r6, #0
 801bd4e:	fbb8 f8f3 	udiv	r8, r8, r3
 801bd52:	fb03 f908 	mul.w	r9, r3, r8
 801bd56:	ea6f 0909 	mvn.w	r9, r9
 801bd5a:	4630      	mov	r0, r6
 801bd5c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801bd60:	f1bc 0f09 	cmp.w	ip, #9
 801bd64:	d81c      	bhi.n	801bda0 <_strtoul_l.constprop.0+0x94>
 801bd66:	4664      	mov	r4, ip
 801bd68:	42a3      	cmp	r3, r4
 801bd6a:	dd2a      	ble.n	801bdc2 <_strtoul_l.constprop.0+0xb6>
 801bd6c:	f1b6 3fff 	cmp.w	r6, #4294967295
 801bd70:	d007      	beq.n	801bd82 <_strtoul_l.constprop.0+0x76>
 801bd72:	4580      	cmp	r8, r0
 801bd74:	d322      	bcc.n	801bdbc <_strtoul_l.constprop.0+0xb0>
 801bd76:	d101      	bne.n	801bd7c <_strtoul_l.constprop.0+0x70>
 801bd78:	45a1      	cmp	r9, r4
 801bd7a:	db1f      	blt.n	801bdbc <_strtoul_l.constprop.0+0xb0>
 801bd7c:	fb00 4003 	mla	r0, r0, r3, r4
 801bd80:	2601      	movs	r6, #1
 801bd82:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bd86:	e7e9      	b.n	801bd5c <_strtoul_l.constprop.0+0x50>
 801bd88:	2c2b      	cmp	r4, #43	@ 0x2b
 801bd8a:	bf04      	itt	eq
 801bd8c:	782c      	ldrbeq	r4, [r5, #0]
 801bd8e:	1c85      	addeq	r5, r0, #2
 801bd90:	e7cd      	b.n	801bd2e <_strtoul_l.constprop.0+0x22>
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d1d8      	bne.n	801bd48 <_strtoul_l.constprop.0+0x3c>
 801bd96:	2c30      	cmp	r4, #48	@ 0x30
 801bd98:	bf0c      	ite	eq
 801bd9a:	2308      	moveq	r3, #8
 801bd9c:	230a      	movne	r3, #10
 801bd9e:	e7d3      	b.n	801bd48 <_strtoul_l.constprop.0+0x3c>
 801bda0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801bda4:	f1bc 0f19 	cmp.w	ip, #25
 801bda8:	d801      	bhi.n	801bdae <_strtoul_l.constprop.0+0xa2>
 801bdaa:	3c37      	subs	r4, #55	@ 0x37
 801bdac:	e7dc      	b.n	801bd68 <_strtoul_l.constprop.0+0x5c>
 801bdae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801bdb2:	f1bc 0f19 	cmp.w	ip, #25
 801bdb6:	d804      	bhi.n	801bdc2 <_strtoul_l.constprop.0+0xb6>
 801bdb8:	3c57      	subs	r4, #87	@ 0x57
 801bdba:	e7d5      	b.n	801bd68 <_strtoul_l.constprop.0+0x5c>
 801bdbc:	f04f 36ff 	mov.w	r6, #4294967295
 801bdc0:	e7df      	b.n	801bd82 <_strtoul_l.constprop.0+0x76>
 801bdc2:	1c73      	adds	r3, r6, #1
 801bdc4:	d106      	bne.n	801bdd4 <_strtoul_l.constprop.0+0xc8>
 801bdc6:	2322      	movs	r3, #34	@ 0x22
 801bdc8:	f8ce 3000 	str.w	r3, [lr]
 801bdcc:	4630      	mov	r0, r6
 801bdce:	b932      	cbnz	r2, 801bdde <_strtoul_l.constprop.0+0xd2>
 801bdd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bdd4:	b107      	cbz	r7, 801bdd8 <_strtoul_l.constprop.0+0xcc>
 801bdd6:	4240      	negs	r0, r0
 801bdd8:	2a00      	cmp	r2, #0
 801bdda:	d0f9      	beq.n	801bdd0 <_strtoul_l.constprop.0+0xc4>
 801bddc:	b106      	cbz	r6, 801bde0 <_strtoul_l.constprop.0+0xd4>
 801bdde:	1e69      	subs	r1, r5, #1
 801bde0:	6011      	str	r1, [r2, #0]
 801bde2:	e7f5      	b.n	801bdd0 <_strtoul_l.constprop.0+0xc4>
 801bde4:	0806e220 	.word	0x0806e220

0801bde8 <strtoul>:
 801bde8:	4613      	mov	r3, r2
 801bdea:	460a      	mov	r2, r1
 801bdec:	4601      	mov	r1, r0
 801bdee:	4802      	ldr	r0, [pc, #8]	@ (801bdf8 <strtoul+0x10>)
 801bdf0:	6800      	ldr	r0, [r0, #0]
 801bdf2:	f7ff bf8b 	b.w	801bd0c <_strtoul_l.constprop.0>
 801bdf6:	bf00      	nop
 801bdf8:	200000d0 	.word	0x200000d0

0801bdfc <__cvt>:
 801bdfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801be00:	ec57 6b10 	vmov	r6, r7, d0
 801be04:	2f00      	cmp	r7, #0
 801be06:	460c      	mov	r4, r1
 801be08:	4619      	mov	r1, r3
 801be0a:	463b      	mov	r3, r7
 801be0c:	bfbb      	ittet	lt
 801be0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801be12:	461f      	movlt	r7, r3
 801be14:	2300      	movge	r3, #0
 801be16:	232d      	movlt	r3, #45	@ 0x2d
 801be18:	700b      	strb	r3, [r1, #0]
 801be1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801be1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801be20:	4691      	mov	r9, r2
 801be22:	f023 0820 	bic.w	r8, r3, #32
 801be26:	bfbc      	itt	lt
 801be28:	4632      	movlt	r2, r6
 801be2a:	4616      	movlt	r6, r2
 801be2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801be30:	d005      	beq.n	801be3e <__cvt+0x42>
 801be32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801be36:	d100      	bne.n	801be3a <__cvt+0x3e>
 801be38:	3401      	adds	r4, #1
 801be3a:	2102      	movs	r1, #2
 801be3c:	e000      	b.n	801be40 <__cvt+0x44>
 801be3e:	2103      	movs	r1, #3
 801be40:	ab03      	add	r3, sp, #12
 801be42:	9301      	str	r3, [sp, #4]
 801be44:	ab02      	add	r3, sp, #8
 801be46:	9300      	str	r3, [sp, #0]
 801be48:	ec47 6b10 	vmov	d0, r6, r7
 801be4c:	4653      	mov	r3, sl
 801be4e:	4622      	mov	r2, r4
 801be50:	f000 ffc2 	bl	801cdd8 <_dtoa_r>
 801be54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801be58:	4605      	mov	r5, r0
 801be5a:	d119      	bne.n	801be90 <__cvt+0x94>
 801be5c:	f019 0f01 	tst.w	r9, #1
 801be60:	d00e      	beq.n	801be80 <__cvt+0x84>
 801be62:	eb00 0904 	add.w	r9, r0, r4
 801be66:	2200      	movs	r2, #0
 801be68:	2300      	movs	r3, #0
 801be6a:	4630      	mov	r0, r6
 801be6c:	4639      	mov	r1, r7
 801be6e:	f7e4 fe43 	bl	8000af8 <__aeabi_dcmpeq>
 801be72:	b108      	cbz	r0, 801be78 <__cvt+0x7c>
 801be74:	f8cd 900c 	str.w	r9, [sp, #12]
 801be78:	2230      	movs	r2, #48	@ 0x30
 801be7a:	9b03      	ldr	r3, [sp, #12]
 801be7c:	454b      	cmp	r3, r9
 801be7e:	d31e      	bcc.n	801bebe <__cvt+0xc2>
 801be80:	9b03      	ldr	r3, [sp, #12]
 801be82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801be84:	1b5b      	subs	r3, r3, r5
 801be86:	4628      	mov	r0, r5
 801be88:	6013      	str	r3, [r2, #0]
 801be8a:	b004      	add	sp, #16
 801be8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801be94:	eb00 0904 	add.w	r9, r0, r4
 801be98:	d1e5      	bne.n	801be66 <__cvt+0x6a>
 801be9a:	7803      	ldrb	r3, [r0, #0]
 801be9c:	2b30      	cmp	r3, #48	@ 0x30
 801be9e:	d10a      	bne.n	801beb6 <__cvt+0xba>
 801bea0:	2200      	movs	r2, #0
 801bea2:	2300      	movs	r3, #0
 801bea4:	4630      	mov	r0, r6
 801bea6:	4639      	mov	r1, r7
 801bea8:	f7e4 fe26 	bl	8000af8 <__aeabi_dcmpeq>
 801beac:	b918      	cbnz	r0, 801beb6 <__cvt+0xba>
 801beae:	f1c4 0401 	rsb	r4, r4, #1
 801beb2:	f8ca 4000 	str.w	r4, [sl]
 801beb6:	f8da 3000 	ldr.w	r3, [sl]
 801beba:	4499      	add	r9, r3
 801bebc:	e7d3      	b.n	801be66 <__cvt+0x6a>
 801bebe:	1c59      	adds	r1, r3, #1
 801bec0:	9103      	str	r1, [sp, #12]
 801bec2:	701a      	strb	r2, [r3, #0]
 801bec4:	e7d9      	b.n	801be7a <__cvt+0x7e>

0801bec6 <__exponent>:
 801bec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bec8:	2900      	cmp	r1, #0
 801beca:	bfba      	itte	lt
 801becc:	4249      	neglt	r1, r1
 801bece:	232d      	movlt	r3, #45	@ 0x2d
 801bed0:	232b      	movge	r3, #43	@ 0x2b
 801bed2:	2909      	cmp	r1, #9
 801bed4:	7002      	strb	r2, [r0, #0]
 801bed6:	7043      	strb	r3, [r0, #1]
 801bed8:	dd29      	ble.n	801bf2e <__exponent+0x68>
 801beda:	f10d 0307 	add.w	r3, sp, #7
 801bede:	461d      	mov	r5, r3
 801bee0:	270a      	movs	r7, #10
 801bee2:	461a      	mov	r2, r3
 801bee4:	fbb1 f6f7 	udiv	r6, r1, r7
 801bee8:	fb07 1416 	mls	r4, r7, r6, r1
 801beec:	3430      	adds	r4, #48	@ 0x30
 801beee:	f802 4c01 	strb.w	r4, [r2, #-1]
 801bef2:	460c      	mov	r4, r1
 801bef4:	2c63      	cmp	r4, #99	@ 0x63
 801bef6:	f103 33ff 	add.w	r3, r3, #4294967295
 801befa:	4631      	mov	r1, r6
 801befc:	dcf1      	bgt.n	801bee2 <__exponent+0x1c>
 801befe:	3130      	adds	r1, #48	@ 0x30
 801bf00:	1e94      	subs	r4, r2, #2
 801bf02:	f803 1c01 	strb.w	r1, [r3, #-1]
 801bf06:	1c41      	adds	r1, r0, #1
 801bf08:	4623      	mov	r3, r4
 801bf0a:	42ab      	cmp	r3, r5
 801bf0c:	d30a      	bcc.n	801bf24 <__exponent+0x5e>
 801bf0e:	f10d 0309 	add.w	r3, sp, #9
 801bf12:	1a9b      	subs	r3, r3, r2
 801bf14:	42ac      	cmp	r4, r5
 801bf16:	bf88      	it	hi
 801bf18:	2300      	movhi	r3, #0
 801bf1a:	3302      	adds	r3, #2
 801bf1c:	4403      	add	r3, r0
 801bf1e:	1a18      	subs	r0, r3, r0
 801bf20:	b003      	add	sp, #12
 801bf22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf24:	f813 6b01 	ldrb.w	r6, [r3], #1
 801bf28:	f801 6f01 	strb.w	r6, [r1, #1]!
 801bf2c:	e7ed      	b.n	801bf0a <__exponent+0x44>
 801bf2e:	2330      	movs	r3, #48	@ 0x30
 801bf30:	3130      	adds	r1, #48	@ 0x30
 801bf32:	7083      	strb	r3, [r0, #2]
 801bf34:	70c1      	strb	r1, [r0, #3]
 801bf36:	1d03      	adds	r3, r0, #4
 801bf38:	e7f1      	b.n	801bf1e <__exponent+0x58>
	...

0801bf3c <_printf_float>:
 801bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf40:	b08d      	sub	sp, #52	@ 0x34
 801bf42:	460c      	mov	r4, r1
 801bf44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801bf48:	4616      	mov	r6, r2
 801bf4a:	461f      	mov	r7, r3
 801bf4c:	4605      	mov	r5, r0
 801bf4e:	f000 fdff 	bl	801cb50 <_localeconv_r>
 801bf52:	6803      	ldr	r3, [r0, #0]
 801bf54:	9304      	str	r3, [sp, #16]
 801bf56:	4618      	mov	r0, r3
 801bf58:	f7e4 f9a2 	bl	80002a0 <strlen>
 801bf5c:	2300      	movs	r3, #0
 801bf5e:	930a      	str	r3, [sp, #40]	@ 0x28
 801bf60:	f8d8 3000 	ldr.w	r3, [r8]
 801bf64:	9005      	str	r0, [sp, #20]
 801bf66:	3307      	adds	r3, #7
 801bf68:	f023 0307 	bic.w	r3, r3, #7
 801bf6c:	f103 0208 	add.w	r2, r3, #8
 801bf70:	f894 a018 	ldrb.w	sl, [r4, #24]
 801bf74:	f8d4 b000 	ldr.w	fp, [r4]
 801bf78:	f8c8 2000 	str.w	r2, [r8]
 801bf7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bf80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801bf84:	9307      	str	r3, [sp, #28]
 801bf86:	f8cd 8018 	str.w	r8, [sp, #24]
 801bf8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801bf8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bf92:	4b9c      	ldr	r3, [pc, #624]	@ (801c204 <_printf_float+0x2c8>)
 801bf94:	f04f 32ff 	mov.w	r2, #4294967295
 801bf98:	f7e4 fde0 	bl	8000b5c <__aeabi_dcmpun>
 801bf9c:	bb70      	cbnz	r0, 801bffc <_printf_float+0xc0>
 801bf9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bfa2:	4b98      	ldr	r3, [pc, #608]	@ (801c204 <_printf_float+0x2c8>)
 801bfa4:	f04f 32ff 	mov.w	r2, #4294967295
 801bfa8:	f7e4 fdba 	bl	8000b20 <__aeabi_dcmple>
 801bfac:	bb30      	cbnz	r0, 801bffc <_printf_float+0xc0>
 801bfae:	2200      	movs	r2, #0
 801bfb0:	2300      	movs	r3, #0
 801bfb2:	4640      	mov	r0, r8
 801bfb4:	4649      	mov	r1, r9
 801bfb6:	f7e4 fda9 	bl	8000b0c <__aeabi_dcmplt>
 801bfba:	b110      	cbz	r0, 801bfc2 <_printf_float+0x86>
 801bfbc:	232d      	movs	r3, #45	@ 0x2d
 801bfbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bfc2:	4a91      	ldr	r2, [pc, #580]	@ (801c208 <_printf_float+0x2cc>)
 801bfc4:	4b91      	ldr	r3, [pc, #580]	@ (801c20c <_printf_float+0x2d0>)
 801bfc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801bfca:	bf94      	ite	ls
 801bfcc:	4690      	movls	r8, r2
 801bfce:	4698      	movhi	r8, r3
 801bfd0:	2303      	movs	r3, #3
 801bfd2:	6123      	str	r3, [r4, #16]
 801bfd4:	f02b 0304 	bic.w	r3, fp, #4
 801bfd8:	6023      	str	r3, [r4, #0]
 801bfda:	f04f 0900 	mov.w	r9, #0
 801bfde:	9700      	str	r7, [sp, #0]
 801bfe0:	4633      	mov	r3, r6
 801bfe2:	aa0b      	add	r2, sp, #44	@ 0x2c
 801bfe4:	4621      	mov	r1, r4
 801bfe6:	4628      	mov	r0, r5
 801bfe8:	f000 f9d2 	bl	801c390 <_printf_common>
 801bfec:	3001      	adds	r0, #1
 801bfee:	f040 808d 	bne.w	801c10c <_printf_float+0x1d0>
 801bff2:	f04f 30ff 	mov.w	r0, #4294967295
 801bff6:	b00d      	add	sp, #52	@ 0x34
 801bff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bffc:	4642      	mov	r2, r8
 801bffe:	464b      	mov	r3, r9
 801c000:	4640      	mov	r0, r8
 801c002:	4649      	mov	r1, r9
 801c004:	f7e4 fdaa 	bl	8000b5c <__aeabi_dcmpun>
 801c008:	b140      	cbz	r0, 801c01c <_printf_float+0xe0>
 801c00a:	464b      	mov	r3, r9
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	bfbc      	itt	lt
 801c010:	232d      	movlt	r3, #45	@ 0x2d
 801c012:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801c016:	4a7e      	ldr	r2, [pc, #504]	@ (801c210 <_printf_float+0x2d4>)
 801c018:	4b7e      	ldr	r3, [pc, #504]	@ (801c214 <_printf_float+0x2d8>)
 801c01a:	e7d4      	b.n	801bfc6 <_printf_float+0x8a>
 801c01c:	6863      	ldr	r3, [r4, #4]
 801c01e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801c022:	9206      	str	r2, [sp, #24]
 801c024:	1c5a      	adds	r2, r3, #1
 801c026:	d13b      	bne.n	801c0a0 <_printf_float+0x164>
 801c028:	2306      	movs	r3, #6
 801c02a:	6063      	str	r3, [r4, #4]
 801c02c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801c030:	2300      	movs	r3, #0
 801c032:	6022      	str	r2, [r4, #0]
 801c034:	9303      	str	r3, [sp, #12]
 801c036:	ab0a      	add	r3, sp, #40	@ 0x28
 801c038:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c03c:	ab09      	add	r3, sp, #36	@ 0x24
 801c03e:	9300      	str	r3, [sp, #0]
 801c040:	6861      	ldr	r1, [r4, #4]
 801c042:	ec49 8b10 	vmov	d0, r8, r9
 801c046:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801c04a:	4628      	mov	r0, r5
 801c04c:	f7ff fed6 	bl	801bdfc <__cvt>
 801c050:	9b06      	ldr	r3, [sp, #24]
 801c052:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c054:	2b47      	cmp	r3, #71	@ 0x47
 801c056:	4680      	mov	r8, r0
 801c058:	d129      	bne.n	801c0ae <_printf_float+0x172>
 801c05a:	1cc8      	adds	r0, r1, #3
 801c05c:	db02      	blt.n	801c064 <_printf_float+0x128>
 801c05e:	6863      	ldr	r3, [r4, #4]
 801c060:	4299      	cmp	r1, r3
 801c062:	dd41      	ble.n	801c0e8 <_printf_float+0x1ac>
 801c064:	f1aa 0a02 	sub.w	sl, sl, #2
 801c068:	fa5f fa8a 	uxtb.w	sl, sl
 801c06c:	3901      	subs	r1, #1
 801c06e:	4652      	mov	r2, sl
 801c070:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801c074:	9109      	str	r1, [sp, #36]	@ 0x24
 801c076:	f7ff ff26 	bl	801bec6 <__exponent>
 801c07a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c07c:	1813      	adds	r3, r2, r0
 801c07e:	2a01      	cmp	r2, #1
 801c080:	4681      	mov	r9, r0
 801c082:	6123      	str	r3, [r4, #16]
 801c084:	dc02      	bgt.n	801c08c <_printf_float+0x150>
 801c086:	6822      	ldr	r2, [r4, #0]
 801c088:	07d2      	lsls	r2, r2, #31
 801c08a:	d501      	bpl.n	801c090 <_printf_float+0x154>
 801c08c:	3301      	adds	r3, #1
 801c08e:	6123      	str	r3, [r4, #16]
 801c090:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801c094:	2b00      	cmp	r3, #0
 801c096:	d0a2      	beq.n	801bfde <_printf_float+0xa2>
 801c098:	232d      	movs	r3, #45	@ 0x2d
 801c09a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c09e:	e79e      	b.n	801bfde <_printf_float+0xa2>
 801c0a0:	9a06      	ldr	r2, [sp, #24]
 801c0a2:	2a47      	cmp	r2, #71	@ 0x47
 801c0a4:	d1c2      	bne.n	801c02c <_printf_float+0xf0>
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d1c0      	bne.n	801c02c <_printf_float+0xf0>
 801c0aa:	2301      	movs	r3, #1
 801c0ac:	e7bd      	b.n	801c02a <_printf_float+0xee>
 801c0ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c0b2:	d9db      	bls.n	801c06c <_printf_float+0x130>
 801c0b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801c0b8:	d118      	bne.n	801c0ec <_printf_float+0x1b0>
 801c0ba:	2900      	cmp	r1, #0
 801c0bc:	6863      	ldr	r3, [r4, #4]
 801c0be:	dd0b      	ble.n	801c0d8 <_printf_float+0x19c>
 801c0c0:	6121      	str	r1, [r4, #16]
 801c0c2:	b913      	cbnz	r3, 801c0ca <_printf_float+0x18e>
 801c0c4:	6822      	ldr	r2, [r4, #0]
 801c0c6:	07d0      	lsls	r0, r2, #31
 801c0c8:	d502      	bpl.n	801c0d0 <_printf_float+0x194>
 801c0ca:	3301      	adds	r3, #1
 801c0cc:	440b      	add	r3, r1
 801c0ce:	6123      	str	r3, [r4, #16]
 801c0d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 801c0d2:	f04f 0900 	mov.w	r9, #0
 801c0d6:	e7db      	b.n	801c090 <_printf_float+0x154>
 801c0d8:	b913      	cbnz	r3, 801c0e0 <_printf_float+0x1a4>
 801c0da:	6822      	ldr	r2, [r4, #0]
 801c0dc:	07d2      	lsls	r2, r2, #31
 801c0de:	d501      	bpl.n	801c0e4 <_printf_float+0x1a8>
 801c0e0:	3302      	adds	r3, #2
 801c0e2:	e7f4      	b.n	801c0ce <_printf_float+0x192>
 801c0e4:	2301      	movs	r3, #1
 801c0e6:	e7f2      	b.n	801c0ce <_printf_float+0x192>
 801c0e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801c0ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c0ee:	4299      	cmp	r1, r3
 801c0f0:	db05      	blt.n	801c0fe <_printf_float+0x1c2>
 801c0f2:	6823      	ldr	r3, [r4, #0]
 801c0f4:	6121      	str	r1, [r4, #16]
 801c0f6:	07d8      	lsls	r0, r3, #31
 801c0f8:	d5ea      	bpl.n	801c0d0 <_printf_float+0x194>
 801c0fa:	1c4b      	adds	r3, r1, #1
 801c0fc:	e7e7      	b.n	801c0ce <_printf_float+0x192>
 801c0fe:	2900      	cmp	r1, #0
 801c100:	bfd4      	ite	le
 801c102:	f1c1 0202 	rsble	r2, r1, #2
 801c106:	2201      	movgt	r2, #1
 801c108:	4413      	add	r3, r2
 801c10a:	e7e0      	b.n	801c0ce <_printf_float+0x192>
 801c10c:	6823      	ldr	r3, [r4, #0]
 801c10e:	055a      	lsls	r2, r3, #21
 801c110:	d407      	bmi.n	801c122 <_printf_float+0x1e6>
 801c112:	6923      	ldr	r3, [r4, #16]
 801c114:	4642      	mov	r2, r8
 801c116:	4631      	mov	r1, r6
 801c118:	4628      	mov	r0, r5
 801c11a:	47b8      	blx	r7
 801c11c:	3001      	adds	r0, #1
 801c11e:	d12b      	bne.n	801c178 <_printf_float+0x23c>
 801c120:	e767      	b.n	801bff2 <_printf_float+0xb6>
 801c122:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c126:	f240 80dd 	bls.w	801c2e4 <_printf_float+0x3a8>
 801c12a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c12e:	2200      	movs	r2, #0
 801c130:	2300      	movs	r3, #0
 801c132:	f7e4 fce1 	bl	8000af8 <__aeabi_dcmpeq>
 801c136:	2800      	cmp	r0, #0
 801c138:	d033      	beq.n	801c1a2 <_printf_float+0x266>
 801c13a:	4a37      	ldr	r2, [pc, #220]	@ (801c218 <_printf_float+0x2dc>)
 801c13c:	2301      	movs	r3, #1
 801c13e:	4631      	mov	r1, r6
 801c140:	4628      	mov	r0, r5
 801c142:	47b8      	blx	r7
 801c144:	3001      	adds	r0, #1
 801c146:	f43f af54 	beq.w	801bff2 <_printf_float+0xb6>
 801c14a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801c14e:	4543      	cmp	r3, r8
 801c150:	db02      	blt.n	801c158 <_printf_float+0x21c>
 801c152:	6823      	ldr	r3, [r4, #0]
 801c154:	07d8      	lsls	r0, r3, #31
 801c156:	d50f      	bpl.n	801c178 <_printf_float+0x23c>
 801c158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c15c:	4631      	mov	r1, r6
 801c15e:	4628      	mov	r0, r5
 801c160:	47b8      	blx	r7
 801c162:	3001      	adds	r0, #1
 801c164:	f43f af45 	beq.w	801bff2 <_printf_float+0xb6>
 801c168:	f04f 0900 	mov.w	r9, #0
 801c16c:	f108 38ff 	add.w	r8, r8, #4294967295
 801c170:	f104 0a1a 	add.w	sl, r4, #26
 801c174:	45c8      	cmp	r8, r9
 801c176:	dc09      	bgt.n	801c18c <_printf_float+0x250>
 801c178:	6823      	ldr	r3, [r4, #0]
 801c17a:	079b      	lsls	r3, r3, #30
 801c17c:	f100 8103 	bmi.w	801c386 <_printf_float+0x44a>
 801c180:	68e0      	ldr	r0, [r4, #12]
 801c182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c184:	4298      	cmp	r0, r3
 801c186:	bfb8      	it	lt
 801c188:	4618      	movlt	r0, r3
 801c18a:	e734      	b.n	801bff6 <_printf_float+0xba>
 801c18c:	2301      	movs	r3, #1
 801c18e:	4652      	mov	r2, sl
 801c190:	4631      	mov	r1, r6
 801c192:	4628      	mov	r0, r5
 801c194:	47b8      	blx	r7
 801c196:	3001      	adds	r0, #1
 801c198:	f43f af2b 	beq.w	801bff2 <_printf_float+0xb6>
 801c19c:	f109 0901 	add.w	r9, r9, #1
 801c1a0:	e7e8      	b.n	801c174 <_printf_float+0x238>
 801c1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	dc39      	bgt.n	801c21c <_printf_float+0x2e0>
 801c1a8:	4a1b      	ldr	r2, [pc, #108]	@ (801c218 <_printf_float+0x2dc>)
 801c1aa:	2301      	movs	r3, #1
 801c1ac:	4631      	mov	r1, r6
 801c1ae:	4628      	mov	r0, r5
 801c1b0:	47b8      	blx	r7
 801c1b2:	3001      	adds	r0, #1
 801c1b4:	f43f af1d 	beq.w	801bff2 <_printf_float+0xb6>
 801c1b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801c1bc:	ea59 0303 	orrs.w	r3, r9, r3
 801c1c0:	d102      	bne.n	801c1c8 <_printf_float+0x28c>
 801c1c2:	6823      	ldr	r3, [r4, #0]
 801c1c4:	07d9      	lsls	r1, r3, #31
 801c1c6:	d5d7      	bpl.n	801c178 <_printf_float+0x23c>
 801c1c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c1cc:	4631      	mov	r1, r6
 801c1ce:	4628      	mov	r0, r5
 801c1d0:	47b8      	blx	r7
 801c1d2:	3001      	adds	r0, #1
 801c1d4:	f43f af0d 	beq.w	801bff2 <_printf_float+0xb6>
 801c1d8:	f04f 0a00 	mov.w	sl, #0
 801c1dc:	f104 0b1a 	add.w	fp, r4, #26
 801c1e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c1e2:	425b      	negs	r3, r3
 801c1e4:	4553      	cmp	r3, sl
 801c1e6:	dc01      	bgt.n	801c1ec <_printf_float+0x2b0>
 801c1e8:	464b      	mov	r3, r9
 801c1ea:	e793      	b.n	801c114 <_printf_float+0x1d8>
 801c1ec:	2301      	movs	r3, #1
 801c1ee:	465a      	mov	r2, fp
 801c1f0:	4631      	mov	r1, r6
 801c1f2:	4628      	mov	r0, r5
 801c1f4:	47b8      	blx	r7
 801c1f6:	3001      	adds	r0, #1
 801c1f8:	f43f aefb 	beq.w	801bff2 <_printf_float+0xb6>
 801c1fc:	f10a 0a01 	add.w	sl, sl, #1
 801c200:	e7ee      	b.n	801c1e0 <_printf_float+0x2a4>
 801c202:	bf00      	nop
 801c204:	7fefffff 	.word	0x7fefffff
 801c208:	0806e320 	.word	0x0806e320
 801c20c:	0806e324 	.word	0x0806e324
 801c210:	0806e328 	.word	0x0806e328
 801c214:	0806e32c 	.word	0x0806e32c
 801c218:	0806e330 	.word	0x0806e330
 801c21c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c21e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c222:	4553      	cmp	r3, sl
 801c224:	bfa8      	it	ge
 801c226:	4653      	movge	r3, sl
 801c228:	2b00      	cmp	r3, #0
 801c22a:	4699      	mov	r9, r3
 801c22c:	dc36      	bgt.n	801c29c <_printf_float+0x360>
 801c22e:	f04f 0b00 	mov.w	fp, #0
 801c232:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c236:	f104 021a 	add.w	r2, r4, #26
 801c23a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c23c:	9306      	str	r3, [sp, #24]
 801c23e:	eba3 0309 	sub.w	r3, r3, r9
 801c242:	455b      	cmp	r3, fp
 801c244:	dc31      	bgt.n	801c2aa <_printf_float+0x36e>
 801c246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c248:	459a      	cmp	sl, r3
 801c24a:	dc3a      	bgt.n	801c2c2 <_printf_float+0x386>
 801c24c:	6823      	ldr	r3, [r4, #0]
 801c24e:	07da      	lsls	r2, r3, #31
 801c250:	d437      	bmi.n	801c2c2 <_printf_float+0x386>
 801c252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c254:	ebaa 0903 	sub.w	r9, sl, r3
 801c258:	9b06      	ldr	r3, [sp, #24]
 801c25a:	ebaa 0303 	sub.w	r3, sl, r3
 801c25e:	4599      	cmp	r9, r3
 801c260:	bfa8      	it	ge
 801c262:	4699      	movge	r9, r3
 801c264:	f1b9 0f00 	cmp.w	r9, #0
 801c268:	dc33      	bgt.n	801c2d2 <_printf_float+0x396>
 801c26a:	f04f 0800 	mov.w	r8, #0
 801c26e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c272:	f104 0b1a 	add.w	fp, r4, #26
 801c276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c278:	ebaa 0303 	sub.w	r3, sl, r3
 801c27c:	eba3 0309 	sub.w	r3, r3, r9
 801c280:	4543      	cmp	r3, r8
 801c282:	f77f af79 	ble.w	801c178 <_printf_float+0x23c>
 801c286:	2301      	movs	r3, #1
 801c288:	465a      	mov	r2, fp
 801c28a:	4631      	mov	r1, r6
 801c28c:	4628      	mov	r0, r5
 801c28e:	47b8      	blx	r7
 801c290:	3001      	adds	r0, #1
 801c292:	f43f aeae 	beq.w	801bff2 <_printf_float+0xb6>
 801c296:	f108 0801 	add.w	r8, r8, #1
 801c29a:	e7ec      	b.n	801c276 <_printf_float+0x33a>
 801c29c:	4642      	mov	r2, r8
 801c29e:	4631      	mov	r1, r6
 801c2a0:	4628      	mov	r0, r5
 801c2a2:	47b8      	blx	r7
 801c2a4:	3001      	adds	r0, #1
 801c2a6:	d1c2      	bne.n	801c22e <_printf_float+0x2f2>
 801c2a8:	e6a3      	b.n	801bff2 <_printf_float+0xb6>
 801c2aa:	2301      	movs	r3, #1
 801c2ac:	4631      	mov	r1, r6
 801c2ae:	4628      	mov	r0, r5
 801c2b0:	9206      	str	r2, [sp, #24]
 801c2b2:	47b8      	blx	r7
 801c2b4:	3001      	adds	r0, #1
 801c2b6:	f43f ae9c 	beq.w	801bff2 <_printf_float+0xb6>
 801c2ba:	9a06      	ldr	r2, [sp, #24]
 801c2bc:	f10b 0b01 	add.w	fp, fp, #1
 801c2c0:	e7bb      	b.n	801c23a <_printf_float+0x2fe>
 801c2c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c2c6:	4631      	mov	r1, r6
 801c2c8:	4628      	mov	r0, r5
 801c2ca:	47b8      	blx	r7
 801c2cc:	3001      	adds	r0, #1
 801c2ce:	d1c0      	bne.n	801c252 <_printf_float+0x316>
 801c2d0:	e68f      	b.n	801bff2 <_printf_float+0xb6>
 801c2d2:	9a06      	ldr	r2, [sp, #24]
 801c2d4:	464b      	mov	r3, r9
 801c2d6:	4442      	add	r2, r8
 801c2d8:	4631      	mov	r1, r6
 801c2da:	4628      	mov	r0, r5
 801c2dc:	47b8      	blx	r7
 801c2de:	3001      	adds	r0, #1
 801c2e0:	d1c3      	bne.n	801c26a <_printf_float+0x32e>
 801c2e2:	e686      	b.n	801bff2 <_printf_float+0xb6>
 801c2e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c2e8:	f1ba 0f01 	cmp.w	sl, #1
 801c2ec:	dc01      	bgt.n	801c2f2 <_printf_float+0x3b6>
 801c2ee:	07db      	lsls	r3, r3, #31
 801c2f0:	d536      	bpl.n	801c360 <_printf_float+0x424>
 801c2f2:	2301      	movs	r3, #1
 801c2f4:	4642      	mov	r2, r8
 801c2f6:	4631      	mov	r1, r6
 801c2f8:	4628      	mov	r0, r5
 801c2fa:	47b8      	blx	r7
 801c2fc:	3001      	adds	r0, #1
 801c2fe:	f43f ae78 	beq.w	801bff2 <_printf_float+0xb6>
 801c302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c306:	4631      	mov	r1, r6
 801c308:	4628      	mov	r0, r5
 801c30a:	47b8      	blx	r7
 801c30c:	3001      	adds	r0, #1
 801c30e:	f43f ae70 	beq.w	801bff2 <_printf_float+0xb6>
 801c312:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c316:	2200      	movs	r2, #0
 801c318:	2300      	movs	r3, #0
 801c31a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c31e:	f7e4 fbeb 	bl	8000af8 <__aeabi_dcmpeq>
 801c322:	b9c0      	cbnz	r0, 801c356 <_printf_float+0x41a>
 801c324:	4653      	mov	r3, sl
 801c326:	f108 0201 	add.w	r2, r8, #1
 801c32a:	4631      	mov	r1, r6
 801c32c:	4628      	mov	r0, r5
 801c32e:	47b8      	blx	r7
 801c330:	3001      	adds	r0, #1
 801c332:	d10c      	bne.n	801c34e <_printf_float+0x412>
 801c334:	e65d      	b.n	801bff2 <_printf_float+0xb6>
 801c336:	2301      	movs	r3, #1
 801c338:	465a      	mov	r2, fp
 801c33a:	4631      	mov	r1, r6
 801c33c:	4628      	mov	r0, r5
 801c33e:	47b8      	blx	r7
 801c340:	3001      	adds	r0, #1
 801c342:	f43f ae56 	beq.w	801bff2 <_printf_float+0xb6>
 801c346:	f108 0801 	add.w	r8, r8, #1
 801c34a:	45d0      	cmp	r8, sl
 801c34c:	dbf3      	blt.n	801c336 <_printf_float+0x3fa>
 801c34e:	464b      	mov	r3, r9
 801c350:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c354:	e6df      	b.n	801c116 <_printf_float+0x1da>
 801c356:	f04f 0800 	mov.w	r8, #0
 801c35a:	f104 0b1a 	add.w	fp, r4, #26
 801c35e:	e7f4      	b.n	801c34a <_printf_float+0x40e>
 801c360:	2301      	movs	r3, #1
 801c362:	4642      	mov	r2, r8
 801c364:	e7e1      	b.n	801c32a <_printf_float+0x3ee>
 801c366:	2301      	movs	r3, #1
 801c368:	464a      	mov	r2, r9
 801c36a:	4631      	mov	r1, r6
 801c36c:	4628      	mov	r0, r5
 801c36e:	47b8      	blx	r7
 801c370:	3001      	adds	r0, #1
 801c372:	f43f ae3e 	beq.w	801bff2 <_printf_float+0xb6>
 801c376:	f108 0801 	add.w	r8, r8, #1
 801c37a:	68e3      	ldr	r3, [r4, #12]
 801c37c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c37e:	1a5b      	subs	r3, r3, r1
 801c380:	4543      	cmp	r3, r8
 801c382:	dcf0      	bgt.n	801c366 <_printf_float+0x42a>
 801c384:	e6fc      	b.n	801c180 <_printf_float+0x244>
 801c386:	f04f 0800 	mov.w	r8, #0
 801c38a:	f104 0919 	add.w	r9, r4, #25
 801c38e:	e7f4      	b.n	801c37a <_printf_float+0x43e>

0801c390 <_printf_common>:
 801c390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c394:	4616      	mov	r6, r2
 801c396:	4698      	mov	r8, r3
 801c398:	688a      	ldr	r2, [r1, #8]
 801c39a:	690b      	ldr	r3, [r1, #16]
 801c39c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c3a0:	4293      	cmp	r3, r2
 801c3a2:	bfb8      	it	lt
 801c3a4:	4613      	movlt	r3, r2
 801c3a6:	6033      	str	r3, [r6, #0]
 801c3a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c3ac:	4607      	mov	r7, r0
 801c3ae:	460c      	mov	r4, r1
 801c3b0:	b10a      	cbz	r2, 801c3b6 <_printf_common+0x26>
 801c3b2:	3301      	adds	r3, #1
 801c3b4:	6033      	str	r3, [r6, #0]
 801c3b6:	6823      	ldr	r3, [r4, #0]
 801c3b8:	0699      	lsls	r1, r3, #26
 801c3ba:	bf42      	ittt	mi
 801c3bc:	6833      	ldrmi	r3, [r6, #0]
 801c3be:	3302      	addmi	r3, #2
 801c3c0:	6033      	strmi	r3, [r6, #0]
 801c3c2:	6825      	ldr	r5, [r4, #0]
 801c3c4:	f015 0506 	ands.w	r5, r5, #6
 801c3c8:	d106      	bne.n	801c3d8 <_printf_common+0x48>
 801c3ca:	f104 0a19 	add.w	sl, r4, #25
 801c3ce:	68e3      	ldr	r3, [r4, #12]
 801c3d0:	6832      	ldr	r2, [r6, #0]
 801c3d2:	1a9b      	subs	r3, r3, r2
 801c3d4:	42ab      	cmp	r3, r5
 801c3d6:	dc26      	bgt.n	801c426 <_printf_common+0x96>
 801c3d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c3dc:	6822      	ldr	r2, [r4, #0]
 801c3de:	3b00      	subs	r3, #0
 801c3e0:	bf18      	it	ne
 801c3e2:	2301      	movne	r3, #1
 801c3e4:	0692      	lsls	r2, r2, #26
 801c3e6:	d42b      	bmi.n	801c440 <_printf_common+0xb0>
 801c3e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c3ec:	4641      	mov	r1, r8
 801c3ee:	4638      	mov	r0, r7
 801c3f0:	47c8      	blx	r9
 801c3f2:	3001      	adds	r0, #1
 801c3f4:	d01e      	beq.n	801c434 <_printf_common+0xa4>
 801c3f6:	6823      	ldr	r3, [r4, #0]
 801c3f8:	6922      	ldr	r2, [r4, #16]
 801c3fa:	f003 0306 	and.w	r3, r3, #6
 801c3fe:	2b04      	cmp	r3, #4
 801c400:	bf02      	ittt	eq
 801c402:	68e5      	ldreq	r5, [r4, #12]
 801c404:	6833      	ldreq	r3, [r6, #0]
 801c406:	1aed      	subeq	r5, r5, r3
 801c408:	68a3      	ldr	r3, [r4, #8]
 801c40a:	bf0c      	ite	eq
 801c40c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c410:	2500      	movne	r5, #0
 801c412:	4293      	cmp	r3, r2
 801c414:	bfc4      	itt	gt
 801c416:	1a9b      	subgt	r3, r3, r2
 801c418:	18ed      	addgt	r5, r5, r3
 801c41a:	2600      	movs	r6, #0
 801c41c:	341a      	adds	r4, #26
 801c41e:	42b5      	cmp	r5, r6
 801c420:	d11a      	bne.n	801c458 <_printf_common+0xc8>
 801c422:	2000      	movs	r0, #0
 801c424:	e008      	b.n	801c438 <_printf_common+0xa8>
 801c426:	2301      	movs	r3, #1
 801c428:	4652      	mov	r2, sl
 801c42a:	4641      	mov	r1, r8
 801c42c:	4638      	mov	r0, r7
 801c42e:	47c8      	blx	r9
 801c430:	3001      	adds	r0, #1
 801c432:	d103      	bne.n	801c43c <_printf_common+0xac>
 801c434:	f04f 30ff 	mov.w	r0, #4294967295
 801c438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c43c:	3501      	adds	r5, #1
 801c43e:	e7c6      	b.n	801c3ce <_printf_common+0x3e>
 801c440:	18e1      	adds	r1, r4, r3
 801c442:	1c5a      	adds	r2, r3, #1
 801c444:	2030      	movs	r0, #48	@ 0x30
 801c446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c44a:	4422      	add	r2, r4
 801c44c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c454:	3302      	adds	r3, #2
 801c456:	e7c7      	b.n	801c3e8 <_printf_common+0x58>
 801c458:	2301      	movs	r3, #1
 801c45a:	4622      	mov	r2, r4
 801c45c:	4641      	mov	r1, r8
 801c45e:	4638      	mov	r0, r7
 801c460:	47c8      	blx	r9
 801c462:	3001      	adds	r0, #1
 801c464:	d0e6      	beq.n	801c434 <_printf_common+0xa4>
 801c466:	3601      	adds	r6, #1
 801c468:	e7d9      	b.n	801c41e <_printf_common+0x8e>
	...

0801c46c <_printf_i>:
 801c46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c470:	7e0f      	ldrb	r7, [r1, #24]
 801c472:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c474:	2f78      	cmp	r7, #120	@ 0x78
 801c476:	4691      	mov	r9, r2
 801c478:	4680      	mov	r8, r0
 801c47a:	460c      	mov	r4, r1
 801c47c:	469a      	mov	sl, r3
 801c47e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c482:	d807      	bhi.n	801c494 <_printf_i+0x28>
 801c484:	2f62      	cmp	r7, #98	@ 0x62
 801c486:	d80a      	bhi.n	801c49e <_printf_i+0x32>
 801c488:	2f00      	cmp	r7, #0
 801c48a:	f000 80d2 	beq.w	801c632 <_printf_i+0x1c6>
 801c48e:	2f58      	cmp	r7, #88	@ 0x58
 801c490:	f000 80b9 	beq.w	801c606 <_printf_i+0x19a>
 801c494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c49c:	e03a      	b.n	801c514 <_printf_i+0xa8>
 801c49e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c4a2:	2b15      	cmp	r3, #21
 801c4a4:	d8f6      	bhi.n	801c494 <_printf_i+0x28>
 801c4a6:	a101      	add	r1, pc, #4	@ (adr r1, 801c4ac <_printf_i+0x40>)
 801c4a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c4ac:	0801c505 	.word	0x0801c505
 801c4b0:	0801c519 	.word	0x0801c519
 801c4b4:	0801c495 	.word	0x0801c495
 801c4b8:	0801c495 	.word	0x0801c495
 801c4bc:	0801c495 	.word	0x0801c495
 801c4c0:	0801c495 	.word	0x0801c495
 801c4c4:	0801c519 	.word	0x0801c519
 801c4c8:	0801c495 	.word	0x0801c495
 801c4cc:	0801c495 	.word	0x0801c495
 801c4d0:	0801c495 	.word	0x0801c495
 801c4d4:	0801c495 	.word	0x0801c495
 801c4d8:	0801c619 	.word	0x0801c619
 801c4dc:	0801c543 	.word	0x0801c543
 801c4e0:	0801c5d3 	.word	0x0801c5d3
 801c4e4:	0801c495 	.word	0x0801c495
 801c4e8:	0801c495 	.word	0x0801c495
 801c4ec:	0801c63b 	.word	0x0801c63b
 801c4f0:	0801c495 	.word	0x0801c495
 801c4f4:	0801c543 	.word	0x0801c543
 801c4f8:	0801c495 	.word	0x0801c495
 801c4fc:	0801c495 	.word	0x0801c495
 801c500:	0801c5db 	.word	0x0801c5db
 801c504:	6833      	ldr	r3, [r6, #0]
 801c506:	1d1a      	adds	r2, r3, #4
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	6032      	str	r2, [r6, #0]
 801c50c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c514:	2301      	movs	r3, #1
 801c516:	e09d      	b.n	801c654 <_printf_i+0x1e8>
 801c518:	6833      	ldr	r3, [r6, #0]
 801c51a:	6820      	ldr	r0, [r4, #0]
 801c51c:	1d19      	adds	r1, r3, #4
 801c51e:	6031      	str	r1, [r6, #0]
 801c520:	0606      	lsls	r6, r0, #24
 801c522:	d501      	bpl.n	801c528 <_printf_i+0xbc>
 801c524:	681d      	ldr	r5, [r3, #0]
 801c526:	e003      	b.n	801c530 <_printf_i+0xc4>
 801c528:	0645      	lsls	r5, r0, #25
 801c52a:	d5fb      	bpl.n	801c524 <_printf_i+0xb8>
 801c52c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c530:	2d00      	cmp	r5, #0
 801c532:	da03      	bge.n	801c53c <_printf_i+0xd0>
 801c534:	232d      	movs	r3, #45	@ 0x2d
 801c536:	426d      	negs	r5, r5
 801c538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c53c:	4859      	ldr	r0, [pc, #356]	@ (801c6a4 <_printf_i+0x238>)
 801c53e:	230a      	movs	r3, #10
 801c540:	e011      	b.n	801c566 <_printf_i+0xfa>
 801c542:	6821      	ldr	r1, [r4, #0]
 801c544:	6833      	ldr	r3, [r6, #0]
 801c546:	0608      	lsls	r0, r1, #24
 801c548:	f853 5b04 	ldr.w	r5, [r3], #4
 801c54c:	d402      	bmi.n	801c554 <_printf_i+0xe8>
 801c54e:	0649      	lsls	r1, r1, #25
 801c550:	bf48      	it	mi
 801c552:	b2ad      	uxthmi	r5, r5
 801c554:	2f6f      	cmp	r7, #111	@ 0x6f
 801c556:	4853      	ldr	r0, [pc, #332]	@ (801c6a4 <_printf_i+0x238>)
 801c558:	6033      	str	r3, [r6, #0]
 801c55a:	bf14      	ite	ne
 801c55c:	230a      	movne	r3, #10
 801c55e:	2308      	moveq	r3, #8
 801c560:	2100      	movs	r1, #0
 801c562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c566:	6866      	ldr	r6, [r4, #4]
 801c568:	60a6      	str	r6, [r4, #8]
 801c56a:	2e00      	cmp	r6, #0
 801c56c:	bfa2      	ittt	ge
 801c56e:	6821      	ldrge	r1, [r4, #0]
 801c570:	f021 0104 	bicge.w	r1, r1, #4
 801c574:	6021      	strge	r1, [r4, #0]
 801c576:	b90d      	cbnz	r5, 801c57c <_printf_i+0x110>
 801c578:	2e00      	cmp	r6, #0
 801c57a:	d04b      	beq.n	801c614 <_printf_i+0x1a8>
 801c57c:	4616      	mov	r6, r2
 801c57e:	fbb5 f1f3 	udiv	r1, r5, r3
 801c582:	fb03 5711 	mls	r7, r3, r1, r5
 801c586:	5dc7      	ldrb	r7, [r0, r7]
 801c588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c58c:	462f      	mov	r7, r5
 801c58e:	42bb      	cmp	r3, r7
 801c590:	460d      	mov	r5, r1
 801c592:	d9f4      	bls.n	801c57e <_printf_i+0x112>
 801c594:	2b08      	cmp	r3, #8
 801c596:	d10b      	bne.n	801c5b0 <_printf_i+0x144>
 801c598:	6823      	ldr	r3, [r4, #0]
 801c59a:	07df      	lsls	r7, r3, #31
 801c59c:	d508      	bpl.n	801c5b0 <_printf_i+0x144>
 801c59e:	6923      	ldr	r3, [r4, #16]
 801c5a0:	6861      	ldr	r1, [r4, #4]
 801c5a2:	4299      	cmp	r1, r3
 801c5a4:	bfde      	ittt	le
 801c5a6:	2330      	movle	r3, #48	@ 0x30
 801c5a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c5ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c5b0:	1b92      	subs	r2, r2, r6
 801c5b2:	6122      	str	r2, [r4, #16]
 801c5b4:	f8cd a000 	str.w	sl, [sp]
 801c5b8:	464b      	mov	r3, r9
 801c5ba:	aa03      	add	r2, sp, #12
 801c5bc:	4621      	mov	r1, r4
 801c5be:	4640      	mov	r0, r8
 801c5c0:	f7ff fee6 	bl	801c390 <_printf_common>
 801c5c4:	3001      	adds	r0, #1
 801c5c6:	d14a      	bne.n	801c65e <_printf_i+0x1f2>
 801c5c8:	f04f 30ff 	mov.w	r0, #4294967295
 801c5cc:	b004      	add	sp, #16
 801c5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5d2:	6823      	ldr	r3, [r4, #0]
 801c5d4:	f043 0320 	orr.w	r3, r3, #32
 801c5d8:	6023      	str	r3, [r4, #0]
 801c5da:	4833      	ldr	r0, [pc, #204]	@ (801c6a8 <_printf_i+0x23c>)
 801c5dc:	2778      	movs	r7, #120	@ 0x78
 801c5de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c5e2:	6823      	ldr	r3, [r4, #0]
 801c5e4:	6831      	ldr	r1, [r6, #0]
 801c5e6:	061f      	lsls	r7, r3, #24
 801c5e8:	f851 5b04 	ldr.w	r5, [r1], #4
 801c5ec:	d402      	bmi.n	801c5f4 <_printf_i+0x188>
 801c5ee:	065f      	lsls	r7, r3, #25
 801c5f0:	bf48      	it	mi
 801c5f2:	b2ad      	uxthmi	r5, r5
 801c5f4:	6031      	str	r1, [r6, #0]
 801c5f6:	07d9      	lsls	r1, r3, #31
 801c5f8:	bf44      	itt	mi
 801c5fa:	f043 0320 	orrmi.w	r3, r3, #32
 801c5fe:	6023      	strmi	r3, [r4, #0]
 801c600:	b11d      	cbz	r5, 801c60a <_printf_i+0x19e>
 801c602:	2310      	movs	r3, #16
 801c604:	e7ac      	b.n	801c560 <_printf_i+0xf4>
 801c606:	4827      	ldr	r0, [pc, #156]	@ (801c6a4 <_printf_i+0x238>)
 801c608:	e7e9      	b.n	801c5de <_printf_i+0x172>
 801c60a:	6823      	ldr	r3, [r4, #0]
 801c60c:	f023 0320 	bic.w	r3, r3, #32
 801c610:	6023      	str	r3, [r4, #0]
 801c612:	e7f6      	b.n	801c602 <_printf_i+0x196>
 801c614:	4616      	mov	r6, r2
 801c616:	e7bd      	b.n	801c594 <_printf_i+0x128>
 801c618:	6833      	ldr	r3, [r6, #0]
 801c61a:	6825      	ldr	r5, [r4, #0]
 801c61c:	6961      	ldr	r1, [r4, #20]
 801c61e:	1d18      	adds	r0, r3, #4
 801c620:	6030      	str	r0, [r6, #0]
 801c622:	062e      	lsls	r6, r5, #24
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	d501      	bpl.n	801c62c <_printf_i+0x1c0>
 801c628:	6019      	str	r1, [r3, #0]
 801c62a:	e002      	b.n	801c632 <_printf_i+0x1c6>
 801c62c:	0668      	lsls	r0, r5, #25
 801c62e:	d5fb      	bpl.n	801c628 <_printf_i+0x1bc>
 801c630:	8019      	strh	r1, [r3, #0]
 801c632:	2300      	movs	r3, #0
 801c634:	6123      	str	r3, [r4, #16]
 801c636:	4616      	mov	r6, r2
 801c638:	e7bc      	b.n	801c5b4 <_printf_i+0x148>
 801c63a:	6833      	ldr	r3, [r6, #0]
 801c63c:	1d1a      	adds	r2, r3, #4
 801c63e:	6032      	str	r2, [r6, #0]
 801c640:	681e      	ldr	r6, [r3, #0]
 801c642:	6862      	ldr	r2, [r4, #4]
 801c644:	2100      	movs	r1, #0
 801c646:	4630      	mov	r0, r6
 801c648:	f7e3 fdda 	bl	8000200 <memchr>
 801c64c:	b108      	cbz	r0, 801c652 <_printf_i+0x1e6>
 801c64e:	1b80      	subs	r0, r0, r6
 801c650:	6060      	str	r0, [r4, #4]
 801c652:	6863      	ldr	r3, [r4, #4]
 801c654:	6123      	str	r3, [r4, #16]
 801c656:	2300      	movs	r3, #0
 801c658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c65c:	e7aa      	b.n	801c5b4 <_printf_i+0x148>
 801c65e:	6923      	ldr	r3, [r4, #16]
 801c660:	4632      	mov	r2, r6
 801c662:	4649      	mov	r1, r9
 801c664:	4640      	mov	r0, r8
 801c666:	47d0      	blx	sl
 801c668:	3001      	adds	r0, #1
 801c66a:	d0ad      	beq.n	801c5c8 <_printf_i+0x15c>
 801c66c:	6823      	ldr	r3, [r4, #0]
 801c66e:	079b      	lsls	r3, r3, #30
 801c670:	d413      	bmi.n	801c69a <_printf_i+0x22e>
 801c672:	68e0      	ldr	r0, [r4, #12]
 801c674:	9b03      	ldr	r3, [sp, #12]
 801c676:	4298      	cmp	r0, r3
 801c678:	bfb8      	it	lt
 801c67a:	4618      	movlt	r0, r3
 801c67c:	e7a6      	b.n	801c5cc <_printf_i+0x160>
 801c67e:	2301      	movs	r3, #1
 801c680:	4632      	mov	r2, r6
 801c682:	4649      	mov	r1, r9
 801c684:	4640      	mov	r0, r8
 801c686:	47d0      	blx	sl
 801c688:	3001      	adds	r0, #1
 801c68a:	d09d      	beq.n	801c5c8 <_printf_i+0x15c>
 801c68c:	3501      	adds	r5, #1
 801c68e:	68e3      	ldr	r3, [r4, #12]
 801c690:	9903      	ldr	r1, [sp, #12]
 801c692:	1a5b      	subs	r3, r3, r1
 801c694:	42ab      	cmp	r3, r5
 801c696:	dcf2      	bgt.n	801c67e <_printf_i+0x212>
 801c698:	e7eb      	b.n	801c672 <_printf_i+0x206>
 801c69a:	2500      	movs	r5, #0
 801c69c:	f104 0619 	add.w	r6, r4, #25
 801c6a0:	e7f5      	b.n	801c68e <_printf_i+0x222>
 801c6a2:	bf00      	nop
 801c6a4:	0806e332 	.word	0x0806e332
 801c6a8:	0806e343 	.word	0x0806e343

0801c6ac <std>:
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	b510      	push	{r4, lr}
 801c6b0:	4604      	mov	r4, r0
 801c6b2:	e9c0 3300 	strd	r3, r3, [r0]
 801c6b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c6ba:	6083      	str	r3, [r0, #8]
 801c6bc:	8181      	strh	r1, [r0, #12]
 801c6be:	6643      	str	r3, [r0, #100]	@ 0x64
 801c6c0:	81c2      	strh	r2, [r0, #14]
 801c6c2:	6183      	str	r3, [r0, #24]
 801c6c4:	4619      	mov	r1, r3
 801c6c6:	2208      	movs	r2, #8
 801c6c8:	305c      	adds	r0, #92	@ 0x5c
 801c6ca:	f000 fa13 	bl	801caf4 <memset>
 801c6ce:	4b0d      	ldr	r3, [pc, #52]	@ (801c704 <std+0x58>)
 801c6d0:	6263      	str	r3, [r4, #36]	@ 0x24
 801c6d2:	4b0d      	ldr	r3, [pc, #52]	@ (801c708 <std+0x5c>)
 801c6d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c6d6:	4b0d      	ldr	r3, [pc, #52]	@ (801c70c <std+0x60>)
 801c6d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c6da:	4b0d      	ldr	r3, [pc, #52]	@ (801c710 <std+0x64>)
 801c6dc:	6323      	str	r3, [r4, #48]	@ 0x30
 801c6de:	4b0d      	ldr	r3, [pc, #52]	@ (801c714 <std+0x68>)
 801c6e0:	6224      	str	r4, [r4, #32]
 801c6e2:	429c      	cmp	r4, r3
 801c6e4:	d006      	beq.n	801c6f4 <std+0x48>
 801c6e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c6ea:	4294      	cmp	r4, r2
 801c6ec:	d002      	beq.n	801c6f4 <std+0x48>
 801c6ee:	33d0      	adds	r3, #208	@ 0xd0
 801c6f0:	429c      	cmp	r4, r3
 801c6f2:	d105      	bne.n	801c700 <std+0x54>
 801c6f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c6fc:	f000 baac 	b.w	801cc58 <__retarget_lock_init_recursive>
 801c700:	bd10      	pop	{r4, pc}
 801c702:	bf00      	nop
 801c704:	0801c911 	.word	0x0801c911
 801c708:	0801c933 	.word	0x0801c933
 801c70c:	0801c96b 	.word	0x0801c96b
 801c710:	0801c98f 	.word	0x0801c98f
 801c714:	20013ee8 	.word	0x20013ee8

0801c718 <stdio_exit_handler>:
 801c718:	4a02      	ldr	r2, [pc, #8]	@ (801c724 <stdio_exit_handler+0xc>)
 801c71a:	4903      	ldr	r1, [pc, #12]	@ (801c728 <stdio_exit_handler+0x10>)
 801c71c:	4803      	ldr	r0, [pc, #12]	@ (801c72c <stdio_exit_handler+0x14>)
 801c71e:	f000 b869 	b.w	801c7f4 <_fwalk_sglue>
 801c722:	bf00      	nop
 801c724:	200000c4 	.word	0x200000c4
 801c728:	0801e485 	.word	0x0801e485
 801c72c:	200000d4 	.word	0x200000d4

0801c730 <cleanup_stdio>:
 801c730:	6841      	ldr	r1, [r0, #4]
 801c732:	4b0c      	ldr	r3, [pc, #48]	@ (801c764 <cleanup_stdio+0x34>)
 801c734:	4299      	cmp	r1, r3
 801c736:	b510      	push	{r4, lr}
 801c738:	4604      	mov	r4, r0
 801c73a:	d001      	beq.n	801c740 <cleanup_stdio+0x10>
 801c73c:	f001 fea2 	bl	801e484 <_fflush_r>
 801c740:	68a1      	ldr	r1, [r4, #8]
 801c742:	4b09      	ldr	r3, [pc, #36]	@ (801c768 <cleanup_stdio+0x38>)
 801c744:	4299      	cmp	r1, r3
 801c746:	d002      	beq.n	801c74e <cleanup_stdio+0x1e>
 801c748:	4620      	mov	r0, r4
 801c74a:	f001 fe9b 	bl	801e484 <_fflush_r>
 801c74e:	68e1      	ldr	r1, [r4, #12]
 801c750:	4b06      	ldr	r3, [pc, #24]	@ (801c76c <cleanup_stdio+0x3c>)
 801c752:	4299      	cmp	r1, r3
 801c754:	d004      	beq.n	801c760 <cleanup_stdio+0x30>
 801c756:	4620      	mov	r0, r4
 801c758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c75c:	f001 be92 	b.w	801e484 <_fflush_r>
 801c760:	bd10      	pop	{r4, pc}
 801c762:	bf00      	nop
 801c764:	20013ee8 	.word	0x20013ee8
 801c768:	20013f50 	.word	0x20013f50
 801c76c:	20013fb8 	.word	0x20013fb8

0801c770 <global_stdio_init.part.0>:
 801c770:	b510      	push	{r4, lr}
 801c772:	4b0b      	ldr	r3, [pc, #44]	@ (801c7a0 <global_stdio_init.part.0+0x30>)
 801c774:	4c0b      	ldr	r4, [pc, #44]	@ (801c7a4 <global_stdio_init.part.0+0x34>)
 801c776:	4a0c      	ldr	r2, [pc, #48]	@ (801c7a8 <global_stdio_init.part.0+0x38>)
 801c778:	601a      	str	r2, [r3, #0]
 801c77a:	4620      	mov	r0, r4
 801c77c:	2200      	movs	r2, #0
 801c77e:	2104      	movs	r1, #4
 801c780:	f7ff ff94 	bl	801c6ac <std>
 801c784:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c788:	2201      	movs	r2, #1
 801c78a:	2109      	movs	r1, #9
 801c78c:	f7ff ff8e 	bl	801c6ac <std>
 801c790:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c794:	2202      	movs	r2, #2
 801c796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c79a:	2112      	movs	r1, #18
 801c79c:	f7ff bf86 	b.w	801c6ac <std>
 801c7a0:	20014020 	.word	0x20014020
 801c7a4:	20013ee8 	.word	0x20013ee8
 801c7a8:	0801c719 	.word	0x0801c719

0801c7ac <__sfp_lock_acquire>:
 801c7ac:	4801      	ldr	r0, [pc, #4]	@ (801c7b4 <__sfp_lock_acquire+0x8>)
 801c7ae:	f000 ba54 	b.w	801cc5a <__retarget_lock_acquire_recursive>
 801c7b2:	bf00      	nop
 801c7b4:	20014029 	.word	0x20014029

0801c7b8 <__sfp_lock_release>:
 801c7b8:	4801      	ldr	r0, [pc, #4]	@ (801c7c0 <__sfp_lock_release+0x8>)
 801c7ba:	f000 ba4f 	b.w	801cc5c <__retarget_lock_release_recursive>
 801c7be:	bf00      	nop
 801c7c0:	20014029 	.word	0x20014029

0801c7c4 <__sinit>:
 801c7c4:	b510      	push	{r4, lr}
 801c7c6:	4604      	mov	r4, r0
 801c7c8:	f7ff fff0 	bl	801c7ac <__sfp_lock_acquire>
 801c7cc:	6a23      	ldr	r3, [r4, #32]
 801c7ce:	b11b      	cbz	r3, 801c7d8 <__sinit+0x14>
 801c7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c7d4:	f7ff bff0 	b.w	801c7b8 <__sfp_lock_release>
 801c7d8:	4b04      	ldr	r3, [pc, #16]	@ (801c7ec <__sinit+0x28>)
 801c7da:	6223      	str	r3, [r4, #32]
 801c7dc:	4b04      	ldr	r3, [pc, #16]	@ (801c7f0 <__sinit+0x2c>)
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	d1f5      	bne.n	801c7d0 <__sinit+0xc>
 801c7e4:	f7ff ffc4 	bl	801c770 <global_stdio_init.part.0>
 801c7e8:	e7f2      	b.n	801c7d0 <__sinit+0xc>
 801c7ea:	bf00      	nop
 801c7ec:	0801c731 	.word	0x0801c731
 801c7f0:	20014020 	.word	0x20014020

0801c7f4 <_fwalk_sglue>:
 801c7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c7f8:	4607      	mov	r7, r0
 801c7fa:	4688      	mov	r8, r1
 801c7fc:	4614      	mov	r4, r2
 801c7fe:	2600      	movs	r6, #0
 801c800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c804:	f1b9 0901 	subs.w	r9, r9, #1
 801c808:	d505      	bpl.n	801c816 <_fwalk_sglue+0x22>
 801c80a:	6824      	ldr	r4, [r4, #0]
 801c80c:	2c00      	cmp	r4, #0
 801c80e:	d1f7      	bne.n	801c800 <_fwalk_sglue+0xc>
 801c810:	4630      	mov	r0, r6
 801c812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c816:	89ab      	ldrh	r3, [r5, #12]
 801c818:	2b01      	cmp	r3, #1
 801c81a:	d907      	bls.n	801c82c <_fwalk_sglue+0x38>
 801c81c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c820:	3301      	adds	r3, #1
 801c822:	d003      	beq.n	801c82c <_fwalk_sglue+0x38>
 801c824:	4629      	mov	r1, r5
 801c826:	4638      	mov	r0, r7
 801c828:	47c0      	blx	r8
 801c82a:	4306      	orrs	r6, r0
 801c82c:	3568      	adds	r5, #104	@ 0x68
 801c82e:	e7e9      	b.n	801c804 <_fwalk_sglue+0x10>

0801c830 <iprintf>:
 801c830:	b40f      	push	{r0, r1, r2, r3}
 801c832:	b507      	push	{r0, r1, r2, lr}
 801c834:	4906      	ldr	r1, [pc, #24]	@ (801c850 <iprintf+0x20>)
 801c836:	ab04      	add	r3, sp, #16
 801c838:	6808      	ldr	r0, [r1, #0]
 801c83a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c83e:	6881      	ldr	r1, [r0, #8]
 801c840:	9301      	str	r3, [sp, #4]
 801c842:	f001 fc83 	bl	801e14c <_vfiprintf_r>
 801c846:	b003      	add	sp, #12
 801c848:	f85d eb04 	ldr.w	lr, [sp], #4
 801c84c:	b004      	add	sp, #16
 801c84e:	4770      	bx	lr
 801c850:	200000d0 	.word	0x200000d0

0801c854 <_puts_r>:
 801c854:	6a03      	ldr	r3, [r0, #32]
 801c856:	b570      	push	{r4, r5, r6, lr}
 801c858:	6884      	ldr	r4, [r0, #8]
 801c85a:	4605      	mov	r5, r0
 801c85c:	460e      	mov	r6, r1
 801c85e:	b90b      	cbnz	r3, 801c864 <_puts_r+0x10>
 801c860:	f7ff ffb0 	bl	801c7c4 <__sinit>
 801c864:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c866:	07db      	lsls	r3, r3, #31
 801c868:	d405      	bmi.n	801c876 <_puts_r+0x22>
 801c86a:	89a3      	ldrh	r3, [r4, #12]
 801c86c:	0598      	lsls	r0, r3, #22
 801c86e:	d402      	bmi.n	801c876 <_puts_r+0x22>
 801c870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c872:	f000 f9f2 	bl	801cc5a <__retarget_lock_acquire_recursive>
 801c876:	89a3      	ldrh	r3, [r4, #12]
 801c878:	0719      	lsls	r1, r3, #28
 801c87a:	d502      	bpl.n	801c882 <_puts_r+0x2e>
 801c87c:	6923      	ldr	r3, [r4, #16]
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d135      	bne.n	801c8ee <_puts_r+0x9a>
 801c882:	4621      	mov	r1, r4
 801c884:	4628      	mov	r0, r5
 801c886:	f000 f8cf 	bl	801ca28 <__swsetup_r>
 801c88a:	b380      	cbz	r0, 801c8ee <_puts_r+0x9a>
 801c88c:	f04f 35ff 	mov.w	r5, #4294967295
 801c890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c892:	07da      	lsls	r2, r3, #31
 801c894:	d405      	bmi.n	801c8a2 <_puts_r+0x4e>
 801c896:	89a3      	ldrh	r3, [r4, #12]
 801c898:	059b      	lsls	r3, r3, #22
 801c89a:	d402      	bmi.n	801c8a2 <_puts_r+0x4e>
 801c89c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c89e:	f000 f9dd 	bl	801cc5c <__retarget_lock_release_recursive>
 801c8a2:	4628      	mov	r0, r5
 801c8a4:	bd70      	pop	{r4, r5, r6, pc}
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	da04      	bge.n	801c8b4 <_puts_r+0x60>
 801c8aa:	69a2      	ldr	r2, [r4, #24]
 801c8ac:	429a      	cmp	r2, r3
 801c8ae:	dc17      	bgt.n	801c8e0 <_puts_r+0x8c>
 801c8b0:	290a      	cmp	r1, #10
 801c8b2:	d015      	beq.n	801c8e0 <_puts_r+0x8c>
 801c8b4:	6823      	ldr	r3, [r4, #0]
 801c8b6:	1c5a      	adds	r2, r3, #1
 801c8b8:	6022      	str	r2, [r4, #0]
 801c8ba:	7019      	strb	r1, [r3, #0]
 801c8bc:	68a3      	ldr	r3, [r4, #8]
 801c8be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c8c2:	3b01      	subs	r3, #1
 801c8c4:	60a3      	str	r3, [r4, #8]
 801c8c6:	2900      	cmp	r1, #0
 801c8c8:	d1ed      	bne.n	801c8a6 <_puts_r+0x52>
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	da11      	bge.n	801c8f2 <_puts_r+0x9e>
 801c8ce:	4622      	mov	r2, r4
 801c8d0:	210a      	movs	r1, #10
 801c8d2:	4628      	mov	r0, r5
 801c8d4:	f000 f86a 	bl	801c9ac <__swbuf_r>
 801c8d8:	3001      	adds	r0, #1
 801c8da:	d0d7      	beq.n	801c88c <_puts_r+0x38>
 801c8dc:	250a      	movs	r5, #10
 801c8de:	e7d7      	b.n	801c890 <_puts_r+0x3c>
 801c8e0:	4622      	mov	r2, r4
 801c8e2:	4628      	mov	r0, r5
 801c8e4:	f000 f862 	bl	801c9ac <__swbuf_r>
 801c8e8:	3001      	adds	r0, #1
 801c8ea:	d1e7      	bne.n	801c8bc <_puts_r+0x68>
 801c8ec:	e7ce      	b.n	801c88c <_puts_r+0x38>
 801c8ee:	3e01      	subs	r6, #1
 801c8f0:	e7e4      	b.n	801c8bc <_puts_r+0x68>
 801c8f2:	6823      	ldr	r3, [r4, #0]
 801c8f4:	1c5a      	adds	r2, r3, #1
 801c8f6:	6022      	str	r2, [r4, #0]
 801c8f8:	220a      	movs	r2, #10
 801c8fa:	701a      	strb	r2, [r3, #0]
 801c8fc:	e7ee      	b.n	801c8dc <_puts_r+0x88>
	...

0801c900 <puts>:
 801c900:	4b02      	ldr	r3, [pc, #8]	@ (801c90c <puts+0xc>)
 801c902:	4601      	mov	r1, r0
 801c904:	6818      	ldr	r0, [r3, #0]
 801c906:	f7ff bfa5 	b.w	801c854 <_puts_r>
 801c90a:	bf00      	nop
 801c90c:	200000d0 	.word	0x200000d0

0801c910 <__sread>:
 801c910:	b510      	push	{r4, lr}
 801c912:	460c      	mov	r4, r1
 801c914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c918:	f000 f940 	bl	801cb9c <_read_r>
 801c91c:	2800      	cmp	r0, #0
 801c91e:	bfab      	itete	ge
 801c920:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c922:	89a3      	ldrhlt	r3, [r4, #12]
 801c924:	181b      	addge	r3, r3, r0
 801c926:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c92a:	bfac      	ite	ge
 801c92c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c92e:	81a3      	strhlt	r3, [r4, #12]
 801c930:	bd10      	pop	{r4, pc}

0801c932 <__swrite>:
 801c932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c936:	461f      	mov	r7, r3
 801c938:	898b      	ldrh	r3, [r1, #12]
 801c93a:	05db      	lsls	r3, r3, #23
 801c93c:	4605      	mov	r5, r0
 801c93e:	460c      	mov	r4, r1
 801c940:	4616      	mov	r6, r2
 801c942:	d505      	bpl.n	801c950 <__swrite+0x1e>
 801c944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c948:	2302      	movs	r3, #2
 801c94a:	2200      	movs	r2, #0
 801c94c:	f000 f914 	bl	801cb78 <_lseek_r>
 801c950:	89a3      	ldrh	r3, [r4, #12]
 801c952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c956:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c95a:	81a3      	strh	r3, [r4, #12]
 801c95c:	4632      	mov	r2, r6
 801c95e:	463b      	mov	r3, r7
 801c960:	4628      	mov	r0, r5
 801c962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c966:	f000 b93b 	b.w	801cbe0 <_write_r>

0801c96a <__sseek>:
 801c96a:	b510      	push	{r4, lr}
 801c96c:	460c      	mov	r4, r1
 801c96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c972:	f000 f901 	bl	801cb78 <_lseek_r>
 801c976:	1c43      	adds	r3, r0, #1
 801c978:	89a3      	ldrh	r3, [r4, #12]
 801c97a:	bf15      	itete	ne
 801c97c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c97e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c982:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c986:	81a3      	strheq	r3, [r4, #12]
 801c988:	bf18      	it	ne
 801c98a:	81a3      	strhne	r3, [r4, #12]
 801c98c:	bd10      	pop	{r4, pc}

0801c98e <__sclose>:
 801c98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c992:	f000 b8e1 	b.w	801cb58 <_close_r>
	...

0801c998 <viprintf>:
 801c998:	460b      	mov	r3, r1
 801c99a:	4903      	ldr	r1, [pc, #12]	@ (801c9a8 <viprintf+0x10>)
 801c99c:	4602      	mov	r2, r0
 801c99e:	6808      	ldr	r0, [r1, #0]
 801c9a0:	6881      	ldr	r1, [r0, #8]
 801c9a2:	f001 bbd3 	b.w	801e14c <_vfiprintf_r>
 801c9a6:	bf00      	nop
 801c9a8:	200000d0 	.word	0x200000d0

0801c9ac <__swbuf_r>:
 801c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9ae:	460e      	mov	r6, r1
 801c9b0:	4614      	mov	r4, r2
 801c9b2:	4605      	mov	r5, r0
 801c9b4:	b118      	cbz	r0, 801c9be <__swbuf_r+0x12>
 801c9b6:	6a03      	ldr	r3, [r0, #32]
 801c9b8:	b90b      	cbnz	r3, 801c9be <__swbuf_r+0x12>
 801c9ba:	f7ff ff03 	bl	801c7c4 <__sinit>
 801c9be:	69a3      	ldr	r3, [r4, #24]
 801c9c0:	60a3      	str	r3, [r4, #8]
 801c9c2:	89a3      	ldrh	r3, [r4, #12]
 801c9c4:	071a      	lsls	r2, r3, #28
 801c9c6:	d501      	bpl.n	801c9cc <__swbuf_r+0x20>
 801c9c8:	6923      	ldr	r3, [r4, #16]
 801c9ca:	b943      	cbnz	r3, 801c9de <__swbuf_r+0x32>
 801c9cc:	4621      	mov	r1, r4
 801c9ce:	4628      	mov	r0, r5
 801c9d0:	f000 f82a 	bl	801ca28 <__swsetup_r>
 801c9d4:	b118      	cbz	r0, 801c9de <__swbuf_r+0x32>
 801c9d6:	f04f 37ff 	mov.w	r7, #4294967295
 801c9da:	4638      	mov	r0, r7
 801c9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c9de:	6823      	ldr	r3, [r4, #0]
 801c9e0:	6922      	ldr	r2, [r4, #16]
 801c9e2:	1a98      	subs	r0, r3, r2
 801c9e4:	6963      	ldr	r3, [r4, #20]
 801c9e6:	b2f6      	uxtb	r6, r6
 801c9e8:	4283      	cmp	r3, r0
 801c9ea:	4637      	mov	r7, r6
 801c9ec:	dc05      	bgt.n	801c9fa <__swbuf_r+0x4e>
 801c9ee:	4621      	mov	r1, r4
 801c9f0:	4628      	mov	r0, r5
 801c9f2:	f001 fd47 	bl	801e484 <_fflush_r>
 801c9f6:	2800      	cmp	r0, #0
 801c9f8:	d1ed      	bne.n	801c9d6 <__swbuf_r+0x2a>
 801c9fa:	68a3      	ldr	r3, [r4, #8]
 801c9fc:	3b01      	subs	r3, #1
 801c9fe:	60a3      	str	r3, [r4, #8]
 801ca00:	6823      	ldr	r3, [r4, #0]
 801ca02:	1c5a      	adds	r2, r3, #1
 801ca04:	6022      	str	r2, [r4, #0]
 801ca06:	701e      	strb	r6, [r3, #0]
 801ca08:	6962      	ldr	r2, [r4, #20]
 801ca0a:	1c43      	adds	r3, r0, #1
 801ca0c:	429a      	cmp	r2, r3
 801ca0e:	d004      	beq.n	801ca1a <__swbuf_r+0x6e>
 801ca10:	89a3      	ldrh	r3, [r4, #12]
 801ca12:	07db      	lsls	r3, r3, #31
 801ca14:	d5e1      	bpl.n	801c9da <__swbuf_r+0x2e>
 801ca16:	2e0a      	cmp	r6, #10
 801ca18:	d1df      	bne.n	801c9da <__swbuf_r+0x2e>
 801ca1a:	4621      	mov	r1, r4
 801ca1c:	4628      	mov	r0, r5
 801ca1e:	f001 fd31 	bl	801e484 <_fflush_r>
 801ca22:	2800      	cmp	r0, #0
 801ca24:	d0d9      	beq.n	801c9da <__swbuf_r+0x2e>
 801ca26:	e7d6      	b.n	801c9d6 <__swbuf_r+0x2a>

0801ca28 <__swsetup_r>:
 801ca28:	b538      	push	{r3, r4, r5, lr}
 801ca2a:	4b29      	ldr	r3, [pc, #164]	@ (801cad0 <__swsetup_r+0xa8>)
 801ca2c:	4605      	mov	r5, r0
 801ca2e:	6818      	ldr	r0, [r3, #0]
 801ca30:	460c      	mov	r4, r1
 801ca32:	b118      	cbz	r0, 801ca3c <__swsetup_r+0x14>
 801ca34:	6a03      	ldr	r3, [r0, #32]
 801ca36:	b90b      	cbnz	r3, 801ca3c <__swsetup_r+0x14>
 801ca38:	f7ff fec4 	bl	801c7c4 <__sinit>
 801ca3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca40:	0719      	lsls	r1, r3, #28
 801ca42:	d422      	bmi.n	801ca8a <__swsetup_r+0x62>
 801ca44:	06da      	lsls	r2, r3, #27
 801ca46:	d407      	bmi.n	801ca58 <__swsetup_r+0x30>
 801ca48:	2209      	movs	r2, #9
 801ca4a:	602a      	str	r2, [r5, #0]
 801ca4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ca50:	81a3      	strh	r3, [r4, #12]
 801ca52:	f04f 30ff 	mov.w	r0, #4294967295
 801ca56:	e033      	b.n	801cac0 <__swsetup_r+0x98>
 801ca58:	0758      	lsls	r0, r3, #29
 801ca5a:	d512      	bpl.n	801ca82 <__swsetup_r+0x5a>
 801ca5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ca5e:	b141      	cbz	r1, 801ca72 <__swsetup_r+0x4a>
 801ca60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ca64:	4299      	cmp	r1, r3
 801ca66:	d002      	beq.n	801ca6e <__swsetup_r+0x46>
 801ca68:	4628      	mov	r0, r5
 801ca6a:	f000 ff79 	bl	801d960 <_free_r>
 801ca6e:	2300      	movs	r3, #0
 801ca70:	6363      	str	r3, [r4, #52]	@ 0x34
 801ca72:	89a3      	ldrh	r3, [r4, #12]
 801ca74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ca78:	81a3      	strh	r3, [r4, #12]
 801ca7a:	2300      	movs	r3, #0
 801ca7c:	6063      	str	r3, [r4, #4]
 801ca7e:	6923      	ldr	r3, [r4, #16]
 801ca80:	6023      	str	r3, [r4, #0]
 801ca82:	89a3      	ldrh	r3, [r4, #12]
 801ca84:	f043 0308 	orr.w	r3, r3, #8
 801ca88:	81a3      	strh	r3, [r4, #12]
 801ca8a:	6923      	ldr	r3, [r4, #16]
 801ca8c:	b94b      	cbnz	r3, 801caa2 <__swsetup_r+0x7a>
 801ca8e:	89a3      	ldrh	r3, [r4, #12]
 801ca90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ca94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ca98:	d003      	beq.n	801caa2 <__swsetup_r+0x7a>
 801ca9a:	4621      	mov	r1, r4
 801ca9c:	4628      	mov	r0, r5
 801ca9e:	f001 fd51 	bl	801e544 <__smakebuf_r>
 801caa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801caa6:	f013 0201 	ands.w	r2, r3, #1
 801caaa:	d00a      	beq.n	801cac2 <__swsetup_r+0x9a>
 801caac:	2200      	movs	r2, #0
 801caae:	60a2      	str	r2, [r4, #8]
 801cab0:	6962      	ldr	r2, [r4, #20]
 801cab2:	4252      	negs	r2, r2
 801cab4:	61a2      	str	r2, [r4, #24]
 801cab6:	6922      	ldr	r2, [r4, #16]
 801cab8:	b942      	cbnz	r2, 801cacc <__swsetup_r+0xa4>
 801caba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801cabe:	d1c5      	bne.n	801ca4c <__swsetup_r+0x24>
 801cac0:	bd38      	pop	{r3, r4, r5, pc}
 801cac2:	0799      	lsls	r1, r3, #30
 801cac4:	bf58      	it	pl
 801cac6:	6962      	ldrpl	r2, [r4, #20]
 801cac8:	60a2      	str	r2, [r4, #8]
 801caca:	e7f4      	b.n	801cab6 <__swsetup_r+0x8e>
 801cacc:	2000      	movs	r0, #0
 801cace:	e7f7      	b.n	801cac0 <__swsetup_r+0x98>
 801cad0:	200000d0 	.word	0x200000d0

0801cad4 <memcmp>:
 801cad4:	b510      	push	{r4, lr}
 801cad6:	3901      	subs	r1, #1
 801cad8:	4402      	add	r2, r0
 801cada:	4290      	cmp	r0, r2
 801cadc:	d101      	bne.n	801cae2 <memcmp+0xe>
 801cade:	2000      	movs	r0, #0
 801cae0:	e005      	b.n	801caee <memcmp+0x1a>
 801cae2:	7803      	ldrb	r3, [r0, #0]
 801cae4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801cae8:	42a3      	cmp	r3, r4
 801caea:	d001      	beq.n	801caf0 <memcmp+0x1c>
 801caec:	1b18      	subs	r0, r3, r4
 801caee:	bd10      	pop	{r4, pc}
 801caf0:	3001      	adds	r0, #1
 801caf2:	e7f2      	b.n	801cada <memcmp+0x6>

0801caf4 <memset>:
 801caf4:	4402      	add	r2, r0
 801caf6:	4603      	mov	r3, r0
 801caf8:	4293      	cmp	r3, r2
 801cafa:	d100      	bne.n	801cafe <memset+0xa>
 801cafc:	4770      	bx	lr
 801cafe:	f803 1b01 	strb.w	r1, [r3], #1
 801cb02:	e7f9      	b.n	801caf8 <memset+0x4>

0801cb04 <strncmp>:
 801cb04:	b510      	push	{r4, lr}
 801cb06:	b16a      	cbz	r2, 801cb24 <strncmp+0x20>
 801cb08:	3901      	subs	r1, #1
 801cb0a:	1884      	adds	r4, r0, r2
 801cb0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb10:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801cb14:	429a      	cmp	r2, r3
 801cb16:	d103      	bne.n	801cb20 <strncmp+0x1c>
 801cb18:	42a0      	cmp	r0, r4
 801cb1a:	d001      	beq.n	801cb20 <strncmp+0x1c>
 801cb1c:	2a00      	cmp	r2, #0
 801cb1e:	d1f5      	bne.n	801cb0c <strncmp+0x8>
 801cb20:	1ad0      	subs	r0, r2, r3
 801cb22:	bd10      	pop	{r4, pc}
 801cb24:	4610      	mov	r0, r2
 801cb26:	e7fc      	b.n	801cb22 <strncmp+0x1e>

0801cb28 <strncpy>:
 801cb28:	b510      	push	{r4, lr}
 801cb2a:	3901      	subs	r1, #1
 801cb2c:	4603      	mov	r3, r0
 801cb2e:	b132      	cbz	r2, 801cb3e <strncpy+0x16>
 801cb30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801cb34:	f803 4b01 	strb.w	r4, [r3], #1
 801cb38:	3a01      	subs	r2, #1
 801cb3a:	2c00      	cmp	r4, #0
 801cb3c:	d1f7      	bne.n	801cb2e <strncpy+0x6>
 801cb3e:	441a      	add	r2, r3
 801cb40:	2100      	movs	r1, #0
 801cb42:	4293      	cmp	r3, r2
 801cb44:	d100      	bne.n	801cb48 <strncpy+0x20>
 801cb46:	bd10      	pop	{r4, pc}
 801cb48:	f803 1b01 	strb.w	r1, [r3], #1
 801cb4c:	e7f9      	b.n	801cb42 <strncpy+0x1a>
	...

0801cb50 <_localeconv_r>:
 801cb50:	4800      	ldr	r0, [pc, #0]	@ (801cb54 <_localeconv_r+0x4>)
 801cb52:	4770      	bx	lr
 801cb54:	20000210 	.word	0x20000210

0801cb58 <_close_r>:
 801cb58:	b538      	push	{r3, r4, r5, lr}
 801cb5a:	4d06      	ldr	r5, [pc, #24]	@ (801cb74 <_close_r+0x1c>)
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	4604      	mov	r4, r0
 801cb60:	4608      	mov	r0, r1
 801cb62:	602b      	str	r3, [r5, #0]
 801cb64:	f7e8 ff74 	bl	8005a50 <_close>
 801cb68:	1c43      	adds	r3, r0, #1
 801cb6a:	d102      	bne.n	801cb72 <_close_r+0x1a>
 801cb6c:	682b      	ldr	r3, [r5, #0]
 801cb6e:	b103      	cbz	r3, 801cb72 <_close_r+0x1a>
 801cb70:	6023      	str	r3, [r4, #0]
 801cb72:	bd38      	pop	{r3, r4, r5, pc}
 801cb74:	20014024 	.word	0x20014024

0801cb78 <_lseek_r>:
 801cb78:	b538      	push	{r3, r4, r5, lr}
 801cb7a:	4d07      	ldr	r5, [pc, #28]	@ (801cb98 <_lseek_r+0x20>)
 801cb7c:	4604      	mov	r4, r0
 801cb7e:	4608      	mov	r0, r1
 801cb80:	4611      	mov	r1, r2
 801cb82:	2200      	movs	r2, #0
 801cb84:	602a      	str	r2, [r5, #0]
 801cb86:	461a      	mov	r2, r3
 801cb88:	f7e8 ff89 	bl	8005a9e <_lseek>
 801cb8c:	1c43      	adds	r3, r0, #1
 801cb8e:	d102      	bne.n	801cb96 <_lseek_r+0x1e>
 801cb90:	682b      	ldr	r3, [r5, #0]
 801cb92:	b103      	cbz	r3, 801cb96 <_lseek_r+0x1e>
 801cb94:	6023      	str	r3, [r4, #0]
 801cb96:	bd38      	pop	{r3, r4, r5, pc}
 801cb98:	20014024 	.word	0x20014024

0801cb9c <_read_r>:
 801cb9c:	b538      	push	{r3, r4, r5, lr}
 801cb9e:	4d07      	ldr	r5, [pc, #28]	@ (801cbbc <_read_r+0x20>)
 801cba0:	4604      	mov	r4, r0
 801cba2:	4608      	mov	r0, r1
 801cba4:	4611      	mov	r1, r2
 801cba6:	2200      	movs	r2, #0
 801cba8:	602a      	str	r2, [r5, #0]
 801cbaa:	461a      	mov	r2, r3
 801cbac:	f7e8 ff17 	bl	80059de <_read>
 801cbb0:	1c43      	adds	r3, r0, #1
 801cbb2:	d102      	bne.n	801cbba <_read_r+0x1e>
 801cbb4:	682b      	ldr	r3, [r5, #0]
 801cbb6:	b103      	cbz	r3, 801cbba <_read_r+0x1e>
 801cbb8:	6023      	str	r3, [r4, #0]
 801cbba:	bd38      	pop	{r3, r4, r5, pc}
 801cbbc:	20014024 	.word	0x20014024

0801cbc0 <_sbrk_r>:
 801cbc0:	b538      	push	{r3, r4, r5, lr}
 801cbc2:	4d06      	ldr	r5, [pc, #24]	@ (801cbdc <_sbrk_r+0x1c>)
 801cbc4:	2300      	movs	r3, #0
 801cbc6:	4604      	mov	r4, r0
 801cbc8:	4608      	mov	r0, r1
 801cbca:	602b      	str	r3, [r5, #0]
 801cbcc:	f7e8 ff74 	bl	8005ab8 <_sbrk>
 801cbd0:	1c43      	adds	r3, r0, #1
 801cbd2:	d102      	bne.n	801cbda <_sbrk_r+0x1a>
 801cbd4:	682b      	ldr	r3, [r5, #0]
 801cbd6:	b103      	cbz	r3, 801cbda <_sbrk_r+0x1a>
 801cbd8:	6023      	str	r3, [r4, #0]
 801cbda:	bd38      	pop	{r3, r4, r5, pc}
 801cbdc:	20014024 	.word	0x20014024

0801cbe0 <_write_r>:
 801cbe0:	b538      	push	{r3, r4, r5, lr}
 801cbe2:	4d07      	ldr	r5, [pc, #28]	@ (801cc00 <_write_r+0x20>)
 801cbe4:	4604      	mov	r4, r0
 801cbe6:	4608      	mov	r0, r1
 801cbe8:	4611      	mov	r1, r2
 801cbea:	2200      	movs	r2, #0
 801cbec:	602a      	str	r2, [r5, #0]
 801cbee:	461a      	mov	r2, r3
 801cbf0:	f7e8 ff12 	bl	8005a18 <_write>
 801cbf4:	1c43      	adds	r3, r0, #1
 801cbf6:	d102      	bne.n	801cbfe <_write_r+0x1e>
 801cbf8:	682b      	ldr	r3, [r5, #0]
 801cbfa:	b103      	cbz	r3, 801cbfe <_write_r+0x1e>
 801cbfc:	6023      	str	r3, [r4, #0]
 801cbfe:	bd38      	pop	{r3, r4, r5, pc}
 801cc00:	20014024 	.word	0x20014024

0801cc04 <__errno>:
 801cc04:	4b01      	ldr	r3, [pc, #4]	@ (801cc0c <__errno+0x8>)
 801cc06:	6818      	ldr	r0, [r3, #0]
 801cc08:	4770      	bx	lr
 801cc0a:	bf00      	nop
 801cc0c:	200000d0 	.word	0x200000d0

0801cc10 <__libc_init_array>:
 801cc10:	b570      	push	{r4, r5, r6, lr}
 801cc12:	4d0d      	ldr	r5, [pc, #52]	@ (801cc48 <__libc_init_array+0x38>)
 801cc14:	4c0d      	ldr	r4, [pc, #52]	@ (801cc4c <__libc_init_array+0x3c>)
 801cc16:	1b64      	subs	r4, r4, r5
 801cc18:	10a4      	asrs	r4, r4, #2
 801cc1a:	2600      	movs	r6, #0
 801cc1c:	42a6      	cmp	r6, r4
 801cc1e:	d109      	bne.n	801cc34 <__libc_init_array+0x24>
 801cc20:	4d0b      	ldr	r5, [pc, #44]	@ (801cc50 <__libc_init_array+0x40>)
 801cc22:	4c0c      	ldr	r4, [pc, #48]	@ (801cc54 <__libc_init_array+0x44>)
 801cc24:	f001 fd56 	bl	801e6d4 <_init>
 801cc28:	1b64      	subs	r4, r4, r5
 801cc2a:	10a4      	asrs	r4, r4, #2
 801cc2c:	2600      	movs	r6, #0
 801cc2e:	42a6      	cmp	r6, r4
 801cc30:	d105      	bne.n	801cc3e <__libc_init_array+0x2e>
 801cc32:	bd70      	pop	{r4, r5, r6, pc}
 801cc34:	f855 3b04 	ldr.w	r3, [r5], #4
 801cc38:	4798      	blx	r3
 801cc3a:	3601      	adds	r6, #1
 801cc3c:	e7ee      	b.n	801cc1c <__libc_init_array+0xc>
 801cc3e:	f855 3b04 	ldr.w	r3, [r5], #4
 801cc42:	4798      	blx	r3
 801cc44:	3601      	adds	r6, #1
 801cc46:	e7f2      	b.n	801cc2e <__libc_init_array+0x1e>
 801cc48:	0806e584 	.word	0x0806e584
 801cc4c:	0806e584 	.word	0x0806e584
 801cc50:	0806e584 	.word	0x0806e584
 801cc54:	0806e588 	.word	0x0806e588

0801cc58 <__retarget_lock_init_recursive>:
 801cc58:	4770      	bx	lr

0801cc5a <__retarget_lock_acquire_recursive>:
 801cc5a:	4770      	bx	lr

0801cc5c <__retarget_lock_release_recursive>:
 801cc5c:	4770      	bx	lr

0801cc5e <strcpy>:
 801cc5e:	4603      	mov	r3, r0
 801cc60:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cc64:	f803 2b01 	strb.w	r2, [r3], #1
 801cc68:	2a00      	cmp	r2, #0
 801cc6a:	d1f9      	bne.n	801cc60 <strcpy+0x2>
 801cc6c:	4770      	bx	lr

0801cc6e <memcpy>:
 801cc6e:	440a      	add	r2, r1
 801cc70:	4291      	cmp	r1, r2
 801cc72:	f100 33ff 	add.w	r3, r0, #4294967295
 801cc76:	d100      	bne.n	801cc7a <memcpy+0xc>
 801cc78:	4770      	bx	lr
 801cc7a:	b510      	push	{r4, lr}
 801cc7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cc80:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cc84:	4291      	cmp	r1, r2
 801cc86:	d1f9      	bne.n	801cc7c <memcpy+0xe>
 801cc88:	bd10      	pop	{r4, pc}
	...

0801cc8c <__assert_func>:
 801cc8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cc8e:	4614      	mov	r4, r2
 801cc90:	461a      	mov	r2, r3
 801cc92:	4b09      	ldr	r3, [pc, #36]	@ (801ccb8 <__assert_func+0x2c>)
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	4605      	mov	r5, r0
 801cc98:	68d8      	ldr	r0, [r3, #12]
 801cc9a:	b954      	cbnz	r4, 801ccb2 <__assert_func+0x26>
 801cc9c:	4b07      	ldr	r3, [pc, #28]	@ (801ccbc <__assert_func+0x30>)
 801cc9e:	461c      	mov	r4, r3
 801cca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cca4:	9100      	str	r1, [sp, #0]
 801cca6:	462b      	mov	r3, r5
 801cca8:	4905      	ldr	r1, [pc, #20]	@ (801ccc0 <__assert_func+0x34>)
 801ccaa:	f001 fc13 	bl	801e4d4 <fiprintf>
 801ccae:	f001 fca7 	bl	801e600 <abort>
 801ccb2:	4b04      	ldr	r3, [pc, #16]	@ (801ccc4 <__assert_func+0x38>)
 801ccb4:	e7f4      	b.n	801cca0 <__assert_func+0x14>
 801ccb6:	bf00      	nop
 801ccb8:	200000d0 	.word	0x200000d0
 801ccbc:	0806e38f 	.word	0x0806e38f
 801ccc0:	0806e361 	.word	0x0806e361
 801ccc4:	0806e354 	.word	0x0806e354

0801ccc8 <quorem>:
 801ccc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cccc:	6903      	ldr	r3, [r0, #16]
 801ccce:	690c      	ldr	r4, [r1, #16]
 801ccd0:	42a3      	cmp	r3, r4
 801ccd2:	4607      	mov	r7, r0
 801ccd4:	db7e      	blt.n	801cdd4 <quorem+0x10c>
 801ccd6:	3c01      	subs	r4, #1
 801ccd8:	f101 0814 	add.w	r8, r1, #20
 801ccdc:	00a3      	lsls	r3, r4, #2
 801ccde:	f100 0514 	add.w	r5, r0, #20
 801cce2:	9300      	str	r3, [sp, #0]
 801cce4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cce8:	9301      	str	r3, [sp, #4]
 801ccea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ccee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ccf2:	3301      	adds	r3, #1
 801ccf4:	429a      	cmp	r2, r3
 801ccf6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ccfa:	fbb2 f6f3 	udiv	r6, r2, r3
 801ccfe:	d32e      	bcc.n	801cd5e <quorem+0x96>
 801cd00:	f04f 0a00 	mov.w	sl, #0
 801cd04:	46c4      	mov	ip, r8
 801cd06:	46ae      	mov	lr, r5
 801cd08:	46d3      	mov	fp, sl
 801cd0a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cd0e:	b298      	uxth	r0, r3
 801cd10:	fb06 a000 	mla	r0, r6, r0, sl
 801cd14:	0c02      	lsrs	r2, r0, #16
 801cd16:	0c1b      	lsrs	r3, r3, #16
 801cd18:	fb06 2303 	mla	r3, r6, r3, r2
 801cd1c:	f8de 2000 	ldr.w	r2, [lr]
 801cd20:	b280      	uxth	r0, r0
 801cd22:	b292      	uxth	r2, r2
 801cd24:	1a12      	subs	r2, r2, r0
 801cd26:	445a      	add	r2, fp
 801cd28:	f8de 0000 	ldr.w	r0, [lr]
 801cd2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cd30:	b29b      	uxth	r3, r3
 801cd32:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801cd36:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801cd3a:	b292      	uxth	r2, r2
 801cd3c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801cd40:	45e1      	cmp	r9, ip
 801cd42:	f84e 2b04 	str.w	r2, [lr], #4
 801cd46:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801cd4a:	d2de      	bcs.n	801cd0a <quorem+0x42>
 801cd4c:	9b00      	ldr	r3, [sp, #0]
 801cd4e:	58eb      	ldr	r3, [r5, r3]
 801cd50:	b92b      	cbnz	r3, 801cd5e <quorem+0x96>
 801cd52:	9b01      	ldr	r3, [sp, #4]
 801cd54:	3b04      	subs	r3, #4
 801cd56:	429d      	cmp	r5, r3
 801cd58:	461a      	mov	r2, r3
 801cd5a:	d32f      	bcc.n	801cdbc <quorem+0xf4>
 801cd5c:	613c      	str	r4, [r7, #16]
 801cd5e:	4638      	mov	r0, r7
 801cd60:	f001 f8c2 	bl	801dee8 <__mcmp>
 801cd64:	2800      	cmp	r0, #0
 801cd66:	db25      	blt.n	801cdb4 <quorem+0xec>
 801cd68:	4629      	mov	r1, r5
 801cd6a:	2000      	movs	r0, #0
 801cd6c:	f858 2b04 	ldr.w	r2, [r8], #4
 801cd70:	f8d1 c000 	ldr.w	ip, [r1]
 801cd74:	fa1f fe82 	uxth.w	lr, r2
 801cd78:	fa1f f38c 	uxth.w	r3, ip
 801cd7c:	eba3 030e 	sub.w	r3, r3, lr
 801cd80:	4403      	add	r3, r0
 801cd82:	0c12      	lsrs	r2, r2, #16
 801cd84:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801cd88:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801cd8c:	b29b      	uxth	r3, r3
 801cd8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cd92:	45c1      	cmp	r9, r8
 801cd94:	f841 3b04 	str.w	r3, [r1], #4
 801cd98:	ea4f 4022 	mov.w	r0, r2, asr #16
 801cd9c:	d2e6      	bcs.n	801cd6c <quorem+0xa4>
 801cd9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cda2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cda6:	b922      	cbnz	r2, 801cdb2 <quorem+0xea>
 801cda8:	3b04      	subs	r3, #4
 801cdaa:	429d      	cmp	r5, r3
 801cdac:	461a      	mov	r2, r3
 801cdae:	d30b      	bcc.n	801cdc8 <quorem+0x100>
 801cdb0:	613c      	str	r4, [r7, #16]
 801cdb2:	3601      	adds	r6, #1
 801cdb4:	4630      	mov	r0, r6
 801cdb6:	b003      	add	sp, #12
 801cdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdbc:	6812      	ldr	r2, [r2, #0]
 801cdbe:	3b04      	subs	r3, #4
 801cdc0:	2a00      	cmp	r2, #0
 801cdc2:	d1cb      	bne.n	801cd5c <quorem+0x94>
 801cdc4:	3c01      	subs	r4, #1
 801cdc6:	e7c6      	b.n	801cd56 <quorem+0x8e>
 801cdc8:	6812      	ldr	r2, [r2, #0]
 801cdca:	3b04      	subs	r3, #4
 801cdcc:	2a00      	cmp	r2, #0
 801cdce:	d1ef      	bne.n	801cdb0 <quorem+0xe8>
 801cdd0:	3c01      	subs	r4, #1
 801cdd2:	e7ea      	b.n	801cdaa <quorem+0xe2>
 801cdd4:	2000      	movs	r0, #0
 801cdd6:	e7ee      	b.n	801cdb6 <quorem+0xee>

0801cdd8 <_dtoa_r>:
 801cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cddc:	69c7      	ldr	r7, [r0, #28]
 801cdde:	b099      	sub	sp, #100	@ 0x64
 801cde0:	ed8d 0b02 	vstr	d0, [sp, #8]
 801cde4:	ec55 4b10 	vmov	r4, r5, d0
 801cde8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801cdea:	9109      	str	r1, [sp, #36]	@ 0x24
 801cdec:	4683      	mov	fp, r0
 801cdee:	920e      	str	r2, [sp, #56]	@ 0x38
 801cdf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cdf2:	b97f      	cbnz	r7, 801ce14 <_dtoa_r+0x3c>
 801cdf4:	2010      	movs	r0, #16
 801cdf6:	f7fe fe95 	bl	801bb24 <malloc>
 801cdfa:	4602      	mov	r2, r0
 801cdfc:	f8cb 001c 	str.w	r0, [fp, #28]
 801ce00:	b920      	cbnz	r0, 801ce0c <_dtoa_r+0x34>
 801ce02:	4ba7      	ldr	r3, [pc, #668]	@ (801d0a0 <_dtoa_r+0x2c8>)
 801ce04:	21ef      	movs	r1, #239	@ 0xef
 801ce06:	48a7      	ldr	r0, [pc, #668]	@ (801d0a4 <_dtoa_r+0x2cc>)
 801ce08:	f7ff ff40 	bl	801cc8c <__assert_func>
 801ce0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ce10:	6007      	str	r7, [r0, #0]
 801ce12:	60c7      	str	r7, [r0, #12]
 801ce14:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ce18:	6819      	ldr	r1, [r3, #0]
 801ce1a:	b159      	cbz	r1, 801ce34 <_dtoa_r+0x5c>
 801ce1c:	685a      	ldr	r2, [r3, #4]
 801ce1e:	604a      	str	r2, [r1, #4]
 801ce20:	2301      	movs	r3, #1
 801ce22:	4093      	lsls	r3, r2
 801ce24:	608b      	str	r3, [r1, #8]
 801ce26:	4658      	mov	r0, fp
 801ce28:	f000 fe24 	bl	801da74 <_Bfree>
 801ce2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ce30:	2200      	movs	r2, #0
 801ce32:	601a      	str	r2, [r3, #0]
 801ce34:	1e2b      	subs	r3, r5, #0
 801ce36:	bfb9      	ittee	lt
 801ce38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801ce3c:	9303      	strlt	r3, [sp, #12]
 801ce3e:	2300      	movge	r3, #0
 801ce40:	6033      	strge	r3, [r6, #0]
 801ce42:	9f03      	ldr	r7, [sp, #12]
 801ce44:	4b98      	ldr	r3, [pc, #608]	@ (801d0a8 <_dtoa_r+0x2d0>)
 801ce46:	bfbc      	itt	lt
 801ce48:	2201      	movlt	r2, #1
 801ce4a:	6032      	strlt	r2, [r6, #0]
 801ce4c:	43bb      	bics	r3, r7
 801ce4e:	d112      	bne.n	801ce76 <_dtoa_r+0x9e>
 801ce50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ce52:	f242 730f 	movw	r3, #9999	@ 0x270f
 801ce56:	6013      	str	r3, [r2, #0]
 801ce58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ce5c:	4323      	orrs	r3, r4
 801ce5e:	f000 854d 	beq.w	801d8fc <_dtoa_r+0xb24>
 801ce62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ce64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801d0bc <_dtoa_r+0x2e4>
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	f000 854f 	beq.w	801d90c <_dtoa_r+0xb34>
 801ce6e:	f10a 0303 	add.w	r3, sl, #3
 801ce72:	f000 bd49 	b.w	801d908 <_dtoa_r+0xb30>
 801ce76:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	ec51 0b17 	vmov	r0, r1, d7
 801ce80:	2300      	movs	r3, #0
 801ce82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801ce86:	f7e3 fe37 	bl	8000af8 <__aeabi_dcmpeq>
 801ce8a:	4680      	mov	r8, r0
 801ce8c:	b158      	cbz	r0, 801cea6 <_dtoa_r+0xce>
 801ce8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ce90:	2301      	movs	r3, #1
 801ce92:	6013      	str	r3, [r2, #0]
 801ce94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ce96:	b113      	cbz	r3, 801ce9e <_dtoa_r+0xc6>
 801ce98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ce9a:	4b84      	ldr	r3, [pc, #528]	@ (801d0ac <_dtoa_r+0x2d4>)
 801ce9c:	6013      	str	r3, [r2, #0]
 801ce9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801d0c0 <_dtoa_r+0x2e8>
 801cea2:	f000 bd33 	b.w	801d90c <_dtoa_r+0xb34>
 801cea6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801ceaa:	aa16      	add	r2, sp, #88	@ 0x58
 801ceac:	a917      	add	r1, sp, #92	@ 0x5c
 801ceae:	4658      	mov	r0, fp
 801ceb0:	f001 f8ca 	bl	801e048 <__d2b>
 801ceb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801ceb8:	4681      	mov	r9, r0
 801ceba:	2e00      	cmp	r6, #0
 801cebc:	d077      	beq.n	801cfae <_dtoa_r+0x1d6>
 801cebe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cec0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801cec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cecc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801ced0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801ced4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801ced8:	4619      	mov	r1, r3
 801ceda:	2200      	movs	r2, #0
 801cedc:	4b74      	ldr	r3, [pc, #464]	@ (801d0b0 <_dtoa_r+0x2d8>)
 801cede:	f7e3 f9eb 	bl	80002b8 <__aeabi_dsub>
 801cee2:	a369      	add	r3, pc, #420	@ (adr r3, 801d088 <_dtoa_r+0x2b0>)
 801cee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cee8:	f7e3 fb9e 	bl	8000628 <__aeabi_dmul>
 801ceec:	a368      	add	r3, pc, #416	@ (adr r3, 801d090 <_dtoa_r+0x2b8>)
 801ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef2:	f7e3 f9e3 	bl	80002bc <__adddf3>
 801cef6:	4604      	mov	r4, r0
 801cef8:	4630      	mov	r0, r6
 801cefa:	460d      	mov	r5, r1
 801cefc:	f7e3 fb2a 	bl	8000554 <__aeabi_i2d>
 801cf00:	a365      	add	r3, pc, #404	@ (adr r3, 801d098 <_dtoa_r+0x2c0>)
 801cf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf06:	f7e3 fb8f 	bl	8000628 <__aeabi_dmul>
 801cf0a:	4602      	mov	r2, r0
 801cf0c:	460b      	mov	r3, r1
 801cf0e:	4620      	mov	r0, r4
 801cf10:	4629      	mov	r1, r5
 801cf12:	f7e3 f9d3 	bl	80002bc <__adddf3>
 801cf16:	4604      	mov	r4, r0
 801cf18:	460d      	mov	r5, r1
 801cf1a:	f7e3 fe35 	bl	8000b88 <__aeabi_d2iz>
 801cf1e:	2200      	movs	r2, #0
 801cf20:	4607      	mov	r7, r0
 801cf22:	2300      	movs	r3, #0
 801cf24:	4620      	mov	r0, r4
 801cf26:	4629      	mov	r1, r5
 801cf28:	f7e3 fdf0 	bl	8000b0c <__aeabi_dcmplt>
 801cf2c:	b140      	cbz	r0, 801cf40 <_dtoa_r+0x168>
 801cf2e:	4638      	mov	r0, r7
 801cf30:	f7e3 fb10 	bl	8000554 <__aeabi_i2d>
 801cf34:	4622      	mov	r2, r4
 801cf36:	462b      	mov	r3, r5
 801cf38:	f7e3 fdde 	bl	8000af8 <__aeabi_dcmpeq>
 801cf3c:	b900      	cbnz	r0, 801cf40 <_dtoa_r+0x168>
 801cf3e:	3f01      	subs	r7, #1
 801cf40:	2f16      	cmp	r7, #22
 801cf42:	d851      	bhi.n	801cfe8 <_dtoa_r+0x210>
 801cf44:	4b5b      	ldr	r3, [pc, #364]	@ (801d0b4 <_dtoa_r+0x2dc>)
 801cf46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cf52:	f7e3 fddb 	bl	8000b0c <__aeabi_dcmplt>
 801cf56:	2800      	cmp	r0, #0
 801cf58:	d048      	beq.n	801cfec <_dtoa_r+0x214>
 801cf5a:	3f01      	subs	r7, #1
 801cf5c:	2300      	movs	r3, #0
 801cf5e:	9312      	str	r3, [sp, #72]	@ 0x48
 801cf60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cf62:	1b9b      	subs	r3, r3, r6
 801cf64:	1e5a      	subs	r2, r3, #1
 801cf66:	bf44      	itt	mi
 801cf68:	f1c3 0801 	rsbmi	r8, r3, #1
 801cf6c:	2300      	movmi	r3, #0
 801cf6e:	9208      	str	r2, [sp, #32]
 801cf70:	bf54      	ite	pl
 801cf72:	f04f 0800 	movpl.w	r8, #0
 801cf76:	9308      	strmi	r3, [sp, #32]
 801cf78:	2f00      	cmp	r7, #0
 801cf7a:	db39      	blt.n	801cff0 <_dtoa_r+0x218>
 801cf7c:	9b08      	ldr	r3, [sp, #32]
 801cf7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801cf80:	443b      	add	r3, r7
 801cf82:	9308      	str	r3, [sp, #32]
 801cf84:	2300      	movs	r3, #0
 801cf86:	930a      	str	r3, [sp, #40]	@ 0x28
 801cf88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf8a:	2b09      	cmp	r3, #9
 801cf8c:	d864      	bhi.n	801d058 <_dtoa_r+0x280>
 801cf8e:	2b05      	cmp	r3, #5
 801cf90:	bfc4      	itt	gt
 801cf92:	3b04      	subgt	r3, #4
 801cf94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801cf96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf98:	f1a3 0302 	sub.w	r3, r3, #2
 801cf9c:	bfcc      	ite	gt
 801cf9e:	2400      	movgt	r4, #0
 801cfa0:	2401      	movle	r4, #1
 801cfa2:	2b03      	cmp	r3, #3
 801cfa4:	d863      	bhi.n	801d06e <_dtoa_r+0x296>
 801cfa6:	e8df f003 	tbb	[pc, r3]
 801cfaa:	372a      	.short	0x372a
 801cfac:	5535      	.short	0x5535
 801cfae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801cfb2:	441e      	add	r6, r3
 801cfb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801cfb8:	2b20      	cmp	r3, #32
 801cfba:	bfc1      	itttt	gt
 801cfbc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801cfc0:	409f      	lslgt	r7, r3
 801cfc2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801cfc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 801cfca:	bfd6      	itet	le
 801cfcc:	f1c3 0320 	rsble	r3, r3, #32
 801cfd0:	ea47 0003 	orrgt.w	r0, r7, r3
 801cfd4:	fa04 f003 	lslle.w	r0, r4, r3
 801cfd8:	f7e3 faac 	bl	8000534 <__aeabi_ui2d>
 801cfdc:	2201      	movs	r2, #1
 801cfde:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801cfe2:	3e01      	subs	r6, #1
 801cfe4:	9214      	str	r2, [sp, #80]	@ 0x50
 801cfe6:	e777      	b.n	801ced8 <_dtoa_r+0x100>
 801cfe8:	2301      	movs	r3, #1
 801cfea:	e7b8      	b.n	801cf5e <_dtoa_r+0x186>
 801cfec:	9012      	str	r0, [sp, #72]	@ 0x48
 801cfee:	e7b7      	b.n	801cf60 <_dtoa_r+0x188>
 801cff0:	427b      	negs	r3, r7
 801cff2:	930a      	str	r3, [sp, #40]	@ 0x28
 801cff4:	2300      	movs	r3, #0
 801cff6:	eba8 0807 	sub.w	r8, r8, r7
 801cffa:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cffc:	e7c4      	b.n	801cf88 <_dtoa_r+0x1b0>
 801cffe:	2300      	movs	r3, #0
 801d000:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d002:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d004:	2b00      	cmp	r3, #0
 801d006:	dc35      	bgt.n	801d074 <_dtoa_r+0x29c>
 801d008:	2301      	movs	r3, #1
 801d00a:	9300      	str	r3, [sp, #0]
 801d00c:	9307      	str	r3, [sp, #28]
 801d00e:	461a      	mov	r2, r3
 801d010:	920e      	str	r2, [sp, #56]	@ 0x38
 801d012:	e00b      	b.n	801d02c <_dtoa_r+0x254>
 801d014:	2301      	movs	r3, #1
 801d016:	e7f3      	b.n	801d000 <_dtoa_r+0x228>
 801d018:	2300      	movs	r3, #0
 801d01a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d01c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d01e:	18fb      	adds	r3, r7, r3
 801d020:	9300      	str	r3, [sp, #0]
 801d022:	3301      	adds	r3, #1
 801d024:	2b01      	cmp	r3, #1
 801d026:	9307      	str	r3, [sp, #28]
 801d028:	bfb8      	it	lt
 801d02a:	2301      	movlt	r3, #1
 801d02c:	f8db 001c 	ldr.w	r0, [fp, #28]
 801d030:	2100      	movs	r1, #0
 801d032:	2204      	movs	r2, #4
 801d034:	f102 0514 	add.w	r5, r2, #20
 801d038:	429d      	cmp	r5, r3
 801d03a:	d91f      	bls.n	801d07c <_dtoa_r+0x2a4>
 801d03c:	6041      	str	r1, [r0, #4]
 801d03e:	4658      	mov	r0, fp
 801d040:	f000 fcd8 	bl	801d9f4 <_Balloc>
 801d044:	4682      	mov	sl, r0
 801d046:	2800      	cmp	r0, #0
 801d048:	d13c      	bne.n	801d0c4 <_dtoa_r+0x2ec>
 801d04a:	4b1b      	ldr	r3, [pc, #108]	@ (801d0b8 <_dtoa_r+0x2e0>)
 801d04c:	4602      	mov	r2, r0
 801d04e:	f240 11af 	movw	r1, #431	@ 0x1af
 801d052:	e6d8      	b.n	801ce06 <_dtoa_r+0x2e>
 801d054:	2301      	movs	r3, #1
 801d056:	e7e0      	b.n	801d01a <_dtoa_r+0x242>
 801d058:	2401      	movs	r4, #1
 801d05a:	2300      	movs	r3, #0
 801d05c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d05e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d060:	f04f 33ff 	mov.w	r3, #4294967295
 801d064:	9300      	str	r3, [sp, #0]
 801d066:	9307      	str	r3, [sp, #28]
 801d068:	2200      	movs	r2, #0
 801d06a:	2312      	movs	r3, #18
 801d06c:	e7d0      	b.n	801d010 <_dtoa_r+0x238>
 801d06e:	2301      	movs	r3, #1
 801d070:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d072:	e7f5      	b.n	801d060 <_dtoa_r+0x288>
 801d074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d076:	9300      	str	r3, [sp, #0]
 801d078:	9307      	str	r3, [sp, #28]
 801d07a:	e7d7      	b.n	801d02c <_dtoa_r+0x254>
 801d07c:	3101      	adds	r1, #1
 801d07e:	0052      	lsls	r2, r2, #1
 801d080:	e7d8      	b.n	801d034 <_dtoa_r+0x25c>
 801d082:	bf00      	nop
 801d084:	f3af 8000 	nop.w
 801d088:	636f4361 	.word	0x636f4361
 801d08c:	3fd287a7 	.word	0x3fd287a7
 801d090:	8b60c8b3 	.word	0x8b60c8b3
 801d094:	3fc68a28 	.word	0x3fc68a28
 801d098:	509f79fb 	.word	0x509f79fb
 801d09c:	3fd34413 	.word	0x3fd34413
 801d0a0:	0806e1b0 	.word	0x0806e1b0
 801d0a4:	0806e39d 	.word	0x0806e39d
 801d0a8:	7ff00000 	.word	0x7ff00000
 801d0ac:	0806e331 	.word	0x0806e331
 801d0b0:	3ff80000 	.word	0x3ff80000
 801d0b4:	0806e498 	.word	0x0806e498
 801d0b8:	0806e3f5 	.word	0x0806e3f5
 801d0bc:	0806e399 	.word	0x0806e399
 801d0c0:	0806e330 	.word	0x0806e330
 801d0c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d0c8:	6018      	str	r0, [r3, #0]
 801d0ca:	9b07      	ldr	r3, [sp, #28]
 801d0cc:	2b0e      	cmp	r3, #14
 801d0ce:	f200 80a4 	bhi.w	801d21a <_dtoa_r+0x442>
 801d0d2:	2c00      	cmp	r4, #0
 801d0d4:	f000 80a1 	beq.w	801d21a <_dtoa_r+0x442>
 801d0d8:	2f00      	cmp	r7, #0
 801d0da:	dd33      	ble.n	801d144 <_dtoa_r+0x36c>
 801d0dc:	4bad      	ldr	r3, [pc, #692]	@ (801d394 <_dtoa_r+0x5bc>)
 801d0de:	f007 020f 	and.w	r2, r7, #15
 801d0e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d0e6:	ed93 7b00 	vldr	d7, [r3]
 801d0ea:	05f8      	lsls	r0, r7, #23
 801d0ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d0f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801d0f4:	d516      	bpl.n	801d124 <_dtoa_r+0x34c>
 801d0f6:	4ba8      	ldr	r3, [pc, #672]	@ (801d398 <_dtoa_r+0x5c0>)
 801d0f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d0fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d100:	f7e3 fbbc 	bl	800087c <__aeabi_ddiv>
 801d104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d108:	f004 040f 	and.w	r4, r4, #15
 801d10c:	2603      	movs	r6, #3
 801d10e:	4da2      	ldr	r5, [pc, #648]	@ (801d398 <_dtoa_r+0x5c0>)
 801d110:	b954      	cbnz	r4, 801d128 <_dtoa_r+0x350>
 801d112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d11a:	f7e3 fbaf 	bl	800087c <__aeabi_ddiv>
 801d11e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d122:	e028      	b.n	801d176 <_dtoa_r+0x39e>
 801d124:	2602      	movs	r6, #2
 801d126:	e7f2      	b.n	801d10e <_dtoa_r+0x336>
 801d128:	07e1      	lsls	r1, r4, #31
 801d12a:	d508      	bpl.n	801d13e <_dtoa_r+0x366>
 801d12c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d130:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d134:	f7e3 fa78 	bl	8000628 <__aeabi_dmul>
 801d138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d13c:	3601      	adds	r6, #1
 801d13e:	1064      	asrs	r4, r4, #1
 801d140:	3508      	adds	r5, #8
 801d142:	e7e5      	b.n	801d110 <_dtoa_r+0x338>
 801d144:	f000 80d2 	beq.w	801d2ec <_dtoa_r+0x514>
 801d148:	427c      	negs	r4, r7
 801d14a:	4b92      	ldr	r3, [pc, #584]	@ (801d394 <_dtoa_r+0x5bc>)
 801d14c:	4d92      	ldr	r5, [pc, #584]	@ (801d398 <_dtoa_r+0x5c0>)
 801d14e:	f004 020f 	and.w	r2, r4, #15
 801d152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d15a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d15e:	f7e3 fa63 	bl	8000628 <__aeabi_dmul>
 801d162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d166:	1124      	asrs	r4, r4, #4
 801d168:	2300      	movs	r3, #0
 801d16a:	2602      	movs	r6, #2
 801d16c:	2c00      	cmp	r4, #0
 801d16e:	f040 80b2 	bne.w	801d2d6 <_dtoa_r+0x4fe>
 801d172:	2b00      	cmp	r3, #0
 801d174:	d1d3      	bne.n	801d11e <_dtoa_r+0x346>
 801d176:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d178:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	f000 80b7 	beq.w	801d2f0 <_dtoa_r+0x518>
 801d182:	4b86      	ldr	r3, [pc, #536]	@ (801d39c <_dtoa_r+0x5c4>)
 801d184:	2200      	movs	r2, #0
 801d186:	4620      	mov	r0, r4
 801d188:	4629      	mov	r1, r5
 801d18a:	f7e3 fcbf 	bl	8000b0c <__aeabi_dcmplt>
 801d18e:	2800      	cmp	r0, #0
 801d190:	f000 80ae 	beq.w	801d2f0 <_dtoa_r+0x518>
 801d194:	9b07      	ldr	r3, [sp, #28]
 801d196:	2b00      	cmp	r3, #0
 801d198:	f000 80aa 	beq.w	801d2f0 <_dtoa_r+0x518>
 801d19c:	9b00      	ldr	r3, [sp, #0]
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	dd37      	ble.n	801d212 <_dtoa_r+0x43a>
 801d1a2:	1e7b      	subs	r3, r7, #1
 801d1a4:	9304      	str	r3, [sp, #16]
 801d1a6:	4620      	mov	r0, r4
 801d1a8:	4b7d      	ldr	r3, [pc, #500]	@ (801d3a0 <_dtoa_r+0x5c8>)
 801d1aa:	2200      	movs	r2, #0
 801d1ac:	4629      	mov	r1, r5
 801d1ae:	f7e3 fa3b 	bl	8000628 <__aeabi_dmul>
 801d1b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d1b6:	9c00      	ldr	r4, [sp, #0]
 801d1b8:	3601      	adds	r6, #1
 801d1ba:	4630      	mov	r0, r6
 801d1bc:	f7e3 f9ca 	bl	8000554 <__aeabi_i2d>
 801d1c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d1c4:	f7e3 fa30 	bl	8000628 <__aeabi_dmul>
 801d1c8:	4b76      	ldr	r3, [pc, #472]	@ (801d3a4 <_dtoa_r+0x5cc>)
 801d1ca:	2200      	movs	r2, #0
 801d1cc:	f7e3 f876 	bl	80002bc <__adddf3>
 801d1d0:	4605      	mov	r5, r0
 801d1d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801d1d6:	2c00      	cmp	r4, #0
 801d1d8:	f040 808d 	bne.w	801d2f6 <_dtoa_r+0x51e>
 801d1dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d1e0:	4b71      	ldr	r3, [pc, #452]	@ (801d3a8 <_dtoa_r+0x5d0>)
 801d1e2:	2200      	movs	r2, #0
 801d1e4:	f7e3 f868 	bl	80002b8 <__aeabi_dsub>
 801d1e8:	4602      	mov	r2, r0
 801d1ea:	460b      	mov	r3, r1
 801d1ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d1f0:	462a      	mov	r2, r5
 801d1f2:	4633      	mov	r3, r6
 801d1f4:	f7e3 fca8 	bl	8000b48 <__aeabi_dcmpgt>
 801d1f8:	2800      	cmp	r0, #0
 801d1fa:	f040 828b 	bne.w	801d714 <_dtoa_r+0x93c>
 801d1fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d202:	462a      	mov	r2, r5
 801d204:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801d208:	f7e3 fc80 	bl	8000b0c <__aeabi_dcmplt>
 801d20c:	2800      	cmp	r0, #0
 801d20e:	f040 8128 	bne.w	801d462 <_dtoa_r+0x68a>
 801d212:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801d216:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801d21a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	f2c0 815a 	blt.w	801d4d6 <_dtoa_r+0x6fe>
 801d222:	2f0e      	cmp	r7, #14
 801d224:	f300 8157 	bgt.w	801d4d6 <_dtoa_r+0x6fe>
 801d228:	4b5a      	ldr	r3, [pc, #360]	@ (801d394 <_dtoa_r+0x5bc>)
 801d22a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d22e:	ed93 7b00 	vldr	d7, [r3]
 801d232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d234:	2b00      	cmp	r3, #0
 801d236:	ed8d 7b00 	vstr	d7, [sp]
 801d23a:	da03      	bge.n	801d244 <_dtoa_r+0x46c>
 801d23c:	9b07      	ldr	r3, [sp, #28]
 801d23e:	2b00      	cmp	r3, #0
 801d240:	f340 8101 	ble.w	801d446 <_dtoa_r+0x66e>
 801d244:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d248:	4656      	mov	r6, sl
 801d24a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d24e:	4620      	mov	r0, r4
 801d250:	4629      	mov	r1, r5
 801d252:	f7e3 fb13 	bl	800087c <__aeabi_ddiv>
 801d256:	f7e3 fc97 	bl	8000b88 <__aeabi_d2iz>
 801d25a:	4680      	mov	r8, r0
 801d25c:	f7e3 f97a 	bl	8000554 <__aeabi_i2d>
 801d260:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d264:	f7e3 f9e0 	bl	8000628 <__aeabi_dmul>
 801d268:	4602      	mov	r2, r0
 801d26a:	460b      	mov	r3, r1
 801d26c:	4620      	mov	r0, r4
 801d26e:	4629      	mov	r1, r5
 801d270:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801d274:	f7e3 f820 	bl	80002b8 <__aeabi_dsub>
 801d278:	f806 4b01 	strb.w	r4, [r6], #1
 801d27c:	9d07      	ldr	r5, [sp, #28]
 801d27e:	eba6 040a 	sub.w	r4, r6, sl
 801d282:	42a5      	cmp	r5, r4
 801d284:	4602      	mov	r2, r0
 801d286:	460b      	mov	r3, r1
 801d288:	f040 8117 	bne.w	801d4ba <_dtoa_r+0x6e2>
 801d28c:	f7e3 f816 	bl	80002bc <__adddf3>
 801d290:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d294:	4604      	mov	r4, r0
 801d296:	460d      	mov	r5, r1
 801d298:	f7e3 fc56 	bl	8000b48 <__aeabi_dcmpgt>
 801d29c:	2800      	cmp	r0, #0
 801d29e:	f040 80f9 	bne.w	801d494 <_dtoa_r+0x6bc>
 801d2a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d2a6:	4620      	mov	r0, r4
 801d2a8:	4629      	mov	r1, r5
 801d2aa:	f7e3 fc25 	bl	8000af8 <__aeabi_dcmpeq>
 801d2ae:	b118      	cbz	r0, 801d2b8 <_dtoa_r+0x4e0>
 801d2b0:	f018 0f01 	tst.w	r8, #1
 801d2b4:	f040 80ee 	bne.w	801d494 <_dtoa_r+0x6bc>
 801d2b8:	4649      	mov	r1, r9
 801d2ba:	4658      	mov	r0, fp
 801d2bc:	f000 fbda 	bl	801da74 <_Bfree>
 801d2c0:	2300      	movs	r3, #0
 801d2c2:	7033      	strb	r3, [r6, #0]
 801d2c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d2c6:	3701      	adds	r7, #1
 801d2c8:	601f      	str	r7, [r3, #0]
 801d2ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d2cc:	2b00      	cmp	r3, #0
 801d2ce:	f000 831d 	beq.w	801d90c <_dtoa_r+0xb34>
 801d2d2:	601e      	str	r6, [r3, #0]
 801d2d4:	e31a      	b.n	801d90c <_dtoa_r+0xb34>
 801d2d6:	07e2      	lsls	r2, r4, #31
 801d2d8:	d505      	bpl.n	801d2e6 <_dtoa_r+0x50e>
 801d2da:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d2de:	f7e3 f9a3 	bl	8000628 <__aeabi_dmul>
 801d2e2:	3601      	adds	r6, #1
 801d2e4:	2301      	movs	r3, #1
 801d2e6:	1064      	asrs	r4, r4, #1
 801d2e8:	3508      	adds	r5, #8
 801d2ea:	e73f      	b.n	801d16c <_dtoa_r+0x394>
 801d2ec:	2602      	movs	r6, #2
 801d2ee:	e742      	b.n	801d176 <_dtoa_r+0x39e>
 801d2f0:	9c07      	ldr	r4, [sp, #28]
 801d2f2:	9704      	str	r7, [sp, #16]
 801d2f4:	e761      	b.n	801d1ba <_dtoa_r+0x3e2>
 801d2f6:	4b27      	ldr	r3, [pc, #156]	@ (801d394 <_dtoa_r+0x5bc>)
 801d2f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d2fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d2fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d302:	4454      	add	r4, sl
 801d304:	2900      	cmp	r1, #0
 801d306:	d053      	beq.n	801d3b0 <_dtoa_r+0x5d8>
 801d308:	4928      	ldr	r1, [pc, #160]	@ (801d3ac <_dtoa_r+0x5d4>)
 801d30a:	2000      	movs	r0, #0
 801d30c:	f7e3 fab6 	bl	800087c <__aeabi_ddiv>
 801d310:	4633      	mov	r3, r6
 801d312:	462a      	mov	r2, r5
 801d314:	f7e2 ffd0 	bl	80002b8 <__aeabi_dsub>
 801d318:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d31c:	4656      	mov	r6, sl
 801d31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d322:	f7e3 fc31 	bl	8000b88 <__aeabi_d2iz>
 801d326:	4605      	mov	r5, r0
 801d328:	f7e3 f914 	bl	8000554 <__aeabi_i2d>
 801d32c:	4602      	mov	r2, r0
 801d32e:	460b      	mov	r3, r1
 801d330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d334:	f7e2 ffc0 	bl	80002b8 <__aeabi_dsub>
 801d338:	3530      	adds	r5, #48	@ 0x30
 801d33a:	4602      	mov	r2, r0
 801d33c:	460b      	mov	r3, r1
 801d33e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d342:	f806 5b01 	strb.w	r5, [r6], #1
 801d346:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d34a:	f7e3 fbdf 	bl	8000b0c <__aeabi_dcmplt>
 801d34e:	2800      	cmp	r0, #0
 801d350:	d171      	bne.n	801d436 <_dtoa_r+0x65e>
 801d352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d356:	4911      	ldr	r1, [pc, #68]	@ (801d39c <_dtoa_r+0x5c4>)
 801d358:	2000      	movs	r0, #0
 801d35a:	f7e2 ffad 	bl	80002b8 <__aeabi_dsub>
 801d35e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d362:	f7e3 fbd3 	bl	8000b0c <__aeabi_dcmplt>
 801d366:	2800      	cmp	r0, #0
 801d368:	f040 8095 	bne.w	801d496 <_dtoa_r+0x6be>
 801d36c:	42a6      	cmp	r6, r4
 801d36e:	f43f af50 	beq.w	801d212 <_dtoa_r+0x43a>
 801d372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d376:	4b0a      	ldr	r3, [pc, #40]	@ (801d3a0 <_dtoa_r+0x5c8>)
 801d378:	2200      	movs	r2, #0
 801d37a:	f7e3 f955 	bl	8000628 <__aeabi_dmul>
 801d37e:	4b08      	ldr	r3, [pc, #32]	@ (801d3a0 <_dtoa_r+0x5c8>)
 801d380:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d384:	2200      	movs	r2, #0
 801d386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d38a:	f7e3 f94d 	bl	8000628 <__aeabi_dmul>
 801d38e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d392:	e7c4      	b.n	801d31e <_dtoa_r+0x546>
 801d394:	0806e498 	.word	0x0806e498
 801d398:	0806e470 	.word	0x0806e470
 801d39c:	3ff00000 	.word	0x3ff00000
 801d3a0:	40240000 	.word	0x40240000
 801d3a4:	401c0000 	.word	0x401c0000
 801d3a8:	40140000 	.word	0x40140000
 801d3ac:	3fe00000 	.word	0x3fe00000
 801d3b0:	4631      	mov	r1, r6
 801d3b2:	4628      	mov	r0, r5
 801d3b4:	f7e3 f938 	bl	8000628 <__aeabi_dmul>
 801d3b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d3bc:	9415      	str	r4, [sp, #84]	@ 0x54
 801d3be:	4656      	mov	r6, sl
 801d3c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d3c4:	f7e3 fbe0 	bl	8000b88 <__aeabi_d2iz>
 801d3c8:	4605      	mov	r5, r0
 801d3ca:	f7e3 f8c3 	bl	8000554 <__aeabi_i2d>
 801d3ce:	4602      	mov	r2, r0
 801d3d0:	460b      	mov	r3, r1
 801d3d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d3d6:	f7e2 ff6f 	bl	80002b8 <__aeabi_dsub>
 801d3da:	3530      	adds	r5, #48	@ 0x30
 801d3dc:	f806 5b01 	strb.w	r5, [r6], #1
 801d3e0:	4602      	mov	r2, r0
 801d3e2:	460b      	mov	r3, r1
 801d3e4:	42a6      	cmp	r6, r4
 801d3e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d3ea:	f04f 0200 	mov.w	r2, #0
 801d3ee:	d124      	bne.n	801d43a <_dtoa_r+0x662>
 801d3f0:	4bac      	ldr	r3, [pc, #688]	@ (801d6a4 <_dtoa_r+0x8cc>)
 801d3f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d3f6:	f7e2 ff61 	bl	80002bc <__adddf3>
 801d3fa:	4602      	mov	r2, r0
 801d3fc:	460b      	mov	r3, r1
 801d3fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d402:	f7e3 fba1 	bl	8000b48 <__aeabi_dcmpgt>
 801d406:	2800      	cmp	r0, #0
 801d408:	d145      	bne.n	801d496 <_dtoa_r+0x6be>
 801d40a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d40e:	49a5      	ldr	r1, [pc, #660]	@ (801d6a4 <_dtoa_r+0x8cc>)
 801d410:	2000      	movs	r0, #0
 801d412:	f7e2 ff51 	bl	80002b8 <__aeabi_dsub>
 801d416:	4602      	mov	r2, r0
 801d418:	460b      	mov	r3, r1
 801d41a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d41e:	f7e3 fb75 	bl	8000b0c <__aeabi_dcmplt>
 801d422:	2800      	cmp	r0, #0
 801d424:	f43f aef5 	beq.w	801d212 <_dtoa_r+0x43a>
 801d428:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801d42a:	1e73      	subs	r3, r6, #1
 801d42c:	9315      	str	r3, [sp, #84]	@ 0x54
 801d42e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d432:	2b30      	cmp	r3, #48	@ 0x30
 801d434:	d0f8      	beq.n	801d428 <_dtoa_r+0x650>
 801d436:	9f04      	ldr	r7, [sp, #16]
 801d438:	e73e      	b.n	801d2b8 <_dtoa_r+0x4e0>
 801d43a:	4b9b      	ldr	r3, [pc, #620]	@ (801d6a8 <_dtoa_r+0x8d0>)
 801d43c:	f7e3 f8f4 	bl	8000628 <__aeabi_dmul>
 801d440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d444:	e7bc      	b.n	801d3c0 <_dtoa_r+0x5e8>
 801d446:	d10c      	bne.n	801d462 <_dtoa_r+0x68a>
 801d448:	4b98      	ldr	r3, [pc, #608]	@ (801d6ac <_dtoa_r+0x8d4>)
 801d44a:	2200      	movs	r2, #0
 801d44c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d450:	f7e3 f8ea 	bl	8000628 <__aeabi_dmul>
 801d454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d458:	f7e3 fb6c 	bl	8000b34 <__aeabi_dcmpge>
 801d45c:	2800      	cmp	r0, #0
 801d45e:	f000 8157 	beq.w	801d710 <_dtoa_r+0x938>
 801d462:	2400      	movs	r4, #0
 801d464:	4625      	mov	r5, r4
 801d466:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d468:	43db      	mvns	r3, r3
 801d46a:	9304      	str	r3, [sp, #16]
 801d46c:	4656      	mov	r6, sl
 801d46e:	2700      	movs	r7, #0
 801d470:	4621      	mov	r1, r4
 801d472:	4658      	mov	r0, fp
 801d474:	f000 fafe 	bl	801da74 <_Bfree>
 801d478:	2d00      	cmp	r5, #0
 801d47a:	d0dc      	beq.n	801d436 <_dtoa_r+0x65e>
 801d47c:	b12f      	cbz	r7, 801d48a <_dtoa_r+0x6b2>
 801d47e:	42af      	cmp	r7, r5
 801d480:	d003      	beq.n	801d48a <_dtoa_r+0x6b2>
 801d482:	4639      	mov	r1, r7
 801d484:	4658      	mov	r0, fp
 801d486:	f000 faf5 	bl	801da74 <_Bfree>
 801d48a:	4629      	mov	r1, r5
 801d48c:	4658      	mov	r0, fp
 801d48e:	f000 faf1 	bl	801da74 <_Bfree>
 801d492:	e7d0      	b.n	801d436 <_dtoa_r+0x65e>
 801d494:	9704      	str	r7, [sp, #16]
 801d496:	4633      	mov	r3, r6
 801d498:	461e      	mov	r6, r3
 801d49a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d49e:	2a39      	cmp	r2, #57	@ 0x39
 801d4a0:	d107      	bne.n	801d4b2 <_dtoa_r+0x6da>
 801d4a2:	459a      	cmp	sl, r3
 801d4a4:	d1f8      	bne.n	801d498 <_dtoa_r+0x6c0>
 801d4a6:	9a04      	ldr	r2, [sp, #16]
 801d4a8:	3201      	adds	r2, #1
 801d4aa:	9204      	str	r2, [sp, #16]
 801d4ac:	2230      	movs	r2, #48	@ 0x30
 801d4ae:	f88a 2000 	strb.w	r2, [sl]
 801d4b2:	781a      	ldrb	r2, [r3, #0]
 801d4b4:	3201      	adds	r2, #1
 801d4b6:	701a      	strb	r2, [r3, #0]
 801d4b8:	e7bd      	b.n	801d436 <_dtoa_r+0x65e>
 801d4ba:	4b7b      	ldr	r3, [pc, #492]	@ (801d6a8 <_dtoa_r+0x8d0>)
 801d4bc:	2200      	movs	r2, #0
 801d4be:	f7e3 f8b3 	bl	8000628 <__aeabi_dmul>
 801d4c2:	2200      	movs	r2, #0
 801d4c4:	2300      	movs	r3, #0
 801d4c6:	4604      	mov	r4, r0
 801d4c8:	460d      	mov	r5, r1
 801d4ca:	f7e3 fb15 	bl	8000af8 <__aeabi_dcmpeq>
 801d4ce:	2800      	cmp	r0, #0
 801d4d0:	f43f aebb 	beq.w	801d24a <_dtoa_r+0x472>
 801d4d4:	e6f0      	b.n	801d2b8 <_dtoa_r+0x4e0>
 801d4d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d4d8:	2a00      	cmp	r2, #0
 801d4da:	f000 80db 	beq.w	801d694 <_dtoa_r+0x8bc>
 801d4de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d4e0:	2a01      	cmp	r2, #1
 801d4e2:	f300 80bf 	bgt.w	801d664 <_dtoa_r+0x88c>
 801d4e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d4e8:	2a00      	cmp	r2, #0
 801d4ea:	f000 80b7 	beq.w	801d65c <_dtoa_r+0x884>
 801d4ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801d4f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d4f4:	4646      	mov	r6, r8
 801d4f6:	9a08      	ldr	r2, [sp, #32]
 801d4f8:	2101      	movs	r1, #1
 801d4fa:	441a      	add	r2, r3
 801d4fc:	4658      	mov	r0, fp
 801d4fe:	4498      	add	r8, r3
 801d500:	9208      	str	r2, [sp, #32]
 801d502:	f000 fb6b 	bl	801dbdc <__i2b>
 801d506:	4605      	mov	r5, r0
 801d508:	b15e      	cbz	r6, 801d522 <_dtoa_r+0x74a>
 801d50a:	9b08      	ldr	r3, [sp, #32]
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	dd08      	ble.n	801d522 <_dtoa_r+0x74a>
 801d510:	42b3      	cmp	r3, r6
 801d512:	9a08      	ldr	r2, [sp, #32]
 801d514:	bfa8      	it	ge
 801d516:	4633      	movge	r3, r6
 801d518:	eba8 0803 	sub.w	r8, r8, r3
 801d51c:	1af6      	subs	r6, r6, r3
 801d51e:	1ad3      	subs	r3, r2, r3
 801d520:	9308      	str	r3, [sp, #32]
 801d522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d524:	b1f3      	cbz	r3, 801d564 <_dtoa_r+0x78c>
 801d526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d528:	2b00      	cmp	r3, #0
 801d52a:	f000 80b7 	beq.w	801d69c <_dtoa_r+0x8c4>
 801d52e:	b18c      	cbz	r4, 801d554 <_dtoa_r+0x77c>
 801d530:	4629      	mov	r1, r5
 801d532:	4622      	mov	r2, r4
 801d534:	4658      	mov	r0, fp
 801d536:	f000 fc11 	bl	801dd5c <__pow5mult>
 801d53a:	464a      	mov	r2, r9
 801d53c:	4601      	mov	r1, r0
 801d53e:	4605      	mov	r5, r0
 801d540:	4658      	mov	r0, fp
 801d542:	f000 fb61 	bl	801dc08 <__multiply>
 801d546:	4649      	mov	r1, r9
 801d548:	9004      	str	r0, [sp, #16]
 801d54a:	4658      	mov	r0, fp
 801d54c:	f000 fa92 	bl	801da74 <_Bfree>
 801d550:	9b04      	ldr	r3, [sp, #16]
 801d552:	4699      	mov	r9, r3
 801d554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d556:	1b1a      	subs	r2, r3, r4
 801d558:	d004      	beq.n	801d564 <_dtoa_r+0x78c>
 801d55a:	4649      	mov	r1, r9
 801d55c:	4658      	mov	r0, fp
 801d55e:	f000 fbfd 	bl	801dd5c <__pow5mult>
 801d562:	4681      	mov	r9, r0
 801d564:	2101      	movs	r1, #1
 801d566:	4658      	mov	r0, fp
 801d568:	f000 fb38 	bl	801dbdc <__i2b>
 801d56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d56e:	4604      	mov	r4, r0
 801d570:	2b00      	cmp	r3, #0
 801d572:	f000 81cf 	beq.w	801d914 <_dtoa_r+0xb3c>
 801d576:	461a      	mov	r2, r3
 801d578:	4601      	mov	r1, r0
 801d57a:	4658      	mov	r0, fp
 801d57c:	f000 fbee 	bl	801dd5c <__pow5mult>
 801d580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d582:	2b01      	cmp	r3, #1
 801d584:	4604      	mov	r4, r0
 801d586:	f300 8095 	bgt.w	801d6b4 <_dtoa_r+0x8dc>
 801d58a:	9b02      	ldr	r3, [sp, #8]
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	f040 8087 	bne.w	801d6a0 <_dtoa_r+0x8c8>
 801d592:	9b03      	ldr	r3, [sp, #12]
 801d594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d598:	2b00      	cmp	r3, #0
 801d59a:	f040 8089 	bne.w	801d6b0 <_dtoa_r+0x8d8>
 801d59e:	9b03      	ldr	r3, [sp, #12]
 801d5a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d5a4:	0d1b      	lsrs	r3, r3, #20
 801d5a6:	051b      	lsls	r3, r3, #20
 801d5a8:	b12b      	cbz	r3, 801d5b6 <_dtoa_r+0x7de>
 801d5aa:	9b08      	ldr	r3, [sp, #32]
 801d5ac:	3301      	adds	r3, #1
 801d5ae:	9308      	str	r3, [sp, #32]
 801d5b0:	f108 0801 	add.w	r8, r8, #1
 801d5b4:	2301      	movs	r3, #1
 801d5b6:	930a      	str	r3, [sp, #40]	@ 0x28
 801d5b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	f000 81b0 	beq.w	801d920 <_dtoa_r+0xb48>
 801d5c0:	6923      	ldr	r3, [r4, #16]
 801d5c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d5c6:	6918      	ldr	r0, [r3, #16]
 801d5c8:	f000 fabc 	bl	801db44 <__hi0bits>
 801d5cc:	f1c0 0020 	rsb	r0, r0, #32
 801d5d0:	9b08      	ldr	r3, [sp, #32]
 801d5d2:	4418      	add	r0, r3
 801d5d4:	f010 001f 	ands.w	r0, r0, #31
 801d5d8:	d077      	beq.n	801d6ca <_dtoa_r+0x8f2>
 801d5da:	f1c0 0320 	rsb	r3, r0, #32
 801d5de:	2b04      	cmp	r3, #4
 801d5e0:	dd6b      	ble.n	801d6ba <_dtoa_r+0x8e2>
 801d5e2:	9b08      	ldr	r3, [sp, #32]
 801d5e4:	f1c0 001c 	rsb	r0, r0, #28
 801d5e8:	4403      	add	r3, r0
 801d5ea:	4480      	add	r8, r0
 801d5ec:	4406      	add	r6, r0
 801d5ee:	9308      	str	r3, [sp, #32]
 801d5f0:	f1b8 0f00 	cmp.w	r8, #0
 801d5f4:	dd05      	ble.n	801d602 <_dtoa_r+0x82a>
 801d5f6:	4649      	mov	r1, r9
 801d5f8:	4642      	mov	r2, r8
 801d5fa:	4658      	mov	r0, fp
 801d5fc:	f000 fc08 	bl	801de10 <__lshift>
 801d600:	4681      	mov	r9, r0
 801d602:	9b08      	ldr	r3, [sp, #32]
 801d604:	2b00      	cmp	r3, #0
 801d606:	dd05      	ble.n	801d614 <_dtoa_r+0x83c>
 801d608:	4621      	mov	r1, r4
 801d60a:	461a      	mov	r2, r3
 801d60c:	4658      	mov	r0, fp
 801d60e:	f000 fbff 	bl	801de10 <__lshift>
 801d612:	4604      	mov	r4, r0
 801d614:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d616:	2b00      	cmp	r3, #0
 801d618:	d059      	beq.n	801d6ce <_dtoa_r+0x8f6>
 801d61a:	4621      	mov	r1, r4
 801d61c:	4648      	mov	r0, r9
 801d61e:	f000 fc63 	bl	801dee8 <__mcmp>
 801d622:	2800      	cmp	r0, #0
 801d624:	da53      	bge.n	801d6ce <_dtoa_r+0x8f6>
 801d626:	1e7b      	subs	r3, r7, #1
 801d628:	9304      	str	r3, [sp, #16]
 801d62a:	4649      	mov	r1, r9
 801d62c:	2300      	movs	r3, #0
 801d62e:	220a      	movs	r2, #10
 801d630:	4658      	mov	r0, fp
 801d632:	f000 fa41 	bl	801dab8 <__multadd>
 801d636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d638:	4681      	mov	r9, r0
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	f000 8172 	beq.w	801d924 <_dtoa_r+0xb4c>
 801d640:	2300      	movs	r3, #0
 801d642:	4629      	mov	r1, r5
 801d644:	220a      	movs	r2, #10
 801d646:	4658      	mov	r0, fp
 801d648:	f000 fa36 	bl	801dab8 <__multadd>
 801d64c:	9b00      	ldr	r3, [sp, #0]
 801d64e:	2b00      	cmp	r3, #0
 801d650:	4605      	mov	r5, r0
 801d652:	dc67      	bgt.n	801d724 <_dtoa_r+0x94c>
 801d654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d656:	2b02      	cmp	r3, #2
 801d658:	dc41      	bgt.n	801d6de <_dtoa_r+0x906>
 801d65a:	e063      	b.n	801d724 <_dtoa_r+0x94c>
 801d65c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d65e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801d662:	e746      	b.n	801d4f2 <_dtoa_r+0x71a>
 801d664:	9b07      	ldr	r3, [sp, #28]
 801d666:	1e5c      	subs	r4, r3, #1
 801d668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d66a:	42a3      	cmp	r3, r4
 801d66c:	bfbf      	itttt	lt
 801d66e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801d670:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801d672:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801d674:	1ae3      	sublt	r3, r4, r3
 801d676:	bfb4      	ite	lt
 801d678:	18d2      	addlt	r2, r2, r3
 801d67a:	1b1c      	subge	r4, r3, r4
 801d67c:	9b07      	ldr	r3, [sp, #28]
 801d67e:	bfbc      	itt	lt
 801d680:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801d682:	2400      	movlt	r4, #0
 801d684:	2b00      	cmp	r3, #0
 801d686:	bfb5      	itete	lt
 801d688:	eba8 0603 	sublt.w	r6, r8, r3
 801d68c:	9b07      	ldrge	r3, [sp, #28]
 801d68e:	2300      	movlt	r3, #0
 801d690:	4646      	movge	r6, r8
 801d692:	e730      	b.n	801d4f6 <_dtoa_r+0x71e>
 801d694:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d696:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801d698:	4646      	mov	r6, r8
 801d69a:	e735      	b.n	801d508 <_dtoa_r+0x730>
 801d69c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d69e:	e75c      	b.n	801d55a <_dtoa_r+0x782>
 801d6a0:	2300      	movs	r3, #0
 801d6a2:	e788      	b.n	801d5b6 <_dtoa_r+0x7de>
 801d6a4:	3fe00000 	.word	0x3fe00000
 801d6a8:	40240000 	.word	0x40240000
 801d6ac:	40140000 	.word	0x40140000
 801d6b0:	9b02      	ldr	r3, [sp, #8]
 801d6b2:	e780      	b.n	801d5b6 <_dtoa_r+0x7de>
 801d6b4:	2300      	movs	r3, #0
 801d6b6:	930a      	str	r3, [sp, #40]	@ 0x28
 801d6b8:	e782      	b.n	801d5c0 <_dtoa_r+0x7e8>
 801d6ba:	d099      	beq.n	801d5f0 <_dtoa_r+0x818>
 801d6bc:	9a08      	ldr	r2, [sp, #32]
 801d6be:	331c      	adds	r3, #28
 801d6c0:	441a      	add	r2, r3
 801d6c2:	4498      	add	r8, r3
 801d6c4:	441e      	add	r6, r3
 801d6c6:	9208      	str	r2, [sp, #32]
 801d6c8:	e792      	b.n	801d5f0 <_dtoa_r+0x818>
 801d6ca:	4603      	mov	r3, r0
 801d6cc:	e7f6      	b.n	801d6bc <_dtoa_r+0x8e4>
 801d6ce:	9b07      	ldr	r3, [sp, #28]
 801d6d0:	9704      	str	r7, [sp, #16]
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	dc20      	bgt.n	801d718 <_dtoa_r+0x940>
 801d6d6:	9300      	str	r3, [sp, #0]
 801d6d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6da:	2b02      	cmp	r3, #2
 801d6dc:	dd1e      	ble.n	801d71c <_dtoa_r+0x944>
 801d6de:	9b00      	ldr	r3, [sp, #0]
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	f47f aec0 	bne.w	801d466 <_dtoa_r+0x68e>
 801d6e6:	4621      	mov	r1, r4
 801d6e8:	2205      	movs	r2, #5
 801d6ea:	4658      	mov	r0, fp
 801d6ec:	f000 f9e4 	bl	801dab8 <__multadd>
 801d6f0:	4601      	mov	r1, r0
 801d6f2:	4604      	mov	r4, r0
 801d6f4:	4648      	mov	r0, r9
 801d6f6:	f000 fbf7 	bl	801dee8 <__mcmp>
 801d6fa:	2800      	cmp	r0, #0
 801d6fc:	f77f aeb3 	ble.w	801d466 <_dtoa_r+0x68e>
 801d700:	4656      	mov	r6, sl
 801d702:	2331      	movs	r3, #49	@ 0x31
 801d704:	f806 3b01 	strb.w	r3, [r6], #1
 801d708:	9b04      	ldr	r3, [sp, #16]
 801d70a:	3301      	adds	r3, #1
 801d70c:	9304      	str	r3, [sp, #16]
 801d70e:	e6ae      	b.n	801d46e <_dtoa_r+0x696>
 801d710:	9c07      	ldr	r4, [sp, #28]
 801d712:	9704      	str	r7, [sp, #16]
 801d714:	4625      	mov	r5, r4
 801d716:	e7f3      	b.n	801d700 <_dtoa_r+0x928>
 801d718:	9b07      	ldr	r3, [sp, #28]
 801d71a:	9300      	str	r3, [sp, #0]
 801d71c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d71e:	2b00      	cmp	r3, #0
 801d720:	f000 8104 	beq.w	801d92c <_dtoa_r+0xb54>
 801d724:	2e00      	cmp	r6, #0
 801d726:	dd05      	ble.n	801d734 <_dtoa_r+0x95c>
 801d728:	4629      	mov	r1, r5
 801d72a:	4632      	mov	r2, r6
 801d72c:	4658      	mov	r0, fp
 801d72e:	f000 fb6f 	bl	801de10 <__lshift>
 801d732:	4605      	mov	r5, r0
 801d734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d736:	2b00      	cmp	r3, #0
 801d738:	d05a      	beq.n	801d7f0 <_dtoa_r+0xa18>
 801d73a:	6869      	ldr	r1, [r5, #4]
 801d73c:	4658      	mov	r0, fp
 801d73e:	f000 f959 	bl	801d9f4 <_Balloc>
 801d742:	4606      	mov	r6, r0
 801d744:	b928      	cbnz	r0, 801d752 <_dtoa_r+0x97a>
 801d746:	4b84      	ldr	r3, [pc, #528]	@ (801d958 <_dtoa_r+0xb80>)
 801d748:	4602      	mov	r2, r0
 801d74a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d74e:	f7ff bb5a 	b.w	801ce06 <_dtoa_r+0x2e>
 801d752:	692a      	ldr	r2, [r5, #16]
 801d754:	3202      	adds	r2, #2
 801d756:	0092      	lsls	r2, r2, #2
 801d758:	f105 010c 	add.w	r1, r5, #12
 801d75c:	300c      	adds	r0, #12
 801d75e:	f7ff fa86 	bl	801cc6e <memcpy>
 801d762:	2201      	movs	r2, #1
 801d764:	4631      	mov	r1, r6
 801d766:	4658      	mov	r0, fp
 801d768:	f000 fb52 	bl	801de10 <__lshift>
 801d76c:	f10a 0301 	add.w	r3, sl, #1
 801d770:	9307      	str	r3, [sp, #28]
 801d772:	9b00      	ldr	r3, [sp, #0]
 801d774:	4453      	add	r3, sl
 801d776:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d778:	9b02      	ldr	r3, [sp, #8]
 801d77a:	f003 0301 	and.w	r3, r3, #1
 801d77e:	462f      	mov	r7, r5
 801d780:	930a      	str	r3, [sp, #40]	@ 0x28
 801d782:	4605      	mov	r5, r0
 801d784:	9b07      	ldr	r3, [sp, #28]
 801d786:	4621      	mov	r1, r4
 801d788:	3b01      	subs	r3, #1
 801d78a:	4648      	mov	r0, r9
 801d78c:	9300      	str	r3, [sp, #0]
 801d78e:	f7ff fa9b 	bl	801ccc8 <quorem>
 801d792:	4639      	mov	r1, r7
 801d794:	9002      	str	r0, [sp, #8]
 801d796:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801d79a:	4648      	mov	r0, r9
 801d79c:	f000 fba4 	bl	801dee8 <__mcmp>
 801d7a0:	462a      	mov	r2, r5
 801d7a2:	9008      	str	r0, [sp, #32]
 801d7a4:	4621      	mov	r1, r4
 801d7a6:	4658      	mov	r0, fp
 801d7a8:	f000 fbba 	bl	801df20 <__mdiff>
 801d7ac:	68c2      	ldr	r2, [r0, #12]
 801d7ae:	4606      	mov	r6, r0
 801d7b0:	bb02      	cbnz	r2, 801d7f4 <_dtoa_r+0xa1c>
 801d7b2:	4601      	mov	r1, r0
 801d7b4:	4648      	mov	r0, r9
 801d7b6:	f000 fb97 	bl	801dee8 <__mcmp>
 801d7ba:	4602      	mov	r2, r0
 801d7bc:	4631      	mov	r1, r6
 801d7be:	4658      	mov	r0, fp
 801d7c0:	920e      	str	r2, [sp, #56]	@ 0x38
 801d7c2:	f000 f957 	bl	801da74 <_Bfree>
 801d7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d7c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d7ca:	9e07      	ldr	r6, [sp, #28]
 801d7cc:	ea43 0102 	orr.w	r1, r3, r2
 801d7d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d7d2:	4319      	orrs	r1, r3
 801d7d4:	d110      	bne.n	801d7f8 <_dtoa_r+0xa20>
 801d7d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d7da:	d029      	beq.n	801d830 <_dtoa_r+0xa58>
 801d7dc:	9b08      	ldr	r3, [sp, #32]
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	dd02      	ble.n	801d7e8 <_dtoa_r+0xa10>
 801d7e2:	9b02      	ldr	r3, [sp, #8]
 801d7e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801d7e8:	9b00      	ldr	r3, [sp, #0]
 801d7ea:	f883 8000 	strb.w	r8, [r3]
 801d7ee:	e63f      	b.n	801d470 <_dtoa_r+0x698>
 801d7f0:	4628      	mov	r0, r5
 801d7f2:	e7bb      	b.n	801d76c <_dtoa_r+0x994>
 801d7f4:	2201      	movs	r2, #1
 801d7f6:	e7e1      	b.n	801d7bc <_dtoa_r+0x9e4>
 801d7f8:	9b08      	ldr	r3, [sp, #32]
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	db04      	blt.n	801d808 <_dtoa_r+0xa30>
 801d7fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d800:	430b      	orrs	r3, r1
 801d802:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d804:	430b      	orrs	r3, r1
 801d806:	d120      	bne.n	801d84a <_dtoa_r+0xa72>
 801d808:	2a00      	cmp	r2, #0
 801d80a:	dded      	ble.n	801d7e8 <_dtoa_r+0xa10>
 801d80c:	4649      	mov	r1, r9
 801d80e:	2201      	movs	r2, #1
 801d810:	4658      	mov	r0, fp
 801d812:	f000 fafd 	bl	801de10 <__lshift>
 801d816:	4621      	mov	r1, r4
 801d818:	4681      	mov	r9, r0
 801d81a:	f000 fb65 	bl	801dee8 <__mcmp>
 801d81e:	2800      	cmp	r0, #0
 801d820:	dc03      	bgt.n	801d82a <_dtoa_r+0xa52>
 801d822:	d1e1      	bne.n	801d7e8 <_dtoa_r+0xa10>
 801d824:	f018 0f01 	tst.w	r8, #1
 801d828:	d0de      	beq.n	801d7e8 <_dtoa_r+0xa10>
 801d82a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d82e:	d1d8      	bne.n	801d7e2 <_dtoa_r+0xa0a>
 801d830:	9a00      	ldr	r2, [sp, #0]
 801d832:	2339      	movs	r3, #57	@ 0x39
 801d834:	7013      	strb	r3, [r2, #0]
 801d836:	4633      	mov	r3, r6
 801d838:	461e      	mov	r6, r3
 801d83a:	3b01      	subs	r3, #1
 801d83c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d840:	2a39      	cmp	r2, #57	@ 0x39
 801d842:	d052      	beq.n	801d8ea <_dtoa_r+0xb12>
 801d844:	3201      	adds	r2, #1
 801d846:	701a      	strb	r2, [r3, #0]
 801d848:	e612      	b.n	801d470 <_dtoa_r+0x698>
 801d84a:	2a00      	cmp	r2, #0
 801d84c:	dd07      	ble.n	801d85e <_dtoa_r+0xa86>
 801d84e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d852:	d0ed      	beq.n	801d830 <_dtoa_r+0xa58>
 801d854:	9a00      	ldr	r2, [sp, #0]
 801d856:	f108 0301 	add.w	r3, r8, #1
 801d85a:	7013      	strb	r3, [r2, #0]
 801d85c:	e608      	b.n	801d470 <_dtoa_r+0x698>
 801d85e:	9b07      	ldr	r3, [sp, #28]
 801d860:	9a07      	ldr	r2, [sp, #28]
 801d862:	f803 8c01 	strb.w	r8, [r3, #-1]
 801d866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d868:	4293      	cmp	r3, r2
 801d86a:	d028      	beq.n	801d8be <_dtoa_r+0xae6>
 801d86c:	4649      	mov	r1, r9
 801d86e:	2300      	movs	r3, #0
 801d870:	220a      	movs	r2, #10
 801d872:	4658      	mov	r0, fp
 801d874:	f000 f920 	bl	801dab8 <__multadd>
 801d878:	42af      	cmp	r7, r5
 801d87a:	4681      	mov	r9, r0
 801d87c:	f04f 0300 	mov.w	r3, #0
 801d880:	f04f 020a 	mov.w	r2, #10
 801d884:	4639      	mov	r1, r7
 801d886:	4658      	mov	r0, fp
 801d888:	d107      	bne.n	801d89a <_dtoa_r+0xac2>
 801d88a:	f000 f915 	bl	801dab8 <__multadd>
 801d88e:	4607      	mov	r7, r0
 801d890:	4605      	mov	r5, r0
 801d892:	9b07      	ldr	r3, [sp, #28]
 801d894:	3301      	adds	r3, #1
 801d896:	9307      	str	r3, [sp, #28]
 801d898:	e774      	b.n	801d784 <_dtoa_r+0x9ac>
 801d89a:	f000 f90d 	bl	801dab8 <__multadd>
 801d89e:	4629      	mov	r1, r5
 801d8a0:	4607      	mov	r7, r0
 801d8a2:	2300      	movs	r3, #0
 801d8a4:	220a      	movs	r2, #10
 801d8a6:	4658      	mov	r0, fp
 801d8a8:	f000 f906 	bl	801dab8 <__multadd>
 801d8ac:	4605      	mov	r5, r0
 801d8ae:	e7f0      	b.n	801d892 <_dtoa_r+0xaba>
 801d8b0:	9b00      	ldr	r3, [sp, #0]
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	bfcc      	ite	gt
 801d8b6:	461e      	movgt	r6, r3
 801d8b8:	2601      	movle	r6, #1
 801d8ba:	4456      	add	r6, sl
 801d8bc:	2700      	movs	r7, #0
 801d8be:	4649      	mov	r1, r9
 801d8c0:	2201      	movs	r2, #1
 801d8c2:	4658      	mov	r0, fp
 801d8c4:	f000 faa4 	bl	801de10 <__lshift>
 801d8c8:	4621      	mov	r1, r4
 801d8ca:	4681      	mov	r9, r0
 801d8cc:	f000 fb0c 	bl	801dee8 <__mcmp>
 801d8d0:	2800      	cmp	r0, #0
 801d8d2:	dcb0      	bgt.n	801d836 <_dtoa_r+0xa5e>
 801d8d4:	d102      	bne.n	801d8dc <_dtoa_r+0xb04>
 801d8d6:	f018 0f01 	tst.w	r8, #1
 801d8da:	d1ac      	bne.n	801d836 <_dtoa_r+0xa5e>
 801d8dc:	4633      	mov	r3, r6
 801d8de:	461e      	mov	r6, r3
 801d8e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d8e4:	2a30      	cmp	r2, #48	@ 0x30
 801d8e6:	d0fa      	beq.n	801d8de <_dtoa_r+0xb06>
 801d8e8:	e5c2      	b.n	801d470 <_dtoa_r+0x698>
 801d8ea:	459a      	cmp	sl, r3
 801d8ec:	d1a4      	bne.n	801d838 <_dtoa_r+0xa60>
 801d8ee:	9b04      	ldr	r3, [sp, #16]
 801d8f0:	3301      	adds	r3, #1
 801d8f2:	9304      	str	r3, [sp, #16]
 801d8f4:	2331      	movs	r3, #49	@ 0x31
 801d8f6:	f88a 3000 	strb.w	r3, [sl]
 801d8fa:	e5b9      	b.n	801d470 <_dtoa_r+0x698>
 801d8fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d8fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801d95c <_dtoa_r+0xb84>
 801d902:	b11b      	cbz	r3, 801d90c <_dtoa_r+0xb34>
 801d904:	f10a 0308 	add.w	r3, sl, #8
 801d908:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801d90a:	6013      	str	r3, [r2, #0]
 801d90c:	4650      	mov	r0, sl
 801d90e:	b019      	add	sp, #100	@ 0x64
 801d910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d916:	2b01      	cmp	r3, #1
 801d918:	f77f ae37 	ble.w	801d58a <_dtoa_r+0x7b2>
 801d91c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d91e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d920:	2001      	movs	r0, #1
 801d922:	e655      	b.n	801d5d0 <_dtoa_r+0x7f8>
 801d924:	9b00      	ldr	r3, [sp, #0]
 801d926:	2b00      	cmp	r3, #0
 801d928:	f77f aed6 	ble.w	801d6d8 <_dtoa_r+0x900>
 801d92c:	4656      	mov	r6, sl
 801d92e:	4621      	mov	r1, r4
 801d930:	4648      	mov	r0, r9
 801d932:	f7ff f9c9 	bl	801ccc8 <quorem>
 801d936:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801d93a:	f806 8b01 	strb.w	r8, [r6], #1
 801d93e:	9b00      	ldr	r3, [sp, #0]
 801d940:	eba6 020a 	sub.w	r2, r6, sl
 801d944:	4293      	cmp	r3, r2
 801d946:	ddb3      	ble.n	801d8b0 <_dtoa_r+0xad8>
 801d948:	4649      	mov	r1, r9
 801d94a:	2300      	movs	r3, #0
 801d94c:	220a      	movs	r2, #10
 801d94e:	4658      	mov	r0, fp
 801d950:	f000 f8b2 	bl	801dab8 <__multadd>
 801d954:	4681      	mov	r9, r0
 801d956:	e7ea      	b.n	801d92e <_dtoa_r+0xb56>
 801d958:	0806e3f5 	.word	0x0806e3f5
 801d95c:	0806e390 	.word	0x0806e390

0801d960 <_free_r>:
 801d960:	b538      	push	{r3, r4, r5, lr}
 801d962:	4605      	mov	r5, r0
 801d964:	2900      	cmp	r1, #0
 801d966:	d041      	beq.n	801d9ec <_free_r+0x8c>
 801d968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d96c:	1f0c      	subs	r4, r1, #4
 801d96e:	2b00      	cmp	r3, #0
 801d970:	bfb8      	it	lt
 801d972:	18e4      	addlt	r4, r4, r3
 801d974:	f7fe f980 	bl	801bc78 <__malloc_lock>
 801d978:	4a1d      	ldr	r2, [pc, #116]	@ (801d9f0 <_free_r+0x90>)
 801d97a:	6813      	ldr	r3, [r2, #0]
 801d97c:	b933      	cbnz	r3, 801d98c <_free_r+0x2c>
 801d97e:	6063      	str	r3, [r4, #4]
 801d980:	6014      	str	r4, [r2, #0]
 801d982:	4628      	mov	r0, r5
 801d984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d988:	f7fe b97c 	b.w	801bc84 <__malloc_unlock>
 801d98c:	42a3      	cmp	r3, r4
 801d98e:	d908      	bls.n	801d9a2 <_free_r+0x42>
 801d990:	6820      	ldr	r0, [r4, #0]
 801d992:	1821      	adds	r1, r4, r0
 801d994:	428b      	cmp	r3, r1
 801d996:	bf01      	itttt	eq
 801d998:	6819      	ldreq	r1, [r3, #0]
 801d99a:	685b      	ldreq	r3, [r3, #4]
 801d99c:	1809      	addeq	r1, r1, r0
 801d99e:	6021      	streq	r1, [r4, #0]
 801d9a0:	e7ed      	b.n	801d97e <_free_r+0x1e>
 801d9a2:	461a      	mov	r2, r3
 801d9a4:	685b      	ldr	r3, [r3, #4]
 801d9a6:	b10b      	cbz	r3, 801d9ac <_free_r+0x4c>
 801d9a8:	42a3      	cmp	r3, r4
 801d9aa:	d9fa      	bls.n	801d9a2 <_free_r+0x42>
 801d9ac:	6811      	ldr	r1, [r2, #0]
 801d9ae:	1850      	adds	r0, r2, r1
 801d9b0:	42a0      	cmp	r0, r4
 801d9b2:	d10b      	bne.n	801d9cc <_free_r+0x6c>
 801d9b4:	6820      	ldr	r0, [r4, #0]
 801d9b6:	4401      	add	r1, r0
 801d9b8:	1850      	adds	r0, r2, r1
 801d9ba:	4283      	cmp	r3, r0
 801d9bc:	6011      	str	r1, [r2, #0]
 801d9be:	d1e0      	bne.n	801d982 <_free_r+0x22>
 801d9c0:	6818      	ldr	r0, [r3, #0]
 801d9c2:	685b      	ldr	r3, [r3, #4]
 801d9c4:	6053      	str	r3, [r2, #4]
 801d9c6:	4408      	add	r0, r1
 801d9c8:	6010      	str	r0, [r2, #0]
 801d9ca:	e7da      	b.n	801d982 <_free_r+0x22>
 801d9cc:	d902      	bls.n	801d9d4 <_free_r+0x74>
 801d9ce:	230c      	movs	r3, #12
 801d9d0:	602b      	str	r3, [r5, #0]
 801d9d2:	e7d6      	b.n	801d982 <_free_r+0x22>
 801d9d4:	6820      	ldr	r0, [r4, #0]
 801d9d6:	1821      	adds	r1, r4, r0
 801d9d8:	428b      	cmp	r3, r1
 801d9da:	bf04      	itt	eq
 801d9dc:	6819      	ldreq	r1, [r3, #0]
 801d9de:	685b      	ldreq	r3, [r3, #4]
 801d9e0:	6063      	str	r3, [r4, #4]
 801d9e2:	bf04      	itt	eq
 801d9e4:	1809      	addeq	r1, r1, r0
 801d9e6:	6021      	streq	r1, [r4, #0]
 801d9e8:	6054      	str	r4, [r2, #4]
 801d9ea:	e7ca      	b.n	801d982 <_free_r+0x22>
 801d9ec:	bd38      	pop	{r3, r4, r5, pc}
 801d9ee:	bf00      	nop
 801d9f0:	20013ee4 	.word	0x20013ee4

0801d9f4 <_Balloc>:
 801d9f4:	b570      	push	{r4, r5, r6, lr}
 801d9f6:	69c6      	ldr	r6, [r0, #28]
 801d9f8:	4604      	mov	r4, r0
 801d9fa:	460d      	mov	r5, r1
 801d9fc:	b976      	cbnz	r6, 801da1c <_Balloc+0x28>
 801d9fe:	2010      	movs	r0, #16
 801da00:	f7fe f890 	bl	801bb24 <malloc>
 801da04:	4602      	mov	r2, r0
 801da06:	61e0      	str	r0, [r4, #28]
 801da08:	b920      	cbnz	r0, 801da14 <_Balloc+0x20>
 801da0a:	4b18      	ldr	r3, [pc, #96]	@ (801da6c <_Balloc+0x78>)
 801da0c:	4818      	ldr	r0, [pc, #96]	@ (801da70 <_Balloc+0x7c>)
 801da0e:	216b      	movs	r1, #107	@ 0x6b
 801da10:	f7ff f93c 	bl	801cc8c <__assert_func>
 801da14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801da18:	6006      	str	r6, [r0, #0]
 801da1a:	60c6      	str	r6, [r0, #12]
 801da1c:	69e6      	ldr	r6, [r4, #28]
 801da1e:	68f3      	ldr	r3, [r6, #12]
 801da20:	b183      	cbz	r3, 801da44 <_Balloc+0x50>
 801da22:	69e3      	ldr	r3, [r4, #28]
 801da24:	68db      	ldr	r3, [r3, #12]
 801da26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801da2a:	b9b8      	cbnz	r0, 801da5c <_Balloc+0x68>
 801da2c:	2101      	movs	r1, #1
 801da2e:	fa01 f605 	lsl.w	r6, r1, r5
 801da32:	1d72      	adds	r2, r6, #5
 801da34:	0092      	lsls	r2, r2, #2
 801da36:	4620      	mov	r0, r4
 801da38:	f7fe f860 	bl	801bafc <_calloc_r>
 801da3c:	b160      	cbz	r0, 801da58 <_Balloc+0x64>
 801da3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801da42:	e00e      	b.n	801da62 <_Balloc+0x6e>
 801da44:	2221      	movs	r2, #33	@ 0x21
 801da46:	2104      	movs	r1, #4
 801da48:	4620      	mov	r0, r4
 801da4a:	f7fe f857 	bl	801bafc <_calloc_r>
 801da4e:	69e3      	ldr	r3, [r4, #28]
 801da50:	60f0      	str	r0, [r6, #12]
 801da52:	68db      	ldr	r3, [r3, #12]
 801da54:	2b00      	cmp	r3, #0
 801da56:	d1e4      	bne.n	801da22 <_Balloc+0x2e>
 801da58:	2000      	movs	r0, #0
 801da5a:	bd70      	pop	{r4, r5, r6, pc}
 801da5c:	6802      	ldr	r2, [r0, #0]
 801da5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801da62:	2300      	movs	r3, #0
 801da64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801da68:	e7f7      	b.n	801da5a <_Balloc+0x66>
 801da6a:	bf00      	nop
 801da6c:	0806e1b0 	.word	0x0806e1b0
 801da70:	0806e406 	.word	0x0806e406

0801da74 <_Bfree>:
 801da74:	b570      	push	{r4, r5, r6, lr}
 801da76:	69c6      	ldr	r6, [r0, #28]
 801da78:	4605      	mov	r5, r0
 801da7a:	460c      	mov	r4, r1
 801da7c:	b976      	cbnz	r6, 801da9c <_Bfree+0x28>
 801da7e:	2010      	movs	r0, #16
 801da80:	f7fe f850 	bl	801bb24 <malloc>
 801da84:	4602      	mov	r2, r0
 801da86:	61e8      	str	r0, [r5, #28]
 801da88:	b920      	cbnz	r0, 801da94 <_Bfree+0x20>
 801da8a:	4b09      	ldr	r3, [pc, #36]	@ (801dab0 <_Bfree+0x3c>)
 801da8c:	4809      	ldr	r0, [pc, #36]	@ (801dab4 <_Bfree+0x40>)
 801da8e:	218f      	movs	r1, #143	@ 0x8f
 801da90:	f7ff f8fc 	bl	801cc8c <__assert_func>
 801da94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801da98:	6006      	str	r6, [r0, #0]
 801da9a:	60c6      	str	r6, [r0, #12]
 801da9c:	b13c      	cbz	r4, 801daae <_Bfree+0x3a>
 801da9e:	69eb      	ldr	r3, [r5, #28]
 801daa0:	6862      	ldr	r2, [r4, #4]
 801daa2:	68db      	ldr	r3, [r3, #12]
 801daa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801daa8:	6021      	str	r1, [r4, #0]
 801daaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801daae:	bd70      	pop	{r4, r5, r6, pc}
 801dab0:	0806e1b0 	.word	0x0806e1b0
 801dab4:	0806e406 	.word	0x0806e406

0801dab8 <__multadd>:
 801dab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dabc:	690d      	ldr	r5, [r1, #16]
 801dabe:	4607      	mov	r7, r0
 801dac0:	460c      	mov	r4, r1
 801dac2:	461e      	mov	r6, r3
 801dac4:	f101 0c14 	add.w	ip, r1, #20
 801dac8:	2000      	movs	r0, #0
 801daca:	f8dc 3000 	ldr.w	r3, [ip]
 801dace:	b299      	uxth	r1, r3
 801dad0:	fb02 6101 	mla	r1, r2, r1, r6
 801dad4:	0c1e      	lsrs	r6, r3, #16
 801dad6:	0c0b      	lsrs	r3, r1, #16
 801dad8:	fb02 3306 	mla	r3, r2, r6, r3
 801dadc:	b289      	uxth	r1, r1
 801dade:	3001      	adds	r0, #1
 801dae0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801dae4:	4285      	cmp	r5, r0
 801dae6:	f84c 1b04 	str.w	r1, [ip], #4
 801daea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801daee:	dcec      	bgt.n	801daca <__multadd+0x12>
 801daf0:	b30e      	cbz	r6, 801db36 <__multadd+0x7e>
 801daf2:	68a3      	ldr	r3, [r4, #8]
 801daf4:	42ab      	cmp	r3, r5
 801daf6:	dc19      	bgt.n	801db2c <__multadd+0x74>
 801daf8:	6861      	ldr	r1, [r4, #4]
 801dafa:	4638      	mov	r0, r7
 801dafc:	3101      	adds	r1, #1
 801dafe:	f7ff ff79 	bl	801d9f4 <_Balloc>
 801db02:	4680      	mov	r8, r0
 801db04:	b928      	cbnz	r0, 801db12 <__multadd+0x5a>
 801db06:	4602      	mov	r2, r0
 801db08:	4b0c      	ldr	r3, [pc, #48]	@ (801db3c <__multadd+0x84>)
 801db0a:	480d      	ldr	r0, [pc, #52]	@ (801db40 <__multadd+0x88>)
 801db0c:	21ba      	movs	r1, #186	@ 0xba
 801db0e:	f7ff f8bd 	bl	801cc8c <__assert_func>
 801db12:	6922      	ldr	r2, [r4, #16]
 801db14:	3202      	adds	r2, #2
 801db16:	f104 010c 	add.w	r1, r4, #12
 801db1a:	0092      	lsls	r2, r2, #2
 801db1c:	300c      	adds	r0, #12
 801db1e:	f7ff f8a6 	bl	801cc6e <memcpy>
 801db22:	4621      	mov	r1, r4
 801db24:	4638      	mov	r0, r7
 801db26:	f7ff ffa5 	bl	801da74 <_Bfree>
 801db2a:	4644      	mov	r4, r8
 801db2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801db30:	3501      	adds	r5, #1
 801db32:	615e      	str	r6, [r3, #20]
 801db34:	6125      	str	r5, [r4, #16]
 801db36:	4620      	mov	r0, r4
 801db38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db3c:	0806e3f5 	.word	0x0806e3f5
 801db40:	0806e406 	.word	0x0806e406

0801db44 <__hi0bits>:
 801db44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801db48:	4603      	mov	r3, r0
 801db4a:	bf36      	itet	cc
 801db4c:	0403      	lslcc	r3, r0, #16
 801db4e:	2000      	movcs	r0, #0
 801db50:	2010      	movcc	r0, #16
 801db52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801db56:	bf3c      	itt	cc
 801db58:	021b      	lslcc	r3, r3, #8
 801db5a:	3008      	addcc	r0, #8
 801db5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801db60:	bf3c      	itt	cc
 801db62:	011b      	lslcc	r3, r3, #4
 801db64:	3004      	addcc	r0, #4
 801db66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801db6a:	bf3c      	itt	cc
 801db6c:	009b      	lslcc	r3, r3, #2
 801db6e:	3002      	addcc	r0, #2
 801db70:	2b00      	cmp	r3, #0
 801db72:	db05      	blt.n	801db80 <__hi0bits+0x3c>
 801db74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801db78:	f100 0001 	add.w	r0, r0, #1
 801db7c:	bf08      	it	eq
 801db7e:	2020      	moveq	r0, #32
 801db80:	4770      	bx	lr

0801db82 <__lo0bits>:
 801db82:	6803      	ldr	r3, [r0, #0]
 801db84:	4602      	mov	r2, r0
 801db86:	f013 0007 	ands.w	r0, r3, #7
 801db8a:	d00b      	beq.n	801dba4 <__lo0bits+0x22>
 801db8c:	07d9      	lsls	r1, r3, #31
 801db8e:	d421      	bmi.n	801dbd4 <__lo0bits+0x52>
 801db90:	0798      	lsls	r0, r3, #30
 801db92:	bf49      	itett	mi
 801db94:	085b      	lsrmi	r3, r3, #1
 801db96:	089b      	lsrpl	r3, r3, #2
 801db98:	2001      	movmi	r0, #1
 801db9a:	6013      	strmi	r3, [r2, #0]
 801db9c:	bf5c      	itt	pl
 801db9e:	6013      	strpl	r3, [r2, #0]
 801dba0:	2002      	movpl	r0, #2
 801dba2:	4770      	bx	lr
 801dba4:	b299      	uxth	r1, r3
 801dba6:	b909      	cbnz	r1, 801dbac <__lo0bits+0x2a>
 801dba8:	0c1b      	lsrs	r3, r3, #16
 801dbaa:	2010      	movs	r0, #16
 801dbac:	b2d9      	uxtb	r1, r3
 801dbae:	b909      	cbnz	r1, 801dbb4 <__lo0bits+0x32>
 801dbb0:	3008      	adds	r0, #8
 801dbb2:	0a1b      	lsrs	r3, r3, #8
 801dbb4:	0719      	lsls	r1, r3, #28
 801dbb6:	bf04      	itt	eq
 801dbb8:	091b      	lsreq	r3, r3, #4
 801dbba:	3004      	addeq	r0, #4
 801dbbc:	0799      	lsls	r1, r3, #30
 801dbbe:	bf04      	itt	eq
 801dbc0:	089b      	lsreq	r3, r3, #2
 801dbc2:	3002      	addeq	r0, #2
 801dbc4:	07d9      	lsls	r1, r3, #31
 801dbc6:	d403      	bmi.n	801dbd0 <__lo0bits+0x4e>
 801dbc8:	085b      	lsrs	r3, r3, #1
 801dbca:	f100 0001 	add.w	r0, r0, #1
 801dbce:	d003      	beq.n	801dbd8 <__lo0bits+0x56>
 801dbd0:	6013      	str	r3, [r2, #0]
 801dbd2:	4770      	bx	lr
 801dbd4:	2000      	movs	r0, #0
 801dbd6:	4770      	bx	lr
 801dbd8:	2020      	movs	r0, #32
 801dbda:	4770      	bx	lr

0801dbdc <__i2b>:
 801dbdc:	b510      	push	{r4, lr}
 801dbde:	460c      	mov	r4, r1
 801dbe0:	2101      	movs	r1, #1
 801dbe2:	f7ff ff07 	bl	801d9f4 <_Balloc>
 801dbe6:	4602      	mov	r2, r0
 801dbe8:	b928      	cbnz	r0, 801dbf6 <__i2b+0x1a>
 801dbea:	4b05      	ldr	r3, [pc, #20]	@ (801dc00 <__i2b+0x24>)
 801dbec:	4805      	ldr	r0, [pc, #20]	@ (801dc04 <__i2b+0x28>)
 801dbee:	f240 1145 	movw	r1, #325	@ 0x145
 801dbf2:	f7ff f84b 	bl	801cc8c <__assert_func>
 801dbf6:	2301      	movs	r3, #1
 801dbf8:	6144      	str	r4, [r0, #20]
 801dbfa:	6103      	str	r3, [r0, #16]
 801dbfc:	bd10      	pop	{r4, pc}
 801dbfe:	bf00      	nop
 801dc00:	0806e3f5 	.word	0x0806e3f5
 801dc04:	0806e406 	.word	0x0806e406

0801dc08 <__multiply>:
 801dc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc0c:	4614      	mov	r4, r2
 801dc0e:	690a      	ldr	r2, [r1, #16]
 801dc10:	6923      	ldr	r3, [r4, #16]
 801dc12:	429a      	cmp	r2, r3
 801dc14:	bfa8      	it	ge
 801dc16:	4623      	movge	r3, r4
 801dc18:	460f      	mov	r7, r1
 801dc1a:	bfa4      	itt	ge
 801dc1c:	460c      	movge	r4, r1
 801dc1e:	461f      	movge	r7, r3
 801dc20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801dc24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801dc28:	68a3      	ldr	r3, [r4, #8]
 801dc2a:	6861      	ldr	r1, [r4, #4]
 801dc2c:	eb0a 0609 	add.w	r6, sl, r9
 801dc30:	42b3      	cmp	r3, r6
 801dc32:	b085      	sub	sp, #20
 801dc34:	bfb8      	it	lt
 801dc36:	3101      	addlt	r1, #1
 801dc38:	f7ff fedc 	bl	801d9f4 <_Balloc>
 801dc3c:	b930      	cbnz	r0, 801dc4c <__multiply+0x44>
 801dc3e:	4602      	mov	r2, r0
 801dc40:	4b44      	ldr	r3, [pc, #272]	@ (801dd54 <__multiply+0x14c>)
 801dc42:	4845      	ldr	r0, [pc, #276]	@ (801dd58 <__multiply+0x150>)
 801dc44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801dc48:	f7ff f820 	bl	801cc8c <__assert_func>
 801dc4c:	f100 0514 	add.w	r5, r0, #20
 801dc50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801dc54:	462b      	mov	r3, r5
 801dc56:	2200      	movs	r2, #0
 801dc58:	4543      	cmp	r3, r8
 801dc5a:	d321      	bcc.n	801dca0 <__multiply+0x98>
 801dc5c:	f107 0114 	add.w	r1, r7, #20
 801dc60:	f104 0214 	add.w	r2, r4, #20
 801dc64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801dc68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801dc6c:	9302      	str	r3, [sp, #8]
 801dc6e:	1b13      	subs	r3, r2, r4
 801dc70:	3b15      	subs	r3, #21
 801dc72:	f023 0303 	bic.w	r3, r3, #3
 801dc76:	3304      	adds	r3, #4
 801dc78:	f104 0715 	add.w	r7, r4, #21
 801dc7c:	42ba      	cmp	r2, r7
 801dc7e:	bf38      	it	cc
 801dc80:	2304      	movcc	r3, #4
 801dc82:	9301      	str	r3, [sp, #4]
 801dc84:	9b02      	ldr	r3, [sp, #8]
 801dc86:	9103      	str	r1, [sp, #12]
 801dc88:	428b      	cmp	r3, r1
 801dc8a:	d80c      	bhi.n	801dca6 <__multiply+0x9e>
 801dc8c:	2e00      	cmp	r6, #0
 801dc8e:	dd03      	ble.n	801dc98 <__multiply+0x90>
 801dc90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801dc94:	2b00      	cmp	r3, #0
 801dc96:	d05b      	beq.n	801dd50 <__multiply+0x148>
 801dc98:	6106      	str	r6, [r0, #16]
 801dc9a:	b005      	add	sp, #20
 801dc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dca0:	f843 2b04 	str.w	r2, [r3], #4
 801dca4:	e7d8      	b.n	801dc58 <__multiply+0x50>
 801dca6:	f8b1 a000 	ldrh.w	sl, [r1]
 801dcaa:	f1ba 0f00 	cmp.w	sl, #0
 801dcae:	d024      	beq.n	801dcfa <__multiply+0xf2>
 801dcb0:	f104 0e14 	add.w	lr, r4, #20
 801dcb4:	46a9      	mov	r9, r5
 801dcb6:	f04f 0c00 	mov.w	ip, #0
 801dcba:	f85e 7b04 	ldr.w	r7, [lr], #4
 801dcbe:	f8d9 3000 	ldr.w	r3, [r9]
 801dcc2:	fa1f fb87 	uxth.w	fp, r7
 801dcc6:	b29b      	uxth	r3, r3
 801dcc8:	fb0a 330b 	mla	r3, sl, fp, r3
 801dccc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801dcd0:	f8d9 7000 	ldr.w	r7, [r9]
 801dcd4:	4463      	add	r3, ip
 801dcd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801dcda:	fb0a c70b 	mla	r7, sl, fp, ip
 801dcde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801dce2:	b29b      	uxth	r3, r3
 801dce4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801dce8:	4572      	cmp	r2, lr
 801dcea:	f849 3b04 	str.w	r3, [r9], #4
 801dcee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801dcf2:	d8e2      	bhi.n	801dcba <__multiply+0xb2>
 801dcf4:	9b01      	ldr	r3, [sp, #4]
 801dcf6:	f845 c003 	str.w	ip, [r5, r3]
 801dcfa:	9b03      	ldr	r3, [sp, #12]
 801dcfc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801dd00:	3104      	adds	r1, #4
 801dd02:	f1b9 0f00 	cmp.w	r9, #0
 801dd06:	d021      	beq.n	801dd4c <__multiply+0x144>
 801dd08:	682b      	ldr	r3, [r5, #0]
 801dd0a:	f104 0c14 	add.w	ip, r4, #20
 801dd0e:	46ae      	mov	lr, r5
 801dd10:	f04f 0a00 	mov.w	sl, #0
 801dd14:	f8bc b000 	ldrh.w	fp, [ip]
 801dd18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801dd1c:	fb09 770b 	mla	r7, r9, fp, r7
 801dd20:	4457      	add	r7, sl
 801dd22:	b29b      	uxth	r3, r3
 801dd24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801dd28:	f84e 3b04 	str.w	r3, [lr], #4
 801dd2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801dd30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801dd34:	f8be 3000 	ldrh.w	r3, [lr]
 801dd38:	fb09 330a 	mla	r3, r9, sl, r3
 801dd3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801dd40:	4562      	cmp	r2, ip
 801dd42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801dd46:	d8e5      	bhi.n	801dd14 <__multiply+0x10c>
 801dd48:	9f01      	ldr	r7, [sp, #4]
 801dd4a:	51eb      	str	r3, [r5, r7]
 801dd4c:	3504      	adds	r5, #4
 801dd4e:	e799      	b.n	801dc84 <__multiply+0x7c>
 801dd50:	3e01      	subs	r6, #1
 801dd52:	e79b      	b.n	801dc8c <__multiply+0x84>
 801dd54:	0806e3f5 	.word	0x0806e3f5
 801dd58:	0806e406 	.word	0x0806e406

0801dd5c <__pow5mult>:
 801dd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd60:	4615      	mov	r5, r2
 801dd62:	f012 0203 	ands.w	r2, r2, #3
 801dd66:	4607      	mov	r7, r0
 801dd68:	460e      	mov	r6, r1
 801dd6a:	d007      	beq.n	801dd7c <__pow5mult+0x20>
 801dd6c:	4c25      	ldr	r4, [pc, #148]	@ (801de04 <__pow5mult+0xa8>)
 801dd6e:	3a01      	subs	r2, #1
 801dd70:	2300      	movs	r3, #0
 801dd72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dd76:	f7ff fe9f 	bl	801dab8 <__multadd>
 801dd7a:	4606      	mov	r6, r0
 801dd7c:	10ad      	asrs	r5, r5, #2
 801dd7e:	d03d      	beq.n	801ddfc <__pow5mult+0xa0>
 801dd80:	69fc      	ldr	r4, [r7, #28]
 801dd82:	b97c      	cbnz	r4, 801dda4 <__pow5mult+0x48>
 801dd84:	2010      	movs	r0, #16
 801dd86:	f7fd fecd 	bl	801bb24 <malloc>
 801dd8a:	4602      	mov	r2, r0
 801dd8c:	61f8      	str	r0, [r7, #28]
 801dd8e:	b928      	cbnz	r0, 801dd9c <__pow5mult+0x40>
 801dd90:	4b1d      	ldr	r3, [pc, #116]	@ (801de08 <__pow5mult+0xac>)
 801dd92:	481e      	ldr	r0, [pc, #120]	@ (801de0c <__pow5mult+0xb0>)
 801dd94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801dd98:	f7fe ff78 	bl	801cc8c <__assert_func>
 801dd9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dda0:	6004      	str	r4, [r0, #0]
 801dda2:	60c4      	str	r4, [r0, #12]
 801dda4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801dda8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ddac:	b94c      	cbnz	r4, 801ddc2 <__pow5mult+0x66>
 801ddae:	f240 2171 	movw	r1, #625	@ 0x271
 801ddb2:	4638      	mov	r0, r7
 801ddb4:	f7ff ff12 	bl	801dbdc <__i2b>
 801ddb8:	2300      	movs	r3, #0
 801ddba:	f8c8 0008 	str.w	r0, [r8, #8]
 801ddbe:	4604      	mov	r4, r0
 801ddc0:	6003      	str	r3, [r0, #0]
 801ddc2:	f04f 0900 	mov.w	r9, #0
 801ddc6:	07eb      	lsls	r3, r5, #31
 801ddc8:	d50a      	bpl.n	801dde0 <__pow5mult+0x84>
 801ddca:	4631      	mov	r1, r6
 801ddcc:	4622      	mov	r2, r4
 801ddce:	4638      	mov	r0, r7
 801ddd0:	f7ff ff1a 	bl	801dc08 <__multiply>
 801ddd4:	4631      	mov	r1, r6
 801ddd6:	4680      	mov	r8, r0
 801ddd8:	4638      	mov	r0, r7
 801ddda:	f7ff fe4b 	bl	801da74 <_Bfree>
 801ddde:	4646      	mov	r6, r8
 801dde0:	106d      	asrs	r5, r5, #1
 801dde2:	d00b      	beq.n	801ddfc <__pow5mult+0xa0>
 801dde4:	6820      	ldr	r0, [r4, #0]
 801dde6:	b938      	cbnz	r0, 801ddf8 <__pow5mult+0x9c>
 801dde8:	4622      	mov	r2, r4
 801ddea:	4621      	mov	r1, r4
 801ddec:	4638      	mov	r0, r7
 801ddee:	f7ff ff0b 	bl	801dc08 <__multiply>
 801ddf2:	6020      	str	r0, [r4, #0]
 801ddf4:	f8c0 9000 	str.w	r9, [r0]
 801ddf8:	4604      	mov	r4, r0
 801ddfa:	e7e4      	b.n	801ddc6 <__pow5mult+0x6a>
 801ddfc:	4630      	mov	r0, r6
 801ddfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de02:	bf00      	nop
 801de04:	0806e460 	.word	0x0806e460
 801de08:	0806e1b0 	.word	0x0806e1b0
 801de0c:	0806e406 	.word	0x0806e406

0801de10 <__lshift>:
 801de10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de14:	460c      	mov	r4, r1
 801de16:	6849      	ldr	r1, [r1, #4]
 801de18:	6923      	ldr	r3, [r4, #16]
 801de1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801de1e:	68a3      	ldr	r3, [r4, #8]
 801de20:	4607      	mov	r7, r0
 801de22:	4691      	mov	r9, r2
 801de24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801de28:	f108 0601 	add.w	r6, r8, #1
 801de2c:	42b3      	cmp	r3, r6
 801de2e:	db0b      	blt.n	801de48 <__lshift+0x38>
 801de30:	4638      	mov	r0, r7
 801de32:	f7ff fddf 	bl	801d9f4 <_Balloc>
 801de36:	4605      	mov	r5, r0
 801de38:	b948      	cbnz	r0, 801de4e <__lshift+0x3e>
 801de3a:	4602      	mov	r2, r0
 801de3c:	4b28      	ldr	r3, [pc, #160]	@ (801dee0 <__lshift+0xd0>)
 801de3e:	4829      	ldr	r0, [pc, #164]	@ (801dee4 <__lshift+0xd4>)
 801de40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801de44:	f7fe ff22 	bl	801cc8c <__assert_func>
 801de48:	3101      	adds	r1, #1
 801de4a:	005b      	lsls	r3, r3, #1
 801de4c:	e7ee      	b.n	801de2c <__lshift+0x1c>
 801de4e:	2300      	movs	r3, #0
 801de50:	f100 0114 	add.w	r1, r0, #20
 801de54:	f100 0210 	add.w	r2, r0, #16
 801de58:	4618      	mov	r0, r3
 801de5a:	4553      	cmp	r3, sl
 801de5c:	db33      	blt.n	801dec6 <__lshift+0xb6>
 801de5e:	6920      	ldr	r0, [r4, #16]
 801de60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801de64:	f104 0314 	add.w	r3, r4, #20
 801de68:	f019 091f 	ands.w	r9, r9, #31
 801de6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801de70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801de74:	d02b      	beq.n	801dece <__lshift+0xbe>
 801de76:	f1c9 0e20 	rsb	lr, r9, #32
 801de7a:	468a      	mov	sl, r1
 801de7c:	2200      	movs	r2, #0
 801de7e:	6818      	ldr	r0, [r3, #0]
 801de80:	fa00 f009 	lsl.w	r0, r0, r9
 801de84:	4310      	orrs	r0, r2
 801de86:	f84a 0b04 	str.w	r0, [sl], #4
 801de8a:	f853 2b04 	ldr.w	r2, [r3], #4
 801de8e:	459c      	cmp	ip, r3
 801de90:	fa22 f20e 	lsr.w	r2, r2, lr
 801de94:	d8f3      	bhi.n	801de7e <__lshift+0x6e>
 801de96:	ebac 0304 	sub.w	r3, ip, r4
 801de9a:	3b15      	subs	r3, #21
 801de9c:	f023 0303 	bic.w	r3, r3, #3
 801dea0:	3304      	adds	r3, #4
 801dea2:	f104 0015 	add.w	r0, r4, #21
 801dea6:	4584      	cmp	ip, r0
 801dea8:	bf38      	it	cc
 801deaa:	2304      	movcc	r3, #4
 801deac:	50ca      	str	r2, [r1, r3]
 801deae:	b10a      	cbz	r2, 801deb4 <__lshift+0xa4>
 801deb0:	f108 0602 	add.w	r6, r8, #2
 801deb4:	3e01      	subs	r6, #1
 801deb6:	4638      	mov	r0, r7
 801deb8:	612e      	str	r6, [r5, #16]
 801deba:	4621      	mov	r1, r4
 801debc:	f7ff fdda 	bl	801da74 <_Bfree>
 801dec0:	4628      	mov	r0, r5
 801dec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dec6:	f842 0f04 	str.w	r0, [r2, #4]!
 801deca:	3301      	adds	r3, #1
 801decc:	e7c5      	b.n	801de5a <__lshift+0x4a>
 801dece:	3904      	subs	r1, #4
 801ded0:	f853 2b04 	ldr.w	r2, [r3], #4
 801ded4:	f841 2f04 	str.w	r2, [r1, #4]!
 801ded8:	459c      	cmp	ip, r3
 801deda:	d8f9      	bhi.n	801ded0 <__lshift+0xc0>
 801dedc:	e7ea      	b.n	801deb4 <__lshift+0xa4>
 801dede:	bf00      	nop
 801dee0:	0806e3f5 	.word	0x0806e3f5
 801dee4:	0806e406 	.word	0x0806e406

0801dee8 <__mcmp>:
 801dee8:	690a      	ldr	r2, [r1, #16]
 801deea:	4603      	mov	r3, r0
 801deec:	6900      	ldr	r0, [r0, #16]
 801deee:	1a80      	subs	r0, r0, r2
 801def0:	b530      	push	{r4, r5, lr}
 801def2:	d10e      	bne.n	801df12 <__mcmp+0x2a>
 801def4:	3314      	adds	r3, #20
 801def6:	3114      	adds	r1, #20
 801def8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801defc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801df00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801df04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801df08:	4295      	cmp	r5, r2
 801df0a:	d003      	beq.n	801df14 <__mcmp+0x2c>
 801df0c:	d205      	bcs.n	801df1a <__mcmp+0x32>
 801df0e:	f04f 30ff 	mov.w	r0, #4294967295
 801df12:	bd30      	pop	{r4, r5, pc}
 801df14:	42a3      	cmp	r3, r4
 801df16:	d3f3      	bcc.n	801df00 <__mcmp+0x18>
 801df18:	e7fb      	b.n	801df12 <__mcmp+0x2a>
 801df1a:	2001      	movs	r0, #1
 801df1c:	e7f9      	b.n	801df12 <__mcmp+0x2a>
	...

0801df20 <__mdiff>:
 801df20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df24:	4689      	mov	r9, r1
 801df26:	4606      	mov	r6, r0
 801df28:	4611      	mov	r1, r2
 801df2a:	4648      	mov	r0, r9
 801df2c:	4614      	mov	r4, r2
 801df2e:	f7ff ffdb 	bl	801dee8 <__mcmp>
 801df32:	1e05      	subs	r5, r0, #0
 801df34:	d112      	bne.n	801df5c <__mdiff+0x3c>
 801df36:	4629      	mov	r1, r5
 801df38:	4630      	mov	r0, r6
 801df3a:	f7ff fd5b 	bl	801d9f4 <_Balloc>
 801df3e:	4602      	mov	r2, r0
 801df40:	b928      	cbnz	r0, 801df4e <__mdiff+0x2e>
 801df42:	4b3f      	ldr	r3, [pc, #252]	@ (801e040 <__mdiff+0x120>)
 801df44:	f240 2137 	movw	r1, #567	@ 0x237
 801df48:	483e      	ldr	r0, [pc, #248]	@ (801e044 <__mdiff+0x124>)
 801df4a:	f7fe fe9f 	bl	801cc8c <__assert_func>
 801df4e:	2301      	movs	r3, #1
 801df50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801df54:	4610      	mov	r0, r2
 801df56:	b003      	add	sp, #12
 801df58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df5c:	bfbc      	itt	lt
 801df5e:	464b      	movlt	r3, r9
 801df60:	46a1      	movlt	r9, r4
 801df62:	4630      	mov	r0, r6
 801df64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801df68:	bfba      	itte	lt
 801df6a:	461c      	movlt	r4, r3
 801df6c:	2501      	movlt	r5, #1
 801df6e:	2500      	movge	r5, #0
 801df70:	f7ff fd40 	bl	801d9f4 <_Balloc>
 801df74:	4602      	mov	r2, r0
 801df76:	b918      	cbnz	r0, 801df80 <__mdiff+0x60>
 801df78:	4b31      	ldr	r3, [pc, #196]	@ (801e040 <__mdiff+0x120>)
 801df7a:	f240 2145 	movw	r1, #581	@ 0x245
 801df7e:	e7e3      	b.n	801df48 <__mdiff+0x28>
 801df80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801df84:	6926      	ldr	r6, [r4, #16]
 801df86:	60c5      	str	r5, [r0, #12]
 801df88:	f109 0310 	add.w	r3, r9, #16
 801df8c:	f109 0514 	add.w	r5, r9, #20
 801df90:	f104 0e14 	add.w	lr, r4, #20
 801df94:	f100 0b14 	add.w	fp, r0, #20
 801df98:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801df9c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801dfa0:	9301      	str	r3, [sp, #4]
 801dfa2:	46d9      	mov	r9, fp
 801dfa4:	f04f 0c00 	mov.w	ip, #0
 801dfa8:	9b01      	ldr	r3, [sp, #4]
 801dfaa:	f85e 0b04 	ldr.w	r0, [lr], #4
 801dfae:	f853 af04 	ldr.w	sl, [r3, #4]!
 801dfb2:	9301      	str	r3, [sp, #4]
 801dfb4:	fa1f f38a 	uxth.w	r3, sl
 801dfb8:	4619      	mov	r1, r3
 801dfba:	b283      	uxth	r3, r0
 801dfbc:	1acb      	subs	r3, r1, r3
 801dfbe:	0c00      	lsrs	r0, r0, #16
 801dfc0:	4463      	add	r3, ip
 801dfc2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801dfc6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801dfca:	b29b      	uxth	r3, r3
 801dfcc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801dfd0:	4576      	cmp	r6, lr
 801dfd2:	f849 3b04 	str.w	r3, [r9], #4
 801dfd6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801dfda:	d8e5      	bhi.n	801dfa8 <__mdiff+0x88>
 801dfdc:	1b33      	subs	r3, r6, r4
 801dfde:	3b15      	subs	r3, #21
 801dfe0:	f023 0303 	bic.w	r3, r3, #3
 801dfe4:	3415      	adds	r4, #21
 801dfe6:	3304      	adds	r3, #4
 801dfe8:	42a6      	cmp	r6, r4
 801dfea:	bf38      	it	cc
 801dfec:	2304      	movcc	r3, #4
 801dfee:	441d      	add	r5, r3
 801dff0:	445b      	add	r3, fp
 801dff2:	461e      	mov	r6, r3
 801dff4:	462c      	mov	r4, r5
 801dff6:	4544      	cmp	r4, r8
 801dff8:	d30e      	bcc.n	801e018 <__mdiff+0xf8>
 801dffa:	f108 0103 	add.w	r1, r8, #3
 801dffe:	1b49      	subs	r1, r1, r5
 801e000:	f021 0103 	bic.w	r1, r1, #3
 801e004:	3d03      	subs	r5, #3
 801e006:	45a8      	cmp	r8, r5
 801e008:	bf38      	it	cc
 801e00a:	2100      	movcc	r1, #0
 801e00c:	440b      	add	r3, r1
 801e00e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e012:	b191      	cbz	r1, 801e03a <__mdiff+0x11a>
 801e014:	6117      	str	r7, [r2, #16]
 801e016:	e79d      	b.n	801df54 <__mdiff+0x34>
 801e018:	f854 1b04 	ldr.w	r1, [r4], #4
 801e01c:	46e6      	mov	lr, ip
 801e01e:	0c08      	lsrs	r0, r1, #16
 801e020:	fa1c fc81 	uxtah	ip, ip, r1
 801e024:	4471      	add	r1, lr
 801e026:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801e02a:	b289      	uxth	r1, r1
 801e02c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e030:	f846 1b04 	str.w	r1, [r6], #4
 801e034:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e038:	e7dd      	b.n	801dff6 <__mdiff+0xd6>
 801e03a:	3f01      	subs	r7, #1
 801e03c:	e7e7      	b.n	801e00e <__mdiff+0xee>
 801e03e:	bf00      	nop
 801e040:	0806e3f5 	.word	0x0806e3f5
 801e044:	0806e406 	.word	0x0806e406

0801e048 <__d2b>:
 801e048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e04c:	460f      	mov	r7, r1
 801e04e:	2101      	movs	r1, #1
 801e050:	ec59 8b10 	vmov	r8, r9, d0
 801e054:	4616      	mov	r6, r2
 801e056:	f7ff fccd 	bl	801d9f4 <_Balloc>
 801e05a:	4604      	mov	r4, r0
 801e05c:	b930      	cbnz	r0, 801e06c <__d2b+0x24>
 801e05e:	4602      	mov	r2, r0
 801e060:	4b23      	ldr	r3, [pc, #140]	@ (801e0f0 <__d2b+0xa8>)
 801e062:	4824      	ldr	r0, [pc, #144]	@ (801e0f4 <__d2b+0xac>)
 801e064:	f240 310f 	movw	r1, #783	@ 0x30f
 801e068:	f7fe fe10 	bl	801cc8c <__assert_func>
 801e06c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e074:	b10d      	cbz	r5, 801e07a <__d2b+0x32>
 801e076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e07a:	9301      	str	r3, [sp, #4]
 801e07c:	f1b8 0300 	subs.w	r3, r8, #0
 801e080:	d023      	beq.n	801e0ca <__d2b+0x82>
 801e082:	4668      	mov	r0, sp
 801e084:	9300      	str	r3, [sp, #0]
 801e086:	f7ff fd7c 	bl	801db82 <__lo0bits>
 801e08a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e08e:	b1d0      	cbz	r0, 801e0c6 <__d2b+0x7e>
 801e090:	f1c0 0320 	rsb	r3, r0, #32
 801e094:	fa02 f303 	lsl.w	r3, r2, r3
 801e098:	430b      	orrs	r3, r1
 801e09a:	40c2      	lsrs	r2, r0
 801e09c:	6163      	str	r3, [r4, #20]
 801e09e:	9201      	str	r2, [sp, #4]
 801e0a0:	9b01      	ldr	r3, [sp, #4]
 801e0a2:	61a3      	str	r3, [r4, #24]
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	bf0c      	ite	eq
 801e0a8:	2201      	moveq	r2, #1
 801e0aa:	2202      	movne	r2, #2
 801e0ac:	6122      	str	r2, [r4, #16]
 801e0ae:	b1a5      	cbz	r5, 801e0da <__d2b+0x92>
 801e0b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801e0b4:	4405      	add	r5, r0
 801e0b6:	603d      	str	r5, [r7, #0]
 801e0b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801e0bc:	6030      	str	r0, [r6, #0]
 801e0be:	4620      	mov	r0, r4
 801e0c0:	b003      	add	sp, #12
 801e0c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e0c6:	6161      	str	r1, [r4, #20]
 801e0c8:	e7ea      	b.n	801e0a0 <__d2b+0x58>
 801e0ca:	a801      	add	r0, sp, #4
 801e0cc:	f7ff fd59 	bl	801db82 <__lo0bits>
 801e0d0:	9b01      	ldr	r3, [sp, #4]
 801e0d2:	6163      	str	r3, [r4, #20]
 801e0d4:	3020      	adds	r0, #32
 801e0d6:	2201      	movs	r2, #1
 801e0d8:	e7e8      	b.n	801e0ac <__d2b+0x64>
 801e0da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e0de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801e0e2:	6038      	str	r0, [r7, #0]
 801e0e4:	6918      	ldr	r0, [r3, #16]
 801e0e6:	f7ff fd2d 	bl	801db44 <__hi0bits>
 801e0ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e0ee:	e7e5      	b.n	801e0bc <__d2b+0x74>
 801e0f0:	0806e3f5 	.word	0x0806e3f5
 801e0f4:	0806e406 	.word	0x0806e406

0801e0f8 <__sfputc_r>:
 801e0f8:	6893      	ldr	r3, [r2, #8]
 801e0fa:	3b01      	subs	r3, #1
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	b410      	push	{r4}
 801e100:	6093      	str	r3, [r2, #8]
 801e102:	da08      	bge.n	801e116 <__sfputc_r+0x1e>
 801e104:	6994      	ldr	r4, [r2, #24]
 801e106:	42a3      	cmp	r3, r4
 801e108:	db01      	blt.n	801e10e <__sfputc_r+0x16>
 801e10a:	290a      	cmp	r1, #10
 801e10c:	d103      	bne.n	801e116 <__sfputc_r+0x1e>
 801e10e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e112:	f7fe bc4b 	b.w	801c9ac <__swbuf_r>
 801e116:	6813      	ldr	r3, [r2, #0]
 801e118:	1c58      	adds	r0, r3, #1
 801e11a:	6010      	str	r0, [r2, #0]
 801e11c:	7019      	strb	r1, [r3, #0]
 801e11e:	4608      	mov	r0, r1
 801e120:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e124:	4770      	bx	lr

0801e126 <__sfputs_r>:
 801e126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e128:	4606      	mov	r6, r0
 801e12a:	460f      	mov	r7, r1
 801e12c:	4614      	mov	r4, r2
 801e12e:	18d5      	adds	r5, r2, r3
 801e130:	42ac      	cmp	r4, r5
 801e132:	d101      	bne.n	801e138 <__sfputs_r+0x12>
 801e134:	2000      	movs	r0, #0
 801e136:	e007      	b.n	801e148 <__sfputs_r+0x22>
 801e138:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e13c:	463a      	mov	r2, r7
 801e13e:	4630      	mov	r0, r6
 801e140:	f7ff ffda 	bl	801e0f8 <__sfputc_r>
 801e144:	1c43      	adds	r3, r0, #1
 801e146:	d1f3      	bne.n	801e130 <__sfputs_r+0xa>
 801e148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e14c <_vfiprintf_r>:
 801e14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e150:	460d      	mov	r5, r1
 801e152:	b09d      	sub	sp, #116	@ 0x74
 801e154:	4614      	mov	r4, r2
 801e156:	4698      	mov	r8, r3
 801e158:	4606      	mov	r6, r0
 801e15a:	b118      	cbz	r0, 801e164 <_vfiprintf_r+0x18>
 801e15c:	6a03      	ldr	r3, [r0, #32]
 801e15e:	b90b      	cbnz	r3, 801e164 <_vfiprintf_r+0x18>
 801e160:	f7fe fb30 	bl	801c7c4 <__sinit>
 801e164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e166:	07d9      	lsls	r1, r3, #31
 801e168:	d405      	bmi.n	801e176 <_vfiprintf_r+0x2a>
 801e16a:	89ab      	ldrh	r3, [r5, #12]
 801e16c:	059a      	lsls	r2, r3, #22
 801e16e:	d402      	bmi.n	801e176 <_vfiprintf_r+0x2a>
 801e170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e172:	f7fe fd72 	bl	801cc5a <__retarget_lock_acquire_recursive>
 801e176:	89ab      	ldrh	r3, [r5, #12]
 801e178:	071b      	lsls	r3, r3, #28
 801e17a:	d501      	bpl.n	801e180 <_vfiprintf_r+0x34>
 801e17c:	692b      	ldr	r3, [r5, #16]
 801e17e:	b99b      	cbnz	r3, 801e1a8 <_vfiprintf_r+0x5c>
 801e180:	4629      	mov	r1, r5
 801e182:	4630      	mov	r0, r6
 801e184:	f7fe fc50 	bl	801ca28 <__swsetup_r>
 801e188:	b170      	cbz	r0, 801e1a8 <_vfiprintf_r+0x5c>
 801e18a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e18c:	07dc      	lsls	r4, r3, #31
 801e18e:	d504      	bpl.n	801e19a <_vfiprintf_r+0x4e>
 801e190:	f04f 30ff 	mov.w	r0, #4294967295
 801e194:	b01d      	add	sp, #116	@ 0x74
 801e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e19a:	89ab      	ldrh	r3, [r5, #12]
 801e19c:	0598      	lsls	r0, r3, #22
 801e19e:	d4f7      	bmi.n	801e190 <_vfiprintf_r+0x44>
 801e1a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e1a2:	f7fe fd5b 	bl	801cc5c <__retarget_lock_release_recursive>
 801e1a6:	e7f3      	b.n	801e190 <_vfiprintf_r+0x44>
 801e1a8:	2300      	movs	r3, #0
 801e1aa:	9309      	str	r3, [sp, #36]	@ 0x24
 801e1ac:	2320      	movs	r3, #32
 801e1ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e1b2:	f8cd 800c 	str.w	r8, [sp, #12]
 801e1b6:	2330      	movs	r3, #48	@ 0x30
 801e1b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e368 <_vfiprintf_r+0x21c>
 801e1bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e1c0:	f04f 0901 	mov.w	r9, #1
 801e1c4:	4623      	mov	r3, r4
 801e1c6:	469a      	mov	sl, r3
 801e1c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e1cc:	b10a      	cbz	r2, 801e1d2 <_vfiprintf_r+0x86>
 801e1ce:	2a25      	cmp	r2, #37	@ 0x25
 801e1d0:	d1f9      	bne.n	801e1c6 <_vfiprintf_r+0x7a>
 801e1d2:	ebba 0b04 	subs.w	fp, sl, r4
 801e1d6:	d00b      	beq.n	801e1f0 <_vfiprintf_r+0xa4>
 801e1d8:	465b      	mov	r3, fp
 801e1da:	4622      	mov	r2, r4
 801e1dc:	4629      	mov	r1, r5
 801e1de:	4630      	mov	r0, r6
 801e1e0:	f7ff ffa1 	bl	801e126 <__sfputs_r>
 801e1e4:	3001      	adds	r0, #1
 801e1e6:	f000 80a7 	beq.w	801e338 <_vfiprintf_r+0x1ec>
 801e1ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e1ec:	445a      	add	r2, fp
 801e1ee:	9209      	str	r2, [sp, #36]	@ 0x24
 801e1f0:	f89a 3000 	ldrb.w	r3, [sl]
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	f000 809f 	beq.w	801e338 <_vfiprintf_r+0x1ec>
 801e1fa:	2300      	movs	r3, #0
 801e1fc:	f04f 32ff 	mov.w	r2, #4294967295
 801e200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e204:	f10a 0a01 	add.w	sl, sl, #1
 801e208:	9304      	str	r3, [sp, #16]
 801e20a:	9307      	str	r3, [sp, #28]
 801e20c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e210:	931a      	str	r3, [sp, #104]	@ 0x68
 801e212:	4654      	mov	r4, sl
 801e214:	2205      	movs	r2, #5
 801e216:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e21a:	4853      	ldr	r0, [pc, #332]	@ (801e368 <_vfiprintf_r+0x21c>)
 801e21c:	f7e1 fff0 	bl	8000200 <memchr>
 801e220:	9a04      	ldr	r2, [sp, #16]
 801e222:	b9d8      	cbnz	r0, 801e25c <_vfiprintf_r+0x110>
 801e224:	06d1      	lsls	r1, r2, #27
 801e226:	bf44      	itt	mi
 801e228:	2320      	movmi	r3, #32
 801e22a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e22e:	0713      	lsls	r3, r2, #28
 801e230:	bf44      	itt	mi
 801e232:	232b      	movmi	r3, #43	@ 0x2b
 801e234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e238:	f89a 3000 	ldrb.w	r3, [sl]
 801e23c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e23e:	d015      	beq.n	801e26c <_vfiprintf_r+0x120>
 801e240:	9a07      	ldr	r2, [sp, #28]
 801e242:	4654      	mov	r4, sl
 801e244:	2000      	movs	r0, #0
 801e246:	f04f 0c0a 	mov.w	ip, #10
 801e24a:	4621      	mov	r1, r4
 801e24c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e250:	3b30      	subs	r3, #48	@ 0x30
 801e252:	2b09      	cmp	r3, #9
 801e254:	d94b      	bls.n	801e2ee <_vfiprintf_r+0x1a2>
 801e256:	b1b0      	cbz	r0, 801e286 <_vfiprintf_r+0x13a>
 801e258:	9207      	str	r2, [sp, #28]
 801e25a:	e014      	b.n	801e286 <_vfiprintf_r+0x13a>
 801e25c:	eba0 0308 	sub.w	r3, r0, r8
 801e260:	fa09 f303 	lsl.w	r3, r9, r3
 801e264:	4313      	orrs	r3, r2
 801e266:	9304      	str	r3, [sp, #16]
 801e268:	46a2      	mov	sl, r4
 801e26a:	e7d2      	b.n	801e212 <_vfiprintf_r+0xc6>
 801e26c:	9b03      	ldr	r3, [sp, #12]
 801e26e:	1d19      	adds	r1, r3, #4
 801e270:	681b      	ldr	r3, [r3, #0]
 801e272:	9103      	str	r1, [sp, #12]
 801e274:	2b00      	cmp	r3, #0
 801e276:	bfbb      	ittet	lt
 801e278:	425b      	neglt	r3, r3
 801e27a:	f042 0202 	orrlt.w	r2, r2, #2
 801e27e:	9307      	strge	r3, [sp, #28]
 801e280:	9307      	strlt	r3, [sp, #28]
 801e282:	bfb8      	it	lt
 801e284:	9204      	strlt	r2, [sp, #16]
 801e286:	7823      	ldrb	r3, [r4, #0]
 801e288:	2b2e      	cmp	r3, #46	@ 0x2e
 801e28a:	d10a      	bne.n	801e2a2 <_vfiprintf_r+0x156>
 801e28c:	7863      	ldrb	r3, [r4, #1]
 801e28e:	2b2a      	cmp	r3, #42	@ 0x2a
 801e290:	d132      	bne.n	801e2f8 <_vfiprintf_r+0x1ac>
 801e292:	9b03      	ldr	r3, [sp, #12]
 801e294:	1d1a      	adds	r2, r3, #4
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	9203      	str	r2, [sp, #12]
 801e29a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e29e:	3402      	adds	r4, #2
 801e2a0:	9305      	str	r3, [sp, #20]
 801e2a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e378 <_vfiprintf_r+0x22c>
 801e2a6:	7821      	ldrb	r1, [r4, #0]
 801e2a8:	2203      	movs	r2, #3
 801e2aa:	4650      	mov	r0, sl
 801e2ac:	f7e1 ffa8 	bl	8000200 <memchr>
 801e2b0:	b138      	cbz	r0, 801e2c2 <_vfiprintf_r+0x176>
 801e2b2:	9b04      	ldr	r3, [sp, #16]
 801e2b4:	eba0 000a 	sub.w	r0, r0, sl
 801e2b8:	2240      	movs	r2, #64	@ 0x40
 801e2ba:	4082      	lsls	r2, r0
 801e2bc:	4313      	orrs	r3, r2
 801e2be:	3401      	adds	r4, #1
 801e2c0:	9304      	str	r3, [sp, #16]
 801e2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e2c6:	4829      	ldr	r0, [pc, #164]	@ (801e36c <_vfiprintf_r+0x220>)
 801e2c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e2cc:	2206      	movs	r2, #6
 801e2ce:	f7e1 ff97 	bl	8000200 <memchr>
 801e2d2:	2800      	cmp	r0, #0
 801e2d4:	d03f      	beq.n	801e356 <_vfiprintf_r+0x20a>
 801e2d6:	4b26      	ldr	r3, [pc, #152]	@ (801e370 <_vfiprintf_r+0x224>)
 801e2d8:	bb1b      	cbnz	r3, 801e322 <_vfiprintf_r+0x1d6>
 801e2da:	9b03      	ldr	r3, [sp, #12]
 801e2dc:	3307      	adds	r3, #7
 801e2de:	f023 0307 	bic.w	r3, r3, #7
 801e2e2:	3308      	adds	r3, #8
 801e2e4:	9303      	str	r3, [sp, #12]
 801e2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2e8:	443b      	add	r3, r7
 801e2ea:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2ec:	e76a      	b.n	801e1c4 <_vfiprintf_r+0x78>
 801e2ee:	fb0c 3202 	mla	r2, ip, r2, r3
 801e2f2:	460c      	mov	r4, r1
 801e2f4:	2001      	movs	r0, #1
 801e2f6:	e7a8      	b.n	801e24a <_vfiprintf_r+0xfe>
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	3401      	adds	r4, #1
 801e2fc:	9305      	str	r3, [sp, #20]
 801e2fe:	4619      	mov	r1, r3
 801e300:	f04f 0c0a 	mov.w	ip, #10
 801e304:	4620      	mov	r0, r4
 801e306:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e30a:	3a30      	subs	r2, #48	@ 0x30
 801e30c:	2a09      	cmp	r2, #9
 801e30e:	d903      	bls.n	801e318 <_vfiprintf_r+0x1cc>
 801e310:	2b00      	cmp	r3, #0
 801e312:	d0c6      	beq.n	801e2a2 <_vfiprintf_r+0x156>
 801e314:	9105      	str	r1, [sp, #20]
 801e316:	e7c4      	b.n	801e2a2 <_vfiprintf_r+0x156>
 801e318:	fb0c 2101 	mla	r1, ip, r1, r2
 801e31c:	4604      	mov	r4, r0
 801e31e:	2301      	movs	r3, #1
 801e320:	e7f0      	b.n	801e304 <_vfiprintf_r+0x1b8>
 801e322:	ab03      	add	r3, sp, #12
 801e324:	9300      	str	r3, [sp, #0]
 801e326:	462a      	mov	r2, r5
 801e328:	4b12      	ldr	r3, [pc, #72]	@ (801e374 <_vfiprintf_r+0x228>)
 801e32a:	a904      	add	r1, sp, #16
 801e32c:	4630      	mov	r0, r6
 801e32e:	f7fd fe05 	bl	801bf3c <_printf_float>
 801e332:	4607      	mov	r7, r0
 801e334:	1c78      	adds	r0, r7, #1
 801e336:	d1d6      	bne.n	801e2e6 <_vfiprintf_r+0x19a>
 801e338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e33a:	07d9      	lsls	r1, r3, #31
 801e33c:	d405      	bmi.n	801e34a <_vfiprintf_r+0x1fe>
 801e33e:	89ab      	ldrh	r3, [r5, #12]
 801e340:	059a      	lsls	r2, r3, #22
 801e342:	d402      	bmi.n	801e34a <_vfiprintf_r+0x1fe>
 801e344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e346:	f7fe fc89 	bl	801cc5c <__retarget_lock_release_recursive>
 801e34a:	89ab      	ldrh	r3, [r5, #12]
 801e34c:	065b      	lsls	r3, r3, #25
 801e34e:	f53f af1f 	bmi.w	801e190 <_vfiprintf_r+0x44>
 801e352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e354:	e71e      	b.n	801e194 <_vfiprintf_r+0x48>
 801e356:	ab03      	add	r3, sp, #12
 801e358:	9300      	str	r3, [sp, #0]
 801e35a:	462a      	mov	r2, r5
 801e35c:	4b05      	ldr	r3, [pc, #20]	@ (801e374 <_vfiprintf_r+0x228>)
 801e35e:	a904      	add	r1, sp, #16
 801e360:	4630      	mov	r0, r6
 801e362:	f7fe f883 	bl	801c46c <_printf_i>
 801e366:	e7e4      	b.n	801e332 <_vfiprintf_r+0x1e6>
 801e368:	0806e560 	.word	0x0806e560
 801e36c:	0806e56a 	.word	0x0806e56a
 801e370:	0801bf3d 	.word	0x0801bf3d
 801e374:	0801e127 	.word	0x0801e127
 801e378:	0806e566 	.word	0x0806e566

0801e37c <__sflush_r>:
 801e37c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e384:	0716      	lsls	r6, r2, #28
 801e386:	4605      	mov	r5, r0
 801e388:	460c      	mov	r4, r1
 801e38a:	d454      	bmi.n	801e436 <__sflush_r+0xba>
 801e38c:	684b      	ldr	r3, [r1, #4]
 801e38e:	2b00      	cmp	r3, #0
 801e390:	dc02      	bgt.n	801e398 <__sflush_r+0x1c>
 801e392:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e394:	2b00      	cmp	r3, #0
 801e396:	dd48      	ble.n	801e42a <__sflush_r+0xae>
 801e398:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e39a:	2e00      	cmp	r6, #0
 801e39c:	d045      	beq.n	801e42a <__sflush_r+0xae>
 801e39e:	2300      	movs	r3, #0
 801e3a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e3a4:	682f      	ldr	r7, [r5, #0]
 801e3a6:	6a21      	ldr	r1, [r4, #32]
 801e3a8:	602b      	str	r3, [r5, #0]
 801e3aa:	d030      	beq.n	801e40e <__sflush_r+0x92>
 801e3ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e3ae:	89a3      	ldrh	r3, [r4, #12]
 801e3b0:	0759      	lsls	r1, r3, #29
 801e3b2:	d505      	bpl.n	801e3c0 <__sflush_r+0x44>
 801e3b4:	6863      	ldr	r3, [r4, #4]
 801e3b6:	1ad2      	subs	r2, r2, r3
 801e3b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e3ba:	b10b      	cbz	r3, 801e3c0 <__sflush_r+0x44>
 801e3bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e3be:	1ad2      	subs	r2, r2, r3
 801e3c0:	2300      	movs	r3, #0
 801e3c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e3c4:	6a21      	ldr	r1, [r4, #32]
 801e3c6:	4628      	mov	r0, r5
 801e3c8:	47b0      	blx	r6
 801e3ca:	1c43      	adds	r3, r0, #1
 801e3cc:	89a3      	ldrh	r3, [r4, #12]
 801e3ce:	d106      	bne.n	801e3de <__sflush_r+0x62>
 801e3d0:	6829      	ldr	r1, [r5, #0]
 801e3d2:	291d      	cmp	r1, #29
 801e3d4:	d82b      	bhi.n	801e42e <__sflush_r+0xb2>
 801e3d6:	4a2a      	ldr	r2, [pc, #168]	@ (801e480 <__sflush_r+0x104>)
 801e3d8:	410a      	asrs	r2, r1
 801e3da:	07d6      	lsls	r6, r2, #31
 801e3dc:	d427      	bmi.n	801e42e <__sflush_r+0xb2>
 801e3de:	2200      	movs	r2, #0
 801e3e0:	6062      	str	r2, [r4, #4]
 801e3e2:	04d9      	lsls	r1, r3, #19
 801e3e4:	6922      	ldr	r2, [r4, #16]
 801e3e6:	6022      	str	r2, [r4, #0]
 801e3e8:	d504      	bpl.n	801e3f4 <__sflush_r+0x78>
 801e3ea:	1c42      	adds	r2, r0, #1
 801e3ec:	d101      	bne.n	801e3f2 <__sflush_r+0x76>
 801e3ee:	682b      	ldr	r3, [r5, #0]
 801e3f0:	b903      	cbnz	r3, 801e3f4 <__sflush_r+0x78>
 801e3f2:	6560      	str	r0, [r4, #84]	@ 0x54
 801e3f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e3f6:	602f      	str	r7, [r5, #0]
 801e3f8:	b1b9      	cbz	r1, 801e42a <__sflush_r+0xae>
 801e3fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e3fe:	4299      	cmp	r1, r3
 801e400:	d002      	beq.n	801e408 <__sflush_r+0x8c>
 801e402:	4628      	mov	r0, r5
 801e404:	f7ff faac 	bl	801d960 <_free_r>
 801e408:	2300      	movs	r3, #0
 801e40a:	6363      	str	r3, [r4, #52]	@ 0x34
 801e40c:	e00d      	b.n	801e42a <__sflush_r+0xae>
 801e40e:	2301      	movs	r3, #1
 801e410:	4628      	mov	r0, r5
 801e412:	47b0      	blx	r6
 801e414:	4602      	mov	r2, r0
 801e416:	1c50      	adds	r0, r2, #1
 801e418:	d1c9      	bne.n	801e3ae <__sflush_r+0x32>
 801e41a:	682b      	ldr	r3, [r5, #0]
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	d0c6      	beq.n	801e3ae <__sflush_r+0x32>
 801e420:	2b1d      	cmp	r3, #29
 801e422:	d001      	beq.n	801e428 <__sflush_r+0xac>
 801e424:	2b16      	cmp	r3, #22
 801e426:	d11e      	bne.n	801e466 <__sflush_r+0xea>
 801e428:	602f      	str	r7, [r5, #0]
 801e42a:	2000      	movs	r0, #0
 801e42c:	e022      	b.n	801e474 <__sflush_r+0xf8>
 801e42e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e432:	b21b      	sxth	r3, r3
 801e434:	e01b      	b.n	801e46e <__sflush_r+0xf2>
 801e436:	690f      	ldr	r7, [r1, #16]
 801e438:	2f00      	cmp	r7, #0
 801e43a:	d0f6      	beq.n	801e42a <__sflush_r+0xae>
 801e43c:	0793      	lsls	r3, r2, #30
 801e43e:	680e      	ldr	r6, [r1, #0]
 801e440:	bf08      	it	eq
 801e442:	694b      	ldreq	r3, [r1, #20]
 801e444:	600f      	str	r7, [r1, #0]
 801e446:	bf18      	it	ne
 801e448:	2300      	movne	r3, #0
 801e44a:	eba6 0807 	sub.w	r8, r6, r7
 801e44e:	608b      	str	r3, [r1, #8]
 801e450:	f1b8 0f00 	cmp.w	r8, #0
 801e454:	dde9      	ble.n	801e42a <__sflush_r+0xae>
 801e456:	6a21      	ldr	r1, [r4, #32]
 801e458:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e45a:	4643      	mov	r3, r8
 801e45c:	463a      	mov	r2, r7
 801e45e:	4628      	mov	r0, r5
 801e460:	47b0      	blx	r6
 801e462:	2800      	cmp	r0, #0
 801e464:	dc08      	bgt.n	801e478 <__sflush_r+0xfc>
 801e466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e46a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e46e:	81a3      	strh	r3, [r4, #12]
 801e470:	f04f 30ff 	mov.w	r0, #4294967295
 801e474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e478:	4407      	add	r7, r0
 801e47a:	eba8 0800 	sub.w	r8, r8, r0
 801e47e:	e7e7      	b.n	801e450 <__sflush_r+0xd4>
 801e480:	dfbffffe 	.word	0xdfbffffe

0801e484 <_fflush_r>:
 801e484:	b538      	push	{r3, r4, r5, lr}
 801e486:	690b      	ldr	r3, [r1, #16]
 801e488:	4605      	mov	r5, r0
 801e48a:	460c      	mov	r4, r1
 801e48c:	b913      	cbnz	r3, 801e494 <_fflush_r+0x10>
 801e48e:	2500      	movs	r5, #0
 801e490:	4628      	mov	r0, r5
 801e492:	bd38      	pop	{r3, r4, r5, pc}
 801e494:	b118      	cbz	r0, 801e49e <_fflush_r+0x1a>
 801e496:	6a03      	ldr	r3, [r0, #32]
 801e498:	b90b      	cbnz	r3, 801e49e <_fflush_r+0x1a>
 801e49a:	f7fe f993 	bl	801c7c4 <__sinit>
 801e49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e4a2:	2b00      	cmp	r3, #0
 801e4a4:	d0f3      	beq.n	801e48e <_fflush_r+0xa>
 801e4a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e4a8:	07d0      	lsls	r0, r2, #31
 801e4aa:	d404      	bmi.n	801e4b6 <_fflush_r+0x32>
 801e4ac:	0599      	lsls	r1, r3, #22
 801e4ae:	d402      	bmi.n	801e4b6 <_fflush_r+0x32>
 801e4b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e4b2:	f7fe fbd2 	bl	801cc5a <__retarget_lock_acquire_recursive>
 801e4b6:	4628      	mov	r0, r5
 801e4b8:	4621      	mov	r1, r4
 801e4ba:	f7ff ff5f 	bl	801e37c <__sflush_r>
 801e4be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e4c0:	07da      	lsls	r2, r3, #31
 801e4c2:	4605      	mov	r5, r0
 801e4c4:	d4e4      	bmi.n	801e490 <_fflush_r+0xc>
 801e4c6:	89a3      	ldrh	r3, [r4, #12]
 801e4c8:	059b      	lsls	r3, r3, #22
 801e4ca:	d4e1      	bmi.n	801e490 <_fflush_r+0xc>
 801e4cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e4ce:	f7fe fbc5 	bl	801cc5c <__retarget_lock_release_recursive>
 801e4d2:	e7dd      	b.n	801e490 <_fflush_r+0xc>

0801e4d4 <fiprintf>:
 801e4d4:	b40e      	push	{r1, r2, r3}
 801e4d6:	b503      	push	{r0, r1, lr}
 801e4d8:	4601      	mov	r1, r0
 801e4da:	ab03      	add	r3, sp, #12
 801e4dc:	4805      	ldr	r0, [pc, #20]	@ (801e4f4 <fiprintf+0x20>)
 801e4de:	f853 2b04 	ldr.w	r2, [r3], #4
 801e4e2:	6800      	ldr	r0, [r0, #0]
 801e4e4:	9301      	str	r3, [sp, #4]
 801e4e6:	f7ff fe31 	bl	801e14c <_vfiprintf_r>
 801e4ea:	b002      	add	sp, #8
 801e4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 801e4f0:	b003      	add	sp, #12
 801e4f2:	4770      	bx	lr
 801e4f4:	200000d0 	.word	0x200000d0

0801e4f8 <__swhatbuf_r>:
 801e4f8:	b570      	push	{r4, r5, r6, lr}
 801e4fa:	460c      	mov	r4, r1
 801e4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e500:	2900      	cmp	r1, #0
 801e502:	b096      	sub	sp, #88	@ 0x58
 801e504:	4615      	mov	r5, r2
 801e506:	461e      	mov	r6, r3
 801e508:	da0d      	bge.n	801e526 <__swhatbuf_r+0x2e>
 801e50a:	89a3      	ldrh	r3, [r4, #12]
 801e50c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e510:	f04f 0100 	mov.w	r1, #0
 801e514:	bf14      	ite	ne
 801e516:	2340      	movne	r3, #64	@ 0x40
 801e518:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e51c:	2000      	movs	r0, #0
 801e51e:	6031      	str	r1, [r6, #0]
 801e520:	602b      	str	r3, [r5, #0]
 801e522:	b016      	add	sp, #88	@ 0x58
 801e524:	bd70      	pop	{r4, r5, r6, pc}
 801e526:	466a      	mov	r2, sp
 801e528:	f000 f848 	bl	801e5bc <_fstat_r>
 801e52c:	2800      	cmp	r0, #0
 801e52e:	dbec      	blt.n	801e50a <__swhatbuf_r+0x12>
 801e530:	9901      	ldr	r1, [sp, #4]
 801e532:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e536:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e53a:	4259      	negs	r1, r3
 801e53c:	4159      	adcs	r1, r3
 801e53e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e542:	e7eb      	b.n	801e51c <__swhatbuf_r+0x24>

0801e544 <__smakebuf_r>:
 801e544:	898b      	ldrh	r3, [r1, #12]
 801e546:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e548:	079d      	lsls	r5, r3, #30
 801e54a:	4606      	mov	r6, r0
 801e54c:	460c      	mov	r4, r1
 801e54e:	d507      	bpl.n	801e560 <__smakebuf_r+0x1c>
 801e550:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e554:	6023      	str	r3, [r4, #0]
 801e556:	6123      	str	r3, [r4, #16]
 801e558:	2301      	movs	r3, #1
 801e55a:	6163      	str	r3, [r4, #20]
 801e55c:	b003      	add	sp, #12
 801e55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e560:	ab01      	add	r3, sp, #4
 801e562:	466a      	mov	r2, sp
 801e564:	f7ff ffc8 	bl	801e4f8 <__swhatbuf_r>
 801e568:	9f00      	ldr	r7, [sp, #0]
 801e56a:	4605      	mov	r5, r0
 801e56c:	4639      	mov	r1, r7
 801e56e:	4630      	mov	r0, r6
 801e570:	f7fd fb02 	bl	801bb78 <_malloc_r>
 801e574:	b948      	cbnz	r0, 801e58a <__smakebuf_r+0x46>
 801e576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e57a:	059a      	lsls	r2, r3, #22
 801e57c:	d4ee      	bmi.n	801e55c <__smakebuf_r+0x18>
 801e57e:	f023 0303 	bic.w	r3, r3, #3
 801e582:	f043 0302 	orr.w	r3, r3, #2
 801e586:	81a3      	strh	r3, [r4, #12]
 801e588:	e7e2      	b.n	801e550 <__smakebuf_r+0xc>
 801e58a:	89a3      	ldrh	r3, [r4, #12]
 801e58c:	6020      	str	r0, [r4, #0]
 801e58e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e592:	81a3      	strh	r3, [r4, #12]
 801e594:	9b01      	ldr	r3, [sp, #4]
 801e596:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e59a:	b15b      	cbz	r3, 801e5b4 <__smakebuf_r+0x70>
 801e59c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e5a0:	4630      	mov	r0, r6
 801e5a2:	f000 f81d 	bl	801e5e0 <_isatty_r>
 801e5a6:	b128      	cbz	r0, 801e5b4 <__smakebuf_r+0x70>
 801e5a8:	89a3      	ldrh	r3, [r4, #12]
 801e5aa:	f023 0303 	bic.w	r3, r3, #3
 801e5ae:	f043 0301 	orr.w	r3, r3, #1
 801e5b2:	81a3      	strh	r3, [r4, #12]
 801e5b4:	89a3      	ldrh	r3, [r4, #12]
 801e5b6:	431d      	orrs	r5, r3
 801e5b8:	81a5      	strh	r5, [r4, #12]
 801e5ba:	e7cf      	b.n	801e55c <__smakebuf_r+0x18>

0801e5bc <_fstat_r>:
 801e5bc:	b538      	push	{r3, r4, r5, lr}
 801e5be:	4d07      	ldr	r5, [pc, #28]	@ (801e5dc <_fstat_r+0x20>)
 801e5c0:	2300      	movs	r3, #0
 801e5c2:	4604      	mov	r4, r0
 801e5c4:	4608      	mov	r0, r1
 801e5c6:	4611      	mov	r1, r2
 801e5c8:	602b      	str	r3, [r5, #0]
 801e5ca:	f7e7 fa4d 	bl	8005a68 <_fstat>
 801e5ce:	1c43      	adds	r3, r0, #1
 801e5d0:	d102      	bne.n	801e5d8 <_fstat_r+0x1c>
 801e5d2:	682b      	ldr	r3, [r5, #0]
 801e5d4:	b103      	cbz	r3, 801e5d8 <_fstat_r+0x1c>
 801e5d6:	6023      	str	r3, [r4, #0]
 801e5d8:	bd38      	pop	{r3, r4, r5, pc}
 801e5da:	bf00      	nop
 801e5dc:	20014024 	.word	0x20014024

0801e5e0 <_isatty_r>:
 801e5e0:	b538      	push	{r3, r4, r5, lr}
 801e5e2:	4d06      	ldr	r5, [pc, #24]	@ (801e5fc <_isatty_r+0x1c>)
 801e5e4:	2300      	movs	r3, #0
 801e5e6:	4604      	mov	r4, r0
 801e5e8:	4608      	mov	r0, r1
 801e5ea:	602b      	str	r3, [r5, #0]
 801e5ec:	f7e7 fa4c 	bl	8005a88 <_isatty>
 801e5f0:	1c43      	adds	r3, r0, #1
 801e5f2:	d102      	bne.n	801e5fa <_isatty_r+0x1a>
 801e5f4:	682b      	ldr	r3, [r5, #0]
 801e5f6:	b103      	cbz	r3, 801e5fa <_isatty_r+0x1a>
 801e5f8:	6023      	str	r3, [r4, #0]
 801e5fa:	bd38      	pop	{r3, r4, r5, pc}
 801e5fc:	20014024 	.word	0x20014024

0801e600 <abort>:
 801e600:	b508      	push	{r3, lr}
 801e602:	2006      	movs	r0, #6
 801e604:	f000 f84a 	bl	801e69c <raise>
 801e608:	2001      	movs	r0, #1
 801e60a:	f7e7 f9dd 	bl	80059c8 <_exit>

0801e60e <__ascii_mbtowc>:
 801e60e:	b082      	sub	sp, #8
 801e610:	b901      	cbnz	r1, 801e614 <__ascii_mbtowc+0x6>
 801e612:	a901      	add	r1, sp, #4
 801e614:	b142      	cbz	r2, 801e628 <__ascii_mbtowc+0x1a>
 801e616:	b14b      	cbz	r3, 801e62c <__ascii_mbtowc+0x1e>
 801e618:	7813      	ldrb	r3, [r2, #0]
 801e61a:	600b      	str	r3, [r1, #0]
 801e61c:	7812      	ldrb	r2, [r2, #0]
 801e61e:	1e10      	subs	r0, r2, #0
 801e620:	bf18      	it	ne
 801e622:	2001      	movne	r0, #1
 801e624:	b002      	add	sp, #8
 801e626:	4770      	bx	lr
 801e628:	4610      	mov	r0, r2
 801e62a:	e7fb      	b.n	801e624 <__ascii_mbtowc+0x16>
 801e62c:	f06f 0001 	mvn.w	r0, #1
 801e630:	e7f8      	b.n	801e624 <__ascii_mbtowc+0x16>

0801e632 <__ascii_wctomb>:
 801e632:	4603      	mov	r3, r0
 801e634:	4608      	mov	r0, r1
 801e636:	b141      	cbz	r1, 801e64a <__ascii_wctomb+0x18>
 801e638:	2aff      	cmp	r2, #255	@ 0xff
 801e63a:	d904      	bls.n	801e646 <__ascii_wctomb+0x14>
 801e63c:	228a      	movs	r2, #138	@ 0x8a
 801e63e:	601a      	str	r2, [r3, #0]
 801e640:	f04f 30ff 	mov.w	r0, #4294967295
 801e644:	4770      	bx	lr
 801e646:	700a      	strb	r2, [r1, #0]
 801e648:	2001      	movs	r0, #1
 801e64a:	4770      	bx	lr

0801e64c <_raise_r>:
 801e64c:	291f      	cmp	r1, #31
 801e64e:	b538      	push	{r3, r4, r5, lr}
 801e650:	4605      	mov	r5, r0
 801e652:	460c      	mov	r4, r1
 801e654:	d904      	bls.n	801e660 <_raise_r+0x14>
 801e656:	2316      	movs	r3, #22
 801e658:	6003      	str	r3, [r0, #0]
 801e65a:	f04f 30ff 	mov.w	r0, #4294967295
 801e65e:	bd38      	pop	{r3, r4, r5, pc}
 801e660:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e662:	b112      	cbz	r2, 801e66a <_raise_r+0x1e>
 801e664:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e668:	b94b      	cbnz	r3, 801e67e <_raise_r+0x32>
 801e66a:	4628      	mov	r0, r5
 801e66c:	f000 f830 	bl	801e6d0 <_getpid_r>
 801e670:	4622      	mov	r2, r4
 801e672:	4601      	mov	r1, r0
 801e674:	4628      	mov	r0, r5
 801e676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e67a:	f000 b817 	b.w	801e6ac <_kill_r>
 801e67e:	2b01      	cmp	r3, #1
 801e680:	d00a      	beq.n	801e698 <_raise_r+0x4c>
 801e682:	1c59      	adds	r1, r3, #1
 801e684:	d103      	bne.n	801e68e <_raise_r+0x42>
 801e686:	2316      	movs	r3, #22
 801e688:	6003      	str	r3, [r0, #0]
 801e68a:	2001      	movs	r0, #1
 801e68c:	e7e7      	b.n	801e65e <_raise_r+0x12>
 801e68e:	2100      	movs	r1, #0
 801e690:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e694:	4620      	mov	r0, r4
 801e696:	4798      	blx	r3
 801e698:	2000      	movs	r0, #0
 801e69a:	e7e0      	b.n	801e65e <_raise_r+0x12>

0801e69c <raise>:
 801e69c:	4b02      	ldr	r3, [pc, #8]	@ (801e6a8 <raise+0xc>)
 801e69e:	4601      	mov	r1, r0
 801e6a0:	6818      	ldr	r0, [r3, #0]
 801e6a2:	f7ff bfd3 	b.w	801e64c <_raise_r>
 801e6a6:	bf00      	nop
 801e6a8:	200000d0 	.word	0x200000d0

0801e6ac <_kill_r>:
 801e6ac:	b538      	push	{r3, r4, r5, lr}
 801e6ae:	4d07      	ldr	r5, [pc, #28]	@ (801e6cc <_kill_r+0x20>)
 801e6b0:	2300      	movs	r3, #0
 801e6b2:	4604      	mov	r4, r0
 801e6b4:	4608      	mov	r0, r1
 801e6b6:	4611      	mov	r1, r2
 801e6b8:	602b      	str	r3, [r5, #0]
 801e6ba:	f7e7 f975 	bl	80059a8 <_kill>
 801e6be:	1c43      	adds	r3, r0, #1
 801e6c0:	d102      	bne.n	801e6c8 <_kill_r+0x1c>
 801e6c2:	682b      	ldr	r3, [r5, #0]
 801e6c4:	b103      	cbz	r3, 801e6c8 <_kill_r+0x1c>
 801e6c6:	6023      	str	r3, [r4, #0]
 801e6c8:	bd38      	pop	{r3, r4, r5, pc}
 801e6ca:	bf00      	nop
 801e6cc:	20014024 	.word	0x20014024

0801e6d0 <_getpid_r>:
 801e6d0:	f7e7 b962 	b.w	8005998 <_getpid>

0801e6d4 <_init>:
 801e6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6d6:	bf00      	nop
 801e6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e6da:	bc08      	pop	{r3}
 801e6dc:	469e      	mov	lr, r3
 801e6de:	4770      	bx	lr

0801e6e0 <_fini>:
 801e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6e2:	bf00      	nop
 801e6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e6e6:	bc08      	pop	{r3}
 801e6e8:	469e      	mov	lr, r3
 801e6ea:	4770      	bx	lr
