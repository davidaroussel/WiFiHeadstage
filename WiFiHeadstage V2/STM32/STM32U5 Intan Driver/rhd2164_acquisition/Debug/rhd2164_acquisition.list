
rhd2164_acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbb0  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800fe00  0800fe00  00010e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ff38  0800ff38  00010f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ff40  0800ff40  00010f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ff44  0800ff44  00010f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000000  0800ff48  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000905  20000078  0800ffc0  00011078  2**3
                  ALLOC
  8 ._user_heap_stack 00000603  2000097d  0800ffc0  0001197d  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00011078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f4c3  00000000  00000000  000110ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000394b  00000000  00000000  00030571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019d0  00000000  00000000  00033ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001425  00000000  00000000  00035890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037a96  00000000  00000000  00036cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020955  00000000  00000000  0006e74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001601b9  00000000  00000000  0008f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ef259  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000788c  00000000  00000000  001ef29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  001f6b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000078 	.word	0x20000078
 800026c:	00000000 	.word	0x00000000
 8000270:	0800fde8 	.word	0x0800fde8

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000007c 	.word	0x2000007c
 800028c:	0800fde8 	.word	0x0800fde8

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b97e 	b.w	8000ebc <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bdc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14d      	bne.n	8000c80 <__udivmoddi4+0xa8>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	460f      	mov	r7, r1
 8000be8:	4684      	mov	ip, r0
 8000bea:	4696      	mov	lr, r2
 8000bec:	fab2 f382 	clz	r3, r2
 8000bf0:	d960      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bf2:	b14b      	cbz	r3, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c0c:	fa1f f48e 	uxth.w	r4, lr
 8000c10:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c14:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c18:	fb06 7711 	mls	r7, r6, r1, r7
 8000c1c:	fb01 f004 	mul.w	r0, r1, r4
 8000c20:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c28:	eb1e 0202 	adds.w	r2, lr, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x60>
 8000c32:	4290      	cmp	r0, r2
 8000c34:	f200 812d 	bhi.w	8000e92 <__udivmoddi4+0x2ba>
 8000c38:	4639      	mov	r1, r7
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	fa1f fc8c 	uxth.w	ip, ip
 8000c40:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c44:	fb06 2210 	mls	r2, r6, r0, r2
 8000c48:	fb00 f404 	mul.w	r4, r0, r4
 8000c4c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c50:	4564      	cmp	r4, ip
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c54:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5c:	d202      	bcs.n	8000c64 <__udivmoddi4+0x8c>
 8000c5e:	4564      	cmp	r4, ip
 8000c60:	f200 811a 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000c64:	4610      	mov	r0, r2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	ebac 0c04 	sub.w	ip, ip, r4
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b125      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c72:	fa2c f303 	lsr.w	r3, ip, r3
 8000c76:	2200      	movs	r2, #0
 8000c78:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d905      	bls.n	8000c90 <__udivmoddi4+0xb8>
 8000c84:	b10d      	cbz	r5, 8000c8a <__udivmoddi4+0xb2>
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	e7f5      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d14d      	bne.n	8000d34 <__udivmoddi4+0x15c>
 8000c98:	42a3      	cmp	r3, r4
 8000c9a:	f0c0 80f2 	bcc.w	8000e82 <__udivmoddi4+0x2aa>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f080 80ef 	bcs.w	8000e82 <__udivmoddi4+0x2aa>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	4608      	mov	r0, r1
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e6      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cae:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb2:	e7e3      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 80a2 	bne.w	8000dfe <__udivmoddi4+0x226>
 8000cba:	1a8a      	subs	r2, r1, r2
 8000cbc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cc0:	fa1f f68e 	uxth.w	r6, lr
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cca:	fb07 2014 	mls	r0, r7, r4, r2
 8000cce:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb06 f004 	mul.w	r0, r6, r4
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d90f      	bls.n	8000cfe <__udivmoddi4+0x126>
 8000cde:	eb1e 0202 	adds.w	r2, lr, r2
 8000ce2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000ce6:	bf2c      	ite	cs
 8000ce8:	f04f 0901 	movcs.w	r9, #1
 8000cec:	f04f 0900 	movcc.w	r9, #0
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d903      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cf4:	f1b9 0f00 	cmp.w	r9, #0
 8000cf8:	f000 80c8 	beq.w	8000e8c <__udivmoddi4+0x2b4>
 8000cfc:	4644      	mov	r4, r8
 8000cfe:	1a12      	subs	r2, r2, r0
 8000d00:	fa1f fc8c 	uxth.w	ip, ip
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	fb00 f606 	mul.w	r6, r0, r6
 8000d10:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d14:	4566      	cmp	r6, ip
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x152>
 8000d18:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x150>
 8000d22:	4566      	cmp	r6, ip
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	ebac 0c06 	sub.w	ip, ip, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	e79d      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d46:	40f4      	lsrs	r4, r6
 8000d48:	408a      	lsls	r2, r1
 8000d4a:	431f      	orrs	r7, r3
 8000d4c:	ea4e 030c 	orr.w	r3, lr, ip
 8000d50:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d54:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d64:	fb08 4410 	mls	r4, r8, r0, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb00 f90c 	mul.w	r9, r0, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	d90e      	bls.n	8000d92 <__udivmoddi4+0x1ba>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	bf2c      	ite	cs
 8000d7c:	f04f 0b01 	movcs.w	fp, #1
 8000d80:	f04f 0b00 	movcc.w	fp, #0
 8000d84:	45a1      	cmp	r9, r4
 8000d86:	d903      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d88:	f1bb 0f00 	cmp.w	fp, #0
 8000d8c:	f000 8093 	beq.w	8000eb6 <__udivmoddi4+0x2de>
 8000d90:	4650      	mov	r0, sl
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d9e:	fb08 4413 	mls	r4, r8, r3, r4
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d906      	bls.n	8000dbc <__udivmoddi4+0x1e4>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 38ff 	add.w	r8, r3, #4294967295
 8000db4:	d201      	bcs.n	8000dba <__udivmoddi4+0x1e2>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d87a      	bhi.n	8000eb0 <__udivmoddi4+0x2d8>
 8000dba:	4643      	mov	r3, r8
 8000dbc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc0:	eba4 040c 	sub.w	r4, r4, ip
 8000dc4:	fba0 9802 	umull	r9, r8, r0, r2
 8000dc8:	4544      	cmp	r4, r8
 8000dca:	46cc      	mov	ip, r9
 8000dcc:	4643      	mov	r3, r8
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0x1fe>
 8000dd0:	d106      	bne.n	8000de0 <__udivmoddi4+0x208>
 8000dd2:	45ce      	cmp	lr, r9
 8000dd4:	d204      	bcs.n	8000de0 <__udivmoddi4+0x208>
 8000dd6:	3801      	subs	r0, #1
 8000dd8:	ebb9 0c02 	subs.w	ip, r9, r2
 8000ddc:	eb68 0307 	sbc.w	r3, r8, r7
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x222>
 8000de2:	ebbe 020c 	subs.w	r2, lr, ip
 8000de6:	eb64 0403 	sbc.w	r4, r4, r3
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	fa22 f301 	lsr.w	r3, r2, r1
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	431e      	orrs	r6, r3
 8000df6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	e73e      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000dfe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e02:	f1c3 0120 	rsb	r1, r3, #32
 8000e06:	fa04 f203 	lsl.w	r2, r4, r3
 8000e0a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e0e:	40cc      	lsrs	r4, r1
 8000e10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e14:	fa20 f101 	lsr.w	r1, r0, r1
 8000e18:	fa1f f68e 	uxth.w	r6, lr
 8000e1c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fb07 4410 	mls	r4, r7, r0, r4
 8000e26:	0c11      	lsrs	r1, r2, #16
 8000e28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e2c:	fb00 f406 	mul.w	r4, r0, r6
 8000e30:	428c      	cmp	r4, r1
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x27a>
 8000e34:	eb1e 0101 	adds.w	r1, lr, r1
 8000e38:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3c:	bf2c      	ite	cs
 8000e3e:	f04f 0901 	movcs.w	r9, #1
 8000e42:	f04f 0900 	movcc.w	r9, #0
 8000e46:	428c      	cmp	r4, r1
 8000e48:	d902      	bls.n	8000e50 <__udivmoddi4+0x278>
 8000e4a:	f1b9 0f00 	cmp.w	r9, #0
 8000e4e:	d02c      	beq.n	8000eaa <__udivmoddi4+0x2d2>
 8000e50:	4640      	mov	r0, r8
 8000e52:	1b09      	subs	r1, r1, r4
 8000e54:	b292      	uxth	r2, r2
 8000e56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x2a2>
 8000e6a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e6e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e72:	d201      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d815      	bhi.n	8000ea4 <__udivmoddi4+0x2cc>
 8000e78:	4644      	mov	r4, r8
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e80:	e721      	b.n	8000cc6 <__udivmoddi4+0xee>
 8000e82:	1a86      	subs	r6, r0, r2
 8000e84:	eb64 0303 	sbc.w	r3, r4, r3
 8000e88:	2001      	movs	r0, #1
 8000e8a:	e70e      	b.n	8000caa <__udivmoddi4+0xd2>
 8000e8c:	3c02      	subs	r4, #2
 8000e8e:	4472      	add	r2, lr
 8000e90:	e735      	b.n	8000cfe <__udivmoddi4+0x126>
 8000e92:	3902      	subs	r1, #2
 8000e94:	4472      	add	r2, lr
 8000e96:	e6d0      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e98:	44f4      	add	ip, lr
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	e6e3      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e9e:	44f4      	add	ip, lr
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x152>
 8000ea4:	3c02      	subs	r4, #2
 8000ea6:	4472      	add	r2, lr
 8000ea8:	e7e7      	b.n	8000e7a <__udivmoddi4+0x2a2>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	4471      	add	r1, lr
 8000eae:	e7d0      	b.n	8000e52 <__udivmoddi4+0x27a>
 8000eb0:	3b02      	subs	r3, #2
 8000eb2:	443c      	add	r4, r7
 8000eb4:	e782      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	e76a      	b.n	8000d92 <__udivmoddi4+0x1ba>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <write_pin>:
void uart_interrupt_routine();
#endif

// Write specified pin on specified port either high (1) or low (0).
static inline void write_pin(GPIO_TypeDef * gpio_port, uint32_t gpio_pin, int level)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
#ifdef USE_HAL
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f004 fe30 	bl	8005b3c <HAL_GPIO_WritePin>
#else
	level ? LL_GPIO_SetOutputPin(gpio_port, gpio_pin) : LL_GPIO_ResetOutputPin(gpio_port, gpio_pin);
#endif
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <wait_ms>:
 * helpful for repeated function calls within interrupt routine.
 */

// Wait for 'duration' ms. Recommended to never call from within an interrupt function.
static inline void wait_ms(int duration)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	HAL_Delay(duration);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 fb50 	bl	8004594 <HAL_Delay>
#else
	SysTick_Config(SystemCoreClock/1000); // Set up SysTick so that getSysTick() returns ms since program started.
	while (get_SysTick() < duration) {}
#endif
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <enable_interrupt_timer>:

// Enable/disable timer interrupts.
static inline void enable_interrupt_timer(int enable)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <enable_interrupt_timer+0x16>
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <enable_interrupt_timer+0x24>)
 8000f0c:	f00a fa16 	bl	800b33c <HAL_TIM_Base_Start_IT>
	} else {
		LL_TIM_DisableCounter(INTERRUPT_TIM);
		LL_TIM_DisableIT_UPDATE(INTERRUPT_TIM);
	}
#endif
}
 8000f10:	e002      	b.n	8000f18 <enable_interrupt_timer+0x1c>
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000f12:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <enable_interrupt_timer+0x24>)
 8000f14:	f00a fab2 	bl	800b47c <HAL_TIM_Base_Stop_IT>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200002f0 	.word	0x200002f0

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0ec      	sub	sp, #432	@ 0x1b0
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2a:	f003 fa6d 	bl	8004408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2e:	f000 f891 	bl	8001054 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000f32:	f000 f8ed 	bl	8001110 <SystemPower_Config>
  // reset, for example pushing the RESET button on a NUCLEO board, or when downloading/running using
  // STM32CubeProgrammer. For these cases, this delay can be removed.
  // When this bug does occur, we recommend including a delay of ~500 ms so that this brief running of the previously
  // loaded program doesn't have any interaction with any peripherals and this re-run program does nothing important.
  // In practice, 50 ms is likely enough of a pause from our testing, but 500 ms is even safer.
  wait_ms(500);
 8000f36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f3a:	f7ff ffd3 	bl	8000ee4 <wait_ms>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fb7f 	bl	8001640 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000f42:	f000 f8f5 	bl	8001130 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 8000f46:	f000 f923 	bl	8001190 <MX_ICACHE_Init>
  MX_SPI3_Init();
 8000f4a:	f000 f99f 	bl	800128c <MX_SPI3_Init>
  MX_TIM3_Init();
 8000f4e:	f000 facf 	bl	80014f0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000f52:	f000 fb25 	bl	80015a0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000f56:	f000 f92f 	bl	80011b8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f5a:	f000 fa07 	bl	800136c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Write register value to pause all used timers when execution pauses during debug
  SET_BIT(DBGMCU->APB1FZR1, 0b10); // enable pausing TIM3 during debug
 8000f5e:	4b37      	ldr	r3, [pc, #220]	@ (800103c <main+0x118>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	4a36      	ldr	r2, [pc, #216]	@ (800103c <main+0x118>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6093      	str	r3, [r2, #8]
  SET_BIT(DBGMCU->APB1FZR1, 0b1); // enable pausing TIM2 during debug
 8000f6a:	4b34      	ldr	r3, [pc, #208]	@ (800103c <main+0x118>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	4a33      	ldr	r2, [pc, #204]	@ (800103c <main+0x118>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6093      	str	r3, [r2, #8]
  SET_BIT(DBGMCU->APB2FZR, 0b100000000000); // enable pausing TIM1 during debug
 8000f76:	4b31      	ldr	r3, [pc, #196]	@ (800103c <main+0x118>)
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	4a30      	ldr	r2, [pc, #192]	@ (800103c <main+0x118>)
 8000f7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f80:	6113      	str	r3, [r2, #16]

  uint32_t total_samples_in_memory = NUM_SAMPLED_CHANNELS * 2 * calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 8000f82:	f000 fe5f 	bl	8001c44 <calculate_sample_rate>
 8000f86:	ec51 0b10 	vmov	r0, r1, d0
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001040 <main+0x11c>)
 8000f90:	f7ff fb3a 	bl	8000608 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fde4 	bl	8000b68 <__aeabi_d2uiz>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  sample_memory = (uint16_t *)malloc(total_samples_in_memory * sizeof(uint16_t));
 8000fa6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4618      	mov	r0, r3
 8000fae:	f00d fb79 	bl	800e6a4 <malloc>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <main+0x120>)
 8000fb8:	601a      	str	r2, [r3, #0]

  // Set up SPI DMA configuration for when SPI transfers begin.
  initialize_spi_with_dma();
 8000fba:	f000 fcf5 	bl	80019a8 <initialize_spi_with_dma>

  // Set up timers used to generate 32-bit SCLK used to read DDR MISO to trigger once TRANSMIT_SPI CS goes low.
  initialize_ddr_sclk_timers();
 8000fbe:	f000 fd01 	bl	80019c4 <initialize_ddr_sclk_timers>

  // Initialize Intan chip registers with suitable settings for this application.
  // This not only determines the initial registers, but actually writes them via SPI.
  RHDConfigParameters parameters;
  configure_registers(&parameters);
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f003 f9a5 	bl	8004314 <configure_registers>

  // Populate first CONVERT_COMMANDS_PER_SEQUENCE that will repeatedly
  // convert for each sample interrupt.
  // Note that AUX_COMMANDS_PER_SEQUENCE remain unpopulated in command_sequence_MOSI after this.
  configure_convert_commands();
 8000fca:	f003 f9ae 	bl	800432a <configure_convert_commands>

  // Populate the AUX_COMMANDS_PER_SEQUENCE command lists (default 3) with auxiliary commands.
  configure_aux_commands(&parameters);
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 f9b1 	bl	8004338 <configure_aux_commands>

  // Turn on LED to indicate acquisition is about to start.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2180      	movs	r1, #128	@ 0x80
 8000fda:	481b      	ldr	r0, [pc, #108]	@ (8001048 <main+0x124>)
 8000fdc:	f7ff ff70 	bl	8000ec0 <write_pin>

  // Start timer so that at every period defined by INTERRUPT_TIM, an interrupt occurs, starting an SPI command sequence.
  sample_counter = 0;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <main+0x128>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	801a      	strh	r2, [r3, #0]
  enable_interrupt_timer(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f7ff ff88 	bl	8000efc <enable_interrupt_timer>
  main_loop_active = 1;
 8000fec:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <main+0x12c>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]

  // Keep looping, doing nothing (other than handling interrupts) until enough data has been gathered
  while (1) {

	  // Break infinite loop when loop_escape() condition have been met.
	  if (loop_escape()) break;
 8000ff2:	f003 f8b9 	bl	8004168 <loop_escape>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d106      	bne.n	800100a <main+0xe6>

	  // During infinite loop, write this pin High to indicate this main loop is currently processing.
	  write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001002:	4811      	ldr	r0, [pc, #68]	@ (8001048 <main+0x124>)
 8001004:	f7ff ff5c 	bl	8000ec0 <write_pin>
	  if (loop_escape()) break;
 8001008:	e7f3      	b.n	8000ff2 <main+0xce>
 800100a:	bf00      	nop
    /* USER CODE BEGIN 3 */

  }

  // Disable TIM to stop sample interrupts.
  enable_interrupt_timer(0);
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff ff75 	bl	8000efc <enable_interrupt_timer>
  main_loop_active = 0;
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <main+0x12c>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]

  // Disable 32-bit SCLK timers.
  end_ddr_sclk_timers();
 8001018:	f000 fcde 	bl	80019d8 <end_ddr_sclk_timers>

  // Disable SPI DMA.
  end_spi_with_dma();
 800101c:	f000 fccb 	bl	80019b6 <end_spi_with_dma>

  // Transmit accumulated data.
  transmit_data_offline();
 8001020:	f003 f904 	bl	800422c <transmit_data_offline>

  free(sample_memory);
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <main+0x120>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f00d fb43 	bl	800e6b4 <free>

  // Indicate acquisition and data transfer have completed.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2180      	movs	r1, #128	@ 0x80
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <main+0x124>)
 8001034:	f7ff ff44 	bl	8000ec0 <write_pin>

  // Infinite loop for remainder of program life.
  while (1);
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <main+0x114>
 800103c:	e0044000 	.word	0xe0044000
 8001040:	40200000 	.word	0x40200000
 8001044:	20000520 	.word	0x20000520
 8001048:	42020800 	.word	0x42020800
 800104c:	2000051c 	.word	0x2000051c
 8001050:	20000825 	.word	0x20000825

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09e      	sub	sp, #120	@ 0x78
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	2260      	movs	r2, #96	@ 0x60
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f00d fbdc 	bl	800e820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]
 8001076:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8001078:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800107c:	f004 fda6 	bl	8005bcc <HAL_PWREx_ControlVoltageScaling>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001086:	f000 fc29 	bl	80018dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001092:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001094:	2302      	movs	r3, #2
 8001096:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001098:	2303      	movs	r3, #3
 800109a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 12;
 80010a4:	230c      	movs	r3, #12
 80010a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 80010a8:	2308      	movs	r3, #8
 80010aa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80010b4:	230c      	movs	r3, #12
 80010b6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 fe7f 	bl	8005dc4 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80010cc:	f000 fc06 	bl	80018dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	231f      	movs	r3, #31
 80010d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2303      	movs	r3, #3
 80010d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	2103      	movs	r1, #3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f005 fd45 	bl	8006b7c <HAL_RCC_ClockConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80010f8:	f000 fbf0 	bl	80018dc <Error_Handler>
  }

  /** MCO configuration
  */
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001102:	2000      	movs	r0, #0
 8001104:	f005 ff2c 	bl	8006f60 <HAL_RCC_MCOConfig>
}
 8001108:	bf00      	nop
 800110a:	3778      	adds	r7, #120	@ 0x78
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001114:	f004 fe36 	bl	8005d84 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001118:	f004 fe44 	bl	8005da4 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800111c:	2002      	movs	r0, #2
 800111e:	f004 fde1 	bl	8005ce4 <HAL_PWREx_ConfigSupply>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8001128:	f000 fbd8 	bl	80018dc <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <MX_GPDMA1_Init+0x5c>)
 8001138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113c:	4a13      	ldr	r2, [pc, #76]	@ (800118c <MX_GPDMA1_Init+0x5c>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MX_GPDMA1_Init+0x5c>)
 8001148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	201d      	movs	r0, #29
 800115a:	f003 faf7 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800115e:	201d      	movs	r0, #29
 8001160:	f003 fb0e 	bl	8004780 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2054      	movs	r0, #84	@ 0x54
 800116a:	f003 faef 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 800116e:	2054      	movs	r0, #84	@ 0x54
 8001170:	f003 fb06 	bl	8004780 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2055      	movs	r0, #85	@ 0x55
 800117a:	f003 fae7 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 800117e:	2055      	movs	r0, #85	@ 0x55
 8001180:	f003 fafe 	bl	8004780 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	46020c00 	.word	0x46020c00

08001190 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001194:	2000      	movs	r0, #0
 8001196:	f004 fce9 	bl	8005b6c <HAL_ICACHE_ConfigAssociativityMode>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80011a0:	f000 fb9c 	bl	80018dc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80011a4:	f004 fd02 	bl	8005bac <HAL_ICACHE_Enable>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80011ae:	f000 fb95 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001284 <MX_SPI1_Init+0xcc>)
 80011ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001288 <MX_SPI1_Init+0xd0>)
 80011cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80011ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <MX_SPI1_Init+0xcc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80011d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001284 <MX_SPI1_Init+0xcc>)
 80011d6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 80011dc:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <MX_SPI1_Init+0xcc>)
 80011de:	221f      	movs	r2, #31
 80011e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e2:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <MX_SPI1_Init+0xcc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e8:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <MX_SPI1_Init+0xcc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80011ee:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <MX_SPI1_Init+0xcc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f4:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <MX_SPI1_Init+0xcc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fa:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <MX_SPI1_Init+0xcc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <MX_SPI1_Init+0xcc>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <MX_SPI1_Init+0xcc>)
 8001208:	2207      	movs	r2, #7
 800120a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <MX_SPI1_Init+0xcc>)
 800120e:	2200      	movs	r2, #0
 8001210:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <MX_SPI1_Init+0xcc>)
 8001214:	2200      	movs	r2, #0
 8001216:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_SPI1_Init+0xcc>)
 800121a:	2200      	movs	r2, #0
 800121c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <MX_SPI1_Init+0xcc>)
 8001220:	2200      	movs	r2, #0
 8001222:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001224:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_SPI1_Init+0xcc>)
 8001226:	2200      	movs	r2, #0
 8001228:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_SPI1_Init+0xcc>)
 800122c:	2200      	movs	r2, #0
 800122e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001230:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_SPI1_Init+0xcc>)
 8001232:	2200      	movs	r2, #0
 8001234:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <MX_SPI1_Init+0xcc>)
 8001238:	2200      	movs	r2, #0
 800123a:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_SPI1_Init+0xcc>)
 800123e:	2200      	movs	r2, #0
 8001240:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <MX_SPI1_Init+0xcc>)
 8001244:	2200      	movs	r2, #0
 8001246:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001248:	480e      	ldr	r0, [pc, #56]	@ (8001284 <MX_SPI1_Init+0xcc>)
 800124a:	f008 fff7 	bl	800a23c <HAL_SPI_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001254:	f000 fb42 	bl	80018dc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800125c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	@ (8001284 <MX_SPI1_Init+0xcc>)
 800126c:	f009 ffce 	bl	800b20c <HAL_SPIEx_SetConfigAutonomousMode>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_SPI1_Init+0xc2>
  {
    Error_Handler();
 8001276:	f000 fb31 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000094 	.word	0x20000094
 8001288:	40013000 	.word	0x40013000

0800128c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800129c:	4b31      	ldr	r3, [pc, #196]	@ (8001364 <MX_SPI3_Init+0xd8>)
 800129e:	4a32      	ldr	r2, [pc, #200]	@ (8001368 <MX_SPI3_Init+0xdc>)
 80012a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012a2:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80012aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012b0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80012b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012b4:	220f      	movs	r2, #15
 80012b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012be:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012c4:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012c6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012cc:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012d2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d4:	4b23      	ldr	r3, [pc, #140]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012da:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e0:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <MX_SPI3_Init+0xd8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001300:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <MX_SPI3_Init+0xd8>)
 8001302:	2200      	movs	r2, #0
 8001304:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_06CYCLE;
 8001306:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <MX_SPI3_Init+0xd8>)
 8001308:	2260      	movs	r2, #96	@ 0x60
 800130a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800130c:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <MX_SPI3_Init+0xd8>)
 800130e:	2200      	movs	r2, #0
 8001310:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001312:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <MX_SPI3_Init+0xd8>)
 8001314:	2200      	movs	r2, #0
 8001316:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <MX_SPI3_Init+0xd8>)
 800131a:	2200      	movs	r2, #0
 800131c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800131e:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <MX_SPI3_Init+0xd8>)
 8001320:	2200      	movs	r2, #0
 8001322:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <MX_SPI3_Init+0xd8>)
 8001326:	2200      	movs	r2, #0
 8001328:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800132a:	480e      	ldr	r0, [pc, #56]	@ (8001364 <MX_SPI3_Init+0xd8>)
 800132c:	f008 ff86 	bl	800a23c <HAL_SPI_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_SPI3_Init+0xae>
  {
    Error_Handler();
 8001336:	f000 fad1 	bl	80018dc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 800133e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001342:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	@ (8001364 <MX_SPI3_Init+0xd8>)
 800134e:	f009 ff5d 	bl	800b20c <HAL_SPIEx_SetConfigAutonomousMode>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_SPI3_Init+0xd0>
  {
    Error_Handler();
 8001358:	f000 fac0 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000124 	.word	0x20000124
 8001368:	46002000 	.word	0x46002000

0800136c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b09c      	sub	sp, #112	@ 0x70
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001372:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001382:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a2:	463b      	mov	r3, r7
 80013a4:	2234      	movs	r2, #52	@ 0x34
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00d fa39 	bl	800e820 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ae:	4b4e      	ldr	r3, [pc, #312]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 80013b0:	4a4e      	ldr	r2, [pc, #312]	@ (80014ec <MX_TIM1_Init+0x180>)
 80013b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013b4:	4b4c      	ldr	r3, [pc, #304]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b4b      	ldr	r3, [pc, #300]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 80013c0:	4b49      	ldr	r3, [pc, #292]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b48      	ldr	r3, [pc, #288]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 31;
 80013cc:	4b46      	ldr	r3, [pc, #280]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 80013ce:	221f      	movs	r2, #31
 80013d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d2:	4b45      	ldr	r3, [pc, #276]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 80013d4:	2280      	movs	r2, #128	@ 0x80
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d8:	4843      	ldr	r0, [pc, #268]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 80013da:	f009 ff58 	bl	800b28e <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013e4:	f000 fa7a 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013e8:	483f      	ldr	r0, [pc, #252]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 80013ea:	f00a fad7 	bl	800b99c <HAL_TIM_PWM_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80013f4:	f000 fa72 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80013f8:	2108      	movs	r1, #8
 80013fa:	483b      	ldr	r0, [pc, #236]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 80013fc:	f00a fb2f 	bl	800ba5e <HAL_TIM_OnePulse_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001406:	f000 fa69 	bl	80018dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800140a:	2306      	movs	r3, #6
 800140c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800140e:	2370      	movs	r3, #112	@ 0x70
 8001410:	663b      	str	r3, [r7, #96]	@ 0x60
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8001412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001416:	667b      	str	r3, [r7, #100]	@ 0x64
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	66bb      	str	r3, [r7, #104]	@ 0x68
  sSlaveConfig.TriggerFilter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001420:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001424:	4619      	mov	r1, r3
 8001426:	4830      	ldr	r0, [pc, #192]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 8001428:	f00a fe50 	bl	800c0cc <HAL_TIM_SlaveConfigSynchro>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001432:	f000 fa53 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001442:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001446:	4619      	mov	r1, r3
 8001448:	4827      	ldr	r0, [pc, #156]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 800144a:	f00b fcf5 	bl	800ce38 <HAL_TIMEx_MasterConfigSynchronization>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001454:	f000 fa42 	bl	80018dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001458:	2370      	movs	r3, #112	@ 0x70
 800145a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1;
 800145c:	2301      	movs	r3, #1
 800145e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001460:	2300      	movs	r3, #0
 8001462:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001464:	2300      	movs	r3, #0
 8001466:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001474:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001478:	2200      	movs	r2, #0
 800147a:	4619      	mov	r1, r3
 800147c:	481a      	ldr	r0, [pc, #104]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 800147e:	f00a fd11 	bl	800bea4 <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001488:	f000 fa28 	bl	80018dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	4619      	mov	r1, r3
 80014c8:	4807      	ldr	r0, [pc, #28]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 80014ca:	f00b fd77 	bl	800cfbc <HAL_TIMEx_ConfigBreakDeadTime>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 80014d4:	f000 fa02 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014d8:	4803      	ldr	r0, [pc, #12]	@ (80014e8 <MX_TIM1_Init+0x17c>)
 80014da:	f002 fc3f 	bl	8003d5c <HAL_TIM_MspPostInit>

}
 80014de:	bf00      	nop
 80014e0:	3770      	adds	r7, #112	@ 0x70
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200002a4 	.word	0x200002a4
 80014ec:	40012c00 	.word	0x40012c00

080014f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001502:	463b      	mov	r3, r7
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001514:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <MX_TIM3_Init+0xa8>)
 8001516:	4a21      	ldr	r2, [pc, #132]	@ (800159c <MX_TIM3_Init+0xac>)
 8001518:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800151a:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <MX_TIM3_Init+0xa8>)
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <MX_TIM3_Init+0xa8>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000;
 8001526:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <MX_TIM3_Init+0xa8>)
 8001528:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800152c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <MX_TIM3_Init+0xa8>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001534:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <MX_TIM3_Init+0xa8>)
 8001536:	2280      	movs	r2, #128	@ 0x80
 8001538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800153a:	4817      	ldr	r0, [pc, #92]	@ (8001598 <MX_TIM3_Init+0xa8>)
 800153c:	f009 ffcd 	bl	800b4da <HAL_TIM_OC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001546:	f000 f9c9 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	480f      	ldr	r0, [pc, #60]	@ (8001598 <MX_TIM3_Init+0xa8>)
 800155a:	f00b fc6d 	bl	800ce38 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001564:	f000 f9ba 	bl	80018dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	@ (8001598 <MX_TIM3_Init+0xa8>)
 8001580:	f00a fc16 	bl	800bdb0 <HAL_TIM_OC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800158a:	f000 f9a7 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	@ 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200002f0 	.word	0x200002f0
 800159c:	40000400 	.word	0x40000400

080015a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a4:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015a6:	4a24      	ldr	r2, [pc, #144]	@ (8001638 <MX_USART1_UART_Init+0x98>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 12000000;
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015ac:	4a23      	ldr	r2, [pc, #140]	@ (800163c <MX_USART1_UART_Init+0x9c>)
 80015ae:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015b0:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015c4:	2208      	movs	r2, #8
 80015c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80015d6:	4b17      	ldr	r3, [pc, #92]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015dc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ea:	4812      	ldr	r0, [pc, #72]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015ec:	f00b fe18 	bl	800d220 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80015f6:	f000 f971 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015fa:	2100      	movs	r1, #0
 80015fc:	480d      	ldr	r0, [pc, #52]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 80015fe:	f00c ff87 	bl	800e510 <HAL_UARTEx_SetTxFifoThreshold>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001608:	f000 f968 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160c:	2100      	movs	r1, #0
 800160e:	4809      	ldr	r0, [pc, #36]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 8001610:	f00c ffbc 	bl	800e58c <HAL_UARTEx_SetRxFifoThreshold>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800161a:	f000 f95f 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <MX_USART1_UART_Init+0x94>)
 8001620:	f00c ff3d 	bl	800e49e <HAL_UARTEx_DisableFifoMode>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800162a:	f000 f957 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000033c 	.word	0x2000033c
 8001638:	40013800 	.word	0x40013800
 800163c:	00b71b00 	.word	0x00b71b00

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	@ 0x30
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	4b9a      	ldr	r3, [pc, #616]	@ (80018c0 <MX_GPIO_Init+0x280>)
 8001658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800165c:	4a98      	ldr	r2, [pc, #608]	@ (80018c0 <MX_GPIO_Init+0x280>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001666:	4b96      	ldr	r3, [pc, #600]	@ (80018c0 <MX_GPIO_Init+0x280>)
 8001668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001674:	4b92      	ldr	r3, [pc, #584]	@ (80018c0 <MX_GPIO_Init+0x280>)
 8001676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800167a:	4a91      	ldr	r2, [pc, #580]	@ (80018c0 <MX_GPIO_Init+0x280>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001680:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001684:	4b8e      	ldr	r3, [pc, #568]	@ (80018c0 <MX_GPIO_Init+0x280>)
 8001686:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800168a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b8b      	ldr	r3, [pc, #556]	@ (80018c0 <MX_GPIO_Init+0x280>)
 8001694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001698:	4a89      	ldr	r2, [pc, #548]	@ (80018c0 <MX_GPIO_Init+0x280>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016a2:	4b87      	ldr	r3, [pc, #540]	@ (80018c0 <MX_GPIO_Init+0x280>)
 80016a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b83      	ldr	r3, [pc, #524]	@ (80018c0 <MX_GPIO_Init+0x280>)
 80016b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016b6:	4a82      	ldr	r2, [pc, #520]	@ (80018c0 <MX_GPIO_Init+0x280>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016c0:	4b7f      	ldr	r3, [pc, #508]	@ (80018c0 <MX_GPIO_Init+0x280>)
 80016c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	4b7c      	ldr	r3, [pc, #496]	@ (80018c0 <MX_GPIO_Init+0x280>)
 80016d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016d4:	4a7a      	ldr	r2, [pc, #488]	@ (80018c0 <MX_GPIO_Init+0x280>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016de:	4b78      	ldr	r3, [pc, #480]	@ (80018c0 <MX_GPIO_Init+0x280>)
 80016e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ec:	4b74      	ldr	r3, [pc, #464]	@ (80018c0 <MX_GPIO_Init+0x280>)
 80016ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f2:	4a73      	ldr	r2, [pc, #460]	@ (80018c0 <MX_GPIO_Init+0x280>)
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016fc:	4b70      	ldr	r3, [pc, #448]	@ (80018c0 <MX_GPIO_Init+0x280>)
 80016fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800170a:	4b6d      	ldr	r3, [pc, #436]	@ (80018c0 <MX_GPIO_Init+0x280>)
 800170c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001710:	4a6b      	ldr	r2, [pc, #428]	@ (80018c0 <MX_GPIO_Init+0x280>)
 8001712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001716:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800171a:	4b69      	ldr	r3, [pc, #420]	@ (80018c0 <MX_GPIO_Init+0x280>)
 800171c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_BUTTON_Pin|LED_GREEN_Pin|Main_Monitor_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 5106 	mov.w	r1, #8576	@ 0x2180
 800172e:	4865      	ldr	r0, [pc, #404]	@ (80018c4 <MX_GPIO_Init+0x284>)
 8001730:	f004 fa04 	bl	8005b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800173a:	4863      	ldr	r0, [pc, #396]	@ (80018c8 <MX_GPIO_Init+0x288>)
 800173c:	f004 f9fe 	bl	8005b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_RED_Pin|ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 8001746:	4861      	ldr	r0, [pc, #388]	@ (80018cc <MX_GPIO_Init+0x28c>)
 8001748:	f004 f9f8 	bl	8005b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	21a0      	movs	r1, #160	@ 0xa0
 8001750:	485f      	ldr	r0, [pc, #380]	@ (80018d0 <MX_GPIO_Init+0x290>)
 8001752:	f004 f9f3 	bl	8005b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ErrorCode_Bit_3_GPIO_Port, ErrorCode_Bit_3_Pin, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	2101      	movs	r1, #1
 800175a:	485e      	ldr	r0, [pc, #376]	@ (80018d4 <MX_GPIO_Init+0x294>)
 800175c:	f004 f9ee 	bl	8005b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_BUTTON_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|LED_GREEN_Pin;
 8001760:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4619      	mov	r1, r3
 8001778:	4852      	ldr	r0, [pc, #328]	@ (80018c4 <MX_GPIO_Init+0x284>)
 800177a:	f004 f807 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800177e:	2304      	movs	r3, #4
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001782:	2303      	movs	r3, #3
 8001784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	484c      	ldr	r0, [pc, #304]	@ (80018c4 <MX_GPIO_Init+0x284>)
 8001792:	f003 fffb 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001796:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800179a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4849      	ldr	r0, [pc, #292]	@ (80018d0 <MX_GPIO_Init+0x290>)
 80017ac:	f003 ffee 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b6:	2303      	movs	r3, #3
 80017b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	4842      	ldr	r0, [pc, #264]	@ (80018d0 <MX_GPIO_Init+0x290>)
 80017c6:	f003 ffe1 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Monitor_Pin */
  GPIO_InitStruct.Pin = Interrupt_Monitor_Pin;
 80017ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Interrupt_Monitor_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4839      	ldr	r0, [pc, #228]	@ (80018c8 <MX_GPIO_Init+0x288>)
 80017e4:	f003 ffd2 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin ErrorCode_Bit_1_Pin ErrorCode_Bit_0_Pin ErrorCode_Bit_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin;
 80017e8:	f44f 73b2 	mov.w	r3, #356	@ 0x164
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	4832      	ldr	r0, [pc, #200]	@ (80018cc <MX_GPIO_Init+0x28c>)
 8001802:	f003 ffc3 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pin : Main_Monitor_Pin */
  GPIO_InitStruct.Pin = Main_Monitor_Pin;
 8001806:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Main_Monitor_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	4829      	ldr	r0, [pc, #164]	@ (80018c4 <MX_GPIO_Init+0x284>)
 8001820:	f003 ffb4 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001824:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	2302      	movs	r3, #2
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4825      	ldr	r0, [pc, #148]	@ (80018d8 <MX_GPIO_Init+0x298>)
 8001842:	f003 ffa3 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001846:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800184a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	481e      	ldr	r0, [pc, #120]	@ (80018d8 <MX_GPIO_Init+0x298>)
 8001860:	f003 ff94 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001864:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186a:	2303      	movs	r3, #3
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	4817      	ldr	r0, [pc, #92]	@ (80018d8 <MX_GPIO_Init+0x298>)
 800187a:	f003 ff87 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 800187e:	23a0      	movs	r3, #160	@ 0xa0
 8001880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	4619      	mov	r1, r3
 8001894:	480e      	ldr	r0, [pc, #56]	@ (80018d0 <MX_GPIO_Init+0x290>)
 8001896:	f003 ff79 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pin : ErrorCode_Bit_3_Pin */
  GPIO_InitStruct.Pin = ErrorCode_Bit_3_Pin;
 800189a:	2301      	movs	r3, #1
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ErrorCode_Bit_3_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	4808      	ldr	r0, [pc, #32]	@ (80018d4 <MX_GPIO_Init+0x294>)
 80018b2:	f003 ff6b 	bl	800578c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b6:	bf00      	nop
 80018b8:	3730      	adds	r7, #48	@ 0x30
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	46020c00 	.word	0x46020c00
 80018c4:	42020800 	.word	0x42020800
 80018c8:	42020c00 	.word	0x42020c00
 80018cc:	42021800 	.word	0x42021800
 80018d0:	42020400 	.word	0x42020400
 80018d4:	42021000 	.word	0x42021000
 80018d8:	42020000 	.word	0x42020000

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e0:	b672      	cpsid	i
}
 80018e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <Error_Handler+0x8>

080018e8 <write_pin>:
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f004 f91c 	bl	8005b3c <HAL_GPIO_WritePin>
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <sample_interrupt_routine>:
// Due to use of DMA in this example (which is very efficient for large data transfers), processing is not
// the likely bottleneck, but rather the rate of SPI communication itself. Shorter SPI command sequences
// (default is 32 CONVERT commands + 3 AUX commands) and/or faster Baud rate will allow SPI communication to
// finish faster.
void sample_interrupt_routine()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	// Check if condition specified in loop_escape (e.g. target number of samples have been acquired) is true.
	// If so, keep from continuing interrupt execution and return to main loop so it can be escaped.
	if (loop_escape()) return;
 8001910:	f002 fc2a 	bl	8004168 <loop_escape>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d11e      	bne.n	8001958 <sample_interrupt_routine+0x4c>

	// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
	// Main loop will write Main_Monitor_Pin when processing returns to main, so the duty cycle of this pin
	// can be measured to estimate what percentage of clock cycles are available for main processing.
	write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001920:	480e      	ldr	r0, [pc, #56]	@ (800195c <sample_interrupt_routine+0x50>)
 8001922:	f7ff ffe1 	bl	80018e8 <write_pin>

	// If previous DMA transfer has not completed, SPI communication from previous sample has not finished.
	// This is a critical error that will halt execution. To avoid this, all processing from previous interrupt
	// must conclude sooner (most likely, this would be waiting on SPI transfer completion, in which case
	// fewer channels can be included in the command sequence, or the SPI communication itself must be sped up).
	if (command_transfer_state == TRANSFER_WAIT) {
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <sample_interrupt_routine+0x54>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <sample_interrupt_routine+0x28>
		handle_comm_error(ITClip);
 800192e:	2005      	movs	r0, #5
 8001930:	f000 f85c 	bl	80019ec <handle_comm_error>

	// Indicate start of timer interrupt by writing Interrupt_Monitor_Pin High.
	// At the end of this function, Interrupt_Monitor_Pin will be written Low (though, keep in mind that
	// this only indicates that the DMA transfer has been initiated - DMA will continue running either until
	// its SPI command sequence concludes, or the next interrupt occurs, causing an ITClip error).
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 1);
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800193a:	480a      	ldr	r0, [pc, #40]	@ (8001964 <sample_interrupt_routine+0x58>)
 800193c:	f7ff ffd4 	bl	80018e8 <write_pin>

	// Update variable indicate to wait until SPI DMA transfer completes.
	command_transfer_state = TRANSFER_WAIT;
 8001940:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <sample_interrupt_routine+0x54>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

	transfer_sequence_spi_dma();
 8001946:	f000 f80f 	bl	8001968 <transfer_sequence_spi_dma>

	// SPI DMA transfer has begun, so write Interrupt_Monitor_Pin Low and exit interrupt function,
	// returning to processing main loop.
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001950:	4804      	ldr	r0, [pc, #16]	@ (8001964 <sample_interrupt_routine+0x58>)
 8001952:	f7ff ffc9 	bl	80018e8 <write_pin>
 8001956:	e000      	b.n	800195a <sample_interrupt_routine+0x4e>
	if (loop_escape()) return;
 8001958:	bf00      	nop
}
 800195a:	bd80      	pop	{r7, pc}
 800195c:	42020800 	.word	0x42020800
 8001960:	20000000 	.word	0x20000000
 8001964:	42020c00 	.word	0x42020c00

08001968 <transfer_sequence_spi_dma>:


// Begin receiving MISO data (RHD -> SPI -> DMA -> memory) and transmitting MOSI data (memory -> DMA -> SPI -> RHD).
void transfer_sequence_spi_dma()
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	// HAL handles all of SPI DMA transfer with this single function call.

	// Note: this HAL function call seems to not be consistent in how long it takes, causing some jitter between Interrupt_Monitor_Pin (GPIO) and SPI signals.
	// However, SPI/DMA signals seem to be consistent with each other, so this shouldn't affect functionality.
	if (HAL_SPI_Receive_DMA(&RECEIVE_SPI, (uint8_t*)command_sequence_MISO,
 800196c:	2223      	movs	r2, #35	@ 0x23
 800196e:	490a      	ldr	r1, [pc, #40]	@ (8001998 <transfer_sequence_spi_dma+0x30>)
 8001970:	480a      	ldr	r0, [pc, #40]	@ (800199c <transfer_sequence_spi_dma+0x34>)
 8001972:	f008 ff2d 	bl	800a7d0 <HAL_SPI_Receive_DMA>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <transfer_sequence_spi_dma+0x18>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) != HAL_OK)
	{
		Error_Handler();
 800197c:	f7ff ffae 	bl	80018dc <Error_Handler>
	}

	if (HAL_SPI_Transmit_DMA(&TRANSMIT_SPI, (uint8_t*)command_sequence_MOSI,
 8001980:	2223      	movs	r2, #35	@ 0x23
 8001982:	4907      	ldr	r1, [pc, #28]	@ (80019a0 <transfer_sequence_spi_dma+0x38>)
 8001984:	4807      	ldr	r0, [pc, #28]	@ (80019a4 <transfer_sequence_spi_dma+0x3c>)
 8001986:	f008 fd6f 	bl	800a468 <HAL_SPI_Transmit_DMA>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <transfer_sequence_spi_dma+0x2c>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) != HAL_OK)
	{
		Error_Handler();
 8001990:	f7ff ffa4 	bl	80018dc <Error_Handler>
	}
#else
	begin_spi_rx(LL_DMA_DEST_INCREMENT, (uint32_t) command_sequence_MISO, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
	begin_spi_tx(LL_DMA_SRC_INCREMENT, (uint32_t) command_sequence_MOSI, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
#endif
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000490 	.word	0x20000490
 800199c:	20000094 	.word	0x20000094
 80019a0:	20000448 	.word	0x20000448
 80019a4:	20000124 	.word	0x20000124

080019a8 <initialize_spi_with_dma>:
// so this function only has an LL implementation.
// Some of these settings (data length, memory location, and memory increment state)
// will be overwritten on a transfer-by-transfer basis, but the general configurations
// like transfer directions, peripheral addresses, and DMAMUX request ID can be permanently set here.
void initialize_spi_with_dma()
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	return;
 80019ac:	bf00      	nop

	// Default to data length of full command sequence - may be overwritten for individual transfers
	LL_DMA_SetBlkDataLength(DMA, DMA_RX_CHANNEL, (CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) * 4);

#endif
}
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <end_spi_with_dma>:

// Write SPI/DMA registers to cleanly disable once DMA transfer ends.
// HAL automatically does this for each Send/Receive with SPI/DMA,
// so this function only has an LL implmentation.
void end_spi_with_dma()
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
#ifdef USE_HAL
#else
	end_spi_rx();
	end_spi_tx();
#endif
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <initialize_ddr_sclk_timers>:


// Start timers used to generate Receive SCLK signal used to read DDR MISO, triggered with delay from Transmit CS.
void initialize_ddr_sclk_timers()
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	HAL_TIM_OC_Start(&RECEIVE_SCLK_TIM, TIM_CHANNEL_1);
 80019c8:	2100      	movs	r1, #0
 80019ca:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <initialize_ddr_sclk_timers+0x10>)
 80019cc:	f009 fddc 	bl	800b588 <HAL_TIM_OC_Start>
	LL_TIM_EnableCounter(RECEIVE_SCLK_TIM);

	LL_TIM_CC_EnableChannel(CS_DELAY_TIM, LL_TIM_CHANNEL_CH3);
	LL_TIM_EnableCounter(CS_DELAY_TIM);
#endif
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200002a4 	.word	0x200002a4

080019d8 <end_ddr_sclk_timers>:


// End timers used to generate Receive SCLK signal used to read DDR MISO, triggered with delay from Transmit CS.
void end_ddr_sclk_timers()
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
#ifdef USE_HAL
  HAL_TIM_OC_Stop(&RECEIVE_SCLK_TIM, TIM_CHANNEL_1);
 80019dc:	2100      	movs	r1, #0
 80019de:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <end_ddr_sclk_timers+0x10>)
 80019e0:	f009 ff24 	bl	800b82c <HAL_TIM_OC_Stop>
  LL_TIM_CC_DisableChannel(RECEIVE_SCLK_TIM, LL_TIM_CHANNEL_CH1);

  LL_TIM_DisableCounter(CS_DELAY_TIM);
  LL_TIM_CC_DisableChannel(CS_DELAY_TIM, LL_TIM_CHANNEL_CH3);
#endif
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200002a4 	.word	0x200002a4

080019ec <handle_comm_error>:
// Handle communication error.
// Write ERROR_DETECTED_PIN (by default, red LED) High.
// Write each bit of a 4-bit error code to a pin so that by measuring pins, user can determine the error code.
// Enter an infinite loop, halting execution and allowing user to measure error pins.
void handle_comm_error(CommErrorStatus error_code)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
	// No error, just return.
	if (error_code == 0) return;
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d03e      	beq.n	8001a7a <handle_comm_error+0x8e>

	// Write ERROR_DETECTED_PIN (by default red LED) to communicate that an error occurred.
	write_pin(ERROR_DETECTED_PORT, ERROR_DETECTED_PIN, 1);
 80019fc:	2201      	movs	r2, #1
 80019fe:	2104      	movs	r1, #4
 8001a00:	4820      	ldr	r0, [pc, #128]	@ (8001a84 <handle_comm_error+0x98>)
 8001a02:	f7ff ff71 	bl	80018e8 <write_pin>

	// Write 4 bits of error code to 4 pins.
	uint8_t error_code_bit_0 = (error_code & 0b0001) >> 0;
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
	uint8_t error_code_bit_1 = (error_code & 0b0010) >> 1;
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	105b      	asrs	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	73bb      	strb	r3, [r7, #14]
	uint8_t error_code_bit_2 = (error_code & 0b0100) >> 2;
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	109b      	asrs	r3, r3, #2
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	737b      	strb	r3, [r7, #13]
	uint8_t error_code_bit_3 = (error_code & 0b1000) >> 3;
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	10db      	asrs	r3, r3, #3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	733b      	strb	r3, [r7, #12]
	if (error_code_bit_0) write_pin(ErrorCode_Bit_0_GPIO_Port, ErrorCode_Bit_0_Pin, 1);
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <handle_comm_error+0x56>
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2140      	movs	r1, #64	@ 0x40
 8001a3c:	4811      	ldr	r0, [pc, #68]	@ (8001a84 <handle_comm_error+0x98>)
 8001a3e:	f7ff ff53 	bl	80018e8 <write_pin>
	if (error_code_bit_1) write_pin(ErrorCode_Bit_1_GPIO_Port, ErrorCode_Bit_1_Pin, 1);
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d004      	beq.n	8001a52 <handle_comm_error+0x66>
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	480d      	ldr	r0, [pc, #52]	@ (8001a84 <handle_comm_error+0x98>)
 8001a4e:	f7ff ff4b 	bl	80018e8 <write_pin>
	if (error_code_bit_2) write_pin(ErrorCode_Bit_2_GPIO_Port, ErrorCode_Bit_2_Pin, 1);
 8001a52:	7b7b      	ldrb	r3, [r7, #13]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <handle_comm_error+0x78>
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a5e:	4809      	ldr	r0, [pc, #36]	@ (8001a84 <handle_comm_error+0x98>)
 8001a60:	f7ff ff42 	bl	80018e8 <write_pin>
	if (error_code_bit_3) write_pin(ErrorCode_Bit_3_GPIO_Port, ErrorCode_Bit_3_Pin, 1);
 8001a64:	7b3b      	ldrb	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <handle_comm_error+0x8a>
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	4806      	ldr	r0, [pc, #24]	@ (8001a88 <handle_comm_error+0x9c>)
 8001a70:	f7ff ff3a 	bl	80018e8 <write_pin>

	// Enter infinite loop.
	while(1);
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	e7fd      	b.n	8001a76 <handle_comm_error+0x8a>
	if (error_code == 0) return;
 8001a7a:	bf00      	nop
}
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	42021800 	.word	0x42021800
 8001a88:	42021000 	.word	0x42021000

08001a8c <spi_rx_cplt_callback>:


// Callback function that executes when Reception of SPI has completed.
void spi_rx_cplt_callback()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	// If main loop is active, drive Main_Monitor_Pin low, write data to memory, transmit data in realtime, and update command_transfer_state
	if (main_loop_active) {
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <spi_rx_cplt_callback+0x34>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00d      	beq.n	8001ab6 <spi_rx_cplt_callback+0x2a>
		// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
		write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aa0:	4808      	ldr	r0, [pc, #32]	@ (8001ac4 <spi_rx_cplt_callback+0x38>)
 8001aa2:	f7ff ff21 	bl	80018e8 <write_pin>

		 // User-specified function - here is where specified channel(s) can be written to memory.
		write_data_to_memory();
 8001aa6:	f002 fb7d 	bl	80041a4 <write_data_to_memory>

		// User-specified function - here is where user can transmit data in real time every sample period.
		transmit_data_realtime();
 8001aaa:	f002 fbb7 	bl	800421c <transmit_data_realtime>

		// Update state variable to show that transfer has completed.
		command_transfer_state = TRANSFER_COMPLETE;
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <spi_rx_cplt_callback+0x3c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
#else
		end_spi_rx();
#endif
		reception_in_progress = 0;
	}
}
 8001ab4:	e002      	b.n	8001abc <spi_rx_cplt_callback+0x30>
		reception_in_progress = 0;
 8001ab6:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <spi_rx_cplt_callback+0x40>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000825 	.word	0x20000825
 8001ac4:	42020800 	.word	0x42020800
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000824 	.word	0x20000824

08001ad0 <morton_deinterleave>:

// Use 'magic bits' de interleave method inspired by Jeroen Baert's blog bost:
// "Morton encoding/decoding through bit interleaving: Implementations" to achieve
// high performance method of separate every other bit from a 32-bit input.
uint16_t morton_deinterleave(uint32_t x)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
    x = x & 0x55555555; // Use mask to clear all even bits
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001ade:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 1)) & 0x33333333; // Shift-right by 1, duplicate, and mask data so that valid data is grouped into 2s (00xx00xx00xx...)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	085a      	lsrs	r2, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8001aec:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 2)) & 0x0F0F0F0F; // Shift-right by 2, duplicate, and mask data so that valid data is grouped into 4s (0000xxxx0000xxxx...)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	089a      	lsrs	r2, r3, #2
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001afa:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 4)) & 0x00FF00FF; // Shift-right by 4, duplicate, and mask data so that valid data is grouped into 8s (00000000xxxxxxxx00000000xxxxxxxx...)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	091a      	lsrs	r2, r3, #4
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8001b08:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 8)) & 0x0000FFFF; // Shift-right by 8, duplicate, and mask data so that 16 MSB data is 0s, 16 LSB data is valid data
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	0a1a      	lsrs	r2, r3, #8
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	607b      	str	r3, [r7, #4]
    return (uint16_t) x; // Cast 32-bit 0000_0000_0000_0000_xxxx_xxxx_xxxx_xxxx data into 16-bit xxxx_xxxx_xxxx_xxxx data
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	b29b      	uxth	r3, r3
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <extract_ddr_words>:


// Separate a 32-bit merged word (interleaved stream A and stream B data) into 2 distinct 16-bit words.
void extract_ddr_words(uint32_t merged_word, volatile uint16_t *word_A, volatile uint16_t *word_B)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
//		*word_B |= bit_B << i;
//	}

	// A much faster, but less obvious method uses 'magic bit' masks to copy, shift, and mask bits in several steps
	// to achieve the same result in fewer operations.
	*word_A = morton_deinterleave(merged_word); // Data stream A is all add
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f7ff ffcc 	bl	8001ad0 <morton_deinterleave>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	801a      	strh	r2, [r3, #0]
	*word_B = morton_deinterleave(merged_word >> 1);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ffc3 	bl	8001ad0 <morton_deinterleave>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	801a      	strh	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <spi_error_callback>:


// Callback function to show that an SPI error occurred.
void spi_error_callback()
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
	command_transfer_state = TRANSFER_ERROR;
 8001b60:	4b03      	ldr	r3, [pc, #12]	@ (8001b70 <spi_error_callback+0x14>)
 8001b62:	2202      	movs	r2, #2
 8001b64:	601a      	str	r2, [r3, #0]
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	20000000 	.word	0x20000000

08001b74 <write_initial_reg_values>:
// Determine suitable values to be written to registers
// (based on default acquisition values from RHX software).
// These suitable default values are saved to RHDConfigParameters argument.
// Write these values to registers, and calibrate and run for 9 commands to fully initialize chip.
void write_initial_reg_values(RHDConfigParameters *p)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b090      	sub	sp, #64	@ 0x40
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	// Determine suitable values to be written for each of the registers.
	p->sample_rate = calculate_sample_rate();
 8001b7c:	f000 f862 	bl	8001c44 <calculate_sample_rate>
 8001b80:	eeb0 7a40 	vmov.f32	s14, s0
 8001b84:	eef0 7a60 	vmov.f32	s15, s1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	ed83 7b00 	vstr	d7, [r3]
	set_default_rhd_settings(p);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f001 faa2 	bl	80030d8 <set_default_rhd_settings>

	uint16_t registers[22];
	for (int i = 0; i < 22; i++) {
 8001b94:	2300      	movs	r3, #0
 8001b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b98:	e00e      	b.n	8001bb8 <write_initial_reg_values+0x44>
		registers[i] = get_register_value(p, i);
 8001b9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f001 fbeb 	bl	8003378 <get_register_value>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	3340      	adds	r3, #64	@ 0x40
 8001bac:	443b      	add	r3, r7
 8001bae:	f823 2c38 	strh.w	r2, [r3, #-56]
	for (int i = 0; i < 22; i++) {
 8001bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bba:	2b15      	cmp	r3, #21
 8001bbc:	dded      	ble.n	8001b9a <write_initial_reg_values+0x26>
	}

	// Send a few dummy commands in case chip is still powering up.
	send_spi_command(read_command(63));
 8001bbe:	203f      	movs	r0, #63	@ 0x3f
 8001bc0:	f001 fe49 	bl	8003856 <read_command>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fa55 	bl	8002076 <send_spi_command>
	send_spi_command(read_command(63));
 8001bcc:	203f      	movs	r0, #63	@ 0x3f
 8001bce:	f001 fe42 	bl	8003856 <read_command>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fa4e 	bl	8002076 <send_spi_command>


	// Write suitable default values for RHD registers.
	for (int i = 0; i < 22; i++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bde:	e013      	b.n	8001c08 <write_initial_reg_values+0x94>
		send_spi_command(write_command(i, registers[i]));
 8001be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	3340      	adds	r3, #64	@ 0x40
 8001bea:	443b      	add	r3, r7
 8001bec:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	f001 fe11 	bl	800381c <write_command>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fa3a 	bl	8002076 <send_spi_command>
	for (int i = 0; i < 22; i++) {
 8001c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c04:	3301      	adds	r3, #1
 8001c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0a:	2b15      	cmp	r3, #21
 8001c0c:	dde8      	ble.n	8001be0 <write_initial_reg_values+0x6c>
	}

	// Calibrate and run for 9 commands.
	send_spi_command(calibrate_command());
 8001c0e:	f001 fdfc 	bl	800380a <calibrate_command>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fa2e 	bl	8002076 <send_spi_command>
	for (int i = 0; i < 9; i++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c1e:	e009      	b.n	8001c34 <write_initial_reg_values+0xc0>
		send_spi_command(read_command(40));
 8001c20:	2028      	movs	r0, #40	@ 0x28
 8001c22:	f001 fe18 	bl	8003856 <read_command>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fa24 	bl	8002076 <send_spi_command>
	for (int i = 0; i < 9; i++) {
 8001c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c30:	3301      	adds	r3, #1
 8001c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	ddf2      	ble.n	8001c20 <write_initial_reg_values+0xac>
	}
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	3740      	adds	r7, #64	@ 0x40
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <calculate_sample_rate>:
// Check timer clock input, clock division, prescaling, and counter period
// to determine the rate at which INTERRUPT_TIM interrupts occur (sample rate).
// Note that this reads clock and timer configuration register values during runtime,
// so this function should adapt to any changes made to the .ioc.
double calculate_sample_rate()
{
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af00      	add	r7, sp, #0
	uint32_t apb1_timer_freq, ckd_value, psc_value, counter_period;

#ifdef USE_HAL
	apb1_timer_freq = HAL_RCC_GetPCLK1Freq();
 8001c4a:	f005 fadd 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 8001c4e:	61f8      	str	r0, [r7, #28]
	ckd_value = INTERRUPT_TIM.Init.ClockDivision;
 8001c50:	4b28      	ldr	r3, [pc, #160]	@ (8001cf4 <calculate_sample_rate+0xb0>)
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	61bb      	str	r3, [r7, #24]
	psc_value = INTERRUPT_TIM.Init.Prescaler;
 8001c56:	4b27      	ldr	r3, [pc, #156]	@ (8001cf4 <calculate_sample_rate+0xb0>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	617b      	str	r3, [r7, #20]
	counter_period = INTERRUPT_TIM.Init.Period;
 8001c5c:	4b25      	ldr	r3, [pc, #148]	@ (8001cf4 <calculate_sample_rate+0xb0>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	613b      	str	r3, [r7, #16]
	ckd_value = LL_TIM_GetClockDivision(INTERRUPT_TIM);
	psc_value = LL_TIM_GetPrescaler(INTERRUPT_TIM);
	counter_period = LL_TIM_GetAutoReload(INTERRUPT_TIM);
#endif

	double ckd_factor = 1.0;
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b24      	ldr	r3, [pc, #144]	@ (8001cf8 <calculate_sample_rate+0xb4>)
 8001c68:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (ckd_value == 0b01) {
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d106      	bne.n	8001c80 <calculate_sample_rate+0x3c>
		ckd_factor = 2;
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001c7e:	e007      	b.n	8001c90 <calculate_sample_rate+0x4c>
	} else if (ckd_value == 0b10) {
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d104      	bne.n	8001c90 <calculate_sample_rate+0x4c>
		ckd_factor = 4;
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <calculate_sample_rate+0xb8>)
 8001c8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	double psc_factor = psc_value + 1;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc3d 	bl	8000514 <__aeabi_ui2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double input_frequency = apb1_timer_freq / (ckd_factor * psc_factor);
 8001ca2:	69f8      	ldr	r0, [r7, #28]
 8001ca4:	f7fe fc36 	bl	8000514 <__aeabi_ui2d>
 8001ca8:	4604      	mov	r4, r0
 8001caa:	460d      	mov	r5, r1
 8001cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cb0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cb4:	f7fe fca8 	bl	8000608 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe fdcc 	bl	800085c <__aeabi_ddiv>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	e9c7 2300 	strd	r2, r3, [r7]
	return input_frequency / counter_period;
 8001ccc:	6938      	ldr	r0, [r7, #16]
 8001cce:	f7fe fc21 	bl	8000514 <__aeabi_ui2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cda:	f7fe fdbf 	bl	800085c <__aeabi_ddiv>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ce6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cea:	eef0 0a67 	vmov.f32	s1, s15
 8001cee:	3728      	adds	r7, #40	@ 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf4:	200002f0 	.word	0x200002f0
 8001cf8:	3ff00000 	.word	0x3ff00000
 8001cfc:	40100000 	.word	0x40100000

08001d00 <create_convert_sequence>:
// and load them into command_sequence_MOSI.
// If the channel_numbers_to_convert parameter is NULL,
// create CONVERT_COMMANDS_PER_SEQUENCE commands from channel 0 (default 0 - 31).
// Otherwise, populate the CONVERT commands in the order specificied by channel_numbers_to_convert.
void create_convert_sequence(uint8_t* channel_numbers_to_convert)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	// If no list of channel numbers is provided,
	// then assume CONVERT should occur for channels 0 - CONVERT_COMMANDS_PER_SEQUENCE.
	if (channel_numbers_to_convert == NULL) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d115      	bne.n	8001d3a <create_convert_sequence+0x3a>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	e00e      	b.n	8001d32 <create_convert_sequence+0x32>
			command_sequence_MOSI[i] = convert_command(i, 0);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f001 fd58 	bl	80037d0 <convert_command>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4619      	mov	r1, r3
 8001d24:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <create_convert_sequence+0x70>)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b1f      	cmp	r3, #31
 8001d36:	dded      	ble.n	8001d14 <create_convert_sequence+0x14>
	else {
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
		}
	}
}
 8001d38:	e016      	b.n	8001d68 <create_convert_sequence+0x68>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	e010      	b.n	8001d62 <create_convert_sequence+0x62>
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f001 fd40 	bl	80037d0 <convert_command>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4619      	mov	r1, r3
 8001d54:	4a06      	ldr	r2, [pc, #24]	@ (8001d70 <create_convert_sequence+0x70>)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b1f      	cmp	r3, #31
 8001d66:	ddeb      	ble.n	8001d40 <create_convert_sequence+0x40>
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000448 	.word	0x20000448

08001d74 <create_command_list_RHD_register_config>:

// Create a list of num_commands commands to program most RAM registers on an RHD2000 chip, read those values
// back to confirm programming, read ROM registers, and (if calibrate == true) run ADC calibration.
// Return the number of populated commands. num_commands must be 60 or greater.
int create_command_list_RHD_register_config(RHDConfigParameters *p, uint16_t *command_list, uint8_t calibrate, int num_commands)
{
 8001d74:	b5b0      	push	{r4, r5, r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71fb      	strb	r3, [r7, #7]
	int command_index = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
	// Start with a few dummy commands in case chip is still powering up.
	command_list[command_index++] = read_command(63);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	61fa      	str	r2, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	18d4      	adds	r4, r2, r3
 8001d94:	203f      	movs	r0, #63	@ 0x3f
 8001d96:	f001 fd5e 	bl	8003856 <read_command>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(63);
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	61fa      	str	r2, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	18d4      	adds	r4, r2, r3
 8001daa:	203f      	movs	r0, #63	@ 0x3f
 8001dac:	f001 fd53 	bl	8003856 <read_command>
 8001db0:	4603      	mov	r3, r0
 8001db2:	8023      	strh	r3, [r4, #0]


	// Program RAM registers.
	for (int reg = 0; reg < 22; ++reg) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	e01d      	b.n	8001df6 <create_command_list_RHD_register_config+0x82>
		// Don't program Register 3 (MUX Load, Temperature Sensor, and Auxiliary Digital Output)
		// or 6 (Impedance Check DAC) here;
		// control temperature sensor and DAC waveforms in other command streams.
		if (reg == 3 || reg == 6) continue;
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d016      	beq.n	8001dee <create_command_list_RHD_register_config+0x7a>
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d013      	beq.n	8001dee <create_command_list_RHD_register_config+0x7a>
		command_list[command_index++] = write_command(reg, get_register_value(p, reg));
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	b2dd      	uxtb	r5, r3
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f001 fad3 	bl	8003378 <get_register_value>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	b2d9      	uxtb	r1, r3
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	61fa      	str	r2, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	18d4      	adds	r4, r2, r3
 8001de2:	4628      	mov	r0, r5
 8001de4:	f001 fd1a 	bl	800381c <write_command>
 8001de8:	4603      	mov	r3, r0
 8001dea:	8023      	strh	r3, [r4, #0]
 8001dec:	e000      	b.n	8001df0 <create_command_list_RHD_register_config+0x7c>
		if (reg == 3 || reg == 6) continue;
 8001dee:	bf00      	nop
	for (int reg = 0; reg < 22; ++reg) {
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	3301      	adds	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b15      	cmp	r3, #21
 8001dfa:	ddde      	ble.n	8001dba <create_command_list_RHD_register_config+0x46>
	}


	// Read ROM registers.
	command_list[command_index++] = read_command(63);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	61fa      	str	r2, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	18d4      	adds	r4, r2, r3
 8001e08:	203f      	movs	r0, #63	@ 0x3f
 8001e0a:	f001 fd24 	bl	8003856 <read_command>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(62);
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	61fa      	str	r2, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	18d4      	adds	r4, r2, r3
 8001e1e:	203e      	movs	r0, #62	@ 0x3e
 8001e20:	f001 fd19 	bl	8003856 <read_command>
 8001e24:	4603      	mov	r3, r0
 8001e26:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(61);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	61fa      	str	r2, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	18d4      	adds	r4, r2, r3
 8001e34:	203d      	movs	r0, #61	@ 0x3d
 8001e36:	f001 fd0e 	bl	8003856 <read_command>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(60);
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	61fa      	str	r2, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	18d4      	adds	r4, r2, r3
 8001e4a:	203c      	movs	r0, #60	@ 0x3c
 8001e4c:	f001 fd03 	bl	8003856 <read_command>
 8001e50:	4603      	mov	r3, r0
 8001e52:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(59);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	61fa      	str	r2, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	18d4      	adds	r4, r2, r3
 8001e60:	203b      	movs	r0, #59	@ 0x3b
 8001e62:	f001 fcf8 	bl	8003856 <read_command>
 8001e66:	4603      	mov	r3, r0
 8001e68:	8023      	strh	r3, [r4, #0]

	// Read chip name from ROM.
	command_list[command_index++] = read_command(48);
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	61fa      	str	r2, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	18d4      	adds	r4, r2, r3
 8001e76:	2030      	movs	r0, #48	@ 0x30
 8001e78:	f001 fced 	bl	8003856 <read_command>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(49);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	61fa      	str	r2, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	18d4      	adds	r4, r2, r3
 8001e8c:	2031      	movs	r0, #49	@ 0x31
 8001e8e:	f001 fce2 	bl	8003856 <read_command>
 8001e92:	4603      	mov	r3, r0
 8001e94:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(50);
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	61fa      	str	r2, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	18d4      	adds	r4, r2, r3
 8001ea2:	2032      	movs	r0, #50	@ 0x32
 8001ea4:	f001 fcd7 	bl	8003856 <read_command>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(51);
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	61fa      	str	r2, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	18d4      	adds	r4, r2, r3
 8001eb8:	2033      	movs	r0, #51	@ 0x33
 8001eba:	f001 fccc 	bl	8003856 <read_command>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(52);
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	61fa      	str	r2, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	18d4      	adds	r4, r2, r3
 8001ece:	2034      	movs	r0, #52	@ 0x34
 8001ed0:	f001 fcc1 	bl	8003856 <read_command>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(53);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	61fa      	str	r2, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	18d4      	adds	r4, r2, r3
 8001ee4:	2035      	movs	r0, #53	@ 0x35
 8001ee6:	f001 fcb6 	bl	8003856 <read_command>
 8001eea:	4603      	mov	r3, r0
 8001eec:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(54);
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	61fa      	str	r2, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	18d4      	adds	r4, r2, r3
 8001efa:	2036      	movs	r0, #54	@ 0x36
 8001efc:	f001 fcab 	bl	8003856 <read_command>
 8001f00:	4603      	mov	r3, r0
 8001f02:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(55);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	61fa      	str	r2, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	18d4      	adds	r4, r2, r3
 8001f10:	2037      	movs	r0, #55	@ 0x37
 8001f12:	f001 fca0 	bl	8003856 <read_command>
 8001f16:	4603      	mov	r3, r0
 8001f18:	8023      	strh	r3, [r4, #0]

	// Read Intan name from ROM.
	command_list[command_index++] = read_command(40);
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	61fa      	str	r2, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	18d4      	adds	r4, r2, r3
 8001f26:	2028      	movs	r0, #40	@ 0x28
 8001f28:	f001 fc95 	bl	8003856 <read_command>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(41);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	61fa      	str	r2, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	18d4      	adds	r4, r2, r3
 8001f3c:	2029      	movs	r0, #41	@ 0x29
 8001f3e:	f001 fc8a 	bl	8003856 <read_command>
 8001f42:	4603      	mov	r3, r0
 8001f44:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(42);
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	61fa      	str	r2, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	18d4      	adds	r4, r2, r3
 8001f52:	202a      	movs	r0, #42	@ 0x2a
 8001f54:	f001 fc7f 	bl	8003856 <read_command>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(43);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	61fa      	str	r2, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	18d4      	adds	r4, r2, r3
 8001f68:	202b      	movs	r0, #43	@ 0x2b
 8001f6a:	f001 fc74 	bl	8003856 <read_command>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(44);
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	61fa      	str	r2, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	18d4      	adds	r4, r2, r3
 8001f7e:	202c      	movs	r0, #44	@ 0x2c
 8001f80:	f001 fc69 	bl	8003856 <read_command>
 8001f84:	4603      	mov	r3, r0
 8001f86:	8023      	strh	r3, [r4, #0]

	// Read back RAM registers to confirm programming.
	for (int reg = 0; reg < 22; ++reg) {
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	e00f      	b.n	8001fae <create_command_list_RHD_register_config+0x23a>
		command_list[command_index++] = read_command(reg);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	b2d9      	uxtb	r1, r3
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	61fa      	str	r2, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	18d4      	adds	r4, r2, r3
 8001f9e:	4608      	mov	r0, r1
 8001fa0:	f001 fc59 	bl	8003856 <read_command>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	8023      	strh	r3, [r4, #0]
	for (int reg = 0; reg < 22; ++reg) {
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3301      	adds	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b15      	cmp	r3, #21
 8001fb2:	ddec      	ble.n	8001f8e <create_command_list_RHD_register_config+0x21a>
		// Note that registers 18-21 are only 'visible' on MISO B, so if register values are being used, be sure to use MISO B read values.
	}

	// Optionally, run ADC calibration (should only be run once after board is plugged in).
	if (calibrate) {
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <create_command_list_RHD_register_config+0x25c>
		command_list[command_index++] = calibrate_command();
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	61fa      	str	r2, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	18d4      	adds	r4, r2, r3
 8001fc6:	f001 fc20 	bl	800380a <calibrate_command>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	8023      	strh	r3, [r4, #0]
 8001fce:	e00a      	b.n	8001fe6 <create_command_list_RHD_register_config+0x272>
	} else {
		command_list[command_index++] = read_command(63);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	61fa      	str	r2, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	18d4      	adds	r4, r2, r3
 8001fdc:	203f      	movs	r0, #63	@ 0x3f
 8001fde:	f001 fc3a 	bl	8003856 <read_command>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	8023      	strh	r3, [r4, #0]
	}

	// End with a dummy command.
	command_list[command_index++] = read_command(63);
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	61fa      	str	r2, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	18d4      	adds	r4, r2, r3
 8001ff2:	203f      	movs	r0, #63	@ 0x3f
 8001ff4:	f001 fc2f 	bl	8003856 <read_command>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	8023      	strh	r3, [r4, #0]

	for (int i = 0; i < (num_commands - 64); ++i) {
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	e00d      	b.n	800201e <create_command_list_RHD_register_config+0x2aa>
		command_list[command_index++] = read_command(63);
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	61fa      	str	r2, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	18d4      	adds	r4, r2, r3
 800200e:	203f      	movs	r0, #63	@ 0x3f
 8002010:	f001 fc21 	bl	8003856 <read_command>
 8002014:	4603      	mov	r3, r0
 8002016:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < (num_commands - 64); ++i) {
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	3301      	adds	r3, #1
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	3b40      	subs	r3, #64	@ 0x40
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	dbec      	blt.n	8002002 <create_command_list_RHD_register_config+0x28e>
	}
	return command_index;
 8002028:	69fb      	ldr	r3, [r7, #28]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3720      	adds	r7, #32
 800202e:	46bd      	mov	sp, r7
 8002030:	bdb0      	pop	{r4, r5, r7, pc}

08002032 <create_command_list_dummy>:


// Create a list of dummy commands with a specific command.
// Return the length of the command list (which should be n).
int create_command_list_dummy(RHDConfigParameters *p, uint16_t *command_list, int n, uint16_t cmd)
{
 8002032:	b480      	push	{r7}
 8002034:	b087      	sub	sp, #28
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	807b      	strh	r3, [r7, #2]
	int command_index = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < n; i++) {
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	e00a      	b.n	8002060 <create_command_list_dummy+0x2e>
		command_list[command_index++] = cmd;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	617a      	str	r2, [r7, #20]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	4413      	add	r3, r2
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < n; i++) {
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	3301      	adds	r3, #1
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	dbf0      	blt.n	800204a <create_command_list_dummy+0x18>
	}

	return command_index;
 8002068:	697b      	ldr	r3, [r7, #20]
}
 800206a:	4618      	mov	r0, r3
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <send_spi_command>:
}


// Send provided 16-bit word 'tx_data' over SPI, ignoring resultant 16-bit received word.
void send_spi_command(uint16_t tx_data)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	80fb      	strh	r3, [r7, #6]
	uint16_t dummy_data_A = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	81fb      	strh	r3, [r7, #14]
	uint16_t dummy_data_B = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	81bb      	strh	r3, [r7, #12]
	send_receive_spi_command(tx_data, &dummy_data_A, &dummy_data_B);
 8002088:	f107 020c 	add.w	r2, r7, #12
 800208c:	f107 010e 	add.w	r1, r7, #14
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f804 	bl	80020a0 <send_receive_spi_command>
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <send_receive_spi_command>:

// Send provided 16-bit word 'tx_data' over SPI, and pass resultant 16-bit received work by reference.
// Note that the pipelined nature of the SPI communication has a 2-command delay,
// so the obtained result corresponds to the command from 2 transactions earlier.
void send_receive_spi_command(uint16_t tx_data, uint16_t *rx_data_A, uint16_t *rx_data_B)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	81fb      	strh	r3, [r7, #14]
	uint32_t rx_data = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
	reception_in_progress = 1;
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <send_receive_spi_command+0x68>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]

#ifdef USE_HAL
	if (HAL_SPI_Receive_DMA(&RECEIVE_SPI, (uint8_t*) &rx_data, 1) != HAL_OK)
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2201      	movs	r2, #1
 80020be:	4619      	mov	r1, r3
 80020c0:	4812      	ldr	r0, [pc, #72]	@ (800210c <send_receive_spi_command+0x6c>)
 80020c2:	f008 fb85 	bl	800a7d0 <HAL_SPI_Receive_DMA>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <send_receive_spi_command+0x30>
	{
		Error_Handler();
 80020cc:	f7ff fc06 	bl	80018dc <Error_Handler>
	}

	if (HAL_SPI_Transmit_DMA(&TRANSMIT_SPI, (uint8_t*) &tx_data, 1) != HAL_OK)
 80020d0:	f107 030e 	add.w	r3, r7, #14
 80020d4:	2201      	movs	r2, #1
 80020d6:	4619      	mov	r1, r3
 80020d8:	480d      	ldr	r0, [pc, #52]	@ (8002110 <send_receive_spi_command+0x70>)
 80020da:	f008 f9c5 	bl	800a468 <HAL_SPI_Transmit_DMA>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <send_receive_spi_command+0x48>
	{
		Error_Handler();
 80020e4:	f7ff fbfa 	bl	80018dc <Error_Handler>
	}
#else
	begin_spi_rx(LL_DMA_DEST_FIXED, (uint32_t) &rx_data, 1);
	begin_spi_tx(LL_DMA_SRC_FIXED, (uint32_t) &tx_data, 1);
#endif
	while (reception_in_progress == 1) {}
 80020e8:	bf00      	nop
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <send_receive_spi_command+0x68>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d0fa      	beq.n	80020ea <send_receive_spi_command+0x4a>
	extract_ddr_words(rx_data, rx_data_A, rx_data_B);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fd13 	bl	8001b26 <extract_ddr_words>
}
 8002100:	bf00      	nop
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000824 	.word	0x20000824
 800210c:	20000094 	.word	0x20000094
 8002110:	20000124 	.word	0x20000124

08002114 <HAL_SPI_RxCpltCallback>:


#ifdef USE_HAL
// HAL calls this function when both Tx and Rx have completed.
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	if (hspi == &RECEIVE_SPI) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <HAL_SPI_RxCpltCallback+0x1c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d101      	bne.n	8002128 <HAL_SPI_RxCpltCallback+0x14>
		spi_rx_cplt_callback();
 8002124:	f7ff fcb2 	bl	8001a8c <spi_rx_cplt_callback>
	}
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000094 	.word	0x20000094

08002134 <HAL_SPI_ErrorCallback>:


// HAL calls this function when an error in the SPI communication has been detected.
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	spi_error_callback();
 800213c:	f7ff fd0e 	bl	8001b5c <spi_error_callback>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_UART_TxCpltCallback>:


// HAL calls this function when UART Tx has completed.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	uart_ready = 1;
 8002150:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <HAL_UART_TxCpltCallback+0x1c>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000004 	.word	0x20000004

08002168 <set_DigOut_hiZ>:
}


// Set auxiliary digital output to high-impedance (HiZ) state.
void set_DigOut_hiZ(RHDConfigParameters *p)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	p->digOut = 0;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
	p->digOut_hiZ = 1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <set_DSP_cutoff_freq>:


// Set the DSP offset removal filter cutoff frequency as closely to the requested
// newDspCutoffFreq (in Hz) as possible; returns the actual cutoff frequency (in Hz).
double set_DSP_cutoff_freq(RHDConfigParameters *p, double new_DSP_cutoff_freq)
{
 8002188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800218c:	b0b0      	sub	sp, #192	@ 0xc0
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	ed87 0b00 	vstr	d0, [r7]
	double f_cutoff[16] = {0};
 8002196:	f107 0310 	add.w	r3, r7, #16
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f00c fb3e 	bl	800e820 <memset>
	// Note: f_cutoff[0] = 0.0 here, but this index should not be used.
	for (int n = 1; n < 16; ++n) {
 80021a4:	2301      	movs	r3, #1
 80021a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80021aa:	e045      	b.n	8002238 <set_DSP_cutoff_freq+0xb0>
		double x = pow(2.0, (double) n);
 80021ac:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80021b0:	f7fe f9c0 	bl	8000534 <__aeabi_i2d>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	ec43 2b11 	vmov	d1, r2, r3
 80021bc:	ed9f 0b5e 	vldr	d0, [pc, #376]	@ 8002338 <set_DSP_cutoff_freq+0x1b0>
 80021c0:	f00c fc3c 	bl	800ea3c <pow>
 80021c4:	ed87 0b24 	vstr	d0, [r7, #144]	@ 0x90
		f_cutoff[n] = p->sample_rate * log(x / (x - 1.0)) / (2.0 * M_PI);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	4b5f      	ldr	r3, [pc, #380]	@ (8002350 <set_DSP_cutoff_freq+0x1c8>)
 80021d4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80021d8:	f7fe f85e 	bl	8000298 <__aeabi_dsub>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80021e4:	f7fe fb3a 	bl	800085c <__aeabi_ddiv>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	ec43 2b17 	vmov	d7, r2, r3
 80021f0:	eeb0 0a47 	vmov.f32	s0, s14
 80021f4:	eef0 0a67 	vmov.f32	s1, s15
 80021f8:	f00c fba2 	bl	800e940 <log>
 80021fc:	ec53 2b10 	vmov	r2, r3, d0
 8002200:	4640      	mov	r0, r8
 8002202:	4649      	mov	r1, r9
 8002204:	f7fe fa00 	bl	8000608 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	a34b      	add	r3, pc, #300	@ (adr r3, 8002340 <set_DSP_cutoff_freq+0x1b8>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f7fe fb21 	bl	800085c <__aeabi_ddiv>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002222:	00c9      	lsls	r1, r1, #3
 8002224:	31c0      	adds	r1, #192	@ 0xc0
 8002226:	4439      	add	r1, r7
 8002228:	39b0      	subs	r1, #176	@ 0xb0
 800222a:	e9c1 2300 	strd	r2, r3, [r1]
	for (int n = 1; n < 16; ++n) {
 800222e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002232:	3301      	adds	r3, #1
 8002234:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002238:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800223c:	2b0f      	cmp	r3, #15
 800223e:	ddb5      	ble.n	80021ac <set_DSP_cutoff_freq+0x24>
	}
	double log_new_DSP_cutoff_freq = log10(new_DSP_cutoff_freq);
 8002240:	ed97 0b00 	vldr	d0, [r7]
 8002244:	f00c fbbc 	bl	800e9c0 <log10>
 8002248:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

	// Find the closest value to the requested cutoff frequency (on a logarithmic scale).
	if (new_DSP_cutoff_freq > f_cutoff[1]) {
 800224c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002250:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002254:	f7fe fc68 	bl	8000b28 <__aeabi_dcmpgt>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <set_DSP_cutoff_freq+0xde>
		p->DSP_cutoff_freq = 1;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002264:	e055      	b.n	8002312 <set_DSP_cutoff_freq+0x18a>
	} else if (new_DSP_cutoff_freq < f_cutoff[15]) {
 8002266:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800226a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800226e:	f7fe fc3d 	bl	8000aec <__aeabi_dcmplt>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <set_DSP_cutoff_freq+0xf8>
		p->DSP_cutoff_freq = 15;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	220f      	movs	r2, #15
 800227c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800227e:	e048      	b.n	8002312 <set_DSP_cutoff_freq+0x18a>
	} else {
		double min_log_diff = 10000000.0;
 8002280:	a331      	add	r3, pc, #196	@ (adr r3, 8002348 <set_DSP_cutoff_freq+0x1c0>)
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		for (int n = 1; n < 16; n++) {
 800228a:	2301      	movs	r3, #1
 800228c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002290:	e03b      	b.n	800230a <set_DSP_cutoff_freq+0x182>
			double log_f_cutoff = log10(f_cutoff[n]);
 8002292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	33c0      	adds	r3, #192	@ 0xc0
 800229a:	443b      	add	r3, r7
 800229c:	3bb0      	subs	r3, #176	@ 0xb0
 800229e:	ed93 7b00 	vldr	d7, [r3]
 80022a2:	eeb0 0a47 	vmov.f32	s0, s14
 80022a6:	eef0 0a67 	vmov.f32	s1, s15
 80022aa:	f00c fb89 	bl	800e9c0 <log10>
 80022ae:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
			if (fabs(log_new_DSP_cutoff_freq - log_f_cutoff) < min_log_diff) {
 80022b2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80022b6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80022ba:	f7fd ffed 	bl	8000298 <__aeabi_dsub>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4614      	mov	r4, r2
 80022c4:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80022c8:	4622      	mov	r2, r4
 80022ca:	462b      	mov	r3, r5
 80022cc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80022d0:	f7fe fc2a 	bl	8000b28 <__aeabi_dcmpgt>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d012      	beq.n	8002300 <set_DSP_cutoff_freq+0x178>
				min_log_diff = fabs(log_new_DSP_cutoff_freq - log_f_cutoff);
 80022da:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80022de:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80022e2:	f7fd ffd9 	bl	8000298 <__aeabi_dsub>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80022f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
				p->DSP_cutoff_freq = n;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80022fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		for (int n = 1; n < 16; n++) {
 8002300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002304:	3301      	adds	r3, #1
 8002306:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800230a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800230e:	2b0f      	cmp	r3, #15
 8002310:	ddbf      	ble.n	8002292 <set_DSP_cutoff_freq+0x10a>
			}
		}
	}
	return f_cutoff[p->DSP_cutoff_freq];
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	33c0      	adds	r3, #192	@ 0xc0
 800231a:	443b      	add	r3, r7
 800231c:	3bb0      	subs	r3, #176	@ 0xb0
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	ec43 2b17 	vmov	d7, r2, r3
}
 8002326:	eeb0 0a47 	vmov.f32	s0, s14
 800232a:	eef0 0a67 	vmov.f32	s1, s15
 800232e:	37c0      	adds	r7, #192	@ 0xc0
 8002330:	46bd      	mov	sp, r7
 8002332:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002336:	bf00      	nop
 8002338:	00000000 	.word	0x00000000
 800233c:	40000000 	.word	0x40000000
 8002340:	54442d18 	.word	0x54442d18
 8002344:	401921fb 	.word	0x401921fb
 8002348:	00000000 	.word	0x00000000
 800234c:	416312d0 	.word	0x416312d0
 8002350:	3ff00000 	.word	0x3ff00000

08002354 <set_zcheck_scale>:


// Select the series capacitor used to convert the voltage waveform generated by the on-chip DAC into an AC
// current waveform that stimulates a selected electrode for impedance testing (ZcheckCs100fF, ZcheckCs1pF, or Zcheck10pF).
void set_zcheck_scale(RHDConfigParameters *p, ZcheckCs scale)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
	switch (scale) {
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d00e      	beq.n	8002384 <set_zcheck_scale+0x30>
 8002366:	2b02      	cmp	r3, #2
 8002368:	dc10      	bgt.n	800238c <set_zcheck_scale+0x38>
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <set_zcheck_scale+0x20>
 800236e:	2b01      	cmp	r3, #1
 8002370:	d004      	beq.n	800237c <set_zcheck_scale+0x28>
		break;
	case ZcheckCs10pF:
		p->zcheck_scale = 0x03;
		break;
	}
}
 8002372:	e00b      	b.n	800238c <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x00;		// Cs = 0.1 pF
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 800237a:	e007      	b.n	800238c <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x01;		// Cs = 1.0 pF
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8002382:	e003      	b.n	800238c <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x03;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2203      	movs	r2, #3
 8002388:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 800238a:	bf00      	nop
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <set_zcheck_polarity>:


// Select impedance testing of positive or negative amplifier inputs (RHD2216 only), based on
// the variable polarity (ZcheckPositiveInput or ZcheckNegativeInput).
void set_zcheck_polarity(RHDConfigParameters *p, ZcheckPolarity polarity)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
	p->zcheck_sel_pol = polarity == ZcheckNegativeInput; // Negative: 1, Positive: 0
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	bf0c      	ite	eq
 80023aa:	2301      	moveq	r3, #1
 80023ac:	2300      	movne	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <set_zcheck_channel>:


// Select the amplifier channel for impedance testing.
int set_zcheck_channel(RHDConfigParameters *p, int channel)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
	if (channel < 0 || channel > max_num_channels_per_chip() - 1) {
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db05      	blt.n	80023de <set_zcheck_channel+0x1c>
 80023d2:	f000 fe77 	bl	80030c4 <max_num_channels_per_chip>
 80023d6:	4602      	mov	r2, r0
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4293      	cmp	r3, r2
 80023dc:	db02      	blt.n	80023e4 <set_zcheck_channel+0x22>
		return -1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	e004      	b.n	80023ee <set_zcheck_channel+0x2c>
	} else {
		p->zcheck_select = channel;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	669a      	str	r2, [r3, #104]	@ 0x68
		return p->zcheck_select;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
	}
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <power_up_all_amps>:
}


// Power up all amplifiers on chip.
void power_up_all_amps(RHDConfigParameters *p)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	e008      	b.n	8002416 <power_up_all_amps+0x20>
		p->amp_pwr[channel] = 1;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	3228      	adds	r2, #40	@ 0x28
 800240a:	2101      	movs	r1, #1
 800240c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	3301      	adds	r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	f000 fe55 	bl	80030c4 <max_num_channels_per_chip>
 800241a:	4602      	mov	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4293      	cmp	r3, r2
 8002420:	dbf0      	blt.n	8002404 <power_up_all_amps+0xe>
	}
}
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	0000      	movs	r0, r0
	...

08002430 <set_upper_bandwidth>:


// Set the on-chip RH1 and RH2 DAC values appropriately to set a particular amplifier
// upper bandwidth (in Hz).  Return an estimate of the actual upper bandwidth achieved.
double set_upper_bandwidth(RHDConfigParameters *p, double upper_bandwidth)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b0a6      	sub	sp, #152	@ 0x98
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	ed87 0b00 	vstr	d0, [r7]
	const double RH1Base = 2200.0;
 800243c:	a3b7      	add	r3, pc, #732	@ (adr r3, 800271c <set_upper_bandwidth+0x2ec>)
 800243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002442:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	const double RH1Dac1Unit = 600.0;
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	4bb1      	ldr	r3, [pc, #708]	@ (8002710 <set_upper_bandwidth+0x2e0>)
 800244c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	const double RH1Dac2Unit = 29400.0;
 8002450:	a3a9      	add	r3, pc, #676	@ (adr r3, 80026f8 <set_upper_bandwidth+0x2c8>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	const int RH1Dac1Steps = 63;
 800245a:	233f      	movs	r3, #63	@ 0x3f
 800245c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const int RH1Dac2Steps = 31;
 800245e:	231f      	movs	r3, #31
 8002460:	65bb      	str	r3, [r7, #88]	@ 0x58

	const double RH2Base = 8700.0;
 8002462:	a3a7      	add	r3, pc, #668	@ (adr r3, 8002700 <set_upper_bandwidth+0x2d0>)
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	const double RH2Dac1Unit = 763.0;
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	4ba8      	ldr	r3, [pc, #672]	@ (8002714 <set_upper_bandwidth+0x2e4>)
 8002472:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	const double RH2Dac2Unit = 38400.0;
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4ba7      	ldr	r3, [pc, #668]	@ (8002718 <set_upper_bandwidth+0x2e8>)
 800247c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	const int RH2Dac1Steps = 63;
 8002480:	233f      	movs	r3, #63	@ 0x3f
 8002482:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const int RH2Dac2Steps = 31;
 8002484:	231f      	movs	r3, #31
 8002486:	63bb      	str	r3, [r7, #56]	@ 0x38

	// No upper bandwidths higher than 30 kHz.
	if (upper_bandwidth > 30000.0) {
 8002488:	a39f      	add	r3, pc, #636	@ (adr r3, 8002708 <set_upper_bandwidth+0x2d8>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002492:	f7fe fb49 	bl	8000b28 <__aeabi_dcmpgt>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <set_upper_bandwidth+0x76>
		upper_bandwidth = 30000.0;
 800249c:	a39a      	add	r3, pc, #616	@ (adr r3, 8002708 <set_upper_bandwidth+0x2d8>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	e9c7 2300 	strd	r2, r3, [r7]
	}

	double rH1_target = rH1_from_upper_bandwidth(upper_bandwidth);
 80024a6:	ed97 0b00 	vldr	d0, [r7]
 80024aa:	f000 fa31 	bl	8002910 <rH1_from_upper_bandwidth>
 80024ae:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

	p->rH1_DAC1 = 0;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	p->rH1_DAC2 = 0;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	double rH1_actual = RH1Base;
 80024c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024c6:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

	for (int i = 0; i < RH1Dac2Steps; ++i) {
 80024ca:	2300      	movs	r3, #0
 80024cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80024d0:	e032      	b.n	8002538 <set_upper_bandwidth+0x108>
		if (rH1_actual < rH1_target - (RH1Dac2Unit - RH1Dac1Unit / 2)) {
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80024de:	f7fe f9bd 	bl	800085c <__aeabi_ddiv>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80024ea:	f7fd fed5 	bl	8000298 <__aeabi_dsub>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80024f6:	f7fd fecf 	bl	8000298 <__aeabi_dsub>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002502:	f7fe faf3 	bl	8000aec <__aeabi_dcmplt>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d010      	beq.n	800252e <set_upper_bandwidth+0xfe>
			rH1_actual += RH1Dac2Unit;
 800250c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002510:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002514:	f7fd fec2 	bl	800029c <__adddf3>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			++p->rH1_DAC2;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < RH1Dac2Steps; ++i) {
 800252e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002532:	3301      	adds	r3, #1
 8002534:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002538:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800253c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800253e:	429a      	cmp	r2, r3
 8002540:	dbc7      	blt.n	80024d2 <set_upper_bandwidth+0xa2>
		}
	}

	for (int i = 0; i < RH1Dac1Steps; ++i) {
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002548:	e02c      	b.n	80025a4 <set_upper_bandwidth+0x174>
		if (rH1_actual < rH1_target - (RH1Dac1Unit / 2)) {
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002556:	f7fe f981 	bl	800085c <__aeabi_ddiv>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002562:	f7fd fe99 	bl	8000298 <__aeabi_dsub>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800256e:	f7fe fabd 	bl	8000aec <__aeabi_dcmplt>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d010      	beq.n	800259a <set_upper_bandwidth+0x16a>
			rH1_actual += RH1Dac1Unit;
 8002578:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800257c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002580:	f7fd fe8c 	bl	800029c <__adddf3>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			++p->rH1_DAC1;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	for (int i = 0; i < RH1Dac1Steps; ++i) {
 800259a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800259e:	3301      	adds	r3, #1
 80025a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80025a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025aa:	429a      	cmp	r2, r3
 80025ac:	dbcd      	blt.n	800254a <set_upper_bandwidth+0x11a>
		}
	}

	double rH2_target = rH2_from_upper_bandwidth(upper_bandwidth);
 80025ae:	ed97 0b00 	vldr	d0, [r7]
 80025b2:	f000 fa11 	bl	80029d8 <rH2_from_upper_bandwidth>
 80025b6:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	p->rH2_DAC1 = 0;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	p->rH2_DAC2 = 0;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	double rH2_actual = RH2Base;
 80025ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025ce:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	for (int i = 0; i < RH2Dac2Steps; ++i) {
 80025d2:	2300      	movs	r3, #0
 80025d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025d6:	e030      	b.n	800263a <set_upper_bandwidth+0x20a>
		if (rH2_actual < rH2_target - (RH2Dac2Unit - RH2Dac1Unit / 2)) {
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80025e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80025e4:	f7fe f93a 	bl	800085c <__aeabi_ddiv>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025f0:	f7fd fe52 	bl	8000298 <__aeabi_dsub>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025fc:	f7fd fe4c 	bl	8000298 <__aeabi_dsub>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002608:	f7fe fa70 	bl	8000aec <__aeabi_dcmplt>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d010      	beq.n	8002634 <set_upper_bandwidth+0x204>
			rH2_actual += RH2Dac2Unit;
 8002612:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002616:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800261a:	f7fd fe3f 	bl	800029c <__adddf3>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			++p->rH2_DAC2;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	for (int i = 0; i < RH2Dac2Steps; ++i) {
 8002634:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002636:	3301      	adds	r3, #1
 8002638:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800263a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800263c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263e:	429a      	cmp	r2, r3
 8002640:	dbca      	blt.n	80025d8 <set_upper_bandwidth+0x1a8>
		}
	}

	for (int i = 0; i < RH2Dac1Steps; ++i) {
 8002642:	2300      	movs	r3, #0
 8002644:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002646:	e02a      	b.n	800269e <set_upper_bandwidth+0x26e>
		if (rH2_actual < rH2_target - (RH2Dac1Unit / 2)) {
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002650:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002654:	f7fe f902 	bl	800085c <__aeabi_ddiv>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002660:	f7fd fe1a 	bl	8000298 <__aeabi_dsub>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800266c:	f7fe fa3e 	bl	8000aec <__aeabi_dcmplt>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d010      	beq.n	8002698 <set_upper_bandwidth+0x268>
			rH2_actual += RH2Dac1Unit;
 8002676:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800267a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800267e:	f7fd fe0d 	bl	800029c <__adddf3>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			++p->rH2_DAC1;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < RH2Dac1Steps; ++i) {
 8002698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800269a:	3301      	adds	r3, #1
 800269c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800269e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80026a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a2:	429a      	cmp	r2, r3
 80026a4:	dbd0      	blt.n	8002648 <set_upper_bandwidth+0x218>
		}
	}

	double actual_upper_bandwidth1 = upper_bandwidth_from_rH1(rH1_actual);
 80026a6:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 80026aa:	f000 fad9 	bl	8002c60 <upper_bandwidth_from_rH1>
 80026ae:	ed87 0b08 	vstr	d0, [r7, #32]
	double actual_upper_bandwidth2 = upper_bandwidth_from_rH2(rH2_actual);
 80026b2:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 80026b6:	f000 fb73 	bl	8002da0 <upper_bandwidth_from_rH2>
 80026ba:	ed87 0b06 	vstr	d0, [r7, #24]

	// Upper bandwidth estimates calculated from actual RH1 value and actual RH2 value
	// should be very close; we will take their geometric means to get a single number.
	double actual_upper_bandwidth = sqrt(actual_upper_bandwidth1 * actual_upper_bandwidth2);
 80026be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80026c6:	f7fd ff9f 	bl	8000608 <__aeabi_dmul>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	ec43 2b17 	vmov	d7, r2, r3
 80026d2:	eeb0 0a47 	vmov.f32	s0, s14
 80026d6:	eef0 0a67 	vmov.f32	s1, s15
 80026da:	f00c fa1f 	bl	800eb1c <sqrt>
 80026de:	ed87 0b04 	vstr	d0, [r7, #16]

	return actual_upper_bandwidth;
 80026e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80026ea:	eeb0 0a47 	vmov.f32	s0, s14
 80026ee:	eef0 0a67 	vmov.f32	s1, s15
 80026f2:	3798      	adds	r7, #152	@ 0x98
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	00000000 	.word	0x00000000
 80026fc:	40dcb600 	.word	0x40dcb600
 8002700:	00000000 	.word	0x00000000
 8002704:	40c0fe00 	.word	0x40c0fe00
 8002708:	00000000 	.word	0x00000000
 800270c:	40dd4c00 	.word	0x40dd4c00
 8002710:	4082c000 	.word	0x4082c000
 8002714:	4087d800 	.word	0x4087d800
 8002718:	40e2c000 	.word	0x40e2c000
 800271c:	00000000 	.word	0x00000000
 8002720:	40a13000 	.word	0x40a13000
 8002724:	00000000 	.word	0x00000000

08002728 <set_lower_bandwidth>:


// Set the on-chip RL DAC values appropriately to set a particular amplifier lower bandwidth (in Hz).
// Return an estimate of the actual lower bandwidth achieved.
double set_lower_bandwidth(RHDConfigParameters *p, double lower_bandwidth)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b096      	sub	sp, #88	@ 0x58
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	ed87 0b00 	vstr	d0, [r7]
    const double RLBase = 3500.0;
 8002734:	a36a      	add	r3, pc, #424	@ (adr r3, 80028e0 <set_lower_bandwidth+0x1b8>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    const double RLDac1Unit = 175.0;
 800273e:	a36a      	add	r3, pc, #424	@ (adr r3, 80028e8 <set_lower_bandwidth+0x1c0>)
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    const double RLDac2Unit = 12700.0;
 8002748:	a369      	add	r3, pc, #420	@ (adr r3, 80028f0 <set_lower_bandwidth+0x1c8>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    const double RLDac3Unit = 3000000.0;
 8002752:	a369      	add	r3, pc, #420	@ (adr r3, 80028f8 <set_lower_bandwidth+0x1d0>)
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    const int RLDac1Steps = 127;
 800275c:	237f      	movs	r3, #127	@ 0x7f
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
    const int RLDac2Steps = 63;
 8002760:	233f      	movs	r3, #63	@ 0x3f
 8002762:	623b      	str	r3, [r7, #32]

    // No lower bandwidths higher than 1.5 kHz.
    if (lower_bandwidth > 1500.0) {
 8002764:	a366      	add	r3, pc, #408	@ (adr r3, 8002900 <set_lower_bandwidth+0x1d8>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800276e:	f7fe f9db 	bl	8000b28 <__aeabi_dcmpgt>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <set_lower_bandwidth+0x5a>
    	lower_bandwidth = 1500.0;
 8002778:	a361      	add	r3, pc, #388	@ (adr r3, 8002900 <set_lower_bandwidth+0x1d8>)
 800277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277e:	e9c7 2300 	strd	r2, r3, [r7]
    }

    double rL_target = rL_from_lower_bandwidth(lower_bandwidth);
 8002782:	ed97 0b00 	vldr	d0, [r7]
 8002786:	f000 f98b 	bl	8002aa0 <rL_from_lower_bandwidth>
 800278a:	ed87 0b06 	vstr	d0, [r7, #24]

    p->rL_DAC1 = 0;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    p->rL_DAC2 = 0;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    p->rL_DAC3 = 0;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    double rL_actual = RLBase;
 80027a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    if (lower_bandwidth < 0.15) {
 80027ae:	a356      	add	r3, pc, #344	@ (adr r3, 8002908 <set_lower_bandwidth+0x1e0>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027b8:	f7fe f998 	bl	8000aec <__aeabi_dcmplt>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d010      	beq.n	80027e4 <set_lower_bandwidth+0xbc>
    	rL_actual += RLDac3Unit;
 80027c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80027ca:	f7fd fd67 	bl	800029c <__adddf3>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    	++p->rL_DAC3;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    for (int i = 0; i < RLDac2Steps; ++i) {
 80027e4:	2300      	movs	r3, #0
 80027e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027e8:	e030      	b.n	800284c <set_lower_bandwidth+0x124>
    	if (rL_actual < rL_target - (RLDac2Unit - RLDac1Unit / 2)) {
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80027f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80027f6:	f7fe f831 	bl	800085c <__aeabi_ddiv>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002802:	f7fd fd49 	bl	8000298 <__aeabi_dsub>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800280e:	f7fd fd43 	bl	8000298 <__aeabi_dsub>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800281a:	f7fe f967 	bl	8000aec <__aeabi_dcmplt>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <set_lower_bandwidth+0x11e>
    		rL_actual += RLDac2Unit;
 8002824:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002828:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800282c:	f7fd fd36 	bl	800029c <__adddf3>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    		++p->rL_DAC2;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    for (int i = 0; i < RLDac2Steps; ++i) {
 8002846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002848:	3301      	adds	r3, #1
 800284a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800284c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	429a      	cmp	r2, r3
 8002852:	dbca      	blt.n	80027ea <set_lower_bandwidth+0xc2>
    	}
    }

    for (int i = 0; i < RLDac1Steps; ++i) {
 8002854:	2300      	movs	r3, #0
 8002856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002858:	e02a      	b.n	80028b0 <set_lower_bandwidth+0x188>
    	if (rL_actual < rL_target - (RLDac1Unit / 2)) {
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002862:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002866:	f7fd fff9 	bl	800085c <__aeabi_ddiv>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002872:	f7fd fd11 	bl	8000298 <__aeabi_dsub>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800287e:	f7fe f935 	bl	8000aec <__aeabi_dcmplt>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d010      	beq.n	80028aa <set_lower_bandwidth+0x182>
    		rL_actual += RLDac1Unit;
 8002888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800288c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002890:	f7fd fd04 	bl	800029c <__adddf3>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    		++p->rL_DAC1;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    for (int i = 0; i < RLDac1Steps; ++i) {
 80028aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028ac:	3301      	adds	r3, #1
 80028ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	429a      	cmp	r2, r3
 80028b6:	dbd0      	blt.n	800285a <set_lower_bandwidth+0x132>
    	}
    }

    double actual_lower_bandwidth = lower_bandwidth_from_rL(rL_actual);
 80028b8:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 80028bc:	f000 fb10 	bl	8002ee0 <lower_bandwidth_from_rL>
 80028c0:	ed87 0b04 	vstr	d0, [r7, #16]

    return actual_lower_bandwidth;
 80028c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028c8:	ec43 2b17 	vmov	d7, r2, r3
}
 80028cc:	eeb0 0a47 	vmov.f32	s0, s14
 80028d0:	eef0 0a67 	vmov.f32	s1, s15
 80028d4:	3758      	adds	r7, #88	@ 0x58
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	f3af 8000 	nop.w
 80028e0:	00000000 	.word	0x00000000
 80028e4:	40ab5800 	.word	0x40ab5800
 80028e8:	00000000 	.word	0x00000000
 80028ec:	4065e000 	.word	0x4065e000
 80028f0:	00000000 	.word	0x00000000
 80028f4:	40c8ce00 	.word	0x40c8ce00
 80028f8:	00000000 	.word	0x00000000
 80028fc:	4146e360 	.word	0x4146e360
 8002900:	00000000 	.word	0x00000000
 8002904:	40977000 	.word	0x40977000
 8002908:	33333333 	.word	0x33333333
 800290c:	3fc33333 	.word	0x3fc33333

08002910 <rH1_from_upper_bandwidth>:


// Return the value of the RH1 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH1_from_upper_bandwidth(double upper_bandwidth)
{
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	ed87 0b00 	vstr	d0, [r7]
	double log10f = log10(upper_bandwidth);
 800291a:	ed97 0b00 	vldr	d0, [r7]
 800291e:	f00c f84f 	bl	800e9c0 <log10>
 8002922:	ed87 0b02 	vstr	d0, [r7, #8]

    return 0.9730 * pow(10.0, (8.0968 - 1.1892 * log10f + 0.04767 * log10f * log10f));
 8002926:	a324      	add	r3, pc, #144	@ (adr r3, 80029b8 <rH1_from_upper_bandwidth+0xa8>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002930:	f7fd fe6a 	bl	8000608 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	a121      	add	r1, pc, #132	@ (adr r1, 80029c0 <rH1_from_upper_bandwidth+0xb0>)
 800293a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800293e:	f7fd fcab 	bl	8000298 <__aeabi_dsub>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4614      	mov	r4, r2
 8002948:	461d      	mov	r5, r3
 800294a:	a31f      	add	r3, pc, #124	@ (adr r3, 80029c8 <rH1_from_upper_bandwidth+0xb8>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002954:	f7fd fe58 	bl	8000608 <__aeabi_dmul>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002964:	f7fd fe50 	bl	8000608 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4620      	mov	r0, r4
 800296e:	4629      	mov	r1, r5
 8002970:	f7fd fc94 	bl	800029c <__adddf3>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	ec43 2b17 	vmov	d7, r2, r3
 800297c:	eeb0 1a47 	vmov.f32	s2, s14
 8002980:	eef0 1a67 	vmov.f32	s3, s15
 8002984:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 80029b0 <rH1_from_upper_bandwidth+0xa0>
 8002988:	f00c f858 	bl	800ea3c <pow>
 800298c:	ec51 0b10 	vmov	r0, r1, d0
 8002990:	a30f      	add	r3, pc, #60	@ (adr r3, 80029d0 <rH1_from_upper_bandwidth+0xc0>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fe37 	bl	8000608 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	ec43 2b17 	vmov	d7, r2, r3
}
 80029a2:	eeb0 0a47 	vmov.f32	s0, s14
 80029a6:	eef0 0a67 	vmov.f32	s1, s15
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bdb0      	pop	{r4, r5, r7, pc}
 80029b0:	00000000 	.word	0x00000000
 80029b4:	40240000 	.word	0x40240000
 80029b8:	94467382 	.word	0x94467382
 80029bc:	3ff306f6 	.word	0x3ff306f6
 80029c0:	c504816f 	.word	0xc504816f
 80029c4:	4020318f 	.word	0x4020318f
 80029c8:	c60029f1 	.word	0xc60029f1
 80029cc:	3fa86833 	.word	0x3fa86833
 80029d0:	e5604189 	.word	0xe5604189
 80029d4:	3fef22d0 	.word	0x3fef22d0

080029d8 <rH2_from_upper_bandwidth>:


// Return the value of the RH2 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH2_from_upper_bandwidth(double upper_bandwidth)
{
 80029d8:	b5b0      	push	{r4, r5, r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(upper_bandwidth);
 80029e2:	ed97 0b00 	vldr	d0, [r7]
 80029e6:	f00b ffeb 	bl	800e9c0 <log10>
 80029ea:	ed87 0b02 	vstr	d0, [r7, #8]

    return 1.0191 * pow(10.0, (8.1009 - 1.0821 * log10f + 0.03383 * log10f * log10f));
 80029ee:	a324      	add	r3, pc, #144	@ (adr r3, 8002a80 <rH2_from_upper_bandwidth+0xa8>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029f8:	f7fd fe06 	bl	8000608 <__aeabi_dmul>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	a121      	add	r1, pc, #132	@ (adr r1, 8002a88 <rH2_from_upper_bandwidth+0xb0>)
 8002a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a06:	f7fd fc47 	bl	8000298 <__aeabi_dsub>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4614      	mov	r4, r2
 8002a10:	461d      	mov	r5, r3
 8002a12:	a31f      	add	r3, pc, #124	@ (adr r3, 8002a90 <rH2_from_upper_bandwidth+0xb8>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a1c:	f7fd fdf4 	bl	8000608 <__aeabi_dmul>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a2c:	f7fd fdec 	bl	8000608 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4620      	mov	r0, r4
 8002a36:	4629      	mov	r1, r5
 8002a38:	f7fd fc30 	bl	800029c <__adddf3>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	ec43 2b17 	vmov	d7, r2, r3
 8002a44:	eeb0 1a47 	vmov.f32	s2, s14
 8002a48:	eef0 1a67 	vmov.f32	s3, s15
 8002a4c:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8002a78 <rH2_from_upper_bandwidth+0xa0>
 8002a50:	f00b fff4 	bl	800ea3c <pow>
 8002a54:	ec51 0b10 	vmov	r0, r1, d0
 8002a58:	a30f      	add	r3, pc, #60	@ (adr r3, 8002a98 <rH2_from_upper_bandwidth+0xc0>)
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	f7fd fdd3 	bl	8000608 <__aeabi_dmul>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	ec43 2b17 	vmov	d7, r2, r3
}
 8002a6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a6e:	eef0 0a67 	vmov.f32	s1, s15
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bdb0      	pop	{r4, r5, r7, pc}
 8002a78:	00000000 	.word	0x00000000
 8002a7c:	40240000 	.word	0x40240000
 8002a80:	16f0068e 	.word	0x16f0068e
 8002a84:	3ff15048 	.word	0x3ff15048
 8002a88:	2a305532 	.word	0x2a305532
 8002a8c:	402033a9 	.word	0x402033a9
 8002a90:	6f3f52fc 	.word	0x6f3f52fc
 8002a94:	3fa1522a 	.word	0x3fa1522a
 8002a98:	cd35a858 	.word	0xcd35a858
 8002a9c:	3ff04e3b 	.word	0x3ff04e3b

08002aa0 <rL_from_lower_bandwidth>:


// Return the value of the RL resistor (in ohms) corresponding to a particular lower bandwidth value (in Hz).
double rL_from_lower_bandwidth(double lower_bandwidth)
{
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(lower_bandwidth);
 8002aaa:	ed97 0b00 	vldr	d0, [r7]
 8002aae:	f00b ff87 	bl	800e9c0 <log10>
 8002ab2:	ed87 0b02 	vstr	d0, [r7, #8]

    if (lower_bandwidth < 4.0) {
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	4b67      	ldr	r3, [pc, #412]	@ (8002c58 <rL_from_lower_bandwidth+0x1b8>)
 8002abc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ac0:	f7fe f814 	bl	8000aec <__aeabi_dcmplt>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d05d      	beq.n	8002b86 <rL_from_lower_bandwidth+0xe6>
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 8002aca:	a351      	add	r3, pc, #324	@ (adr r3, 8002c10 <rL_from_lower_bandwidth+0x170>)
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ad4:	f7fd fd98 	bl	8000608 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	a14e      	add	r1, pc, #312	@ (adr r1, 8002c18 <rL_from_lower_bandwidth+0x178>)
 8002ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ae2:	f7fd fbd9 	bl	8000298 <__aeabi_dsub>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4614      	mov	r4, r2
 8002aec:	461d      	mov	r5, r3
 8002aee:	a34c      	add	r3, pc, #304	@ (adr r3, 8002c20 <rL_from_lower_bandwidth+0x180>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002af8:	f7fd fd86 	bl	8000608 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b08:	f7fd fd7e 	bl	8000608 <__aeabi_dmul>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4620      	mov	r0, r4
 8002b12:	4629      	mov	r1, r5
 8002b14:	f7fd fbc2 	bl	800029c <__adddf3>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4614      	mov	r4, r2
 8002b1e:	461d      	mov	r5, r3
            0.1442 * log10f * log10f * log10f));
 8002b20:	a341      	add	r3, pc, #260	@ (adr r3, 8002c28 <rL_from_lower_bandwidth+0x188>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b2a:	f7fd fd6d 	bl	8000608 <__aeabi_dmul>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b3a:	f7fd fd65 	bl	8000608 <__aeabi_dmul>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b4a:	f7fd fd5d 	bl	8000608 <__aeabi_dmul>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 8002b52:	4620      	mov	r0, r4
 8002b54:	4629      	mov	r1, r5
 8002b56:	f7fd fba1 	bl	800029c <__adddf3>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	ec43 2b17 	vmov	d7, r2, r3
 8002b62:	eeb0 1a47 	vmov.f32	s2, s14
 8002b66:	eef0 1a67 	vmov.f32	s3, s15
 8002b6a:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8002c30 <rL_from_lower_bandwidth+0x190>
 8002b6e:	f00b ff65 	bl	800ea3c <pow>
 8002b72:	ec51 0b10 	vmov	r0, r1, d0
 8002b76:	a330      	add	r3, pc, #192	@ (adr r3, 8002c38 <rL_from_lower_bandwidth+0x198>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fd44 	bl	8000608 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	e03b      	b.n	8002bfe <rL_from_lower_bandwidth+0x15e>
    } else {
        return 1.0061 * pow(10.0, (4.7351 - 0.5916 * log10f + 0.08482 * log10f * log10f));
 8002b86:	a32e      	add	r3, pc, #184	@ (adr r3, 8002c40 <rL_from_lower_bandwidth+0x1a0>)
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b90:	f7fd fd3a 	bl	8000608 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	a12b      	add	r1, pc, #172	@ (adr r1, 8002c48 <rL_from_lower_bandwidth+0x1a8>)
 8002b9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b9e:	f7fd fb7b 	bl	8000298 <__aeabi_dsub>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4614      	mov	r4, r2
 8002ba8:	461d      	mov	r5, r3
 8002baa:	a329      	add	r3, pc, #164	@ (adr r3, 8002c50 <rL_from_lower_bandwidth+0x1b0>)
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bb4:	f7fd fd28 	bl	8000608 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bc4:	f7fd fd20 	bl	8000608 <__aeabi_dmul>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4620      	mov	r0, r4
 8002bce:	4629      	mov	r1, r5
 8002bd0:	f7fd fb64 	bl	800029c <__adddf3>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	ec43 2b17 	vmov	d7, r2, r3
 8002bdc:	eeb0 1a47 	vmov.f32	s2, s14
 8002be0:	eef0 1a67 	vmov.f32	s3, s15
 8002be4:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8002c30 <rL_from_lower_bandwidth+0x190>
 8002be8:	f00b ff28 	bl	800ea3c <pow>
 8002bec:	ec51 0b10 	vmov	r0, r1, d0
 8002bf0:	a311      	add	r3, pc, #68	@ (adr r3, 8002c38 <rL_from_lower_bandwidth+0x198>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f7fd fd07 	bl	8000608 <__aeabi_dmul>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
    }
}
 8002bfe:	ec43 2b17 	vmov	d7, r2, r3
 8002c02:	eeb0 0a47 	vmov.f32	s0, s14
 8002c06:	eef0 0a67 	vmov.f32	s1, s15
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c10:	ab367a10 	.word	0xab367a10
 8002c14:	3ff3573e 	.word	0x3ff3573e
 8002c18:	6e2eb1c4 	.word	0x6e2eb1c4
 8002c1c:	4013c1a3 	.word	0x4013c1a3
 8002c20:	35a85879 	.word	0x35a85879
 8002c24:	3fe23bcd 	.word	0x3fe23bcd
 8002c28:	460aa64c 	.word	0x460aa64c
 8002c2c:	3fc27525 	.word	0x3fc27525
 8002c30:	00000000 	.word	0x00000000
 8002c34:	40240000 	.word	0x40240000
 8002c38:	504816f0 	.word	0x504816f0
 8002c3c:	3ff018fc 	.word	0x3ff018fc
 8002c40:	1f8a0903 	.word	0x1f8a0903
 8002c44:	3fe2ee63 	.word	0x3fe2ee63
 8002c48:	0ded288d 	.word	0x0ded288d
 8002c4c:	4012f0be 	.word	0x4012f0be
 8002c50:	760bf5d8 	.word	0x760bf5d8
 8002c54:	3fb5b6c3 	.word	0x3fb5b6c3
 8002c58:	40100000 	.word	0x40100000
 8002c5c:	00000000 	.word	0x00000000

08002c60 <upper_bandwidth_from_rH1>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH1 (in Ohms).
double upper_bandwidth_from_rH1(double rH1)
{
 8002c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c64:	b088      	sub	sp, #32
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.04767;
 8002c6c:	a343      	add	r3, pc, #268	@ (adr r3, 8002d7c <upper_bandwidth_from_rH1+0x11c>)
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.1892;
 8002c76:	a343      	add	r3, pc, #268	@ (adr r3, 8002d84 <upper_bandwidth_from_rH1+0x124>)
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.0968 - log10(rH1 / 0.9730);
 8002c80:	a342      	add	r3, pc, #264	@ (adr r3, 8002d8c <upper_bandwidth_from_rH1+0x12c>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c8a:	f7fd fde7 	bl	800085c <__aeabi_ddiv>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	ec43 2b17 	vmov	d7, r2, r3
 8002c96:	eeb0 0a47 	vmov.f32	s0, s14
 8002c9a:	eef0 0a67 	vmov.f32	s1, s15
 8002c9e:	f00b fe8f 	bl	800e9c0 <log10>
 8002ca2:	ec53 2b10 	vmov	r2, r3, d0
 8002ca6:	a13b      	add	r1, pc, #236	@ (adr r1, 8002d94 <upper_bandwidth_from_rH1+0x134>)
 8002ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cac:	f7fd faf4 	bl	8000298 <__aeabi_dsub>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002cb8:	693c      	ldr	r4, [r7, #16]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002cc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cc8:	f7fd fc9e 	bl	8000608 <__aeabi_dmul>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4690      	mov	r8, r2
 8002cd2:	4699      	mov	r9, r3
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	4b27      	ldr	r3, [pc, #156]	@ (8002d78 <upper_bandwidth_from_rH1+0x118>)
 8002cda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cde:	f7fd fc93 	bl	8000608 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cee:	f7fd fc8b 	bl	8000608 <__aeabi_dmul>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4640      	mov	r0, r8
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	f7fd facd 	bl	8000298 <__aeabi_dsub>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	ec43 2b17 	vmov	d7, r2, r3
 8002d06:	eeb0 0a47 	vmov.f32	s0, s14
 8002d0a:	eef0 0a67 	vmov.f32	s1, s15
 8002d0e:	f00b ff05 	bl	800eb1c <sqrt>
 8002d12:	ec53 2b10 	vmov	r2, r3, d0
 8002d16:	4620      	mov	r0, r4
 8002d18:	4629      	mov	r1, r5
 8002d1a:	f7fd fabd 	bl	8000298 <__aeabi_dsub>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4614      	mov	r4, r2
 8002d24:	461d      	mov	r5, r3
 8002d26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	f7fd fab5 	bl	800029c <__adddf3>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4620      	mov	r0, r4
 8002d38:	4629      	mov	r1, r5
 8002d3a:	f7fd fd8f 	bl	800085c <__aeabi_ddiv>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	ec43 2b17 	vmov	d7, r2, r3
 8002d46:	eeb0 1a47 	vmov.f32	s2, s14
 8002d4a:	eef0 1a67 	vmov.f32	s3, s15
 8002d4e:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8002d70 <upper_bandwidth_from_rH1+0x110>
 8002d52:	f00b fe73 	bl	800ea3c <pow>
 8002d56:	eeb0 7a40 	vmov.f32	s14, s0
 8002d5a:	eef0 7a60 	vmov.f32	s15, s1
}
 8002d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d62:	eef0 0a67 	vmov.f32	s1, s15
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d6e:	bf00      	nop
 8002d70:	00000000 	.word	0x00000000
 8002d74:	40240000 	.word	0x40240000
 8002d78:	40100000 	.word	0x40100000
 8002d7c:	c60029f1 	.word	0xc60029f1
 8002d80:	3fa86833 	.word	0x3fa86833
 8002d84:	94467382 	.word	0x94467382
 8002d88:	bff306f6 	.word	0xbff306f6
 8002d8c:	e5604189 	.word	0xe5604189
 8002d90:	3fef22d0 	.word	0x3fef22d0
 8002d94:	c504816f 	.word	0xc504816f
 8002d98:	4020318f 	.word	0x4020318f
 8002d9c:	00000000 	.word	0x00000000

08002da0 <upper_bandwidth_from_rH2>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH2 (in Ohms).
double upper_bandwidth_from_rH2(double rH2)
{
 8002da0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002da4:	b088      	sub	sp, #32
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.03383;
 8002dac:	a343      	add	r3, pc, #268	@ (adr r3, 8002ebc <upper_bandwidth_from_rH2+0x11c>)
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.0821;
 8002db6:	a343      	add	r3, pc, #268	@ (adr r3, 8002ec4 <upper_bandwidth_from_rH2+0x124>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.1009 - log10(rH2 / 1.0191);
 8002dc0:	a342      	add	r3, pc, #264	@ (adr r3, 8002ecc <upper_bandwidth_from_rH2+0x12c>)
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dca:	f7fd fd47 	bl	800085c <__aeabi_ddiv>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	ec43 2b17 	vmov	d7, r2, r3
 8002dd6:	eeb0 0a47 	vmov.f32	s0, s14
 8002dda:	eef0 0a67 	vmov.f32	s1, s15
 8002dde:	f00b fdef 	bl	800e9c0 <log10>
 8002de2:	ec53 2b10 	vmov	r2, r3, d0
 8002de6:	a13b      	add	r1, pc, #236	@ (adr r1, 8002ed4 <upper_bandwidth_from_rH2+0x134>)
 8002de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dec:	f7fd fa54 	bl	8000298 <__aeabi_dsub>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002df8:	693c      	ldr	r4, [r7, #16]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002e00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e08:	f7fd fbfe 	bl	8000608 <__aeabi_dmul>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4690      	mov	r8, r2
 8002e12:	4699      	mov	r9, r3
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	4b27      	ldr	r3, [pc, #156]	@ (8002eb8 <upper_bandwidth_from_rH2+0x118>)
 8002e1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e1e:	f7fd fbf3 	bl	8000608 <__aeabi_dmul>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e2e:	f7fd fbeb 	bl	8000608 <__aeabi_dmul>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4640      	mov	r0, r8
 8002e38:	4649      	mov	r1, r9
 8002e3a:	f7fd fa2d 	bl	8000298 <__aeabi_dsub>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	ec43 2b17 	vmov	d7, r2, r3
 8002e46:	eeb0 0a47 	vmov.f32	s0, s14
 8002e4a:	eef0 0a67 	vmov.f32	s1, s15
 8002e4e:	f00b fe65 	bl	800eb1c <sqrt>
 8002e52:	ec53 2b10 	vmov	r2, r3, d0
 8002e56:	4620      	mov	r0, r4
 8002e58:	4629      	mov	r1, r5
 8002e5a:	f7fd fa1d 	bl	8000298 <__aeabi_dsub>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4614      	mov	r4, r2
 8002e64:	461d      	mov	r5, r3
 8002e66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	f7fd fa15 	bl	800029c <__adddf3>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4620      	mov	r0, r4
 8002e78:	4629      	mov	r1, r5
 8002e7a:	f7fd fcef 	bl	800085c <__aeabi_ddiv>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	ec43 2b17 	vmov	d7, r2, r3
 8002e86:	eeb0 1a47 	vmov.f32	s2, s14
 8002e8a:	eef0 1a67 	vmov.f32	s3, s15
 8002e8e:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8002eb0 <upper_bandwidth_from_rH2+0x110>
 8002e92:	f00b fdd3 	bl	800ea3c <pow>
 8002e96:	eeb0 7a40 	vmov.f32	s14, s0
 8002e9a:	eef0 7a60 	vmov.f32	s15, s1
}
 8002e9e:	eeb0 0a47 	vmov.f32	s0, s14
 8002ea2:	eef0 0a67 	vmov.f32	s1, s15
 8002ea6:	3720      	adds	r7, #32
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002eae:	bf00      	nop
 8002eb0:	00000000 	.word	0x00000000
 8002eb4:	40240000 	.word	0x40240000
 8002eb8:	40100000 	.word	0x40100000
 8002ebc:	6f3f52fc 	.word	0x6f3f52fc
 8002ec0:	3fa1522a 	.word	0x3fa1522a
 8002ec4:	16f0068e 	.word	0x16f0068e
 8002ec8:	bff15048 	.word	0xbff15048
 8002ecc:	cd35a858 	.word	0xcd35a858
 8002ed0:	3ff04e3b 	.word	0x3ff04e3b
 8002ed4:	2a305532 	.word	0x2a305532
 8002ed8:	402033a9 	.word	0x402033a9
 8002edc:	00000000 	.word	0x00000000

08002ee0 <lower_bandwidth_from_rL>:


// Return the amplifier lower bandwidth (in Hz) corresponding to a particular value of the resistor RL (in Ohms).
double lower_bandwidth_from_rL(double rL)
{
 8002ee0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ee4:	b088      	sub	sp, #32
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    // Quadratic fit below is invalid for values of RL less than 5.1 kOhm.
    if (rL < 5100.0) {
 8002eec:	a363      	add	r3, pc, #396	@ (adr r3, 800307c <lower_bandwidth_from_rL+0x19c>)
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ef6:	f7fd fdf9 	bl	8000aec <__aeabi_dcmplt>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <lower_bandwidth_from_rL+0x2a>
        rL = 5100.0;
 8002f00:	a35e      	add	r3, pc, #376	@ (adr r3, 800307c <lower_bandwidth_from_rL+0x19c>)
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	e9c7 2300 	strd	r2, r3, [r7]
    }

    if (rL < 30000.0) {
 8002f0a:	a35e      	add	r3, pc, #376	@ (adr r3, 8003084 <lower_bandwidth_from_rL+0x1a4>)
 8002f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f14:	f7fd fdea 	bl	8000aec <__aeabi_dcmplt>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d026      	beq.n	8002f6c <lower_bandwidth_from_rL+0x8c>
        a = 0.08482;
 8002f1e:	a35b      	add	r3, pc, #364	@ (adr r3, 800308c <lower_bandwidth_from_rL+0x1ac>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -0.5916;
 8002f28:	a35a      	add	r3, pc, #360	@ (adr r3, 8003094 <lower_bandwidth_from_rL+0x1b4>)
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.7351 - log10(rL / 1.0061);
 8002f32:	a35a      	add	r3, pc, #360	@ (adr r3, 800309c <lower_bandwidth_from_rL+0x1bc>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f3c:	f7fd fc8e 	bl	800085c <__aeabi_ddiv>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	ec43 2b17 	vmov	d7, r2, r3
 8002f48:	eeb0 0a47 	vmov.f32	s0, s14
 8002f4c:	eef0 0a67 	vmov.f32	s1, s15
 8002f50:	f00b fd36 	bl	800e9c0 <log10>
 8002f54:	ec53 2b10 	vmov	r2, r3, d0
 8002f58:	a152      	add	r1, pc, #328	@ (adr r1, 80030a4 <lower_bandwidth_from_rL+0x1c4>)
 8002f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f5e:	f7fd f99b 	bl	8000298 <__aeabi_dsub>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002f6a:	e025      	b.n	8002fb8 <lower_bandwidth_from_rL+0xd8>
    } else {
        a = 0.3303;
 8002f6c:	a34f      	add	r3, pc, #316	@ (adr r3, 80030ac <lower_bandwidth_from_rL+0x1cc>)
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -1.2100;
 8002f76:	a34f      	add	r3, pc, #316	@ (adr r3, 80030b4 <lower_bandwidth_from_rL+0x1d4>)
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.9873 - log10(rL / 1.0061);
 8002f80:	a346      	add	r3, pc, #280	@ (adr r3, 800309c <lower_bandwidth_from_rL+0x1bc>)
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f8a:	f7fd fc67 	bl	800085c <__aeabi_ddiv>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	ec43 2b17 	vmov	d7, r2, r3
 8002f96:	eeb0 0a47 	vmov.f32	s0, s14
 8002f9a:	eef0 0a67 	vmov.f32	s1, s15
 8002f9e:	f00b fd0f 	bl	800e9c0 <log10>
 8002fa2:	ec53 2b10 	vmov	r2, r3, d0
 8002fa6:	a145      	add	r1, pc, #276	@ (adr r1, 80030bc <lower_bandwidth_from_rL+0x1dc>)
 8002fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fac:	f7fd f974 	bl	8000298 <__aeabi_dsub>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002fb8:	693c      	ldr	r4, [r7, #16]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002fc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fc8:	f7fd fb1e 	bl	8000608 <__aeabi_dmul>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4690      	mov	r8, r2
 8002fd2:	4699      	mov	r9, r3
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	4b27      	ldr	r3, [pc, #156]	@ (8003078 <lower_bandwidth_from_rL+0x198>)
 8002fda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fde:	f7fd fb13 	bl	8000608 <__aeabi_dmul>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fee:	f7fd fb0b 	bl	8000608 <__aeabi_dmul>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4640      	mov	r0, r8
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	f7fd f94d 	bl	8000298 <__aeabi_dsub>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	ec43 2b17 	vmov	d7, r2, r3
 8003006:	eeb0 0a47 	vmov.f32	s0, s14
 800300a:	eef0 0a67 	vmov.f32	s1, s15
 800300e:	f00b fd85 	bl	800eb1c <sqrt>
 8003012:	ec53 2b10 	vmov	r2, r3, d0
 8003016:	4620      	mov	r0, r4
 8003018:	4629      	mov	r1, r5
 800301a:	f7fd f93d 	bl	8000298 <__aeabi_dsub>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4614      	mov	r4, r2
 8003024:	461d      	mov	r5, r3
 8003026:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	f7fd f935 	bl	800029c <__adddf3>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4620      	mov	r0, r4
 8003038:	4629      	mov	r1, r5
 800303a:	f7fd fc0f 	bl	800085c <__aeabi_ddiv>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	ec43 2b17 	vmov	d7, r2, r3
 8003046:	eeb0 1a47 	vmov.f32	s2, s14
 800304a:	eef0 1a67 	vmov.f32	s3, s15
 800304e:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8003070 <lower_bandwidth_from_rL+0x190>
 8003052:	f00b fcf3 	bl	800ea3c <pow>
 8003056:	eeb0 7a40 	vmov.f32	s14, s0
 800305a:	eef0 7a60 	vmov.f32	s15, s1
}
 800305e:	eeb0 0a47 	vmov.f32	s0, s14
 8003062:	eef0 0a67 	vmov.f32	s1, s15
 8003066:	3720      	adds	r7, #32
 8003068:	46bd      	mov	sp, r7
 800306a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800306e:	bf00      	nop
 8003070:	00000000 	.word	0x00000000
 8003074:	40240000 	.word	0x40240000
 8003078:	40100000 	.word	0x40100000
 800307c:	00000000 	.word	0x00000000
 8003080:	40b3ec00 	.word	0x40b3ec00
 8003084:	00000000 	.word	0x00000000
 8003088:	40dd4c00 	.word	0x40dd4c00
 800308c:	760bf5d8 	.word	0x760bf5d8
 8003090:	3fb5b6c3 	.word	0x3fb5b6c3
 8003094:	1f8a0903 	.word	0x1f8a0903
 8003098:	bfe2ee63 	.word	0xbfe2ee63
 800309c:	504816f0 	.word	0x504816f0
 80030a0:	3ff018fc 	.word	0x3ff018fc
 80030a4:	0ded288d 	.word	0x0ded288d
 80030a8:	4012f0be 	.word	0x4012f0be
 80030ac:	9c779a6b 	.word	0x9c779a6b
 80030b0:	3fd523a2 	.word	0x3fd523a2
 80030b4:	f5c28f5c 	.word	0xf5c28f5c
 80030b8:	bff35c28 	.word	0xbff35c28
 80030bc:	c56d5cfb 	.word	0xc56d5cfb
 80030c0:	4013f2fe 	.word	0x4013f2fe

080030c4 <max_num_channels_per_chip>:


// Maximum number of amplifier channels per chip.
int max_num_channels_per_chip()
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
	return 64;
 80030c8:	2340      	movs	r3, #64	@ 0x40
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	0000      	movs	r0, r0
	...

080030d8 <set_default_rhd_settings>:


// Set default values for parameters used to configure RAM registers on RHD2000 chip.
void set_default_rhd_settings(RHDConfigParameters *p)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	// D[7:6]: ADC reference BW
	// D[5]: amp fast settle
	// D[4]: amp Vref enable
	// D[3:2]: ADC comparator bias
	// D[1:0]: ADC comparator select
	p->adc_reference_bw = 3;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2203      	movs	r2, #3
 80030e4:	609a      	str	r2, [r3, #8]
	p->amp_fast_settle = 0;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
	p->amp_vref_enable = 1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	60da      	str	r2, [r3, #12]
	p->adc_comparator_bias = 3;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2203      	movs	r2, #3
 80030f8:	611a      	str	r2, [r3, #16]
	p->adc_comparator_select = 2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	615a      	str	r2, [r3, #20]

	// Register 1: Supply Sensor and ADC Buffer Bias Current
	// D[7]: X (No Function)
	// D[6]: VDD sense enable
	// D[5:0]: ADC buffer bias (set below in set_biases_based_on_sample_rate)
	p->vdd_sense_enable = 1;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	619a      	str	r2, [r3, #24]

	// Register 2: MUX Bias Current
	// D[7:6]: X (No Function)
	// D[5:0]: MUX bias (set below in set_biases_based_on_sample_rate)
	set_biases_based_on_sample_rate(&p->adc_buffer_bias, &p->mux_bias, p->sample_rate);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f103 021c 	add.w	r2, r3, #28
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f103 0120 	add.w	r1, r3, #32
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	ed93 7b00 	vldr	d7, [r3]
 8003118:	eeb0 0a47 	vmov.f32	s0, s14
 800311c:	eef0 0a67 	vmov.f32	s1, s15
 8003120:	4610      	mov	r0, r2
 8003122:	f000 f865 	bl	80031f0 <set_biases_based_on_sample_rate>
	// D[4]: tempS2
	// D[3]: tempS1
	// D[2]: tempen
	// D[1]: digout HiZ
	// D[0]: digout
	p->mux_load = 0;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	625a      	str	r2, [r3, #36]	@ 0x24
	p->temp_S1 = 0;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	629a      	str	r2, [r3, #40]	@ 0x28
	p->temp_S2 = 0;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	62da      	str	r2, [r3, #44]	@ 0x2c
	p->temp_en = 0;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30
	set_DigOut_hiZ(p);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff f812 	bl	8002168 <set_DigOut_hiZ>
	// D[7]: weak MISO
	// D[6]: twoscomp
	// D[5]: absmode
	// D[4]: DSPen
	// D[3:0]: DSP cutoff freq
	p->weak_miso = 1;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	63da      	str	r2, [r3, #60]	@ 0x3c
	p->twos_comp = 0;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40
	p->abs_mode = 0;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
	p->DSP_en = 1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	649a      	str	r2, [r3, #72]	@ 0x48
	set_DSP_cutoff_freq(p, 1.0);
 800315c:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 80031e0 <set_default_rhd_settings+0x108>
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff f811 	bl	8002188 <set_DSP_cutoff_freq>
	// D[5]: Zcheck load
	// D[4:3]: Zcheck scale
	// D[2]: Zcheck conn all
	// D[1]: Zcheck sel pol
	// D[0]: Zcheck en
	p->zcheck_DAC_power = 1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	651a      	str	r2, [r3, #80]	@ 0x50
	p->zcheck_load = 0;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	655a      	str	r2, [r3, #84]	@ 0x54
	set_zcheck_scale(p, ZcheckCs100fF);
 8003172:	2100      	movs	r1, #0
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff f8ed 	bl	8002354 <set_zcheck_scale>
	p->zcheck_conn_all = 0;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	65da      	str	r2, [r3, #92]	@ 0x5c
	set_zcheck_polarity(p, ZcheckPositiveInput);
 8003180:	2100      	movs	r1, #0
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff f908 	bl	8002398 <set_zcheck_polarity>
	p->zcheck_en = 0;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	665a      	str	r2, [r3, #100]	@ 0x64
	// D[7:0]: Zcheck DAC

	// Register 7: Impedance Check Amplifier Select
	// D[7:6]: X (No Function)
	// D[5:0]: Zcheck select
	set_zcheck_channel(p, 0);
 800318e:	2100      	movs	r1, #0
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff f916 	bl	80023c2 <set_zcheck_channel>

	// Registers 8-13: On-Chip Amplifier Bandwidth Select
	// R[8]D[7]: offchip RH1
	// R[8]D[6]: X (No Function)
	// R[8]D[5:0]: RH1 DAC1
	p->off_chip_RH1 = 0;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	66da      	str	r2, [r3, #108]	@ 0x6c

	// R[9]D[7]: ADC aux1 en
	// R[9]D[6:5]: X (No Function)
	// R[9]D[4:0] RH1 DAC2
	p->adc_Aux1_en = 1;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	679a      	str	r2, [r3, #120]	@ 0x78

	// R[10]D[7]: offchip RH2
	// R[10]D[6]: X (No Function)
	// R[10]D[5:0]: RH2 DAC1
	p->off_chip_RH2 = 0;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	671a      	str	r2, [r3, #112]	@ 0x70

	// R[11]D[7]: ADC2 aux2 en
	// R[11]D[6:5]: X (No Function)
	// R[11]D[4:0]: RH2 DAC2
	p->adc_Aux2_en = 1;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	67da      	str	r2, [r3, #124]	@ 0x7c

	// R[12]D[7]: offchip RL
	// R[12]D[6:0]: RL DAC1
	p->off_chip_RL = 0;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	675a      	str	r2, [r3, #116]	@ 0x74

	// R[13]D[7]: ADC3 aux3 en
	// R[13]D[6]: RL DAC3
	// R[13]D[5:0]: RL DAC2
	p->adc_Aux3_en = 1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	set_upper_bandwidth(p, 7500.0);
 80031bc:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 80031e8 <set_default_rhd_settings+0x110>
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff f935 	bl	8002430 <set_upper_bandwidth>
	set_lower_bandwidth(p, 1.0);
 80031c6:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 80031e0 <set_default_rhd_settings+0x108>
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff faac 	bl	8002728 <set_lower_bandwidth>
	// R[17]D[7:0]: apwr[31:0]
	// R[18]D[7:0] = apwr[39:32]
	// R[19]D[7:0] = apwr[47:40]
	// R[20]D[7:0] = apwr[55:48]
	// R[21]D[7:0] = apwr[63:56]
	power_up_all_amps(p);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff f910 	bl	80023f6 <power_up_all_amps>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	00000000 	.word	0x00000000
 80031e4:	3ff00000 	.word	0x3ff00000
 80031e8:	00000000 	.word	0x00000000
 80031ec:	40bd4c00 	.word	0x40bd4c00

080031f0 <set_biases_based_on_sample_rate>:


// Determine suitable ADC buffer bias and mux bias values based on provided sample rate.
void set_biases_based_on_sample_rate(int *adc_buffer_bias, int *mux_bias, const double sample_rate)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	ed87 0b00 	vstr	d0, [r7]
	double adc_sampling_rate = (CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) * sample_rate;
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	4b5b      	ldr	r3, [pc, #364]	@ (8003370 <set_biases_based_on_sample_rate+0x180>)
 8003204:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003208:	f7fd f9fe 	bl	8000608 <__aeabi_dmul>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (adc_sampling_rate <= 120000.0) {
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	4b56      	ldr	r3, [pc, #344]	@ (8003374 <set_biases_based_on_sample_rate+0x184>)
 800321a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800321e:	f7fd fc6f 	bl	8000b00 <__aeabi_dcmple>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <set_biases_based_on_sample_rate+0x46>
		*adc_buffer_bias = 32;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2228      	movs	r2, #40	@ 0x28
 8003232:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
	} else {
		*adc_buffer_bias = 2;
		*mux_bias = 4;
	}
}
 8003234:	e07c      	b.n	8003330 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 140000.0) {
 8003236:	a340      	add	r3, pc, #256	@ (adr r3, 8003338 <set_biases_based_on_sample_rate+0x148>)
 8003238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003240:	f7fd fc5e 	bl	8000b00 <__aeabi_dcmple>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <set_biases_based_on_sample_rate+0x68>
		*adc_buffer_bias = 16;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2210      	movs	r2, #16
 800324e:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2228      	movs	r2, #40	@ 0x28
 8003254:	601a      	str	r2, [r3, #0]
}
 8003256:	e06b      	b.n	8003330 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 175000.0) {
 8003258:	a339      	add	r3, pc, #228	@ (adr r3, 8003340 <set_biases_based_on_sample_rate+0x150>)
 800325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003262:	f7fd fc4d 	bl	8000b00 <__aeabi_dcmple>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d006      	beq.n	800327a <set_biases_based_on_sample_rate+0x8a>
		*adc_buffer_bias = 8;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2208      	movs	r2, #8
 8003270:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2228      	movs	r2, #40	@ 0x28
 8003276:	601a      	str	r2, [r3, #0]
}
 8003278:	e05a      	b.n	8003330 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 220000.0) {
 800327a:	a333      	add	r3, pc, #204	@ (adr r3, 8003348 <set_biases_based_on_sample_rate+0x158>)
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003284:	f7fd fc3c 	bl	8000b00 <__aeabi_dcmple>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d006      	beq.n	800329c <set_biases_based_on_sample_rate+0xac>
		*adc_buffer_bias = 8;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2208      	movs	r2, #8
 8003292:	601a      	str	r2, [r3, #0]
		*mux_bias = 32;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2220      	movs	r2, #32
 8003298:	601a      	str	r2, [r3, #0]
}
 800329a:	e049      	b.n	8003330 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 280000.0) {
 800329c:	a32c      	add	r3, pc, #176	@ (adr r3, 8003350 <set_biases_based_on_sample_rate+0x160>)
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032a6:	f7fd fc2b 	bl	8000b00 <__aeabi_dcmple>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d006      	beq.n	80032be <set_biases_based_on_sample_rate+0xce>
		*adc_buffer_bias = 8;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2208      	movs	r2, #8
 80032b4:	601a      	str	r2, [r3, #0]
		*mux_bias = 26;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	221a      	movs	r2, #26
 80032ba:	601a      	str	r2, [r3, #0]
}
 80032bc:	e038      	b.n	8003330 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 350000.0) {
 80032be:	a326      	add	r3, pc, #152	@ (adr r3, 8003358 <set_biases_based_on_sample_rate+0x168>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032c8:	f7fd fc1a 	bl	8000b00 <__aeabi_dcmple>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d006      	beq.n	80032e0 <set_biases_based_on_sample_rate+0xf0>
		*adc_buffer_bias = 4;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2204      	movs	r2, #4
 80032d6:	601a      	str	r2, [r3, #0]
		*mux_bias = 18;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2212      	movs	r2, #18
 80032dc:	601a      	str	r2, [r3, #0]
}
 80032de:	e027      	b.n	8003330 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 440000.0) {
 80032e0:	a31f      	add	r3, pc, #124	@ (adr r3, 8003360 <set_biases_based_on_sample_rate+0x170>)
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032ea:	f7fd fc09 	bl	8000b00 <__aeabi_dcmple>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d006      	beq.n	8003302 <set_biases_based_on_sample_rate+0x112>
		*adc_buffer_bias = 3;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2203      	movs	r2, #3
 80032f8:	601a      	str	r2, [r3, #0]
		*mux_bias = 16;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2210      	movs	r2, #16
 80032fe:	601a      	str	r2, [r3, #0]
}
 8003300:	e016      	b.n	8003330 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 525000.0) {
 8003302:	a319      	add	r3, pc, #100	@ (adr r3, 8003368 <set_biases_based_on_sample_rate+0x178>)
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800330c:	f7fd fbf8 	bl	8000b00 <__aeabi_dcmple>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d006      	beq.n	8003324 <set_biases_based_on_sample_rate+0x134>
		*adc_buffer_bias = 3;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2203      	movs	r2, #3
 800331a:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2207      	movs	r2, #7
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	e005      	b.n	8003330 <set_biases_based_on_sample_rate+0x140>
		*adc_buffer_bias = 2;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2202      	movs	r2, #2
 8003328:	601a      	str	r2, [r3, #0]
		*mux_bias = 4;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2204      	movs	r2, #4
 800332e:	601a      	str	r2, [r3, #0]
}
 8003330:	bf00      	nop
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	00000000 	.word	0x00000000
 800333c:	41011700 	.word	0x41011700
 8003340:	00000000 	.word	0x00000000
 8003344:	41055cc0 	.word	0x41055cc0
 8003348:	00000000 	.word	0x00000000
 800334c:	410adb00 	.word	0x410adb00
 8003350:	00000000 	.word	0x00000000
 8003354:	41111700 	.word	0x41111700
 8003358:	00000000 	.word	0x00000000
 800335c:	41155cc0 	.word	0x41155cc0
 8003360:	00000000 	.word	0x00000000
 8003364:	411adb00 	.word	0x411adb00
 8003368:	00000000 	.word	0x00000000
 800336c:	41200590 	.word	0x41200590
 8003370:	40418000 	.word	0x40418000
 8003374:	40fd4c00 	.word	0x40fd4c00

08003378 <get_register_value>:


// Return the value of a selected RAM register (0-17) on the RHD2000 chip,
// based on the current register variables in RHDConfigParameters.
uint16_t get_register_value(RHDConfigParameters *p, int reg)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
	int regout;
	const int ZcheckDac = 128;  // midrange
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	60bb      	str	r3, [r7, #8]

	switch (reg) {
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b15      	cmp	r3, #21
 800338a:	f200 8217 	bhi.w	80037bc <get_register_value+0x444>
 800338e:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <get_register_value+0x1c>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033ed 	.word	0x080033ed
 8003398:	08003417 	.word	0x08003417
 800339c:	08003427 	.word	0x08003427
 80033a0:	0800342f 	.word	0x0800342f
 80033a4:	0800345f 	.word	0x0800345f
 80033a8:	08003487 	.word	0x08003487
 80033ac:	080034b7 	.word	0x080034b7
 80033b0:	080034bd 	.word	0x080034bd
 80033b4:	080034c5 	.word	0x080034c5
 80033b8:	080034d7 	.word	0x080034d7
 80033bc:	080034e9 	.word	0x080034e9
 80033c0:	080034fb 	.word	0x080034fb
 80033c4:	0800350d 	.word	0x0800350d
 80033c8:	0800351f 	.word	0x0800351f
 80033cc:	0800353d 	.word	0x0800353d
 80033d0:	0800358d 	.word	0x0800358d
 80033d4:	080035dd 	.word	0x080035dd
 80033d8:	0800362d 	.word	0x0800362d
 80033dc:	0800367d 	.word	0x0800367d
 80033e0:	080036cd 	.word	0x080036cd
 80033e4:	0800371d 	.word	0x0800371d
 80033e8:	0800376d 	.word	0x0800376d
	case 0:
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	019a      	lsls	r2, r3, #6
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80033f8:	015b      	lsls	r3, r3, #5
 80033fa:	441a      	add	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	009b      	lsls	r3, r3, #2
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 800340a:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8003410:	4413      	add	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
		break;
 8003414:	e1d4      	b.n	80037c0 <get_register_value+0x448>

	case 1:
		regout = (p->vdd_sense_enable << 6) + p->adc_buffer_bias;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	019a      	lsls	r2, r3, #6
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	4413      	add	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
		break;
 8003424:	e1cc      	b.n	80037c0 <get_register_value+0x448>

	case 2:
		regout = p->mux_bias;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	60fb      	str	r3, [r7, #12]
		break;
 800342c:	e1c8      	b.n	80037c0 <get_register_value+0x448>

	case 3:
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	441a      	add	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	441a      	add	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003450:	005b      	lsls	r3, r3, #1
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8003452:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8003458:	4413      	add	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
		break;
 800345c:	e1b0      	b.n	80037c0 <get_register_value+0x448>

	case 4:
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003462:	01da      	lsls	r2, r3, #7
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	019b      	lsls	r3, r3, #6
 800346a:	441a      	add	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003470:	015b      	lsls	r3, r3, #5
 8003472:	441a      	add	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	441a      	add	r2, r3
			(p->DSP_cutoff_freq);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8003480:	4413      	add	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
		break;
 8003484:	e19c      	b.n	80037c0 <get_register_value+0x448>

	case 5:
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800348a:	019a      	lsls	r2, r3, #6
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003490:	015b      	lsls	r3, r3, #5
 8003492:	441a      	add	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	009b      	lsls	r3, r3, #2
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 80034a2:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	441a      	add	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 80034b0:	4413      	add	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
		break;
 80034b4:	e184      	b.n	80037c0 <get_register_value+0x448>

	case 6:
		regout = ZcheckDac;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	60fb      	str	r3, [r7, #12]
		break;
 80034ba:	e181      	b.n	80037c0 <get_register_value+0x448>

	case 7:
		regout = p->zcheck_select;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034c0:	60fb      	str	r3, [r7, #12]
		break;
 80034c2:	e17d      	b.n	80037c0 <get_register_value+0x448>

	case 8:
		regout = (p->off_chip_RH1 << 7) + p->rH1_DAC1;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034c8:	01da      	lsls	r2, r3, #7
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034d0:	4413      	add	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
		break;
 80034d4:	e174      	b.n	80037c0 <get_register_value+0x448>

	case 9:
		regout = (p->adc_Aux1_en << 7) + p->rH1_DAC2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034da:	01da      	lsls	r2, r3, #7
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e2:	4413      	add	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
		break;
 80034e6:	e16b      	b.n	80037c0 <get_register_value+0x448>

	case 10:
		regout = (p->off_chip_RH2 << 7) + p->rH2_DAC1;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ec:	01da      	lsls	r2, r3, #7
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034f4:	4413      	add	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
		break;
 80034f8:	e162      	b.n	80037c0 <get_register_value+0x448>

	case 11:
		regout = (p->adc_Aux2_en << 7) + p->rH2_DAC2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034fe:	01da      	lsls	r2, r3, #7
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003506:	4413      	add	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
		break;
 800350a:	e159      	b.n	80037c0 <get_register_value+0x448>

	case 12:
		regout = (p->off_chip_RL << 7) + p->rL_DAC1;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003510:	01da      	lsls	r2, r3, #7
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003518:	4413      	add	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
		break;
 800351c:	e150      	b.n	80037c0 <get_register_value+0x448>

	case 13:
		regout = (p->adc_Aux3_en << 7) + (p->rL_DAC3 << 6) + p->rL_DAC2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003524:	01da      	lsls	r2, r3, #7
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	441a      	add	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003536:	4413      	add	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
		break;
 800353a:	e141      	b.n	80037c0 <get_register_value+0x448>

	case 14:
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003542:	01da      	lsls	r2, r3, #7
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800354a:	019b      	lsls	r3, r3, #6
 800354c:	441a      	add	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003554:	015b      	lsls	r3, r3, #5
 8003556:	441a      	add	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003568:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 800356a:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	441a      	add	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	441a      	add	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8003586:	4413      	add	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
		break;
 800358a:	e119      	b.n	80037c0 <get_register_value+0x448>

	case 15:
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003592:	01da      	lsls	r2, r3, #7
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800359a:	019b      	lsls	r3, r3, #6
 800359c:	441a      	add	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80035a4:	015b      	lsls	r3, r3, #5
 80035a6:	441a      	add	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80035b8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 80035ba:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	441a      	add	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	441a      	add	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 80035d6:	4413      	add	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
		break;
 80035da:	e0f1      	b.n	80037c0 <get_register_value+0x448>

	case 16:
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80035e2:	01da      	lsls	r2, r3, #7
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80035ea:	019b      	lsls	r3, r3, #6
 80035ec:	441a      	add	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80035f4:	015b      	lsls	r3, r3, #5
 80035f6:	441a      	add	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003608:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 800360a:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	441a      	add	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8003626:	4413      	add	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
		break;
 800362a:	e0c9      	b.n	80037c0 <get_register_value+0x448>

	case 17:
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003632:	01da      	lsls	r2, r3, #7
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800363a:	019b      	lsls	r3, r3, #6
 800363c:	441a      	add	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003644:	015b      	lsls	r3, r3, #5
 8003646:	441a      	add	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003658:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 800365a:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	441a      	add	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	441a      	add	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8003676:	4413      	add	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
		break;
 800367a:	e0a1      	b.n	80037c0 <get_register_value+0x448>

	case 18:
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8003682:	01da      	lsls	r2, r3, #7
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800368a:	019b      	lsls	r3, r3, #6
 800368c:	441a      	add	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8003694:	015b      	lsls	r3, r3, #5
 8003696:	441a      	add	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	441a      	add	r2, r3
			(p->amp_pwr[35] << 3) + (p->amp_pwr[34] << 2) + (p->amp_pwr[33] << 1) + p->amp_pwr[32];
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80036a8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 80036aa:	441a      	add	r2, r3
			(p->amp_pwr[35] << 3) + (p->amp_pwr[34] << 2) + (p->amp_pwr[33] << 1) + p->amp_pwr[32];
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	441a      	add	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 80036c6:	4413      	add	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
		break;
 80036ca:	e079      	b.n	80037c0 <get_register_value+0x448>

	case 19:
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80036d2:	01da      	lsls	r2, r3, #7
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80036da:	019b      	lsls	r3, r3, #6
 80036dc:	441a      	add	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80036e4:	015b      	lsls	r3, r3, #5
 80036e6:	441a      	add	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	441a      	add	r2, r3
			(p->amp_pwr[43] << 3) + (p->amp_pwr[42] << 2) + (p->amp_pwr[41] << 1) + p->amp_pwr[40];
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80036f8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 80036fa:	441a      	add	r2, r3
			(p->amp_pwr[43] << 3) + (p->amp_pwr[42] << 2) + (p->amp_pwr[41] << 1) + p->amp_pwr[40];
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	441a      	add	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8003716:	4413      	add	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
		break;
 800371a:	e051      	b.n	80037c0 <get_register_value+0x448>

	case 20:
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8003722:	01da      	lsls	r2, r3, #7
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800372a:	019b      	lsls	r3, r3, #6
 800372c:	441a      	add	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8003734:	015b      	lsls	r3, r3, #5
 8003736:	441a      	add	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	441a      	add	r2, r3
			(p->amp_pwr[51] << 3) + (p->amp_pwr[50] << 2) + (p->amp_pwr[49] << 1) + p->amp_pwr[48];
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8003748:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 800374a:	441a      	add	r2, r3
			(p->amp_pwr[51] << 3) + (p->amp_pwr[50] << 2) + (p->amp_pwr[49] << 1) + p->amp_pwr[48];
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	441a      	add	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8003766:	4413      	add	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
		break;
 800376a:	e029      	b.n	80037c0 <get_register_value+0x448>

	case 21:
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8003772:	01da      	lsls	r2, r3, #7
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800377a:	019b      	lsls	r3, r3, #6
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8003784:	015b      	lsls	r3, r3, #5
 8003786:	441a      	add	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	441a      	add	r2, r3
			(p->amp_pwr[59] << 3) + (p->amp_pwr[58] << 2) + (p->amp_pwr[57] << 1) + p->amp_pwr[56];
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8003798:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 800379a:	441a      	add	r2, r3
			(p->amp_pwr[59] << 3) + (p->amp_pwr[58] << 2) + (p->amp_pwr[57] << 1) + p->amp_pwr[56];
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	441a      	add	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	441a      	add	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 80037b6:	4413      	add	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
		break;
 80037ba:	e001      	b.n	80037c0 <get_register_value+0x448>

	default:
		regout = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
	}
	return regout;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	b29b      	uxth	r3, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <convert_command>:
// A special case with channel = 63 can be used to cycle through successive amplifier channels,
// so long as at least one defined-channel convert command is called first.
// Once sent, SPI returns (2 commands later) the 16-bit result of this conversion.
// Command: 00_C[5]-C[0]_0000000H for channel C and hBit H
// Result:  A[15]-A[0] for ADC conversion output A
uint16_t convert_command(uint8_t channel, uint8_t h_bit) {
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	460a      	mov	r2, r1
 80037da:	71fb      	strb	r3, [r7, #7]
 80037dc:	4613      	mov	r3, r2
 80037de:	71bb      	strb	r3, [r7, #6]
	const uint16_t convert_mask = 0b0000000000000000;
 80037e0:	2300      	movs	r3, #0
 80037e2:	81fb      	strh	r3, [r7, #14]
	const uint16_t channel_mask = channel << 8;
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	81bb      	strh	r3, [r7, #12]
	const uint16_t h_bit_mask = (uint16_t) h_bit;
 80037ec:	79bb      	ldrb	r3, [r7, #6]
 80037ee:	817b      	strh	r3, [r7, #10]
	return convert_mask | channel_mask | h_bit_mask;
 80037f0:	89fa      	ldrh	r2, [r7, #14]
 80037f2:	89bb      	ldrh	r3, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	897b      	ldrh	r3, [r7, #10]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	b29b      	uxth	r3, r3
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <calibrate_command>:
// These dummy commands are not executed (unless another calibration command is sent, which resets the process).
// During the entire 9-command process, the results are all 0s except the for the MSB.
// The MSB will be 0 if 2's complement mode is enabled (see Register 4), otherwise it will be 1.
// Command: 01010101_00000000
// Result:  *0000000_00000000 where * depends on 2's complement mode
uint16_t calibrate_command() {
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0
	return 0b0101010100000000;
 800380e:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
}
 8003812:	4618      	mov	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <write_command>:
// echoed data that was written (to verify reception of correct data).
// Any attempt to write to a read-only register (or non-existent register) will produce this same result,
// but data will not be written to that register.
// Command: 10_R[5]-R[0]_D[7]-D[0]
// Result:  11111111_D[7]-D[0]
uint16_t write_command(uint8_t reg_addr, uint8_t data) {
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	460a      	mov	r2, r1
 8003826:	71fb      	strb	r3, [r7, #7]
 8003828:	4613      	mov	r3, r2
 800382a:	71bb      	strb	r3, [r7, #6]
	const uint16_t read_mask = 0b1000000000000000;
 800382c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003830:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	b29b      	uxth	r3, r3
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask | (uint16_t) data;
 800383a:	89fa      	ldrh	r2, [r7, #14]
 800383c:	89bb      	ldrh	r3, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	b29a      	uxth	r2, r3
 8003842:	79bb      	ldrb	r3, [r7, #6]
 8003844:	b29b      	uxth	r3, r3
 8003846:	4313      	orrs	r3, r2
 8003848:	b29b      	uxth	r3, r3
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <read_command>:

// Read contents of register.
// Once sent, SPI returns (2 commands later) 8 MSBs of 0s, and 8 LSBs of the read data.
// Command: 11_R[5]-R[0]_00000000
// Result:  00000000_D[7]-D[0]
uint16_t read_command(uint8_t reg_addr) {
 8003856:	b480      	push	{r7}
 8003858:	b085      	sub	sp, #20
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	71fb      	strb	r3, [r7, #7]
	const uint16_t read_mask = 0b1100000000000000;
 8003860:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003864:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	b29b      	uxth	r3, r3
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask;
 800386e:	89fa      	ldrh	r2, [r7, #14]
 8003870:	89bb      	ldrh	r3, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	b29b      	uxth	r3, r3
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800388a:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <HAL_MspInit+0x30>)
 800388c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003890:	4a08      	ldr	r2, [pc, #32]	@ (80038b4 <HAL_MspInit+0x30>)
 8003892:	f043 0304 	orr.w	r3, r3, #4
 8003896:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800389a:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <HAL_MspInit+0x30>)
 800389c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	46020c00 	.word	0x46020c00

080038b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b0c4      	sub	sp, #272	@ 0x110
 80038bc:	af00      	add	r7, sp, #0
 80038be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80038c6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038d8:	f107 0320 	add.w	r3, r7, #32
 80038dc:	22d8      	movs	r2, #216	@ 0xd8
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f00a ff9d 	bl	800e820 <memset>
  if(hspi->Instance==SPI1)
 80038e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a62      	ldr	r2, [pc, #392]	@ (8003a7c <HAL_SPI_MspInit+0x1c4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	f040 80cd 	bne.w	8003a94 <HAL_SPI_MspInit+0x1dc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80038fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8003906:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800390a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800390e:	f107 0320 	add.w	r3, r7, #32
 8003912:	4618      	mov	r0, r3
 8003914:	f003 fd3a 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_SPI_MspInit+0x6a>
    {
      Error_Handler();
 800391e:	f7fd ffdd 	bl	80018dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003922:	4b57      	ldr	r3, [pc, #348]	@ (8003a80 <HAL_SPI_MspInit+0x1c8>)
 8003924:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003928:	4a55      	ldr	r2, [pc, #340]	@ (8003a80 <HAL_SPI_MspInit+0x1c8>)
 800392a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800392e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003932:	4b53      	ldr	r3, [pc, #332]	@ (8003a80 <HAL_SPI_MspInit+0x1c8>)
 8003934:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003940:	4b4f      	ldr	r3, [pc, #316]	@ (8003a80 <HAL_SPI_MspInit+0x1c8>)
 8003942:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003946:	4a4e      	ldr	r2, [pc, #312]	@ (8003a80 <HAL_SPI_MspInit+0x1c8>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003950:	4b4b      	ldr	r3, [pc, #300]	@ (8003a80 <HAL_SPI_MspInit+0x1c8>)
 8003952:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800395e:	4b48      	ldr	r3, [pc, #288]	@ (8003a80 <HAL_SPI_MspInit+0x1c8>)
 8003960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003964:	4a46      	ldr	r2, [pc, #280]	@ (8003a80 <HAL_SPI_MspInit+0x1c8>)
 8003966:	f043 0302 	orr.w	r3, r3, #2
 800396a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800396e:	4b44      	ldr	r3, [pc, #272]	@ (8003a80 <HAL_SPI_MspInit+0x1c8>)
 8003970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 800397c:	2382      	movs	r3, #130	@ 0x82
 800397e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003982:	2302      	movs	r3, #2
 8003984:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398e:	2303      	movs	r3, #3
 8003990:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003994:	2305      	movs	r3, #5
 8003996:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800399e:	4619      	mov	r1, r3
 80039a0:	4838      	ldr	r0, [pc, #224]	@ (8003a84 <HAL_SPI_MspInit+0x1cc>)
 80039a2:	f001 fef3 	bl	800578c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	2302      	movs	r3, #2
 80039ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b8:	2303      	movs	r3, #3
 80039ba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039be:	2305      	movs	r3, #5
 80039c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80039c8:	4619      	mov	r1, r3
 80039ca:	482f      	ldr	r0, [pc, #188]	@ (8003a88 <HAL_SPI_MspInit+0x1d0>)
 80039cc:	f001 fede 	bl	800578c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* GPDMA1_REQUEST_SPI1_RX Init */
    handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 80039d0:	4b2e      	ldr	r3, [pc, #184]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 80039d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003a90 <HAL_SPI_MspInit+0x1d8>)
 80039d4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel13.Init.Request = GPDMA1_REQUEST_SPI1_RX;
 80039d6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 80039d8:	2206      	movs	r2, #6
 80039da:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel13.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80039dc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel13.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039e2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel13.Init.SrcInc = DMA_SINC_FIXED;
 80039e8:	4b28      	ldr	r3, [pc, #160]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel13.Init.DestInc = DMA_DINC_INCREMENTED;
 80039ee:	4b27      	ldr	r3, [pc, #156]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 80039f0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80039f4:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel13.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80039f6:	4b25      	ldr	r3, [pc, #148]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 80039f8:	2202      	movs	r2, #2
 80039fa:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel13.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80039fc:	4b23      	ldr	r3, [pc, #140]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 80039fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a02:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel13.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8003a04:	4b21      	ldr	r3, [pc, #132]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel13.Init.SrcBurstLength = 1;
 8003a0a:	4b20      	ldr	r3, [pc, #128]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel13.Init.DestBurstLength = 1;
 8003a10:	4b1e      	ldr	r3, [pc, #120]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel13.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8003a16:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel13.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel13.Init.Mode = DMA_NORMAL;
 8003a22:	4b1a      	ldr	r3, [pc, #104]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 8003a28:	4818      	ldr	r0, [pc, #96]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 8003a2a:	f000 ff6b 	bl	8004904 <HAL_DMA_Init>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_SPI_MspInit+0x180>
    {
      Error_Handler();
 8003a34:	f7fd ff52 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel13);
 8003a38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a12      	ldr	r2, [pc, #72]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 8003a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003a48:	4a10      	ldr	r2, [pc, #64]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 8003a4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003a56:	2110      	movs	r1, #16
 8003a58:	480c      	ldr	r0, [pc, #48]	@ (8003a8c <HAL_SPI_MspInit+0x1d4>)
 8003a5a:	f001 faf1 	bl	8005040 <HAL_DMA_ConfigChannelAttributes>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_SPI_MspInit+0x1b0>
    {
      Error_Handler();
 8003a64:	f7fd ff3a 	bl	80018dc <Error_Handler>
    }

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	203b      	movs	r0, #59	@ 0x3b
 8003a6e:	f000 fe6d 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003a72:	203b      	movs	r0, #59	@ 0x3b
 8003a74:	f000 fe84 	bl	8004780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003a78:	e0ed      	b.n	8003c56 <HAL_SPI_MspInit+0x39e>
 8003a7a:	bf00      	nop
 8003a7c:	40013000 	.word	0x40013000
 8003a80:	46020c00 	.word	0x46020c00
 8003a84:	42020000 	.word	0x42020000
 8003a88:	42020400 	.word	0x42020400
 8003a8c:	200001b4 	.word	0x200001b4
 8003a90:	400206d0 	.word	0x400206d0
  else if(hspi->Instance==SPI3)
 8003a94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a98:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a6f      	ldr	r2, [pc, #444]	@ (8003c60 <HAL_SPI_MspInit+0x3a8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	f040 80d7 	bne.w	8003c56 <HAL_SPI_MspInit+0x39e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003aa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 8003ab4:	2308      	movs	r3, #8
 8003ab6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003aba:	f107 0320 	add.w	r3, r7, #32
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f003 fc64 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_SPI_MspInit+0x216>
      Error_Handler();
 8003aca:	f7fd ff07 	bl	80018dc <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ace:	4b65      	ldr	r3, [pc, #404]	@ (8003c64 <HAL_SPI_MspInit+0x3ac>)
 8003ad0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ad4:	4a63      	ldr	r2, [pc, #396]	@ (8003c64 <HAL_SPI_MspInit+0x3ac>)
 8003ad6:	f043 0320 	orr.w	r3, r3, #32
 8003ada:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003ade:	4b61      	ldr	r3, [pc, #388]	@ (8003c64 <HAL_SPI_MspInit+0x3ac>)
 8003ae0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ae4:	f003 0220 	and.w	r2, r3, #32
 8003ae8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003aec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003af6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003afa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afc:	4b59      	ldr	r3, [pc, #356]	@ (8003c64 <HAL_SPI_MspInit+0x3ac>)
 8003afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b02:	4a58      	ldr	r2, [pc, #352]	@ (8003c64 <HAL_SPI_MspInit+0x3ac>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b0c:	4b55      	ldr	r3, [pc, #340]	@ (8003c64 <HAL_SPI_MspInit+0x3ac>)
 8003b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b12:	f003 0201 	and.w	r2, r3, #1
 8003b16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b28:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8003c64 <HAL_SPI_MspInit+0x3ac>)
 8003b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b30:	4a4c      	ldr	r2, [pc, #304]	@ (8003c64 <HAL_SPI_MspInit+0x3ac>)
 8003b32:	f043 0304 	orr.w	r3, r3, #4
 8003b36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c64 <HAL_SPI_MspInit+0x3ac>)
 8003b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b40:	f003 0204 	and.w	r2, r3, #4
 8003b44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b56:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b58:	2310      	movs	r3, #16
 8003b5a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b70:	2306      	movs	r3, #6
 8003b72:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b76:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	483a      	ldr	r0, [pc, #232]	@ (8003c68 <HAL_SPI_MspInit+0x3b0>)
 8003b7e:	f001 fe05 	bl	800578c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003b82:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b96:	2303      	movs	r3, #3
 8003b98:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b9c:	2306      	movs	r3, #6
 8003b9e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ba2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4830      	ldr	r0, [pc, #192]	@ (8003c6c <HAL_SPI_MspInit+0x3b4>)
 8003baa:	f001 fdef 	bl	800578c <HAL_GPIO_Init>
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8003bae:	4b30      	ldr	r3, [pc, #192]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003bb0:	4a30      	ldr	r2, [pc, #192]	@ (8003c74 <HAL_SPI_MspInit+0x3bc>)
 8003bb2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_SPI3_TX;
 8003bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003bb6:	220b      	movs	r2, #11
 8003bb8:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003bba:	4b2d      	ldr	r3, [pc, #180]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003bc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bc6:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_INCREMENTED;
 8003bc8:	4b29      	ldr	r3, [pc, #164]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003bca:	2208      	movs	r2, #8
 8003bcc:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_FIXED;
 8003bce:	4b28      	ldr	r3, [pc, #160]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8003bd4:	4b26      	ldr	r3, [pc, #152]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8003bda:	4b25      	ldr	r3, [pc, #148]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003bdc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003be0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8003be2:	4b23      	ldr	r3, [pc, #140]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 8003be8:	4b21      	ldr	r3, [pc, #132]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 8003bee:	4b20      	ldr	r3, [pc, #128]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 8003c00:	4b1b      	ldr	r3, [pc, #108]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8003c06:	481a      	ldr	r0, [pc, #104]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003c08:	f000 fe7c 	bl	8004904 <HAL_DMA_Init>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_SPI_MspInit+0x35e>
      Error_Handler();
 8003c12:	f7fd fe63 	bl	80018dc <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel12);
 8003c16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a13      	ldr	r2, [pc, #76]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003c22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003c26:	4a12      	ldr	r2, [pc, #72]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003c28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003c34:	2110      	movs	r1, #16
 8003c36:	480e      	ldr	r0, [pc, #56]	@ (8003c70 <HAL_SPI_MspInit+0x3b8>)
 8003c38:	f001 fa02 	bl	8005040 <HAL_DMA_ConfigChannelAttributes>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_SPI_MspInit+0x38e>
      Error_Handler();
 8003c42:	f7fd fe4b 	bl	80018dc <Error_Handler>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	2063      	movs	r0, #99	@ 0x63
 8003c4c:	f000 fd7e 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003c50:	2063      	movs	r0, #99	@ 0x63
 8003c52:	f000 fd95 	bl	8004780 <HAL_NVIC_EnableIRQ>
}
 8003c56:	bf00      	nop
 8003c58:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	46002000 	.word	0x46002000
 8003c64:	46020c00 	.word	0x46020c00
 8003c68:	42020000 	.word	0x42020000
 8003c6c:	42020800 	.word	0x42020800
 8003c70:	2000022c 	.word	0x2000022c
 8003c74:	40020650 	.word	0x40020650

08003c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	@ 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1a      	ldr	r2, [pc, #104]	@ (8003d00 <HAL_TIM_Base_MspInit+0x88>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d12d      	bne.n	8003cf6 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003d04 <HAL_TIM_Base_MspInit+0x8c>)
 8003c9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ca0:	4a18      	ldr	r2, [pc, #96]	@ (8003d04 <HAL_TIM_Base_MspInit+0x8c>)
 8003ca2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ca6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003caa:	4b16      	ldr	r3, [pc, #88]	@ (8003d04 <HAL_TIM_Base_MspInit+0x8c>)
 8003cac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cb8:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <HAL_TIM_Base_MspInit+0x8c>)
 8003cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cbe:	4a11      	ldr	r2, [pc, #68]	@ (8003d04 <HAL_TIM_Base_MspInit+0x8c>)
 8003cc0:	f043 0310 	orr.w	r3, r3, #16
 8003cc4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d04 <HAL_TIM_Base_MspInit+0x8c>)
 8003cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003cd6:	2380      	movs	r3, #128	@ 0x80
 8003cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cea:	f107 0314 	add.w	r3, r7, #20
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4805      	ldr	r0, [pc, #20]	@ (8003d08 <HAL_TIM_Base_MspInit+0x90>)
 8003cf2:	f001 fd4b 	bl	800578c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003cf6:	bf00      	nop
 8003cf8:	3728      	adds	r7, #40	@ 0x28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	46020c00 	.word	0x46020c00
 8003d08:	42021000 	.word	0x42021000

08003d0c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a0e      	ldr	r2, [pc, #56]	@ (8003d54 <HAL_TIM_OC_MspInit+0x48>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d116      	bne.n	8003d4c <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <HAL_TIM_OC_MspInit+0x4c>)
 8003d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d24:	4a0c      	ldr	r2, [pc, #48]	@ (8003d58 <HAL_TIM_OC_MspInit+0x4c>)
 8003d26:	f043 0302 	orr.w	r3, r3, #2
 8003d2a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d58 <HAL_TIM_OC_MspInit+0x4c>)
 8003d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2100      	movs	r1, #0
 8003d40:	202e      	movs	r0, #46	@ 0x2e
 8003d42:	f000 fd03 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d46:	202e      	movs	r0, #46	@ 0x2e
 8003d48:	f000 fd1a 	bl	8004780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40000400 	.word	0x40000400
 8003d58:	46020c00 	.word	0x46020c00

08003d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d64:	f107 030c 	add.w	r3, r7, #12
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a13      	ldr	r2, [pc, #76]	@ (8003dc8 <HAL_TIM_MspPostInit+0x6c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d11f      	bne.n	8003dbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d7e:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <HAL_TIM_MspPostInit+0x70>)
 8003d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d84:	4a11      	ldr	r2, [pc, #68]	@ (8003dcc <HAL_TIM_MspPostInit+0x70>)
 8003d86:	f043 0310 	orr.w	r3, r3, #16
 8003d8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003dcc <HAL_TIM_MspPostInit+0x70>)
 8003d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003da0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da2:	2302      	movs	r3, #2
 8003da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003daa:	2303      	movs	r3, #3
 8003dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003db2:	f107 030c 	add.w	r3, r7, #12
 8003db6:	4619      	mov	r1, r3
 8003db8:	4805      	ldr	r0, [pc, #20]	@ (8003dd0 <HAL_TIM_MspPostInit+0x74>)
 8003dba:	f001 fce7 	bl	800578c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003dbe:	bf00      	nop
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	46020c00 	.word	0x46020c00
 8003dd0:	42021000 	.word	0x42021000

08003dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b0c0      	sub	sp, #256	@ 0x100
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ddc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dec:	f107 0310 	add.w	r3, r7, #16
 8003df0:	22d8      	movs	r2, #216	@ 0xd8
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f00a fd13 	bl	800e820 <memset>
  if(huart->Instance==USART1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a58      	ldr	r2, [pc, #352]	@ (8003f60 <HAL_UART_MspInit+0x18c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	f040 80a7 	bne.w	8003f54 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e06:	f04f 0201 	mov.w	r2, #1
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e12:	2300      	movs	r3, #0
 8003e14:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e16:	f107 0310 	add.w	r3, r7, #16
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f003 fab6 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003e26:	f7fd fd59 	bl	80018dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e2a:	4b4e      	ldr	r3, [pc, #312]	@ (8003f64 <HAL_UART_MspInit+0x190>)
 8003e2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e30:	4a4c      	ldr	r2, [pc, #304]	@ (8003f64 <HAL_UART_MspInit+0x190>)
 8003e32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e36:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f64 <HAL_UART_MspInit+0x190>)
 8003e3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e48:	4b46      	ldr	r3, [pc, #280]	@ (8003f64 <HAL_UART_MspInit+0x190>)
 8003e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e4e:	4a45      	ldr	r2, [pc, #276]	@ (8003f64 <HAL_UART_MspInit+0x190>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003e58:	4b42      	ldr	r3, [pc, #264]	@ (8003f64 <HAL_UART_MspInit+0x190>)
 8003e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e80:	2307      	movs	r3, #7
 8003e82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e86:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4836      	ldr	r0, [pc, #216]	@ (8003f68 <HAL_UART_MspInit+0x194>)
 8003e8e:	f001 fc7d 	bl	800578c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003eac:	2307      	movs	r3, #7
 8003eae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	482b      	ldr	r0, [pc, #172]	@ (8003f68 <HAL_UART_MspInit+0x194>)
 8003eba:	f001 fc67 	bl	800578c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8003ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003ec0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f70 <HAL_UART_MspInit+0x19c>)
 8003ec2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8003ec4:	4b29      	ldr	r3, [pc, #164]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003ec6:	2219      	movs	r2, #25
 8003ec8:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003eca:	4b28      	ldr	r3, [pc, #160]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ed0:	4b26      	ldr	r3, [pc, #152]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003ed2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ed6:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8003ed8:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003eda:	2208      	movs	r2, #8
 8003edc:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8003ede:	4b23      	ldr	r3, [pc, #140]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8003ee4:	4b21      	ldr	r3, [pc, #132]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8003eea:	4b20      	ldr	r3, [pc, #128]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_HIGH_PRIORITY;
 8003ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003ef2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003ef6:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8003ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8003efe:	4b1b      	ldr	r3, [pc, #108]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8003f04:	4b19      	ldr	r3, [pc, #100]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003f0a:	4b18      	ldr	r3, [pc, #96]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8003f10:	4b16      	ldr	r3, [pc, #88]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8003f16:	4815      	ldr	r0, [pc, #84]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003f18:	f000 fcf4 	bl	8004904 <HAL_DMA_Init>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_UART_MspInit+0x152>
    {
      Error_Handler();
 8003f22:	f7fd fcdb 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel0);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a10      	ldr	r2, [pc, #64]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003f2a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003f32:	2110      	movs	r1, #16
 8003f34:	480d      	ldr	r0, [pc, #52]	@ (8003f6c <HAL_UART_MspInit+0x198>)
 8003f36:	f001 f883 	bl	8005040 <HAL_DMA_ConfigChannelAttributes>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8003f40:	f7fd fccc 	bl	80018dc <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f44:	2200      	movs	r2, #0
 8003f46:	2100      	movs	r1, #0
 8003f48:	203d      	movs	r0, #61	@ 0x3d
 8003f4a:	f000 fbff 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f4e:	203d      	movs	r0, #61	@ 0x3d
 8003f50:	f000 fc16 	bl	8004780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003f54:	bf00      	nop
 8003f56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40013800 	.word	0x40013800
 8003f64:	46020c00 	.word	0x46020c00
 8003f68:	42020000 	.word	0x42020000
 8003f6c:	200003d0 	.word	0x200003d0
 8003f70:	40020050 	.word	0x40020050

08003f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f78:	bf00      	nop
 8003f7a:	e7fd      	b.n	8003f78 <NMI_Handler+0x4>

08003f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f80:	bf00      	nop
 8003f82:	e7fd      	b.n	8003f80 <HardFault_Handler+0x4>

08003f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f88:	bf00      	nop
 8003f8a:	e7fd      	b.n	8003f88 <MemManage_Handler+0x4>

08003f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f90:	bf00      	nop
 8003f92:	e7fd      	b.n	8003f90 <BusFault_Handler+0x4>

08003f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f98:	bf00      	nop
 8003f9a:	e7fd      	b.n	8003f98 <UsageFault_Handler+0x4>

08003f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fa0:	bf00      	nop
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003faa:	b480      	push	{r7}
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SysTick_counter++;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <SysTick_Handler+0x20>)
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	1c50      	adds	r0, r2, #1
 8003fd4:	f143 0100 	adc.w	r1, r3, #0
 8003fd8:	4b03      	ldr	r3, [pc, #12]	@ (8003fe8 <SysTick_Handler+0x20>)
 8003fda:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fde:	f000 fab9 	bl	8004554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000828 	.word	0x20000828

08003fec <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_usart_tx();
#endif
  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8003ff0:	4802      	ldr	r0, [pc, #8]	@ (8003ffc <GPDMA1_Channel0_IRQHandler+0x10>)
 8003ff2:	f000 feb8 	bl	8004d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200003d0 	.word	0x200003d0

08004000 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
	if (!LL_TIM_IsActiveFlag_UPDATE(INTERRUPT_TIM)) return; // Ignore any non-UPDATE events that may  have generated this interrupt
	LL_TIM_ClearFlag_UPDATE(INTERRUPT_TIM); // If this was an UPDATE event, clear the flag and proceed with interrupt routine
	sample_interrupt_routine();
#endif
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004004:	4802      	ldr	r0, [pc, #8]	@ (8004010 <TIM3_IRQHandler+0x10>)
 8004006:	f007 fd84 	bl	800bb12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200002f0 	.word	0x200002f0

08004014 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine_rx();
#endif
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004018:	4802      	ldr	r0, [pc, #8]	@ (8004024 <SPI1_IRQHandler+0x10>)
 800401a:	f006 fd97 	bl	800ab4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800401e:	bf00      	nop
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000094 	.word	0x20000094

08004028 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
#ifndef USE_HAL
	uart_interrupt_routine();
#endif
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800402c:	4802      	ldr	r0, [pc, #8]	@ (8004038 <USART1_IRQHandler+0x10>)
 800402e:	f009 fa0f 	bl	800d450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	2000033c 	.word	0x2000033c

0800403c <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_tx();
#endif
  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8004040:	4802      	ldr	r0, [pc, #8]	@ (800404c <GPDMA1_Channel12_IRQHandler+0x10>)
 8004042:	f000 fe90 	bl	8004d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	2000022c 	.word	0x2000022c

08004050 <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_rx();
#endif
  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 8004054:	4802      	ldr	r0, [pc, #8]	@ (8004060 <GPDMA1_Channel13_IRQHandler+0x10>)
 8004056:	f000 fe86 	bl	8004d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200001b4 	.word	0x200001b4

08004064 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine_tx();
#endif
  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004068:	4802      	ldr	r0, [pc, #8]	@ (8004074 <SPI3_IRQHandler+0x10>)
 800406a:	f006 fd6f 	bl	800ab4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000124 	.word	0x20000124

08004078 <HAL_TIM_PeriodElapsedCallback>:

#ifdef USE_HAL

// This HAL function is called when the timer reaches its counter target - execute interrupt routine when this happens
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	sample_interrupt_routine();
 8004080:	f7fd fc44 	bl	800190c <sample_interrupt_routine>
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004094:	4a14      	ldr	r2, [pc, #80]	@ (80040e8 <_sbrk+0x5c>)
 8004096:	4b15      	ldr	r3, [pc, #84]	@ (80040ec <_sbrk+0x60>)
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040a0:	4b13      	ldr	r3, [pc, #76]	@ (80040f0 <_sbrk+0x64>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040a8:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <_sbrk+0x64>)
 80040aa:	4a12      	ldr	r2, [pc, #72]	@ (80040f4 <_sbrk+0x68>)
 80040ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040ae:	4b10      	ldr	r3, [pc, #64]	@ (80040f0 <_sbrk+0x64>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d207      	bcs.n	80040cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040bc:	f00a fbc8 	bl	800e850 <__errno>
 80040c0:	4603      	mov	r3, r0
 80040c2:	220c      	movs	r2, #12
 80040c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ca:	e009      	b.n	80040e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040cc:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <_sbrk+0x64>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040d2:	4b07      	ldr	r3, [pc, #28]	@ (80040f0 <_sbrk+0x64>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4413      	add	r3, r2
 80040da:	4a05      	ldr	r2, [pc, #20]	@ (80040f0 <_sbrk+0x64>)
 80040dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040de:	68fb      	ldr	r3, [r7, #12]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20270000 	.word	0x20270000
 80040ec:	00000400 	.word	0x00000400
 80040f0:	20000830 	.word	0x20000830
 80040f4:	20000980 	.word	0x20000980

080040f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80040fc:	4b18      	ldr	r3, [pc, #96]	@ (8004160 <SystemInit+0x68>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004102:	4a17      	ldr	r2, [pc, #92]	@ (8004160 <SystemInit+0x68>)
 8004104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800410c:	4b15      	ldr	r3, [pc, #84]	@ (8004164 <SystemInit+0x6c>)
 800410e:	2201      	movs	r2, #1
 8004110:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8004112:	4b14      	ldr	r3, [pc, #80]	@ (8004164 <SystemInit+0x6c>)
 8004114:	2200      	movs	r2, #0
 8004116:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004118:	4b12      	ldr	r3, [pc, #72]	@ (8004164 <SystemInit+0x6c>)
 800411a:	2200      	movs	r2, #0
 800411c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800411e:	4b11      	ldr	r3, [pc, #68]	@ (8004164 <SystemInit+0x6c>)
 8004120:	2200      	movs	r2, #0
 8004122:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8004124:	4b0f      	ldr	r3, [pc, #60]	@ (8004164 <SystemInit+0x6c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a0e      	ldr	r2, [pc, #56]	@ (8004164 <SystemInit+0x6c>)
 800412a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800412e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8004132:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8004134:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <SystemInit+0x6c>)
 8004136:	2200      	movs	r2, #0
 8004138:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800413a:	4b0a      	ldr	r3, [pc, #40]	@ (8004164 <SystemInit+0x6c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a09      	ldr	r2, [pc, #36]	@ (8004164 <SystemInit+0x6c>)
 8004140:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004144:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8004146:	4b07      	ldr	r3, [pc, #28]	@ (8004164 <SystemInit+0x6c>)
 8004148:	2200      	movs	r2, #0
 800414a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800414c:	4b04      	ldr	r3, [pc, #16]	@ (8004160 <SystemInit+0x68>)
 800414e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004152:	609a      	str	r2, [r3, #8]
  #endif
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000ed00 	.word	0xe000ed00
 8004164:	46020c00 	.word	0x46020c00

08004168 <loop_escape>:
uint16_t samples[2 * NUM_SAMPLED_CHANNELS];

// Specify condition that should result in the main while loop ending.
// By default, escape once 1 second of data has been gathered.
int loop_escape()
{
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	af00      	add	r7, sp, #0
	// Escape once SAMPLES_IN_MEMORY samples have been gathered.
#ifdef OFFLINE_TRANSFER
	return sample_counter > calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <loop_escape+0x38>)
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	4618      	mov	r0, r3
 8004174:	f7fc f9de 	bl	8000534 <__aeabi_i2d>
 8004178:	4604      	mov	r4, r0
 800417a:	460d      	mov	r5, r1
 800417c:	f7fd fd62 	bl	8001c44 <calculate_sample_rate>
 8004180:	ec53 2b10 	vmov	r2, r3, d0
 8004184:	2101      	movs	r1, #1
 8004186:	460e      	mov	r6, r1
 8004188:	4620      	mov	r0, r4
 800418a:	4629      	mov	r1, r5
 800418c:	f7fc fccc 	bl	8000b28 <__aeabi_dcmpgt>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <loop_escape+0x32>
 8004196:	2300      	movs	r3, #0
 8004198:	461e      	mov	r6, r3
 800419a:	b2f3      	uxtb	r3, r6
#else
	return 0;
#endif
}
 800419c:	4618      	mov	r0, r3
 800419e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a0:	2000051c 	.word	0x2000051c

080041a4 <write_data_to_memory>:


// Write any desired data from this sequence to memory.
// By default, only the result corresponding to a CONVERT on FIRST_SAMPLED_CHANNEL is saved per sequence.
void write_data_to_memory()
{
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
#ifdef OFFLINE_TRANSFER
	// Extract 2 16-bit samples interleaved (stream A and stream B) from each 32-bit word, and save to sample_memory
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 80041aa:	2300      	movs	r3, #0
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	e020      	b.n	80041f2 <write_data_to_memory+0x4e>
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3307      	adds	r3, #7
 80041b4:	4a16      	ldr	r2, [pc, #88]	@ (8004210 <write_data_to_memory+0x6c>)
 80041b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80041ba:	4b16      	ldr	r3, [pc, #88]	@ (8004214 <write_data_to_memory+0x70>)
 80041bc:	681a      	ldr	r2, [r3, #0]
				&sample_memory[(sample_counter * NUM_SAMPLED_CHANNELS * 2) + i],
 80041be:	4b16      	ldr	r3, [pc, #88]	@ (8004218 <write_data_to_memory+0x74>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	00d9      	lsls	r1, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	440b      	add	r3, r1
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	18d4      	adds	r4, r2, r3
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 80041ce:	4b11      	ldr	r3, [pc, #68]	@ (8004214 <write_data_to_memory+0x70>)
 80041d0:	681a      	ldr	r2, [r3, #0]
				&sample_memory[(sample_counter * NUM_SAMPLED_CHANNELS * 2) + i + NUM_SAMPLED_CHANNELS]);
 80041d2:	4b11      	ldr	r3, [pc, #68]	@ (8004218 <write_data_to_memory+0x74>)
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	00d9      	lsls	r1, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	440b      	add	r3, r1
 80041de:	3304      	adds	r3, #4
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	4413      	add	r3, r2
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 80041e4:	461a      	mov	r2, r3
 80041e6:	4621      	mov	r1, r4
 80041e8:	f7fd fc9d 	bl	8001b26 <extract_ddr_words>
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3301      	adds	r3, #1
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	dddb      	ble.n	80041b0 <write_data_to_memory+0xc>
	}
	sample_counter++;
 80041f8:	4b07      	ldr	r3, [pc, #28]	@ (8004218 <write_data_to_memory+0x74>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3301      	adds	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <write_data_to_memory+0x74>)
 8004204:	801a      	strh	r2, [r3, #0]
//	uint16_t aux2_result_A, aux2_result_B;
//	extract_ddr_words(command_sequence_MISO[34], &aux0_result_A, &aux0_result_B); // Result of AUX SLOT 1 from this command sequence
//	extract_ddr_words(command_sequence_MISO[0],  &aux1_result_A, &aux1_result_B); // Result of AUX SLOT 2 from the previous command sequence
//	extract_ddr_words(command_sequence_MISO[1],  &aux2_result_A, &aux2_result_B); // Result of AUX SLOT 3 from the previous command sequence
#endif
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bd90      	pop	{r4, r7, pc}
 800420e:	bf00      	nop
 8004210:	20000490 	.word	0x20000490
 8004214:	20000520 	.word	0x20000520
 8004218:	2000051c 	.word	0x2000051c

0800421c <transmit_data_realtime>:


// Determine if data is ready to be transmitted, and if so, transmit (for example via USART).
void transmit_data_realtime()
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
				&samples[i],
				&samples[i + NUM_SAMPLED_CHANNELS]);
	}
	transmit_dma_to_usart(samples, NUM_SAMPLED_CHANNELS * 2 * sizeof(uint16_t));
#endif
}
 8004220:	bf00      	nop
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <transmit_data_offline>:


// Transmit accumulated data after acquisition has finished (for example via USART).
void transmit_data_offline()
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
	// into very small chunks seems to be the most reliable at high Baud rates.

	// We do the same thing for LL, for consistency - optimized performance is not critical for offline transfers, so there is likely
	// no significant downside to chunking data into many smaller transfers.

	uint16_t samples_per_chunk = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	827b      	strh	r3, [r7, #18]
	uint32_t total_samples_in_memory = NUM_SAMPLED_CHANNELS * 2 * calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 8004236:	f7fd fd05 	bl	8001c44 <calculate_sample_rate>
 800423a:	ec51 0b10 	vmov	r0, r1, d0
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	4b31      	ldr	r3, [pc, #196]	@ (8004308 <transmit_data_offline+0xdc>)
 8004244:	f7fc f9e0 	bl	8000608 <__aeabi_dmul>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4610      	mov	r0, r2
 800424e:	4619      	mov	r1, r3
 8004250:	f7fc fc8a 	bl	8000b68 <__aeabi_d2uiz>
 8004254:	4603      	mov	r3, r0
 8004256:	60fb      	str	r3, [r7, #12]
	uint32_t num_chunks = floor(total_samples_in_memory / samples_per_chunk);
 8004258:	8a7b      	ldrh	r3, [r7, #18]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	4618      	mov	r0, r3
 8004262:	f7fc f957 	bl	8000514 <__aeabi_ui2d>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4610      	mov	r0, r2
 800426c:	4619      	mov	r1, r3
 800426e:	f7fc fc7b 	bl	8000b68 <__aeabi_d2uiz>
 8004272:	4603      	mov	r3, r0
 8004274:	60bb      	str	r3, [r7, #8]
	uint16_t remaining_samples = total_samples_in_memory % samples_per_chunk;
 8004276:	8a7a      	ldrh	r2, [r7, #18]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	fbb3 f1f2 	udiv	r1, r3, r2
 800427e:	fb01 f202 	mul.w	r2, r1, r2
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]

	// Transmit multiple complete chunks of data
	for (int i = 0; i < num_chunks; i++) {
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	e01a      	b.n	80042c2 <transmit_data_offline+0x96>
		uart_ready = 0;
 800428c:	4b1f      	ldr	r3, [pc, #124]	@ (800430c <transmit_data_offline+0xe0>)
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * i], samples_per_chunk * sizeof(uint16_t));
 8004292:	4b1f      	ldr	r3, [pc, #124]	@ (8004310 <transmit_data_offline+0xe4>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	8a7b      	ldrh	r3, [r7, #18]
 8004298:	6979      	ldr	r1, [r7, #20]
 800429a:	fb01 f303 	mul.w	r3, r1, r3
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	441a      	add	r2, r3
 80042a2:	8a7b      	ldrh	r3, [r7, #18]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f000 f86a 	bl	8004384 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 80042b0:	bf00      	nop
 80042b2:	4b16      	ldr	r3, [pc, #88]	@ (800430c <transmit_data_offline+0xe0>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d1fa      	bne.n	80042b2 <transmit_data_offline+0x86>
	for (int i = 0; i < num_chunks; i++) {
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	3301      	adds	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d8e0      	bhi.n	800428c <transmit_data_offline+0x60>
	}

	// Transmit any remaining data too small to fit in a complete chunk
	if (remaining_samples > 0) {
 80042ca:	88fb      	ldrh	r3, [r7, #6]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d017      	beq.n	8004300 <transmit_data_offline+0xd4>
		uart_ready = 0;
 80042d0:	4b0e      	ldr	r3, [pc, #56]	@ (800430c <transmit_data_offline+0xe0>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * num_chunks], remaining_samples * sizeof(uint16_t));
 80042d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004310 <transmit_data_offline+0xe4>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	8a7b      	ldrh	r3, [r7, #18]
 80042dc:	68b9      	ldr	r1, [r7, #8]
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	441a      	add	r2, r3
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f000 f848 	bl	8004384 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 80042f4:	bf00      	nop
 80042f6:	4b05      	ldr	r3, [pc, #20]	@ (800430c <transmit_data_offline+0xe0>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d1fa      	bne.n	80042f6 <transmit_data_offline+0xca>
	}
}
 8004300:	bf00      	nop
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40200000 	.word	0x40200000
 800430c:	20000004 	.word	0x20000004
 8004310:	20000520 	.word	0x20000520

08004314 <configure_registers>:

// Configure and transmit register values.
// Initial register values default to the same default settings in the RHX software.
// Any desired changes to these values added after the 'write_initial_reg_values()' function call.
void configure_registers(RHDConfigParameters *parameters)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	write_initial_reg_values(parameters);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fd fc29 	bl	8001b74 <write_initial_reg_values>
//	// Reg 6: (Actual DAC value which changes over time - instead of setting once here, this should be written sample-by-sample in an aux command list).
//
//	// Reg 7: Set zcheck_select
//	set_zcheck_channel(parameters, FIRST_SAMPLED_CHANNEL);
//	write_command(7, get_register_value(parameters, 7));
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <configure_convert_commands>:


// Configure the CONVERT commands that are loaded at the beginning of command_sequence_MOSI.
// By default, channels from 0 to CONVERT_COMMANDS_PER_SEQUENCE - 1 (0 to 31) are loaded consecutively (0, 1, 2, 3, ... 31).
void configure_convert_commands()
{
 800432a:	b580      	push	{r7, lr}
 800432c:	af00      	add	r7, sp, #0
	// If default ordering of channel CONVERT commands (0, 1, 2, 3, ... 31) is desired, pass a NULL 2nd parameter to create_convert_sequence().
	create_convert_sequence(NULL);
 800432e:	2000      	movs	r0, #0
 8004330:	f7fd fce6 	bl	8001d00 <create_convert_sequence>
	//	uint8_t channel_numbers[CONVERT_COMMANDS_PER_SEQUENCE] = {0};
	//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
	//		channel_numbers[i] = (CONVERT_COMMANDS_PER_SEQUENCE - 1) - i;
	//	}
	//	create_convert_sequence((uint16_t*) command_sequence_MOSI, channel_numbers);
}
 8004334:	bf00      	nop
 8004336:	bd80      	pop	{r7, pc}

08004338 <configure_aux_commands>:


// Configure the AUX commands that are loaded at the end of command_sequence_MOSI.
// By defaults, command lists from 0 to AUX_COMMANDS_PER_SEQUENCE - 1 (0 to 2) are loaded consecutively (32, 33, 34).
void configure_aux_commands(RHDConfigParameters *parameters)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	  // desired frequency, so if using this command list it's important to set zcheck_DAC_command_slot_position to 0, 1, or
	  // 2 (one of the 3 command slots) to indicate its position, and set zcheck_DAC_command_list_length so that during
	  // execution of this list, after the length has been reached it can begin at 0 again.

	// Slot 0: Write RHD register loading to aux_command_list[0], so that the register values saved in software (parameters) are continually re-written.
	create_command_list_RHD_register_config(parameters, (uint16_t*) aux_command_list[0], 0, AUX_COMMAND_LIST_LENGTH);
 8004340:	2380      	movs	r3, #128	@ 0x80
 8004342:	2200      	movs	r2, #0
 8004344:	490c      	ldr	r1, [pc, #48]	@ (8004378 <configure_aux_commands+0x40>)
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fd fd14 	bl	8001d74 <create_command_list_RHD_register_config>

	// Slot 1: Write dummy reads to aux_command_list[1], so that register 40 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[1], AUX_COMMAND_LIST_LENGTH, read_command(40));
 800434c:	2028      	movs	r0, #40	@ 0x28
 800434e:	f7ff fa82 	bl	8003856 <read_command>
 8004352:	4603      	mov	r3, r0
 8004354:	2280      	movs	r2, #128	@ 0x80
 8004356:	4909      	ldr	r1, [pc, #36]	@ (800437c <configure_aux_commands+0x44>)
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7fd fe6a 	bl	8002032 <create_command_list_dummy>

	// Slot 2: Write dummy reads to aux_command_list[2], so that register 41 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[2], AUX_COMMAND_LIST_LENGTH, read_command(41));
 800435e:	2029      	movs	r0, #41	@ 0x29
 8004360:	f7ff fa79 	bl	8003856 <read_command>
 8004364:	4603      	mov	r3, r0
 8004366:	2280      	movs	r2, #128	@ 0x80
 8004368:	4905      	ldr	r1, [pc, #20]	@ (8004380 <configure_aux_commands+0x48>)
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd fe61 	bl	8002032 <create_command_list_dummy>
	// zcheck_DAC commands can have different lengths depending on desired frequency. To handle this, be sure to:
	// a) assign create_command_list_zcheck_DAC()'s return value to zcheck_DAC_command_list_length, and
	// b) assign which command slot the zcheck_DAC command list is in to zcheck_DAC_command_slot_position.
//	zcheck_DAC_command_list_length = create_command_list_zcheck_DAC(parameters, (uint16_t*) aux_command_list[2], 1000.0, 100);
//	zcheck_DAC_command_slot_position = 2;
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000524 	.word	0x20000524
 800437c:	20000624 	.word	0x20000624
 8004380:	20000724 	.word	0x20000724

08004384 <transmit_dma_to_usart>:

// Use DMA to transmit num_bytes of data from memory pointer tx_data directly to USART.
// Non-blocking, so it may be helpful to set the 'uart_ready' variable to 0 prior to this function call,
// monitor it, and hold off on further transmissions until the USART Tx complete callback sets it to 1.
void transmit_dma_to_usart(volatile uint16_t *tx_data, uint16_t num_bytes)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	807b      	strh	r3, [r7, #2]
#ifdef USE_HAL
	if (HAL_UART_Transmit_DMA(&USART, (uint8_t*) tx_data, num_bytes) != HAL_OK)
 8004390:	887b      	ldrh	r3, [r7, #2]
 8004392:	461a      	mov	r2, r3
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4806      	ldr	r0, [pc, #24]	@ (80043b0 <transmit_dma_to_usart+0x2c>)
 8004398:	f008 ff92 	bl	800d2c0 <HAL_UART_Transmit_DMA>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <transmit_dma_to_usart+0x22>
	{
		Error_Handler();
 80043a2:	f7fd fa9b 	bl	80018dc <Error_Handler>
	LL_DMA_EnableChannel(DMA, DMA_USART_CHANNEL);

	// Enable DMA transfer for transmit request by setting DMAT bit in UART CR3 register
	LL_USART_EnableDMAReq_TX(USART);
#endif
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	2000033c 	.word	0x2000033c

080043b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80043b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80043ec <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80043b8:	f7ff fe9e 	bl	80040f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80043bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80043be:	e003      	b.n	80043c8 <LoopCopyDataInit>

080043c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80043c0:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80043c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80043c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80043c6:	3104      	adds	r1, #4

080043c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80043c8:	480a      	ldr	r0, [pc, #40]	@ (80043f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80043ca:	4b0b      	ldr	r3, [pc, #44]	@ (80043f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80043cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80043ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80043d0:	d3f6      	bcc.n	80043c0 <CopyDataInit>
	ldr	r2, =_sbss
 80043d2:	4a0a      	ldr	r2, [pc, #40]	@ (80043fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80043d4:	e002      	b.n	80043dc <LoopFillZerobss>

080043d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80043d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80043d8:	f842 3b04 	str.w	r3, [r2], #4

080043dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80043dc:	4b08      	ldr	r3, [pc, #32]	@ (8004400 <LoopForever+0x16>)
	cmp	r2, r3
 80043de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80043e0:	d3f9      	bcc.n	80043d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043e2:	f00a fa3b 	bl	800e85c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043e6:	f7fc fd9d 	bl	8000f24 <main>

080043ea <LoopForever>:

LoopForever:
    b LoopForever
 80043ea:	e7fe      	b.n	80043ea <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80043ec:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80043f0:	0800ff48 	.word	0x0800ff48
	ldr	r0, =_sdata
 80043f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80043f8:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80043fc:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8004400:	2000097d 	.word	0x2000097d

08004404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004404:	e7fe      	b.n	8004404 <ADC1_2_IRQHandler>
	...

08004408 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800440c:	4b12      	ldr	r3, [pc, #72]	@ (8004458 <HAL_Init+0x50>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a11      	ldr	r2, [pc, #68]	@ (8004458 <HAL_Init+0x50>)
 8004412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004418:	2003      	movs	r0, #3
 800441a:	f000 f98c 	bl	8004736 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800441e:	f002 fdd7 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8004422:	4602      	mov	r2, r0
 8004424:	4b0d      	ldr	r3, [pc, #52]	@ (800445c <HAL_Init+0x54>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	490c      	ldr	r1, [pc, #48]	@ (8004460 <HAL_Init+0x58>)
 800442e:	5ccb      	ldrb	r3, [r1, r3]
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	4a0b      	ldr	r2, [pc, #44]	@ (8004464 <HAL_Init+0x5c>)
 8004436:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004438:	2004      	movs	r0, #4
 800443a:	f000 f9d1 	bl	80047e0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800443e:	200f      	movs	r0, #15
 8004440:	f000 f812 	bl	8004468 <HAL_InitTick>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e002      	b.n	8004454 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800444e:	f7ff fa19 	bl	8003884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40022000 	.word	0x40022000
 800445c:	46020c00 	.word	0x46020c00
 8004460:	0800fe00 	.word	0x0800fe00
 8004464:	20000008 	.word	0x20000008

08004468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004474:	4b33      	ldr	r3, [pc, #204]	@ (8004544 <HAL_InitTick+0xdc>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e05c      	b.n	800453a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8004480:	4b31      	ldr	r3, [pc, #196]	@ (8004548 <HAL_InitTick+0xe0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b04      	cmp	r3, #4
 800448a:	d10c      	bne.n	80044a6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800448c:	4b2f      	ldr	r3, [pc, #188]	@ (800454c <HAL_InitTick+0xe4>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b2c      	ldr	r3, [pc, #176]	@ (8004544 <HAL_InitTick+0xdc>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	4619      	mov	r1, r3
 8004496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800449a:	fbb3 f3f1 	udiv	r3, r3, r1
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e037      	b.n	8004516 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80044a6:	f000 f9f3 	bl	8004890 <HAL_SYSTICK_GetCLKSourceConfig>
 80044aa:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d023      	beq.n	80044fa <HAL_InitTick+0x92>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d82d      	bhi.n	8004514 <HAL_InitTick+0xac>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_InitTick+0x5e>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d00d      	beq.n	80044e0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80044c4:	e026      	b.n	8004514 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80044c6:	4b21      	ldr	r3, [pc, #132]	@ (800454c <HAL_InitTick+0xe4>)
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004544 <HAL_InitTick+0xdc>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	4619      	mov	r1, r3
 80044d0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80044d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	60fb      	str	r3, [r7, #12]
        break;
 80044de:	e01a      	b.n	8004516 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80044e0:	4b18      	ldr	r3, [pc, #96]	@ (8004544 <HAL_InitTick+0xdc>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ee:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	60fb      	str	r3, [r7, #12]
        break;
 80044f8:	e00d      	b.n	8004516 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80044fa:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <HAL_InitTick+0xdc>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004504:	fbb3 f3f2 	udiv	r3, r3, r2
 8004508:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	60fb      	str	r3, [r7, #12]
        break;
 8004512:	e000      	b.n	8004516 <HAL_InitTick+0xae>
        break;
 8004514:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f940 	bl	800479c <HAL_SYSTICK_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e009      	b.n	800453a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004526:	2200      	movs	r2, #0
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	f04f 30ff 	mov.w	r0, #4294967295
 800452e:	f000 f90d 	bl	800474c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8004532:	4a07      	ldr	r2, [pc, #28]	@ (8004550 <HAL_InitTick+0xe8>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000010 	.word	0x20000010
 8004548:	e000e010 	.word	0xe000e010
 800454c:	20000008 	.word	0x20000008
 8004550:	2000000c 	.word	0x2000000c

08004554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004558:	4b06      	ldr	r3, [pc, #24]	@ (8004574 <HAL_IncTick+0x20>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <HAL_IncTick+0x24>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4413      	add	r3, r2
 8004564:	4a04      	ldr	r2, [pc, #16]	@ (8004578 <HAL_IncTick+0x24>)
 8004566:	6013      	str	r3, [r2, #0]
}
 8004568:	bf00      	nop
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000010 	.word	0x20000010
 8004578:	20000834 	.word	0x20000834

0800457c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return uwTick;
 8004580:	4b03      	ldr	r3, [pc, #12]	@ (8004590 <HAL_GetTick+0x14>)
 8004582:	681b      	ldr	r3, [r3, #0]
}
 8004584:	4618      	mov	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20000834 	.word	0x20000834

08004594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800459c:	f7ff ffee 	bl	800457c <HAL_GetTick>
 80045a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d005      	beq.n	80045ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ae:	4b0a      	ldr	r3, [pc, #40]	@ (80045d8 <HAL_Delay+0x44>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045ba:	bf00      	nop
 80045bc:	f7ff ffde 	bl	800457c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d8f7      	bhi.n	80045bc <HAL_Delay+0x28>
  {
  }
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000010 	.word	0x20000010

080045dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004620 <__NVIC_SetPriorityGrouping+0x44>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045f8:	4013      	ands	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800460c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800460e:	4a04      	ldr	r2, [pc, #16]	@ (8004620 <__NVIC_SetPriorityGrouping+0x44>)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	60d3      	str	r3, [r2, #12]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004628:	4b04      	ldr	r3, [pc, #16]	@ (800463c <__NVIC_GetPriorityGrouping+0x18>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	0a1b      	lsrs	r3, r3, #8
 800462e:	f003 0307 	and.w	r3, r3, #7
}
 8004632:	4618      	mov	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800464a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800464e:	2b00      	cmp	r3, #0
 8004650:	db0b      	blt.n	800466a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	f003 021f 	and.w	r2, r3, #31
 8004658:	4907      	ldr	r1, [pc, #28]	@ (8004678 <__NVIC_EnableIRQ+0x38>)
 800465a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	2001      	movs	r0, #1
 8004662:	fa00 f202 	lsl.w	r2, r0, r2
 8004666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	e000e100 	.word	0xe000e100

0800467c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	6039      	str	r1, [r7, #0]
 8004686:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800468c:	2b00      	cmp	r3, #0
 800468e:	db0a      	blt.n	80046a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	b2da      	uxtb	r2, r3
 8004694:	490c      	ldr	r1, [pc, #48]	@ (80046c8 <__NVIC_SetPriority+0x4c>)
 8004696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800469a:	0112      	lsls	r2, r2, #4
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	440b      	add	r3, r1
 80046a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046a4:	e00a      	b.n	80046bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	4908      	ldr	r1, [pc, #32]	@ (80046cc <__NVIC_SetPriority+0x50>)
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	3b04      	subs	r3, #4
 80046b4:	0112      	lsls	r2, r2, #4
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	440b      	add	r3, r1
 80046ba:	761a      	strb	r2, [r3, #24]
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000e100 	.word	0xe000e100
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b089      	sub	sp, #36	@ 0x24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f1c3 0307 	rsb	r3, r3, #7
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	bf28      	it	cs
 80046ee:	2304      	movcs	r3, #4
 80046f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d902      	bls.n	8004700 <NVIC_EncodePriority+0x30>
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3b03      	subs	r3, #3
 80046fe:	e000      	b.n	8004702 <NVIC_EncodePriority+0x32>
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004704:	f04f 32ff 	mov.w	r2, #4294967295
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43da      	mvns	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	401a      	ands	r2, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004718:	f04f 31ff 	mov.w	r1, #4294967295
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	fa01 f303 	lsl.w	r3, r1, r3
 8004722:	43d9      	mvns	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	4313      	orrs	r3, r2
         );
}
 800472a:	4618      	mov	r0, r3
 800472c:	3724      	adds	r7, #36	@ 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff ff4c 	bl	80045dc <__NVIC_SetPriorityGrouping>
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800475a:	f7ff ff63 	bl	8004624 <__NVIC_GetPriorityGrouping>
 800475e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	6978      	ldr	r0, [r7, #20]
 8004766:	f7ff ffb3 	bl	80046d0 <NVIC_EncodePriority>
 800476a:	4602      	mov	r2, r0
 800476c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff ff82 	bl	800467c <__NVIC_SetPriority>
}
 8004778:	bf00      	nop
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800478a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ff56 	bl	8004640 <__NVIC_EnableIRQ>
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047ac:	d301      	bcc.n	80047b2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80047ae:	2301      	movs	r3, #1
 80047b0:	e00d      	b.n	80047ce <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80047b2:	4a0a      	ldr	r2, [pc, #40]	@ (80047dc <HAL_SYSTICK_Config+0x40>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80047ba:	4b08      	ldr	r3, [pc, #32]	@ (80047dc <HAL_SYSTICK_Config+0x40>)
 80047bc:	2200      	movs	r2, #0
 80047be:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80047c0:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <HAL_SYSTICK_Config+0x40>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a05      	ldr	r2, [pc, #20]	@ (80047dc <HAL_SYSTICK_Config+0x40>)
 80047c6:	f043 0303 	orr.w	r3, r3, #3
 80047ca:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000e010 	.word	0xe000e010

080047e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d844      	bhi.n	8004878 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80047ee:	a201      	add	r2, pc, #4	@ (adr r2, 80047f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80047f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f4:	08004817 	.word	0x08004817
 80047f8:	08004835 	.word	0x08004835
 80047fc:	08004857 	.word	0x08004857
 8004800:	08004879 	.word	0x08004879
 8004804:	08004809 	.word	0x08004809
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004808:	4b1f      	ldr	r3, [pc, #124]	@ (8004888 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1e      	ldr	r2, [pc, #120]	@ (8004888 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800480e:	f043 0304 	orr.w	r3, r3, #4
 8004812:	6013      	str	r3, [r2, #0]
      break;
 8004814:	e031      	b.n	800487a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004816:	4b1c      	ldr	r3, [pc, #112]	@ (8004888 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1b      	ldr	r2, [pc, #108]	@ (8004888 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800481c:	f023 0304 	bic.w	r3, r3, #4
 8004820:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004822:	4b1a      	ldr	r3, [pc, #104]	@ (800488c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004828:	4a18      	ldr	r2, [pc, #96]	@ (800488c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800482a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800482e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004832:	e022      	b.n	800487a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004834:	4b14      	ldr	r3, [pc, #80]	@ (8004888 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a13      	ldr	r2, [pc, #76]	@ (8004888 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800483a:	f023 0304 	bic.w	r3, r3, #4
 800483e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004840:	4b12      	ldr	r3, [pc, #72]	@ (800488c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004846:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800484a:	4a10      	ldr	r2, [pc, #64]	@ (800488c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800484c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004850:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004854:	e011      	b.n	800487a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004856:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a0b      	ldr	r2, [pc, #44]	@ (8004888 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004862:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004868:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800486c:	4a07      	ldr	r2, [pc, #28]	@ (800488c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800486e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004876:	e000      	b.n	800487a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004878:	bf00      	nop
  }
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	e000e010 	.word	0xe000e010
 800488c:	46020c00 	.word	0x46020c00

08004890 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8004896:	4b19      	ldr	r3, [pc, #100]	@ (80048fc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80048a2:	2304      	movs	r3, #4
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	e021      	b.n	80048ec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80048a8:	4b15      	ldr	r3, [pc, #84]	@ (8004900 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80048aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048ae:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80048b2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048ba:	d011      	beq.n	80048e0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048c2:	d810      	bhi.n	80048e6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d004      	beq.n	80048d4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048d0:	d003      	beq.n	80048da <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80048d2:	e008      	b.n	80048e6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80048d4:	2300      	movs	r3, #0
 80048d6:	607b      	str	r3, [r7, #4]
        break;
 80048d8:	e008      	b.n	80048ec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80048da:	2301      	movs	r3, #1
 80048dc:	607b      	str	r3, [r7, #4]
        break;
 80048de:	e005      	b.n	80048ec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80048e0:	2302      	movs	r3, #2
 80048e2:	607b      	str	r3, [r7, #4]
        break;
 80048e4:	e002      	b.n	80048ec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80048e6:	2300      	movs	r3, #0
 80048e8:	607b      	str	r3, [r7, #4]
        break;
 80048ea:	bf00      	nop
    }
  }
  return systick_source;
 80048ec:	687b      	ldr	r3, [r7, #4]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	e000e010 	.word	0xe000e010
 8004900:	46020c00 	.word	0x46020c00

08004904 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800490c:	f7ff fe36 	bl	800457c <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0db      	b.n	8004ad4 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a6e      	ldr	r2, [pc, #440]	@ (8004adc <HAL_DMA_Init+0x1d8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	f000 809f 	beq.w	8004a66 <HAL_DMA_Init+0x162>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a6c      	ldr	r2, [pc, #432]	@ (8004ae0 <HAL_DMA_Init+0x1dc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	f000 8099 	beq.w	8004a66 <HAL_DMA_Init+0x162>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a6a      	ldr	r2, [pc, #424]	@ (8004ae4 <HAL_DMA_Init+0x1e0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	f000 8093 	beq.w	8004a66 <HAL_DMA_Init+0x162>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a68      	ldr	r2, [pc, #416]	@ (8004ae8 <HAL_DMA_Init+0x1e4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	f000 808d 	beq.w	8004a66 <HAL_DMA_Init+0x162>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a66      	ldr	r2, [pc, #408]	@ (8004aec <HAL_DMA_Init+0x1e8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	f000 8087 	beq.w	8004a66 <HAL_DMA_Init+0x162>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a64      	ldr	r2, [pc, #400]	@ (8004af0 <HAL_DMA_Init+0x1ec>)
 800495e:	4293      	cmp	r3, r2
 8004960:	f000 8081 	beq.w	8004a66 <HAL_DMA_Init+0x162>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a62      	ldr	r2, [pc, #392]	@ (8004af4 <HAL_DMA_Init+0x1f0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d07b      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a61      	ldr	r2, [pc, #388]	@ (8004af8 <HAL_DMA_Init+0x1f4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d076      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a5f      	ldr	r2, [pc, #380]	@ (8004afc <HAL_DMA_Init+0x1f8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d071      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a5e      	ldr	r2, [pc, #376]	@ (8004b00 <HAL_DMA_Init+0x1fc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d06c      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a5c      	ldr	r2, [pc, #368]	@ (8004b04 <HAL_DMA_Init+0x200>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d067      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a5b      	ldr	r2, [pc, #364]	@ (8004b08 <HAL_DMA_Init+0x204>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d062      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a59      	ldr	r2, [pc, #356]	@ (8004b0c <HAL_DMA_Init+0x208>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d05d      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a58      	ldr	r2, [pc, #352]	@ (8004b10 <HAL_DMA_Init+0x20c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d058      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a56      	ldr	r2, [pc, #344]	@ (8004b14 <HAL_DMA_Init+0x210>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d053      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a55      	ldr	r2, [pc, #340]	@ (8004b18 <HAL_DMA_Init+0x214>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d04e      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a53      	ldr	r2, [pc, #332]	@ (8004b1c <HAL_DMA_Init+0x218>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d049      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a52      	ldr	r2, [pc, #328]	@ (8004b20 <HAL_DMA_Init+0x21c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d044      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a50      	ldr	r2, [pc, #320]	@ (8004b24 <HAL_DMA_Init+0x220>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d03f      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a4f      	ldr	r2, [pc, #316]	@ (8004b28 <HAL_DMA_Init+0x224>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d03a      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a4d      	ldr	r2, [pc, #308]	@ (8004b2c <HAL_DMA_Init+0x228>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d035      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a4c      	ldr	r2, [pc, #304]	@ (8004b30 <HAL_DMA_Init+0x22c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d030      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a4a      	ldr	r2, [pc, #296]	@ (8004b34 <HAL_DMA_Init+0x230>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d02b      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a49      	ldr	r2, [pc, #292]	@ (8004b38 <HAL_DMA_Init+0x234>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d026      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a47      	ldr	r2, [pc, #284]	@ (8004b3c <HAL_DMA_Init+0x238>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d021      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a46      	ldr	r2, [pc, #280]	@ (8004b40 <HAL_DMA_Init+0x23c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d01c      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a44      	ldr	r2, [pc, #272]	@ (8004b44 <HAL_DMA_Init+0x240>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d017      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a43      	ldr	r2, [pc, #268]	@ (8004b48 <HAL_DMA_Init+0x244>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d012      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a41      	ldr	r2, [pc, #260]	@ (8004b4c <HAL_DMA_Init+0x248>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00d      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a40      	ldr	r2, [pc, #256]	@ (8004b50 <HAL_DMA_Init+0x24c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d008      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a3e      	ldr	r2, [pc, #248]	@ (8004b54 <HAL_DMA_Init+0x250>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d003      	beq.n	8004a66 <HAL_DMA_Init+0x162>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a3d      	ldr	r2, [pc, #244]	@ (8004b58 <HAL_DMA_Init+0x254>)
 8004a64:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0206 	orr.w	r2, r2, #6
 8004a84:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004a86:	e00f      	b.n	8004aa8 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004a88:	f7ff fd78 	bl	800457c <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b05      	cmp	r3, #5
 8004a94:	d908      	bls.n	8004aa8 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2210      	movs	r2, #16
 8004a9a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e015      	b.n	8004ad4 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e8      	bne.n	8004a88 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fb24 	bl	8005104 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40020050 	.word	0x40020050
 8004ae0:	50020050 	.word	0x50020050
 8004ae4:	400200d0 	.word	0x400200d0
 8004ae8:	500200d0 	.word	0x500200d0
 8004aec:	40020150 	.word	0x40020150
 8004af0:	50020150 	.word	0x50020150
 8004af4:	400201d0 	.word	0x400201d0
 8004af8:	500201d0 	.word	0x500201d0
 8004afc:	40020250 	.word	0x40020250
 8004b00:	50020250 	.word	0x50020250
 8004b04:	400202d0 	.word	0x400202d0
 8004b08:	500202d0 	.word	0x500202d0
 8004b0c:	40020350 	.word	0x40020350
 8004b10:	50020350 	.word	0x50020350
 8004b14:	400203d0 	.word	0x400203d0
 8004b18:	500203d0 	.word	0x500203d0
 8004b1c:	40020450 	.word	0x40020450
 8004b20:	50020450 	.word	0x50020450
 8004b24:	400204d0 	.word	0x400204d0
 8004b28:	500204d0 	.word	0x500204d0
 8004b2c:	40020550 	.word	0x40020550
 8004b30:	50020550 	.word	0x50020550
 8004b34:	400205d0 	.word	0x400205d0
 8004b38:	500205d0 	.word	0x500205d0
 8004b3c:	40020650 	.word	0x40020650
 8004b40:	50020650 	.word	0x50020650
 8004b44:	400206d0 	.word	0x400206d0
 8004b48:	500206d0 	.word	0x500206d0
 8004b4c:	40020750 	.word	0x40020750
 8004b50:	50020750 	.word	0x50020750
 8004b54:	400207d0 	.word	0x400207d0
 8004b58:	500207d0 	.word	0x500207d0

08004b5c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e04f      	b.n	8004c14 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_DMA_Start_IT+0x26>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e048      	b.n	8004c14 <HAL_DMA_Start_IT+0xb8>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d136      	bne.n	8004c04 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 fa84 	bl	80050b8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695a      	ldr	r2, [r3, #20]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004bbe:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695a      	ldr	r2, [r3, #20]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bd6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bee:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e007      	b.n	8004c14 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2240      	movs	r2, #64	@ 0x40
 8004c08:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004c24:	f7ff fcaa 	bl	800457c <HAL_GetTick>
 8004c28:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e06b      	b.n	8004d0c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d008      	beq.n	8004c52 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e05c      	b.n	8004d0c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0204 	orr.w	r2, r2, #4
 8004c60:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2205      	movs	r2, #5
 8004c66:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004c6a:	e020      	b.n	8004cae <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004c6c:	f7ff fc86 	bl	800457c <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d919      	bls.n	8004cae <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7e:	f043 0210 	orr.w	r2, r3, #16
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2203      	movs	r2, #3
 8004c8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e02e      	b.n	8004d0c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0d7      	beq.n	8004c6c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0202 	orr.w	r2, r2, #2
 8004cca:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004cdc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e019      	b.n	8004d5a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d004      	beq.n	8004d3c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e00e      	b.n	8004d5a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2204      	movs	r2, #4
 8004d40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d52:	f043 0304 	orr.w	r3, r3, #4
 8004d56:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b086      	sub	sp, #24
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004d76:	f023 030f 	bic.w	r3, r3, #15
 8004d7a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d84:	3b50      	subs	r3, #80	@ 0x50
 8004d86:	09db      	lsrs	r3, r3, #7
 8004d88:	f003 031f 	and.w	r3, r3, #31
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 813b 	beq.w	800501c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d011      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004dca:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd0:	f043 0201 	orr.w	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d011      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dfc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e02:	f043 0202 	orr.w	r2, r3, #2
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d011      	beq.n	8004e3c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004e2e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e34:	f043 0204 	orr.w	r2, r3, #4
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d011      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e60:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e66:	f043 0208 	orr.w	r2, r3, #8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d013      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00c      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e92:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d04c      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d045      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ec8:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d12e      	bne.n	8004f34 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ee4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695a      	ldr	r2, [r3, #20]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0202 	orr.w	r2, r2, #2
 8004ef4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0e:	2201      	movs	r2, #1
 8004f10:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2200      	movs	r2, #0
 8004f18:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d07a      	beq.n	8005020 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
        }

        return;
 8004f32:	e075      	b.n	8005020 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2205      	movs	r2, #5
 8004f38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d039      	beq.n	8004fce <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d032      	beq.n	8004fce <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d012      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d116      	bne.n	8004fac <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d111      	bne.n	8004fac <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f94:	2201      	movs	r2, #1
 8004f96:	731a      	strb	r2, [r3, #12]
 8004f98:	e008      	b.n	8004fac <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d103      	bne.n	8004fac <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004fb4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d025      	beq.n	8005022 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0202 	orr.w	r2, r2, #2
 8004fe4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ffe:	2201      	movs	r2, #1
 8005000:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
 800501a:	e002      	b.n	8005022 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800501c:	bf00      	nop
 800501e:	e000      	b.n	8005022 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005020:	bf00      	nop
    }
  }
}
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e02b      	b.n	80050ac <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800505c:	f023 030f 	bic.w	r3, r3, #15
 8005060:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800506a:	3b50      	subs	r3, #80	@ 0x50
 800506c:	09db      	lsrs	r3, r3, #7
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2201      	movs	r2, #1
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d012      	beq.n	80050aa <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f003 0311 	and.w	r3, r3, #17
 800508a:	2b11      	cmp	r3, #17
 800508c:	d106      	bne.n	800509c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	431a      	orrs	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	e006      	b.n	80050aa <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	43db      	mvns	r3, r3
 80050a4:	401a      	ands	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050cc:	0c1b      	lsrs	r3, r3, #16
 80050ce:	041b      	lsls	r3, r3, #16
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	b291      	uxth	r1, r2
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	430b      	orrs	r3, r1
 80050da:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80050e4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80050f6:	bf00      	nop
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
	...

08005104 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	430a      	orrs	r2, r1
 8005124:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a53      	ldr	r2, [pc, #332]	@ (8005290 <DMA_Init+0x18c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	f000 80a0 	beq.w	800528a <DMA_Init+0x186>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a51      	ldr	r2, [pc, #324]	@ (8005294 <DMA_Init+0x190>)
 8005150:	4293      	cmp	r3, r2
 8005152:	f000 809a 	beq.w	800528a <DMA_Init+0x186>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a4f      	ldr	r2, [pc, #316]	@ (8005298 <DMA_Init+0x194>)
 800515c:	4293      	cmp	r3, r2
 800515e:	f000 8094 	beq.w	800528a <DMA_Init+0x186>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a4d      	ldr	r2, [pc, #308]	@ (800529c <DMA_Init+0x198>)
 8005168:	4293      	cmp	r3, r2
 800516a:	f000 808e 	beq.w	800528a <DMA_Init+0x186>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a4b      	ldr	r2, [pc, #300]	@ (80052a0 <DMA_Init+0x19c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	f000 8088 	beq.w	800528a <DMA_Init+0x186>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a49      	ldr	r2, [pc, #292]	@ (80052a4 <DMA_Init+0x1a0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	f000 8082 	beq.w	800528a <DMA_Init+0x186>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a47      	ldr	r2, [pc, #284]	@ (80052a8 <DMA_Init+0x1a4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d07c      	beq.n	800528a <DMA_Init+0x186>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a45      	ldr	r2, [pc, #276]	@ (80052ac <DMA_Init+0x1a8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d077      	beq.n	800528a <DMA_Init+0x186>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a44      	ldr	r2, [pc, #272]	@ (80052b0 <DMA_Init+0x1ac>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d072      	beq.n	800528a <DMA_Init+0x186>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a42      	ldr	r2, [pc, #264]	@ (80052b4 <DMA_Init+0x1b0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d06d      	beq.n	800528a <DMA_Init+0x186>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a41      	ldr	r2, [pc, #260]	@ (80052b8 <DMA_Init+0x1b4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d068      	beq.n	800528a <DMA_Init+0x186>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a3f      	ldr	r2, [pc, #252]	@ (80052bc <DMA_Init+0x1b8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d063      	beq.n	800528a <DMA_Init+0x186>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a3e      	ldr	r2, [pc, #248]	@ (80052c0 <DMA_Init+0x1bc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d05e      	beq.n	800528a <DMA_Init+0x186>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a3c      	ldr	r2, [pc, #240]	@ (80052c4 <DMA_Init+0x1c0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d059      	beq.n	800528a <DMA_Init+0x186>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a3b      	ldr	r2, [pc, #236]	@ (80052c8 <DMA_Init+0x1c4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d054      	beq.n	800528a <DMA_Init+0x186>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a39      	ldr	r2, [pc, #228]	@ (80052cc <DMA_Init+0x1c8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d04f      	beq.n	800528a <DMA_Init+0x186>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a38      	ldr	r2, [pc, #224]	@ (80052d0 <DMA_Init+0x1cc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d04a      	beq.n	800528a <DMA_Init+0x186>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a36      	ldr	r2, [pc, #216]	@ (80052d4 <DMA_Init+0x1d0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d045      	beq.n	800528a <DMA_Init+0x186>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a35      	ldr	r2, [pc, #212]	@ (80052d8 <DMA_Init+0x1d4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d040      	beq.n	800528a <DMA_Init+0x186>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a33      	ldr	r2, [pc, #204]	@ (80052dc <DMA_Init+0x1d8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d03b      	beq.n	800528a <DMA_Init+0x186>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a32      	ldr	r2, [pc, #200]	@ (80052e0 <DMA_Init+0x1dc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d036      	beq.n	800528a <DMA_Init+0x186>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a30      	ldr	r2, [pc, #192]	@ (80052e4 <DMA_Init+0x1e0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d031      	beq.n	800528a <DMA_Init+0x186>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2f      	ldr	r2, [pc, #188]	@ (80052e8 <DMA_Init+0x1e4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d02c      	beq.n	800528a <DMA_Init+0x186>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a2d      	ldr	r2, [pc, #180]	@ (80052ec <DMA_Init+0x1e8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d027      	beq.n	800528a <DMA_Init+0x186>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a2c      	ldr	r2, [pc, #176]	@ (80052f0 <DMA_Init+0x1ec>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d022      	beq.n	800528a <DMA_Init+0x186>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a2a      	ldr	r2, [pc, #168]	@ (80052f4 <DMA_Init+0x1f0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d01d      	beq.n	800528a <DMA_Init+0x186>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a29      	ldr	r2, [pc, #164]	@ (80052f8 <DMA_Init+0x1f4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d018      	beq.n	800528a <DMA_Init+0x186>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a27      	ldr	r2, [pc, #156]	@ (80052fc <DMA_Init+0x1f8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <DMA_Init+0x186>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a26      	ldr	r2, [pc, #152]	@ (8005300 <DMA_Init+0x1fc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00e      	beq.n	800528a <DMA_Init+0x186>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a24      	ldr	r2, [pc, #144]	@ (8005304 <DMA_Init+0x200>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d009      	beq.n	800528a <DMA_Init+0x186>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a23      	ldr	r2, [pc, #140]	@ (8005308 <DMA_Init+0x204>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <DMA_Init+0x186>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a21      	ldr	r2, [pc, #132]	@ (800530c <DMA_Init+0x208>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d142      	bne.n	8005310 <DMA_Init+0x20c>
 800528a:	2301      	movs	r3, #1
 800528c:	e041      	b.n	8005312 <DMA_Init+0x20e>
 800528e:	bf00      	nop
 8005290:	40020050 	.word	0x40020050
 8005294:	50020050 	.word	0x50020050
 8005298:	400200d0 	.word	0x400200d0
 800529c:	500200d0 	.word	0x500200d0
 80052a0:	40020150 	.word	0x40020150
 80052a4:	50020150 	.word	0x50020150
 80052a8:	400201d0 	.word	0x400201d0
 80052ac:	500201d0 	.word	0x500201d0
 80052b0:	40020250 	.word	0x40020250
 80052b4:	50020250 	.word	0x50020250
 80052b8:	400202d0 	.word	0x400202d0
 80052bc:	500202d0 	.word	0x500202d0
 80052c0:	40020350 	.word	0x40020350
 80052c4:	50020350 	.word	0x50020350
 80052c8:	400203d0 	.word	0x400203d0
 80052cc:	500203d0 	.word	0x500203d0
 80052d0:	40020450 	.word	0x40020450
 80052d4:	50020450 	.word	0x50020450
 80052d8:	400204d0 	.word	0x400204d0
 80052dc:	500204d0 	.word	0x500204d0
 80052e0:	40020550 	.word	0x40020550
 80052e4:	50020550 	.word	0x50020550
 80052e8:	400205d0 	.word	0x400205d0
 80052ec:	500205d0 	.word	0x500205d0
 80052f0:	40020650 	.word	0x40020650
 80052f4:	50020650 	.word	0x50020650
 80052f8:	400206d0 	.word	0x400206d0
 80052fc:	500206d0 	.word	0x500206d0
 8005300:	40020750 	.word	0x40020750
 8005304:	50020750 	.word	0x50020750
 8005308:	400207d0 	.word	0x400207d0
 800530c:	500207d0 	.word	0x500207d0
 8005310:	2300      	movs	r3, #0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d012      	beq.n	800533c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531e:	3b01      	subs	r3, #1
 8005320:	051b      	lsls	r3, r3, #20
 8005322:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005326:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532c:	3b01      	subs	r3, #1
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005334:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	430a      	orrs	r2, r1
 800534e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800536e:	f040 80b0 	bne.w	80054d2 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a82      	ldr	r2, [pc, #520]	@ (8005580 <DMA_Init+0x47c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	f000 80a0 	beq.w	80054be <DMA_Init+0x3ba>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a80      	ldr	r2, [pc, #512]	@ (8005584 <DMA_Init+0x480>)
 8005384:	4293      	cmp	r3, r2
 8005386:	f000 809a 	beq.w	80054be <DMA_Init+0x3ba>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a7e      	ldr	r2, [pc, #504]	@ (8005588 <DMA_Init+0x484>)
 8005390:	4293      	cmp	r3, r2
 8005392:	f000 8094 	beq.w	80054be <DMA_Init+0x3ba>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a7c      	ldr	r2, [pc, #496]	@ (800558c <DMA_Init+0x488>)
 800539c:	4293      	cmp	r3, r2
 800539e:	f000 808e 	beq.w	80054be <DMA_Init+0x3ba>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a7a      	ldr	r2, [pc, #488]	@ (8005590 <DMA_Init+0x48c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	f000 8088 	beq.w	80054be <DMA_Init+0x3ba>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a78      	ldr	r2, [pc, #480]	@ (8005594 <DMA_Init+0x490>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	f000 8082 	beq.w	80054be <DMA_Init+0x3ba>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a76      	ldr	r2, [pc, #472]	@ (8005598 <DMA_Init+0x494>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d07c      	beq.n	80054be <DMA_Init+0x3ba>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a74      	ldr	r2, [pc, #464]	@ (800559c <DMA_Init+0x498>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d077      	beq.n	80054be <DMA_Init+0x3ba>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a73      	ldr	r2, [pc, #460]	@ (80055a0 <DMA_Init+0x49c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d072      	beq.n	80054be <DMA_Init+0x3ba>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a71      	ldr	r2, [pc, #452]	@ (80055a4 <DMA_Init+0x4a0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d06d      	beq.n	80054be <DMA_Init+0x3ba>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a70      	ldr	r2, [pc, #448]	@ (80055a8 <DMA_Init+0x4a4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d068      	beq.n	80054be <DMA_Init+0x3ba>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a6e      	ldr	r2, [pc, #440]	@ (80055ac <DMA_Init+0x4a8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d063      	beq.n	80054be <DMA_Init+0x3ba>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a6d      	ldr	r2, [pc, #436]	@ (80055b0 <DMA_Init+0x4ac>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d05e      	beq.n	80054be <DMA_Init+0x3ba>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a6b      	ldr	r2, [pc, #428]	@ (80055b4 <DMA_Init+0x4b0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d059      	beq.n	80054be <DMA_Init+0x3ba>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a6a      	ldr	r2, [pc, #424]	@ (80055b8 <DMA_Init+0x4b4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d054      	beq.n	80054be <DMA_Init+0x3ba>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a68      	ldr	r2, [pc, #416]	@ (80055bc <DMA_Init+0x4b8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d04f      	beq.n	80054be <DMA_Init+0x3ba>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a67      	ldr	r2, [pc, #412]	@ (80055c0 <DMA_Init+0x4bc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d04a      	beq.n	80054be <DMA_Init+0x3ba>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a65      	ldr	r2, [pc, #404]	@ (80055c4 <DMA_Init+0x4c0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d045      	beq.n	80054be <DMA_Init+0x3ba>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a64      	ldr	r2, [pc, #400]	@ (80055c8 <DMA_Init+0x4c4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d040      	beq.n	80054be <DMA_Init+0x3ba>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a62      	ldr	r2, [pc, #392]	@ (80055cc <DMA_Init+0x4c8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d03b      	beq.n	80054be <DMA_Init+0x3ba>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a61      	ldr	r2, [pc, #388]	@ (80055d0 <DMA_Init+0x4cc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d036      	beq.n	80054be <DMA_Init+0x3ba>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a5f      	ldr	r2, [pc, #380]	@ (80055d4 <DMA_Init+0x4d0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d031      	beq.n	80054be <DMA_Init+0x3ba>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a5e      	ldr	r2, [pc, #376]	@ (80055d8 <DMA_Init+0x4d4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d02c      	beq.n	80054be <DMA_Init+0x3ba>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a5c      	ldr	r2, [pc, #368]	@ (80055dc <DMA_Init+0x4d8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d027      	beq.n	80054be <DMA_Init+0x3ba>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a5b      	ldr	r2, [pc, #364]	@ (80055e0 <DMA_Init+0x4dc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d022      	beq.n	80054be <DMA_Init+0x3ba>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a59      	ldr	r2, [pc, #356]	@ (80055e4 <DMA_Init+0x4e0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01d      	beq.n	80054be <DMA_Init+0x3ba>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a58      	ldr	r2, [pc, #352]	@ (80055e8 <DMA_Init+0x4e4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d018      	beq.n	80054be <DMA_Init+0x3ba>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a56      	ldr	r2, [pc, #344]	@ (80055ec <DMA_Init+0x4e8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <DMA_Init+0x3ba>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a55      	ldr	r2, [pc, #340]	@ (80055f0 <DMA_Init+0x4ec>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <DMA_Init+0x3ba>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a53      	ldr	r2, [pc, #332]	@ (80055f4 <DMA_Init+0x4f0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <DMA_Init+0x3ba>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a52      	ldr	r2, [pc, #328]	@ (80055f8 <DMA_Init+0x4f4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <DMA_Init+0x3ba>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a50      	ldr	r2, [pc, #320]	@ (80055fc <DMA_Init+0x4f8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d101      	bne.n	80054c2 <DMA_Init+0x3be>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <DMA_Init+0x3c0>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00d      	beq.n	80054e4 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	e008      	b.n	80054e4 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054da:	d103      	bne.n	80054e4 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054e2:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ea:	4b45      	ldr	r3, [pc, #276]	@ (8005600 <DMA_Init+0x4fc>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2200      	movs	r2, #0
 80054fe:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a36      	ldr	r2, [pc, #216]	@ (80055e0 <DMA_Init+0x4dc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d022      	beq.n	8005550 <DMA_Init+0x44c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a35      	ldr	r2, [pc, #212]	@ (80055e4 <DMA_Init+0x4e0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d01d      	beq.n	8005550 <DMA_Init+0x44c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a33      	ldr	r2, [pc, #204]	@ (80055e8 <DMA_Init+0x4e4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d018      	beq.n	8005550 <DMA_Init+0x44c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a32      	ldr	r2, [pc, #200]	@ (80055ec <DMA_Init+0x4e8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <DMA_Init+0x44c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a30      	ldr	r2, [pc, #192]	@ (80055f0 <DMA_Init+0x4ec>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00e      	beq.n	8005550 <DMA_Init+0x44c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a2f      	ldr	r2, [pc, #188]	@ (80055f4 <DMA_Init+0x4f0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d009      	beq.n	8005550 <DMA_Init+0x44c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a2d      	ldr	r2, [pc, #180]	@ (80055f8 <DMA_Init+0x4f4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <DMA_Init+0x44c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2c      	ldr	r2, [pc, #176]	@ (80055fc <DMA_Init+0x4f8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d101      	bne.n	8005554 <DMA_Init+0x450>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <DMA_Init+0x452>
 8005554:	2300      	movs	r3, #0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d007      	beq.n	800556a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2200      	movs	r2, #0
 8005560:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2200      	movs	r2, #0
 8005568:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2200      	movs	r2, #0
 8005570:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40020050 	.word	0x40020050
 8005584:	50020050 	.word	0x50020050
 8005588:	400200d0 	.word	0x400200d0
 800558c:	500200d0 	.word	0x500200d0
 8005590:	40020150 	.word	0x40020150
 8005594:	50020150 	.word	0x50020150
 8005598:	400201d0 	.word	0x400201d0
 800559c:	500201d0 	.word	0x500201d0
 80055a0:	40020250 	.word	0x40020250
 80055a4:	50020250 	.word	0x50020250
 80055a8:	400202d0 	.word	0x400202d0
 80055ac:	500202d0 	.word	0x500202d0
 80055b0:	40020350 	.word	0x40020350
 80055b4:	50020350 	.word	0x50020350
 80055b8:	400203d0 	.word	0x400203d0
 80055bc:	500203d0 	.word	0x500203d0
 80055c0:	40020450 	.word	0x40020450
 80055c4:	50020450 	.word	0x50020450
 80055c8:	400204d0 	.word	0x400204d0
 80055cc:	500204d0 	.word	0x500204d0
 80055d0:	40020550 	.word	0x40020550
 80055d4:	50020550 	.word	0x50020550
 80055d8:	400205d0 	.word	0x400205d0
 80055dc:	500205d0 	.word	0x500205d0
 80055e0:	40020650 	.word	0x40020650
 80055e4:	50020650 	.word	0x50020650
 80055e8:	400206d0 	.word	0x400206d0
 80055ec:	500206d0 	.word	0x500206d0
 80055f0:	40020750 	.word	0x40020750
 80055f4:	50020750 	.word	0x50020750
 80055f8:	400207d0 	.word	0x400207d0
 80055fc:	500207d0 	.word	0x500207d0
 8005600:	3cc03180 	.word	0x3cc03180

08005604 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_DMAEx_List_Start_IT+0x16>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e082      	b.n	8005724 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005624:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005630:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8005632:	7dfb      	ldrb	r3, [r7, #23]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d005      	beq.n	8005644 <HAL_DMAEx_List_Start_IT+0x40>
 8005638:	7dfb      	ldrb	r3, [r7, #23]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d16a      	bne.n	8005714 <HAL_DMAEx_List_Start_IT+0x110>
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d067      	beq.n	8005714 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d157      	bne.n	8005700 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005656:	2b01      	cmp	r3, #1
 8005658:	d101      	bne.n	800565e <HAL_DMAEx_List_Start_IT+0x5a>
 800565a:	2302      	movs	r3, #2
 800565c:	e062      	b.n	8005724 <HAL_DMAEx_List_Start_IT+0x120>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005672:	2202      	movs	r2, #2
 8005674:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005680:	2200      	movs	r2, #0
 8005682:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005692:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695a      	ldr	r2, [r3, #20]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056aa:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695a      	ldr	r2, [r3, #20]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056c2:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f107 010c 	add.w	r1, r7, #12
 80056ce:	2200      	movs	r2, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 f82b 	bl	800572c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4619      	mov	r1, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	0c0b      	lsrs	r3, r1, #16
 80056e4:	041b      	lsls	r3, r3, #16
 80056e6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80056f4:	4013      	ands	r3, r2
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	430b      	orrs	r3, r1
 80056fe:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e007      	b.n	8005724 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2240      	movs	r2, #64	@ 0x40
 8005718:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00c      	beq.n	800575e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4a0d      	ldr	r2, [pc, #52]	@ (8005784 <DMA_List_GetCLLRNodeInfo+0x58>)
 800574e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00f      	beq.n	8005776 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2207      	movs	r2, #7
 800575a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800575c:	e00b      	b.n	8005776 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4a08      	ldr	r2, [pc, #32]	@ (8005788 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8005768:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2205      	movs	r2, #5
 8005774:	601a      	str	r2, [r3, #0]
}
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	fe010000 	.word	0xfe010000
 8005788:	f8010000 	.word	0xf8010000

0800578c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800578c:	b480      	push	{r7}
 800578e:	b089      	sub	sp, #36	@ 0x24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800579e:	e1ba      	b.n	8005b16 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	2101      	movs	r1, #1
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ac:	4013      	ands	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 81aa 	beq.w	8005b10 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a55      	ldr	r2, [pc, #340]	@ (8005914 <HAL_GPIO_Init+0x188>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d15d      	bne.n	8005880 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80057ca:	2201      	movs	r2, #1
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43db      	mvns	r3, r3
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	4013      	ands	r3, r2
 80057d8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f003 0201 	and.w	r2, r3, #1
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80057f4:	4a48      	ldr	r2, [pc, #288]	@ (8005918 <HAL_GPIO_Init+0x18c>)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057fc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80057fe:	4a46      	ldr	r2, [pc, #280]	@ (8005918 <HAL_GPIO_Init+0x18c>)
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	4413      	add	r3, r2
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	08da      	lsrs	r2, r3, #3
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	3208      	adds	r2, #8
 8005812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005816:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	220f      	movs	r2, #15
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	43db      	mvns	r3, r3
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	4013      	ands	r3, r2
 800582c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	220b      	movs	r2, #11
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	4313      	orrs	r3, r2
 8005840:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	08da      	lsrs	r2, r3, #3
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	3208      	adds	r2, #8
 800584a:	69f9      	ldr	r1, [r7, #28]
 800584c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	2203      	movs	r2, #3
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	4013      	ands	r3, r2
 8005866:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	2202      	movs	r2, #2
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	4313      	orrs	r3, r2
 8005876:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	e067      	b.n	8005950 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d003      	beq.n	8005890 <HAL_GPIO_Init+0x104>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b12      	cmp	r3, #18
 800588e:	d145      	bne.n	800591c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	08da      	lsrs	r2, r3, #3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3208      	adds	r2, #8
 8005898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	220f      	movs	r2, #15
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	4013      	ands	r3, r2
 80058b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f003 020f 	and.w	r2, r3, #15
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	08da      	lsrs	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3208      	adds	r2, #8
 80058d6:	69f9      	ldr	r1, [r7, #28]
 80058d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	2203      	movs	r2, #3
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	4013      	ands	r3, r2
 80058f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 0203 	and.w	r2, r3, #3
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	4313      	orrs	r3, r2
 8005908:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e01e      	b.n	8005950 <HAL_GPIO_Init+0x1c4>
 8005912:	bf00      	nop
 8005914:	46020000 	.word	0x46020000
 8005918:	0800fe58 	.word	0x0800fe58
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	2203      	movs	r2, #3
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	4013      	ands	r3, r2
 8005932:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 0203 	and.w	r2, r3, #3
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	4313      	orrs	r3, r2
 8005948:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d00b      	beq.n	8005970 <HAL_GPIO_Init+0x1e4>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d007      	beq.n	8005970 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005964:	2b11      	cmp	r3, #17
 8005966:	d003      	beq.n	8005970 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b12      	cmp	r3, #18
 800596e:	d130      	bne.n	80059d2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	2203      	movs	r2, #3
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	43db      	mvns	r3, r3
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	4013      	ands	r3, r2
 8005986:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	4313      	orrs	r3, r2
 8005998:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	69fa      	ldr	r2, [r7, #28]
 800599e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80059a6:	2201      	movs	r2, #1
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	43db      	mvns	r3, r3
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	4013      	ands	r3, r2
 80059b4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	091b      	lsrs	r3, r3, #4
 80059bc:	f003 0201 	and.w	r2, r3, #1
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d017      	beq.n	8005a0a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	2203      	movs	r2, #3
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	43db      	mvns	r3, r3
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	4013      	ands	r3, r2
 80059f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d07c      	beq.n	8005b10 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005a16:	4a47      	ldr	r2, [pc, #284]	@ (8005b34 <HAL_GPIO_Init+0x3a8>)
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	089b      	lsrs	r3, r3, #2
 8005a1c:	3318      	adds	r3, #24
 8005a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a22:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	220f      	movs	r2, #15
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43db      	mvns	r3, r3
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	4013      	ands	r3, r2
 8005a38:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	0a9a      	lsrs	r2, r3, #10
 8005a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b38 <HAL_GPIO_Init+0x3ac>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	f002 0203 	and.w	r2, r2, #3
 8005a48:	00d2      	lsls	r2, r2, #3
 8005a4a:	4093      	lsls	r3, r2
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005a52:	4938      	ldr	r1, [pc, #224]	@ (8005b34 <HAL_GPIO_Init+0x3a8>)
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	089b      	lsrs	r3, r3, #2
 8005a58:	3318      	adds	r3, #24
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005a60:	4b34      	ldr	r3, [pc, #208]	@ (8005b34 <HAL_GPIO_Init+0x3a8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	69fa      	ldr	r2, [r7, #28]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005a84:	4a2b      	ldr	r2, [pc, #172]	@ (8005b34 <HAL_GPIO_Init+0x3a8>)
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8005b34 <HAL_GPIO_Init+0x3a8>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	43db      	mvns	r3, r3
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	4013      	ands	r3, r2
 8005a98:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005aae:	4a21      	ldr	r2, [pc, #132]	@ (8005b34 <HAL_GPIO_Init+0x3a8>)
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8005b34 <HAL_GPIO_Init+0x3a8>)
 8005ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005ada:	4a16      	ldr	r2, [pc, #88]	@ (8005b34 <HAL_GPIO_Init+0x3a8>)
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005ae2:	4b14      	ldr	r3, [pc, #80]	@ (8005b34 <HAL_GPIO_Init+0x3a8>)
 8005ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	43db      	mvns	r3, r3
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	4013      	ands	r3, r2
 8005af2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005b08:	4a0a      	ldr	r2, [pc, #40]	@ (8005b34 <HAL_GPIO_Init+0x3a8>)
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	3301      	adds	r3, #1
 8005b14:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f47f ae3d 	bne.w	80057a0 <HAL_GPIO_Init+0x14>
  }
}
 8005b26:	bf00      	nop
 8005b28:	bf00      	nop
 8005b2a:	3724      	adds	r7, #36	@ 0x24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	46022000 	.word	0x46022000
 8005b38:	002f7f7f 	.word	0x002f7f7f

08005b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b4c:	787b      	ldrb	r3, [r7, #1]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b52:	887a      	ldrh	r2, [r7, #2]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8005b58:	e002      	b.n	8005b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8005b5a:	887a      	ldrh	r2, [r7, #2]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005b78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	73fb      	strb	r3, [r7, #15]
 8005b88:	e007      	b.n	8005b9a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005b8a:	4b07      	ldr	r3, [pc, #28]	@ (8005ba8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f023 0204 	bic.w	r2, r3, #4
 8005b92:	4905      	ldr	r1, [pc, #20]	@ (8005ba8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	40030400 	.word	0x40030400

08005bac <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005bb0:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <HAL_ICACHE_Enable+0x1c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a04      	ldr	r2, [pc, #16]	@ (8005bc8 <HAL_ICACHE_Enable+0x1c>)
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	40030400 	.word	0x40030400

08005bcc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005bd4:	4b39      	ldr	r3, [pc, #228]	@ (8005cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bdc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d10b      	bne.n	8005bfe <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bec:	d905      	bls.n	8005bfa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005bee:	4b33      	ldr	r3, [pc, #204]	@ (8005cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	4a32      	ldr	r2, [pc, #200]	@ (8005cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bf8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e057      	b.n	8005cae <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c04:	d90a      	bls.n	8005c1c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005c06:	4b2d      	ldr	r3, [pc, #180]	@ (8005cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	4a2a      	ldr	r2, [pc, #168]	@ (8005cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c18:	60d3      	str	r3, [r2, #12]
 8005c1a:	e007      	b.n	8005c2c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005c1c:	4b27      	ldr	r3, [pc, #156]	@ (8005cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005c24:	4925      	ldr	r1, [pc, #148]	@ (8005cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005c2c:	4b24      	ldr	r3, [pc, #144]	@ (8005cc0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a24      	ldr	r2, [pc, #144]	@ (8005cc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005c32:	fba2 2303 	umull	r2, r3, r2, r3
 8005c36:	099b      	lsrs	r3, r3, #6
 8005c38:	2232      	movs	r2, #50	@ 0x32
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
 8005c3e:	4a21      	ldr	r2, [pc, #132]	@ (8005cc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	099b      	lsrs	r3, r3, #6
 8005c46:	3301      	adds	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005c4a:	e002      	b.n	8005c52 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005c52:	4b1a      	ldr	r3, [pc, #104]	@ (8005cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <HAL_PWREx_ControlVoltageScaling+0x98>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f3      	bne.n	8005c4c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01b      	beq.n	8005ca2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005c6a:	4b15      	ldr	r3, [pc, #84]	@ (8005cc0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a15      	ldr	r2, [pc, #84]	@ (8005cc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005c70:	fba2 2303 	umull	r2, r3, r2, r3
 8005c74:	099b      	lsrs	r3, r3, #6
 8005c76:	2232      	movs	r2, #50	@ 0x32
 8005c78:	fb02 f303 	mul.w	r3, r2, r3
 8005c7c:	4a11      	ldr	r2, [pc, #68]	@ (8005cc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	099b      	lsrs	r3, r3, #6
 8005c84:	3301      	adds	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005c88:	e002      	b.n	8005c90 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005c90:	4b0a      	ldr	r3, [pc, #40]	@ (8005cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f3      	bne.n	8005c8a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e000      	b.n	8005cae <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	46020800 	.word	0x46020800
 8005cc0:	20000008 	.word	0x20000008
 8005cc4:	10624dd3 	.word	0x10624dd3

08005cc8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005ccc:	4b04      	ldr	r3, [pc, #16]	@ (8005ce0 <HAL_PWREx_GetVoltageRange+0x18>)
 8005cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	46020800 	.word	0x46020800

08005ce4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005cec:	4b22      	ldr	r3, [pc, #136]	@ (8005d78 <HAL_PWREx_ConfigSupply+0x94>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a22      	ldr	r2, [pc, #136]	@ (8005d7c <HAL_PWREx_ConfigSupply+0x98>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	099b      	lsrs	r3, r3, #6
 8005cf8:	2232      	movs	r2, #50	@ 0x32
 8005cfa:	fb02 f303 	mul.w	r3, r2, r3
 8005cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8005d7c <HAL_PWREx_ConfigSupply+0x98>)
 8005d00:	fba2 2303 	umull	r2, r3, r2, r3
 8005d04:	099b      	lsrs	r3, r3, #6
 8005d06:	3301      	adds	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d113      	bne.n	8005d38 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005d10:	4b1b      	ldr	r3, [pc, #108]	@ (8005d80 <HAL_PWREx_ConfigSupply+0x9c>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4a1a      	ldr	r2, [pc, #104]	@ (8005d80 <HAL_PWREx_ConfigSupply+0x9c>)
 8005d16:	f023 0302 	bic.w	r3, r3, #2
 8005d1a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005d1c:	e002      	b.n	8005d24 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005d24:	4b16      	ldr	r3, [pc, #88]	@ (8005d80 <HAL_PWREx_ConfigSupply+0x9c>)
 8005d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d116      	bne.n	8005d5e <HAL_PWREx_ConfigSupply+0x7a>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f3      	bne.n	8005d1e <HAL_PWREx_ConfigSupply+0x3a>
 8005d36:	e012      	b.n	8005d5e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005d38:	4b11      	ldr	r3, [pc, #68]	@ (8005d80 <HAL_PWREx_ConfigSupply+0x9c>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	4a10      	ldr	r2, [pc, #64]	@ (8005d80 <HAL_PWREx_ConfigSupply+0x9c>)
 8005d3e:	f043 0302 	orr.w	r3, r3, #2
 8005d42:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005d44:	e002      	b.n	8005d4c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d80 <HAL_PWREx_ConfigSupply+0x9c>)
 8005d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d102      	bne.n	8005d5e <HAL_PWREx_ConfigSupply+0x7a>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f3      	bne.n	8005d46 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e000      	b.n	8005d6a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000008 	.word	0x20000008
 8005d7c:	10624dd3 	.word	0x10624dd3
 8005d80:	46020800 	.word	0x46020800

08005d84 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	4a04      	ldr	r2, [pc, #16]	@ (8005da0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005d8e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d92:	6113      	str	r3, [r2, #16]
}
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	46020800 	.word	0x46020800

08005da4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8005da8:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dac:	4a04      	ldr	r2, [pc, #16]	@ (8005dc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005dae:	f043 0301 	orr.w	r3, r3, #1
 8005db2:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8005db4:	bf00      	nop
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	46020800 	.word	0x46020800

08005dc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08e      	sub	sp, #56	@ 0x38
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d102      	bne.n	8005dde <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f000 bec8 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dde:	4b99      	ldr	r3, [pc, #612]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005de8:	4b96      	ldr	r3, [pc, #600]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 816c 	beq.w	80060d8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d007      	beq.n	8005e16 <HAL_RCC_OscConfig+0x52>
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	2b0c      	cmp	r3, #12
 8005e0a:	f040 80de 	bne.w	8005fca <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	f040 80da 	bne.w	8005fca <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f000 bea5 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e28:	4b86      	ldr	r3, [pc, #536]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <HAL_RCC_OscConfig+0x7a>
 8005e34:	4b83      	ldr	r3, [pc, #524]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005e3c:	e005      	b.n	8005e4a <HAL_RCC_OscConfig+0x86>
 8005e3e:	4b81      	ldr	r3, [pc, #516]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005e40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d255      	bcs.n	8005efa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 fa11 	bl	8007280 <RCC_SetFlashLatencyFromMSIRange>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f000 be82 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005e6a:	4b76      	ldr	r3, [pc, #472]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	4a75      	ldr	r2, [pc, #468]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005e70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e74:	6093      	str	r3, [r2, #8]
 8005e76:	4b73      	ldr	r3, [pc, #460]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	4970      	ldr	r1, [pc, #448]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005e90:	d309      	bcc.n	8005ea6 <HAL_RCC_OscConfig+0xe2>
 8005e92:	4b6c      	ldr	r3, [pc, #432]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f023 021f 	bic.w	r2, r3, #31
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	4969      	ldr	r1, [pc, #420]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60cb      	str	r3, [r1, #12]
 8005ea4:	e07e      	b.n	8005fa4 <HAL_RCC_OscConfig+0x1e0>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	da0a      	bge.n	8005ec4 <HAL_RCC_OscConfig+0x100>
 8005eae:	4b65      	ldr	r3, [pc, #404]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	015b      	lsls	r3, r3, #5
 8005ebc:	4961      	ldr	r1, [pc, #388]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60cb      	str	r3, [r1, #12]
 8005ec2:	e06f      	b.n	8005fa4 <HAL_RCC_OscConfig+0x1e0>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ecc:	d30a      	bcc.n	8005ee4 <HAL_RCC_OscConfig+0x120>
 8005ece:	4b5d      	ldr	r3, [pc, #372]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	029b      	lsls	r3, r3, #10
 8005edc:	4959      	ldr	r1, [pc, #356]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60cb      	str	r3, [r1, #12]
 8005ee2:	e05f      	b.n	8005fa4 <HAL_RCC_OscConfig+0x1e0>
 8005ee4:	4b57      	ldr	r3, [pc, #348]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	03db      	lsls	r3, r3, #15
 8005ef2:	4954      	ldr	r1, [pc, #336]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60cb      	str	r3, [r1, #12]
 8005ef8:	e054      	b.n	8005fa4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005efa:	4b52      	ldr	r3, [pc, #328]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	4a51      	ldr	r2, [pc, #324]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005f00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f04:	6093      	str	r3, [r2, #8]
 8005f06:	4b4f      	ldr	r3, [pc, #316]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f12:	494c      	ldr	r1, [pc, #304]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005f20:	d309      	bcc.n	8005f36 <HAL_RCC_OscConfig+0x172>
 8005f22:	4b48      	ldr	r3, [pc, #288]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f023 021f 	bic.w	r2, r3, #31
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	4945      	ldr	r1, [pc, #276]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60cb      	str	r3, [r1, #12]
 8005f34:	e028      	b.n	8005f88 <HAL_RCC_OscConfig+0x1c4>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da0a      	bge.n	8005f54 <HAL_RCC_OscConfig+0x190>
 8005f3e:	4b41      	ldr	r3, [pc, #260]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	015b      	lsls	r3, r3, #5
 8005f4c:	493d      	ldr	r1, [pc, #244]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60cb      	str	r3, [r1, #12]
 8005f52:	e019      	b.n	8005f88 <HAL_RCC_OscConfig+0x1c4>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f5c:	d30a      	bcc.n	8005f74 <HAL_RCC_OscConfig+0x1b0>
 8005f5e:	4b39      	ldr	r3, [pc, #228]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	029b      	lsls	r3, r3, #10
 8005f6c:	4935      	ldr	r1, [pc, #212]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60cb      	str	r3, [r1, #12]
 8005f72:	e009      	b.n	8005f88 <HAL_RCC_OscConfig+0x1c4>
 8005f74:	4b33      	ldr	r3, [pc, #204]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	03db      	lsls	r3, r3, #15
 8005f82:	4930      	ldr	r1, [pc, #192]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 f974 	bl	8007280 <RCC_SetFlashLatencyFromMSIRange>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f000 bde5 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005fa4:	f001 f916 	bl	80071d4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005fa8:	4b27      	ldr	r3, [pc, #156]	@ (8006048 <HAL_RCC_OscConfig+0x284>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fe fa5b 	bl	8004468 <HAL_InitTick>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 808a 	beq.w	80060d6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fc6:	f000 bdd2 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d066      	beq.n	80060a0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005fde:	f7fe facd 	bl	800457c <HAL_GetTick>
 8005fe2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005fe4:	e009      	b.n	8005ffa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fe6:	f7fe fac9 	bl	800457c <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d902      	bls.n	8005ffa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	f000 bdba 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005ffa:	4b12      	ldr	r3, [pc, #72]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0ef      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006006:	4b0f      	ldr	r3, [pc, #60]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	4a0e      	ldr	r2, [pc, #56]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 800600c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006010:	6093      	str	r3, [r2, #8]
 8006012:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601e:	4909      	ldr	r1, [pc, #36]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8006020:	4313      	orrs	r3, r2
 8006022:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006028:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800602c:	d30e      	bcc.n	800604c <HAL_RCC_OscConfig+0x288>
 800602e:	4b05      	ldr	r3, [pc, #20]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f023 021f 	bic.w	r2, r3, #31
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	4902      	ldr	r1, [pc, #8]	@ (8006044 <HAL_RCC_OscConfig+0x280>)
 800603c:	4313      	orrs	r3, r2
 800603e:	60cb      	str	r3, [r1, #12]
 8006040:	e04a      	b.n	80060d8 <HAL_RCC_OscConfig+0x314>
 8006042:	bf00      	nop
 8006044:	46020c00 	.word	0x46020c00
 8006048:	2000000c 	.word	0x2000000c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	da0a      	bge.n	800606a <HAL_RCC_OscConfig+0x2a6>
 8006054:	4b98      	ldr	r3, [pc, #608]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	015b      	lsls	r3, r3, #5
 8006062:	4995      	ldr	r1, [pc, #596]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006064:	4313      	orrs	r3, r2
 8006066:	60cb      	str	r3, [r1, #12]
 8006068:	e036      	b.n	80060d8 <HAL_RCC_OscConfig+0x314>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006072:	d30a      	bcc.n	800608a <HAL_RCC_OscConfig+0x2c6>
 8006074:	4b90      	ldr	r3, [pc, #576]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	029b      	lsls	r3, r3, #10
 8006082:	498d      	ldr	r1, [pc, #564]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006084:	4313      	orrs	r3, r2
 8006086:	60cb      	str	r3, [r1, #12]
 8006088:	e026      	b.n	80060d8 <HAL_RCC_OscConfig+0x314>
 800608a:	4b8b      	ldr	r3, [pc, #556]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	03db      	lsls	r3, r3, #15
 8006098:	4987      	ldr	r1, [pc, #540]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800609a:	4313      	orrs	r3, r2
 800609c:	60cb      	str	r3, [r1, #12]
 800609e:	e01b      	b.n	80060d8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80060a0:	4b85      	ldr	r3, [pc, #532]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a84      	ldr	r2, [pc, #528]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80060ac:	f7fe fa66 	bl	800457c <HAL_GetTick>
 80060b0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80060b2:	e009      	b.n	80060c8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060b4:	f7fe fa62 	bl	800457c <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d902      	bls.n	80060c8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	f000 bd53 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80060c8:	4b7b      	ldr	r3, [pc, #492]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1ef      	bne.n	80060b4 <HAL_RCC_OscConfig+0x2f0>
 80060d4:	e000      	b.n	80060d8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80060d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 808b 	beq.w	80061fc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d005      	beq.n	80060f8 <HAL_RCC_OscConfig+0x334>
 80060ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ee:	2b0c      	cmp	r3, #12
 80060f0:	d109      	bne.n	8006106 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d106      	bne.n	8006106 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d17d      	bne.n	80061fc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f000 bd34 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800610e:	d106      	bne.n	800611e <HAL_RCC_OscConfig+0x35a>
 8006110:	4b69      	ldr	r3, [pc, #420]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a68      	ldr	r2, [pc, #416]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	e041      	b.n	80061a2 <HAL_RCC_OscConfig+0x3de>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006126:	d112      	bne.n	800614e <HAL_RCC_OscConfig+0x38a>
 8006128:	4b63      	ldr	r3, [pc, #396]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a62      	ldr	r2, [pc, #392]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800612e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	4b60      	ldr	r3, [pc, #384]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a5f      	ldr	r2, [pc, #380]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800613a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	4b5d      	ldr	r3, [pc, #372]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a5c      	ldr	r2, [pc, #368]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	e029      	b.n	80061a2 <HAL_RCC_OscConfig+0x3de>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006156:	d112      	bne.n	800617e <HAL_RCC_OscConfig+0x3ba>
 8006158:	4b57      	ldr	r3, [pc, #348]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a56      	ldr	r2, [pc, #344]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800615e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	4b54      	ldr	r3, [pc, #336]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a53      	ldr	r2, [pc, #332]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800616a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	4b51      	ldr	r3, [pc, #324]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a50      	ldr	r2, [pc, #320]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	e011      	b.n	80061a2 <HAL_RCC_OscConfig+0x3de>
 800617e:	4b4e      	ldr	r3, [pc, #312]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a4d      	ldr	r2, [pc, #308]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	4b4b      	ldr	r3, [pc, #300]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a4a      	ldr	r2, [pc, #296]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006190:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	4b48      	ldr	r3, [pc, #288]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a47      	ldr	r2, [pc, #284]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800619c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80061a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d014      	beq.n	80061d4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80061aa:	f7fe f9e7 	bl	800457c <HAL_GetTick>
 80061ae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061b0:	e009      	b.n	80061c6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061b2:	f7fe f9e3 	bl	800457c <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b64      	cmp	r3, #100	@ 0x64
 80061be:	d902      	bls.n	80061c6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	f000 bcd4 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061c6:	4b3c      	ldr	r3, [pc, #240]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0ef      	beq.n	80061b2 <HAL_RCC_OscConfig+0x3ee>
 80061d2:	e013      	b.n	80061fc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80061d4:	f7fe f9d2 	bl	800457c <HAL_GetTick>
 80061d8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061da:	e009      	b.n	80061f0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061dc:	f7fe f9ce 	bl	800457c <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b64      	cmp	r3, #100	@ 0x64
 80061e8:	d902      	bls.n	80061f0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	f000 bcbf 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061f0:	4b31      	ldr	r3, [pc, #196]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1ef      	bne.n	80061dc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d05f      	beq.n	80062c8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	2b04      	cmp	r3, #4
 800620c:	d005      	beq.n	800621a <HAL_RCC_OscConfig+0x456>
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	2b0c      	cmp	r3, #12
 8006212:	d114      	bne.n	800623e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006216:	2b02      	cmp	r3, #2
 8006218:	d111      	bne.n	800623e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d102      	bne.n	8006228 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	f000 bca3 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006228:	4b23      	ldr	r3, [pc, #140]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	041b      	lsls	r3, r3, #16
 8006236:	4920      	ldr	r1, [pc, #128]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006238:	4313      	orrs	r3, r2
 800623a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800623c:	e044      	b.n	80062c8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d024      	beq.n	8006290 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006246:	4b1c      	ldr	r3, [pc, #112]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1b      	ldr	r2, [pc, #108]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800624c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006250:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006252:	f7fe f993 	bl	800457c <HAL_GetTick>
 8006256:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006258:	e009      	b.n	800626e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800625a:	f7fe f98f 	bl	800457c <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d902      	bls.n	800626e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	f000 bc80 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800626e:	4b12      	ldr	r3, [pc, #72]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0ef      	beq.n	800625a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800627a:	4b0f      	ldr	r3, [pc, #60]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	490b      	ldr	r1, [pc, #44]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800628a:	4313      	orrs	r3, r2
 800628c:	610b      	str	r3, [r1, #16]
 800628e:	e01b      	b.n	80062c8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006290:	4b09      	ldr	r3, [pc, #36]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a08      	ldr	r2, [pc, #32]	@ (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006296:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800629a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800629c:	f7fe f96e 	bl	800457c <HAL_GetTick>
 80062a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062a2:	e00b      	b.n	80062bc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062a4:	f7fe f96a 	bl	800457c <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d904      	bls.n	80062bc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	f000 bc5b 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
 80062b8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062bc:	4baf      	ldr	r3, [pc, #700]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1ed      	bne.n	80062a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0308 	and.w	r3, r3, #8
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80c8 	beq.w	8006466 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80062d6:	2300      	movs	r3, #0
 80062d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062dc:	4ba7      	ldr	r3, [pc, #668]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 80062de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d111      	bne.n	800630e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ea:	4ba4      	ldr	r3, [pc, #656]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 80062ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062f0:	4aa2      	ldr	r2, [pc, #648]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 80062f2:	f043 0304 	orr.w	r3, r3, #4
 80062f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80062fa:	4ba0      	ldr	r3, [pc, #640]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 80062fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006308:	2301      	movs	r3, #1
 800630a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800630e:	4b9c      	ldr	r3, [pc, #624]	@ (8006580 <HAL_RCC_OscConfig+0x7bc>)
 8006310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d119      	bne.n	800634e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800631a:	4b99      	ldr	r3, [pc, #612]	@ (8006580 <HAL_RCC_OscConfig+0x7bc>)
 800631c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631e:	4a98      	ldr	r2, [pc, #608]	@ (8006580 <HAL_RCC_OscConfig+0x7bc>)
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006326:	f7fe f929 	bl	800457c <HAL_GetTick>
 800632a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800632c:	e009      	b.n	8006342 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800632e:	f7fe f925 	bl	800457c <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d902      	bls.n	8006342 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	f000 bc16 	b.w	8006b6e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006342:	4b8f      	ldr	r3, [pc, #572]	@ (8006580 <HAL_RCC_OscConfig+0x7bc>)
 8006344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0ef      	beq.n	800632e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d05f      	beq.n	8006416 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006356:	4b89      	ldr	r3, [pc, #548]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800635c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006368:	429a      	cmp	r2, r3
 800636a:	d037      	beq.n	80063dc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d006      	beq.n	8006384 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e3f4      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01b      	beq.n	80063c6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800638e:	4b7b      	ldr	r3, [pc, #492]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006394:	4a79      	ldr	r2, [pc, #484]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006396:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800639a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800639e:	f7fe f8ed 	bl	800457c <HAL_GetTick>
 80063a2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80063a4:	e008      	b.n	80063b8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063a6:	f7fe f8e9 	bl	800457c <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b05      	cmp	r3, #5
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e3da      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80063b8:	4b70      	ldr	r3, [pc, #448]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 80063ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1ef      	bne.n	80063a6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80063c6:	4b6d      	ldr	r3, [pc, #436]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 80063c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063cc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	4969      	ldr	r1, [pc, #420]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80063dc:	4b67      	ldr	r3, [pc, #412]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 80063de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063e2:	4a66      	ldr	r2, [pc, #408]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 80063e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80063ec:	f7fe f8c6 	bl	800457c <HAL_GetTick>
 80063f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f4:	f7fe f8c2 	bl	800457c <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b05      	cmp	r3, #5
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e3b3      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006406:	4b5d      	ldr	r3, [pc, #372]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800640c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0ef      	beq.n	80063f4 <HAL_RCC_OscConfig+0x630>
 8006414:	e01b      	b.n	800644e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006416:	4b59      	ldr	r3, [pc, #356]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800641c:	4a57      	ldr	r2, [pc, #348]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 800641e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006422:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006426:	f7fe f8a9 	bl	800457c <HAL_GetTick>
 800642a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800642e:	f7fe f8a5 	bl	800457c <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b05      	cmp	r3, #5
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e396      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006440:	4b4e      	ldr	r3, [pc, #312]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006446:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1ef      	bne.n	800642e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800644e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006452:	2b01      	cmp	r3, #1
 8006454:	d107      	bne.n	8006466 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006456:	4b49      	ldr	r3, [pc, #292]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800645c:	4a47      	ldr	r2, [pc, #284]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 800645e:	f023 0304 	bic.w	r3, r3, #4
 8006462:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 8111 	beq.w	8006696 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006474:	2300      	movs	r3, #0
 8006476:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800647a:	4b40      	ldr	r3, [pc, #256]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 800647c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d111      	bne.n	80064ac <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006488:	4b3c      	ldr	r3, [pc, #240]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 800648a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800648e:	4a3b      	ldr	r2, [pc, #236]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006490:	f043 0304 	orr.w	r3, r3, #4
 8006494:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006498:	4b38      	ldr	r3, [pc, #224]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 800649a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80064a6:	2301      	movs	r3, #1
 80064a8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064ac:	4b34      	ldr	r3, [pc, #208]	@ (8006580 <HAL_RCC_OscConfig+0x7bc>)
 80064ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d118      	bne.n	80064ea <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80064b8:	4b31      	ldr	r3, [pc, #196]	@ (8006580 <HAL_RCC_OscConfig+0x7bc>)
 80064ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064bc:	4a30      	ldr	r2, [pc, #192]	@ (8006580 <HAL_RCC_OscConfig+0x7bc>)
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064c4:	f7fe f85a 	bl	800457c <HAL_GetTick>
 80064c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064cc:	f7fe f856 	bl	800457c <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e347      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064de:	4b28      	ldr	r3, [pc, #160]	@ (8006580 <HAL_RCC_OscConfig+0x7bc>)
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0f0      	beq.n	80064cc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01f      	beq.n	8006536 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d010      	beq.n	8006524 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006502:	4b1e      	ldr	r3, [pc, #120]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006508:	4a1c      	ldr	r2, [pc, #112]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 800650a:	f043 0304 	orr.w	r3, r3, #4
 800650e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006512:	4b1a      	ldr	r3, [pc, #104]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006518:	4a18      	ldr	r2, [pc, #96]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006522:	e018      	b.n	8006556 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006524:	4b15      	ldr	r3, [pc, #84]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800652a:	4a14      	ldr	r2, [pc, #80]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 800652c:	f043 0301 	orr.w	r3, r3, #1
 8006530:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006534:	e00f      	b.n	8006556 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006536:	4b11      	ldr	r3, [pc, #68]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800653c:	4a0f      	ldr	r2, [pc, #60]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 800653e:	f023 0301 	bic.w	r3, r3, #1
 8006542:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006546:	4b0d      	ldr	r3, [pc, #52]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 8006548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800654c:	4a0b      	ldr	r2, [pc, #44]	@ (800657c <HAL_RCC_OscConfig+0x7b8>)
 800654e:	f023 0304 	bic.w	r3, r3, #4
 8006552:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d057      	beq.n	800660e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800655e:	f7fe f80d 	bl	800457c <HAL_GetTick>
 8006562:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006564:	e00e      	b.n	8006584 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006566:	f7fe f809 	bl	800457c <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006574:	4293      	cmp	r3, r2
 8006576:	d905      	bls.n	8006584 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e2f8      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
 800657c:	46020c00 	.word	0x46020c00
 8006580:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006584:	4b9c      	ldr	r3, [pc, #624]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 8006586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0e9      	beq.n	8006566 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01b      	beq.n	80065d6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800659e:	4b96      	ldr	r3, [pc, #600]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80065a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065a4:	4a94      	ldr	r2, [pc, #592]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80065a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80065ae:	e00a      	b.n	80065c6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b0:	f7fd ffe4 	bl	800457c <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065be:	4293      	cmp	r3, r2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e2d3      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80065c6:	4b8c      	ldr	r3, [pc, #560]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80065c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0ed      	beq.n	80065b0 <HAL_RCC_OscConfig+0x7ec>
 80065d4:	e053      	b.n	800667e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80065d6:	4b88      	ldr	r3, [pc, #544]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80065d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065dc:	4a86      	ldr	r2, [pc, #536]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80065de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065e6:	e00a      	b.n	80065fe <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e8:	f7fd ffc8 	bl	800457c <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e2b7      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065fe:	4b7e      	ldr	r3, [pc, #504]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 8006600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1ed      	bne.n	80065e8 <HAL_RCC_OscConfig+0x824>
 800660c:	e037      	b.n	800667e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800660e:	f7fd ffb5 	bl	800457c <HAL_GetTick>
 8006612:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006614:	e00a      	b.n	800662c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006616:	f7fd ffb1 	bl	800457c <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006624:	4293      	cmp	r3, r2
 8006626:	d901      	bls.n	800662c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e2a0      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800662c:	4b72      	ldr	r3, [pc, #456]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 800662e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1ed      	bne.n	8006616 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800663a:	4b6f      	ldr	r3, [pc, #444]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 800663c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01a      	beq.n	800667e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006648:	4b6b      	ldr	r3, [pc, #428]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 800664a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800664e:	4a6a      	ldr	r2, [pc, #424]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 8006650:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006654:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006658:	e00a      	b.n	8006670 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800665a:	f7fd ff8f 	bl	800457c <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006668:	4293      	cmp	r3, r2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e27e      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006670:	4b61      	ldr	r3, [pc, #388]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 8006672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1ed      	bne.n	800665a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800667e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006682:	2b01      	cmp	r3, #1
 8006684:	d107      	bne.n	8006696 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006686:	4b5c      	ldr	r3, [pc, #368]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 8006688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800668c:	4a5a      	ldr	r2, [pc, #360]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 800668e:	f023 0304 	bic.w	r3, r3, #4
 8006692:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d036      	beq.n	8006710 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d019      	beq.n	80066de <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80066aa:	4b53      	ldr	r3, [pc, #332]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a52      	ldr	r2, [pc, #328]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80066b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80066b6:	f7fd ff61 	bl	800457c <HAL_GetTick>
 80066ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066be:	f7fd ff5d 	bl	800457c <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e24e      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80066d0:	4b49      	ldr	r3, [pc, #292]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0f0      	beq.n	80066be <HAL_RCC_OscConfig+0x8fa>
 80066dc:	e018      	b.n	8006710 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80066de:	4b46      	ldr	r3, [pc, #280]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a45      	ldr	r2, [pc, #276]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80066e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066e8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80066ea:	f7fd ff47 	bl	800457c <HAL_GetTick>
 80066ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066f2:	f7fd ff43 	bl	800457c <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e234      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006704:	4b3c      	ldr	r3, [pc, #240]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1f0      	bne.n	80066f2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006718:	2b00      	cmp	r3, #0
 800671a:	d036      	beq.n	800678a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006720:	2b00      	cmp	r3, #0
 8006722:	d019      	beq.n	8006758 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006724:	4b34      	ldr	r3, [pc, #208]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a33      	ldr	r2, [pc, #204]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 800672a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800672e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006730:	f7fd ff24 	bl	800457c <HAL_GetTick>
 8006734:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006738:	f7fd ff20 	bl	800457c <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e211      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800674a:	4b2b      	ldr	r3, [pc, #172]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f0      	beq.n	8006738 <HAL_RCC_OscConfig+0x974>
 8006756:	e018      	b.n	800678a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006758:	4b27      	ldr	r3, [pc, #156]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a26      	ldr	r2, [pc, #152]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 800675e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006762:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006764:	f7fd ff0a 	bl	800457c <HAL_GetTick>
 8006768:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800676c:	f7fd ff06 	bl	800457c <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e1f7      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800677e:	4b1e      	ldr	r3, [pc, #120]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f0      	bne.n	800676c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006792:	2b00      	cmp	r3, #0
 8006794:	d07f      	beq.n	8006896 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679a:	2b00      	cmp	r3, #0
 800679c:	d062      	beq.n	8006864 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800679e:	4b16      	ldr	r3, [pc, #88]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	4a15      	ldr	r2, [pc, #84]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80067a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067a8:	6093      	str	r3, [r2, #8]
 80067aa:	4b13      	ldr	r3, [pc, #76]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b6:	4910      	ldr	r1, [pc, #64]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80067c4:	d309      	bcc.n	80067da <HAL_RCC_OscConfig+0xa16>
 80067c6:	4b0c      	ldr	r3, [pc, #48]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f023 021f 	bic.w	r2, r3, #31
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	4909      	ldr	r1, [pc, #36]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60cb      	str	r3, [r1, #12]
 80067d8:	e02a      	b.n	8006830 <HAL_RCC_OscConfig+0xa6c>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067de:	2b00      	cmp	r3, #0
 80067e0:	da0c      	bge.n	80067fc <HAL_RCC_OscConfig+0xa38>
 80067e2:	4b05      	ldr	r3, [pc, #20]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	015b      	lsls	r3, r3, #5
 80067f0:	4901      	ldr	r1, [pc, #4]	@ (80067f8 <HAL_RCC_OscConfig+0xa34>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60cb      	str	r3, [r1, #12]
 80067f6:	e01b      	b.n	8006830 <HAL_RCC_OscConfig+0xa6c>
 80067f8:	46020c00 	.word	0x46020c00
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006804:	d30a      	bcc.n	800681c <HAL_RCC_OscConfig+0xa58>
 8006806:	4ba1      	ldr	r3, [pc, #644]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	029b      	lsls	r3, r3, #10
 8006814:	499d      	ldr	r1, [pc, #628]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006816:	4313      	orrs	r3, r2
 8006818:	60cb      	str	r3, [r1, #12]
 800681a:	e009      	b.n	8006830 <HAL_RCC_OscConfig+0xa6c>
 800681c:	4b9b      	ldr	r3, [pc, #620]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	03db      	lsls	r3, r3, #15
 800682a:	4998      	ldr	r1, [pc, #608]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 800682c:	4313      	orrs	r3, r2
 800682e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006830:	4b96      	ldr	r3, [pc, #600]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a95      	ldr	r2, [pc, #596]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006836:	f043 0310 	orr.w	r3, r3, #16
 800683a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800683c:	f7fd fe9e 	bl	800457c <HAL_GetTick>
 8006840:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006844:	f7fd fe9a 	bl	800457c <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e18b      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006856:	4b8d      	ldr	r3, [pc, #564]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0f0      	beq.n	8006844 <HAL_RCC_OscConfig+0xa80>
 8006862:	e018      	b.n	8006896 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006864:	4b89      	ldr	r3, [pc, #548]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a88      	ldr	r2, [pc, #544]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 800686a:	f023 0310 	bic.w	r3, r3, #16
 800686e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006870:	f7fd fe84 	bl	800457c <HAL_GetTick>
 8006874:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006878:	f7fd fe80 	bl	800457c <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e171      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800688a:	4b80      	ldr	r3, [pc, #512]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f0      	bne.n	8006878 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 8166 	beq.w	8006b6c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80068a0:	2300      	movs	r3, #0
 80068a2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068a6:	4b79      	ldr	r3, [pc, #484]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	f003 030c 	and.w	r3, r3, #12
 80068ae:	2b0c      	cmp	r3, #12
 80068b0:	f000 80f2 	beq.w	8006a98 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	f040 80c5 	bne.w	8006a48 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80068be:	4b73      	ldr	r3, [pc, #460]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a72      	ldr	r2, [pc, #456]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80068c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068c8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80068ca:	f7fd fe57 	bl	800457c <HAL_GetTick>
 80068ce:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068d0:	e008      	b.n	80068e4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068d2:	f7fd fe53 	bl	800457c <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e144      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068e4:	4b69      	ldr	r3, [pc, #420]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1f0      	bne.n	80068d2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068f0:	4b66      	ldr	r3, [pc, #408]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80068f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d111      	bne.n	8006922 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80068fe:	4b63      	ldr	r3, [pc, #396]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006904:	4a61      	ldr	r2, [pc, #388]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006906:	f043 0304 	orr.w	r3, r3, #4
 800690a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800690e:	4b5f      	ldr	r3, [pc, #380]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006922:	4b5b      	ldr	r3, [pc, #364]	@ (8006a90 <HAL_RCC_OscConfig+0xccc>)
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800692a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800692e:	d102      	bne.n	8006936 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006930:	2301      	movs	r3, #1
 8006932:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006936:	4b56      	ldr	r3, [pc, #344]	@ (8006a90 <HAL_RCC_OscConfig+0xccc>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	4a55      	ldr	r2, [pc, #340]	@ (8006a90 <HAL_RCC_OscConfig+0xccc>)
 800693c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006940:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006942:	4b52      	ldr	r3, [pc, #328]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006946:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800694a:	f023 0303 	bic.w	r3, r3, #3
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006956:	3a01      	subs	r2, #1
 8006958:	0212      	lsls	r2, r2, #8
 800695a:	4311      	orrs	r1, r2
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006960:	430a      	orrs	r2, r1
 8006962:	494a      	ldr	r1, [pc, #296]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006964:	4313      	orrs	r3, r2
 8006966:	628b      	str	r3, [r1, #40]	@ 0x28
 8006968:	4b48      	ldr	r3, [pc, #288]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 800696a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800696c:	4b49      	ldr	r3, [pc, #292]	@ (8006a94 <HAL_RCC_OscConfig+0xcd0>)
 800696e:	4013      	ands	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006974:	3a01      	subs	r2, #1
 8006976:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800697e:	3a01      	subs	r2, #1
 8006980:	0252      	lsls	r2, r2, #9
 8006982:	b292      	uxth	r2, r2
 8006984:	4311      	orrs	r1, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800698a:	3a01      	subs	r2, #1
 800698c:	0412      	lsls	r2, r2, #16
 800698e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006992:	4311      	orrs	r1, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006998:	3a01      	subs	r2, #1
 800699a:	0612      	lsls	r2, r2, #24
 800699c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80069a0:	430a      	orrs	r2, r1
 80069a2:	493a      	ldr	r1, [pc, #232]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80069a8:	4b38      	ldr	r3, [pc, #224]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80069aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ac:	4a37      	ldr	r2, [pc, #220]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80069ae:	f023 0310 	bic.w	r3, r3, #16
 80069b2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b8:	4a34      	ldr	r2, [pc, #208]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80069be:	4b33      	ldr	r3, [pc, #204]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80069c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c2:	4a32      	ldr	r2, [pc, #200]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80069c4:	f043 0310 	orr.w	r3, r3, #16
 80069c8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80069ca:	4b30      	ldr	r3, [pc, #192]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80069cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ce:	f023 020c 	bic.w	r2, r3, #12
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d6:	492d      	ldr	r1, [pc, #180]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80069dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d105      	bne.n	80069f0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80069e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006a90 <HAL_RCC_OscConfig+0xccc>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4a29      	ldr	r2, [pc, #164]	@ (8006a90 <HAL_RCC_OscConfig+0xccc>)
 80069ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069ee:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80069f0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d107      	bne.n	8006a08 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80069f8:	4b24      	ldr	r3, [pc, #144]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 80069fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069fe:	4a23      	ldr	r2, [pc, #140]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006a00:	f023 0304 	bic.w	r3, r3, #4
 8006a04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006a08:	4b20      	ldr	r3, [pc, #128]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006a0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a12:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a14:	f7fd fdb2 	bl	800457c <HAL_GetTick>
 8006a18:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a1c:	f7fd fdae 	bl	800457c <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e09f      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006a2e:	4b17      	ldr	r3, [pc, #92]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0f0      	beq.n	8006a1c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a3a:	4b14      	ldr	r3, [pc, #80]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3e:	4a13      	ldr	r2, [pc, #76]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a44:	6293      	str	r3, [r2, #40]	@ 0x28
 8006a46:	e091      	b.n	8006b6c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006a48:	4b10      	ldr	r3, [pc, #64]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a54:	f7fd fd92 	bl	800457c <HAL_GetTick>
 8006a58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a5c:	f7fd fd8e 	bl	800457c <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e07f      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a6e:	4b07      	ldr	r3, [pc, #28]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1f0      	bne.n	8006a5c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006a7a:	4b04      	ldr	r3, [pc, #16]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7e:	4a03      	ldr	r2, [pc, #12]	@ (8006a8c <HAL_RCC_OscConfig+0xcc8>)
 8006a80:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006a84:	f023 0303 	bic.w	r3, r3, #3
 8006a88:	6293      	str	r3, [r2, #40]	@ 0x28
 8006a8a:	e06f      	b.n	8006b6c <HAL_RCC_OscConfig+0xda8>
 8006a8c:	46020c00 	.word	0x46020c00
 8006a90:	46020800 	.word	0x46020800
 8006a94:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006a98:	4b37      	ldr	r3, [pc, #220]	@ (8006b78 <HAL_RCC_OscConfig+0xdb4>)
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a9e:	4b36      	ldr	r3, [pc, #216]	@ (8006b78 <HAL_RCC_OscConfig+0xdb4>)
 8006aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d039      	beq.n	8006b20 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f003 0203 	and.w	r2, r3, #3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d132      	bne.n	8006b20 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	0a1b      	lsrs	r3, r3, #8
 8006abe:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d129      	bne.n	8006b20 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d122      	bne.n	8006b20 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ae4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d11a      	bne.n	8006b20 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	0a5b      	lsrs	r3, r3, #9
 8006aee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d111      	bne.n	8006b20 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	0c1b      	lsrs	r3, r3, #16
 8006b00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b08:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d108      	bne.n	8006b20 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	0e1b      	lsrs	r3, r3, #24
 8006b12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b1a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d001      	beq.n	8006b24 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e024      	b.n	8006b6e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b24:	4b14      	ldr	r3, [pc, #80]	@ (8006b78 <HAL_RCC_OscConfig+0xdb4>)
 8006b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b28:	08db      	lsrs	r3, r3, #3
 8006b2a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d01a      	beq.n	8006b6c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006b36:	4b10      	ldr	r3, [pc, #64]	@ (8006b78 <HAL_RCC_OscConfig+0xdb4>)
 8006b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8006b78 <HAL_RCC_OscConfig+0xdb4>)
 8006b3c:	f023 0310 	bic.w	r3, r3, #16
 8006b40:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b42:	f7fd fd1b 	bl	800457c <HAL_GetTick>
 8006b46:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006b48:	bf00      	nop
 8006b4a:	f7fd fd17 	bl	800457c <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d0f9      	beq.n	8006b4a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b5a:	4a07      	ldr	r2, [pc, #28]	@ (8006b78 <HAL_RCC_OscConfig+0xdb4>)
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006b60:	4b05      	ldr	r3, [pc, #20]	@ (8006b78 <HAL_RCC_OscConfig+0xdb4>)
 8006b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b64:	4a04      	ldr	r2, [pc, #16]	@ (8006b78 <HAL_RCC_OscConfig+0xdb4>)
 8006b66:	f043 0310 	orr.w	r3, r3, #16
 8006b6a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3738      	adds	r7, #56	@ 0x38
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	46020c00 	.word	0x46020c00

08006b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e1d9      	b.n	8006f44 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b90:	4b9b      	ldr	r3, [pc, #620]	@ (8006e00 <HAL_RCC_ClockConfig+0x284>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 030f 	and.w	r3, r3, #15
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d910      	bls.n	8006bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b9e:	4b98      	ldr	r3, [pc, #608]	@ (8006e00 <HAL_RCC_ClockConfig+0x284>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f023 020f 	bic.w	r2, r3, #15
 8006ba6:	4996      	ldr	r1, [pc, #600]	@ (8006e00 <HAL_RCC_ClockConfig+0x284>)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bae:	4b94      	ldr	r3, [pc, #592]	@ (8006e00 <HAL_RCC_ClockConfig+0x284>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d001      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e1c1      	b.n	8006f44 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d010      	beq.n	8006bee <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	695a      	ldr	r2, [r3, #20]
 8006bd0:	4b8c      	ldr	r3, [pc, #560]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d908      	bls.n	8006bee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006bdc:	4b89      	ldr	r3, [pc, #548]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	4986      	ldr	r1, [pc, #536]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d012      	beq.n	8006c20 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691a      	ldr	r2, [r3, #16]
 8006bfe:	4b81      	ldr	r3, [pc, #516]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	091b      	lsrs	r3, r3, #4
 8006c04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d909      	bls.n	8006c20 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006c0c:	4b7d      	ldr	r3, [pc, #500]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	497a      	ldr	r1, [pc, #488]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d010      	beq.n	8006c4e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	4b74      	ldr	r3, [pc, #464]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d908      	bls.n	8006c4e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006c3c:	4b71      	ldr	r3, [pc, #452]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	496e      	ldr	r1, [pc, #440]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d010      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	4b69      	ldr	r3, [pc, #420]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d908      	bls.n	8006c7c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006c6a:	4b66      	ldr	r3, [pc, #408]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	f023 020f 	bic.w	r2, r3, #15
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	4963      	ldr	r1, [pc, #396]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 80d2 	beq.w	8006e2e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d143      	bne.n	8006d1e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c96:	4b5b      	ldr	r3, [pc, #364]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d110      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006ca4:	4b57      	ldr	r3, [pc, #348]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006caa:	4a56      	ldr	r2, [pc, #344]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006cac:	f043 0304 	orr.w	r3, r3, #4
 8006cb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006cb4:	4b53      	ldr	r3, [pc, #332]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cba:	f003 0304 	and.w	r3, r3, #4
 8006cbe:	60bb      	str	r3, [r7, #8]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006cc6:	f7fd fc59 	bl	800457c <HAL_GetTick>
 8006cca:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8006e08 <HAL_RCC_ClockConfig+0x28c>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00f      	beq.n	8006cf8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006cd8:	e008      	b.n	8006cec <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006cda:	f7fd fc4f 	bl	800457c <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e12b      	b.n	8006f44 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006cec:	4b46      	ldr	r3, [pc, #280]	@ (8006e08 <HAL_RCC_ClockConfig+0x28c>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d107      	bne.n	8006d0e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006cfe:	4b41      	ldr	r3, [pc, #260]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d04:	4a3f      	ldr	r2, [pc, #252]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006d06:	f023 0304 	bic.w	r3, r3, #4
 8006d0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d121      	bne.n	8006d5e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e112      	b.n	8006f44 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d107      	bne.n	8006d36 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d26:	4b37      	ldr	r3, [pc, #220]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d115      	bne.n	8006d5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e106      	b.n	8006f44 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d107      	bne.n	8006d4e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006d3e:	4b31      	ldr	r3, [pc, #196]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0304 	and.w	r3, r3, #4
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d109      	bne.n	8006d5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e0fa      	b.n	8006f44 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e0f2      	b.n	8006f44 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006d5e:	4b29      	ldr	r3, [pc, #164]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	f023 0203 	bic.w	r2, r3, #3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	4926      	ldr	r1, [pc, #152]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006d70:	f7fd fc04 	bl	800457c <HAL_GetTick>
 8006d74:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d112      	bne.n	8006da4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d7e:	e00a      	b.n	8006d96 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d80:	f7fd fbfc 	bl	800457c <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e0d6      	b.n	8006f44 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d96:	4b1b      	ldr	r3, [pc, #108]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	f003 030c 	and.w	r3, r3, #12
 8006d9e:	2b0c      	cmp	r3, #12
 8006da0:	d1ee      	bne.n	8006d80 <HAL_RCC_ClockConfig+0x204>
 8006da2:	e044      	b.n	8006e2e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d112      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dac:	e00a      	b.n	8006dc4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dae:	f7fd fbe5 	bl	800457c <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e0bf      	b.n	8006f44 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	f003 030c 	and.w	r3, r3, #12
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d1ee      	bne.n	8006dae <HAL_RCC_ClockConfig+0x232>
 8006dd0:	e02d      	b.n	8006e2e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d123      	bne.n	8006e22 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006dda:	e00a      	b.n	8006df2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ddc:	f7fd fbce 	bl	800457c <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e0a8      	b.n	8006f44 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006df2:	4b04      	ldr	r3, [pc, #16]	@ (8006e04 <HAL_RCC_ClockConfig+0x288>)
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1ee      	bne.n	8006ddc <HAL_RCC_ClockConfig+0x260>
 8006dfe:	e016      	b.n	8006e2e <HAL_RCC_ClockConfig+0x2b2>
 8006e00:	40022000 	.word	0x40022000
 8006e04:	46020c00 	.word	0x46020c00
 8006e08:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e0c:	f7fd fbb6 	bl	800457c <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e090      	b.n	8006f44 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e22:	4b4a      	ldr	r3, [pc, #296]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f003 030c 	and.w	r3, r3, #12
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d1ee      	bne.n	8006e0c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d010      	beq.n	8006e5c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	4b43      	ldr	r3, [pc, #268]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d208      	bcs.n	8006e5c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006e4a:	4b40      	ldr	r3, [pc, #256]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	f023 020f 	bic.w	r2, r3, #15
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	493d      	ldr	r1, [pc, #244]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8006f50 <HAL_RCC_ClockConfig+0x3d4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d210      	bcs.n	8006e8c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e6a:	4b39      	ldr	r3, [pc, #228]	@ (8006f50 <HAL_RCC_ClockConfig+0x3d4>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f023 020f 	bic.w	r2, r3, #15
 8006e72:	4937      	ldr	r1, [pc, #220]	@ (8006f50 <HAL_RCC_ClockConfig+0x3d4>)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e7a:	4b35      	ldr	r3, [pc, #212]	@ (8006f50 <HAL_RCC_ClockConfig+0x3d4>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d001      	beq.n	8006e8c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e05b      	b.n	8006f44 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d010      	beq.n	8006eba <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d208      	bcs.n	8006eba <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006ea8:	4b28      	ldr	r3, [pc, #160]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	4925      	ldr	r1, [pc, #148]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d012      	beq.n	8006eec <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691a      	ldr	r2, [r3, #16]
 8006eca:	4b20      	ldr	r3, [pc, #128]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	091b      	lsrs	r3, r3, #4
 8006ed0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d209      	bcs.n	8006eec <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	4919      	ldr	r1, [pc, #100]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d010      	beq.n	8006f1a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	695a      	ldr	r2, [r3, #20]
 8006efc:	4b13      	ldr	r3, [pc, #76]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d208      	bcs.n	8006f1a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006f08:	4b10      	ldr	r3, [pc, #64]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	490d      	ldr	r1, [pc, #52]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006f1a:	f000 f859 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	4b0a      	ldr	r3, [pc, #40]	@ (8006f4c <HAL_RCC_ClockConfig+0x3d0>)
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	490a      	ldr	r1, [pc, #40]	@ (8006f54 <HAL_RCC_ClockConfig+0x3d8>)
 8006f2a:	5ccb      	ldrb	r3, [r1, r3]
 8006f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f30:	4a09      	ldr	r2, [pc, #36]	@ (8006f58 <HAL_RCC_ClockConfig+0x3dc>)
 8006f32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006f34:	4b09      	ldr	r3, [pc, #36]	@ (8006f5c <HAL_RCC_ClockConfig+0x3e0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fd fa95 	bl	8004468 <HAL_InitTick>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73fb      	strb	r3, [r7, #15]

  return status;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	46020c00 	.word	0x46020c00
 8006f50:	40022000 	.word	0x40022000
 8006f54:	0800fe00 	.word	0x0800fe00
 8006f58:	20000008 	.word	0x20000008
 8006f5c:	2000000c 	.word	0x2000000c

08006f60 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	@ 0x28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* MCO Clock Enable */
  MCO1_CLK_ENABLE();
 8006f6c:	4b16      	ldr	r3, [pc, #88]	@ (8006fc8 <HAL_RCC_MCOConfig+0x68>)
 8006f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f72:	4a15      	ldr	r2, [pc, #84]	@ (8006fc8 <HAL_RCC_MCOConfig+0x68>)
 8006f74:	f043 0301 	orr.w	r3, r3, #1
 8006f78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006f7c:	4b12      	ldr	r3, [pc, #72]	@ (8006fc8 <HAL_RCC_MCOConfig+0x68>)
 8006f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  gpio_initstruct.Pin = MCO1_PIN;
 8006f8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f8e:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Mode = GPIO_MODE_AF_PP;
 8006f90:	2302      	movs	r3, #2
 8006f92:	61bb      	str	r3, [r7, #24]
  gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f94:	2302      	movs	r3, #2
 8006f96:	623b      	str	r3, [r7, #32]
  gpio_initstruct.Pull = GPIO_NOPULL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Alternate = GPIO_AF0_MCO;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio_initstruct);
 8006fa0:	f107 0314 	add.w	r3, r7, #20
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4809      	ldr	r0, [pc, #36]	@ (8006fcc <HAL_RCC_MCOConfig+0x6c>)
 8006fa8:	f7fe fbf0 	bl	800578c <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR1, (RCC_CFGR1_MCOSEL | RCC_CFGR1_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8006fac:	4b06      	ldr	r3, [pc, #24]	@ (8006fc8 <HAL_RCC_MCOConfig+0x68>)
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	4903      	ldr	r1, [pc, #12]	@ (8006fc8 <HAL_RCC_MCOConfig+0x68>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	61cb      	str	r3, [r1, #28]
}
 8006fc0:	bf00      	nop
 8006fc2:	3728      	adds	r7, #40	@ 0x28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	46020c00 	.word	0x46020c00
 8006fcc:	42020000 	.word	0x42020000

08006fd0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b08b      	sub	sp, #44	@ 0x2c
 8006fd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fde:	4b78      	ldr	r3, [pc, #480]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fe8:	4b75      	ldr	r3, [pc, #468]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fec:	f003 0303 	and.w	r3, r3, #3
 8006ff0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <HAL_RCC_GetSysClockFreq+0x34>
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b0c      	cmp	r3, #12
 8006ffc:	d121      	bne.n	8007042 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d11e      	bne.n	8007042 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007004:	4b6e      	ldr	r3, [pc, #440]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d107      	bne.n	8007020 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007010:	4b6b      	ldr	r3, [pc, #428]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007012:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007016:	0b1b      	lsrs	r3, r3, #12
 8007018:	f003 030f 	and.w	r3, r3, #15
 800701c:	627b      	str	r3, [r7, #36]	@ 0x24
 800701e:	e005      	b.n	800702c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007020:	4b67      	ldr	r3, [pc, #412]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	0f1b      	lsrs	r3, r3, #28
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800702c:	4a65      	ldr	r2, [pc, #404]	@ (80071c4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007034:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d110      	bne.n	800705e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007040:	e00d      	b.n	800705e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007042:	4b5f      	ldr	r3, [pc, #380]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	f003 030c 	and.w	r3, r3, #12
 800704a:	2b04      	cmp	r3, #4
 800704c:	d102      	bne.n	8007054 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800704e:	4b5e      	ldr	r3, [pc, #376]	@ (80071c8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007050:	623b      	str	r3, [r7, #32]
 8007052:	e004      	b.n	800705e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b08      	cmp	r3, #8
 8007058:	d101      	bne.n	800705e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800705a:	4b5b      	ldr	r3, [pc, #364]	@ (80071c8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800705c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	2b0c      	cmp	r3, #12
 8007062:	f040 80a5 	bne.w	80071b0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007066:	4b56      	ldr	r3, [pc, #344]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007070:	4b53      	ldr	r3, [pc, #332]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	3301      	adds	r3, #1
 800707c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800707e:	4b50      	ldr	r3, [pc, #320]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007082:	091b      	lsrs	r3, r3, #4
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800708a:	4b4d      	ldr	r3, [pc, #308]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800708c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708e:	08db      	lsrs	r3, r3, #3
 8007090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d003      	beq.n	80070b4 <HAL_RCC_GetSysClockFreq+0xe4>
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d022      	beq.n	80070f8 <HAL_RCC_GetSysClockFreq+0x128>
 80070b2:	e043      	b.n	800713c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070be:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80071cc <HAL_RCC_GetSysClockFreq+0x1fc>
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b3e      	ldr	r3, [pc, #248]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80070c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80070d6:	ed97 6a01 	vldr	s12, [r7, #4]
 80070da:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80071d0 <HAL_RCC_GetSysClockFreq+0x200>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070f6:	e046      	b.n	8007186 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80071cc <HAL_RCC_GetSysClockFreq+0x1fc>
 8007106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710a:	4b2d      	ldr	r3, [pc, #180]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800710c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800711a:	ed97 6a01 	vldr	s12, [r7, #4]
 800711e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80071d0 <HAL_RCC_GetSysClockFreq+0x200>
 8007122:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800712a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713a:	e024      	b.n	8007186 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007154:	4b1a      	ldr	r3, [pc, #104]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007164:	ed97 6a01 	vldr	s12, [r7, #4]
 8007168:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80071d0 <HAL_RCC_GetSysClockFreq+0x200>
 800716c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007170:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007174:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007178:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800717c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007180:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007184:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007186:	4b0e      	ldr	r3, [pc, #56]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800718a:	0e1b      	lsrs	r3, r3, #24
 800718c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007190:	3301      	adds	r3, #1
 8007192:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800719e:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071aa:	ee17 3a90 	vmov	r3, s15
 80071ae:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80071b0:	6a3b      	ldr	r3, [r7, #32]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	372c      	adds	r7, #44	@ 0x2c
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	46020c00 	.word	0x46020c00
 80071c4:	0800fe18 	.word	0x0800fe18
 80071c8:	00f42400 	.word	0x00f42400
 80071cc:	4b742400 	.word	0x4b742400
 80071d0:	46000000 	.word	0x46000000

080071d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80071d8:	f7ff fefa 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 80071dc:	4602      	mov	r2, r0
 80071de:	4b07      	ldr	r3, [pc, #28]	@ (80071fc <HAL_RCC_GetHCLKFreq+0x28>)
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	4906      	ldr	r1, [pc, #24]	@ (8007200 <HAL_RCC_GetHCLKFreq+0x2c>)
 80071e8:	5ccb      	ldrb	r3, [r1, r3]
 80071ea:	fa22 f303 	lsr.w	r3, r2, r3
 80071ee:	4a05      	ldr	r2, [pc, #20]	@ (8007204 <HAL_RCC_GetHCLKFreq+0x30>)
 80071f0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80071f2:	4b04      	ldr	r3, [pc, #16]	@ (8007204 <HAL_RCC_GetHCLKFreq+0x30>)
 80071f4:	681b      	ldr	r3, [r3, #0]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	46020c00 	.word	0x46020c00
 8007200:	0800fe00 	.word	0x0800fe00
 8007204:	20000008 	.word	0x20000008

08007208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800720c:	f7ff ffe2 	bl	80071d4 <HAL_RCC_GetHCLKFreq>
 8007210:	4602      	mov	r2, r0
 8007212:	4b05      	ldr	r3, [pc, #20]	@ (8007228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	091b      	lsrs	r3, r3, #4
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	4903      	ldr	r1, [pc, #12]	@ (800722c <HAL_RCC_GetPCLK1Freq+0x24>)
 800721e:	5ccb      	ldrb	r3, [r1, r3]
 8007220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007224:	4618      	mov	r0, r3
 8007226:	bd80      	pop	{r7, pc}
 8007228:	46020c00 	.word	0x46020c00
 800722c:	0800fe10 	.word	0x0800fe10

08007230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007234:	f7ff ffce 	bl	80071d4 <HAL_RCC_GetHCLKFreq>
 8007238:	4602      	mov	r2, r0
 800723a:	4b05      	ldr	r3, [pc, #20]	@ (8007250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	0a1b      	lsrs	r3, r3, #8
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	4903      	ldr	r1, [pc, #12]	@ (8007254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007246:	5ccb      	ldrb	r3, [r1, r3]
 8007248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800724c:	4618      	mov	r0, r3
 800724e:	bd80      	pop	{r7, pc}
 8007250:	46020c00 	.word	0x46020c00
 8007254:	0800fe10 	.word	0x0800fe10

08007258 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800725c:	f7ff ffba 	bl	80071d4 <HAL_RCC_GetHCLKFreq>
 8007260:	4602      	mov	r2, r0
 8007262:	4b05      	ldr	r3, [pc, #20]	@ (8007278 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007266:	091b      	lsrs	r3, r3, #4
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	4903      	ldr	r1, [pc, #12]	@ (800727c <HAL_RCC_GetPCLK3Freq+0x24>)
 800726e:	5ccb      	ldrb	r3, [r1, r3]
 8007270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007274:	4618      	mov	r0, r3
 8007276:	bd80      	pop	{r7, pc}
 8007278:	46020c00 	.word	0x46020c00
 800727c:	0800fe10 	.word	0x0800fe10

08007280 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007288:	4b3e      	ldr	r3, [pc, #248]	@ (8007384 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800728a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007296:	f7fe fd17 	bl	8005cc8 <HAL_PWREx_GetVoltageRange>
 800729a:	6178      	str	r0, [r7, #20]
 800729c:	e019      	b.n	80072d2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800729e:	4b39      	ldr	r3, [pc, #228]	@ (8007384 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80072a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072a4:	4a37      	ldr	r2, [pc, #220]	@ (8007384 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80072a6:	f043 0304 	orr.w	r3, r3, #4
 80072aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80072ae:	4b35      	ldr	r3, [pc, #212]	@ (8007384 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80072b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80072bc:	f7fe fd04 	bl	8005cc8 <HAL_PWREx_GetVoltageRange>
 80072c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80072c2:	4b30      	ldr	r3, [pc, #192]	@ (8007384 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80072c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072c8:	4a2e      	ldr	r2, [pc, #184]	@ (8007384 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80072ca:	f023 0304 	bic.w	r3, r3, #4
 80072ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072d8:	d003      	beq.n	80072e2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072e0:	d109      	bne.n	80072f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072e8:	d202      	bcs.n	80072f0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80072ea:	2301      	movs	r3, #1
 80072ec:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80072ee:	e033      	b.n	8007358 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80072f0:	2300      	movs	r3, #0
 80072f2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80072f4:	e030      	b.n	8007358 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072fc:	d208      	bcs.n	8007310 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007304:	d102      	bne.n	800730c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007306:	2303      	movs	r3, #3
 8007308:	613b      	str	r3, [r7, #16]
 800730a:	e025      	b.n	8007358 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e035      	b.n	800737c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007316:	d90f      	bls.n	8007338 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007324:	d902      	bls.n	800732c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007326:	2300      	movs	r3, #0
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	e015      	b.n	8007358 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800732c:	2301      	movs	r3, #1
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	e012      	b.n	8007358 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007332:	2300      	movs	r3, #0
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	e00f      	b.n	8007358 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800733e:	d109      	bne.n	8007354 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007346:	d102      	bne.n	800734e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007348:	2301      	movs	r3, #1
 800734a:	613b      	str	r3, [r7, #16]
 800734c:	e004      	b.n	8007358 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800734e:	2302      	movs	r3, #2
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	e001      	b.n	8007358 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007354:	2301      	movs	r3, #1
 8007356:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007358:	4b0b      	ldr	r3, [pc, #44]	@ (8007388 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f023 020f 	bic.w	r2, r3, #15
 8007360:	4909      	ldr	r1, [pc, #36]	@ (8007388 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	4313      	orrs	r3, r2
 8007366:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007368:	4b07      	ldr	r3, [pc, #28]	@ (8007388 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 030f 	and.w	r3, r3, #15
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	429a      	cmp	r2, r3
 8007374:	d001      	beq.n	800737a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	46020c00 	.word	0x46020c00
 8007388:	40022000 	.word	0x40022000

0800738c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800738c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007390:	b0c4      	sub	sp, #272	@ 0x110
 8007392:	af00      	add	r7, sp, #0
 8007394:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007398:	2300      	movs	r3, #0
 800739a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800739e:	2300      	movs	r3, #0
 80073a0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	f002 0401 	and.w	r4, r2, #1
 80073b0:	2500      	movs	r5, #0
 80073b2:	ea54 0305 	orrs.w	r3, r4, r5
 80073b6:	d00b      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80073b8:	4bd5      	ldr	r3, [pc, #852]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80073ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073be:	f023 0103 	bic.w	r1, r3, #3
 80073c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c8:	4ad1      	ldr	r2, [pc, #836]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80073ca:	430b      	orrs	r3, r1
 80073cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f002 0802 	and.w	r8, r2, #2
 80073dc:	f04f 0900 	mov.w	r9, #0
 80073e0:	ea58 0309 	orrs.w	r3, r8, r9
 80073e4:	d00b      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80073e6:	4bca      	ldr	r3, [pc, #808]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80073e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073ec:	f023 010c 	bic.w	r1, r3, #12
 80073f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f6:	4ac6      	ldr	r2, [pc, #792]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80073f8:	430b      	orrs	r3, r1
 80073fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	f002 0a04 	and.w	sl, r2, #4
 800740a:	f04f 0b00 	mov.w	fp, #0
 800740e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007412:	d00b      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007414:	4bbe      	ldr	r3, [pc, #760]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800741a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800741e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007424:	4aba      	ldr	r2, [pc, #744]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007426:	430b      	orrs	r3, r1
 8007428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800742c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007434:	f002 0308 	and.w	r3, r2, #8
 8007438:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800743c:	2300      	movs	r3, #0
 800743e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007442:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007446:	460b      	mov	r3, r1
 8007448:	4313      	orrs	r3, r2
 800744a:	d00b      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800744c:	4bb0      	ldr	r3, [pc, #704]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800744e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007452:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800745a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800745c:	4aac      	ldr	r2, [pc, #688]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800745e:	430b      	orrs	r3, r1
 8007460:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f002 0310 	and.w	r3, r2, #16
 8007470:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007474:	2300      	movs	r3, #0
 8007476:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800747a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800747e:	460b      	mov	r3, r1
 8007480:	4313      	orrs	r3, r2
 8007482:	d00b      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007484:	4ba2      	ldr	r3, [pc, #648]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800748a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800748e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007494:	4a9e      	ldr	r2, [pc, #632]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007496:	430b      	orrs	r3, r1
 8007498:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800749c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80074a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074ac:	2300      	movs	r3, #0
 80074ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4313      	orrs	r3, r2
 80074ba:	d00b      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80074bc:	4b94      	ldr	r3, [pc, #592]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80074be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80074c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074cc:	4a90      	ldr	r2, [pc, #576]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80074ce:	430b      	orrs	r3, r1
 80074d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	f002 0320 	and.w	r3, r2, #32
 80074e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074e4:	2300      	movs	r3, #0
 80074e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80074ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074ee:	460b      	mov	r3, r1
 80074f0:	4313      	orrs	r3, r2
 80074f2:	d00b      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80074f4:	4b86      	ldr	r3, [pc, #536]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80074f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074fa:	f023 0107 	bic.w	r1, r3, #7
 80074fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007502:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007504:	4a82      	ldr	r2, [pc, #520]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007506:	430b      	orrs	r3, r1
 8007508:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800750c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800751c:	2300      	movs	r3, #0
 800751e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007522:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007526:	460b      	mov	r3, r1
 8007528:	4313      	orrs	r3, r2
 800752a:	d00b      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800752c:	4b78      	ldr	r3, [pc, #480]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800752e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007532:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800753a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800753c:	4a74      	ldr	r2, [pc, #464]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800753e:	430b      	orrs	r3, r1
 8007540:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007550:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007554:	2300      	movs	r3, #0
 8007556:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800755a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800755e:	460b      	mov	r3, r1
 8007560:	4313      	orrs	r3, r2
 8007562:	d00b      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007564:	4b6a      	ldr	r3, [pc, #424]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800756a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800756e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007574:	4a66      	ldr	r2, [pc, #408]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007576:	430b      	orrs	r3, r1
 8007578:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800757c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007588:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800758c:	2300      	movs	r3, #0
 800758e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007592:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007596:	460b      	mov	r3, r1
 8007598:	4313      	orrs	r3, r2
 800759a:	d00b      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800759c:	4b5c      	ldr	r3, [pc, #368]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800759e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80075a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ac:	4a58      	ldr	r2, [pc, #352]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80075ae:	430b      	orrs	r3, r1
 80075b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80075c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075c4:	2300      	movs	r3, #0
 80075c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80075ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80075ce:	460b      	mov	r3, r1
 80075d0:	4313      	orrs	r3, r2
 80075d2:	d00b      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80075d4:	4b4e      	ldr	r3, [pc, #312]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80075d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075da:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80075de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075e4:	4a4a      	ldr	r2, [pc, #296]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80075e6:	430b      	orrs	r3, r1
 80075e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80075ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80075f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075fc:	2300      	movs	r3, #0
 80075fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007602:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007606:	460b      	mov	r3, r1
 8007608:	4313      	orrs	r3, r2
 800760a:	d00b      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800760c:	4b40      	ldr	r3, [pc, #256]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800760e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007612:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8007616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800761a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800761c:	4a3c      	ldr	r2, [pc, #240]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800761e:	430b      	orrs	r3, r1
 8007620:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8007624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007634:	2300      	movs	r3, #0
 8007636:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800763a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800763e:	460b      	mov	r3, r1
 8007640:	4313      	orrs	r3, r2
 8007642:	d00c      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8007644:	4b32      	ldr	r3, [pc, #200]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007646:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800764a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800764e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007656:	4a2e      	ldr	r2, [pc, #184]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007658:	430b      	orrs	r3, r1
 800765a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800765e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800766a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800766e:	2300      	movs	r3, #0
 8007670:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007674:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007678:	460b      	mov	r3, r1
 800767a:	4313      	orrs	r3, r2
 800767c:	d00c      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800767e:	4b24      	ldr	r3, [pc, #144]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007684:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800768c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007690:	4a1f      	ldr	r2, [pc, #124]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007692:	430b      	orrs	r3, r1
 8007694:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80076a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076a8:	2300      	movs	r3, #0
 80076aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80076b2:	460b      	mov	r3, r1
 80076b4:	4313      	orrs	r3, r2
 80076b6:	d00c      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80076b8:	4b15      	ldr	r3, [pc, #84]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80076ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076be:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80076c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ca:	4a11      	ldr	r2, [pc, #68]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80076cc:	430b      	orrs	r3, r1
 80076ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80076d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80076de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076e2:	2300      	movs	r3, #0
 80076e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076e8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80076ec:	460b      	mov	r3, r1
 80076ee:	4313      	orrs	r3, r2
 80076f0:	d010      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80076f2:	4b07      	ldr	r3, [pc, #28]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80076f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80076fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007704:	4a02      	ldr	r2, [pc, #8]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007706:	430b      	orrs	r3, r1
 8007708:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800770c:	e002      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800770e:	bf00      	nop
 8007710:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007720:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007724:	2300      	movs	r3, #0
 8007726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800772a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800772e:	460b      	mov	r3, r1
 8007730:	4313      	orrs	r3, r2
 8007732:	d04c      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007738:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800773c:	2b80      	cmp	r3, #128	@ 0x80
 800773e:	d02d      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007740:	2b80      	cmp	r3, #128	@ 0x80
 8007742:	d827      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007744:	2b60      	cmp	r3, #96	@ 0x60
 8007746:	d02b      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007748:	2b60      	cmp	r3, #96	@ 0x60
 800774a:	d823      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800774c:	2b40      	cmp	r3, #64	@ 0x40
 800774e:	d006      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8007750:	2b40      	cmp	r3, #64	@ 0x40
 8007752:	d81f      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007754:	2b00      	cmp	r3, #0
 8007756:	d009      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007758:	2b20      	cmp	r3, #32
 800775a:	d011      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800775c:	e01a      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800775e:	4bbe      	ldr	r3, [pc, #760]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007762:	4abd      	ldr	r2, [pc, #756]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007768:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800776a:	e01a      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800776c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007770:	3308      	adds	r3, #8
 8007772:	4618      	mov	r0, r3
 8007774:	f002 fc32 	bl	8009fdc <RCCEx_PLL2_Config>
 8007778:	4603      	mov	r3, r0
 800777a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800777e:	e010      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007784:	332c      	adds	r3, #44	@ 0x2c
 8007786:	4618      	mov	r0, r3
 8007788:	f002 fcc0 	bl	800a10c <RCCEx_PLL3_Config>
 800778c:	4603      	mov	r3, r0
 800778e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007792:	e006      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800779a:	e002      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800779c:	bf00      	nop
 800779e:	e000      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80077a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10d      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80077aa:	4bab      	ldr	r3, [pc, #684]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077b0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80077b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077bc:	4aa6      	ldr	r2, [pc, #664]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077be:	430b      	orrs	r3, r1
 80077c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80077c4:	e003      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80077ca:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80077ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80077da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077de:	2300      	movs	r3, #0
 80077e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077e4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80077e8:	460b      	mov	r3, r1
 80077ea:	4313      	orrs	r3, r2
 80077ec:	d053      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80077ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80077f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077fa:	d033      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80077fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007800:	d82c      	bhi.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007806:	d02f      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8007808:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800780c:	d826      	bhi.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800780e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007812:	d008      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8007814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007818:	d820      	bhi.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800781e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007822:	d011      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007824:	e01a      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007826:	4b8c      	ldr	r3, [pc, #560]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782a:	4a8b      	ldr	r2, [pc, #556]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800782c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007830:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007832:	e01a      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007838:	3308      	adds	r3, #8
 800783a:	4618      	mov	r0, r3
 800783c:	f002 fbce 	bl	8009fdc <RCCEx_PLL2_Config>
 8007840:	4603      	mov	r3, r0
 8007842:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007846:	e010      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800784c:	332c      	adds	r3, #44	@ 0x2c
 800784e:	4618      	mov	r0, r3
 8007850:	f002 fc5c 	bl	800a10c <RCCEx_PLL3_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800785a:	e006      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007862:	e002      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8007864:	bf00      	nop
 8007866:	e000      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8007868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800786a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10d      	bne.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007872:	4b79      	ldr	r3, [pc, #484]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007874:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007878:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800787c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007880:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007884:	4a74      	ldr	r2, [pc, #464]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007886:	430b      	orrs	r3, r1
 8007888:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800788c:	e003      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007892:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80078a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078a4:	2300      	movs	r3, #0
 80078a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80078ac:	460b      	mov	r3, r1
 80078ae:	4313      	orrs	r3, r2
 80078b0:	d046      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80078b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80078be:	d028      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80078c0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80078c4:	d821      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80078c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078ca:	d022      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80078cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078d0:	d81b      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80078d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80078d6:	d01c      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80078d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80078dc:	d815      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80078de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e2:	d008      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80078e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e8:	d80f      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d011      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80078ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f2:	d00e      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80078f4:	e009      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078fa:	3308      	adds	r3, #8
 80078fc:	4618      	mov	r0, r3
 80078fe:	f002 fb6d 	bl	8009fdc <RCCEx_PLL2_Config>
 8007902:	4603      	mov	r3, r0
 8007904:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007908:	e004      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007910:	e000      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8007912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007914:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10d      	bne.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800791c:	4b4e      	ldr	r3, [pc, #312]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800791e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007922:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800792a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800792e:	4a4a      	ldr	r2, [pc, #296]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007930:	430b      	orrs	r3, r1
 8007932:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007936:	e003      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007938:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800793c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800794c:	673b      	str	r3, [r7, #112]	@ 0x70
 800794e:	2300      	movs	r3, #0
 8007950:	677b      	str	r3, [r7, #116]	@ 0x74
 8007952:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007956:	460b      	mov	r3, r1
 8007958:	4313      	orrs	r3, r2
 800795a:	d03f      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800795c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007964:	2b04      	cmp	r3, #4
 8007966:	d81e      	bhi.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8007968:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	080079af 	.word	0x080079af
 8007974:	08007985 	.word	0x08007985
 8007978:	08007993 	.word	0x08007993
 800797c:	080079af 	.word	0x080079af
 8007980:	080079af 	.word	0x080079af
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007984:	4b34      	ldr	r3, [pc, #208]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007988:	4a33      	ldr	r2, [pc, #204]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800798a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800798e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007990:	e00e      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007996:	332c      	adds	r3, #44	@ 0x2c
 8007998:	4618      	mov	r0, r3
 800799a:	f002 fbb7 	bl	800a10c <RCCEx_PLL3_Config>
 800799e:	4603      	mov	r3, r0
 80079a0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80079a4:	e004      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80079ac:	e000      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80079ae:	bf00      	nop
    }
    if (ret == HAL_OK)
 80079b0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10d      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80079b8:	4b27      	ldr	r3, [pc, #156]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079be:	f023 0107 	bic.w	r1, r3, #7
 80079c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079ca:	4a23      	ldr	r2, [pc, #140]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079cc:	430b      	orrs	r3, r1
 80079ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80079d2:	e003      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80079d8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80079dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80079e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079ea:	2300      	movs	r3, #0
 80079ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80079f2:	460b      	mov	r3, r1
 80079f4:	4313      	orrs	r3, r2
 80079f6:	d04c      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80079f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a04:	d02a      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8007a06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a0a:	d821      	bhi.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8007a0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a10:	d026      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8007a12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a16:	d81b      	bhi.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8007a18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a1c:	d00e      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a22:	d815      	bhi.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d01d      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8007a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a2c:	d110      	bne.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	4a09      	ldr	r2, [pc, #36]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a38:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007a3a:	e014      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a40:	332c      	adds	r3, #44	@ 0x2c
 8007a42:	4618      	mov	r0, r3
 8007a44:	f002 fb62 	bl	800a10c <RCCEx_PLL3_Config>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007a4e:	e00a      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007a56:	e006      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8007a58:	46020c00 	.word	0x46020c00
        break;
 8007a5c:	bf00      	nop
 8007a5e:	e002      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8007a60:	bf00      	nop
 8007a62:	e000      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8007a64:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007a66:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10d      	bne.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007a6e:	4baf      	ldr	r3, [pc, #700]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a80:	4aaa      	ldr	r2, [pc, #680]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007a82:	430b      	orrs	r3, r1
 8007a84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007a88:	e003      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a8a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007a8e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007a9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007aa4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	f000 80b5 	beq.w	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ab6:	4b9d      	ldr	r3, [pc, #628]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d113      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ac4:	4b99      	ldr	r3, [pc, #612]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aca:	4a98      	ldr	r2, [pc, #608]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007acc:	f043 0304 	orr.w	r3, r3, #4
 8007ad0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007ad4:	4b95      	ldr	r3, [pc, #596]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007ae2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007aec:	4b90      	ldr	r3, [pc, #576]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8007aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af0:	4a8f      	ldr	r2, [pc, #572]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8007af2:	f043 0301 	orr.w	r3, r3, #1
 8007af6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007af8:	f7fc fd40 	bl	800457c <HAL_GetTick>
 8007afc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007b00:	e00b      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b02:	f7fc fd3b 	bl	800457c <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d903      	bls.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007b18:	e005      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007b1a:	4b85      	ldr	r3, [pc, #532]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0ed      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8007b26:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d165      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b38:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d023      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x800>
 8007b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b48:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d01b      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b54:	4b75      	ldr	r3, [pc, #468]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b5e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b62:	4b72      	ldr	r3, [pc, #456]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b68:	4a70      	ldr	r2, [pc, #448]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007b6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b72:	4b6e      	ldr	r3, [pc, #440]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b78:	4a6c      	ldr	r2, [pc, #432]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b82:	4a6a      	ldr	r2, [pc, #424]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d019      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b98:	f7fc fcf0 	bl	800457c <HAL_GetTick>
 8007b9c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ba0:	e00d      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba2:	f7fc fceb 	bl	800457c <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bac:	1ad2      	subs	r2, r2, r3
 8007bae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d903      	bls.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8007bbc:	e006      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d0ea      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8007bcc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10d      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007bd4:	4b55      	ldr	r3, [pc, #340]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007be2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007be6:	4a51      	ldr	r2, [pc, #324]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007be8:	430b      	orrs	r3, r1
 8007bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007bee:	e008      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bf0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007bf4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8007bf8:	e003      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfa:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007bfe:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c02:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d107      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c0a:	4b48      	ldr	r3, [pc, #288]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c10:	4a46      	ldr	r2, [pc, #280]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007c12:	f023 0304 	bic.w	r3, r3, #4
 8007c16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007c26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c28:	2300      	movs	r3, #0
 8007c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c2c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007c30:	460b      	mov	r3, r1
 8007c32:	4313      	orrs	r3, r2
 8007c34:	d042      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c3e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007c42:	d022      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007c44:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007c48:	d81b      	bhi.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8007c4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c4e:	d011      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8007c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c54:	d815      	bhi.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d019      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x902>
 8007c5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c5e:	d110      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c64:	3308      	adds	r3, #8
 8007c66:	4618      	mov	r0, r3
 8007c68:	f002 f9b8 	bl	8009fdc <RCCEx_PLL2_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007c72:	e00d      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c74:	4b2d      	ldr	r3, [pc, #180]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c78:	4a2c      	ldr	r2, [pc, #176]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c7e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007c80:	e006      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007c88:	e002      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8007c8a:	bf00      	nop
 8007c8c:	e000      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8007c8e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007c90:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10d      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007c98:	4b24      	ldr	r3, [pc, #144]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c9e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ca6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007caa:	4a20      	ldr	r2, [pc, #128]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007cac:	430b      	orrs	r3, r1
 8007cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007cb2:	e003      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007cb8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007cc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cca:	2300      	movs	r3, #0
 8007ccc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	d031      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ce4:	d00b      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cea:	d804      	bhi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d008      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cf4:	d007      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007cfc:	e004      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8007cfe:	bf00      	nop
 8007d00:	e002      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8007d02:	bf00      	nop
 8007d04:	e000      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8007d06:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007d08:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d111      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007d10:	4b06      	ldr	r3, [pc, #24]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007d12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d22:	4a02      	ldr	r2, [pc, #8]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007d24:	430b      	orrs	r3, r1
 8007d26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007d2a:	e007      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8007d2c:	46020c00 	.word	0x46020c00
 8007d30:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d34:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007d38:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d4e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007d52:	460b      	mov	r3, r1
 8007d54:	4313      	orrs	r3, r2
 8007d56:	d00c      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007d58:	4bb2      	ldr	r3, [pc, #712]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007d5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d5e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8007d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d6a:	4aae      	ldr	r2, [pc, #696]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007d7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d80:	2300      	movs	r3, #0
 8007d82:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d84:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	d019      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d9a:	d105      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d9c:	4ba1      	ldr	r3, [pc, #644]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da0:	4aa0      	ldr	r2, [pc, #640]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007da6:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007da8:	4b9e      	ldr	r3, [pc, #632]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007daa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007dae:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007db6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007dba:	4a9a      	ldr	r2, [pc, #616]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dd4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	d00c      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007dde:	4b91      	ldr	r3, [pc, #580]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007de4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007df0:	4a8c      	ldr	r2, [pc, #560]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007df2:	430b      	orrs	r3, r1
 8007df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007e04:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e06:	2300      	movs	r3, #0
 8007e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e0a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4313      	orrs	r3, r2
 8007e12:	d00c      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007e14:	4b83      	ldr	r3, [pc, #524]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007e26:	4a7f      	ldr	r2, [pc, #508]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007e28:	430b      	orrs	r3, r1
 8007e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e40:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007e44:	460b      	mov	r3, r1
 8007e46:	4313      	orrs	r3, r2
 8007e48:	d00c      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007e4a:	4b76      	ldr	r3, [pc, #472]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e50:	f023 0218 	bic.w	r2, r3, #24
 8007e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e58:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007e5c:	4971      	ldr	r1, [pc, #452]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007e70:	623b      	str	r3, [r7, #32]
 8007e72:	2300      	movs	r3, #0
 8007e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e76:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	d032      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e84:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007e88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e8c:	d105      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e8e:	4b65      	ldr	r3, [pc, #404]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e92:	4a64      	ldr	r2, [pc, #400]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e98:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ea2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ea6:	d108      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eac:	3308      	adds	r3, #8
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f002 f894 	bl	8009fdc <RCCEx_PLL2_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8007eba:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10d      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007ec2:	4b58      	ldr	r3, [pc, #352]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007ec4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ec8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ed0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ed4:	4953      	ldr	r1, [pc, #332]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007edc:	e003      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ede:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007ee2:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8007ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	2100      	movs	r1, #0
 8007ef0:	61b9      	str	r1, [r7, #24]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	61fb      	str	r3, [r7, #28]
 8007ef8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007efc:	460b      	mov	r3, r1
 8007efe:	4313      	orrs	r3, r2
 8007f00:	d04a      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8007f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007f0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f0e:	d01e      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8007f10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f14:	d825      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8007f16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f1a:	d00e      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8007f1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f20:	d81f      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d021      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8007f26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f2a:	d11a      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f30:	4a3c      	ldr	r2, [pc, #240]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f36:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007f38:	e018      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f3e:	3308      	adds	r3, #8
 8007f40:	4618      	mov	r0, r3
 8007f42:	f002 f84b 	bl	8009fdc <RCCEx_PLL2_Config>
 8007f46:	4603      	mov	r3, r0
 8007f48:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007f4c:	e00e      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f52:	332c      	adds	r3, #44	@ 0x2c
 8007f54:	4618      	mov	r0, r3
 8007f56:	f002 f8d9 	bl	800a10c <RCCEx_PLL3_Config>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007f60:	e004      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007f68:	e000      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8007f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f6c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10d      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8007f74:	4b2b      	ldr	r3, [pc, #172]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007f76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f82:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007f86:	4927      	ldr	r1, [pc, #156]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007f8e:	e003      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f90:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007f94:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	d03d      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fc0:	d00e      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007fc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fc6:	d815      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d017      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fd0:	d110      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fd2:	4b14      	ldr	r3, [pc, #80]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd6:	4a13      	ldr	r2, [pc, #76]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fdc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007fde:	e00e      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 fff8 	bl	8009fdc <RCCEx_PLL2_Config>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007ff2:	e004      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007ffa:	e000      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8007ffc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007ffe:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8008002:	2b00      	cmp	r3, #0
 8008004:	d110      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008006:	4b07      	ldr	r3, [pc, #28]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800800c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008018:	4902      	ldr	r1, [pc, #8]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800801a:	4313      	orrs	r3, r2
 800801c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008020:	e006      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8008022:	bf00      	nop
 8008024:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008028:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800802c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800803c:	60bb      	str	r3, [r7, #8]
 800803e:	2300      	movs	r3, #0
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008046:	460b      	mov	r3, r1
 8008048:	4313      	orrs	r3, r2
 800804a:	d00c      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800804c:	4b2c      	ldr	r3, [pc, #176]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800804e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008052:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800805a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800805e:	4928      	ldr	r1, [pc, #160]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8008060:	4313      	orrs	r3, r2
 8008062:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8008066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	2100      	movs	r1, #0
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	607b      	str	r3, [r7, #4]
 8008078:	e9d7 1200 	ldrd	r1, r2, [r7]
 800807c:	460b      	mov	r3, r1
 800807e:	4313      	orrs	r3, r2
 8008080:	d036      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8008082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008086:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800808a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800808e:	d00d      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008090:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008094:	d811      	bhi.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8008096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800809a:	d012      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800809c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080a0:	d80b      	bhi.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00d      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80080a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080aa:	d106      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80080ac:	4b14      	ldr	r3, [pc, #80]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80080ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b0:	4a13      	ldr	r2, [pc, #76]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80080b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080b6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80080b8:	e004      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80080c0:	e000      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 80080c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080c4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10d      	bne.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80080cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80080ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80080d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80080de:	4908      	ldr	r1, [pc, #32]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80080e6:	e003      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80080ec:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80080f0:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80080fa:	46bd      	mov	sp, r7
 80080fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008100:	46020c00 	.word	0x46020c00

08008104 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008104:	b480      	push	{r7}
 8008106:	b089      	sub	sp, #36	@ 0x24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800810c:	4ba6      	ldr	r3, [pc, #664]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800810e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008114:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008116:	4ba4      	ldr	r3, [pc, #656]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811a:	f003 0303 	and.w	r3, r3, #3
 800811e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008120:	4ba1      	ldr	r3, [pc, #644]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008124:	0a1b      	lsrs	r3, r3, #8
 8008126:	f003 030f 	and.w	r3, r3, #15
 800812a:	3301      	adds	r3, #1
 800812c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800812e:	4b9e      	ldr	r3, [pc, #632]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008132:	091b      	lsrs	r3, r3, #4
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800813a:	4b9b      	ldr	r3, [pc, #620]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800813c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813e:	08db      	lsrs	r3, r3, #3
 8008140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	fb02 f303 	mul.w	r3, r2, r3
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008152:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b03      	cmp	r3, #3
 800815a:	d062      	beq.n	8008222 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	2b03      	cmp	r3, #3
 8008160:	f200 8081 	bhi.w	8008266 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d024      	beq.n	80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b02      	cmp	r3, #2
 800816e:	d17a      	bne.n	8008266 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80083ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800817e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008182:	4b89      	ldr	r3, [pc, #548]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008192:	ed97 6a02 	vldr	s12, [r7, #8]
 8008196:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80083b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800819a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800819e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80081a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80081aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081b2:	e08f      	b.n	80082d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80081b4:	4b7c      	ldr	r3, [pc, #496]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d005      	beq.n	80081cc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80081c0:	4b79      	ldr	r3, [pc, #484]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	0f1b      	lsrs	r3, r3, #28
 80081c6:	f003 030f 	and.w	r3, r3, #15
 80081ca:	e006      	b.n	80081da <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80081cc:	4b76      	ldr	r3, [pc, #472]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081d2:	041b      	lsls	r3, r3, #16
 80081d4:	0f1b      	lsrs	r3, r3, #28
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	4a76      	ldr	r2, [pc, #472]	@ (80083b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80081dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081e0:	ee07 3a90 	vmov	s15, r3
 80081e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	ee07 3a90 	vmov	s15, r3
 80081fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008200:	ed97 6a02 	vldr	s12, [r7, #8]
 8008204:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80083b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008208:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800820c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008210:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008214:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008220:	e058      	b.n	80082d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	ee07 3a90 	vmov	s15, r3
 8008228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008234:	4b5c      	ldr	r3, [pc, #368]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823c:	ee07 3a90 	vmov	s15, r3
 8008240:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008244:	ed97 6a02 	vldr	s12, [r7, #8]
 8008248:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80083b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800824c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008250:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008254:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008258:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800825c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008260:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008264:	e036      	b.n	80082d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008266:	4b50      	ldr	r3, [pc, #320]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d005      	beq.n	800827e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8008272:	4b4d      	ldr	r3, [pc, #308]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	0f1b      	lsrs	r3, r3, #28
 8008278:	f003 030f 	and.w	r3, r3, #15
 800827c:	e006      	b.n	800828c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800827e:	4b4a      	ldr	r3, [pc, #296]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008284:	041b      	lsls	r3, r3, #16
 8008286:	0f1b      	lsrs	r3, r3, #28
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	4a49      	ldr	r2, [pc, #292]	@ (80083b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800828e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	ee07 3a90 	vmov	s15, r3
 80082a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80082b6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80083b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80082ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80082ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082d2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80082d4:	4b34      	ldr	r3, [pc, #208]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80082d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d017      	beq.n	8008310 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80082e0:	4b31      	ldr	r3, [pc, #196]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80082e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082e4:	0a5b      	lsrs	r3, r3, #9
 80082e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80082f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80082fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80082fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008306:	ee17 2a90 	vmov	r2, s15
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	e002      	b.n	8008316 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008316:	4b24      	ldr	r3, [pc, #144]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d017      	beq.n	8008352 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008322:	4b21      	ldr	r3, [pc, #132]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008326:	0c1b      	lsrs	r3, r3, #16
 8008328:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800832c:	ee07 3a90 	vmov	s15, r3
 8008330:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008334:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008338:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800833c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008348:	ee17 2a90 	vmov	r2, s15
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	605a      	str	r2, [r3, #4]
 8008350:	e002      	b.n	8008358 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008358:	4b13      	ldr	r3, [pc, #76]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800835a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d017      	beq.n	8008394 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008364:	4b10      	ldr	r3, [pc, #64]	@ (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008368:	0e1b      	lsrs	r3, r3, #24
 800836a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008376:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800837a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800837e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800838a:	ee17 2a90 	vmov	r2, s15
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008392:	e002      	b.n	800839a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	609a      	str	r2, [r3, #8]
}
 800839a:	bf00      	nop
 800839c:	3724      	adds	r7, #36	@ 0x24
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	46020c00 	.word	0x46020c00
 80083ac:	4b742400 	.word	0x4b742400
 80083b0:	46000000 	.word	0x46000000
 80083b4:	0800fe18 	.word	0x0800fe18

080083b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b089      	sub	sp, #36	@ 0x24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80083c0:	4ba6      	ldr	r3, [pc, #664]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80083ca:	4ba4      	ldr	r3, [pc, #656]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ce:	f003 0303 	and.w	r3, r3, #3
 80083d2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80083d4:	4ba1      	ldr	r3, [pc, #644]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d8:	0a1b      	lsrs	r3, r3, #8
 80083da:	f003 030f 	and.w	r3, r3, #15
 80083de:	3301      	adds	r3, #1
 80083e0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80083e2:	4b9e      	ldr	r3, [pc, #632]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e6:	091b      	lsrs	r3, r3, #4
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80083ee:	4b9b      	ldr	r3, [pc, #620]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f2:	08db      	lsrs	r3, r3, #3
 80083f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	fb02 f303 	mul.w	r3, r2, r3
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008406:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b03      	cmp	r3, #3
 800840e:	d062      	beq.n	80084d6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2b03      	cmp	r3, #3
 8008414:	f200 8081 	bhi.w	800851a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d024      	beq.n	8008468 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b02      	cmp	r3, #2
 8008422:	d17a      	bne.n	800851a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	ee07 3a90 	vmov	s15, r3
 800842a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008436:	4b89      	ldr	r3, [pc, #548]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800843a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843e:	ee07 3a90 	vmov	s15, r3
 8008442:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008446:	ed97 6a02 	vldr	s12, [r7, #8]
 800844a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008664 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800844e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008452:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800845a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800845e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008466:	e08f      	b.n	8008588 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008468:	4b7c      	ldr	r3, [pc, #496]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008474:	4b79      	ldr	r3, [pc, #484]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	0f1b      	lsrs	r3, r3, #28
 800847a:	f003 030f 	and.w	r3, r3, #15
 800847e:	e006      	b.n	800848e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008480:	4b76      	ldr	r3, [pc, #472]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008486:	041b      	lsls	r3, r3, #16
 8008488:	0f1b      	lsrs	r3, r3, #28
 800848a:	f003 030f 	and.w	r3, r3, #15
 800848e:	4a76      	ldr	r2, [pc, #472]	@ (8008668 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008494:	ee07 3a90 	vmov	s15, r3
 8008498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	ee07 3a90 	vmov	s15, r3
 80084b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80084b8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008664 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80084bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80084cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084d4:	e058      	b.n	8008588 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80084e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084e8:	4b5c      	ldr	r3, [pc, #368]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80084f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80084fc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008664 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008500:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008504:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008508:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800850c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008514:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008518:	e036      	b.n	8008588 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800851a:	4b50      	ldr	r3, [pc, #320]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008526:	4b4d      	ldr	r3, [pc, #308]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	0f1b      	lsrs	r3, r3, #28
 800852c:	f003 030f 	and.w	r3, r3, #15
 8008530:	e006      	b.n	8008540 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8008532:	4b4a      	ldr	r3, [pc, #296]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008538:	041b      	lsls	r3, r3, #16
 800853a:	0f1b      	lsrs	r3, r3, #28
 800853c:	f003 030f 	and.w	r3, r3, #15
 8008540:	4a49      	ldr	r2, [pc, #292]	@ (8008668 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008566:	ed97 6a02 	vldr	s12, [r7, #8]
 800856a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008664 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800856e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800857a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800857e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008586:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008588:	4b34      	ldr	r3, [pc, #208]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800858a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d017      	beq.n	80085c4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008594:	4b31      	ldr	r3, [pc, #196]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008598:	0a5b      	lsrs	r3, r3, #9
 800859a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80085a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80085ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80085b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ba:	ee17 2a90 	vmov	r2, s15
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	e002      	b.n	80085ca <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80085ca:	4b24      	ldr	r3, [pc, #144]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d017      	beq.n	8008606 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80085d6:	4b21      	ldr	r3, [pc, #132]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085da:	0c1b      	lsrs	r3, r3, #16
 80085dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085e0:	ee07 3a90 	vmov	s15, r3
 80085e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80085e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085ec:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80085f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80085f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085fc:	ee17 2a90 	vmov	r2, s15
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	605a      	str	r2, [r3, #4]
 8008604:	e002      	b.n	800860c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800860c:	4b13      	ldr	r3, [pc, #76]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800860e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008610:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d017      	beq.n	8008648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008618:	4b10      	ldr	r3, [pc, #64]	@ (800865c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800861a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800861c:	0e1b      	lsrs	r3, r3, #24
 800861e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008622:	ee07 3a90 	vmov	s15, r3
 8008626:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800862a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800862e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008632:	edd7 6a07 	vldr	s13, [r7, #28]
 8008636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800863a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800863e:	ee17 2a90 	vmov	r2, s15
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008646:	e002      	b.n	800864e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	609a      	str	r2, [r3, #8]
}
 800864e:	bf00      	nop
 8008650:	3724      	adds	r7, #36	@ 0x24
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	46020c00 	.word	0x46020c00
 8008660:	4b742400 	.word	0x4b742400
 8008664:	46000000 	.word	0x46000000
 8008668:	0800fe18 	.word	0x0800fe18

0800866c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800866c:	b480      	push	{r7}
 800866e:	b089      	sub	sp, #36	@ 0x24
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008674:	4ba6      	ldr	r3, [pc, #664]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800867e:	4ba4      	ldr	r3, [pc, #656]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008688:	4ba1      	ldr	r3, [pc, #644]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800868a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800868c:	0a1b      	lsrs	r3, r3, #8
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	3301      	adds	r3, #1
 8008694:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008696:	4b9e      	ldr	r3, [pc, #632]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869a:	091b      	lsrs	r3, r3, #4
 800869c:	f003 0301 	and.w	r3, r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80086a2:	4b9b      	ldr	r3, [pc, #620]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086a6:	08db      	lsrs	r3, r3, #3
 80086a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	fb02 f303 	mul.w	r3, r2, r3
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ba:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2b03      	cmp	r3, #3
 80086c2:	d062      	beq.n	800878a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	f200 8081 	bhi.w	80087ce <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d024      	beq.n	800871c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d17a      	bne.n	80087ce <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80086e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ea:	4b89      	ldr	r3, [pc, #548]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80086fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80086fe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008702:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008706:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800870a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800870e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008716:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800871a:	e08f      	b.n	800883c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800871c:	4b7c      	ldr	r3, [pc, #496]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008728:	4b79      	ldr	r3, [pc, #484]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	0f1b      	lsrs	r3, r3, #28
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	e006      	b.n	8008742 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008734:	4b76      	ldr	r3, [pc, #472]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800873a:	041b      	lsls	r3, r3, #16
 800873c:	0f1b      	lsrs	r3, r3, #28
 800873e:	f003 030f 	and.w	r3, r3, #15
 8008742:	4a76      	ldr	r2, [pc, #472]	@ (800891c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008748:	ee07 3a90 	vmov	s15, r3
 800874c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	ee07 3a90 	vmov	s15, r3
 8008764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008768:	ed97 6a02 	vldr	s12, [r7, #8]
 800876c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800877c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008784:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008788:	e058      	b.n	800883c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	ee07 3a90 	vmov	s15, r3
 8008790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008794:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879c:	4b5c      	ldr	r3, [pc, #368]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800879e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a4:	ee07 3a90 	vmov	s15, r3
 80087a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80087ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80087b0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80087b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80087b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80087bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80087c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087cc:	e036      	b.n	800883c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80087ce:	4b50      	ldr	r3, [pc, #320]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80087da:	4b4d      	ldr	r3, [pc, #308]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	0f1b      	lsrs	r3, r3, #28
 80087e0:	f003 030f 	and.w	r3, r3, #15
 80087e4:	e006      	b.n	80087f4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80087e6:	4b4a      	ldr	r3, [pc, #296]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087ec:	041b      	lsls	r3, r3, #16
 80087ee:	0f1b      	lsrs	r3, r3, #28
 80087f0:	f003 030f 	and.w	r3, r3, #15
 80087f4:	4a49      	ldr	r2, [pc, #292]	@ (800891c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80087f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881a:	ed97 6a02 	vldr	s12, [r7, #8]
 800881e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800882e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800883a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800883c:	4b34      	ldr	r3, [pc, #208]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800883e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d017      	beq.n	8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008848:	4b31      	ldr	r3, [pc, #196]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800884a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800884c:	0a5b      	lsrs	r3, r3, #9
 800884e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800885a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800885e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008862:	edd7 6a07 	vldr	s13, [r7, #28]
 8008866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800886a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800886e:	ee17 2a90 	vmov	r2, s15
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	e002      	b.n	800887e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800887e:	4b24      	ldr	r3, [pc, #144]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d017      	beq.n	80088ba <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800888a:	4b21      	ldr	r3, [pc, #132]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800888c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800888e:	0c1b      	lsrs	r3, r3, #16
 8008890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008894:	ee07 3a90 	vmov	s15, r3
 8008898:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800889c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088a0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80088a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80088a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088b0:	ee17 2a90 	vmov	r2, s15
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	605a      	str	r2, [r3, #4]
 80088b8:	e002      	b.n	80088c0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80088c0:	4b13      	ldr	r3, [pc, #76]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d017      	beq.n	80088fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80088cc:	4b10      	ldr	r3, [pc, #64]	@ (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088d0:	0e1b      	lsrs	r3, r3, #24
 80088d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80088de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80088e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088f2:	ee17 2a90 	vmov	r2, s15
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80088fa:	e002      	b.n	8008902 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	609a      	str	r2, [r3, #8]
}
 8008902:	bf00      	nop
 8008904:	3724      	adds	r7, #36	@ 0x24
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	46020c00 	.word	0x46020c00
 8008914:	4b742400 	.word	0x4b742400
 8008918:	46000000 	.word	0x46000000
 800891c:	0800fe18 	.word	0x0800fe18

08008920 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08e      	sub	sp, #56	@ 0x38
 8008924:	af00      	add	r7, sp, #0
 8008926:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800892a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800892e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008932:	430b      	orrs	r3, r1
 8008934:	d145      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008936:	4ba7      	ldr	r3, [pc, #668]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800893c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008940:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008942:	4ba4      	ldr	r3, [pc, #656]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008948:	f003 0302 	and.w	r3, r3, #2
 800894c:	2b02      	cmp	r3, #2
 800894e:	d108      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008956:	d104      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008958:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
 800895e:	f001 bb31 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008962:	4b9c      	ldr	r3, [pc, #624]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800896c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008970:	d114      	bne.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008978:	d110      	bne.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800897a:	4b96      	ldr	r3, [pc, #600]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800897c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008988:	d103      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800898a:	23fa      	movs	r3, #250	@ 0xfa
 800898c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800898e:	f001 bb19 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8008992:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008996:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008998:	f001 bb14 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800899c:	4b8d      	ldr	r3, [pc, #564]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089a8:	d107      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089b0:	d103      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80089b2:	4b89      	ldr	r3, [pc, #548]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80089b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b6:	f001 bb05 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80089be:	f001 bb01 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80089c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80089ca:	430b      	orrs	r3, r1
 80089cc:	d151      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80089ce:	4b81      	ldr	r3, [pc, #516]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80089d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089d4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80089d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80089da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089dc:	2b80      	cmp	r3, #128	@ 0x80
 80089de:	d035      	beq.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80089e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e2:	2b80      	cmp	r3, #128	@ 0x80
 80089e4:	d841      	bhi.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	2b60      	cmp	r3, #96	@ 0x60
 80089ea:	d02a      	beq.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ee:	2b60      	cmp	r3, #96	@ 0x60
 80089f0:	d83b      	bhi.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	2b40      	cmp	r3, #64	@ 0x40
 80089f6:	d009      	beq.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80089f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fa:	2b40      	cmp	r3, #64	@ 0x40
 80089fc:	d835      	bhi.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00c      	beq.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	d012      	beq.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008a0a:	e02e      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff fb77 	bl	8008104 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a1a:	f001 bad3 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a1e:	f107 0318 	add.w	r3, r7, #24
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff fcc8 	bl	80083b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a2c:	f001 baca 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a30:	f107 030c 	add.w	r3, r7, #12
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7ff fe19 	bl	800866c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a3e:	f001 bac1 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008a42:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008a46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a48:	f001 babc 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a4c:	4b61      	ldr	r3, [pc, #388]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a58:	d103      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008a5a:	4b60      	ldr	r3, [pc, #384]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008a5c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a5e:	f001 bab1 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a66:	f001 baad 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a6e:	f001 baa9 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a76:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008a7a:	430b      	orrs	r3, r1
 8008a7c:	d158      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008a7e:	4b55      	ldr	r3, [pc, #340]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a88:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a90:	d03b      	beq.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a98:	d846      	bhi.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008aa0:	d02e      	beq.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008aa8:	d83e      	bhi.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab0:	d00b      	beq.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab8:	d836      	bhi.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00d      	beq.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac6:	d012      	beq.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008ac8:	e02e      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff fb18 	bl	8008104 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ad8:	f001 ba74 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008adc:	f107 0318 	add.w	r3, r7, #24
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fc69 	bl	80083b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008aea:	f001 ba6b 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aee:	f107 030c 	add.w	r3, r7, #12
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff fdba 	bl	800866c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008afc:	f001 ba62 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008b00:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008b04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b06:	f001 ba5d 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b0a:	4b32      	ldr	r3, [pc, #200]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b16:	d103      	bne.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008b18:	4b30      	ldr	r3, [pc, #192]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008b1a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b1c:	f001 ba52 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b24:	f001 ba4e 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b2c:	f001 ba4a 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b34:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	d126      	bne.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008b3c:	4b25      	ldr	r3, [pc, #148]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008b3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b46:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008b48:	4b22      	ldr	r3, [pc, #136]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b54:	d106      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d103      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8008b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b60:	f001 ba30 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008b64:	4b1b      	ldr	r3, [pc, #108]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b70:	d107      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8008b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b78:	d103      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8008b7a:	4b19      	ldr	r3, [pc, #100]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b7e:	f001 ba21 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b86:	f001 ba1d 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b8e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008b92:	430b      	orrs	r3, r1
 8008b94:	d16e      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008b96:	4b0f      	ldr	r3, [pc, #60]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b9c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008ba0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008ba8:	d03d      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008bb0:	d85c      	bhi.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bb8:	d014      	beq.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bc0:	d854      	bhi.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01f      	beq.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bce:	d012      	beq.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008bd0:	e04c      	b.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008bd2:	bf00      	nop
 8008bd4:	46020c00 	.word	0x46020c00
 8008bd8:	0007a120 	.word	0x0007a120
 8008bdc:	00f42400 	.word	0x00f42400
 8008be0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7ff fa8b 	bl	8008104 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bf2:	f001 b9e7 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bf6:	f107 0318 	add.w	r3, r7, #24
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7ff fbdc 	bl	80083b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c04:	f001 b9de 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008c08:	4ba7      	ldr	r3, [pc, #668]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c14:	d103      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8008c16:	4ba5      	ldr	r3, [pc, #660]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c18:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c1a:	f001 b9d3 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c22:	f001 b9cf 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008c26:	4ba0      	ldr	r3, [pc, #640]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b20      	cmp	r3, #32
 8008c30:	d118      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008c32:	4b9d      	ldr	r3, [pc, #628]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d005      	beq.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008c3e:	4b9a      	ldr	r3, [pc, #616]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	0e1b      	lsrs	r3, r3, #24
 8008c44:	f003 030f 	and.w	r3, r3, #15
 8008c48:	e006      	b.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008c4a:	4b97      	ldr	r3, [pc, #604]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c50:	041b      	lsls	r3, r3, #16
 8008c52:	0e1b      	lsrs	r3, r3, #24
 8008c54:	f003 030f 	and.w	r3, r3, #15
 8008c58:	4a95      	ldr	r2, [pc, #596]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c60:	f001 b9b0 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c68:	f001 b9ac 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c70:	f001 b9a8 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c78:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	d17f      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008c80:	4b89      	ldr	r3, [pc, #548]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c8a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d165      	bne.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008c92:	4b85      	ldr	r3, [pc, #532]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c98:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008c9c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008ca4:	d034      	beq.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008cac:	d853      	bhi.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cb4:	d00b      	beq.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cbc:	d84b      	bhi.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d016      	beq.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008cca:	d009      	beq.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008ccc:	e043      	b.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff fa16 	bl	8008104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cda:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008cdc:	f001 b972 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ce0:	f107 0318 	add.w	r3, r7, #24
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7ff fb67 	bl	80083b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008cee:	f001 b969 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008cfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cfe:	d103      	bne.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8008d00:	4b6a      	ldr	r3, [pc, #424]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d02:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008d04:	f001 b95e 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008d0c:	f001 b95a 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008d10:	4b65      	ldr	r3, [pc, #404]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0320 	and.w	r3, r3, #32
 8008d18:	2b20      	cmp	r3, #32
 8008d1a:	d118      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d1c:	4b62      	ldr	r3, [pc, #392]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8008d28:	4b5f      	ldr	r3, [pc, #380]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	0e1b      	lsrs	r3, r3, #24
 8008d2e:	f003 030f 	and.w	r3, r3, #15
 8008d32:	e006      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008d34:	4b5c      	ldr	r3, [pc, #368]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d3a:	041b      	lsls	r3, r3, #16
 8008d3c:	0e1b      	lsrs	r3, r3, #24
 8008d3e:	f003 030f 	and.w	r3, r3, #15
 8008d42:	4a5b      	ldr	r2, [pc, #364]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d48:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008d4a:	f001 b93b 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008d52:	f001 b937 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008d5a:	f001 b933 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d64:	d108      	bne.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff f9ca 	bl	8008104 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d74:	f001 b926 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d7c:	f001 b922 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d84:	1e51      	subs	r1, r2, #1
 8008d86:	430b      	orrs	r3, r1
 8008d88:	d136      	bne.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008d8a:	4b47      	ldr	r3, [pc, #284]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d90:	f003 0303 	and.w	r3, r3, #3
 8008d94:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d104      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008d9c:	f7fe fa48 	bl	8007230 <HAL_RCC_GetPCLK2Freq>
 8008da0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008da2:	f001 b90f 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d104      	bne.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008dac:	f7fe f910 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8008db0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008db2:	f001 b907 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008db6:	4b3c      	ldr	r3, [pc, #240]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dc2:	d106      	bne.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d103      	bne.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8008dca:	4b3a      	ldr	r3, [pc, #232]	@ (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dce:	f001 b8f9 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008dd2:	4b35      	ldr	r3, [pc, #212]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d107      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d104      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8008de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dec:	f001 b8ea 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df4:	f001 b8e6 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dfc:	1e91      	subs	r1, r2, #2
 8008dfe:	430b      	orrs	r3, r1
 8008e00:	d136      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008e02:	4b29      	ldr	r3, [pc, #164]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e08:	f003 030c 	and.w	r3, r3, #12
 8008e0c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d104      	bne.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008e14:	f7fe f9f8 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 8008e18:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e1a:	f001 b8d3 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d104      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e24:	f7fe f8d4 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8008e28:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e2a:	f001 b8cb 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e3a:	d106      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d103      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8008e42:	4b1c      	ldr	r3, [pc, #112]	@ (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e46:	f001 b8bd 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008e4a:	4b17      	ldr	r3, [pc, #92]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e50:	f003 0302 	and.w	r3, r3, #2
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d107      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5a:	2b0c      	cmp	r3, #12
 8008e5c:	d104      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8008e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e64:	f001 b8ae 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e6c:	f001 b8aa 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e74:	1f11      	subs	r1, r2, #4
 8008e76:	430b      	orrs	r3, r1
 8008e78:	d13f      	bne.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008e84:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d104      	bne.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008e8c:	f7fe f9bc 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 8008e90:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e92:	f001 b897 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	2b10      	cmp	r3, #16
 8008e9a:	d10d      	bne.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e9c:	f7fe f898 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8008ea0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ea2:	f001 b88f 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8008ea6:	bf00      	nop
 8008ea8:	46020c00 	.word	0x46020c00
 8008eac:	02dc6c00 	.word	0x02dc6c00
 8008eb0:	0800fe18 	.word	0x0800fe18
 8008eb4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008eb8:	4ba8      	ldr	r3, [pc, #672]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ec4:	d106      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec8:	2b20      	cmp	r3, #32
 8008eca:	d103      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8008ecc:	4ba4      	ldr	r3, [pc, #656]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ed0:	f001 b878 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008ed4:	4ba1      	ldr	r3, [pc, #644]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d107      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee4:	2b30      	cmp	r3, #48	@ 0x30
 8008ee6:	d104      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8008ee8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eee:	f001 b869 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ef6:	f001 b865 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008efa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008efe:	f1a2 0108 	sub.w	r1, r2, #8
 8008f02:	430b      	orrs	r3, r1
 8008f04:	d136      	bne.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008f06:	4b95      	ldr	r3, [pc, #596]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f0c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f10:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d104      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008f18:	f7fe f976 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 8008f1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f1e:	f001 b851 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	2b40      	cmp	r3, #64	@ 0x40
 8008f26:	d104      	bne.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f28:	f7fe f852 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8008f2c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f2e:	f001 b849 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008f32:	4b8a      	ldr	r3, [pc, #552]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f3e:	d106      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8008f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f42:	2b80      	cmp	r3, #128	@ 0x80
 8008f44:	d103      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8008f46:	4b86      	ldr	r3, [pc, #536]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f4a:	f001 b83b 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008f4e:	4b83      	ldr	r3, [pc, #524]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d107      	bne.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f60:	d104      	bne.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8008f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f68:	f001 b82c 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f70:	f001 b828 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f78:	f1a2 0110 	sub.w	r1, r2, #16
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	d139      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008f80:	4b76      	ldr	r3, [pc, #472]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d104      	bne.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008f92:	f7fe f939 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 8008f96:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f98:	f001 b814 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fa2:	d104      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008fa4:	f7fe f814 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8008fa8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008faa:	f001 b80b 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008fae:	4b6b      	ldr	r3, [pc, #428]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fba:	d107      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fc2:	d103      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8008fc4:	4b66      	ldr	r3, [pc, #408]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc8:	f000 bffc 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008fcc:	4b63      	ldr	r3, [pc, #396]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d108      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fe0:	d104      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fe8:	f000 bfec 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff0:	f000 bfe8 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8008ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff8:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	d139      	bne.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8009000:	4b56      	ldr	r3, [pc, #344]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009002:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009006:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800900a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800900c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900e:	2b00      	cmp	r3, #0
 8009010:	d104      	bne.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009012:	f7fe f8f9 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 8009016:	6378      	str	r0, [r7, #52]	@ 0x34
 8009018:	f000 bfd4 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009022:	d104      	bne.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009024:	f7fd ffd4 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8009028:	6378      	str	r0, [r7, #52]	@ 0x34
 800902a:	f000 bfcb 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800902e:	4b4b      	ldr	r3, [pc, #300]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800903a:	d107      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009042:	d103      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8009044:	4b46      	ldr	r3, [pc, #280]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009046:	637b      	str	r3, [r7, #52]	@ 0x34
 8009048:	f000 bfbc 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800904c:	4b43      	ldr	r3, [pc, #268]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800904e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b02      	cmp	r3, #2
 8009058:	d108      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800905a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009060:	d104      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8009062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009066:	637b      	str	r3, [r7, #52]	@ 0x34
 8009068:	f000 bfac 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009070:	f000 bfa8 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8009074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009078:	f1a2 0120 	sub.w	r1, r2, #32
 800907c:	430b      	orrs	r3, r1
 800907e:	d158      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009080:	4b36      	ldr	r3, [pc, #216]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800908c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908e:	2b00      	cmp	r3, #0
 8009090:	d104      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8009092:	f7fe f8e1 	bl	8007258 <HAL_RCC_GetPCLK3Freq>
 8009096:	6378      	str	r0, [r7, #52]	@ 0x34
 8009098:	f000 bf94 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800909c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d104      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80090a2:	f7fd ff95 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 80090a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80090a8:	f000 bf8c 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80090ac:	4b2b      	ldr	r3, [pc, #172]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090b8:	d106      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80090ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d103      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 80090c0:	4b27      	ldr	r3, [pc, #156]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80090c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090c4:	f000 bf7e 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80090c8:	4b24      	ldr	r3, [pc, #144]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80090ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d107      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d104      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 80090dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e2:	f000 bf6f 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80090e6:	4b1d      	ldr	r3, [pc, #116]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0320 	and.w	r3, r3, #32
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	d11b      	bne.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80090f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d118      	bne.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80090f8:	4b18      	ldr	r3, [pc, #96]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d005      	beq.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8009104:	4b15      	ldr	r3, [pc, #84]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	0e1b      	lsrs	r3, r3, #24
 800910a:	f003 030f 	and.w	r3, r3, #15
 800910e:	e006      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8009110:	4b12      	ldr	r3, [pc, #72]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009116:	041b      	lsls	r3, r3, #16
 8009118:	0e1b      	lsrs	r3, r3, #24
 800911a:	f003 030f 	and.w	r3, r3, #15
 800911e:	4a11      	ldr	r2, [pc, #68]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009124:	637b      	str	r3, [r7, #52]	@ 0x34
 8009126:	f000 bf4d 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800912a:	2300      	movs	r3, #0
 800912c:	637b      	str	r3, [r7, #52]	@ 0x34
 800912e:	f000 bf49 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8009132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009136:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800913a:	430b      	orrs	r3, r1
 800913c:	d172      	bne.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800913e:	4b07      	ldr	r3, [pc, #28]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009144:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009148:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009150:	d10a      	bne.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009152:	f7fd ff3d 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8009156:	6378      	str	r0, [r7, #52]	@ 0x34
 8009158:	f000 bf34 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800915c:	46020c00 	.word	0x46020c00
 8009160:	00f42400 	.word	0x00f42400
 8009164:	0800fe18 	.word	0x0800fe18
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800916e:	d108      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009170:	f107 0318 	add.w	r3, r7, #24
 8009174:	4618      	mov	r0, r3
 8009176:	f7ff f91f 	bl	80083b8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	637b      	str	r3, [r7, #52]	@ 0x34
 800917e:	f000 bf21 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	2b00      	cmp	r3, #0
 8009186:	d104      	bne.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8009188:	f7fe f824 	bl	80071d4 <HAL_RCC_GetHCLKFreq>
 800918c:	6378      	str	r0, [r7, #52]	@ 0x34
 800918e:	f000 bf19 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009194:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009198:	d122      	bne.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800919a:	4bb0      	ldr	r3, [pc, #704]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b20      	cmp	r3, #32
 80091a4:	d118      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80091a6:	4bad      	ldr	r3, [pc, #692]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d005      	beq.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 80091b2:	4baa      	ldr	r3, [pc, #680]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	0e1b      	lsrs	r3, r3, #24
 80091b8:	f003 030f 	and.w	r3, r3, #15
 80091bc:	e006      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80091be:	4ba7      	ldr	r3, [pc, #668]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80091c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091c4:	041b      	lsls	r3, r3, #16
 80091c6:	0e1b      	lsrs	r3, r3, #24
 80091c8:	f003 030f 	and.w	r3, r3, #15
 80091cc:	4aa4      	ldr	r2, [pc, #656]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80091ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d4:	f000 bef6 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	637b      	str	r3, [r7, #52]	@ 0x34
 80091dc:	f000 bef2 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80091e0:	4b9e      	ldr	r3, [pc, #632]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ec:	d107      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091f4:	d103      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 80091f6:	4b9b      	ldr	r3, [pc, #620]	@ (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 80091f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091fa:	f000 bee3 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80091fe:	4b97      	ldr	r3, [pc, #604]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800920a:	d107      	bne.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800920c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009212:	d103      	bne.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8009214:	4b93      	ldr	r3, [pc, #588]	@ (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8009216:	637b      	str	r3, [r7, #52]	@ 0x34
 8009218:	f000 bed4 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800921c:	2300      	movs	r3, #0
 800921e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009220:	f000 bed0 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009228:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800922c:	430b      	orrs	r3, r1
 800922e:	d158      	bne.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009230:	4b8a      	ldr	r3, [pc, #552]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009232:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800923c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923e:	2b04      	cmp	r3, #4
 8009240:	d84b      	bhi.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8009242:	a201      	add	r2, pc, #4	@ (adr r2, 8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	08009281 	.word	0x08009281
 800924c:	0800925d 	.word	0x0800925d
 8009250:	0800926f 	.word	0x0800926f
 8009254:	0800928b 	.word	0x0800928b
 8009258:	08009295 	.word	0x08009295
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800925c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe ff4f 	bl	8008104 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800926a:	f000 beab 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800926e:	f107 030c 	add.w	r3, r7, #12
 8009272:	4618      	mov	r0, r3
 8009274:	f7ff f9fa 	bl	800866c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800927c:	f000 bea2 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009280:	f7fd ffa8 	bl	80071d4 <HAL_RCC_GetHCLKFreq>
 8009284:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009286:	f000 be9d 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800928a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800928e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009290:	f000 be98 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009294:	4b71      	ldr	r3, [pc, #452]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0320 	and.w	r3, r3, #32
 800929c:	2b20      	cmp	r3, #32
 800929e:	d118      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80092a0:	4b6e      	ldr	r3, [pc, #440]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d005      	beq.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80092ac:	4b6b      	ldr	r3, [pc, #428]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	0e1b      	lsrs	r3, r3, #24
 80092b2:	f003 030f 	and.w	r3, r3, #15
 80092b6:	e006      	b.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80092b8:	4b68      	ldr	r3, [pc, #416]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80092ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092be:	041b      	lsls	r3, r3, #16
 80092c0:	0e1b      	lsrs	r3, r3, #24
 80092c2:	f003 030f 	and.w	r3, r3, #15
 80092c6:	4a66      	ldr	r2, [pc, #408]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80092c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80092ce:	f000 be79 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092d6:	f000 be75 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092de:	f000 be71 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80092e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092e6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80092ea:	430b      	orrs	r3, r1
 80092ec:	d167      	bne.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80092ee:	4b5b      	ldr	r3, [pc, #364]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80092f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092f4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80092f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80092fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009300:	d036      	beq.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009308:	d855      	bhi.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800930a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009310:	d029      	beq.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8009312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009314:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009318:	d84d      	bhi.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009320:	d013      	beq.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8009322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009324:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009328:	d845      	bhi.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800932a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932c:	2b00      	cmp	r3, #0
 800932e:	d015      	beq.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8009330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009336:	d13e      	bne.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe fee1 	bl	8008104 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009344:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009346:	f000 be3d 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800934a:	f107 030c 	add.w	r3, r7, #12
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff f98c 	bl	800866c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009358:	f000 be34 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800935c:	f7fd ff3a 	bl	80071d4 <HAL_RCC_GetHCLKFreq>
 8009360:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009362:	f000 be2f 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009366:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800936a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800936c:	f000 be2a 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009370:	4b3a      	ldr	r3, [pc, #232]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0320 	and.w	r3, r3, #32
 8009378:	2b20      	cmp	r3, #32
 800937a:	d118      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800937c:	4b37      	ldr	r3, [pc, #220]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8009388:	4b34      	ldr	r3, [pc, #208]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	0e1b      	lsrs	r3, r3, #24
 800938e:	f003 030f 	and.w	r3, r3, #15
 8009392:	e006      	b.n	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009394:	4b31      	ldr	r3, [pc, #196]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009396:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800939a:	041b      	lsls	r3, r3, #16
 800939c:	0e1b      	lsrs	r3, r3, #24
 800939e:	f003 030f 	and.w	r3, r3, #15
 80093a2:	4a2f      	ldr	r2, [pc, #188]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80093a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80093aa:	f000 be0b 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093b2:	f000 be07 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093ba:	f000 be03 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80093be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093c2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80093c6:	430b      	orrs	r3, r1
 80093c8:	d152      	bne.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80093ca:	4b24      	ldr	r3, [pc, #144]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80093cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80093d4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80093d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80093dc:	f7fd ff14 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 80093e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80093e2:	f000 bdef 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80093e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093ec:	d104      	bne.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80093ee:	f7fd fdef 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 80093f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80093f4:	f000 bde6 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80093f8:	4b18      	ldr	r3, [pc, #96]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009404:	d107      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800940c:	d103      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800940e:	4b15      	ldr	r3, [pc, #84]	@ (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8009410:	637b      	str	r3, [r7, #52]	@ 0x34
 8009412:	f000 bdd7 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009416:	4b11      	ldr	r3, [pc, #68]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0320 	and.w	r3, r3, #32
 800941e:	2b20      	cmp	r3, #32
 8009420:	d122      	bne.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8009422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009424:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009428:	d11e      	bne.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800942a:	4b0c      	ldr	r3, [pc, #48]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d005      	beq.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8009436:	4b09      	ldr	r3, [pc, #36]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	0e1b      	lsrs	r3, r3, #24
 800943c:	f003 030f 	and.w	r3, r3, #15
 8009440:	e006      	b.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8009442:	4b06      	ldr	r3, [pc, #24]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009448:	041b      	lsls	r3, r3, #16
 800944a:	0e1b      	lsrs	r3, r3, #24
 800944c:	f003 030f 	and.w	r3, r3, #15
 8009450:	4a03      	ldr	r2, [pc, #12]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8009452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009456:	637b      	str	r3, [r7, #52]	@ 0x34
 8009458:	f000 bdb4 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800945c:	46020c00 	.word	0x46020c00
 8009460:	0800fe18 	.word	0x0800fe18
 8009464:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009468:	2300      	movs	r3, #0
 800946a:	637b      	str	r3, [r7, #52]	@ 0x34
 800946c:	f000 bdaa 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009474:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009478:	430b      	orrs	r3, r1
 800947a:	d14c      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800947c:	4ba8      	ldr	r3, [pc, #672]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800947e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009482:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009486:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948a:	2b00      	cmp	r3, #0
 800948c:	d104      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800948e:	f7fd febb 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 8009492:	6378      	str	r0, [r7, #52]	@ 0x34
 8009494:	f000 bd96 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800949e:	d104      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094a0:	f7fd fd96 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 80094a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80094a6:	f000 bd8d 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80094aa:	4b9d      	ldr	r3, [pc, #628]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094b6:	d107      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80094b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094be:	d103      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 80094c0:	4b98      	ldr	r3, [pc, #608]	@ (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80094c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c4:	f000 bd7e 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80094c8:	4b95      	ldr	r3, [pc, #596]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0320 	and.w	r3, r3, #32
 80094d0:	2b20      	cmp	r3, #32
 80094d2:	d11c      	bne.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094da:	d118      	bne.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80094dc:	4b90      	ldr	r3, [pc, #576]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d005      	beq.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80094e8:	4b8d      	ldr	r3, [pc, #564]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	0e1b      	lsrs	r3, r3, #24
 80094ee:	f003 030f 	and.w	r3, r3, #15
 80094f2:	e006      	b.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 80094f4:	4b8a      	ldr	r3, [pc, #552]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80094f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80094fa:	041b      	lsls	r3, r3, #16
 80094fc:	0e1b      	lsrs	r3, r3, #24
 80094fe:	f003 030f 	and.w	r3, r3, #15
 8009502:	4a89      	ldr	r2, [pc, #548]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8009504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009508:	637b      	str	r3, [r7, #52]	@ 0x34
 800950a:	f000 bd5b 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	637b      	str	r3, [r7, #52]	@ 0x34
 8009512:	f000 bd57 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800951a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800951e:	430b      	orrs	r3, r1
 8009520:	d158      	bne.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009522:	4b7f      	ldr	r3, [pc, #508]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009528:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800952c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800952e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009530:	2bc0      	cmp	r3, #192	@ 0xc0
 8009532:	d028      	beq.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8009534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009536:	2bc0      	cmp	r3, #192	@ 0xc0
 8009538:	d848      	bhi.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800953a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953c:	2b80      	cmp	r3, #128	@ 0x80
 800953e:	d00e      	beq.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8009540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009542:	2b80      	cmp	r3, #128	@ 0x80
 8009544:	d842      	bhi.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8009546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800954c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954e:	2b40      	cmp	r3, #64	@ 0x40
 8009550:	d014      	beq.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8009552:	e03b      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009554:	f7fd fe80 	bl	8007258 <HAL_RCC_GetPCLK3Freq>
 8009558:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800955a:	f000 bd33 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800955e:	4b70      	ldr	r3, [pc, #448]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800956a:	d103      	bne.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800956c:	4b6d      	ldr	r3, [pc, #436]	@ (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800956e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009570:	f000 bd28 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009574:	2300      	movs	r3, #0
 8009576:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009578:	f000 bd24 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800957c:	f7fd fd28 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8009580:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009582:	f000 bd1f 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009586:	4b66      	ldr	r3, [pc, #408]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b20      	cmp	r3, #32
 8009590:	d118      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009592:	4b63      	ldr	r3, [pc, #396]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d005      	beq.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800959e:	4b60      	ldr	r3, [pc, #384]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	0e1b      	lsrs	r3, r3, #24
 80095a4:	f003 030f 	and.w	r3, r3, #15
 80095a8:	e006      	b.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 80095aa:	4b5d      	ldr	r3, [pc, #372]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80095ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095b0:	041b      	lsls	r3, r3, #16
 80095b2:	0e1b      	lsrs	r3, r3, #24
 80095b4:	f003 030f 	and.w	r3, r3, #15
 80095b8:	4a5b      	ldr	r2, [pc, #364]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80095ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80095c0:	f000 bd00 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80095c4:	2300      	movs	r3, #0
 80095c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095c8:	f000 bcfc 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095d0:	f000 bcf8 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80095d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095d8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80095dc:	430b      	orrs	r3, r1
 80095de:	d14c      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80095e0:	4b4f      	ldr	r3, [pc, #316]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80095e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80095ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80095ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d104      	bne.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80095f2:	f7fd fe09 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 80095f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80095f8:	f000 bce4 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009602:	d104      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009604:	f7fd fce4 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8009608:	6378      	str	r0, [r7, #52]	@ 0x34
 800960a:	f000 bcdb 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800960e:	4b44      	ldr	r3, [pc, #272]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800961a:	d107      	bne.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800961c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009622:	d103      	bne.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8009624:	4b3f      	ldr	r3, [pc, #252]	@ (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009626:	637b      	str	r3, [r7, #52]	@ 0x34
 8009628:	f000 bccc 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800962c:	4b3c      	ldr	r3, [pc, #240]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0320 	and.w	r3, r3, #32
 8009634:	2b20      	cmp	r3, #32
 8009636:	d11c      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8009638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800963e:	d118      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009640:	4b37      	ldr	r3, [pc, #220]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d005      	beq.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800964c:	4b34      	ldr	r3, [pc, #208]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	0e1b      	lsrs	r3, r3, #24
 8009652:	f003 030f 	and.w	r3, r3, #15
 8009656:	e006      	b.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8009658:	4b31      	ldr	r3, [pc, #196]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800965a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800965e:	041b      	lsls	r3, r3, #16
 8009660:	0e1b      	lsrs	r3, r3, #24
 8009662:	f003 030f 	and.w	r3, r3, #15
 8009666:	4a30      	ldr	r2, [pc, #192]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8009668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800966c:	637b      	str	r3, [r7, #52]	@ 0x34
 800966e:	f000 bca9 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009672:	2300      	movs	r3, #0
 8009674:	637b      	str	r3, [r7, #52]	@ 0x34
 8009676:	f000 bca5 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800967a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800967e:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8009682:	430b      	orrs	r3, r1
 8009684:	d152      	bne.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8009686:	4b26      	ldr	r3, [pc, #152]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009688:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800968c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009690:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8009692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009694:	2b00      	cmp	r3, #0
 8009696:	d104      	bne.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009698:	f7fd fdb6 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 800969c:	6378      	str	r0, [r7, #52]	@ 0x34
 800969e:	f000 bc91 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 80096a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80096a8:	d104      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80096aa:	f7fd fc91 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 80096ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80096b0:	f000 bc88 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 80096b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096c0:	d107      	bne.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 80096c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096c8:	d103      	bne.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 80096ca:	4b16      	ldr	r3, [pc, #88]	@ (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80096cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ce:	f000 bc79 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 80096d2:	4b13      	ldr	r3, [pc, #76]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 0320 	and.w	r3, r3, #32
 80096da:	2b20      	cmp	r3, #32
 80096dc:	d11c      	bne.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80096de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80096e4:	d118      	bne.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d005      	beq.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 80096f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	0e1b      	lsrs	r3, r3, #24
 80096f8:	f003 030f 	and.w	r3, r3, #15
 80096fc:	e006      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 80096fe:	4b08      	ldr	r3, [pc, #32]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009704:	041b      	lsls	r3, r3, #16
 8009706:	0e1b      	lsrs	r3, r3, #24
 8009708:	f003 030f 	and.w	r3, r3, #15
 800970c:	4a06      	ldr	r2, [pc, #24]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800970e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009712:	637b      	str	r3, [r7, #52]	@ 0x34
 8009714:	f000 bc56 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8009718:	2300      	movs	r3, #0
 800971a:	637b      	str	r3, [r7, #52]	@ 0x34
 800971c:	f000 bc52 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8009720:	46020c00 	.word	0x46020c00
 8009724:	00f42400 	.word	0x00f42400
 8009728:	0800fe18 	.word	0x0800fe18
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800972c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009730:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8009734:	430b      	orrs	r3, r1
 8009736:	d14a      	bne.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8009738:	4ba5      	ldr	r3, [pc, #660]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800973a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800973e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009742:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8009744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009746:	2b00      	cmp	r3, #0
 8009748:	d104      	bne.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800974a:	f7fd fd5d 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 800974e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009750:	f000 bc38 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8009754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009756:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800975a:	d104      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800975c:	f7fd fc38 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8009760:	6378      	str	r0, [r7, #52]	@ 0x34
 8009762:	f000 bc2f 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8009766:	4b9a      	ldr	r3, [pc, #616]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800976e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009772:	d107      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800977a:	d103      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800977c:	4b95      	ldr	r3, [pc, #596]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800977e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009780:	f000 bc20 	b.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8009784:	4b92      	ldr	r3, [pc, #584]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0320 	and.w	r3, r3, #32
 800978c:	2b20      	cmp	r3, #32
 800978e:	d11b      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8009790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009792:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009796:	d117      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009798:	4b8d      	ldr	r3, [pc, #564]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d005      	beq.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 80097a4:	4b8a      	ldr	r3, [pc, #552]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	0e1b      	lsrs	r3, r3, #24
 80097aa:	f003 030f 	and.w	r3, r3, #15
 80097ae:	e006      	b.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 80097b0:	4b87      	ldr	r3, [pc, #540]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80097b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80097b6:	041b      	lsls	r3, r3, #16
 80097b8:	0e1b      	lsrs	r3, r3, #24
 80097ba:	f003 030f 	and.w	r3, r3, #15
 80097be:	4a86      	ldr	r2, [pc, #536]	@ (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80097c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097c6:	e3fd      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80097c8:	2300      	movs	r3, #0
 80097ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80097cc:	e3fa      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80097ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097d2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80097d6:	430b      	orrs	r3, r1
 80097d8:	d164      	bne.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80097da:	4b7d      	ldr	r3, [pc, #500]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80097dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80097e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d120      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80097ec:	4b78      	ldr	r3, [pc, #480]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0320 	and.w	r3, r3, #32
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	d117      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80097f8:	4b75      	ldr	r3, [pc, #468]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 8009804:	4b72      	ldr	r3, [pc, #456]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	0e1b      	lsrs	r3, r3, #24
 800980a:	f003 030f 	and.w	r3, r3, #15
 800980e:	e006      	b.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 8009810:	4b6f      	ldr	r3, [pc, #444]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009812:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009816:	041b      	lsls	r3, r3, #16
 8009818:	0e1b      	lsrs	r3, r3, #24
 800981a:	f003 030f 	and.w	r3, r3, #15
 800981e:	4a6e      	ldr	r2, [pc, #440]	@ (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8009820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009824:	637b      	str	r3, [r7, #52]	@ 0x34
 8009826:	e3cd      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	637b      	str	r3, [r7, #52]	@ 0x34
 800982c:	e3ca      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800982e:	4b68      	ldr	r3, [pc, #416]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009838:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800983c:	d112      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009844:	d10e      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009846:	4b62      	ldr	r3, [pc, #392]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800984c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009854:	d102      	bne.n	800985c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 8009856:	23fa      	movs	r3, #250	@ 0xfa
 8009858:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800985a:	e3b3      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800985c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009860:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009862:	e3af      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009864:	4b5a      	ldr	r3, [pc, #360]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800986c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009870:	d106      	bne.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8009872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009878:	d102      	bne.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 800987a:	4b56      	ldr	r3, [pc, #344]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800987c:	637b      	str	r3, [r7, #52]	@ 0x34
 800987e:	e3a1      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009880:	4b53      	ldr	r3, [pc, #332]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009886:	f003 0302 	and.w	r3, r3, #2
 800988a:	2b02      	cmp	r3, #2
 800988c:	d107      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 800988e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009890:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009894:	d103      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 8009896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34
 800989c:	e392      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a2:	e38f      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80098a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098a8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80098ac:	430b      	orrs	r3, r1
 80098ae:	d164      	bne.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80098b0:	4b47      	ldr	r3, [pc, #284]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80098b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098b6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80098ba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80098bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d120      	bne.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80098c2:	4b43      	ldr	r3, [pc, #268]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0320 	and.w	r3, r3, #32
 80098ca:	2b20      	cmp	r3, #32
 80098cc:	d117      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80098ce:	4b40      	ldr	r3, [pc, #256]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d005      	beq.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 80098da:	4b3d      	ldr	r3, [pc, #244]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	0e1b      	lsrs	r3, r3, #24
 80098e0:	f003 030f 	and.w	r3, r3, #15
 80098e4:	e006      	b.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80098e6:	4b3a      	ldr	r3, [pc, #232]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80098e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098ec:	041b      	lsls	r3, r3, #16
 80098ee:	0e1b      	lsrs	r3, r3, #24
 80098f0:	f003 030f 	and.w	r3, r3, #15
 80098f4:	4a38      	ldr	r2, [pc, #224]	@ (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80098f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80098fc:	e362      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
 8009902:	e35f      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009904:	4b32      	ldr	r3, [pc, #200]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800990a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800990e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009912:	d112      	bne.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 8009914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800991a:	d10e      	bne.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800991c:	4b2c      	ldr	r3, [pc, #176]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800991e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009926:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800992a:	d102      	bne.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 800992c:	23fa      	movs	r3, #250	@ 0xfa
 800992e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009930:	e348      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8009932:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009936:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009938:	e344      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800993a:	4b25      	ldr	r3, [pc, #148]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009946:	d106      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8009948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800994e:	d102      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 8009950:	4b20      	ldr	r3, [pc, #128]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009952:	637b      	str	r3, [r7, #52]	@ 0x34
 8009954:	e336      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009956:	4b1e      	ldr	r3, [pc, #120]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800995c:	f003 0302 	and.w	r3, r3, #2
 8009960:	2b02      	cmp	r3, #2
 8009962:	d107      	bne.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800996a:	d103      	bne.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 800996c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009970:	637b      	str	r3, [r7, #52]	@ 0x34
 8009972:	e327      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009974:	2300      	movs	r3, #0
 8009976:	637b      	str	r3, [r7, #52]	@ 0x34
 8009978:	e324      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800997a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800997e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009982:	430b      	orrs	r3, r1
 8009984:	d14e      	bne.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009986:	4b12      	ldr	r3, [pc, #72]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800998c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009990:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	2b00      	cmp	r3, #0
 8009996:	d103      	bne.n	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009998:	f7fd fc36 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 800999c:	6378      	str	r0, [r7, #52]	@ 0x34
 800999e:	e311      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80099a0:	4b0b      	ldr	r3, [pc, #44]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80099a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099ae:	d119      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80099b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80099b6:	d115      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099b8:	4b05      	ldr	r3, [pc, #20]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80099ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099c6:	d109      	bne.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 80099c8:	23fa      	movs	r3, #250	@ 0xfa
 80099ca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099cc:	e2fa      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80099ce:	bf00      	nop
 80099d0:	46020c00 	.word	0x46020c00
 80099d4:	00f42400 	.word	0x00f42400
 80099d8:	0800fe18 	.word	0x0800fe18
      }
      else
      {
        frequency = LSI_VALUE;
 80099dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80099e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099e2:	e2ef      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80099e4:	4ba8      	ldr	r3, [pc, #672]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099f0:	d106      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 80099f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80099f8:	d102      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 80099fa:	4ba4      	ldr	r3, [pc, #656]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80099fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80099fe:	e2e1      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009a00:	4ba1      	ldr	r3, [pc, #644]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d107      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a10:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009a14:	d103      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 8009a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a1c:	e2d2      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a22:	e2cf      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a28:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009a2c:	430b      	orrs	r3, r1
 8009a2e:	d12d      	bne.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009a30:	4b95      	ldr	r3, [pc, #596]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a36:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009a3a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009a3c:	4b92      	ldr	r3, [pc, #584]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a48:	d105      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8009a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d102      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 8009a50:	4b8e      	ldr	r3, [pc, #568]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a54:	e2b6      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a5c:	d107      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe fb4e 	bl	8008104 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a6c:	e2aa      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a74:	d107      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a76:	f107 0318 	add.w	r3, r7, #24
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe fc9c 	bl	80083b8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a84:	e29e      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a8a:	e29b      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a90:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009a94:	430b      	orrs	r3, r1
 8009a96:	d156      	bne.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009a98:	4b7b      	ldr	r3, [pc, #492]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a9e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009aa2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009aaa:	d028      	beq.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8009aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ab2:	d845      	bhi.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009aba:	d013      	beq.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8009abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ac2:	d83d      	bhi.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d004      	beq.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 8009aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009acc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ad0:	d004      	beq.n	8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 8009ad2:	e035      	b.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009ad4:	f7fd fbac 	bl	8007230 <HAL_RCC_GetPCLK2Freq>
 8009ad8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009ada:	e273      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009adc:	f7fd fa78 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8009ae0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009ae2:	e26f      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ae4:	4b68      	ldr	r3, [pc, #416]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009af0:	d102      	bne.n	8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 8009af2:	4b66      	ldr	r3, [pc, #408]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009af4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009af6:	e265      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009afc:	e262      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009afe:	4b62      	ldr	r3, [pc, #392]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 0320 	and.w	r3, r3, #32
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	d117      	bne.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d005      	beq.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 8009b16:	4b5c      	ldr	r3, [pc, #368]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	0e1b      	lsrs	r3, r3, #24
 8009b1c:	f003 030f 	and.w	r3, r3, #15
 8009b20:	e006      	b.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 8009b22:	4b59      	ldr	r3, [pc, #356]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b28:	041b      	lsls	r3, r3, #16
 8009b2a:	0e1b      	lsrs	r3, r3, #24
 8009b2c:	f003 030f 	and.w	r3, r3, #15
 8009b30:	4a57      	ldr	r2, [pc, #348]	@ (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8009b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b38:	e244      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b3e:	e241      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8009b40:	2300      	movs	r3, #0
 8009b42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b44:	e23e      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b4a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009b4e:	430b      	orrs	r3, r1
 8009b50:	d156      	bne.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009b52:	4b4d      	ldr	r3, [pc, #308]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009b5c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009b64:	d028      	beq.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8009b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009b6c:	d845      	bhi.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b74:	d013      	beq.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8009b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b7c:	d83d      	bhi.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d004      	beq.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8009b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b8a:	d004      	beq.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8009b8c:	e035      	b.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009b8e:	f7fd fb3b 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 8009b92:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b94:	e216      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009b96:	f7fd fa1b 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8009b9a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b9c:	e212      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009baa:	d102      	bne.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8009bac:	4b37      	ldr	r3, [pc, #220]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009bb0:	e208      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bb6:	e205      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009bb8:	4b33      	ldr	r3, [pc, #204]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b20      	cmp	r3, #32
 8009bc2:	d117      	bne.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009bc4:	4b30      	ldr	r3, [pc, #192]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d005      	beq.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8009bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	0e1b      	lsrs	r3, r3, #24
 8009bd6:	f003 030f 	and.w	r3, r3, #15
 8009bda:	e006      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8009bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009be2:	041b      	lsls	r3, r3, #16
 8009be4:	0e1b      	lsrs	r3, r3, #24
 8009be6:	f003 030f 	and.w	r3, r3, #15
 8009bea:	4a29      	ldr	r2, [pc, #164]	@ (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8009bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bf0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009bf2:	e1e7      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bf8:	e1e4      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bfe:	e1e1      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c04:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	d17c      	bne.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c12:	f003 0318 	and.w	r3, r3, #24
 8009c16:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	2b18      	cmp	r3, #24
 8009c1c:	d870      	bhi.n	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 8009c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c95 	.word	0x08009c95
 8009c28:	08009d01 	.word	0x08009d01
 8009c2c:	08009d01 	.word	0x08009d01
 8009c30:	08009d01 	.word	0x08009d01
 8009c34:	08009d01 	.word	0x08009d01
 8009c38:	08009d01 	.word	0x08009d01
 8009c3c:	08009d01 	.word	0x08009d01
 8009c40:	08009d01 	.word	0x08009d01
 8009c44:	08009c9d 	.word	0x08009c9d
 8009c48:	08009d01 	.word	0x08009d01
 8009c4c:	08009d01 	.word	0x08009d01
 8009c50:	08009d01 	.word	0x08009d01
 8009c54:	08009d01 	.word	0x08009d01
 8009c58:	08009d01 	.word	0x08009d01
 8009c5c:	08009d01 	.word	0x08009d01
 8009c60:	08009d01 	.word	0x08009d01
 8009c64:	08009ca5 	.word	0x08009ca5
 8009c68:	08009d01 	.word	0x08009d01
 8009c6c:	08009d01 	.word	0x08009d01
 8009c70:	08009d01 	.word	0x08009d01
 8009c74:	08009d01 	.word	0x08009d01
 8009c78:	08009d01 	.word	0x08009d01
 8009c7c:	08009d01 	.word	0x08009d01
 8009c80:	08009d01 	.word	0x08009d01
 8009c84:	08009cbf 	.word	0x08009cbf
 8009c88:	46020c00 	.word	0x46020c00
 8009c8c:	00f42400 	.word	0x00f42400
 8009c90:	0800fe18 	.word	0x0800fe18
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009c94:	f7fd fae0 	bl	8007258 <HAL_RCC_GetPCLK3Freq>
 8009c98:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009c9a:	e193      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009c9c:	f7fd f998 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8009ca0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009ca2:	e18f      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ca4:	4b9f      	ldr	r3, [pc, #636]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cb0:	d102      	bne.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 8009cb2:	4b9d      	ldr	r3, [pc, #628]	@ (8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009cb4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cb6:	e185      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cbc:	e182      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009cbe:	4b99      	ldr	r3, [pc, #612]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0320 	and.w	r3, r3, #32
 8009cc6:	2b20      	cmp	r3, #32
 8009cc8:	d117      	bne.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009cca:	4b96      	ldr	r3, [pc, #600]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d005      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 8009cd6:	4b93      	ldr	r3, [pc, #588]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	0e1b      	lsrs	r3, r3, #24
 8009cdc:	f003 030f 	and.w	r3, r3, #15
 8009ce0:	e006      	b.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 8009ce2:	4b90      	ldr	r3, [pc, #576]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ce8:	041b      	lsls	r3, r3, #16
 8009cea:	0e1b      	lsrs	r3, r3, #24
 8009cec:	f003 030f 	and.w	r3, r3, #15
 8009cf0:	4a8e      	ldr	r2, [pc, #568]	@ (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cf6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cf8:	e164      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cfe:	e161      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d04:	e15e      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009d06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d0a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009d0e:	430b      	orrs	r3, r1
 8009d10:	d155      	bne.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009d12:	4b84      	ldr	r3, [pc, #528]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009d14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d18:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009d1c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d24:	d013      	beq.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 8009d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d2c:	d844      	bhi.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d34:	d013      	beq.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 8009d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d3c:	d83c      	bhi.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d014      	beq.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 8009d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d4a:	d014      	beq.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8009d4c:	e034      	b.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d4e:	f107 0318 	add.w	r3, r7, #24
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fe fb30 	bl	80083b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d5c:	e132      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe f9ce 	bl	8008104 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d6c:	e12a      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009d6e:	f7fd f92f 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8009d72:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009d74:	e126      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009d76:	4b6b      	ldr	r3, [pc, #428]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 0320 	and.w	r3, r3, #32
 8009d7e:	2b20      	cmp	r3, #32
 8009d80:	d117      	bne.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d82:	4b68      	ldr	r3, [pc, #416]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d005      	beq.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8009d8e:	4b65      	ldr	r3, [pc, #404]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	0e1b      	lsrs	r3, r3, #24
 8009d94:	f003 030f 	and.w	r3, r3, #15
 8009d98:	e006      	b.n	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8009d9a:	4b62      	ldr	r3, [pc, #392]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009da0:	041b      	lsls	r3, r3, #16
 8009da2:	0e1b      	lsrs	r3, r3, #24
 8009da4:	f003 030f 	and.w	r3, r3, #15
 8009da8:	4a60      	ldr	r2, [pc, #384]	@ (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009db0:	e108      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009db2:	2300      	movs	r3, #0
 8009db4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009db6:	e105      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8009db8:	2300      	movs	r3, #0
 8009dba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009dbc:	e102      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8009dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dc2:	1e59      	subs	r1, r3, #1
 8009dc4:	ea52 0301 	orrs.w	r3, r2, r1
 8009dc8:	d13c      	bne.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8009dca:	4b56      	ldr	r3, [pc, #344]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009dcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009dd0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009dd4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009ddc:	d027      	beq.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009de4:	d82b      	bhi.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8009de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009dec:	d017      	beq.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 8009dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009df4:	d823      	bhi.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8009df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d004      	beq.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e02:	d004      	beq.n	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8009e04:	e01b      	b.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009e06:	f7fd f8e3 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 8009e0a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009e0c:	e0da      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fe f976 	bl	8008104 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e1c:	e0d2      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e1e:	f107 0318 	add.w	r3, r7, #24
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe fac8 	bl	80083b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e2c:	e0ca      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e2e:	f107 030c 	add.w	r3, r7, #12
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fe fc1a 	bl	800866c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e3c:	e0c2      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e42:	e0bf      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e48:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	d131      	bne.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009e50:	4b34      	ldr	r3, [pc, #208]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e5a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009e5c:	4b31      	ldr	r3, [pc, #196]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e62:	f003 0302 	and.w	r3, r3, #2
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d106      	bne.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d103      	bne.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8009e70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e76:	e0a5      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009e78:	4b2a      	ldr	r3, [pc, #168]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e86:	d112      	bne.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8009e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e8e:	d10e      	bne.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e90:	4b24      	ldr	r3, [pc, #144]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e9e:	d102      	bne.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8009ea0:	23fa      	movs	r3, #250	@ 0xfa
 8009ea2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ea4:	e08e      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8009ea6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009eaa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009eac:	e08a      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eb2:	e087      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eb8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009ebc:	430b      	orrs	r3, r1
 8009ebe:	d13b      	bne.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009ec0:	4b18      	ldr	r3, [pc, #96]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009ec2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ec6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009eca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009ecc:	4b15      	ldr	r3, [pc, #84]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ed8:	d105      	bne.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8009eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d102      	bne.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 8009ee0:	4b13      	ldr	r3, [pc, #76]	@ (8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8009ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee4:	e06e      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ef2:	d106      	bne.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009efa:	d102      	bne.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009efc:	4b0d      	ldr	r3, [pc, #52]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8009efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f00:	e060      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009f02:	4b08      	ldr	r3, [pc, #32]	@ (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f0e:	d106      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8009f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f16:	d102      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 8009f18:	4b03      	ldr	r3, [pc, #12]	@ (8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f1c:	e052      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f22:	e04f      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8009f24:	46020c00 	.word	0x46020c00
 8009f28:	00f42400 	.word	0x00f42400
 8009f2c:	0800fe18 	.word	0x0800fe18
 8009f30:	02dc6c00 	.word	0x02dc6c00
 8009f34:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8009f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f3c:	f1a3 0108 	sub.w	r1, r3, #8
 8009f40:	ea52 0301 	orrs.w	r3, r2, r1
 8009f44:	d13c      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8009f46:	4b22      	ldr	r3, [pc, #136]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8009f48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f4c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009f50:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8009f52:	4b1f      	ldr	r3, [pc, #124]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f5e:	d105      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8009f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d102      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 8009f66:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8009f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f6a:	e02b      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8009f6c:	4b18      	ldr	r3, [pc, #96]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f78:	d106      	bne.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f80:	d102      	bne.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8009f82:	4b15      	ldr	r3, [pc, #84]	@ (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8009f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f86:	e01d      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8009f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f8e:	d107      	bne.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7fe f8b5 	bl	8008104 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f9e:	e011      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009fa6:	d108      	bne.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fe f8a9 	bl	8008104 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb4:	085b      	lsrs	r3, r3, #1
 8009fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fb8:	e004      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fbe:	e001      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3738      	adds	r7, #56	@ 0x38
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	46020c00 	.word	0x46020c00
 8009fd4:	00f42400 	.word	0x00f42400
 8009fd8:	007a1200 	.word	0x007a1200

08009fdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009fe4:	4b47      	ldr	r3, [pc, #284]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a46      	ldr	r2, [pc, #280]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 8009fea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009fee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ff0:	f7fa fac4 	bl	800457c <HAL_GetTick>
 8009ff4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ff6:	e008      	b.n	800a00a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ff8:	f7fa fac0 	bl	800457c <HAL_GetTick>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	2b02      	cmp	r3, #2
 800a004:	d901      	bls.n	800a00a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	e077      	b.n	800a0fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a00a:	4b3e      	ldr	r3, [pc, #248]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1f0      	bne.n	8009ff8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a016:	4b3b      	ldr	r3, [pc, #236]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a01e:	f023 0303 	bic.w	r3, r3, #3
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	6811      	ldr	r1, [r2, #0]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	6852      	ldr	r2, [r2, #4]
 800a02a:	3a01      	subs	r2, #1
 800a02c:	0212      	lsls	r2, r2, #8
 800a02e:	430a      	orrs	r2, r1
 800a030:	4934      	ldr	r1, [pc, #208]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a032:	4313      	orrs	r3, r2
 800a034:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a036:	4b33      	ldr	r3, [pc, #204]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a038:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a03a:	4b33      	ldr	r3, [pc, #204]	@ (800a108 <RCCEx_PLL2_Config+0x12c>)
 800a03c:	4013      	ands	r3, r2
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	6892      	ldr	r2, [r2, #8]
 800a042:	3a01      	subs	r2, #1
 800a044:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	68d2      	ldr	r2, [r2, #12]
 800a04c:	3a01      	subs	r2, #1
 800a04e:	0252      	lsls	r2, r2, #9
 800a050:	b292      	uxth	r2, r2
 800a052:	4311      	orrs	r1, r2
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	6912      	ldr	r2, [r2, #16]
 800a058:	3a01      	subs	r2, #1
 800a05a:	0412      	lsls	r2, r2, #16
 800a05c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a060:	4311      	orrs	r1, r2
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	6952      	ldr	r2, [r2, #20]
 800a066:	3a01      	subs	r2, #1
 800a068:	0612      	lsls	r2, r2, #24
 800a06a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a06e:	430a      	orrs	r2, r1
 800a070:	4924      	ldr	r1, [pc, #144]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a072:	4313      	orrs	r3, r2
 800a074:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a076:	4b23      	ldr	r3, [pc, #140]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07a:	f023 020c 	bic.w	r2, r3, #12
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	4920      	ldr	r1, [pc, #128]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a084:	4313      	orrs	r3, r2
 800a086:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a088:	4b1e      	ldr	r3, [pc, #120]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a08a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	491c      	ldr	r1, [pc, #112]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a092:	4313      	orrs	r3, r2
 800a094:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a096:	4b1b      	ldr	r3, [pc, #108]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a09a:	4a1a      	ldr	r2, [pc, #104]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a09c:	f023 0310 	bic.w	r3, r3, #16
 800a0a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0a2:	4b18      	ldr	r3, [pc, #96]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a0a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0aa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	69d2      	ldr	r2, [r2, #28]
 800a0b2:	00d2      	lsls	r2, r2, #3
 800a0b4:	4913      	ldr	r1, [pc, #76]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a0ba:	4b12      	ldr	r3, [pc, #72]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0be:	4a11      	ldr	r2, [pc, #68]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a0c0:	f043 0310 	orr.w	r3, r3, #16
 800a0c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a0c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a0e      	ldr	r2, [pc, #56]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a0cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a0d0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a0d2:	f7fa fa53 	bl	800457c <HAL_GetTick>
 800a0d6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0d8:	e008      	b.n	800a0ec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0da:	f7fa fa4f 	bl	800457c <HAL_GetTick>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d901      	bls.n	800a0ec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e006      	b.n	800a0fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0ec:	4b05      	ldr	r3, [pc, #20]	@ (800a104 <RCCEx_PLL2_Config+0x128>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d0f0      	beq.n	800a0da <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0

}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	46020c00 	.word	0x46020c00
 800a108:	80800000 	.word	0x80800000

0800a10c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a114:	4b47      	ldr	r3, [pc, #284]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a46      	ldr	r2, [pc, #280]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a11a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a11e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a120:	f7fa fa2c 	bl	800457c <HAL_GetTick>
 800a124:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a126:	e008      	b.n	800a13a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a128:	f7fa fa28 	bl	800457c <HAL_GetTick>
 800a12c:	4602      	mov	r2, r0
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	2b02      	cmp	r3, #2
 800a134:	d901      	bls.n	800a13a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e077      	b.n	800a22a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a13a:	4b3e      	ldr	r3, [pc, #248]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1f0      	bne.n	800a128 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a146:	4b3b      	ldr	r3, [pc, #236]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a14a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a14e:	f023 0303 	bic.w	r3, r3, #3
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	6811      	ldr	r1, [r2, #0]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	6852      	ldr	r2, [r2, #4]
 800a15a:	3a01      	subs	r2, #1
 800a15c:	0212      	lsls	r2, r2, #8
 800a15e:	430a      	orrs	r2, r1
 800a160:	4934      	ldr	r1, [pc, #208]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a162:	4313      	orrs	r3, r2
 800a164:	630b      	str	r3, [r1, #48]	@ 0x30
 800a166:	4b33      	ldr	r3, [pc, #204]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a16a:	4b33      	ldr	r3, [pc, #204]	@ (800a238 <RCCEx_PLL3_Config+0x12c>)
 800a16c:	4013      	ands	r3, r2
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	6892      	ldr	r2, [r2, #8]
 800a172:	3a01      	subs	r2, #1
 800a174:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	68d2      	ldr	r2, [r2, #12]
 800a17c:	3a01      	subs	r2, #1
 800a17e:	0252      	lsls	r2, r2, #9
 800a180:	b292      	uxth	r2, r2
 800a182:	4311      	orrs	r1, r2
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	6912      	ldr	r2, [r2, #16]
 800a188:	3a01      	subs	r2, #1
 800a18a:	0412      	lsls	r2, r2, #16
 800a18c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a190:	4311      	orrs	r1, r2
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	6952      	ldr	r2, [r2, #20]
 800a196:	3a01      	subs	r2, #1
 800a198:	0612      	lsls	r2, r2, #24
 800a19a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	4924      	ldr	r1, [pc, #144]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a1a6:	4b23      	ldr	r3, [pc, #140]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1aa:	f023 020c 	bic.w	r2, r3, #12
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	4920      	ldr	r1, [pc, #128]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a1b8:	4b1e      	ldr	r3, [pc, #120]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a1b      	ldr	r3, [r3, #32]
 800a1c0:	491c      	ldr	r1, [pc, #112]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a1c6:	4b1b      	ldr	r3, [pc, #108]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1ca:	4a1a      	ldr	r2, [pc, #104]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1cc:	f023 0310 	bic.w	r3, r3, #16
 800a1d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a1d2:	4b18      	ldr	r3, [pc, #96]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	69d2      	ldr	r2, [r2, #28]
 800a1e2:	00d2      	lsls	r2, r2, #3
 800a1e4:	4913      	ldr	r1, [pc, #76]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a1ea:	4b12      	ldr	r3, [pc, #72]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1ee:	4a11      	ldr	r2, [pc, #68]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1f0:	f043 0310 	orr.w	r3, r3, #16
 800a1f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a1f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a0e      	ldr	r2, [pc, #56]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a1fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a200:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a202:	f7fa f9bb 	bl	800457c <HAL_GetTick>
 800a206:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a208:	e008      	b.n	800a21c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a20a:	f7fa f9b7 	bl	800457c <HAL_GetTick>
 800a20e:	4602      	mov	r2, r0
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	2b02      	cmp	r3, #2
 800a216:	d901      	bls.n	800a21c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e006      	b.n	800a22a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a21c:	4b05      	ldr	r3, [pc, #20]	@ (800a234 <RCCEx_PLL3_Config+0x128>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0f0      	beq.n	800a20a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	46020c00 	.word	0x46020c00
 800a238:	80800000 	.word	0x80800000

0800a23c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e0fb      	b.n	800a446 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a7f      	ldr	r2, [pc, #508]	@ (800a450 <HAL_SPI_Init+0x214>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d004      	beq.n	800a262 <HAL_SPI_Init+0x26>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a7d      	ldr	r2, [pc, #500]	@ (800a454 <HAL_SPI_Init+0x218>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	e000      	b.n	800a264 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a262:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a78      	ldr	r2, [pc, #480]	@ (800a450 <HAL_SPI_Init+0x214>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d004      	beq.n	800a27e <HAL_SPI_Init+0x42>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a76      	ldr	r2, [pc, #472]	@ (800a454 <HAL_SPI_Init+0x218>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d105      	bne.n	800a28a <HAL_SPI_Init+0x4e>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	2b0f      	cmp	r3, #15
 800a284:	d901      	bls.n	800a28a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e0dd      	b.n	800a446 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 ffa3 	bl	800b1d6 <SPI_GetPacketSize>
 800a290:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a6e      	ldr	r2, [pc, #440]	@ (800a450 <HAL_SPI_Init+0x214>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d004      	beq.n	800a2a6 <HAL_SPI_Init+0x6a>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a6c      	ldr	r2, [pc, #432]	@ (800a454 <HAL_SPI_Init+0x218>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d102      	bne.n	800a2ac <HAL_SPI_Init+0x70>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2b08      	cmp	r3, #8
 800a2aa:	d816      	bhi.n	800a2da <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a2b0:	4a69      	ldr	r2, [pc, #420]	@ (800a458 <HAL_SPI_Init+0x21c>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d00e      	beq.n	800a2d4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a68      	ldr	r2, [pc, #416]	@ (800a45c <HAL_SPI_Init+0x220>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d009      	beq.n	800a2d4 <HAL_SPI_Init+0x98>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a66      	ldr	r2, [pc, #408]	@ (800a460 <HAL_SPI_Init+0x224>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d004      	beq.n	800a2d4 <HAL_SPI_Init+0x98>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a65      	ldr	r2, [pc, #404]	@ (800a464 <HAL_SPI_Init+0x228>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d104      	bne.n	800a2de <HAL_SPI_Init+0xa2>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2b10      	cmp	r3, #16
 800a2d8:	d901      	bls.n	800a2de <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e0b3      	b.n	800a446 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d106      	bne.n	800a2f8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7f9 fae0 	bl	80038b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f022 0201 	bic.w	r2, r2, #1
 800a30e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a31a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a324:	d119      	bne.n	800a35a <HAL_SPI_Init+0x11e>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a32e:	d103      	bne.n	800a338 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a334:	2b00      	cmp	r3, #0
 800a336:	d008      	beq.n	800a34a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10c      	bne.n	800a35a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a344:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a348:	d107      	bne.n	800a35a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a358:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00f      	beq.n	800a386 <HAL_SPI_Init+0x14a>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	2b06      	cmp	r3, #6
 800a36c:	d90b      	bls.n	800a386 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	430a      	orrs	r2, r1
 800a382:	601a      	str	r2, [r3, #0]
 800a384:	e007      	b.n	800a396 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a394:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	69da      	ldr	r2, [r3, #28]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a39e:	431a      	orrs	r2, r3
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3a8:	ea42 0103 	orr.w	r1, r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68da      	ldr	r2, [r3, #12]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	430a      	orrs	r2, r1
 800a3b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c0:	431a      	orrs	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	431a      	orrs	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	431a      	orrs	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	431a      	orrs	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	431a      	orrs	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ea:	431a      	orrs	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a402:	ea42 0103 	orr.w	r1, r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00a      	beq.n	800a434 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	46002000 	.word	0x46002000
 800a454:	56002000 	.word	0x56002000
 800a458:	40013000 	.word	0x40013000
 800a45c:	50013000 	.word	0x50013000
 800a460:	40003800 	.word	0x40003800
 800a464:	50003800 	.word	0x50003800

0800a468 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b086      	sub	sp, #24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	4613      	mov	r3, r2
 800a474:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d001      	beq.n	800a486 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800a482:	2302      	movs	r3, #2
 800a484:	e192      	b.n	800a7ac <HAL_SPI_Transmit_DMA+0x344>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d002      	beq.n	800a492 <HAL_SPI_Transmit_DMA+0x2a>
 800a48c:	88fb      	ldrh	r3, [r7, #6]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e18a      	b.n	800a7ac <HAL_SPI_Transmit_DMA+0x344>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_SPI_Transmit_DMA+0x3c>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e183      	b.n	800a7ac <HAL_SPI_Transmit_DMA+0x344>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2203      	movs	r2, #3
 800a4b0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	88fa      	ldrh	r2, [r7, #6]
 800a4c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	88fa      	ldrh	r2, [r7, #6]
 800a4ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->TxISR       = NULL;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t)0UL;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a4fc:	d108      	bne.n	800a510 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	e009      	b.n	800a524 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a522:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	2b0f      	cmp	r3, #15
 800a52a:	d919      	bls.n	800a560 <HAL_SPI_Transmit_DMA+0xf8>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	2b02      	cmp	r3, #2
 800a536:	d013      	beq.n	800a560 <HAL_SPI_Transmit_DMA+0xf8>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 800a53c:	4a9d      	ldr	r2, [pc, #628]	@ (800a7b4 <HAL_SPI_Transmit_DMA+0x34c>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d018      	beq.n	800a574 <HAL_SPI_Transmit_DMA+0x10c>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a9c      	ldr	r2, [pc, #624]	@ (800a7b8 <HAL_SPI_Transmit_DMA+0x350>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d013      	beq.n	800a574 <HAL_SPI_Transmit_DMA+0x10c>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a9a      	ldr	r2, [pc, #616]	@ (800a7bc <HAL_SPI_Transmit_DMA+0x354>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d00e      	beq.n	800a574 <HAL_SPI_Transmit_DMA+0x10c>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a99      	ldr	r2, [pc, #612]	@ (800a7c0 <HAL_SPI_Transmit_DMA+0x358>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d009      	beq.n	800a574 <HAL_SPI_Transmit_DMA+0x10c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800a564:	2b07      	cmp	r3, #7
 800a566:	d90b      	bls.n	800a580 <HAL_SPI_Transmit_DMA+0x118>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d105      	bne.n	800a580 <HAL_SPI_Transmit_DMA+0x118>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e115      	b.n	800a7ac <HAL_SPI_Transmit_DMA+0x344>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	2b07      	cmp	r3, #7
 800a586:	d820      	bhi.n	800a5ca <HAL_SPI_Transmit_DMA+0x162>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d109      	bne.n	800a5a8 <HAL_SPI_Transmit_DMA+0x140>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	3301      	adds	r3, #1
 800a59e:	105b      	asrs	r3, r3, #1
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d11e      	bne.n	800a5f2 <HAL_SPI_Transmit_DMA+0x18a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	3303      	adds	r3, #3
 800a5be:	109b      	asrs	r3, r3, #2
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a5c8:	e013      	b.n	800a5f2 <HAL_SPI_Transmit_DMA+0x18a>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	2b0f      	cmp	r3, #15
 800a5d0:	d80f      	bhi.n	800a5f2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d109      	bne.n	800a5f2 <HAL_SPI_Transmit_DMA+0x18a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	105b      	asrs	r3, r3, #1
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5f8:	4a72      	ldr	r2, [pc, #456]	@ (800a7c4 <HAL_SPI_Transmit_DMA+0x35c>)
 800a5fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a602:	4a71      	ldr	r2, [pc, #452]	@ (800a7c8 <HAL_SPI_Transmit_DMA+0x360>)
 800a604:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a60c:	4a6f      	ldr	r2, [pc, #444]	@ (800a7cc <HAL_SPI_Transmit_DMA+0x364>)
 800a60e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a616:	2200      	movs	r2, #0
 800a618:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	689a      	ldr	r2, [r3, #8]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a628:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	2b07      	cmp	r3, #7
 800a630:	d804      	bhi.n	800a63c <HAL_SPI_Transmit_DMA+0x1d4>
  {
    hspi->TxXferCount = Size;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	88fa      	ldrh	r2, [r7, #6]
 800a636:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a63a:	e010      	b.n	800a65e <HAL_SPI_Transmit_DMA+0x1f6>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	2b0f      	cmp	r3, #15
 800a642:	d806      	bhi.n	800a652 <HAL_SPI_Transmit_DMA+0x1ea>
  {
    hspi->TxXferCount = Size * 2U;
 800a644:	88fb      	ldrh	r3, [r7, #6]
 800a646:	005b      	lsls	r3, r3, #1
 800a648:	b29a      	uxth	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a650:	e005      	b.n	800a65e <HAL_SPI_Transmit_DMA+0x1f6>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 800a652:	88fb      	ldrh	r3, [r7, #6]
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	b29a      	uxth	r2, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d02d      	beq.n	800a6ca <HAL_SPI_Transmit_DMA+0x262>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a676:	2b00      	cmp	r3, #0
 800a678:	d024      	beq.n	800a6c4 <HAL_SPI_Transmit_DMA+0x25c>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a680:	b29a      	uxth	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f103 0220 	add.w	r2, r3, #32
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fa ffa3 	bl	8005604 <HAL_DMAEx_List_Start_IT>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	75fb      	strb	r3, [r7, #23]
 800a6c2:	e014      	b.n	800a6ee <HAL_SPI_Transmit_DMA+0x286>
    }
    else
    {
      status = HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	75fb      	strb	r3, [r7, #23]
 800a6c8:	e011      	b.n	800a6ee <HAL_SPI_Transmit_DMA+0x286>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3320      	adds	r3, #32
 800a6dc:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6e4:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a6e6:	f7fa fa39 	bl	8004b5c <HAL_DMA_Start_IT>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d011      	beq.n	800a718 <HAL_SPI_Transmit_DMA+0x2b0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6fa:	f043 0210 	orr.w	r2, r3, #16
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e049      	b.n	800a7ac <HAL_SPI_Transmit_DMA+0x344>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a71e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a720:	2b81      	cmp	r3, #129	@ 0x81
 800a722:	d108      	bne.n	800a736 <HAL_SPI_Transmit_DMA+0x2ce>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	6812      	ldr	r2, [r2, #0]
 800a72e:	0c1b      	lsrs	r3, r3, #16
 800a730:	041b      	lsls	r3, r3, #16
 800a732:	6053      	str	r3, [r2, #4]
 800a734:	e009      	b.n	800a74a <HAL_SPI_Transmit_DMA+0x2e2>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	0c1b      	lsrs	r3, r3, #16
 800a73e:	041b      	lsls	r3, r3, #16
 800a740:	88f9      	ldrh	r1, [r7, #6]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	6812      	ldr	r2, [r2, #0]
 800a746:	430b      	orrs	r3, r1
 800a748:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	689a      	ldr	r2, [r3, #8]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a758:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	691a      	ldr	r2, [r3, #16]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800a768:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f042 0201 	orr.w	r2, r2, #1
 800a778:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	69db      	ldr	r3, [r3, #28]
 800a780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10c      	bne.n	800a7a2 <HAL_SPI_Transmit_DMA+0x33a>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a790:	d107      	bne.n	800a7a2 <HAL_SPI_Transmit_DMA+0x33a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7a0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	40013000 	.word	0x40013000
 800a7b8:	50013000 	.word	0x50013000
 800a7bc:	40003800 	.word	0x40003800
 800a7c0:	50003800 	.word	0x50003800
 800a7c4:	0800afe5 	.word	0x0800afe5
 800a7c8:	0800af59 	.word	0x0800af59
 800a7cc:	0800b01d 	.word	0x0800b01d

0800a7d0 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d005      	beq.n	800a7f6 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_BUSY;
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	e1a5      	b.n	800ab42 <HAL_SPI_Receive_DMA+0x372>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <HAL_SPI_Receive_DMA+0x32>
 800a7fc:	88fb      	ldrh	r3, [r7, #6]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d105      	bne.n	800a80e <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e199      	b.n	800ab42 <HAL_SPI_Receive_DMA+0x372>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a814:	2b01      	cmp	r3, #1
 800a816:	d101      	bne.n	800a81c <HAL_SPI_Receive_DMA+0x4c>
 800a818:	2302      	movs	r3, #2
 800a81a:	e192      	b.n	800ab42 <HAL_SPI_Receive_DMA+0x372>
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2204      	movs	r2, #4
 800a828:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	88fa      	ldrh	r2, [r7, #6]
 800a83e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	88fa      	ldrh	r2, [r7, #6]
 800a846:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a86e:	d108      	bne.n	800a882 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a87e:	601a      	str	r2, [r3, #0]
 800a880:	e009      	b.n	800a896 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a894:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) &&  \
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	2b0f      	cmp	r3, #15
 800a89c:	d91a      	bls.n	800a8d4 <HAL_SPI_Receive_DMA+0x104>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8a4:	69db      	ldr	r3, [r3, #28]
 800a8a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8aa:	d013      	beq.n	800a8d4 <HAL_SPI_Receive_DMA+0x104>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) &&  \
 800a8b0:	4a7f      	ldr	r2, [pc, #508]	@ (800aab0 <HAL_SPI_Receive_DMA+0x2e0>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d018      	beq.n	800a8e8 <HAL_SPI_Receive_DMA+0x118>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a7e      	ldr	r2, [pc, #504]	@ (800aab4 <HAL_SPI_Receive_DMA+0x2e4>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d013      	beq.n	800a8e8 <HAL_SPI_Receive_DMA+0x118>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a7c      	ldr	r2, [pc, #496]	@ (800aab8 <HAL_SPI_Receive_DMA+0x2e8>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d00e      	beq.n	800a8e8 <HAL_SPI_Receive_DMA+0x118>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a7b      	ldr	r2, [pc, #492]	@ (800aabc <HAL_SPI_Receive_DMA+0x2ec>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d009      	beq.n	800a8e8 <HAL_SPI_Receive_DMA+0x118>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE)))
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800a8d8:	2b07      	cmp	r3, #7
 800a8da:	d90b      	bls.n	800a8f4 <HAL_SPI_Receive_DMA+0x124>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE)))
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d105      	bne.n	800a8f4 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e126      	b.n	800ab42 <HAL_SPI_Receive_DMA+0x372>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	689a      	ldr	r2, [r3, #8]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a902:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	2b07      	cmp	r3, #7
 800a90a:	d822      	bhi.n	800a952 <HAL_SPI_Receive_DMA+0x182>
  {
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a918:	d109      	bne.n	800a92e <HAL_SPI_Receive_DMA+0x15e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a920:	b29b      	uxth	r3, r3
 800a922:	3301      	adds	r3, #1
 800a924:	105b      	asrs	r3, r3, #1
 800a926:	b29a      	uxth	r2, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a93a:	d11f      	bne.n	800a97c <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a942:	b29b      	uxth	r3, r3
 800a944:	3303      	adds	r3, #3
 800a946:	109b      	asrs	r3, r3, #2
 800a948:	b29a      	uxth	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a950:	e014      	b.n	800a97c <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	2b0f      	cmp	r3, #15
 800a958:	d810      	bhi.n	800a97c <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a960:	69db      	ldr	r3, [r3, #28]
 800a962:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a966:	d109      	bne.n	800a97c <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a96e:	b29b      	uxth	r3, r3
 800a970:	3301      	adds	r3, #1
 800a972:	105b      	asrs	r3, r3, #1
 800a974:	b29a      	uxth	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a982:	4a4f      	ldr	r2, [pc, #316]	@ (800aac0 <HAL_SPI_Receive_DMA+0x2f0>)
 800a984:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a98c:	4a4d      	ldr	r2, [pc, #308]	@ (800aac4 <HAL_SPI_Receive_DMA+0x2f4>)
 800a98e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a996:	4a4c      	ldr	r2, [pc, #304]	@ (800aac8 <HAL_SPI_Receive_DMA+0x2f8>)
 800a998:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	2b07      	cmp	r3, #7
 800a9aa:	d804      	bhi.n	800a9b6 <HAL_SPI_Receive_DMA+0x1e6>
  {
    hspi->RxXferCount = Size;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	88fa      	ldrh	r2, [r7, #6]
 800a9b0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a9b4:	e010      	b.n	800a9d8 <HAL_SPI_Receive_DMA+0x208>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	2b0f      	cmp	r3, #15
 800a9bc:	d806      	bhi.n	800a9cc <HAL_SPI_Receive_DMA+0x1fc>
  {
    hspi->RxXferCount = Size * 2U;
 800a9be:	88fb      	ldrh	r3, [r7, #6]
 800a9c0:	005b      	lsls	r3, r3, #1
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a9ca:	e005      	b.n	800a9d8 <HAL_SPI_Receive_DMA+0x208>
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 800a9cc:	88fb      	ldrh	r3, [r7, #6]
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  }

  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d02d      	beq.n	800aa44 <HAL_SPI_Receive_DMA+0x274>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d024      	beq.n	800aa3e <HAL_SPI_Receive_DMA+0x26e>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fa fde6 	bl	8005604 <HAL_DMAEx_List_Start_IT>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	75fb      	strb	r3, [r7, #23]
 800aa3c:	e014      	b.n	800aa68 <HAL_SPI_Receive_DMA+0x298>
    }
    else
    {
      status = HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	75fb      	strb	r3, [r7, #23]
 800aa42:	e011      	b.n	800aa68 <HAL_SPI_Receive_DMA+0x298>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	3330      	adds	r3, #48	@ 0x30
 800aa50:	4619      	mov	r1, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa56:	461a      	mov	r2, r3
                              hspi->RxXferCount);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800aa5e:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800aa60:	f7fa f87c 	bl	8004b5c <HAL_DMA_Start_IT>
 800aa64:	4603      	mov	r3, r0
 800aa66:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800aa68:	7dfb      	ldrb	r3, [r7, #23]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d011      	beq.n	800aa92 <HAL_SPI_Receive_DMA+0x2c2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa74:	f043 0210 	orr.w	r2, r3, #16
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2201      	movs	r2, #1
 800aa82:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e057      	b.n	800ab42 <HAL_SPI_Receive_DMA+0x372>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa9a:	2b81      	cmp	r3, #129	@ 0x81
 800aa9c:	d116      	bne.n	800aacc <HAL_SPI_Receive_DMA+0x2fc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	6812      	ldr	r2, [r2, #0]
 800aaa8:	0c1b      	lsrs	r3, r3, #16
 800aaaa:	041b      	lsls	r3, r3, #16
 800aaac:	6053      	str	r3, [r2, #4]
 800aaae:	e017      	b.n	800aae0 <HAL_SPI_Receive_DMA+0x310>
 800aab0:	40013000 	.word	0x40013000
 800aab4:	50013000 	.word	0x50013000
 800aab8:	40003800 	.word	0x40003800
 800aabc:	50003800 	.word	0x50003800
 800aac0:	0800b001 	.word	0x0800b001
 800aac4:	0800af9f 	.word	0x0800af9f
 800aac8:	0800b01d 	.word	0x0800b01d
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	0c1b      	lsrs	r3, r3, #16
 800aad4:	041b      	lsls	r3, r3, #16
 800aad6:	88f9      	ldrh	r1, [r7, #6]
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	6812      	ldr	r2, [r2, #0]
 800aadc:	430b      	orrs	r3, r1
 800aade:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	689a      	ldr	r2, [r3, #8]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aaee:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	691a      	ldr	r2, [r3, #16]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f442 7250 	orr.w	r2, r2, #832	@ 0x340
 800aafe:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f042 0201 	orr.w	r2, r2, #1
 800ab0e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10c      	bne.n	800ab38 <HAL_SPI_Receive_DMA+0x368>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab26:	d107      	bne.n	800ab38 <HAL_SPI_Receive_DMA+0x368>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab36:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop

0800ab4c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b08a      	sub	sp, #40	@ 0x28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	695b      	ldr	r3, [r3, #20]
 800ab62:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800ab64:	6a3a      	ldr	r2, [r7, #32]
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	4013      	ands	r3, r2
 800ab6a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800ab74:	2300      	movs	r3, #0
 800ab76:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ab7e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3330      	adds	r3, #48	@ 0x30
 800ab86:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d010      	beq.n	800abb4 <HAL_SPI_IRQHandler+0x68>
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	f003 0308 	and.w	r3, r3, #8
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00b      	beq.n	800abb4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	699a      	ldr	r2, [r3, #24]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800abaa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f9c9 	bl	800af44 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800abb2:	e19a      	b.n	800aeea <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d113      	bne.n	800abe6 <HAL_SPI_IRQHandler+0x9a>
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	f003 0320 	and.w	r3, r3, #32
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10e      	bne.n	800abe6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d009      	beq.n	800abe6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	4798      	blx	r3
    handled = 1UL;
 800abe2:	2301      	movs	r3, #1
 800abe4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10f      	bne.n	800ac10 <HAL_SPI_IRQHandler+0xc4>
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00a      	beq.n	800ac10 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d105      	bne.n	800ac10 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	4798      	blx	r3
    handled = 1UL;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	f003 0320 	and.w	r3, r3, #32
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10f      	bne.n	800ac3a <HAL_SPI_IRQHandler+0xee>
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	f003 0302 	and.w	r3, r3, #2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00a      	beq.n	800ac3a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d105      	bne.n	800ac3a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	4798      	blx	r3
    handled = 1UL;
 800ac36:	2301      	movs	r3, #1
 800ac38:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 814f 	bne.w	800aee0 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	f003 0308 	and.w	r3, r3, #8
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 808b 	beq.w	800ad64 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	699a      	ldr	r2, [r3, #24]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f042 0208 	orr.w	r2, r2, #8
 800ac5c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	699a      	ldr	r2, [r3, #24]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f042 0210 	orr.w	r2, r2, #16
 800ac6c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	699a      	ldr	r2, [r3, #24]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac7c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	691a      	ldr	r2, [r3, #16]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f022 0208 	bic.w	r2, r2, #8
 800ac8c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d13d      	bne.n	800ad18 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ac9c:	e036      	b.n	800ad0c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	2b0f      	cmp	r3, #15
 800aca4:	d90b      	bls.n	800acbe <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800acb0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acb6:	1d1a      	adds	r2, r3, #4
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	66da      	str	r2, [r3, #108]	@ 0x6c
 800acbc:	e01d      	b.n	800acfa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	2b07      	cmp	r3, #7
 800acc4:	d90b      	bls.n	800acde <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	8812      	ldrh	r2, [r2, #0]
 800acce:	b292      	uxth	r2, r2
 800acd0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acd6:	1c9a      	adds	r2, r3, #2
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	66da      	str	r2, [r3, #108]	@ 0x6c
 800acdc:	e00d      	b.n	800acfa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acea:	7812      	ldrb	r2, [r2, #0]
 800acec:	b2d2      	uxtb	r2, r2
 800acee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acf4:	1c5a      	adds	r2, r3, #1
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	3b01      	subs	r3, #1
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d1c2      	bne.n	800ac9e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f9bc 	bl	800b096 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2201      	movs	r2, #1
 800ad22:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d003      	beq.n	800ad38 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7f7 f9ff 	bl	8002134 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ad36:	e0d8      	b.n	800aeea <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ad38:	7cfb      	ldrb	r3, [r7, #19]
 800ad3a:	2b05      	cmp	r3, #5
 800ad3c:	d103      	bne.n	800ad46 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f8e2 	bl	800af08 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ad44:	e0ce      	b.n	800aee4 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ad46:	7cfb      	ldrb	r3, [r7, #19]
 800ad48:	2b04      	cmp	r3, #4
 800ad4a:	d103      	bne.n	800ad54 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7f7 f9e1 	bl	8002114 <HAL_SPI_RxCpltCallback>
    return;
 800ad52:	e0c7      	b.n	800aee4 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ad54:	7cfb      	ldrb	r3, [r7, #19]
 800ad56:	2b03      	cmp	r3, #3
 800ad58:	f040 80c4 	bne.w	800aee4 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f8c9 	bl	800aef4 <HAL_SPI_TxCpltCallback>
    return;
 800ad62:	e0bf      	b.n	800aee4 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 80bd 	beq.w	800aeea <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00f      	beq.n	800ad9a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad80:	f043 0204 	orr.w	r2, r3, #4
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	699a      	ldr	r2, [r3, #24]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad98:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00f      	beq.n	800adc4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adaa:	f043 0201 	orr.w	r2, r3, #1
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	699a      	ldr	r2, [r3, #24]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adc2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00f      	beq.n	800adee <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800add4:	f043 0208 	orr.w	r2, r3, #8
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	699a      	ldr	r2, [r3, #24]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800adec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	f003 0320 	and.w	r3, r3, #32
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00f      	beq.n	800ae18 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adfe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	699a      	ldr	r2, [r3, #24]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f042 0220 	orr.w	r2, r2, #32
 800ae16:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d062      	beq.n	800aee8 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f022 0201 	bic.w	r2, r2, #1
 800ae30:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	6812      	ldr	r2, [r2, #0]
 800ae3c:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800ae40:	f023 0303 	bic.w	r3, r3, #3
 800ae44:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ae4c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ae50:	d13e      	bne.n	800aed0 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	689a      	ldr	r2, [r3, #8]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ae60:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d015      	beq.n	800ae98 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae72:	4a1f      	ldr	r2, [pc, #124]	@ (800aef0 <HAL_SPI_IRQHandler+0x3a4>)
 800ae74:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7f9 ff49 	bl	8004d14 <HAL_DMA_Abort_IT>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d007      	beq.n	800ae98 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d022      	beq.n	800aee8 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aea8:	4a11      	ldr	r2, [pc, #68]	@ (800aef0 <HAL_SPI_IRQHandler+0x3a4>)
 800aeaa:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7f9 ff2e 	bl	8004d14 <HAL_DMA_Abort_IT>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d014      	beq.n	800aee8 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aec4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aece:	e00b      	b.n	800aee8 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7f7 f92b 	bl	8002134 <HAL_SPI_ErrorCallback>
    return;
 800aede:	e003      	b.n	800aee8 <HAL_SPI_IRQHandler+0x39c>
    return;
 800aee0:	bf00      	nop
 800aee2:	e002      	b.n	800aeea <HAL_SPI_IRQHandler+0x39e>
    return;
 800aee4:	bf00      	nop
 800aee6:	e000      	b.n	800aeea <HAL_SPI_IRQHandler+0x39e>
    return;
 800aee8:	bf00      	nop
  }
}
 800aeea:	3728      	adds	r7, #40	@ 0x28
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	0800b063 	.word	0x0800b063

0800aef4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800af38:	bf00      	nop
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af64:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b07      	cmp	r3, #7
 800af70:	d011      	beq.n	800af96 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af7a:	2b81      	cmp	r3, #129	@ 0x81
 800af7c:	d103      	bne.n	800af86 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f7ff ffb8 	bl	800aef4 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800af84:	e007      	b.n	800af96 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	691a      	ldr	r2, [r3, #16]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f042 0208 	orr.w	r2, r2, #8
 800af94:	611a      	str	r2, [r3, #16]
}
 800af96:	bf00      	nop
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afaa:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	2b07      	cmp	r3, #7
 800afb6:	d011      	beq.n	800afdc <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afc0:	2b81      	cmp	r3, #129	@ 0x81
 800afc2:	d103      	bne.n	800afcc <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f7f7 f8a5 	bl	8002114 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800afca:	e007      	b.n	800afdc <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	691a      	ldr	r2, [r3, #16]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f042 0208 	orr.w	r2, r2, #8
 800afda:	611a      	str	r2, [r3, #16]
}
 800afdc:	bf00      	nop
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aff0:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f7ff ff92 	bl	800af1c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aff8:	bf00      	nop
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b00c:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f7ff ff8e 	bl	800af30 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b014:	bf00      	nop
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b028:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7f9 fffc 	bl	8005028 <HAL_DMA_GetError>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d011      	beq.n	800b05a <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f000 f82d 	bl	800b096 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b042:	f043 0210 	orr.w	r2, r3, #16
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f7f7 f86d 	bl	8002134 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800b05a:	bf00      	nop
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b084      	sub	sp, #16
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b06e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f7f7 f853 	bl	8002134 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b08e:	bf00      	nop
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b096:	b480      	push	{r7}
 800b098:	b085      	sub	sp, #20
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	695b      	ldr	r3, [r3, #20]
 800b0a4:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	699a      	ldr	r2, [r3, #24]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f042 0208 	orr.w	r2, r2, #8
 800b0b4:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	699a      	ldr	r2, [r3, #24]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f042 0210 	orr.w	r2, r2, #16
 800b0c4:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f022 0201 	bic.w	r2, r2, #1
 800b0d4:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	6812      	ldr	r2, [r2, #0]
 800b0e0:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800b0e4:	f023 0303 	bic.w	r3, r3, #3
 800b0e8:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	689a      	ldr	r2, [r3, #8]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b0f8:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b04      	cmp	r3, #4
 800b104:	d014      	beq.n	800b130 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f003 0320 	and.w	r3, r3, #32
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00f      	beq.n	800b130 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b116:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	699a      	ldr	r2, [r3, #24]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f042 0220 	orr.w	r2, r2, #32
 800b12e:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d014      	beq.n	800b166 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00f      	beq.n	800b166 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b14c:	f043 0204 	orr.w	r2, r3, #4
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	699a      	ldr	r2, [r3, #24]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b164:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00f      	beq.n	800b190 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b176:	f043 0201 	orr.w	r2, r3, #1
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	699a      	ldr	r2, [r3, #24]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b18e:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00f      	beq.n	800b1ba <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1a0:	f043 0208 	orr.w	r2, r3, #8
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	699a      	ldr	r2, [r3, #24]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b1b8:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800b1ca:	bf00      	nop
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b085      	sub	sp, #20
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1e2:	095b      	lsrs	r3, r3, #5
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	3307      	adds	r3, #7
 800b1f4:	08db      	lsrs	r3, r3, #3
 800b1f6:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	fb02 f303 	mul.w	r3, r2, r3
}
 800b200:	4618      	mov	r0, r3
 800b202:	3714      	adds	r7, #20
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d12e      	bne.n	800b280 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d101      	bne.n	800b230 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800b22c:	2302      	movs	r3, #2
 800b22e:	e028      	b.n	800b282 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2202      	movs	r2, #2
 800b23c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f022 0201 	bic.w	r2, r2, #1
 800b24e:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800b25c:	ea42 0103 	orr.w	r1, r2, r3
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	689a      	ldr	r2, [r3, #8]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	430a      	orrs	r2, r1
 800b26a:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	e000      	b.n	800b282 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800b280:	2301      	movs	r3, #1
  }
}
 800b282:	4618      	mov	r0, r3
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b082      	sub	sp, #8
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e049      	b.n	800b334 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d106      	bne.n	800b2ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f7f8 fcdf 	bl	8003c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2202      	movs	r2, #2
 800b2be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	f000 ff67 	bl	800c1a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2201      	movs	r2, #1
 800b316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2201      	movs	r2, #1
 800b326:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d001      	beq.n	800b354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	e072      	b.n	800b43a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2202      	movs	r2, #2
 800b358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68da      	ldr	r2, [r3, #12]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f042 0201 	orr.w	r2, r2, #1
 800b36a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a35      	ldr	r2, [pc, #212]	@ (800b448 <HAL_TIM_Base_Start_IT+0x10c>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d040      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a34      	ldr	r2, [pc, #208]	@ (800b44c <HAL_TIM_Base_Start_IT+0x110>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d03b      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b388:	d036      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b392:	d031      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a2d      	ldr	r2, [pc, #180]	@ (800b450 <HAL_TIM_Base_Start_IT+0x114>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d02c      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a2c      	ldr	r2, [pc, #176]	@ (800b454 <HAL_TIM_Base_Start_IT+0x118>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d027      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a2a      	ldr	r2, [pc, #168]	@ (800b458 <HAL_TIM_Base_Start_IT+0x11c>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d022      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a29      	ldr	r2, [pc, #164]	@ (800b45c <HAL_TIM_Base_Start_IT+0x120>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d01d      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a27      	ldr	r2, [pc, #156]	@ (800b460 <HAL_TIM_Base_Start_IT+0x124>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d018      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a26      	ldr	r2, [pc, #152]	@ (800b464 <HAL_TIM_Base_Start_IT+0x128>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d013      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a24      	ldr	r2, [pc, #144]	@ (800b468 <HAL_TIM_Base_Start_IT+0x12c>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d00e      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a23      	ldr	r2, [pc, #140]	@ (800b46c <HAL_TIM_Base_Start_IT+0x130>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d009      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a21      	ldr	r2, [pc, #132]	@ (800b470 <HAL_TIM_Base_Start_IT+0x134>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d004      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a20      	ldr	r2, [pc, #128]	@ (800b474 <HAL_TIM_Base_Start_IT+0x138>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d115      	bne.n	800b424 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	689a      	ldr	r2, [r3, #8]
 800b3fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b478 <HAL_TIM_Base_Start_IT+0x13c>)
 800b400:	4013      	ands	r3, r2
 800b402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b06      	cmp	r3, #6
 800b408:	d015      	beq.n	800b436 <HAL_TIM_Base_Start_IT+0xfa>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b410:	d011      	beq.n	800b436 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f042 0201 	orr.w	r2, r2, #1
 800b420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b422:	e008      	b.n	800b436 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f042 0201 	orr.w	r2, r2, #1
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	e000      	b.n	800b438 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b436:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3714      	adds	r7, #20
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	40012c00 	.word	0x40012c00
 800b44c:	50012c00 	.word	0x50012c00
 800b450:	40000400 	.word	0x40000400
 800b454:	50000400 	.word	0x50000400
 800b458:	40000800 	.word	0x40000800
 800b45c:	50000800 	.word	0x50000800
 800b460:	40000c00 	.word	0x40000c00
 800b464:	50000c00 	.word	0x50000c00
 800b468:	40013400 	.word	0x40013400
 800b46c:	50013400 	.word	0x50013400
 800b470:	40014000 	.word	0x40014000
 800b474:	50014000 	.word	0x50014000
 800b478:	00010007 	.word	0x00010007

0800b47c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68da      	ldr	r2, [r3, #12]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f022 0201 	bic.w	r2, r2, #1
 800b492:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	6a1a      	ldr	r2, [r3, #32]
 800b49a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b49e:	4013      	ands	r3, r2
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10f      	bne.n	800b4c4 <HAL_TIM_Base_Stop_IT+0x48>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6a1a      	ldr	r2, [r3, #32]
 800b4aa:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d107      	bne.n	800b4c4 <HAL_TIM_Base_Stop_IT+0x48>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f022 0201 	bic.w	r2, r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b082      	sub	sp, #8
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d101      	bne.n	800b4ec <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e049      	b.n	800b580 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d106      	bne.n	800b506 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7f8 fc03 	bl	8003d0c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2202      	movs	r2, #2
 800b50a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	3304      	adds	r3, #4
 800b516:	4619      	mov	r1, r3
 800b518:	4610      	mov	r0, r2
 800b51a:	f000 fe41 	bl	800c1a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2201      	movs	r2, #1
 800b53a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2201      	movs	r2, #1
 800b572:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d109      	bne.n	800b5ac <HAL_TIM_OC_Start+0x24>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	bf14      	ite	ne
 800b5a4:	2301      	movne	r3, #1
 800b5a6:	2300      	moveq	r3, #0
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	e03c      	b.n	800b626 <HAL_TIM_OC_Start+0x9e>
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	2b04      	cmp	r3, #4
 800b5b0:	d109      	bne.n	800b5c6 <HAL_TIM_OC_Start+0x3e>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	bf14      	ite	ne
 800b5be:	2301      	movne	r3, #1
 800b5c0:	2300      	moveq	r3, #0
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	e02f      	b.n	800b626 <HAL_TIM_OC_Start+0x9e>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b08      	cmp	r3, #8
 800b5ca:	d109      	bne.n	800b5e0 <HAL_TIM_OC_Start+0x58>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	bf14      	ite	ne
 800b5d8:	2301      	movne	r3, #1
 800b5da:	2300      	moveq	r3, #0
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	e022      	b.n	800b626 <HAL_TIM_OC_Start+0x9e>
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	2b0c      	cmp	r3, #12
 800b5e4:	d109      	bne.n	800b5fa <HAL_TIM_OC_Start+0x72>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	bf14      	ite	ne
 800b5f2:	2301      	movne	r3, #1
 800b5f4:	2300      	moveq	r3, #0
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	e015      	b.n	800b626 <HAL_TIM_OC_Start+0x9e>
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	2b10      	cmp	r3, #16
 800b5fe:	d109      	bne.n	800b614 <HAL_TIM_OC_Start+0x8c>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b606:	b2db      	uxtb	r3, r3
 800b608:	2b01      	cmp	r3, #1
 800b60a:	bf14      	ite	ne
 800b60c:	2301      	movne	r3, #1
 800b60e:	2300      	moveq	r3, #0
 800b610:	b2db      	uxtb	r3, r3
 800b612:	e008      	b.n	800b626 <HAL_TIM_OC_Start+0x9e>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	bf14      	ite	ne
 800b620:	2301      	movne	r3, #1
 800b622:	2300      	moveq	r3, #0
 800b624:	b2db      	uxtb	r3, r3
 800b626:	2b00      	cmp	r3, #0
 800b628:	d001      	beq.n	800b62e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e0d8      	b.n	800b7e0 <HAL_TIM_OC_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d104      	bne.n	800b63e <HAL_TIM_OC_Start+0xb6>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2202      	movs	r2, #2
 800b638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b63c:	e023      	b.n	800b686 <HAL_TIM_OC_Start+0xfe>
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2b04      	cmp	r3, #4
 800b642:	d104      	bne.n	800b64e <HAL_TIM_OC_Start+0xc6>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2202      	movs	r2, #2
 800b648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b64c:	e01b      	b.n	800b686 <HAL_TIM_OC_Start+0xfe>
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2b08      	cmp	r3, #8
 800b652:	d104      	bne.n	800b65e <HAL_TIM_OC_Start+0xd6>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2202      	movs	r2, #2
 800b658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b65c:	e013      	b.n	800b686 <HAL_TIM_OC_Start+0xfe>
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b0c      	cmp	r3, #12
 800b662:	d104      	bne.n	800b66e <HAL_TIM_OC_Start+0xe6>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b66c:	e00b      	b.n	800b686 <HAL_TIM_OC_Start+0xfe>
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	2b10      	cmp	r3, #16
 800b672:	d104      	bne.n	800b67e <HAL_TIM_OC_Start+0xf6>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2202      	movs	r2, #2
 800b678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b67c:	e003      	b.n	800b686 <HAL_TIM_OC_Start+0xfe>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2202      	movs	r2, #2
 800b682:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2201      	movs	r2, #1
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	4618      	mov	r0, r3
 800b690:	f001 fbad 	bl	800cdee <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a53      	ldr	r2, [pc, #332]	@ (800b7e8 <HAL_TIM_OC_Start+0x260>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d02c      	beq.n	800b6f8 <HAL_TIM_OC_Start+0x170>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a52      	ldr	r2, [pc, #328]	@ (800b7ec <HAL_TIM_OC_Start+0x264>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d027      	beq.n	800b6f8 <HAL_TIM_OC_Start+0x170>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a50      	ldr	r2, [pc, #320]	@ (800b7f0 <HAL_TIM_OC_Start+0x268>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d022      	beq.n	800b6f8 <HAL_TIM_OC_Start+0x170>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a4f      	ldr	r2, [pc, #316]	@ (800b7f4 <HAL_TIM_OC_Start+0x26c>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d01d      	beq.n	800b6f8 <HAL_TIM_OC_Start+0x170>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a4d      	ldr	r2, [pc, #308]	@ (800b7f8 <HAL_TIM_OC_Start+0x270>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d018      	beq.n	800b6f8 <HAL_TIM_OC_Start+0x170>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a4c      	ldr	r2, [pc, #304]	@ (800b7fc <HAL_TIM_OC_Start+0x274>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d013      	beq.n	800b6f8 <HAL_TIM_OC_Start+0x170>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a4a      	ldr	r2, [pc, #296]	@ (800b800 <HAL_TIM_OC_Start+0x278>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d00e      	beq.n	800b6f8 <HAL_TIM_OC_Start+0x170>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a49      	ldr	r2, [pc, #292]	@ (800b804 <HAL_TIM_OC_Start+0x27c>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d009      	beq.n	800b6f8 <HAL_TIM_OC_Start+0x170>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a47      	ldr	r2, [pc, #284]	@ (800b808 <HAL_TIM_OC_Start+0x280>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d004      	beq.n	800b6f8 <HAL_TIM_OC_Start+0x170>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a46      	ldr	r2, [pc, #280]	@ (800b80c <HAL_TIM_OC_Start+0x284>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d101      	bne.n	800b6fc <HAL_TIM_OC_Start+0x174>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e000      	b.n	800b6fe <HAL_TIM_OC_Start+0x176>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d007      	beq.n	800b712 <HAL_TIM_OC_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b710:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a34      	ldr	r2, [pc, #208]	@ (800b7e8 <HAL_TIM_OC_Start+0x260>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d040      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a32      	ldr	r2, [pc, #200]	@ (800b7ec <HAL_TIM_OC_Start+0x264>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d03b      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b72e:	d036      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b738:	d031      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a34      	ldr	r2, [pc, #208]	@ (800b810 <HAL_TIM_OC_Start+0x288>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d02c      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a32      	ldr	r2, [pc, #200]	@ (800b814 <HAL_TIM_OC_Start+0x28c>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d027      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a31      	ldr	r2, [pc, #196]	@ (800b818 <HAL_TIM_OC_Start+0x290>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d022      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a2f      	ldr	r2, [pc, #188]	@ (800b81c <HAL_TIM_OC_Start+0x294>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d01d      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a2e      	ldr	r2, [pc, #184]	@ (800b820 <HAL_TIM_OC_Start+0x298>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d018      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a2c      	ldr	r2, [pc, #176]	@ (800b824 <HAL_TIM_OC_Start+0x29c>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d013      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a1d      	ldr	r2, [pc, #116]	@ (800b7f0 <HAL_TIM_OC_Start+0x268>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d00e      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a1b      	ldr	r2, [pc, #108]	@ (800b7f4 <HAL_TIM_OC_Start+0x26c>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d009      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a1a      	ldr	r2, [pc, #104]	@ (800b7f8 <HAL_TIM_OC_Start+0x270>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d004      	beq.n	800b79e <HAL_TIM_OC_Start+0x216>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a18      	ldr	r2, [pc, #96]	@ (800b7fc <HAL_TIM_OC_Start+0x274>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d115      	bne.n	800b7ca <HAL_TIM_OC_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	689a      	ldr	r2, [r3, #8]
 800b7a4:	4b20      	ldr	r3, [pc, #128]	@ (800b828 <HAL_TIM_OC_Start+0x2a0>)
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2b06      	cmp	r3, #6
 800b7ae:	d015      	beq.n	800b7dc <HAL_TIM_OC_Start+0x254>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7b6:	d011      	beq.n	800b7dc <HAL_TIM_OC_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f042 0201 	orr.w	r2, r2, #1
 800b7c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7c8:	e008      	b.n	800b7dc <HAL_TIM_OC_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f042 0201 	orr.w	r2, r2, #1
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	e000      	b.n	800b7de <HAL_TIM_OC_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	40012c00 	.word	0x40012c00
 800b7ec:	50012c00 	.word	0x50012c00
 800b7f0:	40013400 	.word	0x40013400
 800b7f4:	50013400 	.word	0x50013400
 800b7f8:	40014000 	.word	0x40014000
 800b7fc:	50014000 	.word	0x50014000
 800b800:	40014400 	.word	0x40014400
 800b804:	50014400 	.word	0x50014400
 800b808:	40014800 	.word	0x40014800
 800b80c:	50014800 	.word	0x50014800
 800b810:	40000400 	.word	0x40000400
 800b814:	50000400 	.word	0x50000400
 800b818:	40000800 	.word	0x40000800
 800b81c:	50000800 	.word	0x50000800
 800b820:	40000c00 	.word	0x40000c00
 800b824:	50000c00 	.word	0x50000c00
 800b828:	00010007 	.word	0x00010007

0800b82c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2200      	movs	r2, #0
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	4618      	mov	r0, r3
 800b840:	f001 fad5 	bl	800cdee <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a4a      	ldr	r2, [pc, #296]	@ (800b974 <HAL_TIM_OC_Stop+0x148>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d02c      	beq.n	800b8a8 <HAL_TIM_OC_Stop+0x7c>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a49      	ldr	r2, [pc, #292]	@ (800b978 <HAL_TIM_OC_Stop+0x14c>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d027      	beq.n	800b8a8 <HAL_TIM_OC_Stop+0x7c>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a47      	ldr	r2, [pc, #284]	@ (800b97c <HAL_TIM_OC_Stop+0x150>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d022      	beq.n	800b8a8 <HAL_TIM_OC_Stop+0x7c>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a46      	ldr	r2, [pc, #280]	@ (800b980 <HAL_TIM_OC_Stop+0x154>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d01d      	beq.n	800b8a8 <HAL_TIM_OC_Stop+0x7c>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a44      	ldr	r2, [pc, #272]	@ (800b984 <HAL_TIM_OC_Stop+0x158>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d018      	beq.n	800b8a8 <HAL_TIM_OC_Stop+0x7c>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a43      	ldr	r2, [pc, #268]	@ (800b988 <HAL_TIM_OC_Stop+0x15c>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d013      	beq.n	800b8a8 <HAL_TIM_OC_Stop+0x7c>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a41      	ldr	r2, [pc, #260]	@ (800b98c <HAL_TIM_OC_Stop+0x160>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d00e      	beq.n	800b8a8 <HAL_TIM_OC_Stop+0x7c>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a40      	ldr	r2, [pc, #256]	@ (800b990 <HAL_TIM_OC_Stop+0x164>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d009      	beq.n	800b8a8 <HAL_TIM_OC_Stop+0x7c>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a3e      	ldr	r2, [pc, #248]	@ (800b994 <HAL_TIM_OC_Stop+0x168>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d004      	beq.n	800b8a8 <HAL_TIM_OC_Stop+0x7c>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a3d      	ldr	r2, [pc, #244]	@ (800b998 <HAL_TIM_OC_Stop+0x16c>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d101      	bne.n	800b8ac <HAL_TIM_OC_Stop+0x80>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e000      	b.n	800b8ae <HAL_TIM_OC_Stop+0x82>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d017      	beq.n	800b8e2 <HAL_TIM_OC_Stop+0xb6>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	6a1a      	ldr	r2, [r3, #32]
 800b8b8:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b8bc:	4013      	ands	r3, r2
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10f      	bne.n	800b8e2 <HAL_TIM_OC_Stop+0xb6>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	6a1a      	ldr	r2, [r3, #32]
 800b8c8:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d107      	bne.n	800b8e2 <HAL_TIM_OC_Stop+0xb6>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b8e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	6a1a      	ldr	r2, [r3, #32]
 800b8e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10f      	bne.n	800b912 <HAL_TIM_OC_Stop+0xe6>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	6a1a      	ldr	r2, [r3, #32]
 800b8f8:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d107      	bne.n	800b912 <HAL_TIM_OC_Stop+0xe6>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f022 0201 	bic.w	r2, r2, #1
 800b910:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d104      	bne.n	800b922 <HAL_TIM_OC_Stop+0xf6>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b920:	e023      	b.n	800b96a <HAL_TIM_OC_Stop+0x13e>
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	2b04      	cmp	r3, #4
 800b926:	d104      	bne.n	800b932 <HAL_TIM_OC_Stop+0x106>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b930:	e01b      	b.n	800b96a <HAL_TIM_OC_Stop+0x13e>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	2b08      	cmp	r3, #8
 800b936:	d104      	bne.n	800b942 <HAL_TIM_OC_Stop+0x116>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b940:	e013      	b.n	800b96a <HAL_TIM_OC_Stop+0x13e>
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b0c      	cmp	r3, #12
 800b946:	d104      	bne.n	800b952 <HAL_TIM_OC_Stop+0x126>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b950:	e00b      	b.n	800b96a <HAL_TIM_OC_Stop+0x13e>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b10      	cmp	r3, #16
 800b956:	d104      	bne.n	800b962 <HAL_TIM_OC_Stop+0x136>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b960:	e003      	b.n	800b96a <HAL_TIM_OC_Stop+0x13e>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3708      	adds	r7, #8
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	40012c00 	.word	0x40012c00
 800b978:	50012c00 	.word	0x50012c00
 800b97c:	40013400 	.word	0x40013400
 800b980:	50013400 	.word	0x50013400
 800b984:	40014000 	.word	0x40014000
 800b988:	50014000 	.word	0x50014000
 800b98c:	40014400 	.word	0x40014400
 800b990:	50014400 	.word	0x50014400
 800b994:	40014800 	.word	0x40014800
 800b998:	50014800 	.word	0x50014800

0800b99c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d101      	bne.n	800b9ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e049      	b.n	800ba42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d106      	bne.n	800b9c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f841 	bl	800ba4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	4619      	mov	r1, r3
 800b9da:	4610      	mov	r0, r2
 800b9dc:	f000 fbe0 	bl	800c1a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b083      	sub	sp, #12
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ba52:	bf00      	nop
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d101      	bne.n	800ba72 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e041      	b.n	800baf6 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d106      	bne.n	800ba8c <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f839 	bl	800bafe <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2202      	movs	r2, #2
 800ba90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4610      	mov	r0, r2
 800baa0:	f000 fb7e 	bl	800c1a0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f022 0208 	bic.w	r2, r2, #8
 800bab2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6819      	ldr	r1, [r3, #0]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	683a      	ldr	r2, [r7, #0]
 800bac0:	430a      	orrs	r2, r1
 800bac2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800bafe:	b480      	push	{r7}
 800bb00:	b083      	sub	sp, #12
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800bb06:	bf00      	nop
 800bb08:	370c      	adds	r7, #12
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b084      	sub	sp, #16
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	f003 0302 	and.w	r3, r3, #2
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d020      	beq.n	800bb76 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f003 0302 	and.w	r3, r3, #2
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d01b      	beq.n	800bb76 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f06f 0202 	mvn.w	r2, #2
 800bb46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	f003 0303 	and.w	r3, r3, #3
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d003      	beq.n	800bb64 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fb01 	bl	800c164 <HAL_TIM_IC_CaptureCallback>
 800bb62:	e005      	b.n	800bb70 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 faf3 	bl	800c150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fb04 	bl	800c178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	f003 0304 	and.w	r3, r3, #4
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d020      	beq.n	800bbc2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f003 0304 	and.w	r3, r3, #4
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d01b      	beq.n	800bbc2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f06f 0204 	mvn.w	r2, #4
 800bb92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2202      	movs	r2, #2
 800bb98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	699b      	ldr	r3, [r3, #24]
 800bba0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d003      	beq.n	800bbb0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fadb 	bl	800c164 <HAL_TIM_IC_CaptureCallback>
 800bbae:	e005      	b.n	800bbbc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 facd 	bl	800c150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fade 	bl	800c178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	f003 0308 	and.w	r3, r3, #8
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d020      	beq.n	800bc0e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f003 0308 	and.w	r3, r3, #8
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d01b      	beq.n	800bc0e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f06f 0208 	mvn.w	r2, #8
 800bbde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2204      	movs	r2, #4
 800bbe4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	69db      	ldr	r3, [r3, #28]
 800bbec:	f003 0303 	and.w	r3, r3, #3
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d003      	beq.n	800bbfc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fab5 	bl	800c164 <HAL_TIM_IC_CaptureCallback>
 800bbfa:	e005      	b.n	800bc08 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 faa7 	bl	800c150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 fab8 	bl	800c178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	f003 0310 	and.w	r3, r3, #16
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d020      	beq.n	800bc5a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f003 0310 	and.w	r3, r3, #16
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d01b      	beq.n	800bc5a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f06f 0210 	mvn.w	r2, #16
 800bc2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2208      	movs	r2, #8
 800bc30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	69db      	ldr	r3, [r3, #28]
 800bc38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d003      	beq.n	800bc48 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fa8f 	bl	800c164 <HAL_TIM_IC_CaptureCallback>
 800bc46:	e005      	b.n	800bc54 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fa81 	bl	800c150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 fa92 	bl	800c178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	f003 0301 	and.w	r3, r3, #1
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00c      	beq.n	800bc7e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f003 0301 	and.w	r3, r3, #1
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d007      	beq.n	800bc7e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f06f 0201 	mvn.w	r2, #1
 800bc76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7f8 f9fd 	bl	8004078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d104      	bne.n	800bc92 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00c      	beq.n	800bcac <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d007      	beq.n	800bcac <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f001 fa7e 	bl	800d1a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00c      	beq.n	800bcd0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d007      	beq.n	800bcd0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bcc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f001 fa76 	bl	800d1bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00c      	beq.n	800bcf4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d007      	beq.n	800bcf4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bcec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fa4c 	bl	800c18c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	f003 0320 	and.w	r3, r3, #32
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00c      	beq.n	800bd18 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f003 0320 	and.w	r3, r3, #32
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d007      	beq.n	800bd18 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f06f 0220 	mvn.w	r2, #32
 800bd10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f001 fa3e 	bl	800d194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00c      	beq.n	800bd3c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d007      	beq.n	800bd3c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800bd34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f001 fa4a 	bl	800d1d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00c      	beq.n	800bd60 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d007      	beq.n	800bd60 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800bd58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f001 fa42 	bl	800d1e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00c      	beq.n	800bd84 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d007      	beq.n	800bd84 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800bd7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f001 fa3a 	bl	800d1f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00c      	beq.n	800bda8 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d007      	beq.n	800bda8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800bda0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f001 fa32 	bl	800d20c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bda8:	bf00      	nop
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d101      	bne.n	800bdce <HAL_TIM_OC_ConfigChannel+0x1e>
 800bdca:	2302      	movs	r3, #2
 800bdcc:	e066      	b.n	800be9c <HAL_TIM_OC_ConfigChannel+0xec>
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b14      	cmp	r3, #20
 800bdda:	d857      	bhi.n	800be8c <HAL_TIM_OC_ConfigChannel+0xdc>
 800bddc:	a201      	add	r2, pc, #4	@ (adr r2, 800bde4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800bdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde2:	bf00      	nop
 800bde4:	0800be39 	.word	0x0800be39
 800bde8:	0800be8d 	.word	0x0800be8d
 800bdec:	0800be8d 	.word	0x0800be8d
 800bdf0:	0800be8d 	.word	0x0800be8d
 800bdf4:	0800be47 	.word	0x0800be47
 800bdf8:	0800be8d 	.word	0x0800be8d
 800bdfc:	0800be8d 	.word	0x0800be8d
 800be00:	0800be8d 	.word	0x0800be8d
 800be04:	0800be55 	.word	0x0800be55
 800be08:	0800be8d 	.word	0x0800be8d
 800be0c:	0800be8d 	.word	0x0800be8d
 800be10:	0800be8d 	.word	0x0800be8d
 800be14:	0800be63 	.word	0x0800be63
 800be18:	0800be8d 	.word	0x0800be8d
 800be1c:	0800be8d 	.word	0x0800be8d
 800be20:	0800be8d 	.word	0x0800be8d
 800be24:	0800be71 	.word	0x0800be71
 800be28:	0800be8d 	.word	0x0800be8d
 800be2c:	0800be8d 	.word	0x0800be8d
 800be30:	0800be8d 	.word	0x0800be8d
 800be34:	0800be7f 	.word	0x0800be7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	68b9      	ldr	r1, [r7, #8]
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 fab4 	bl	800c3ac <TIM_OC1_SetConfig>
      break;
 800be44:	e025      	b.n	800be92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68b9      	ldr	r1, [r7, #8]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 fb6f 	bl	800c530 <TIM_OC2_SetConfig>
      break;
 800be52:	e01e      	b.n	800be92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68b9      	ldr	r1, [r7, #8]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 fc18 	bl	800c690 <TIM_OC3_SetConfig>
      break;
 800be60:	e017      	b.n	800be92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68b9      	ldr	r1, [r7, #8]
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 fcbf 	bl	800c7ec <TIM_OC4_SetConfig>
      break;
 800be6e:	e010      	b.n	800be92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	68b9      	ldr	r1, [r7, #8]
 800be76:	4618      	mov	r0, r3
 800be78:	f000 fd68 	bl	800c94c <TIM_OC5_SetConfig>
      break;
 800be7c:	e009      	b.n	800be92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68b9      	ldr	r1, [r7, #8]
 800be84:	4618      	mov	r0, r3
 800be86:	f000 fde3 	bl	800ca50 <TIM_OC6_SetConfig>
      break;
 800be8a:	e002      	b.n	800be92 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	75fb      	strb	r3, [r7, #23]
      break;
 800be90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800be9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b086      	sub	sp, #24
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d101      	bne.n	800bec2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bebe:	2302      	movs	r3, #2
 800bec0:	e0ff      	b.n	800c0c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2b14      	cmp	r3, #20
 800bece:	f200 80f0 	bhi.w	800c0b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bed2:	a201      	add	r2, pc, #4	@ (adr r2, 800bed8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed8:	0800bf2d 	.word	0x0800bf2d
 800bedc:	0800c0b3 	.word	0x0800c0b3
 800bee0:	0800c0b3 	.word	0x0800c0b3
 800bee4:	0800c0b3 	.word	0x0800c0b3
 800bee8:	0800bf6d 	.word	0x0800bf6d
 800beec:	0800c0b3 	.word	0x0800c0b3
 800bef0:	0800c0b3 	.word	0x0800c0b3
 800bef4:	0800c0b3 	.word	0x0800c0b3
 800bef8:	0800bfaf 	.word	0x0800bfaf
 800befc:	0800c0b3 	.word	0x0800c0b3
 800bf00:	0800c0b3 	.word	0x0800c0b3
 800bf04:	0800c0b3 	.word	0x0800c0b3
 800bf08:	0800bfef 	.word	0x0800bfef
 800bf0c:	0800c0b3 	.word	0x0800c0b3
 800bf10:	0800c0b3 	.word	0x0800c0b3
 800bf14:	0800c0b3 	.word	0x0800c0b3
 800bf18:	0800c031 	.word	0x0800c031
 800bf1c:	0800c0b3 	.word	0x0800c0b3
 800bf20:	0800c0b3 	.word	0x0800c0b3
 800bf24:	0800c0b3 	.word	0x0800c0b3
 800bf28:	0800c071 	.word	0x0800c071
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	68b9      	ldr	r1, [r7, #8]
 800bf32:	4618      	mov	r0, r3
 800bf34:	f000 fa3a 	bl	800c3ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	699a      	ldr	r2, [r3, #24]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f042 0208 	orr.w	r2, r2, #8
 800bf46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	699a      	ldr	r2, [r3, #24]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f022 0204 	bic.w	r2, r2, #4
 800bf56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6999      	ldr	r1, [r3, #24]
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	691a      	ldr	r2, [r3, #16]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	430a      	orrs	r2, r1
 800bf68:	619a      	str	r2, [r3, #24]
      break;
 800bf6a:	e0a5      	b.n	800c0b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68b9      	ldr	r1, [r7, #8]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 fadc 	bl	800c530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	699a      	ldr	r2, [r3, #24]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	699a      	ldr	r2, [r3, #24]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	6999      	ldr	r1, [r3, #24]
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	021a      	lsls	r2, r3, #8
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	430a      	orrs	r2, r1
 800bfaa:	619a      	str	r2, [r3, #24]
      break;
 800bfac:	e084      	b.n	800c0b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68b9      	ldr	r1, [r7, #8]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f000 fb6b 	bl	800c690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	69da      	ldr	r2, [r3, #28]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f042 0208 	orr.w	r2, r2, #8
 800bfc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	69da      	ldr	r2, [r3, #28]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f022 0204 	bic.w	r2, r2, #4
 800bfd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	69d9      	ldr	r1, [r3, #28]
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	691a      	ldr	r2, [r3, #16]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	430a      	orrs	r2, r1
 800bfea:	61da      	str	r2, [r3, #28]
      break;
 800bfec:	e064      	b.n	800c0b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68b9      	ldr	r1, [r7, #8]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 fbf9 	bl	800c7ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	69da      	ldr	r2, [r3, #28]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	69da      	ldr	r2, [r3, #28]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	69d9      	ldr	r1, [r3, #28]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	021a      	lsls	r2, r3, #8
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	430a      	orrs	r2, r1
 800c02c:	61da      	str	r2, [r3, #28]
      break;
 800c02e:	e043      	b.n	800c0b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68b9      	ldr	r1, [r7, #8]
 800c036:	4618      	mov	r0, r3
 800c038:	f000 fc88 	bl	800c94c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f042 0208 	orr.w	r2, r2, #8
 800c04a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f022 0204 	bic.w	r2, r2, #4
 800c05a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	691a      	ldr	r2, [r3, #16]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	430a      	orrs	r2, r1
 800c06c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c06e:	e023      	b.n	800c0b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68b9      	ldr	r1, [r7, #8]
 800c076:	4618      	mov	r0, r3
 800c078:	f000 fcea 	bl	800ca50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c08a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c09a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	021a      	lsls	r2, r3, #8
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	430a      	orrs	r2, r1
 800c0ae:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c0b0:	e002      	b.n	800c0b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	75fb      	strb	r3, [r7, #23]
      break;
 800c0b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c0c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3718      	adds	r7, #24
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop

0800c0cc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d101      	bne.n	800c0e4 <HAL_TIM_SlaveConfigSynchro+0x18>
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	e031      	b.n	800c148 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c0f4:	6839      	ldr	r1, [r7, #0]
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fd2e 	bl	800cb58 <TIM_SlaveTimer_SetConfig>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d009      	beq.n	800c116 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2201      	movs	r2, #1
 800c106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	e018      	b.n	800c148 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68da      	ldr	r2, [r3, #12]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c124:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68da      	ldr	r2, [r3, #12]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c134:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c180:	bf00      	nop
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c194:	bf00      	nop
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a6e      	ldr	r2, [pc, #440]	@ (800c36c <TIM_Base_SetConfig+0x1cc>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d02b      	beq.n	800c210 <TIM_Base_SetConfig+0x70>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4a6d      	ldr	r2, [pc, #436]	@ (800c370 <TIM_Base_SetConfig+0x1d0>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d027      	beq.n	800c210 <TIM_Base_SetConfig+0x70>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1c6:	d023      	beq.n	800c210 <TIM_Base_SetConfig+0x70>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c1ce:	d01f      	beq.n	800c210 <TIM_Base_SetConfig+0x70>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4a68      	ldr	r2, [pc, #416]	@ (800c374 <TIM_Base_SetConfig+0x1d4>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d01b      	beq.n	800c210 <TIM_Base_SetConfig+0x70>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a67      	ldr	r2, [pc, #412]	@ (800c378 <TIM_Base_SetConfig+0x1d8>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d017      	beq.n	800c210 <TIM_Base_SetConfig+0x70>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4a66      	ldr	r2, [pc, #408]	@ (800c37c <TIM_Base_SetConfig+0x1dc>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d013      	beq.n	800c210 <TIM_Base_SetConfig+0x70>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a65      	ldr	r2, [pc, #404]	@ (800c380 <TIM_Base_SetConfig+0x1e0>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d00f      	beq.n	800c210 <TIM_Base_SetConfig+0x70>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a64      	ldr	r2, [pc, #400]	@ (800c384 <TIM_Base_SetConfig+0x1e4>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d00b      	beq.n	800c210 <TIM_Base_SetConfig+0x70>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a63      	ldr	r2, [pc, #396]	@ (800c388 <TIM_Base_SetConfig+0x1e8>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d007      	beq.n	800c210 <TIM_Base_SetConfig+0x70>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a62      	ldr	r2, [pc, #392]	@ (800c38c <TIM_Base_SetConfig+0x1ec>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d003      	beq.n	800c210 <TIM_Base_SetConfig+0x70>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a61      	ldr	r2, [pc, #388]	@ (800c390 <TIM_Base_SetConfig+0x1f0>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d108      	bne.n	800c222 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	4313      	orrs	r3, r2
 800c220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a51      	ldr	r2, [pc, #324]	@ (800c36c <TIM_Base_SetConfig+0x1cc>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d043      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4a50      	ldr	r2, [pc, #320]	@ (800c370 <TIM_Base_SetConfig+0x1d0>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d03f      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c238:	d03b      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c240:	d037      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4a4b      	ldr	r2, [pc, #300]	@ (800c374 <TIM_Base_SetConfig+0x1d4>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d033      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a4a      	ldr	r2, [pc, #296]	@ (800c378 <TIM_Base_SetConfig+0x1d8>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d02f      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a49      	ldr	r2, [pc, #292]	@ (800c37c <TIM_Base_SetConfig+0x1dc>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d02b      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a48      	ldr	r2, [pc, #288]	@ (800c380 <TIM_Base_SetConfig+0x1e0>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d027      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a47      	ldr	r2, [pc, #284]	@ (800c384 <TIM_Base_SetConfig+0x1e4>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d023      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a46      	ldr	r2, [pc, #280]	@ (800c388 <TIM_Base_SetConfig+0x1e8>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d01f      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a45      	ldr	r2, [pc, #276]	@ (800c38c <TIM_Base_SetConfig+0x1ec>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d01b      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a44      	ldr	r2, [pc, #272]	@ (800c390 <TIM_Base_SetConfig+0x1f0>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d017      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a43      	ldr	r2, [pc, #268]	@ (800c394 <TIM_Base_SetConfig+0x1f4>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d013      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a42      	ldr	r2, [pc, #264]	@ (800c398 <TIM_Base_SetConfig+0x1f8>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d00f      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a41      	ldr	r2, [pc, #260]	@ (800c39c <TIM_Base_SetConfig+0x1fc>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d00b      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a40      	ldr	r2, [pc, #256]	@ (800c3a0 <TIM_Base_SetConfig+0x200>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d007      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a3f      	ldr	r2, [pc, #252]	@ (800c3a4 <TIM_Base_SetConfig+0x204>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d003      	beq.n	800c2b2 <TIM_Base_SetConfig+0x112>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a3e      	ldr	r2, [pc, #248]	@ (800c3a8 <TIM_Base_SetConfig+0x208>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d108      	bne.n	800c2c4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c2b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	695b      	ldr	r3, [r3, #20]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	689a      	ldr	r2, [r3, #8]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	4a20      	ldr	r2, [pc, #128]	@ (800c36c <TIM_Base_SetConfig+0x1cc>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d023      	beq.n	800c338 <TIM_Base_SetConfig+0x198>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a1f      	ldr	r2, [pc, #124]	@ (800c370 <TIM_Base_SetConfig+0x1d0>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d01f      	beq.n	800c338 <TIM_Base_SetConfig+0x198>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a24      	ldr	r2, [pc, #144]	@ (800c38c <TIM_Base_SetConfig+0x1ec>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d01b      	beq.n	800c338 <TIM_Base_SetConfig+0x198>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a23      	ldr	r2, [pc, #140]	@ (800c390 <TIM_Base_SetConfig+0x1f0>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d017      	beq.n	800c338 <TIM_Base_SetConfig+0x198>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a22      	ldr	r2, [pc, #136]	@ (800c394 <TIM_Base_SetConfig+0x1f4>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d013      	beq.n	800c338 <TIM_Base_SetConfig+0x198>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a21      	ldr	r2, [pc, #132]	@ (800c398 <TIM_Base_SetConfig+0x1f8>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d00f      	beq.n	800c338 <TIM_Base_SetConfig+0x198>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a20      	ldr	r2, [pc, #128]	@ (800c39c <TIM_Base_SetConfig+0x1fc>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d00b      	beq.n	800c338 <TIM_Base_SetConfig+0x198>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4a1f      	ldr	r2, [pc, #124]	@ (800c3a0 <TIM_Base_SetConfig+0x200>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d007      	beq.n	800c338 <TIM_Base_SetConfig+0x198>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4a1e      	ldr	r2, [pc, #120]	@ (800c3a4 <TIM_Base_SetConfig+0x204>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d003      	beq.n	800c338 <TIM_Base_SetConfig+0x198>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4a1d      	ldr	r2, [pc, #116]	@ (800c3a8 <TIM_Base_SetConfig+0x208>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d103      	bne.n	800c340 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	691a      	ldr	r2, [r3, #16]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	f003 0301 	and.w	r3, r3, #1
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d105      	bne.n	800c35e <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	f023 0201 	bic.w	r2, r3, #1
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	611a      	str	r2, [r3, #16]
  }
}
 800c35e:	bf00      	nop
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	40012c00 	.word	0x40012c00
 800c370:	50012c00 	.word	0x50012c00
 800c374:	40000400 	.word	0x40000400
 800c378:	50000400 	.word	0x50000400
 800c37c:	40000800 	.word	0x40000800
 800c380:	50000800 	.word	0x50000800
 800c384:	40000c00 	.word	0x40000c00
 800c388:	50000c00 	.word	0x50000c00
 800c38c:	40013400 	.word	0x40013400
 800c390:	50013400 	.word	0x50013400
 800c394:	40014000 	.word	0x40014000
 800c398:	50014000 	.word	0x50014000
 800c39c:	40014400 	.word	0x40014400
 800c3a0:	50014400 	.word	0x50014400
 800c3a4:	40014800 	.word	0x40014800
 800c3a8:	50014800 	.word	0x50014800

0800c3ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b087      	sub	sp, #28
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a1b      	ldr	r3, [r3, #32]
 800c3ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a1b      	ldr	r3, [r3, #32]
 800c3c0:	f023 0201 	bic.w	r2, r3, #1
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	699b      	ldr	r3, [r3, #24]
 800c3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c3da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f023 0303 	bic.w	r3, r3, #3
 800c3e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	f023 0302 	bic.w	r3, r3, #2
 800c3f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	4313      	orrs	r3, r2
 800c402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	4a40      	ldr	r2, [pc, #256]	@ (800c508 <TIM_OC1_SetConfig+0x15c>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d023      	beq.n	800c454 <TIM_OC1_SetConfig+0xa8>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4a3f      	ldr	r2, [pc, #252]	@ (800c50c <TIM_OC1_SetConfig+0x160>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d01f      	beq.n	800c454 <TIM_OC1_SetConfig+0xa8>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a3e      	ldr	r2, [pc, #248]	@ (800c510 <TIM_OC1_SetConfig+0x164>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d01b      	beq.n	800c454 <TIM_OC1_SetConfig+0xa8>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a3d      	ldr	r2, [pc, #244]	@ (800c514 <TIM_OC1_SetConfig+0x168>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d017      	beq.n	800c454 <TIM_OC1_SetConfig+0xa8>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a3c      	ldr	r2, [pc, #240]	@ (800c518 <TIM_OC1_SetConfig+0x16c>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d013      	beq.n	800c454 <TIM_OC1_SetConfig+0xa8>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a3b      	ldr	r2, [pc, #236]	@ (800c51c <TIM_OC1_SetConfig+0x170>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d00f      	beq.n	800c454 <TIM_OC1_SetConfig+0xa8>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a3a      	ldr	r2, [pc, #232]	@ (800c520 <TIM_OC1_SetConfig+0x174>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d00b      	beq.n	800c454 <TIM_OC1_SetConfig+0xa8>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a39      	ldr	r2, [pc, #228]	@ (800c524 <TIM_OC1_SetConfig+0x178>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d007      	beq.n	800c454 <TIM_OC1_SetConfig+0xa8>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a38      	ldr	r2, [pc, #224]	@ (800c528 <TIM_OC1_SetConfig+0x17c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d003      	beq.n	800c454 <TIM_OC1_SetConfig+0xa8>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a37      	ldr	r2, [pc, #220]	@ (800c52c <TIM_OC1_SetConfig+0x180>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d10c      	bne.n	800c46e <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f023 0308 	bic.w	r3, r3, #8
 800c45a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	697a      	ldr	r2, [r7, #20]
 800c462:	4313      	orrs	r3, r2
 800c464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	f023 0304 	bic.w	r3, r3, #4
 800c46c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a25      	ldr	r2, [pc, #148]	@ (800c508 <TIM_OC1_SetConfig+0x15c>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d023      	beq.n	800c4be <TIM_OC1_SetConfig+0x112>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a24      	ldr	r2, [pc, #144]	@ (800c50c <TIM_OC1_SetConfig+0x160>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d01f      	beq.n	800c4be <TIM_OC1_SetConfig+0x112>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a23      	ldr	r2, [pc, #140]	@ (800c510 <TIM_OC1_SetConfig+0x164>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d01b      	beq.n	800c4be <TIM_OC1_SetConfig+0x112>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a22      	ldr	r2, [pc, #136]	@ (800c514 <TIM_OC1_SetConfig+0x168>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d017      	beq.n	800c4be <TIM_OC1_SetConfig+0x112>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a21      	ldr	r2, [pc, #132]	@ (800c518 <TIM_OC1_SetConfig+0x16c>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d013      	beq.n	800c4be <TIM_OC1_SetConfig+0x112>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a20      	ldr	r2, [pc, #128]	@ (800c51c <TIM_OC1_SetConfig+0x170>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d00f      	beq.n	800c4be <TIM_OC1_SetConfig+0x112>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a1f      	ldr	r2, [pc, #124]	@ (800c520 <TIM_OC1_SetConfig+0x174>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d00b      	beq.n	800c4be <TIM_OC1_SetConfig+0x112>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a1e      	ldr	r2, [pc, #120]	@ (800c524 <TIM_OC1_SetConfig+0x178>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d007      	beq.n	800c4be <TIM_OC1_SetConfig+0x112>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c528 <TIM_OC1_SetConfig+0x17c>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d003      	beq.n	800c4be <TIM_OC1_SetConfig+0x112>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4a1c      	ldr	r2, [pc, #112]	@ (800c52c <TIM_OC1_SetConfig+0x180>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d111      	bne.n	800c4e2 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c4cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	695b      	ldr	r3, [r3, #20]
 800c4d2:	693a      	ldr	r2, [r7, #16]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	699b      	ldr	r3, [r3, #24]
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	68fa      	ldr	r2, [r7, #12]
 800c4ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	685a      	ldr	r2, [r3, #4]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	697a      	ldr	r2, [r7, #20]
 800c4fa:	621a      	str	r2, [r3, #32]
}
 800c4fc:	bf00      	nop
 800c4fe:	371c      	adds	r7, #28
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr
 800c508:	40012c00 	.word	0x40012c00
 800c50c:	50012c00 	.word	0x50012c00
 800c510:	40013400 	.word	0x40013400
 800c514:	50013400 	.word	0x50013400
 800c518:	40014000 	.word	0x40014000
 800c51c:	50014000 	.word	0x50014000
 800c520:	40014400 	.word	0x40014400
 800c524:	50014400 	.word	0x50014400
 800c528:	40014800 	.word	0x40014800
 800c52c:	50014800 	.word	0x50014800

0800c530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6a1b      	ldr	r3, [r3, #32]
 800c544:	f023 0210 	bic.w	r2, r3, #16
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c55e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	021b      	lsls	r3, r3, #8
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	4313      	orrs	r3, r2
 800c576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	f023 0320 	bic.w	r3, r3, #32
 800c57e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	011b      	lsls	r3, r3, #4
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	4313      	orrs	r3, r2
 800c58a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a36      	ldr	r2, [pc, #216]	@ (800c668 <TIM_OC2_SetConfig+0x138>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d00b      	beq.n	800c5ac <TIM_OC2_SetConfig+0x7c>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a35      	ldr	r2, [pc, #212]	@ (800c66c <TIM_OC2_SetConfig+0x13c>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d007      	beq.n	800c5ac <TIM_OC2_SetConfig+0x7c>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4a34      	ldr	r2, [pc, #208]	@ (800c670 <TIM_OC2_SetConfig+0x140>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d003      	beq.n	800c5ac <TIM_OC2_SetConfig+0x7c>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a33      	ldr	r2, [pc, #204]	@ (800c674 <TIM_OC2_SetConfig+0x144>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d10d      	bne.n	800c5c8 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	011b      	lsls	r3, r3, #4
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a27      	ldr	r2, [pc, #156]	@ (800c668 <TIM_OC2_SetConfig+0x138>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d023      	beq.n	800c618 <TIM_OC2_SetConfig+0xe8>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a26      	ldr	r2, [pc, #152]	@ (800c66c <TIM_OC2_SetConfig+0x13c>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d01f      	beq.n	800c618 <TIM_OC2_SetConfig+0xe8>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4a25      	ldr	r2, [pc, #148]	@ (800c670 <TIM_OC2_SetConfig+0x140>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d01b      	beq.n	800c618 <TIM_OC2_SetConfig+0xe8>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a24      	ldr	r2, [pc, #144]	@ (800c674 <TIM_OC2_SetConfig+0x144>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d017      	beq.n	800c618 <TIM_OC2_SetConfig+0xe8>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a23      	ldr	r2, [pc, #140]	@ (800c678 <TIM_OC2_SetConfig+0x148>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d013      	beq.n	800c618 <TIM_OC2_SetConfig+0xe8>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a22      	ldr	r2, [pc, #136]	@ (800c67c <TIM_OC2_SetConfig+0x14c>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d00f      	beq.n	800c618 <TIM_OC2_SetConfig+0xe8>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4a21      	ldr	r2, [pc, #132]	@ (800c680 <TIM_OC2_SetConfig+0x150>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d00b      	beq.n	800c618 <TIM_OC2_SetConfig+0xe8>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a20      	ldr	r2, [pc, #128]	@ (800c684 <TIM_OC2_SetConfig+0x154>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d007      	beq.n	800c618 <TIM_OC2_SetConfig+0xe8>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4a1f      	ldr	r2, [pc, #124]	@ (800c688 <TIM_OC2_SetConfig+0x158>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d003      	beq.n	800c618 <TIM_OC2_SetConfig+0xe8>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4a1e      	ldr	r2, [pc, #120]	@ (800c68c <TIM_OC2_SetConfig+0x15c>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d113      	bne.n	800c640 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c61e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	695b      	ldr	r3, [r3, #20]
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	693a      	ldr	r2, [r7, #16]
 800c630:	4313      	orrs	r3, r2
 800c632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	693a      	ldr	r2, [r7, #16]
 800c63c:	4313      	orrs	r3, r2
 800c63e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	693a      	ldr	r2, [r7, #16]
 800c644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	685a      	ldr	r2, [r3, #4]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	697a      	ldr	r2, [r7, #20]
 800c658:	621a      	str	r2, [r3, #32]
}
 800c65a:	bf00      	nop
 800c65c:	371c      	adds	r7, #28
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
 800c666:	bf00      	nop
 800c668:	40012c00 	.word	0x40012c00
 800c66c:	50012c00 	.word	0x50012c00
 800c670:	40013400 	.word	0x40013400
 800c674:	50013400 	.word	0x50013400
 800c678:	40014000 	.word	0x40014000
 800c67c:	50014000 	.word	0x50014000
 800c680:	40014400 	.word	0x40014400
 800c684:	50014400 	.word	0x50014400
 800c688:	40014800 	.word	0x40014800
 800c68c:	50014800 	.word	0x50014800

0800c690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c690:	b480      	push	{r7}
 800c692:	b087      	sub	sp, #28
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6a1b      	ldr	r3, [r3, #32]
 800c69e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6a1b      	ldr	r3, [r3, #32]
 800c6a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	69db      	ldr	r3, [r3, #28]
 800c6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c6be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f023 0303 	bic.w	r3, r3, #3
 800c6ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c6dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	021b      	lsls	r3, r3, #8
 800c6e4:	697a      	ldr	r2, [r7, #20]
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4a35      	ldr	r2, [pc, #212]	@ (800c7c4 <TIM_OC3_SetConfig+0x134>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d00b      	beq.n	800c70a <TIM_OC3_SetConfig+0x7a>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4a34      	ldr	r2, [pc, #208]	@ (800c7c8 <TIM_OC3_SetConfig+0x138>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d007      	beq.n	800c70a <TIM_OC3_SetConfig+0x7a>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4a33      	ldr	r2, [pc, #204]	@ (800c7cc <TIM_OC3_SetConfig+0x13c>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d003      	beq.n	800c70a <TIM_OC3_SetConfig+0x7a>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4a32      	ldr	r2, [pc, #200]	@ (800c7d0 <TIM_OC3_SetConfig+0x140>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d10d      	bne.n	800c726 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	021b      	lsls	r3, r3, #8
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	4313      	orrs	r3, r2
 800c71c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4a26      	ldr	r2, [pc, #152]	@ (800c7c4 <TIM_OC3_SetConfig+0x134>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d023      	beq.n	800c776 <TIM_OC3_SetConfig+0xe6>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a25      	ldr	r2, [pc, #148]	@ (800c7c8 <TIM_OC3_SetConfig+0x138>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d01f      	beq.n	800c776 <TIM_OC3_SetConfig+0xe6>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4a24      	ldr	r2, [pc, #144]	@ (800c7cc <TIM_OC3_SetConfig+0x13c>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d01b      	beq.n	800c776 <TIM_OC3_SetConfig+0xe6>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4a23      	ldr	r2, [pc, #140]	@ (800c7d0 <TIM_OC3_SetConfig+0x140>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d017      	beq.n	800c776 <TIM_OC3_SetConfig+0xe6>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a22      	ldr	r2, [pc, #136]	@ (800c7d4 <TIM_OC3_SetConfig+0x144>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d013      	beq.n	800c776 <TIM_OC3_SetConfig+0xe6>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4a21      	ldr	r2, [pc, #132]	@ (800c7d8 <TIM_OC3_SetConfig+0x148>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d00f      	beq.n	800c776 <TIM_OC3_SetConfig+0xe6>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4a20      	ldr	r2, [pc, #128]	@ (800c7dc <TIM_OC3_SetConfig+0x14c>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d00b      	beq.n	800c776 <TIM_OC3_SetConfig+0xe6>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4a1f      	ldr	r2, [pc, #124]	@ (800c7e0 <TIM_OC3_SetConfig+0x150>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d007      	beq.n	800c776 <TIM_OC3_SetConfig+0xe6>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	4a1e      	ldr	r2, [pc, #120]	@ (800c7e4 <TIM_OC3_SetConfig+0x154>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d003      	beq.n	800c776 <TIM_OC3_SetConfig+0xe6>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4a1d      	ldr	r2, [pc, #116]	@ (800c7e8 <TIM_OC3_SetConfig+0x158>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d113      	bne.n	800c79e <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c77c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	011b      	lsls	r3, r3, #4
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	4313      	orrs	r3, r2
 800c790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	011b      	lsls	r3, r3, #4
 800c798:	693a      	ldr	r2, [r7, #16]
 800c79a:	4313      	orrs	r3, r2
 800c79c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	685a      	ldr	r2, [r3, #4]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	697a      	ldr	r2, [r7, #20]
 800c7b6:	621a      	str	r2, [r3, #32]
}
 800c7b8:	bf00      	nop
 800c7ba:	371c      	adds	r7, #28
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	40012c00 	.word	0x40012c00
 800c7c8:	50012c00 	.word	0x50012c00
 800c7cc:	40013400 	.word	0x40013400
 800c7d0:	50013400 	.word	0x50013400
 800c7d4:	40014000 	.word	0x40014000
 800c7d8:	50014000 	.word	0x50014000
 800c7dc:	40014400 	.word	0x40014400
 800c7e0:	50014400 	.word	0x50014400
 800c7e4:	40014800 	.word	0x40014800
 800c7e8:	50014800 	.word	0x50014800

0800c7ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b087      	sub	sp, #28
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6a1b      	ldr	r3, [r3, #32]
 800c7fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a1b      	ldr	r3, [r3, #32]
 800c800:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	69db      	ldr	r3, [r3, #28]
 800c812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c81a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c81e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	021b      	lsls	r3, r3, #8
 800c82e:	68fa      	ldr	r2, [r7, #12]
 800c830:	4313      	orrs	r3, r2
 800c832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c83a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	031b      	lsls	r3, r3, #12
 800c842:	697a      	ldr	r2, [r7, #20]
 800c844:	4313      	orrs	r3, r2
 800c846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a36      	ldr	r2, [pc, #216]	@ (800c924 <TIM_OC4_SetConfig+0x138>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d00b      	beq.n	800c868 <TIM_OC4_SetConfig+0x7c>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4a35      	ldr	r2, [pc, #212]	@ (800c928 <TIM_OC4_SetConfig+0x13c>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d007      	beq.n	800c868 <TIM_OC4_SetConfig+0x7c>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4a34      	ldr	r2, [pc, #208]	@ (800c92c <TIM_OC4_SetConfig+0x140>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d003      	beq.n	800c868 <TIM_OC4_SetConfig+0x7c>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4a33      	ldr	r2, [pc, #204]	@ (800c930 <TIM_OC4_SetConfig+0x144>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d10d      	bne.n	800c884 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c86e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	031b      	lsls	r3, r3, #12
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	4313      	orrs	r3, r2
 800c87a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c882:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4a27      	ldr	r2, [pc, #156]	@ (800c924 <TIM_OC4_SetConfig+0x138>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d023      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xe8>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4a26      	ldr	r2, [pc, #152]	@ (800c928 <TIM_OC4_SetConfig+0x13c>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d01f      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xe8>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4a25      	ldr	r2, [pc, #148]	@ (800c92c <TIM_OC4_SetConfig+0x140>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d01b      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xe8>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	4a24      	ldr	r2, [pc, #144]	@ (800c930 <TIM_OC4_SetConfig+0x144>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d017      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xe8>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a23      	ldr	r2, [pc, #140]	@ (800c934 <TIM_OC4_SetConfig+0x148>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d013      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xe8>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4a22      	ldr	r2, [pc, #136]	@ (800c938 <TIM_OC4_SetConfig+0x14c>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d00f      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xe8>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a21      	ldr	r2, [pc, #132]	@ (800c93c <TIM_OC4_SetConfig+0x150>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d00b      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xe8>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a20      	ldr	r2, [pc, #128]	@ (800c940 <TIM_OC4_SetConfig+0x154>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d007      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xe8>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a1f      	ldr	r2, [pc, #124]	@ (800c944 <TIM_OC4_SetConfig+0x158>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d003      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xe8>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a1e      	ldr	r2, [pc, #120]	@ (800c948 <TIM_OC4_SetConfig+0x15c>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d113      	bne.n	800c8fc <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c8da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c8e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	695b      	ldr	r3, [r3, #20]
 800c8e8:	019b      	lsls	r3, r3, #6
 800c8ea:	693a      	ldr	r2, [r7, #16]
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	699b      	ldr	r3, [r3, #24]
 800c8f4:	019b      	lsls	r3, r3, #6
 800c8f6:	693a      	ldr	r2, [r7, #16]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	693a      	ldr	r2, [r7, #16]
 800c900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	621a      	str	r2, [r3, #32]
}
 800c916:	bf00      	nop
 800c918:	371c      	adds	r7, #28
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	40012c00 	.word	0x40012c00
 800c928:	50012c00 	.word	0x50012c00
 800c92c:	40013400 	.word	0x40013400
 800c930:	50013400 	.word	0x50013400
 800c934:	40014000 	.word	0x40014000
 800c938:	50014000 	.word	0x50014000
 800c93c:	40014400 	.word	0x40014400
 800c940:	50014400 	.word	0x50014400
 800c944:	40014800 	.word	0x40014800
 800c948:	50014800 	.word	0x50014800

0800c94c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b087      	sub	sp, #28
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c97a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c97e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	4313      	orrs	r3, r2
 800c988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c990:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	041b      	lsls	r3, r3, #16
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4a21      	ldr	r2, [pc, #132]	@ (800ca28 <TIM_OC5_SetConfig+0xdc>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d023      	beq.n	800c9ee <TIM_OC5_SetConfig+0xa2>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a20      	ldr	r2, [pc, #128]	@ (800ca2c <TIM_OC5_SetConfig+0xe0>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d01f      	beq.n	800c9ee <TIM_OC5_SetConfig+0xa2>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4a1f      	ldr	r2, [pc, #124]	@ (800ca30 <TIM_OC5_SetConfig+0xe4>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d01b      	beq.n	800c9ee <TIM_OC5_SetConfig+0xa2>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a1e      	ldr	r2, [pc, #120]	@ (800ca34 <TIM_OC5_SetConfig+0xe8>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d017      	beq.n	800c9ee <TIM_OC5_SetConfig+0xa2>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4a1d      	ldr	r2, [pc, #116]	@ (800ca38 <TIM_OC5_SetConfig+0xec>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d013      	beq.n	800c9ee <TIM_OC5_SetConfig+0xa2>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	4a1c      	ldr	r2, [pc, #112]	@ (800ca3c <TIM_OC5_SetConfig+0xf0>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d00f      	beq.n	800c9ee <TIM_OC5_SetConfig+0xa2>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	4a1b      	ldr	r2, [pc, #108]	@ (800ca40 <TIM_OC5_SetConfig+0xf4>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d00b      	beq.n	800c9ee <TIM_OC5_SetConfig+0xa2>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4a1a      	ldr	r2, [pc, #104]	@ (800ca44 <TIM_OC5_SetConfig+0xf8>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d007      	beq.n	800c9ee <TIM_OC5_SetConfig+0xa2>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a19      	ldr	r2, [pc, #100]	@ (800ca48 <TIM_OC5_SetConfig+0xfc>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d003      	beq.n	800c9ee <TIM_OC5_SetConfig+0xa2>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4a18      	ldr	r2, [pc, #96]	@ (800ca4c <TIM_OC5_SetConfig+0x100>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d109      	bne.n	800ca02 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	695b      	ldr	r3, [r3, #20]
 800c9fa:	021b      	lsls	r3, r3, #8
 800c9fc:	697a      	ldr	r2, [r7, #20]
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	697a      	ldr	r2, [r7, #20]
 800ca06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	685a      	ldr	r2, [r3, #4]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	621a      	str	r2, [r3, #32]
}
 800ca1c:	bf00      	nop
 800ca1e:	371c      	adds	r7, #28
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	40012c00 	.word	0x40012c00
 800ca2c:	50012c00 	.word	0x50012c00
 800ca30:	40013400 	.word	0x40013400
 800ca34:	50013400 	.word	0x50013400
 800ca38:	40014000 	.word	0x40014000
 800ca3c:	50014000 	.word	0x50014000
 800ca40:	40014400 	.word	0x40014400
 800ca44:	50014400 	.word	0x50014400
 800ca48:	40014800 	.word	0x40014800
 800ca4c:	50014800 	.word	0x50014800

0800ca50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b087      	sub	sp, #28
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a1b      	ldr	r3, [r3, #32]
 800ca5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a1b      	ldr	r3, [r3, #32]
 800ca64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ca7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	021b      	lsls	r3, r3, #8
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ca96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	051b      	lsls	r3, r3, #20
 800ca9e:	693a      	ldr	r2, [r7, #16]
 800caa0:	4313      	orrs	r3, r2
 800caa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a22      	ldr	r2, [pc, #136]	@ (800cb30 <TIM_OC6_SetConfig+0xe0>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d023      	beq.n	800caf4 <TIM_OC6_SetConfig+0xa4>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4a21      	ldr	r2, [pc, #132]	@ (800cb34 <TIM_OC6_SetConfig+0xe4>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d01f      	beq.n	800caf4 <TIM_OC6_SetConfig+0xa4>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	4a20      	ldr	r2, [pc, #128]	@ (800cb38 <TIM_OC6_SetConfig+0xe8>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d01b      	beq.n	800caf4 <TIM_OC6_SetConfig+0xa4>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a1f      	ldr	r2, [pc, #124]	@ (800cb3c <TIM_OC6_SetConfig+0xec>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d017      	beq.n	800caf4 <TIM_OC6_SetConfig+0xa4>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4a1e      	ldr	r2, [pc, #120]	@ (800cb40 <TIM_OC6_SetConfig+0xf0>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d013      	beq.n	800caf4 <TIM_OC6_SetConfig+0xa4>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a1d      	ldr	r2, [pc, #116]	@ (800cb44 <TIM_OC6_SetConfig+0xf4>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d00f      	beq.n	800caf4 <TIM_OC6_SetConfig+0xa4>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a1c      	ldr	r2, [pc, #112]	@ (800cb48 <TIM_OC6_SetConfig+0xf8>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d00b      	beq.n	800caf4 <TIM_OC6_SetConfig+0xa4>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a1b      	ldr	r2, [pc, #108]	@ (800cb4c <TIM_OC6_SetConfig+0xfc>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d007      	beq.n	800caf4 <TIM_OC6_SetConfig+0xa4>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a1a      	ldr	r2, [pc, #104]	@ (800cb50 <TIM_OC6_SetConfig+0x100>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d003      	beq.n	800caf4 <TIM_OC6_SetConfig+0xa4>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4a19      	ldr	r2, [pc, #100]	@ (800cb54 <TIM_OC6_SetConfig+0x104>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d109      	bne.n	800cb08 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cafa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	695b      	ldr	r3, [r3, #20]
 800cb00:	029b      	lsls	r3, r3, #10
 800cb02:	697a      	ldr	r2, [r7, #20]
 800cb04:	4313      	orrs	r3, r2
 800cb06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	697a      	ldr	r2, [r7, #20]
 800cb0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	693a      	ldr	r2, [r7, #16]
 800cb20:	621a      	str	r2, [r3, #32]
}
 800cb22:	bf00      	nop
 800cb24:	371c      	adds	r7, #28
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	40012c00 	.word	0x40012c00
 800cb34:	50012c00 	.word	0x50012c00
 800cb38:	40013400 	.word	0x40013400
 800cb3c:	50013400 	.word	0x50013400
 800cb40:	40014000 	.word	0x40014000
 800cb44:	50014000 	.word	0x50014000
 800cb48:	40014400 	.word	0x40014400
 800cb4c:	50014400 	.word	0x50014400
 800cb50:	40014800 	.word	0x40014800
 800cb54:	50014800 	.word	0x50014800

0800cb58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800cb74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb78:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	693a      	ldr	r2, [r7, #16]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb8a:	f023 0307 	bic.w	r3, r3, #7
 800cb8e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	693a      	ldr	r2, [r7, #16]
 800cba0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	4a4e      	ldr	r2, [pc, #312]	@ (800cce0 <TIM_SlaveTimer_SetConfig+0x188>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	f000 8092 	beq.w	800ccd2 <TIM_SlaveTimer_SetConfig+0x17a>
 800cbae:	4a4c      	ldr	r2, [pc, #304]	@ (800cce0 <TIM_SlaveTimer_SetConfig+0x188>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	f200 808b 	bhi.w	800cccc <TIM_SlaveTimer_SetConfig+0x174>
 800cbb6:	4a4b      	ldr	r2, [pc, #300]	@ (800cce4 <TIM_SlaveTimer_SetConfig+0x18c>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	f000 808a 	beq.w	800ccd2 <TIM_SlaveTimer_SetConfig+0x17a>
 800cbbe:	4a49      	ldr	r2, [pc, #292]	@ (800cce4 <TIM_SlaveTimer_SetConfig+0x18c>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	f200 8083 	bhi.w	800cccc <TIM_SlaveTimer_SetConfig+0x174>
 800cbc6:	4a48      	ldr	r2, [pc, #288]	@ (800cce8 <TIM_SlaveTimer_SetConfig+0x190>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	f000 8082 	beq.w	800ccd2 <TIM_SlaveTimer_SetConfig+0x17a>
 800cbce:	4a46      	ldr	r2, [pc, #280]	@ (800cce8 <TIM_SlaveTimer_SetConfig+0x190>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d87b      	bhi.n	800cccc <TIM_SlaveTimer_SetConfig+0x174>
 800cbd4:	4a45      	ldr	r2, [pc, #276]	@ (800ccec <TIM_SlaveTimer_SetConfig+0x194>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d07b      	beq.n	800ccd2 <TIM_SlaveTimer_SetConfig+0x17a>
 800cbda:	4a44      	ldr	r2, [pc, #272]	@ (800ccec <TIM_SlaveTimer_SetConfig+0x194>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d875      	bhi.n	800cccc <TIM_SlaveTimer_SetConfig+0x174>
 800cbe0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cbe4:	d075      	beq.n	800ccd2 <TIM_SlaveTimer_SetConfig+0x17a>
 800cbe6:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cbea:	d86f      	bhi.n	800cccc <TIM_SlaveTimer_SetConfig+0x174>
 800cbec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbf0:	d06f      	beq.n	800ccd2 <TIM_SlaveTimer_SetConfig+0x17a>
 800cbf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbf6:	d869      	bhi.n	800cccc <TIM_SlaveTimer_SetConfig+0x174>
 800cbf8:	2b70      	cmp	r3, #112	@ 0x70
 800cbfa:	d01a      	beq.n	800cc32 <TIM_SlaveTimer_SetConfig+0xda>
 800cbfc:	2b70      	cmp	r3, #112	@ 0x70
 800cbfe:	d865      	bhi.n	800cccc <TIM_SlaveTimer_SetConfig+0x174>
 800cc00:	2b60      	cmp	r3, #96	@ 0x60
 800cc02:	d059      	beq.n	800ccb8 <TIM_SlaveTimer_SetConfig+0x160>
 800cc04:	2b60      	cmp	r3, #96	@ 0x60
 800cc06:	d861      	bhi.n	800cccc <TIM_SlaveTimer_SetConfig+0x174>
 800cc08:	2b50      	cmp	r3, #80	@ 0x50
 800cc0a:	d04b      	beq.n	800cca4 <TIM_SlaveTimer_SetConfig+0x14c>
 800cc0c:	2b50      	cmp	r3, #80	@ 0x50
 800cc0e:	d85d      	bhi.n	800cccc <TIM_SlaveTimer_SetConfig+0x174>
 800cc10:	2b40      	cmp	r3, #64	@ 0x40
 800cc12:	d019      	beq.n	800cc48 <TIM_SlaveTimer_SetConfig+0xf0>
 800cc14:	2b40      	cmp	r3, #64	@ 0x40
 800cc16:	d859      	bhi.n	800cccc <TIM_SlaveTimer_SetConfig+0x174>
 800cc18:	2b30      	cmp	r3, #48	@ 0x30
 800cc1a:	d05a      	beq.n	800ccd2 <TIM_SlaveTimer_SetConfig+0x17a>
 800cc1c:	2b30      	cmp	r3, #48	@ 0x30
 800cc1e:	d855      	bhi.n	800cccc <TIM_SlaveTimer_SetConfig+0x174>
 800cc20:	2b20      	cmp	r3, #32
 800cc22:	d056      	beq.n	800ccd2 <TIM_SlaveTimer_SetConfig+0x17a>
 800cc24:	2b20      	cmp	r3, #32
 800cc26:	d851      	bhi.n	800cccc <TIM_SlaveTimer_SetConfig+0x174>
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d052      	beq.n	800ccd2 <TIM_SlaveTimer_SetConfig+0x17a>
 800cc2c:	2b10      	cmp	r3, #16
 800cc2e:	d050      	beq.n	800ccd2 <TIM_SlaveTimer_SetConfig+0x17a>
 800cc30:	e04c      	b.n	800cccc <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800cc42:	f000 f8b4 	bl	800cdae <TIM_ETR_SetConfig>
      break;
 800cc46:	e045      	b.n	800ccd4 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2b05      	cmp	r3, #5
 800cc4e:	d004      	beq.n	800cc5a <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800cc54:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800cc58:	d101      	bne.n	800cc5e <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e03b      	b.n	800ccd6 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	6a1b      	ldr	r3, [r3, #32]
 800cc64:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6a1a      	ldr	r2, [r3, #32]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f022 0201 	bic.w	r2, r2, #1
 800cc74:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cc84:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	011b      	lsls	r3, r3, #4
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	621a      	str	r2, [r3, #32]
      break;
 800cca2:	e017      	b.n	800ccd4 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	f000 f81d 	bl	800ccf0 <TIM_TI1_ConfigInputStage>
      break;
 800ccb6:	e00d      	b.n	800ccd4 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	f000 f842 	bl	800cd4e <TIM_TI2_ConfigInputStage>
      break;
 800ccca:	e003      	b.n	800ccd4 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	75fb      	strb	r3, [r7, #23]
      break;
 800ccd0:	e000      	b.n	800ccd4 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 800ccd2:	bf00      	nop
  }

  return status;
 800ccd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3718      	adds	r7, #24
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	00100070 	.word	0x00100070
 800cce4:	00100040 	.word	0x00100040
 800cce8:	00100030 	.word	0x00100030
 800ccec:	00100020 	.word	0x00100020

0800ccf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b087      	sub	sp, #28
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6a1b      	ldr	r3, [r3, #32]
 800cd00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6a1b      	ldr	r3, [r3, #32]
 800cd06:	f023 0201 	bic.w	r2, r3, #1
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	699b      	ldr	r3, [r3, #24]
 800cd12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cd1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	011b      	lsls	r3, r3, #4
 800cd20:	693a      	ldr	r2, [r7, #16]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	f023 030a 	bic.w	r3, r3, #10
 800cd2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	693a      	ldr	r2, [r7, #16]
 800cd3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	697a      	ldr	r2, [r7, #20]
 800cd40:	621a      	str	r2, [r3, #32]
}
 800cd42:	bf00      	nop
 800cd44:	371c      	adds	r7, #28
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd4e:	b480      	push	{r7}
 800cd50:	b087      	sub	sp, #28
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	60f8      	str	r0, [r7, #12]
 800cd56:	60b9      	str	r1, [r7, #8]
 800cd58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6a1b      	ldr	r3, [r3, #32]
 800cd5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6a1b      	ldr	r3, [r3, #32]
 800cd64:	f023 0210 	bic.w	r2, r3, #16
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	699b      	ldr	r3, [r3, #24]
 800cd70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cd78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	031b      	lsls	r3, r3, #12
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cd8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	011b      	lsls	r3, r3, #4
 800cd90:	697a      	ldr	r2, [r7, #20]
 800cd92:	4313      	orrs	r3, r2
 800cd94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	697a      	ldr	r2, [r7, #20]
 800cda0:	621a      	str	r2, [r3, #32]
}
 800cda2:	bf00      	nop
 800cda4:	371c      	adds	r7, #28
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b087      	sub	sp, #28
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	60f8      	str	r0, [r7, #12]
 800cdb6:	60b9      	str	r1, [r7, #8]
 800cdb8:	607a      	str	r2, [r7, #4]
 800cdba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cdc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	021a      	lsls	r2, r3, #8
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	431a      	orrs	r2, r3
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	697a      	ldr	r2, [r7, #20]
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	697a      	ldr	r2, [r7, #20]
 800cde0:	609a      	str	r2, [r3, #8]
}
 800cde2:	bf00      	nop
 800cde4:	371c      	adds	r7, #28
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr

0800cdee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cdee:	b480      	push	{r7}
 800cdf0:	b087      	sub	sp, #28
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	60f8      	str	r0, [r7, #12]
 800cdf6:	60b9      	str	r1, [r7, #8]
 800cdf8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	f003 031f 	and.w	r3, r3, #31
 800ce00:	2201      	movs	r2, #1
 800ce02:	fa02 f303 	lsl.w	r3, r2, r3
 800ce06:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6a1a      	ldr	r2, [r3, #32]
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	43db      	mvns	r3, r3
 800ce10:	401a      	ands	r2, r3
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6a1a      	ldr	r2, [r3, #32]
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	f003 031f 	and.w	r3, r3, #31
 800ce20:	6879      	ldr	r1, [r7, #4]
 800ce22:	fa01 f303 	lsl.w	r3, r1, r3
 800ce26:	431a      	orrs	r2, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	621a      	str	r2, [r3, #32]
}
 800ce2c:	bf00      	nop
 800ce2e:	371c      	adds	r7, #28
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d101      	bne.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	e097      	b.n	800cf80 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2202      	movs	r2, #2
 800ce5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a45      	ldr	r2, [pc, #276]	@ (800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d00e      	beq.n	800ce98 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a44      	ldr	r2, [pc, #272]	@ (800cf90 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d009      	beq.n	800ce98 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a42      	ldr	r2, [pc, #264]	@ (800cf94 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d004      	beq.n	800ce98 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a41      	ldr	r2, [pc, #260]	@ (800cf98 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d108      	bne.n	800ceaa <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ce9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	4313      	orrs	r3, r2
 800cea8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ceb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ceb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	68fa      	ldr	r2, [r7, #12]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4a2f      	ldr	r2, [pc, #188]	@ (800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d040      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a2e      	ldr	r2, [pc, #184]	@ (800cf90 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d03b      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cee4:	d036      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ceee:	d031      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4a29      	ldr	r2, [pc, #164]	@ (800cf9c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d02c      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a28      	ldr	r2, [pc, #160]	@ (800cfa0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d027      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a26      	ldr	r2, [pc, #152]	@ (800cfa4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d022      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a25      	ldr	r2, [pc, #148]	@ (800cfa8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d01d      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a23      	ldr	r2, [pc, #140]	@ (800cfac <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d018      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4a22      	ldr	r2, [pc, #136]	@ (800cfb0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d013      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a18      	ldr	r2, [pc, #96]	@ (800cf94 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d00e      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a17      	ldr	r2, [pc, #92]	@ (800cf98 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d009      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a1b      	ldr	r2, [pc, #108]	@ (800cfb4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d004      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a1a      	ldr	r2, [pc, #104]	@ (800cfb8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d10c      	bne.n	800cf6e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	40012c00 	.word	0x40012c00
 800cf90:	50012c00 	.word	0x50012c00
 800cf94:	40013400 	.word	0x40013400
 800cf98:	50013400 	.word	0x50013400
 800cf9c:	40000400 	.word	0x40000400
 800cfa0:	50000400 	.word	0x50000400
 800cfa4:	40000800 	.word	0x40000800
 800cfa8:	50000800 	.word	0x50000800
 800cfac:	40000c00 	.word	0x40000c00
 800cfb0:	50000c00 	.word	0x50000c00
 800cfb4:	40014000 	.word	0x40014000
 800cfb8:	50014000 	.word	0x50014000

0800cfbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d101      	bne.n	800cfd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cfd4:	2302      	movs	r3, #2
 800cfd6:	e0c3      	b.n	800d160 <HAL_TIMEx_ConfigBreakDeadTime+0x1a4>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	4313      	orrs	r3, r2
 800cfec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	4313      	orrs	r3, r2
 800d008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4313      	orrs	r3, r2
 800d016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	4313      	orrs	r3, r2
 800d024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	4313      	orrs	r3, r2
 800d032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d03e:	4313      	orrs	r3, r2
 800d040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	699b      	ldr	r3, [r3, #24]
 800d04c:	041b      	lsls	r3, r3, #16
 800d04e:	4313      	orrs	r3, r2
 800d050:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(htim->Instance))
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a45      	ldr	r2, [pc, #276]	@ (800d16c <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d02c      	beq.n	800d0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a43      	ldr	r2, [pc, #268]	@ (800d170 <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d027      	beq.n	800d0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a42      	ldr	r2, [pc, #264]	@ (800d174 <HAL_TIMEx_ConfigBreakDeadTime+0x1b8>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d022      	beq.n	800d0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a40      	ldr	r2, [pc, #256]	@ (800d178 <HAL_TIMEx_ConfigBreakDeadTime+0x1bc>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d01d      	beq.n	800d0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a3f      	ldr	r2, [pc, #252]	@ (800d17c <HAL_TIMEx_ConfigBreakDeadTime+0x1c0>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d018      	beq.n	800d0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a3d      	ldr	r2, [pc, #244]	@ (800d180 <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d013      	beq.n	800d0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a3c      	ldr	r2, [pc, #240]	@ (800d184 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d00e      	beq.n	800d0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a3a      	ldr	r2, [pc, #232]	@ (800d188 <HAL_TIMEx_ConfigBreakDeadTime+0x1cc>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d009      	beq.n	800d0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4a39      	ldr	r2, [pc, #228]	@ (800d18c <HAL_TIMEx_ConfigBreakDeadTime+0x1d0>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d004      	beq.n	800d0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a37      	ldr	r2, [pc, #220]	@ (800d190 <HAL_TIMEx_ConfigBreakDeadTime+0x1d4>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d106      	bne.n	800d0c4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	69db      	ldr	r3, [r3, #28]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a28      	ldr	r2, [pc, #160]	@ (800d16c <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d00e      	beq.n	800d0ec <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a27      	ldr	r2, [pc, #156]	@ (800d170 <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d009      	beq.n	800d0ec <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a25      	ldr	r2, [pc, #148]	@ (800d174 <HAL_TIMEx_ConfigBreakDeadTime+0x1b8>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d004      	beq.n	800d0ec <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4a24      	ldr	r2, [pc, #144]	@ (800d178 <HAL_TIMEx_ConfigBreakDeadTime+0x1bc>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d130      	bne.n	800d14e <HAL_TIMEx_ConfigBreakDeadTime+0x192>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0f6:	051b      	lsls	r3, r3, #20
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	4313      	orrs	r3, r2
 800d108:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d114:	4313      	orrs	r3, r2
 800d116:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a13      	ldr	r2, [pc, #76]	@ (800d16c <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d00e      	beq.n	800d140 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a12      	ldr	r2, [pc, #72]	@ (800d170 <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d009      	beq.n	800d140 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a10      	ldr	r2, [pc, #64]	@ (800d174 <HAL_TIMEx_ConfigBreakDeadTime+0x1b8>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d004      	beq.n	800d140 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4a0f      	ldr	r2, [pc, #60]	@ (800d178 <HAL_TIMEx_ConfigBreakDeadTime+0x1bc>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d106      	bne.n	800d14e <HAL_TIMEx_ConfigBreakDeadTime+0x192>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d14a:	4313      	orrs	r3, r2
 800d14c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3714      	adds	r7, #20
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr
 800d16c:	40012c00 	.word	0x40012c00
 800d170:	50012c00 	.word	0x50012c00
 800d174:	40013400 	.word	0x40013400
 800d178:	50013400 	.word	0x50013400
 800d17c:	40014000 	.word	0x40014000
 800d180:	50014000 	.word	0x50014000
 800d184:	40014400 	.word	0x40014400
 800d188:	50014400 	.word	0x50014400
 800d18c:	40014800 	.word	0x40014800
 800d190:	50014800 	.word	0x50014800

0800d194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d19c:	bf00      	nop
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d1b0:	bf00      	nop
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d1d8:	bf00      	nop
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d1ec:	bf00      	nop
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d200:	bf00      	nop
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d101      	bne.n	800d232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	e042      	b.n	800d2b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d106      	bne.n	800d24a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7f6 fdc5 	bl	8003dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2224      	movs	r2, #36	@ 0x24
 800d24e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f022 0201 	bic.w	r2, r2, #1
 800d260:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d266:	2b00      	cmp	r3, #0
 800d268:	d002      	beq.n	800d270 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fdca 	bl	800de04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 fc19 	bl	800daa8 <UART_SetConfig>
 800d276:	4603      	mov	r3, r0
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d101      	bne.n	800d280 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	e01b      	b.n	800d2b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	685a      	ldr	r2, [r3, #4]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d28e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	689a      	ldr	r2, [r3, #8]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d29e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f042 0201 	orr.w	r2, r2, #1
 800d2ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 fe49 	bl	800df48 <UART_CheckIdleState>
 800d2b6:	4603      	mov	r3, r0
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3708      	adds	r7, #8
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b08c      	sub	sp, #48	@ 0x30
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800d2ce:	88fb      	ldrh	r3, [r7, #6]
 800d2d0:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2d8:	2b20      	cmp	r3, #32
 800d2da:	f040 80ad 	bne.w	800d438 <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d002      	beq.n	800d2ea <HAL_UART_Transmit_DMA+0x2a>
 800d2e4:	88fb      	ldrh	r3, [r7, #6]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d101      	bne.n	800d2ee <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e0a5      	b.n	800d43a <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	68ba      	ldr	r2, [r7, #8]
 800d2f2:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	88fa      	ldrh	r2, [r7, #6]
 800d2f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	88fa      	ldrh	r2, [r7, #6]
 800d300:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2200      	movs	r2, #0
 800d308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2221      	movs	r2, #33	@ 0x21
 800d310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d06d      	beq.n	800d3f8 <HAL_UART_Transmit_DMA+0x138>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d320:	4a48      	ldr	r2, [pc, #288]	@ (800d444 <HAL_UART_Transmit_DMA+0x184>)
 800d322:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d328:	4a47      	ldr	r2, [pc, #284]	@ (800d448 <HAL_UART_Transmit_DMA+0x188>)
 800d32a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d330:	4a46      	ldr	r2, [pc, #280]	@ (800d44c <HAL_UART_Transmit_DMA+0x18c>)
 800d332:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d338:	2200      	movs	r2, #0
 800d33a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d344:	d106      	bne.n	800d354 <HAL_UART_Transmit_DMA+0x94>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d102      	bne.n	800d354 <HAL_UART_Transmit_DMA+0x94>
      {
        nbByte = Size * 2U;
 800d34e:	88fb      	ldrh	r3, [r7, #6]
 800d350:	005b      	lsls	r3, r3, #1
 800d352:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d35a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d02d      	beq.n	800d3be <HAL_UART_Transmit_DMA+0xfe>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d024      	beq.n	800d3b6 <HAL_UART_Transmit_DMA+0xf6>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d01e      	beq.n	800d3b6 <HAL_UART_Transmit_DMA+0xf6>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d37c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800d382:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d38c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f103 0228 	add.w	r2, r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d39e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7f8 f92b 	bl	8005604 <HAL_DMAEx_List_Start_IT>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d3b4:	e012      	b.n	800d3dc <HAL_UART_Transmit_DMA+0x11c>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d3bc:	e00e      	b.n	800d3dc <HAL_UART_Transmit_DMA+0x11c>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	3328      	adds	r3, #40	@ 0x28
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d3d2:	f7f7 fbc3 	bl	8004b5c <HAL_DMA_Start_IT>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }

      if (status != HAL_OK)
 800d3dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d009      	beq.n	800d3f8 <HAL_UART_Transmit_DMA+0x138>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2210      	movs	r2, #16
 800d3e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2220      	movs	r2, #32
 800d3f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e020      	b.n	800d43a <HAL_UART_Transmit_DMA+0x17a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2240      	movs	r2, #64	@ 0x40
 800d3fe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	3308      	adds	r3, #8
 800d406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	e853 3f00 	ldrex	r3, [r3]
 800d40e:	617b      	str	r3, [r7, #20]
   return(result);
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d416:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	3308      	adds	r3, #8
 800d41e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d420:	627a      	str	r2, [r7, #36]	@ 0x24
 800d422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d424:	6a39      	ldr	r1, [r7, #32]
 800d426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d428:	e841 2300 	strex	r3, r2, [r1]
 800d42c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d1e5      	bne.n	800d400 <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 800d434:	2300      	movs	r3, #0
 800d436:	e000      	b.n	800d43a <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 800d438:	2302      	movs	r3, #2
  }
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3730      	adds	r7, #48	@ 0x30
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	0800e2c5 	.word	0x0800e2c5
 800d448:	0800e359 	.word	0x0800e359
 800d44c:	0800e375 	.word	0x0800e375

0800d450 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b0ba      	sub	sp, #232	@ 0xe8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	69db      	ldr	r3, [r3, #28]
 800d45e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d476:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d47a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d47e:	4013      	ands	r3, r2
 800d480:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d11b      	bne.n	800d4c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d490:	f003 0320 	and.w	r3, r3, #32
 800d494:	2b00      	cmp	r3, #0
 800d496:	d015      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d49c:	f003 0320 	and.w	r3, r3, #32
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d105      	bne.n	800d4b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d4a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d4a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d009      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f000 82cb 	beq.w	800da50 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	4798      	blx	r3
      }
      return;
 800d4c2:	e2c5      	b.n	800da50 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d4c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f000 8123 	beq.w	800d714 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d4ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d4d2:	4b8d      	ldr	r3, [pc, #564]	@ (800d708 <HAL_UART_IRQHandler+0x2b8>)
 800d4d4:	4013      	ands	r3, r2
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d106      	bne.n	800d4e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d4da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d4de:	4b8b      	ldr	r3, [pc, #556]	@ (800d70c <HAL_UART_IRQHandler+0x2bc>)
 800d4e0:	4013      	ands	r3, r2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f000 8116 	beq.w	800d714 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4ec:	f003 0301 	and.w	r3, r3, #1
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d011      	beq.n	800d518 <HAL_UART_IRQHandler+0xc8>
 800d4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00b      	beq.n	800d518 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2201      	movs	r2, #1
 800d506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d50e:	f043 0201 	orr.w	r2, r3, #1
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d51c:	f003 0302 	and.w	r3, r3, #2
 800d520:	2b00      	cmp	r3, #0
 800d522:	d011      	beq.n	800d548 <HAL_UART_IRQHandler+0xf8>
 800d524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d528:	f003 0301 	and.w	r3, r3, #1
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00b      	beq.n	800d548 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	2202      	movs	r2, #2
 800d536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d53e:	f043 0204 	orr.w	r2, r3, #4
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d54c:	f003 0304 	and.w	r3, r3, #4
 800d550:	2b00      	cmp	r3, #0
 800d552:	d011      	beq.n	800d578 <HAL_UART_IRQHandler+0x128>
 800d554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d558:	f003 0301 	and.w	r3, r3, #1
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00b      	beq.n	800d578 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2204      	movs	r2, #4
 800d566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d56e:	f043 0202 	orr.w	r2, r3, #2
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d57c:	f003 0308 	and.w	r3, r3, #8
 800d580:	2b00      	cmp	r3, #0
 800d582:	d017      	beq.n	800d5b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d588:	f003 0320 	and.w	r3, r3, #32
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d105      	bne.n	800d59c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d590:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d594:	4b5c      	ldr	r3, [pc, #368]	@ (800d708 <HAL_UART_IRQHandler+0x2b8>)
 800d596:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00b      	beq.n	800d5b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2208      	movs	r2, #8
 800d5a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5aa:	f043 0208 	orr.w	r2, r3, #8
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d012      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x196>
 800d5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00c      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d5d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5dc:	f043 0220 	orr.w	r2, r3, #32
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f000 8231 	beq.w	800da54 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5f6:	f003 0320 	and.w	r3, r3, #32
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d013      	beq.n	800d626 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d5fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d602:	f003 0320 	and.w	r3, r3, #32
 800d606:	2b00      	cmp	r3, #0
 800d608:	d105      	bne.n	800d616 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d60a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d60e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d612:	2b00      	cmp	r3, #0
 800d614:	d007      	beq.n	800d626 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d003      	beq.n	800d626 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d62c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d63a:	2b40      	cmp	r3, #64	@ 0x40
 800d63c:	d005      	beq.n	800d64a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d63e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d642:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d646:	2b00      	cmp	r3, #0
 800d648:	d054      	beq.n	800d6f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 fdd4 	bl	800e1f8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d65a:	2b40      	cmp	r3, #64	@ 0x40
 800d65c:	d146      	bne.n	800d6ec <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3308      	adds	r3, #8
 800d664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d668:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d66c:	e853 3f00 	ldrex	r3, [r3]
 800d670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d674:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d67c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	3308      	adds	r3, #8
 800d686:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d68a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d68e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d692:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d696:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d69a:	e841 2300 	strex	r3, r2, [r1]
 800d69e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d6a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1d9      	bne.n	800d65e <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d017      	beq.n	800d6e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6ba:	4a15      	ldr	r2, [pc, #84]	@ (800d710 <HAL_UART_IRQHandler+0x2c0>)
 800d6bc:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7f7 fb25 	bl	8004d14 <HAL_DMA_Abort_IT>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d019      	beq.n	800d704 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d6de:	4610      	mov	r0, r2
 800d6e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6e2:	e00f      	b.n	800d704 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 f9c9 	bl	800da7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6ea:	e00b      	b.n	800d704 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 f9c5 	bl	800da7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6f2:	e007      	b.n	800d704 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f9c1 	bl	800da7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d702:	e1a7      	b.n	800da54 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d704:	bf00      	nop
    return;
 800d706:	e1a5      	b.n	800da54 <HAL_UART_IRQHandler+0x604>
 800d708:	10000001 	.word	0x10000001
 800d70c:	04000120 	.word	0x04000120
 800d710:	0800e3f5 	.word	0x0800e3f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d718:	2b01      	cmp	r3, #1
 800d71a:	f040 8150 	bne.w	800d9be <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d722:	f003 0310 	and.w	r3, r3, #16
 800d726:	2b00      	cmp	r3, #0
 800d728:	f000 8149 	beq.w	800d9be <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d72c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d730:	f003 0310 	and.w	r3, r3, #16
 800d734:	2b00      	cmp	r3, #0
 800d736:	f000 8142 	beq.w	800d9be <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2210      	movs	r2, #16
 800d740:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d74c:	2b40      	cmp	r3, #64	@ 0x40
 800d74e:	f040 80b8 	bne.w	800d8c2 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d75c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d760:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d764:	2b00      	cmp	r3, #0
 800d766:	f000 8177 	beq.w	800da58 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d770:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d774:	429a      	cmp	r2, r3
 800d776:	f080 816f 	bcs.w	800da58 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d780:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d78a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d78c:	2b81      	cmp	r3, #129	@ 0x81
 800d78e:	f000 8087 	beq.w	800d8a0 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d79e:	e853 3f00 	ldrex	r3, [r3]
 800d7a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d7a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d7aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d7ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d7bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d7c0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d7c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d7cc:	e841 2300 	strex	r3, r2, [r1]
 800d7d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d7d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d1da      	bne.n	800d792 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d7e6:	e853 3f00 	ldrex	r3, [r3]
 800d7ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d7ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d7ee:	f023 0301 	bic.w	r3, r3, #1
 800d7f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	3308      	adds	r3, #8
 800d7fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d800:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d804:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d806:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d808:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d80c:	e841 2300 	strex	r3, r2, [r1]
 800d810:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d812:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1e1      	bne.n	800d7dc <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	3308      	adds	r3, #8
 800d81e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d820:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d822:	e853 3f00 	ldrex	r3, [r3]
 800d826:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d82a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d82e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	3308      	adds	r3, #8
 800d838:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d83c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d83e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d840:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d842:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d844:	e841 2300 	strex	r3, r2, [r1]
 800d848:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d84a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1e3      	bne.n	800d818 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2220      	movs	r2, #32
 800d854:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2200      	movs	r2, #0
 800d85c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d866:	e853 3f00 	ldrex	r3, [r3]
 800d86a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d86c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d86e:	f023 0310 	bic.w	r3, r3, #16
 800d872:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	461a      	mov	r2, r3
 800d87c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d880:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d882:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d884:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d886:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d888:	e841 2300 	strex	r3, r2, [r1]
 800d88c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d88e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d890:	2b00      	cmp	r3, #0
 800d892:	d1e4      	bne.n	800d85e <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7f7 f9be 	bl	8004c1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2202      	movs	r2, #2
 800d8a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 f8e8 	bl	800da90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d8c0:	e0ca      	b.n	800da58 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f000 80bc 	beq.w	800da5c <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 800d8e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f000 80b7 	beq.w	800da5c <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f6:	e853 3f00 	ldrex	r3, [r3]
 800d8fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d902:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	461a      	mov	r2, r3
 800d90c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d910:	647b      	str	r3, [r7, #68]	@ 0x44
 800d912:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d914:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d918:	e841 2300 	strex	r3, r2, [r1]
 800d91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d91e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d920:	2b00      	cmp	r3, #0
 800d922:	d1e4      	bne.n	800d8ee <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	3308      	adds	r3, #8
 800d92a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d92e:	e853 3f00 	ldrex	r3, [r3]
 800d932:	623b      	str	r3, [r7, #32]
   return(result);
 800d934:	6a3b      	ldr	r3, [r7, #32]
 800d936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d93a:	f023 0301 	bic.w	r3, r3, #1
 800d93e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	3308      	adds	r3, #8
 800d948:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d94c:	633a      	str	r2, [r7, #48]	@ 0x30
 800d94e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d950:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d954:	e841 2300 	strex	r3, r2, [r1]
 800d958:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d1e1      	bne.n	800d924 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2220      	movs	r2, #32
 800d964:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	e853 3f00 	ldrex	r3, [r3]
 800d980:	60fb      	str	r3, [r7, #12]
   return(result);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f023 0310 	bic.w	r3, r3, #16
 800d988:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	461a      	mov	r2, r3
 800d992:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d996:	61fb      	str	r3, [r7, #28]
 800d998:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99a:	69b9      	ldr	r1, [r7, #24]
 800d99c:	69fa      	ldr	r2, [r7, #28]
 800d99e:	e841 2300 	strex	r3, r2, [r1]
 800d9a2:	617b      	str	r3, [r7, #20]
   return(result);
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1e4      	bne.n	800d974 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2202      	movs	r2, #2
 800d9ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d9b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 f86a 	bl	800da90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d9bc:	e04e      	b.n	800da5c <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d9be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d014      	beq.n	800d9f4 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d9ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d105      	bne.n	800d9e2 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d9d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d9da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d008      	beq.n	800d9f4 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d03a      	beq.n	800da60 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	4798      	blx	r3
    }
    return;
 800d9f2:	e035      	b.n	800da60 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d9f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d009      	beq.n	800da14 <HAL_UART_IRQHandler+0x5c4>
 800da00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d003      	beq.n	800da14 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 fd07 	bl	800e420 <UART_EndTransmit_IT>
    return;
 800da12:	e026      	b.n	800da62 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800da14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d009      	beq.n	800da34 <HAL_UART_IRQHandler+0x5e4>
 800da20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d003      	beq.n	800da34 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 fd2c 	bl	800e48a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da32:	e016      	b.n	800da62 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800da34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d010      	beq.n	800da62 <HAL_UART_IRQHandler+0x612>
 800da40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da44:	2b00      	cmp	r3, #0
 800da46:	da0c      	bge.n	800da62 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 fd14 	bl	800e476 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da4e:	e008      	b.n	800da62 <HAL_UART_IRQHandler+0x612>
      return;
 800da50:	bf00      	nop
 800da52:	e006      	b.n	800da62 <HAL_UART_IRQHandler+0x612>
    return;
 800da54:	bf00      	nop
 800da56:	e004      	b.n	800da62 <HAL_UART_IRQHandler+0x612>
      return;
 800da58:	bf00      	nop
 800da5a:	e002      	b.n	800da62 <HAL_UART_IRQHandler+0x612>
      return;
 800da5c:	bf00      	nop
 800da5e:	e000      	b.n	800da62 <HAL_UART_IRQHandler+0x612>
    return;
 800da60:	bf00      	nop
  }
}
 800da62:	37e8      	adds	r7, #232	@ 0xe8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800da70:	bf00      	nop
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800da84:	bf00      	nop
 800da86:	370c      	adds	r7, #12
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	460b      	mov	r3, r1
 800da9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800da9c:	bf00      	nop
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800daa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800daac:	b094      	sub	sp, #80	@ 0x50
 800daae:	af00      	add	r7, sp, #0
 800dab0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800dab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	4b83      	ldr	r3, [pc, #524]	@ (800dccc <UART_SetConfig+0x224>)
 800dabe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac2:	689a      	ldr	r2, [r3, #8]
 800dac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac6:	691b      	ldr	r3, [r3, #16]
 800dac8:	431a      	orrs	r2, r3
 800daca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	431a      	orrs	r2, r3
 800dad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad2:	69db      	ldr	r3, [r3, #28]
 800dad4:	4313      	orrs	r3, r2
 800dad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	497c      	ldr	r1, [pc, #496]	@ (800dcd0 <UART_SetConfig+0x228>)
 800dae0:	4019      	ands	r1, r3
 800dae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dae8:	430b      	orrs	r3, r1
 800daea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800daec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800daf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf8:	68d9      	ldr	r1, [r3, #12]
 800dafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafc:	681a      	ldr	r2, [r3, #0]
 800dafe:	ea40 0301 	orr.w	r3, r0, r1
 800db02:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800db04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800db0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	4b6f      	ldr	r3, [pc, #444]	@ (800dccc <UART_SetConfig+0x224>)
 800db10:	429a      	cmp	r2, r3
 800db12:	d009      	beq.n	800db28 <UART_SetConfig+0x80>
 800db14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	4b6e      	ldr	r3, [pc, #440]	@ (800dcd4 <UART_SetConfig+0x22c>)
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d004      	beq.n	800db28 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800db1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db20:	6a1a      	ldr	r2, [r3, #32]
 800db22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db24:	4313      	orrs	r3, r2
 800db26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800db28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800db32:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800db36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db3c:	430b      	orrs	r3, r1
 800db3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800db40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db46:	f023 000f 	bic.w	r0, r3, #15
 800db4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db4c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800db4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	ea40 0301 	orr.w	r3, r0, r1
 800db56:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	4b5e      	ldr	r3, [pc, #376]	@ (800dcd8 <UART_SetConfig+0x230>)
 800db5e:	429a      	cmp	r2, r3
 800db60:	d102      	bne.n	800db68 <UART_SetConfig+0xc0>
 800db62:	2301      	movs	r3, #1
 800db64:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db66:	e032      	b.n	800dbce <UART_SetConfig+0x126>
 800db68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	4b5b      	ldr	r3, [pc, #364]	@ (800dcdc <UART_SetConfig+0x234>)
 800db6e:	429a      	cmp	r2, r3
 800db70:	d102      	bne.n	800db78 <UART_SetConfig+0xd0>
 800db72:	2302      	movs	r3, #2
 800db74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db76:	e02a      	b.n	800dbce <UART_SetConfig+0x126>
 800db78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	4b58      	ldr	r3, [pc, #352]	@ (800dce0 <UART_SetConfig+0x238>)
 800db7e:	429a      	cmp	r2, r3
 800db80:	d102      	bne.n	800db88 <UART_SetConfig+0xe0>
 800db82:	2304      	movs	r3, #4
 800db84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db86:	e022      	b.n	800dbce <UART_SetConfig+0x126>
 800db88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	4b55      	ldr	r3, [pc, #340]	@ (800dce4 <UART_SetConfig+0x23c>)
 800db8e:	429a      	cmp	r2, r3
 800db90:	d102      	bne.n	800db98 <UART_SetConfig+0xf0>
 800db92:	2308      	movs	r3, #8
 800db94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db96:	e01a      	b.n	800dbce <UART_SetConfig+0x126>
 800db98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	4b52      	ldr	r3, [pc, #328]	@ (800dce8 <UART_SetConfig+0x240>)
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d102      	bne.n	800dba8 <UART_SetConfig+0x100>
 800dba2:	2310      	movs	r3, #16
 800dba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dba6:	e012      	b.n	800dbce <UART_SetConfig+0x126>
 800dba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	4b4f      	ldr	r3, [pc, #316]	@ (800dcec <UART_SetConfig+0x244>)
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d103      	bne.n	800dbba <UART_SetConfig+0x112>
 800dbb2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800dbb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dbb8:	e009      	b.n	800dbce <UART_SetConfig+0x126>
 800dbba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	4b43      	ldr	r3, [pc, #268]	@ (800dccc <UART_SetConfig+0x224>)
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d102      	bne.n	800dbca <UART_SetConfig+0x122>
 800dbc4:	2320      	movs	r3, #32
 800dbc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dbc8:	e001      	b.n	800dbce <UART_SetConfig+0x126>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	4b3e      	ldr	r3, [pc, #248]	@ (800dccc <UART_SetConfig+0x224>)
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d005      	beq.n	800dbe4 <UART_SetConfig+0x13c>
 800dbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	4b3d      	ldr	r3, [pc, #244]	@ (800dcd4 <UART_SetConfig+0x22c>)
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	f040 8088 	bne.w	800dcf4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dbe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	623b      	str	r3, [r7, #32]
 800dbea:	627a      	str	r2, [r7, #36]	@ 0x24
 800dbec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dbf0:	f7fa fe96 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq>
 800dbf4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800dbf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f000 80eb 	beq.w	800ddd4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc02:	4a3b      	ldr	r2, [pc, #236]	@ (800dcf0 <UART_SetConfig+0x248>)
 800dc04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc08:	461a      	mov	r2, r3
 800dc0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc10:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc14:	685a      	ldr	r2, [r3, #4]
 800dc16:	4613      	mov	r3, r2
 800dc18:	005b      	lsls	r3, r3, #1
 800dc1a:	4413      	add	r3, r2
 800dc1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d305      	bcc.n	800dc2e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d903      	bls.n	800dc36 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800dc34:	e048      	b.n	800dcc8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc38:	2200      	movs	r2, #0
 800dc3a:	61bb      	str	r3, [r7, #24]
 800dc3c:	61fa      	str	r2, [r7, #28]
 800dc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc42:	4a2b      	ldr	r2, [pc, #172]	@ (800dcf0 <UART_SetConfig+0x248>)
 800dc44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	613b      	str	r3, [r7, #16]
 800dc4e:	617a      	str	r2, [r7, #20]
 800dc50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dc54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800dc58:	f7f2 ffa6 	bl	8000ba8 <__aeabi_uldivmod>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	460b      	mov	r3, r1
 800dc60:	4610      	mov	r0, r2
 800dc62:	4619      	mov	r1, r3
 800dc64:	f04f 0200 	mov.w	r2, #0
 800dc68:	f04f 0300 	mov.w	r3, #0
 800dc6c:	020b      	lsls	r3, r1, #8
 800dc6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc72:	0202      	lsls	r2, r0, #8
 800dc74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dc76:	6849      	ldr	r1, [r1, #4]
 800dc78:	0849      	lsrs	r1, r1, #1
 800dc7a:	2000      	movs	r0, #0
 800dc7c:	460c      	mov	r4, r1
 800dc7e:	4605      	mov	r5, r0
 800dc80:	eb12 0804 	adds.w	r8, r2, r4
 800dc84:	eb43 0905 	adc.w	r9, r3, r5
 800dc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	60bb      	str	r3, [r7, #8]
 800dc90:	60fa      	str	r2, [r7, #12]
 800dc92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dc96:	4640      	mov	r0, r8
 800dc98:	4649      	mov	r1, r9
 800dc9a:	f7f2 ff85 	bl	8000ba8 <__aeabi_uldivmod>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	460b      	mov	r3, r1
 800dca2:	4613      	mov	r3, r2
 800dca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dca8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dcac:	d308      	bcc.n	800dcc0 <UART_SetConfig+0x218>
 800dcae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dcb4:	d204      	bcs.n	800dcc0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800dcb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dcbc:	60da      	str	r2, [r3, #12]
 800dcbe:	e003      	b.n	800dcc8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800dcc6:	e085      	b.n	800ddd4 <UART_SetConfig+0x32c>
 800dcc8:	e084      	b.n	800ddd4 <UART_SetConfig+0x32c>
 800dcca:	bf00      	nop
 800dccc:	46002400 	.word	0x46002400
 800dcd0:	cfff69f3 	.word	0xcfff69f3
 800dcd4:	56002400 	.word	0x56002400
 800dcd8:	40013800 	.word	0x40013800
 800dcdc:	40004400 	.word	0x40004400
 800dce0:	40004800 	.word	0x40004800
 800dce4:	40004c00 	.word	0x40004c00
 800dce8:	40005000 	.word	0x40005000
 800dcec:	40006400 	.word	0x40006400
 800dcf0:	0800fed8 	.word	0x0800fed8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf6:	69db      	ldr	r3, [r3, #28]
 800dcf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dcfc:	d13c      	bne.n	800dd78 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dcfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd00:	2200      	movs	r2, #0
 800dd02:	603b      	str	r3, [r7, #0]
 800dd04:	607a      	str	r2, [r7, #4]
 800dd06:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dd0a:	f7fa fe09 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq>
 800dd0e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d05e      	beq.n	800ddd4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd1a:	4a39      	ldr	r2, [pc, #228]	@ (800de00 <UART_SetConfig+0x358>)
 800dd1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd20:	461a      	mov	r2, r3
 800dd22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd24:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd28:	005a      	lsls	r2, r3, #1
 800dd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	085b      	lsrs	r3, r3, #1
 800dd30:	441a      	add	r2, r3
 800dd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd3e:	2b0f      	cmp	r3, #15
 800dd40:	d916      	bls.n	800dd70 <UART_SetConfig+0x2c8>
 800dd42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd48:	d212      	bcs.n	800dd70 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dd4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	f023 030f 	bic.w	r3, r3, #15
 800dd52:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dd54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd56:	085b      	lsrs	r3, r3, #1
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	f003 0307 	and.w	r3, r3, #7
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800dd62:	4313      	orrs	r3, r2
 800dd64:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800dd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800dd6c:	60da      	str	r2, [r3, #12]
 800dd6e:	e031      	b.n	800ddd4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800dd70:	2301      	movs	r3, #1
 800dd72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800dd76:	e02d      	b.n	800ddd4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dd78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	469a      	mov	sl, r3
 800dd7e:	4693      	mov	fp, r2
 800dd80:	4650      	mov	r0, sl
 800dd82:	4659      	mov	r1, fp
 800dd84:	f7fa fdcc 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq>
 800dd88:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800dd8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d021      	beq.n	800ddd4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd94:	4a1a      	ldr	r2, [pc, #104]	@ (800de00 <UART_SetConfig+0x358>)
 800dd96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd9e:	fbb3 f2f2 	udiv	r2, r3, r2
 800dda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	085b      	lsrs	r3, r3, #1
 800dda8:	441a      	add	r2, r3
 800ddaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ddb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddb6:	2b0f      	cmp	r3, #15
 800ddb8:	d909      	bls.n	800ddce <UART_SetConfig+0x326>
 800ddba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddc0:	d205      	bcs.n	800ddce <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ddc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	60da      	str	r2, [r3, #12]
 800ddcc:	e002      	b.n	800ddd4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ddd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddde:	2201      	movs	r2, #1
 800dde0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde6:	2200      	movs	r2, #0
 800dde8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ddea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddec:	2200      	movs	r2, #0
 800ddee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ddf0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3750      	adds	r7, #80	@ 0x50
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ddfe:	bf00      	nop
 800de00:	0800fed8 	.word	0x0800fed8

0800de04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de10:	f003 0308 	and.w	r3, r3, #8
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00a      	beq.n	800de2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	430a      	orrs	r2, r1
 800de2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de32:	f003 0301 	and.w	r3, r3, #1
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00a      	beq.n	800de50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	430a      	orrs	r2, r1
 800de4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de54:	f003 0302 	and.w	r3, r3, #2
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00a      	beq.n	800de72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	430a      	orrs	r2, r1
 800de70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de76:	f003 0304 	and.w	r3, r3, #4
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d00a      	beq.n	800de94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	430a      	orrs	r2, r1
 800de92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de98:	f003 0310 	and.w	r3, r3, #16
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00a      	beq.n	800deb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	430a      	orrs	r2, r1
 800deb4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deba:	f003 0320 	and.w	r3, r3, #32
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00a      	beq.n	800ded8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	430a      	orrs	r2, r1
 800ded6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d01a      	beq.n	800df1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	430a      	orrs	r2, r1
 800def8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800defe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df02:	d10a      	bne.n	800df1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	430a      	orrs	r2, r1
 800df18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df22:	2b00      	cmp	r3, #0
 800df24:	d00a      	beq.n	800df3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	430a      	orrs	r2, r1
 800df3a:	605a      	str	r2, [r3, #4]
  }
}
 800df3c:	bf00      	nop
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b098      	sub	sp, #96	@ 0x60
 800df4c:	af02      	add	r7, sp, #8
 800df4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800df58:	f7f6 fb10 	bl	800457c <HAL_GetTick>
 800df5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f003 0308 	and.w	r3, r3, #8
 800df68:	2b08      	cmp	r3, #8
 800df6a:	d12f      	bne.n	800dfcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800df70:	9300      	str	r3, [sp, #0]
 800df72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df74:	2200      	movs	r2, #0
 800df76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 f88e 	bl	800e09c <UART_WaitOnFlagUntilTimeout>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d022      	beq.n	800dfcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df8e:	e853 3f00 	ldrex	r3, [r3]
 800df92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfa4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfac:	e841 2300 	strex	r3, r2, [r1]
 800dfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dfb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1e6      	bne.n	800df86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2220      	movs	r2, #32
 800dfbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dfc8:	2303      	movs	r3, #3
 800dfca:	e063      	b.n	800e094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f003 0304 	and.w	r3, r3, #4
 800dfd6:	2b04      	cmp	r3, #4
 800dfd8:	d149      	bne.n	800e06e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dfda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 f857 	bl	800e09c <UART_WaitOnFlagUntilTimeout>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d03c      	beq.n	800e06e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dffc:	e853 3f00 	ldrex	r3, [r3]
 800e000:	623b      	str	r3, [r7, #32]
   return(result);
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	461a      	mov	r2, r3
 800e010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e012:	633b      	str	r3, [r7, #48]	@ 0x30
 800e014:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e01a:	e841 2300 	strex	r3, r2, [r1]
 800e01e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e022:	2b00      	cmp	r3, #0
 800e024:	d1e6      	bne.n	800dff4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	3308      	adds	r3, #8
 800e02c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	e853 3f00 	ldrex	r3, [r3]
 800e034:	60fb      	str	r3, [r7, #12]
   return(result);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f023 0301 	bic.w	r3, r3, #1
 800e03c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	3308      	adds	r3, #8
 800e044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e046:	61fa      	str	r2, [r7, #28]
 800e048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e04a:	69b9      	ldr	r1, [r7, #24]
 800e04c:	69fa      	ldr	r2, [r7, #28]
 800e04e:	e841 2300 	strex	r3, r2, [r1]
 800e052:	617b      	str	r3, [r7, #20]
   return(result);
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1e5      	bne.n	800e026 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2220      	movs	r2, #32
 800e05e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e06a:	2303      	movs	r3, #3
 800e06c:	e012      	b.n	800e094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2220      	movs	r2, #32
 800e072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2220      	movs	r2, #32
 800e07a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2200      	movs	r2, #0
 800e082:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e092:	2300      	movs	r3, #0
}
 800e094:	4618      	mov	r0, r3
 800e096:	3758      	adds	r7, #88	@ 0x58
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	603b      	str	r3, [r7, #0]
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0ac:	e04f      	b.n	800e14e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0b4:	d04b      	beq.n	800e14e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0b6:	f7f6 fa61 	bl	800457c <HAL_GetTick>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	1ad3      	subs	r3, r2, r3
 800e0c0:	69ba      	ldr	r2, [r7, #24]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d302      	bcc.n	800e0cc <UART_WaitOnFlagUntilTimeout+0x30>
 800e0c6:	69bb      	ldr	r3, [r7, #24]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d101      	bne.n	800e0d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	e04e      	b.n	800e16e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f003 0304 	and.w	r3, r3, #4
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d037      	beq.n	800e14e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	2b80      	cmp	r3, #128	@ 0x80
 800e0e2:	d034      	beq.n	800e14e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	2b40      	cmp	r3, #64	@ 0x40
 800e0e8:	d031      	beq.n	800e14e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	69db      	ldr	r3, [r3, #28]
 800e0f0:	f003 0308 	and.w	r3, r3, #8
 800e0f4:	2b08      	cmp	r3, #8
 800e0f6:	d110      	bne.n	800e11a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2208      	movs	r2, #8
 800e0fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f000 f879 	bl	800e1f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2208      	movs	r2, #8
 800e10a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	e029      	b.n	800e16e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	69db      	ldr	r3, [r3, #28]
 800e120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e128:	d111      	bne.n	800e14e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e134:	68f8      	ldr	r0, [r7, #12]
 800e136:	f000 f85f 	bl	800e1f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2220      	movs	r2, #32
 800e13e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e14a:	2303      	movs	r3, #3
 800e14c:	e00f      	b.n	800e16e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	69da      	ldr	r2, [r3, #28]
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	4013      	ands	r3, r2
 800e158:	68ba      	ldr	r2, [r7, #8]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	bf0c      	ite	eq
 800e15e:	2301      	moveq	r3, #1
 800e160:	2300      	movne	r3, #0
 800e162:	b2db      	uxtb	r3, r3
 800e164:	461a      	mov	r2, r3
 800e166:	79fb      	ldrb	r3, [r7, #7]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d0a0      	beq.n	800e0ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e16c:	2300      	movs	r3, #0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e176:	b480      	push	{r7}
 800e178:	b08f      	sub	sp, #60	@ 0x3c
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e184:	6a3b      	ldr	r3, [r7, #32]
 800e186:	e853 3f00 	ldrex	r3, [r3]
 800e18a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e192:	637b      	str	r3, [r7, #52]	@ 0x34
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	461a      	mov	r2, r3
 800e19a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e19c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e19e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1a4:	e841 2300 	strex	r3, r2, [r1]
 800e1a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d1e6      	bne.n	800e17e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	3308      	adds	r3, #8
 800e1b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	e853 3f00 	ldrex	r3, [r3]
 800e1be:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e1c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	3308      	adds	r3, #8
 800e1ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1d0:	61ba      	str	r2, [r7, #24]
 800e1d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d4:	6979      	ldr	r1, [r7, #20]
 800e1d6:	69ba      	ldr	r2, [r7, #24]
 800e1d8:	e841 2300 	strex	r3, r2, [r1]
 800e1dc:	613b      	str	r3, [r7, #16]
   return(result);
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d1e5      	bne.n	800e1b0 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2220      	movs	r2, #32
 800e1e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e1ec:	bf00      	nop
 800e1ee:	373c      	adds	r7, #60	@ 0x3c
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b095      	sub	sp, #84	@ 0x54
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e208:	e853 3f00 	ldrex	r3, [r3]
 800e20c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	461a      	mov	r2, r3
 800e21c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e21e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e220:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e222:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e224:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e226:	e841 2300 	strex	r3, r2, [r1]
 800e22a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1e6      	bne.n	800e200 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	3308      	adds	r3, #8
 800e238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	e853 3f00 	ldrex	r3, [r3]
 800e240:	61fb      	str	r3, [r7, #28]
   return(result);
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e248:	f023 0301 	bic.w	r3, r3, #1
 800e24c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	3308      	adds	r3, #8
 800e254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e258:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e25a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e25c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e25e:	e841 2300 	strex	r3, r2, [r1]
 800e262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1e3      	bne.n	800e232 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d118      	bne.n	800e2a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	e853 3f00 	ldrex	r3, [r3]
 800e27e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	f023 0310 	bic.w	r3, r3, #16
 800e286:	647b      	str	r3, [r7, #68]	@ 0x44
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	461a      	mov	r2, r3
 800e28e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e290:	61bb      	str	r3, [r7, #24]
 800e292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e294:	6979      	ldr	r1, [r7, #20]
 800e296:	69ba      	ldr	r2, [r7, #24]
 800e298:	e841 2300 	strex	r3, r2, [r1]
 800e29c:	613b      	str	r3, [r7, #16]
   return(result);
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d1e6      	bne.n	800e272 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2220      	movs	r2, #32
 800e2a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e2b8:	bf00      	nop
 800e2ba:	3754      	adds	r7, #84	@ 0x54
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b090      	sub	sp, #64	@ 0x40
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2d6:	2b81      	cmp	r3, #129	@ 0x81
 800e2d8:	d037      	beq.n	800e34a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800e2da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3308      	adds	r3, #8
 800e2e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ec:	e853 3f00 	ldrex	r3, [r3]
 800e2f0:	623b      	str	r3, [r7, #32]
   return(result);
 800e2f2:	6a3b      	ldr	r3, [r7, #32]
 800e2f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e2f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	3308      	adds	r3, #8
 800e300:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e302:	633a      	str	r2, [r7, #48]	@ 0x30
 800e304:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e306:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e30a:	e841 2300 	strex	r3, r2, [r1]
 800e30e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e312:	2b00      	cmp	r3, #0
 800e314:	d1e5      	bne.n	800e2e2 <UART_DMATransmitCplt+0x1e>

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	e853 3f00 	ldrex	r3, [r3]
 800e322:	60fb      	str	r3, [r7, #12]
   return(result);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e32a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e32c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	461a      	mov	r2, r3
 800e332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e334:	61fb      	str	r3, [r7, #28]
 800e336:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e338:	69b9      	ldr	r1, [r7, #24]
 800e33a:	69fa      	ldr	r2, [r7, #28]
 800e33c:	e841 2300 	strex	r3, r2, [r1]
 800e340:	617b      	str	r3, [r7, #20]
   return(result);
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1e6      	bne.n	800e316 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e348:	e002      	b.n	800e350 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800e34a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e34c:	f7f3 fefc 	bl	8002148 <HAL_UART_TxCpltCallback>
}
 800e350:	bf00      	nop
 800e352:	3740      	adds	r7, #64	@ 0x40
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e364:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e366:	68f8      	ldr	r0, [r7, #12]
 800e368:	f7ff fb7e 	bl	800da68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e36c:	bf00      	nop
 800e36e:	3710      	adds	r7, #16
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e380:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e388:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e390:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e39c:	2b80      	cmp	r3, #128	@ 0x80
 800e39e:	d109      	bne.n	800e3b4 <UART_DMAError+0x40>
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	2b21      	cmp	r3, #33	@ 0x21
 800e3a4:	d106      	bne.n	800e3b4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e3ae:	6978      	ldr	r0, [r7, #20]
 800e3b0:	f7ff fee1 	bl	800e176 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3be:	2b40      	cmp	r3, #64	@ 0x40
 800e3c0:	d109      	bne.n	800e3d6 <UART_DMAError+0x62>
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2b22      	cmp	r3, #34	@ 0x22
 800e3c6:	d106      	bne.n	800e3d6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e3d0:	6978      	ldr	r0, [r7, #20]
 800e3d2:	f7ff ff11 	bl	800e1f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3dc:	f043 0210 	orr.w	r2, r3, #16
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e3e6:	6978      	ldr	r0, [r7, #20]
 800e3e8:	f7ff fb48 	bl	800da7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3ec:	bf00      	nop
 800e3ee:	3718      	adds	r7, #24
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e400:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2200      	movs	r2, #0
 800e40e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e412:	68f8      	ldr	r0, [r7, #12]
 800e414:	f7ff fb32 	bl	800da7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e418:	bf00      	nop
 800e41a:	3710      	adds	r7, #16
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b088      	sub	sp, #32
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	e853 3f00 	ldrex	r3, [r3]
 800e434:	60bb      	str	r3, [r7, #8]
   return(result);
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e43c:	61fb      	str	r3, [r7, #28]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	461a      	mov	r2, r3
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	61bb      	str	r3, [r7, #24]
 800e448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44a:	6979      	ldr	r1, [r7, #20]
 800e44c:	69ba      	ldr	r2, [r7, #24]
 800e44e:	e841 2300 	strex	r3, r2, [r1]
 800e452:	613b      	str	r3, [r7, #16]
   return(result);
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1e6      	bne.n	800e428 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2220      	movs	r2, #32
 800e45e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f7f3 fe6d 	bl	8002148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e46e:	bf00      	nop
 800e470:	3720      	adds	r7, #32
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e476:	b480      	push	{r7}
 800e478:	b083      	sub	sp, #12
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e47e:	bf00      	nop
 800e480:	370c      	adds	r7, #12
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr

0800e48a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e48a:	b480      	push	{r7}
 800e48c:	b083      	sub	sp, #12
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e492:	bf00      	nop
 800e494:	370c      	adds	r7, #12
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr

0800e49e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e49e:	b480      	push	{r7}
 800e4a0:	b085      	sub	sp, #20
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d101      	bne.n	800e4b4 <HAL_UARTEx_DisableFifoMode+0x16>
 800e4b0:	2302      	movs	r3, #2
 800e4b2:	e027      	b.n	800e504 <HAL_UARTEx_DisableFifoMode+0x66>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2224      	movs	r2, #36	@ 0x24
 800e4c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	681a      	ldr	r2, [r3, #0]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f022 0201 	bic.w	r2, r2, #1
 800e4da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e4e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2220      	movs	r2, #32
 800e4f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3714      	adds	r7, #20
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e520:	2b01      	cmp	r3, #1
 800e522:	d101      	bne.n	800e528 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e524:	2302      	movs	r3, #2
 800e526:	e02d      	b.n	800e584 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2224      	movs	r2, #36	@ 0x24
 800e534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f022 0201 	bic.w	r2, r2, #1
 800e54e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	430a      	orrs	r2, r1
 800e562:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 f84f 	bl	800e608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	68fa      	ldr	r2, [r7, #12]
 800e570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2220      	movs	r2, #32
 800e576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e582:	2300      	movs	r3, #0
}
 800e584:	4618      	mov	r0, r3
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d101      	bne.n	800e5a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	e02d      	b.n	800e600 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2224      	movs	r2, #36	@ 0x24
 800e5b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f022 0201 	bic.w	r2, r2, #1
 800e5ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	430a      	orrs	r2, r1
 800e5de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 f811 	bl	800e608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2220      	movs	r2, #32
 800e5f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	4618      	mov	r0, r3
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e614:	2b00      	cmp	r3, #0
 800e616:	d108      	bne.n	800e62a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2201      	movs	r2, #1
 800e61c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2201      	movs	r2, #1
 800e624:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e628:	e031      	b.n	800e68e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e62a:	2308      	movs	r3, #8
 800e62c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e62e:	2308      	movs	r3, #8
 800e630:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	0e5b      	lsrs	r3, r3, #25
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	f003 0307 	and.w	r3, r3, #7
 800e640:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	689b      	ldr	r3, [r3, #8]
 800e648:	0f5b      	lsrs	r3, r3, #29
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	f003 0307 	and.w	r3, r3, #7
 800e650:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e652:	7bbb      	ldrb	r3, [r7, #14]
 800e654:	7b3a      	ldrb	r2, [r7, #12]
 800e656:	4911      	ldr	r1, [pc, #68]	@ (800e69c <UARTEx_SetNbDataToProcess+0x94>)
 800e658:	5c8a      	ldrb	r2, [r1, r2]
 800e65a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e65e:	7b3a      	ldrb	r2, [r7, #12]
 800e660:	490f      	ldr	r1, [pc, #60]	@ (800e6a0 <UARTEx_SetNbDataToProcess+0x98>)
 800e662:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e664:	fb93 f3f2 	sdiv	r3, r3, r2
 800e668:	b29a      	uxth	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e670:	7bfb      	ldrb	r3, [r7, #15]
 800e672:	7b7a      	ldrb	r2, [r7, #13]
 800e674:	4909      	ldr	r1, [pc, #36]	@ (800e69c <UARTEx_SetNbDataToProcess+0x94>)
 800e676:	5c8a      	ldrb	r2, [r1, r2]
 800e678:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e67c:	7b7a      	ldrb	r2, [r7, #13]
 800e67e:	4908      	ldr	r1, [pc, #32]	@ (800e6a0 <UARTEx_SetNbDataToProcess+0x98>)
 800e680:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e682:	fb93 f3f2 	sdiv	r3, r3, r2
 800e686:	b29a      	uxth	r2, r3
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e68e:	bf00      	nop
 800e690:	3714      	adds	r7, #20
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	0800fef0 	.word	0x0800fef0
 800e6a0:	0800fef8 	.word	0x0800fef8

0800e6a4 <malloc>:
 800e6a4:	4b02      	ldr	r3, [pc, #8]	@ (800e6b0 <malloc+0xc>)
 800e6a6:	4601      	mov	r1, r0
 800e6a8:	6818      	ldr	r0, [r3, #0]
 800e6aa:	f000 b82d 	b.w	800e708 <_malloc_r>
 800e6ae:	bf00      	nop
 800e6b0:	20000014 	.word	0x20000014

0800e6b4 <free>:
 800e6b4:	4b02      	ldr	r3, [pc, #8]	@ (800e6c0 <free+0xc>)
 800e6b6:	4601      	mov	r1, r0
 800e6b8:	6818      	ldr	r0, [r3, #0]
 800e6ba:	f000 b8f5 	b.w	800e8a8 <_free_r>
 800e6be:	bf00      	nop
 800e6c0:	20000014 	.word	0x20000014

0800e6c4 <sbrk_aligned>:
 800e6c4:	b570      	push	{r4, r5, r6, lr}
 800e6c6:	4e0f      	ldr	r6, [pc, #60]	@ (800e704 <sbrk_aligned+0x40>)
 800e6c8:	460c      	mov	r4, r1
 800e6ca:	4605      	mov	r5, r0
 800e6cc:	6831      	ldr	r1, [r6, #0]
 800e6ce:	b911      	cbnz	r1, 800e6d6 <sbrk_aligned+0x12>
 800e6d0:	f000 f8ae 	bl	800e830 <_sbrk_r>
 800e6d4:	6030      	str	r0, [r6, #0]
 800e6d6:	4621      	mov	r1, r4
 800e6d8:	4628      	mov	r0, r5
 800e6da:	f000 f8a9 	bl	800e830 <_sbrk_r>
 800e6de:	1c43      	adds	r3, r0, #1
 800e6e0:	d103      	bne.n	800e6ea <sbrk_aligned+0x26>
 800e6e2:	f04f 34ff 	mov.w	r4, #4294967295
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	bd70      	pop	{r4, r5, r6, pc}
 800e6ea:	1cc4      	adds	r4, r0, #3
 800e6ec:	f024 0403 	bic.w	r4, r4, #3
 800e6f0:	42a0      	cmp	r0, r4
 800e6f2:	d0f8      	beq.n	800e6e6 <sbrk_aligned+0x22>
 800e6f4:	1a21      	subs	r1, r4, r0
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	f000 f89a 	bl	800e830 <_sbrk_r>
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	d1f2      	bne.n	800e6e6 <sbrk_aligned+0x22>
 800e700:	e7ef      	b.n	800e6e2 <sbrk_aligned+0x1e>
 800e702:	bf00      	nop
 800e704:	20000838 	.word	0x20000838

0800e708 <_malloc_r>:
 800e708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e70c:	1ccd      	adds	r5, r1, #3
 800e70e:	4606      	mov	r6, r0
 800e710:	f025 0503 	bic.w	r5, r5, #3
 800e714:	3508      	adds	r5, #8
 800e716:	2d0c      	cmp	r5, #12
 800e718:	bf38      	it	cc
 800e71a:	250c      	movcc	r5, #12
 800e71c:	2d00      	cmp	r5, #0
 800e71e:	db01      	blt.n	800e724 <_malloc_r+0x1c>
 800e720:	42a9      	cmp	r1, r5
 800e722:	d904      	bls.n	800e72e <_malloc_r+0x26>
 800e724:	230c      	movs	r3, #12
 800e726:	6033      	str	r3, [r6, #0]
 800e728:	2000      	movs	r0, #0
 800e72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e72e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e804 <_malloc_r+0xfc>
 800e732:	f000 f869 	bl	800e808 <__malloc_lock>
 800e736:	f8d8 3000 	ldr.w	r3, [r8]
 800e73a:	461c      	mov	r4, r3
 800e73c:	bb44      	cbnz	r4, 800e790 <_malloc_r+0x88>
 800e73e:	4629      	mov	r1, r5
 800e740:	4630      	mov	r0, r6
 800e742:	f7ff ffbf 	bl	800e6c4 <sbrk_aligned>
 800e746:	1c43      	adds	r3, r0, #1
 800e748:	4604      	mov	r4, r0
 800e74a:	d158      	bne.n	800e7fe <_malloc_r+0xf6>
 800e74c:	f8d8 4000 	ldr.w	r4, [r8]
 800e750:	4627      	mov	r7, r4
 800e752:	2f00      	cmp	r7, #0
 800e754:	d143      	bne.n	800e7de <_malloc_r+0xd6>
 800e756:	2c00      	cmp	r4, #0
 800e758:	d04b      	beq.n	800e7f2 <_malloc_r+0xea>
 800e75a:	6823      	ldr	r3, [r4, #0]
 800e75c:	4639      	mov	r1, r7
 800e75e:	4630      	mov	r0, r6
 800e760:	eb04 0903 	add.w	r9, r4, r3
 800e764:	f000 f864 	bl	800e830 <_sbrk_r>
 800e768:	4581      	cmp	r9, r0
 800e76a:	d142      	bne.n	800e7f2 <_malloc_r+0xea>
 800e76c:	6821      	ldr	r1, [r4, #0]
 800e76e:	4630      	mov	r0, r6
 800e770:	1a6d      	subs	r5, r5, r1
 800e772:	4629      	mov	r1, r5
 800e774:	f7ff ffa6 	bl	800e6c4 <sbrk_aligned>
 800e778:	3001      	adds	r0, #1
 800e77a:	d03a      	beq.n	800e7f2 <_malloc_r+0xea>
 800e77c:	6823      	ldr	r3, [r4, #0]
 800e77e:	442b      	add	r3, r5
 800e780:	6023      	str	r3, [r4, #0]
 800e782:	f8d8 3000 	ldr.w	r3, [r8]
 800e786:	685a      	ldr	r2, [r3, #4]
 800e788:	bb62      	cbnz	r2, 800e7e4 <_malloc_r+0xdc>
 800e78a:	f8c8 7000 	str.w	r7, [r8]
 800e78e:	e00f      	b.n	800e7b0 <_malloc_r+0xa8>
 800e790:	6822      	ldr	r2, [r4, #0]
 800e792:	1b52      	subs	r2, r2, r5
 800e794:	d420      	bmi.n	800e7d8 <_malloc_r+0xd0>
 800e796:	2a0b      	cmp	r2, #11
 800e798:	d917      	bls.n	800e7ca <_malloc_r+0xc2>
 800e79a:	1961      	adds	r1, r4, r5
 800e79c:	42a3      	cmp	r3, r4
 800e79e:	6025      	str	r5, [r4, #0]
 800e7a0:	bf18      	it	ne
 800e7a2:	6059      	strne	r1, [r3, #4]
 800e7a4:	6863      	ldr	r3, [r4, #4]
 800e7a6:	bf08      	it	eq
 800e7a8:	f8c8 1000 	streq.w	r1, [r8]
 800e7ac:	5162      	str	r2, [r4, r5]
 800e7ae:	604b      	str	r3, [r1, #4]
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	f000 f82f 	bl	800e814 <__malloc_unlock>
 800e7b6:	f104 000b 	add.w	r0, r4, #11
 800e7ba:	1d23      	adds	r3, r4, #4
 800e7bc:	f020 0007 	bic.w	r0, r0, #7
 800e7c0:	1ac2      	subs	r2, r0, r3
 800e7c2:	bf1c      	itt	ne
 800e7c4:	1a1b      	subne	r3, r3, r0
 800e7c6:	50a3      	strne	r3, [r4, r2]
 800e7c8:	e7af      	b.n	800e72a <_malloc_r+0x22>
 800e7ca:	6862      	ldr	r2, [r4, #4]
 800e7cc:	42a3      	cmp	r3, r4
 800e7ce:	bf0c      	ite	eq
 800e7d0:	f8c8 2000 	streq.w	r2, [r8]
 800e7d4:	605a      	strne	r2, [r3, #4]
 800e7d6:	e7eb      	b.n	800e7b0 <_malloc_r+0xa8>
 800e7d8:	4623      	mov	r3, r4
 800e7da:	6864      	ldr	r4, [r4, #4]
 800e7dc:	e7ae      	b.n	800e73c <_malloc_r+0x34>
 800e7de:	463c      	mov	r4, r7
 800e7e0:	687f      	ldr	r7, [r7, #4]
 800e7e2:	e7b6      	b.n	800e752 <_malloc_r+0x4a>
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	42a3      	cmp	r3, r4
 800e7ea:	d1fb      	bne.n	800e7e4 <_malloc_r+0xdc>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	6053      	str	r3, [r2, #4]
 800e7f0:	e7de      	b.n	800e7b0 <_malloc_r+0xa8>
 800e7f2:	230c      	movs	r3, #12
 800e7f4:	4630      	mov	r0, r6
 800e7f6:	6033      	str	r3, [r6, #0]
 800e7f8:	f000 f80c 	bl	800e814 <__malloc_unlock>
 800e7fc:	e794      	b.n	800e728 <_malloc_r+0x20>
 800e7fe:	6005      	str	r5, [r0, #0]
 800e800:	e7d6      	b.n	800e7b0 <_malloc_r+0xa8>
 800e802:	bf00      	nop
 800e804:	2000083c 	.word	0x2000083c

0800e808 <__malloc_lock>:
 800e808:	4801      	ldr	r0, [pc, #4]	@ (800e810 <__malloc_lock+0x8>)
 800e80a:	f000 b84b 	b.w	800e8a4 <__retarget_lock_acquire_recursive>
 800e80e:	bf00      	nop
 800e810:	2000097c 	.word	0x2000097c

0800e814 <__malloc_unlock>:
 800e814:	4801      	ldr	r0, [pc, #4]	@ (800e81c <__malloc_unlock+0x8>)
 800e816:	f000 b846 	b.w	800e8a6 <__retarget_lock_release_recursive>
 800e81a:	bf00      	nop
 800e81c:	2000097c 	.word	0x2000097c

0800e820 <memset>:
 800e820:	4402      	add	r2, r0
 800e822:	4603      	mov	r3, r0
 800e824:	4293      	cmp	r3, r2
 800e826:	d100      	bne.n	800e82a <memset+0xa>
 800e828:	4770      	bx	lr
 800e82a:	f803 1b01 	strb.w	r1, [r3], #1
 800e82e:	e7f9      	b.n	800e824 <memset+0x4>

0800e830 <_sbrk_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	2300      	movs	r3, #0
 800e834:	4d05      	ldr	r5, [pc, #20]	@ (800e84c <_sbrk_r+0x1c>)
 800e836:	4604      	mov	r4, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	602b      	str	r3, [r5, #0]
 800e83c:	f7f5 fc26 	bl	800408c <_sbrk>
 800e840:	1c43      	adds	r3, r0, #1
 800e842:	d102      	bne.n	800e84a <_sbrk_r+0x1a>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	b103      	cbz	r3, 800e84a <_sbrk_r+0x1a>
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	bd38      	pop	{r3, r4, r5, pc}
 800e84c:	20000978 	.word	0x20000978

0800e850 <__errno>:
 800e850:	4b01      	ldr	r3, [pc, #4]	@ (800e858 <__errno+0x8>)
 800e852:	6818      	ldr	r0, [r3, #0]
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	20000014 	.word	0x20000014

0800e85c <__libc_init_array>:
 800e85c:	b570      	push	{r4, r5, r6, lr}
 800e85e:	4d0d      	ldr	r5, [pc, #52]	@ (800e894 <__libc_init_array+0x38>)
 800e860:	2600      	movs	r6, #0
 800e862:	4c0d      	ldr	r4, [pc, #52]	@ (800e898 <__libc_init_array+0x3c>)
 800e864:	1b64      	subs	r4, r4, r5
 800e866:	10a4      	asrs	r4, r4, #2
 800e868:	42a6      	cmp	r6, r4
 800e86a:	d109      	bne.n	800e880 <__libc_init_array+0x24>
 800e86c:	4d0b      	ldr	r5, [pc, #44]	@ (800e89c <__libc_init_array+0x40>)
 800e86e:	2600      	movs	r6, #0
 800e870:	4c0b      	ldr	r4, [pc, #44]	@ (800e8a0 <__libc_init_array+0x44>)
 800e872:	f001 fab9 	bl	800fde8 <_init>
 800e876:	1b64      	subs	r4, r4, r5
 800e878:	10a4      	asrs	r4, r4, #2
 800e87a:	42a6      	cmp	r6, r4
 800e87c:	d105      	bne.n	800e88a <__libc_init_array+0x2e>
 800e87e:	bd70      	pop	{r4, r5, r6, pc}
 800e880:	f855 3b04 	ldr.w	r3, [r5], #4
 800e884:	3601      	adds	r6, #1
 800e886:	4798      	blx	r3
 800e888:	e7ee      	b.n	800e868 <__libc_init_array+0xc>
 800e88a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e88e:	3601      	adds	r6, #1
 800e890:	4798      	blx	r3
 800e892:	e7f2      	b.n	800e87a <__libc_init_array+0x1e>
 800e894:	0800ff40 	.word	0x0800ff40
 800e898:	0800ff40 	.word	0x0800ff40
 800e89c:	0800ff40 	.word	0x0800ff40
 800e8a0:	0800ff44 	.word	0x0800ff44

0800e8a4 <__retarget_lock_acquire_recursive>:
 800e8a4:	4770      	bx	lr

0800e8a6 <__retarget_lock_release_recursive>:
 800e8a6:	4770      	bx	lr

0800e8a8 <_free_r>:
 800e8a8:	b538      	push	{r3, r4, r5, lr}
 800e8aa:	4605      	mov	r5, r0
 800e8ac:	2900      	cmp	r1, #0
 800e8ae:	d041      	beq.n	800e934 <_free_r+0x8c>
 800e8b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8b4:	1f0c      	subs	r4, r1, #4
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	bfb8      	it	lt
 800e8ba:	18e4      	addlt	r4, r4, r3
 800e8bc:	f7ff ffa4 	bl	800e808 <__malloc_lock>
 800e8c0:	4a1d      	ldr	r2, [pc, #116]	@ (800e938 <_free_r+0x90>)
 800e8c2:	6813      	ldr	r3, [r2, #0]
 800e8c4:	b933      	cbnz	r3, 800e8d4 <_free_r+0x2c>
 800e8c6:	6063      	str	r3, [r4, #4]
 800e8c8:	6014      	str	r4, [r2, #0]
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8d0:	f7ff bfa0 	b.w	800e814 <__malloc_unlock>
 800e8d4:	42a3      	cmp	r3, r4
 800e8d6:	d908      	bls.n	800e8ea <_free_r+0x42>
 800e8d8:	6820      	ldr	r0, [r4, #0]
 800e8da:	1821      	adds	r1, r4, r0
 800e8dc:	428b      	cmp	r3, r1
 800e8de:	bf01      	itttt	eq
 800e8e0:	6819      	ldreq	r1, [r3, #0]
 800e8e2:	685b      	ldreq	r3, [r3, #4]
 800e8e4:	1809      	addeq	r1, r1, r0
 800e8e6:	6021      	streq	r1, [r4, #0]
 800e8e8:	e7ed      	b.n	800e8c6 <_free_r+0x1e>
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	b10b      	cbz	r3, 800e8f4 <_free_r+0x4c>
 800e8f0:	42a3      	cmp	r3, r4
 800e8f2:	d9fa      	bls.n	800e8ea <_free_r+0x42>
 800e8f4:	6811      	ldr	r1, [r2, #0]
 800e8f6:	1850      	adds	r0, r2, r1
 800e8f8:	42a0      	cmp	r0, r4
 800e8fa:	d10b      	bne.n	800e914 <_free_r+0x6c>
 800e8fc:	6820      	ldr	r0, [r4, #0]
 800e8fe:	4401      	add	r1, r0
 800e900:	1850      	adds	r0, r2, r1
 800e902:	6011      	str	r1, [r2, #0]
 800e904:	4283      	cmp	r3, r0
 800e906:	d1e0      	bne.n	800e8ca <_free_r+0x22>
 800e908:	6818      	ldr	r0, [r3, #0]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	4408      	add	r0, r1
 800e90e:	6053      	str	r3, [r2, #4]
 800e910:	6010      	str	r0, [r2, #0]
 800e912:	e7da      	b.n	800e8ca <_free_r+0x22>
 800e914:	d902      	bls.n	800e91c <_free_r+0x74>
 800e916:	230c      	movs	r3, #12
 800e918:	602b      	str	r3, [r5, #0]
 800e91a:	e7d6      	b.n	800e8ca <_free_r+0x22>
 800e91c:	6820      	ldr	r0, [r4, #0]
 800e91e:	1821      	adds	r1, r4, r0
 800e920:	428b      	cmp	r3, r1
 800e922:	bf02      	ittt	eq
 800e924:	6819      	ldreq	r1, [r3, #0]
 800e926:	685b      	ldreq	r3, [r3, #4]
 800e928:	1809      	addeq	r1, r1, r0
 800e92a:	6063      	str	r3, [r4, #4]
 800e92c:	bf08      	it	eq
 800e92e:	6021      	streq	r1, [r4, #0]
 800e930:	6054      	str	r4, [r2, #4]
 800e932:	e7ca      	b.n	800e8ca <_free_r+0x22>
 800e934:	bd38      	pop	{r3, r4, r5, pc}
 800e936:	bf00      	nop
 800e938:	2000083c 	.word	0x2000083c
 800e93c:	00000000 	.word	0x00000000

0800e940 <log>:
 800e940:	b538      	push	{r3, r4, r5, lr}
 800e942:	ec55 4b10 	vmov	r4, r5, d0
 800e946:	ed2d 8b02 	vpush	{d8}
 800e94a:	f000 fa09 	bl	800ed60 <__ieee754_log>
 800e94e:	4622      	mov	r2, r4
 800e950:	462b      	mov	r3, r5
 800e952:	4620      	mov	r0, r4
 800e954:	4629      	mov	r1, r5
 800e956:	eeb0 8a40 	vmov.f32	s16, s0
 800e95a:	eef0 8a60 	vmov.f32	s17, s1
 800e95e:	f7f2 f8ed 	bl	8000b3c <__aeabi_dcmpun>
 800e962:	b998      	cbnz	r0, 800e98c <log+0x4c>
 800e964:	2200      	movs	r2, #0
 800e966:	2300      	movs	r3, #0
 800e968:	4620      	mov	r0, r4
 800e96a:	4629      	mov	r1, r5
 800e96c:	f7f2 f8dc 	bl	8000b28 <__aeabi_dcmpgt>
 800e970:	b960      	cbnz	r0, 800e98c <log+0x4c>
 800e972:	2200      	movs	r2, #0
 800e974:	2300      	movs	r3, #0
 800e976:	4620      	mov	r0, r4
 800e978:	4629      	mov	r1, r5
 800e97a:	f7f2 f8ad 	bl	8000ad8 <__aeabi_dcmpeq>
 800e97e:	b160      	cbz	r0, 800e99a <log+0x5a>
 800e980:	f7ff ff66 	bl	800e850 <__errno>
 800e984:	2322      	movs	r3, #34	@ 0x22
 800e986:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800e9b0 <log+0x70>
 800e98a:	6003      	str	r3, [r0, #0]
 800e98c:	eeb0 0a48 	vmov.f32	s0, s16
 800e990:	eef0 0a68 	vmov.f32	s1, s17
 800e994:	ecbd 8b02 	vpop	{d8}
 800e998:	bd38      	pop	{r3, r4, r5, pc}
 800e99a:	f7ff ff59 	bl	800e850 <__errno>
 800e99e:	2321      	movs	r3, #33	@ 0x21
 800e9a0:	ecbd 8b02 	vpop	{d8}
 800e9a4:	6003      	str	r3, [r0, #0]
 800e9a6:	4804      	ldr	r0, [pc, #16]	@ (800e9b8 <log+0x78>)
 800e9a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9ac:	f000 b8f0 	b.w	800eb90 <nan>
 800e9b0:	00000000 	.word	0x00000000
 800e9b4:	fff00000 	.word	0xfff00000
 800e9b8:	0800ff00 	.word	0x0800ff00
 800e9bc:	00000000 	.word	0x00000000

0800e9c0 <log10>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	ec55 4b10 	vmov	r4, r5, d0
 800e9c6:	ed2d 8b02 	vpush	{d8}
 800e9ca:	f000 fb7d 	bl	800f0c8 <__ieee754_log10>
 800e9ce:	4622      	mov	r2, r4
 800e9d0:	462b      	mov	r3, r5
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	4629      	mov	r1, r5
 800e9d6:	eeb0 8a40 	vmov.f32	s16, s0
 800e9da:	eef0 8a60 	vmov.f32	s17, s1
 800e9de:	f7f2 f8ad 	bl	8000b3c <__aeabi_dcmpun>
 800e9e2:	b998      	cbnz	r0, 800ea0c <log10+0x4c>
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	4629      	mov	r1, r5
 800e9ec:	f7f2 f888 	bl	8000b00 <__aeabi_dcmple>
 800e9f0:	b160      	cbz	r0, 800ea0c <log10+0x4c>
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	f7f2 f86d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e9fe:	b160      	cbz	r0, 800ea1a <log10+0x5a>
 800ea00:	f7ff ff26 	bl	800e850 <__errno>
 800ea04:	2322      	movs	r3, #34	@ 0x22
 800ea06:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800ea30 <log10+0x70>
 800ea0a:	6003      	str	r3, [r0, #0]
 800ea0c:	eeb0 0a48 	vmov.f32	s0, s16
 800ea10:	eef0 0a68 	vmov.f32	s1, s17
 800ea14:	ecbd 8b02 	vpop	{d8}
 800ea18:	bd38      	pop	{r3, r4, r5, pc}
 800ea1a:	f7ff ff19 	bl	800e850 <__errno>
 800ea1e:	2321      	movs	r3, #33	@ 0x21
 800ea20:	ecbd 8b02 	vpop	{d8}
 800ea24:	6003      	str	r3, [r0, #0]
 800ea26:	4804      	ldr	r0, [pc, #16]	@ (800ea38 <log10+0x78>)
 800ea28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea2c:	f000 b8b0 	b.w	800eb90 <nan>
 800ea30:	00000000 	.word	0x00000000
 800ea34:	fff00000 	.word	0xfff00000
 800ea38:	0800ff00 	.word	0x0800ff00

0800ea3c <pow>:
 800ea3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3e:	ec55 4b11 	vmov	r4, r5, d1
 800ea42:	ed2d 8b02 	vpush	{d8}
 800ea46:	eeb0 8a40 	vmov.f32	s16, s0
 800ea4a:	eef0 8a60 	vmov.f32	s17, s1
 800ea4e:	f000 fbc7 	bl	800f1e0 <__ieee754_pow>
 800ea52:	4622      	mov	r2, r4
 800ea54:	462b      	mov	r3, r5
 800ea56:	4620      	mov	r0, r4
 800ea58:	4629      	mov	r1, r5
 800ea5a:	ec57 6b10 	vmov	r6, r7, d0
 800ea5e:	f7f2 f86d 	bl	8000b3c <__aeabi_dcmpun>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	d13b      	bne.n	800eade <pow+0xa2>
 800ea66:	2200      	movs	r2, #0
 800ea68:	2300      	movs	r3, #0
 800ea6a:	ec51 0b18 	vmov	r0, r1, d8
 800ea6e:	f7f2 f833 	bl	8000ad8 <__aeabi_dcmpeq>
 800ea72:	b1b8      	cbz	r0, 800eaa4 <pow+0x68>
 800ea74:	2200      	movs	r2, #0
 800ea76:	2300      	movs	r3, #0
 800ea78:	4620      	mov	r0, r4
 800ea7a:	4629      	mov	r1, r5
 800ea7c:	f7f2 f82c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d146      	bne.n	800eb12 <pow+0xd6>
 800ea84:	ec45 4b10 	vmov	d0, r4, r5
 800ea88:	f000 f874 	bl	800eb74 <finite>
 800ea8c:	b338      	cbz	r0, 800eade <pow+0xa2>
 800ea8e:	2200      	movs	r2, #0
 800ea90:	2300      	movs	r3, #0
 800ea92:	4620      	mov	r0, r4
 800ea94:	4629      	mov	r1, r5
 800ea96:	f7f2 f829 	bl	8000aec <__aeabi_dcmplt>
 800ea9a:	b300      	cbz	r0, 800eade <pow+0xa2>
 800ea9c:	f7ff fed8 	bl	800e850 <__errno>
 800eaa0:	2322      	movs	r3, #34	@ 0x22
 800eaa2:	e01b      	b.n	800eadc <pow+0xa0>
 800eaa4:	ec47 6b10 	vmov	d0, r6, r7
 800eaa8:	f000 f864 	bl	800eb74 <finite>
 800eaac:	b9e0      	cbnz	r0, 800eae8 <pow+0xac>
 800eaae:	eeb0 0a48 	vmov.f32	s0, s16
 800eab2:	eef0 0a68 	vmov.f32	s1, s17
 800eab6:	f000 f85d 	bl	800eb74 <finite>
 800eaba:	b1a8      	cbz	r0, 800eae8 <pow+0xac>
 800eabc:	ec45 4b10 	vmov	d0, r4, r5
 800eac0:	f000 f858 	bl	800eb74 <finite>
 800eac4:	b180      	cbz	r0, 800eae8 <pow+0xac>
 800eac6:	4632      	mov	r2, r6
 800eac8:	463b      	mov	r3, r7
 800eaca:	4630      	mov	r0, r6
 800eacc:	4639      	mov	r1, r7
 800eace:	f7f2 f835 	bl	8000b3c <__aeabi_dcmpun>
 800ead2:	2800      	cmp	r0, #0
 800ead4:	d0e2      	beq.n	800ea9c <pow+0x60>
 800ead6:	f7ff febb 	bl	800e850 <__errno>
 800eada:	2321      	movs	r3, #33	@ 0x21
 800eadc:	6003      	str	r3, [r0, #0]
 800eade:	ecbd 8b02 	vpop	{d8}
 800eae2:	ec47 6b10 	vmov	d0, r6, r7
 800eae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eae8:	2200      	movs	r2, #0
 800eaea:	2300      	movs	r3, #0
 800eaec:	4630      	mov	r0, r6
 800eaee:	4639      	mov	r1, r7
 800eaf0:	f7f1 fff2 	bl	8000ad8 <__aeabi_dcmpeq>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	d0f2      	beq.n	800eade <pow+0xa2>
 800eaf8:	eeb0 0a48 	vmov.f32	s0, s16
 800eafc:	eef0 0a68 	vmov.f32	s1, s17
 800eb00:	f000 f838 	bl	800eb74 <finite>
 800eb04:	2800      	cmp	r0, #0
 800eb06:	d0ea      	beq.n	800eade <pow+0xa2>
 800eb08:	ec45 4b10 	vmov	d0, r4, r5
 800eb0c:	f000 f832 	bl	800eb74 <finite>
 800eb10:	e7c3      	b.n	800ea9a <pow+0x5e>
 800eb12:	2600      	movs	r6, #0
 800eb14:	4f00      	ldr	r7, [pc, #0]	@ (800eb18 <pow+0xdc>)
 800eb16:	e7e2      	b.n	800eade <pow+0xa2>
 800eb18:	3ff00000 	.word	0x3ff00000

0800eb1c <sqrt>:
 800eb1c:	b538      	push	{r3, r4, r5, lr}
 800eb1e:	ec55 4b10 	vmov	r4, r5, d0
 800eb22:	ed2d 8b02 	vpush	{d8}
 800eb26:	f000 f83b 	bl	800eba0 <__ieee754_sqrt>
 800eb2a:	4622      	mov	r2, r4
 800eb2c:	462b      	mov	r3, r5
 800eb2e:	4620      	mov	r0, r4
 800eb30:	4629      	mov	r1, r5
 800eb32:	eeb0 8a40 	vmov.f32	s16, s0
 800eb36:	eef0 8a60 	vmov.f32	s17, s1
 800eb3a:	f7f1 ffff 	bl	8000b3c <__aeabi_dcmpun>
 800eb3e:	b990      	cbnz	r0, 800eb66 <sqrt+0x4a>
 800eb40:	2200      	movs	r2, #0
 800eb42:	2300      	movs	r3, #0
 800eb44:	4620      	mov	r0, r4
 800eb46:	4629      	mov	r1, r5
 800eb48:	f7f1 ffd0 	bl	8000aec <__aeabi_dcmplt>
 800eb4c:	b158      	cbz	r0, 800eb66 <sqrt+0x4a>
 800eb4e:	f7ff fe7f 	bl	800e850 <__errno>
 800eb52:	2321      	movs	r3, #33	@ 0x21
 800eb54:	2200      	movs	r2, #0
 800eb56:	6003      	str	r3, [r0, #0]
 800eb58:	2300      	movs	r3, #0
 800eb5a:	4610      	mov	r0, r2
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	f7f1 fe7d 	bl	800085c <__aeabi_ddiv>
 800eb62:	ec41 0b18 	vmov	d8, r0, r1
 800eb66:	eeb0 0a48 	vmov.f32	s0, s16
 800eb6a:	eef0 0a68 	vmov.f32	s1, s17
 800eb6e:	ecbd 8b02 	vpop	{d8}
 800eb72:	bd38      	pop	{r3, r4, r5, pc}

0800eb74 <finite>:
 800eb74:	b082      	sub	sp, #8
 800eb76:	ed8d 0b00 	vstr	d0, [sp]
 800eb7a:	9801      	ldr	r0, [sp, #4]
 800eb7c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800eb80:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800eb84:	0fc0      	lsrs	r0, r0, #31
 800eb86:	b002      	add	sp, #8
 800eb88:	4770      	bx	lr
 800eb8a:	0000      	movs	r0, r0
 800eb8c:	0000      	movs	r0, r0
	...

0800eb90 <nan>:
 800eb90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800eb98 <nan+0x8>
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	00000000 	.word	0x00000000
 800eb9c:	7ff80000 	.word	0x7ff80000

0800eba0 <__ieee754_sqrt>:
 800eba0:	4a6b      	ldr	r2, [pc, #428]	@ (800ed50 <__ieee754_sqrt+0x1b0>)
 800eba2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba6:	ec55 4b10 	vmov	r4, r5, d0
 800ebaa:	43aa      	bics	r2, r5
 800ebac:	462b      	mov	r3, r5
 800ebae:	4621      	mov	r1, r4
 800ebb0:	d110      	bne.n	800ebd4 <__ieee754_sqrt+0x34>
 800ebb2:	4622      	mov	r2, r4
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	4629      	mov	r1, r5
 800ebb8:	f7f1 fd26 	bl	8000608 <__aeabi_dmul>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	4629      	mov	r1, r5
 800ebc4:	f7f1 fb6a 	bl	800029c <__adddf3>
 800ebc8:	4604      	mov	r4, r0
 800ebca:	460d      	mov	r5, r1
 800ebcc:	ec45 4b10 	vmov	d0, r4, r5
 800ebd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebd4:	2d00      	cmp	r5, #0
 800ebd6:	dc0e      	bgt.n	800ebf6 <__ieee754_sqrt+0x56>
 800ebd8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ebdc:	4322      	orrs	r2, r4
 800ebde:	d0f5      	beq.n	800ebcc <__ieee754_sqrt+0x2c>
 800ebe0:	b19d      	cbz	r5, 800ec0a <__ieee754_sqrt+0x6a>
 800ebe2:	4622      	mov	r2, r4
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	4629      	mov	r1, r5
 800ebe8:	f7f1 fb56 	bl	8000298 <__aeabi_dsub>
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	f7f1 fe34 	bl	800085c <__aeabi_ddiv>
 800ebf4:	e7e8      	b.n	800ebc8 <__ieee754_sqrt+0x28>
 800ebf6:	152a      	asrs	r2, r5, #20
 800ebf8:	d115      	bne.n	800ec26 <__ieee754_sqrt+0x86>
 800ebfa:	2000      	movs	r0, #0
 800ebfc:	e009      	b.n	800ec12 <__ieee754_sqrt+0x72>
 800ebfe:	0acb      	lsrs	r3, r1, #11
 800ec00:	3a15      	subs	r2, #21
 800ec02:	0549      	lsls	r1, r1, #21
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d0fa      	beq.n	800ebfe <__ieee754_sqrt+0x5e>
 800ec08:	e7f7      	b.n	800ebfa <__ieee754_sqrt+0x5a>
 800ec0a:	462a      	mov	r2, r5
 800ec0c:	e7fa      	b.n	800ec04 <__ieee754_sqrt+0x64>
 800ec0e:	005b      	lsls	r3, r3, #1
 800ec10:	3001      	adds	r0, #1
 800ec12:	02dc      	lsls	r4, r3, #11
 800ec14:	d5fb      	bpl.n	800ec0e <__ieee754_sqrt+0x6e>
 800ec16:	1e44      	subs	r4, r0, #1
 800ec18:	1b12      	subs	r2, r2, r4
 800ec1a:	f1c0 0420 	rsb	r4, r0, #32
 800ec1e:	fa21 f404 	lsr.w	r4, r1, r4
 800ec22:	4081      	lsls	r1, r0
 800ec24:	4323      	orrs	r3, r4
 800ec26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec2a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ec2e:	07d2      	lsls	r2, r2, #31
 800ec30:	f04f 0600 	mov.w	r6, #0
 800ec34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec38:	ea4f 0565 	mov.w	r5, r5, asr #1
 800ec3c:	f04f 0016 	mov.w	r0, #22
 800ec40:	4632      	mov	r2, r6
 800ec42:	bf58      	it	pl
 800ec44:	005b      	lslpl	r3, r3, #1
 800ec46:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ec4a:	bf5c      	itt	pl
 800ec4c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ec50:	0049      	lslpl	r1, r1, #1
 800ec52:	005b      	lsls	r3, r3, #1
 800ec54:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ec58:	0049      	lsls	r1, r1, #1
 800ec5a:	1917      	adds	r7, r2, r4
 800ec5c:	429f      	cmp	r7, r3
 800ec5e:	bfde      	ittt	le
 800ec60:	193a      	addle	r2, r7, r4
 800ec62:	1bdb      	suble	r3, r3, r7
 800ec64:	1936      	addle	r6, r6, r4
 800ec66:	0fcf      	lsrs	r7, r1, #31
 800ec68:	3801      	subs	r0, #1
 800ec6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ec6e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ec72:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ec76:	d1f0      	bne.n	800ec5a <__ieee754_sqrt+0xba>
 800ec78:	4604      	mov	r4, r0
 800ec7a:	2720      	movs	r7, #32
 800ec7c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ec80:	429a      	cmp	r2, r3
 800ec82:	eb00 0e0c 	add.w	lr, r0, ip
 800ec86:	db02      	blt.n	800ec8e <__ieee754_sqrt+0xee>
 800ec88:	d113      	bne.n	800ecb2 <__ieee754_sqrt+0x112>
 800ec8a:	458e      	cmp	lr, r1
 800ec8c:	d811      	bhi.n	800ecb2 <__ieee754_sqrt+0x112>
 800ec8e:	f1be 0f00 	cmp.w	lr, #0
 800ec92:	eb0e 000c 	add.w	r0, lr, ip
 800ec96:	da43      	bge.n	800ed20 <__ieee754_sqrt+0x180>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	db41      	blt.n	800ed20 <__ieee754_sqrt+0x180>
 800ec9c:	f102 0801 	add.w	r8, r2, #1
 800eca0:	1a9b      	subs	r3, r3, r2
 800eca2:	458e      	cmp	lr, r1
 800eca4:	4464      	add	r4, ip
 800eca6:	eba1 010e 	sub.w	r1, r1, lr
 800ecaa:	bf88      	it	hi
 800ecac:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ecb0:	4642      	mov	r2, r8
 800ecb2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ecb6:	3f01      	subs	r7, #1
 800ecb8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ecbc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ecc0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ecc4:	d1dc      	bne.n	800ec80 <__ieee754_sqrt+0xe0>
 800ecc6:	4319      	orrs	r1, r3
 800ecc8:	d01b      	beq.n	800ed02 <__ieee754_sqrt+0x162>
 800ecca:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800ed54 <__ieee754_sqrt+0x1b4>
 800ecce:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800ed58 <__ieee754_sqrt+0x1b8>
 800ecd2:	e9da 0100 	ldrd	r0, r1, [sl]
 800ecd6:	e9db 2300 	ldrd	r2, r3, [fp]
 800ecda:	e9da 8900 	ldrd	r8, r9, [sl]
 800ecde:	f7f1 fadb 	bl	8000298 <__aeabi_dsub>
 800ece2:	4602      	mov	r2, r0
 800ece4:	460b      	mov	r3, r1
 800ece6:	4640      	mov	r0, r8
 800ece8:	4649      	mov	r1, r9
 800ecea:	f7f1 ff09 	bl	8000b00 <__aeabi_dcmple>
 800ecee:	b140      	cbz	r0, 800ed02 <__ieee754_sqrt+0x162>
 800ecf0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ecf4:	e9da 0100 	ldrd	r0, r1, [sl]
 800ecf8:	e9db 2300 	ldrd	r2, r3, [fp]
 800ecfc:	d112      	bne.n	800ed24 <__ieee754_sqrt+0x184>
 800ecfe:	3601      	adds	r6, #1
 800ed00:	463c      	mov	r4, r7
 800ed02:	1072      	asrs	r2, r6, #1
 800ed04:	07f1      	lsls	r1, r6, #31
 800ed06:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800ed0a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ed0e:	bf48      	it	mi
 800ed10:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ed14:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ed18:	4618      	mov	r0, r3
 800ed1a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ed1e:	e753      	b.n	800ebc8 <__ieee754_sqrt+0x28>
 800ed20:	4690      	mov	r8, r2
 800ed22:	e7bd      	b.n	800eca0 <__ieee754_sqrt+0x100>
 800ed24:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed28:	f7f1 fab8 	bl	800029c <__adddf3>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	460b      	mov	r3, r1
 800ed30:	4640      	mov	r0, r8
 800ed32:	4649      	mov	r1, r9
 800ed34:	f7f1 feda 	bl	8000aec <__aeabi_dcmplt>
 800ed38:	b128      	cbz	r0, 800ed46 <__ieee754_sqrt+0x1a6>
 800ed3a:	1ca0      	adds	r0, r4, #2
 800ed3c:	f104 0402 	add.w	r4, r4, #2
 800ed40:	bf08      	it	eq
 800ed42:	3601      	addeq	r6, #1
 800ed44:	e7dd      	b.n	800ed02 <__ieee754_sqrt+0x162>
 800ed46:	1c63      	adds	r3, r4, #1
 800ed48:	f023 0401 	bic.w	r4, r3, #1
 800ed4c:	e7d9      	b.n	800ed02 <__ieee754_sqrt+0x162>
 800ed4e:	bf00      	nop
 800ed50:	7ff00000 	.word	0x7ff00000
 800ed54:	20000070 	.word	0x20000070
 800ed58:	20000068 	.word	0x20000068
 800ed5c:	00000000 	.word	0x00000000

0800ed60 <__ieee754_log>:
 800ed60:	ec51 0b10 	vmov	r0, r1, d0
 800ed64:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800ed68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed6c:	460d      	mov	r5, r1
 800ed6e:	b087      	sub	sp, #28
 800ed70:	da26      	bge.n	800edc0 <__ieee754_log+0x60>
 800ed72:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ed76:	4602      	mov	r2, r0
 800ed78:	4303      	orrs	r3, r0
 800ed7a:	d10a      	bne.n	800ed92 <__ieee754_log+0x32>
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	2300      	movs	r3, #0
 800ed80:	2000      	movs	r0, #0
 800ed82:	49cb      	ldr	r1, [pc, #812]	@ (800f0b0 <__ieee754_log+0x350>)
 800ed84:	f7f1 fd6a 	bl	800085c <__aeabi_ddiv>
 800ed88:	ec41 0b10 	vmov	d0, r0, r1
 800ed8c:	b007      	add	sp, #28
 800ed8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed92:	2900      	cmp	r1, #0
 800ed94:	da05      	bge.n	800eda2 <__ieee754_log+0x42>
 800ed96:	460b      	mov	r3, r1
 800ed98:	f7f1 fa7e 	bl	8000298 <__aeabi_dsub>
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	2300      	movs	r3, #0
 800eda0:	e7f0      	b.n	800ed84 <__ieee754_log+0x24>
 800eda2:	4bc4      	ldr	r3, [pc, #784]	@ (800f0b4 <__ieee754_log+0x354>)
 800eda4:	2200      	movs	r2, #0
 800eda6:	f7f1 fc2f 	bl	8000608 <__aeabi_dmul>
 800edaa:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800edae:	460d      	mov	r5, r1
 800edb0:	4ac1      	ldr	r2, [pc, #772]	@ (800f0b8 <__ieee754_log+0x358>)
 800edb2:	4295      	cmp	r5, r2
 800edb4:	dd06      	ble.n	800edc4 <__ieee754_log+0x64>
 800edb6:	4602      	mov	r2, r0
 800edb8:	460b      	mov	r3, r1
 800edba:	f7f1 fa6f 	bl	800029c <__adddf3>
 800edbe:	e7e3      	b.n	800ed88 <__ieee754_log+0x28>
 800edc0:	2300      	movs	r3, #0
 800edc2:	e7f5      	b.n	800edb0 <__ieee754_log+0x50>
 800edc4:	152c      	asrs	r4, r5, #20
 800edc6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800edca:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800edce:	441c      	add	r4, r3
 800edd0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800edd4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800edd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800eddc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800ede0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ede4:	4bb5      	ldr	r3, [pc, #724]	@ (800f0bc <__ieee754_log+0x35c>)
 800ede6:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800edea:	ea42 0105 	orr.w	r1, r2, r5
 800edee:	2200      	movs	r2, #0
 800edf0:	f7f1 fa52 	bl	8000298 <__aeabi_dsub>
 800edf4:	1cab      	adds	r3, r5, #2
 800edf6:	4682      	mov	sl, r0
 800edf8:	468b      	mov	fp, r1
 800edfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edfe:	2200      	movs	r2, #0
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	dc53      	bgt.n	800eeac <__ieee754_log+0x14c>
 800ee04:	2300      	movs	r3, #0
 800ee06:	f7f1 fe67 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee0a:	b1d0      	cbz	r0, 800ee42 <__ieee754_log+0xe2>
 800ee0c:	2c00      	cmp	r4, #0
 800ee0e:	f000 8120 	beq.w	800f052 <__ieee754_log+0x2f2>
 800ee12:	4620      	mov	r0, r4
 800ee14:	f7f1 fb8e 	bl	8000534 <__aeabi_i2d>
 800ee18:	4606      	mov	r6, r0
 800ee1a:	460f      	mov	r7, r1
 800ee1c:	a38e      	add	r3, pc, #568	@ (adr r3, 800f058 <__ieee754_log+0x2f8>)
 800ee1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee22:	f7f1 fbf1 	bl	8000608 <__aeabi_dmul>
 800ee26:	4604      	mov	r4, r0
 800ee28:	460d      	mov	r5, r1
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	4639      	mov	r1, r7
 800ee2e:	a38c      	add	r3, pc, #560	@ (adr r3, 800f060 <__ieee754_log+0x300>)
 800ee30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee34:	f7f1 fbe8 	bl	8000608 <__aeabi_dmul>
 800ee38:	4602      	mov	r2, r0
 800ee3a:	460b      	mov	r3, r1
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	4629      	mov	r1, r5
 800ee40:	e7bb      	b.n	800edba <__ieee754_log+0x5a>
 800ee42:	a389      	add	r3, pc, #548	@ (adr r3, 800f068 <__ieee754_log+0x308>)
 800ee44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee48:	4650      	mov	r0, sl
 800ee4a:	4659      	mov	r1, fp
 800ee4c:	f7f1 fbdc 	bl	8000608 <__aeabi_dmul>
 800ee50:	4602      	mov	r2, r0
 800ee52:	460b      	mov	r3, r1
 800ee54:	2000      	movs	r0, #0
 800ee56:	499a      	ldr	r1, [pc, #616]	@ (800f0c0 <__ieee754_log+0x360>)
 800ee58:	f7f1 fa1e 	bl	8000298 <__aeabi_dsub>
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	460f      	mov	r7, r1
 800ee60:	4652      	mov	r2, sl
 800ee62:	465b      	mov	r3, fp
 800ee64:	4650      	mov	r0, sl
 800ee66:	4659      	mov	r1, fp
 800ee68:	f7f1 fbce 	bl	8000608 <__aeabi_dmul>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	460b      	mov	r3, r1
 800ee70:	4630      	mov	r0, r6
 800ee72:	4639      	mov	r1, r7
 800ee74:	f7f1 fbc8 	bl	8000608 <__aeabi_dmul>
 800ee78:	4606      	mov	r6, r0
 800ee7a:	460f      	mov	r7, r1
 800ee7c:	b914      	cbnz	r4, 800ee84 <__ieee754_log+0x124>
 800ee7e:	4632      	mov	r2, r6
 800ee80:	463b      	mov	r3, r7
 800ee82:	e0a0      	b.n	800efc6 <__ieee754_log+0x266>
 800ee84:	4620      	mov	r0, r4
 800ee86:	f7f1 fb55 	bl	8000534 <__aeabi_i2d>
 800ee8a:	4680      	mov	r8, r0
 800ee8c:	4689      	mov	r9, r1
 800ee8e:	a372      	add	r3, pc, #456	@ (adr r3, 800f058 <__ieee754_log+0x2f8>)
 800ee90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee94:	f7f1 fbb8 	bl	8000608 <__aeabi_dmul>
 800ee98:	4604      	mov	r4, r0
 800ee9a:	460d      	mov	r5, r1
 800ee9c:	4640      	mov	r0, r8
 800ee9e:	4649      	mov	r1, r9
 800eea0:	a36f      	add	r3, pc, #444	@ (adr r3, 800f060 <__ieee754_log+0x300>)
 800eea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea6:	f7f1 fbaf 	bl	8000608 <__aeabi_dmul>
 800eeaa:	e0a5      	b.n	800eff8 <__ieee754_log+0x298>
 800eeac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eeb0:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800eeb4:	f7f1 f9f2 	bl	800029c <__adddf3>
 800eeb8:	4602      	mov	r2, r0
 800eeba:	460b      	mov	r3, r1
 800eebc:	4650      	mov	r0, sl
 800eebe:	4659      	mov	r1, fp
 800eec0:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800eec4:	f7f1 fcca 	bl	800085c <__aeabi_ddiv>
 800eec8:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800eecc:	3551      	adds	r5, #81	@ 0x51
 800eece:	e9cd 0100 	strd	r0, r1, [sp]
 800eed2:	4620      	mov	r0, r4
 800eed4:	4335      	orrs	r5, r6
 800eed6:	f7f1 fb2d 	bl	8000534 <__aeabi_i2d>
 800eeda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eee2:	4610      	mov	r0, r2
 800eee4:	4619      	mov	r1, r3
 800eee6:	f7f1 fb8f 	bl	8000608 <__aeabi_dmul>
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eef2:	f7f1 fb89 	bl	8000608 <__aeabi_dmul>
 800eef6:	4680      	mov	r8, r0
 800eef8:	4689      	mov	r9, r1
 800eefa:	a35d      	add	r3, pc, #372	@ (adr r3, 800f070 <__ieee754_log+0x310>)
 800eefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef00:	f7f1 fb82 	bl	8000608 <__aeabi_dmul>
 800ef04:	a35c      	add	r3, pc, #368	@ (adr r3, 800f078 <__ieee754_log+0x318>)
 800ef06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0a:	f7f1 f9c7 	bl	800029c <__adddf3>
 800ef0e:	4642      	mov	r2, r8
 800ef10:	464b      	mov	r3, r9
 800ef12:	f7f1 fb79 	bl	8000608 <__aeabi_dmul>
 800ef16:	a35a      	add	r3, pc, #360	@ (adr r3, 800f080 <__ieee754_log+0x320>)
 800ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1c:	f7f1 f9be 	bl	800029c <__adddf3>
 800ef20:	4642      	mov	r2, r8
 800ef22:	464b      	mov	r3, r9
 800ef24:	f7f1 fb70 	bl	8000608 <__aeabi_dmul>
 800ef28:	a357      	add	r3, pc, #348	@ (adr r3, 800f088 <__ieee754_log+0x328>)
 800ef2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2e:	f7f1 f9b5 	bl	800029c <__adddf3>
 800ef32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef36:	f7f1 fb67 	bl	8000608 <__aeabi_dmul>
 800ef3a:	a355      	add	r3, pc, #340	@ (adr r3, 800f090 <__ieee754_log+0x330>)
 800ef3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef44:	4640      	mov	r0, r8
 800ef46:	4649      	mov	r1, r9
 800ef48:	f7f1 fb5e 	bl	8000608 <__aeabi_dmul>
 800ef4c:	a352      	add	r3, pc, #328	@ (adr r3, 800f098 <__ieee754_log+0x338>)
 800ef4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef52:	f7f1 f9a3 	bl	800029c <__adddf3>
 800ef56:	4642      	mov	r2, r8
 800ef58:	464b      	mov	r3, r9
 800ef5a:	f7f1 fb55 	bl	8000608 <__aeabi_dmul>
 800ef5e:	a350      	add	r3, pc, #320	@ (adr r3, 800f0a0 <__ieee754_log+0x340>)
 800ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef64:	f7f1 f99a 	bl	800029c <__adddf3>
 800ef68:	4642      	mov	r2, r8
 800ef6a:	464b      	mov	r3, r9
 800ef6c:	f7f1 fb4c 	bl	8000608 <__aeabi_dmul>
 800ef70:	4602      	mov	r2, r0
 800ef72:	460b      	mov	r3, r1
 800ef74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef78:	f7f1 f990 	bl	800029c <__adddf3>
 800ef7c:	2d00      	cmp	r5, #0
 800ef7e:	4680      	mov	r8, r0
 800ef80:	4689      	mov	r9, r1
 800ef82:	dd48      	ble.n	800f016 <__ieee754_log+0x2b6>
 800ef84:	2200      	movs	r2, #0
 800ef86:	4b4e      	ldr	r3, [pc, #312]	@ (800f0c0 <__ieee754_log+0x360>)
 800ef88:	4650      	mov	r0, sl
 800ef8a:	4659      	mov	r1, fp
 800ef8c:	f7f1 fb3c 	bl	8000608 <__aeabi_dmul>
 800ef90:	4652      	mov	r2, sl
 800ef92:	465b      	mov	r3, fp
 800ef94:	f7f1 fb38 	bl	8000608 <__aeabi_dmul>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	460b      	mov	r3, r1
 800ef9c:	4606      	mov	r6, r0
 800ef9e:	460f      	mov	r7, r1
 800efa0:	4640      	mov	r0, r8
 800efa2:	4649      	mov	r1, r9
 800efa4:	f7f1 f97a 	bl	800029c <__adddf3>
 800efa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efac:	f7f1 fb2c 	bl	8000608 <__aeabi_dmul>
 800efb0:	4680      	mov	r8, r0
 800efb2:	4689      	mov	r9, r1
 800efb4:	b964      	cbnz	r4, 800efd0 <__ieee754_log+0x270>
 800efb6:	4602      	mov	r2, r0
 800efb8:	460b      	mov	r3, r1
 800efba:	4630      	mov	r0, r6
 800efbc:	4639      	mov	r1, r7
 800efbe:	f7f1 f96b 	bl	8000298 <__aeabi_dsub>
 800efc2:	4602      	mov	r2, r0
 800efc4:	460b      	mov	r3, r1
 800efc6:	4650      	mov	r0, sl
 800efc8:	4659      	mov	r1, fp
 800efca:	f7f1 f965 	bl	8000298 <__aeabi_dsub>
 800efce:	e6db      	b.n	800ed88 <__ieee754_log+0x28>
 800efd0:	a321      	add	r3, pc, #132	@ (adr r3, 800f058 <__ieee754_log+0x2f8>)
 800efd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efda:	f7f1 fb15 	bl	8000608 <__aeabi_dmul>
 800efde:	4604      	mov	r4, r0
 800efe0:	460d      	mov	r5, r1
 800efe2:	a31f      	add	r3, pc, #124	@ (adr r3, 800f060 <__ieee754_log+0x300>)
 800efe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efec:	f7f1 fb0c 	bl	8000608 <__aeabi_dmul>
 800eff0:	4642      	mov	r2, r8
 800eff2:	464b      	mov	r3, r9
 800eff4:	f7f1 f952 	bl	800029c <__adddf3>
 800eff8:	4602      	mov	r2, r0
 800effa:	460b      	mov	r3, r1
 800effc:	4630      	mov	r0, r6
 800effe:	4639      	mov	r1, r7
 800f000:	f7f1 f94a 	bl	8000298 <__aeabi_dsub>
 800f004:	4652      	mov	r2, sl
 800f006:	465b      	mov	r3, fp
 800f008:	f7f1 f946 	bl	8000298 <__aeabi_dsub>
 800f00c:	4602      	mov	r2, r0
 800f00e:	460b      	mov	r3, r1
 800f010:	4620      	mov	r0, r4
 800f012:	4629      	mov	r1, r5
 800f014:	e7d9      	b.n	800efca <__ieee754_log+0x26a>
 800f016:	4602      	mov	r2, r0
 800f018:	460b      	mov	r3, r1
 800f01a:	4650      	mov	r0, sl
 800f01c:	4659      	mov	r1, fp
 800f01e:	f7f1 f93b 	bl	8000298 <__aeabi_dsub>
 800f022:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f026:	f7f1 faef 	bl	8000608 <__aeabi_dmul>
 800f02a:	4606      	mov	r6, r0
 800f02c:	460f      	mov	r7, r1
 800f02e:	2c00      	cmp	r4, #0
 800f030:	f43f af25 	beq.w	800ee7e <__ieee754_log+0x11e>
 800f034:	a308      	add	r3, pc, #32	@ (adr r3, 800f058 <__ieee754_log+0x2f8>)
 800f036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f03e:	f7f1 fae3 	bl	8000608 <__aeabi_dmul>
 800f042:	4604      	mov	r4, r0
 800f044:	460d      	mov	r5, r1
 800f046:	a306      	add	r3, pc, #24	@ (adr r3, 800f060 <__ieee754_log+0x300>)
 800f048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f050:	e729      	b.n	800eea6 <__ieee754_log+0x146>
 800f052:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 800f0a8 <__ieee754_log+0x348>
 800f056:	e699      	b.n	800ed8c <__ieee754_log+0x2c>
 800f058:	fee00000 	.word	0xfee00000
 800f05c:	3fe62e42 	.word	0x3fe62e42
 800f060:	35793c76 	.word	0x35793c76
 800f064:	3dea39ef 	.word	0x3dea39ef
 800f068:	55555555 	.word	0x55555555
 800f06c:	3fd55555 	.word	0x3fd55555
 800f070:	df3e5244 	.word	0xdf3e5244
 800f074:	3fc2f112 	.word	0x3fc2f112
 800f078:	96cb03de 	.word	0x96cb03de
 800f07c:	3fc74664 	.word	0x3fc74664
 800f080:	94229359 	.word	0x94229359
 800f084:	3fd24924 	.word	0x3fd24924
 800f088:	55555593 	.word	0x55555593
 800f08c:	3fe55555 	.word	0x3fe55555
 800f090:	d078c69f 	.word	0xd078c69f
 800f094:	3fc39a09 	.word	0x3fc39a09
 800f098:	1d8e78af 	.word	0x1d8e78af
 800f09c:	3fcc71c5 	.word	0x3fcc71c5
 800f0a0:	9997fa04 	.word	0x9997fa04
 800f0a4:	3fd99999 	.word	0x3fd99999
	...
 800f0b0:	c3500000 	.word	0xc3500000
 800f0b4:	43500000 	.word	0x43500000
 800f0b8:	7fefffff 	.word	0x7fefffff
 800f0bc:	3ff00000 	.word	0x3ff00000
 800f0c0:	3fe00000 	.word	0x3fe00000
 800f0c4:	00000000 	.word	0x00000000

0800f0c8 <__ieee754_log10>:
 800f0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0cc:	ec55 4b10 	vmov	r4, r5, d0
 800f0d0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800f0d4:	462b      	mov	r3, r5
 800f0d6:	ed2d 8b02 	vpush	{d8}
 800f0da:	da2e      	bge.n	800f13a <__ieee754_log10+0x72>
 800f0dc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f0e0:	4322      	orrs	r2, r4
 800f0e2:	d10b      	bne.n	800f0fc <__ieee754_log10+0x34>
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	4939      	ldr	r1, [pc, #228]	@ (800f1d0 <__ieee754_log10+0x108>)
 800f0ec:	f7f1 fbb6 	bl	800085c <__aeabi_ddiv>
 800f0f0:	ecbd 8b02 	vpop	{d8}
 800f0f4:	ec41 0b10 	vmov	d0, r0, r1
 800f0f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0fc:	2d00      	cmp	r5, #0
 800f0fe:	da07      	bge.n	800f110 <__ieee754_log10+0x48>
 800f100:	4622      	mov	r2, r4
 800f102:	4620      	mov	r0, r4
 800f104:	4629      	mov	r1, r5
 800f106:	f7f1 f8c7 	bl	8000298 <__aeabi_dsub>
 800f10a:	2200      	movs	r2, #0
 800f10c:	2300      	movs	r3, #0
 800f10e:	e7ed      	b.n	800f0ec <__ieee754_log10+0x24>
 800f110:	2200      	movs	r2, #0
 800f112:	4b30      	ldr	r3, [pc, #192]	@ (800f1d4 <__ieee754_log10+0x10c>)
 800f114:	4620      	mov	r0, r4
 800f116:	4629      	mov	r1, r5
 800f118:	f7f1 fa76 	bl	8000608 <__aeabi_dmul>
 800f11c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800f120:	4604      	mov	r4, r0
 800f122:	460d      	mov	r5, r1
 800f124:	460b      	mov	r3, r1
 800f126:	492c      	ldr	r1, [pc, #176]	@ (800f1d8 <__ieee754_log10+0x110>)
 800f128:	428b      	cmp	r3, r1
 800f12a:	dd08      	ble.n	800f13e <__ieee754_log10+0x76>
 800f12c:	4622      	mov	r2, r4
 800f12e:	462b      	mov	r3, r5
 800f130:	4620      	mov	r0, r4
 800f132:	4629      	mov	r1, r5
 800f134:	f7f1 f8b2 	bl	800029c <__adddf3>
 800f138:	e7da      	b.n	800f0f0 <__ieee754_log10+0x28>
 800f13a:	2200      	movs	r2, #0
 800f13c:	e7f3      	b.n	800f126 <__ieee754_log10+0x5e>
 800f13e:	1518      	asrs	r0, r3, #20
 800f140:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800f144:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800f148:	4410      	add	r0, r2
 800f14a:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800f14e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800f152:	f7f1 f9ef 	bl	8000534 <__aeabi_i2d>
 800f156:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 800f15a:	4606      	mov	r6, r0
 800f15c:	460f      	mov	r7, r1
 800f15e:	3303      	adds	r3, #3
 800f160:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800f164:	a314      	add	r3, pc, #80	@ (adr r3, 800f1b8 <__ieee754_log10+0xf0>)
 800f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16a:	ec45 4b18 	vmov	d8, r4, r5
 800f16e:	f7f1 fa4b 	bl	8000608 <__aeabi_dmul>
 800f172:	eeb0 0a48 	vmov.f32	s0, s16
 800f176:	eef0 0a68 	vmov.f32	s1, s17
 800f17a:	4604      	mov	r4, r0
 800f17c:	460d      	mov	r5, r1
 800f17e:	f7ff fdef 	bl	800ed60 <__ieee754_log>
 800f182:	a30f      	add	r3, pc, #60	@ (adr r3, 800f1c0 <__ieee754_log10+0xf8>)
 800f184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f188:	ec51 0b10 	vmov	r0, r1, d0
 800f18c:	f7f1 fa3c 	bl	8000608 <__aeabi_dmul>
 800f190:	4622      	mov	r2, r4
 800f192:	462b      	mov	r3, r5
 800f194:	f7f1 f882 	bl	800029c <__adddf3>
 800f198:	4604      	mov	r4, r0
 800f19a:	460d      	mov	r5, r1
 800f19c:	4630      	mov	r0, r6
 800f19e:	4639      	mov	r1, r7
 800f1a0:	a309      	add	r3, pc, #36	@ (adr r3, 800f1c8 <__ieee754_log10+0x100>)
 800f1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a6:	f7f1 fa2f 	bl	8000608 <__aeabi_dmul>
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	4629      	mov	r1, r5
 800f1b2:	e7bf      	b.n	800f134 <__ieee754_log10+0x6c>
 800f1b4:	f3af 8000 	nop.w
 800f1b8:	11f12b36 	.word	0x11f12b36
 800f1bc:	3d59fef3 	.word	0x3d59fef3
 800f1c0:	1526e50e 	.word	0x1526e50e
 800f1c4:	3fdbcb7b 	.word	0x3fdbcb7b
 800f1c8:	509f6000 	.word	0x509f6000
 800f1cc:	3fd34413 	.word	0x3fd34413
 800f1d0:	c3500000 	.word	0xc3500000
 800f1d4:	43500000 	.word	0x43500000
 800f1d8:	7fefffff 	.word	0x7fefffff
 800f1dc:	00000000 	.word	0x00000000

0800f1e0 <__ieee754_pow>:
 800f1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e4:	b091      	sub	sp, #68	@ 0x44
 800f1e6:	ed8d 1b00 	vstr	d1, [sp]
 800f1ea:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f1ee:	ec57 6b10 	vmov	r6, r7, d0
 800f1f2:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f1f6:	ea5a 0001 	orrs.w	r0, sl, r1
 800f1fa:	d113      	bne.n	800f224 <__ieee754_pow+0x44>
 800f1fc:	19b3      	adds	r3, r6, r6
 800f1fe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f202:	4152      	adcs	r2, r2
 800f204:	4298      	cmp	r0, r3
 800f206:	4b96      	ldr	r3, [pc, #600]	@ (800f460 <__ieee754_pow+0x280>)
 800f208:	4193      	sbcs	r3, r2
 800f20a:	f080 84e7 	bcs.w	800fbdc <__ieee754_pow+0x9fc>
 800f20e:	4630      	mov	r0, r6
 800f210:	4639      	mov	r1, r7
 800f212:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f216:	f7f1 f841 	bl	800029c <__adddf3>
 800f21a:	ec41 0b10 	vmov	d0, r0, r1
 800f21e:	b011      	add	sp, #68	@ 0x44
 800f220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f224:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f228:	4a8e      	ldr	r2, [pc, #568]	@ (800f464 <__ieee754_pow+0x284>)
 800f22a:	463d      	mov	r5, r7
 800f22c:	4633      	mov	r3, r6
 800f22e:	4590      	cmp	r8, r2
 800f230:	d806      	bhi.n	800f240 <__ieee754_pow+0x60>
 800f232:	d101      	bne.n	800f238 <__ieee754_pow+0x58>
 800f234:	2e00      	cmp	r6, #0
 800f236:	d1ea      	bne.n	800f20e <__ieee754_pow+0x2e>
 800f238:	4592      	cmp	sl, r2
 800f23a:	d801      	bhi.n	800f240 <__ieee754_pow+0x60>
 800f23c:	d10e      	bne.n	800f25c <__ieee754_pow+0x7c>
 800f23e:	b169      	cbz	r1, 800f25c <__ieee754_pow+0x7c>
 800f240:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f244:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f248:	431d      	orrs	r5, r3
 800f24a:	d1e0      	bne.n	800f20e <__ieee754_pow+0x2e>
 800f24c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f250:	18db      	adds	r3, r3, r3
 800f252:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f256:	4152      	adcs	r2, r2
 800f258:	429d      	cmp	r5, r3
 800f25a:	e7d4      	b.n	800f206 <__ieee754_pow+0x26>
 800f25c:	2d00      	cmp	r5, #0
 800f25e:	46c3      	mov	fp, r8
 800f260:	da3a      	bge.n	800f2d8 <__ieee754_pow+0xf8>
 800f262:	4a81      	ldr	r2, [pc, #516]	@ (800f468 <__ieee754_pow+0x288>)
 800f264:	4592      	cmp	sl, r2
 800f266:	d84d      	bhi.n	800f304 <__ieee754_pow+0x124>
 800f268:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f26c:	4592      	cmp	sl, r2
 800f26e:	f240 84c4 	bls.w	800fbfa <__ieee754_pow+0xa1a>
 800f272:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f276:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f27a:	2a14      	cmp	r2, #20
 800f27c:	dd0f      	ble.n	800f29e <__ieee754_pow+0xbe>
 800f27e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f282:	fa21 f402 	lsr.w	r4, r1, r2
 800f286:	fa04 f202 	lsl.w	r2, r4, r2
 800f28a:	428a      	cmp	r2, r1
 800f28c:	f040 84b5 	bne.w	800fbfa <__ieee754_pow+0xa1a>
 800f290:	f004 0401 	and.w	r4, r4, #1
 800f294:	f1c4 0402 	rsb	r4, r4, #2
 800f298:	2900      	cmp	r1, #0
 800f29a:	d158      	bne.n	800f34e <__ieee754_pow+0x16e>
 800f29c:	e00e      	b.n	800f2bc <__ieee754_pow+0xdc>
 800f29e:	2900      	cmp	r1, #0
 800f2a0:	d154      	bne.n	800f34c <__ieee754_pow+0x16c>
 800f2a2:	f1c2 0214 	rsb	r2, r2, #20
 800f2a6:	fa4a f402 	asr.w	r4, sl, r2
 800f2aa:	fa04 f202 	lsl.w	r2, r4, r2
 800f2ae:	4552      	cmp	r2, sl
 800f2b0:	f040 84a0 	bne.w	800fbf4 <__ieee754_pow+0xa14>
 800f2b4:	f004 0401 	and.w	r4, r4, #1
 800f2b8:	f1c4 0402 	rsb	r4, r4, #2
 800f2bc:	4a6b      	ldr	r2, [pc, #428]	@ (800f46c <__ieee754_pow+0x28c>)
 800f2be:	4592      	cmp	sl, r2
 800f2c0:	d12e      	bne.n	800f320 <__ieee754_pow+0x140>
 800f2c2:	f1b9 0f00 	cmp.w	r9, #0
 800f2c6:	f280 8491 	bge.w	800fbec <__ieee754_pow+0xa0c>
 800f2ca:	4632      	mov	r2, r6
 800f2cc:	463b      	mov	r3, r7
 800f2ce:	2000      	movs	r0, #0
 800f2d0:	4966      	ldr	r1, [pc, #408]	@ (800f46c <__ieee754_pow+0x28c>)
 800f2d2:	f7f1 fac3 	bl	800085c <__aeabi_ddiv>
 800f2d6:	e7a0      	b.n	800f21a <__ieee754_pow+0x3a>
 800f2d8:	2400      	movs	r4, #0
 800f2da:	bbc1      	cbnz	r1, 800f34e <__ieee754_pow+0x16e>
 800f2dc:	4a61      	ldr	r2, [pc, #388]	@ (800f464 <__ieee754_pow+0x284>)
 800f2de:	4592      	cmp	sl, r2
 800f2e0:	d1ec      	bne.n	800f2bc <__ieee754_pow+0xdc>
 800f2e2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f2e6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f2ea:	431a      	orrs	r2, r3
 800f2ec:	f000 8476 	beq.w	800fbdc <__ieee754_pow+0x9fc>
 800f2f0:	4b5f      	ldr	r3, [pc, #380]	@ (800f470 <__ieee754_pow+0x290>)
 800f2f2:	4598      	cmp	r8, r3
 800f2f4:	d908      	bls.n	800f308 <__ieee754_pow+0x128>
 800f2f6:	f1b9 0f00 	cmp.w	r9, #0
 800f2fa:	f2c0 8473 	blt.w	800fbe4 <__ieee754_pow+0xa04>
 800f2fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f302:	e78a      	b.n	800f21a <__ieee754_pow+0x3a>
 800f304:	2402      	movs	r4, #2
 800f306:	e7e8      	b.n	800f2da <__ieee754_pow+0xfa>
 800f308:	f1b9 0f00 	cmp.w	r9, #0
 800f30c:	f04f 0000 	mov.w	r0, #0
 800f310:	f04f 0100 	mov.w	r1, #0
 800f314:	da81      	bge.n	800f21a <__ieee754_pow+0x3a>
 800f316:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f31a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f31e:	e77c      	b.n	800f21a <__ieee754_pow+0x3a>
 800f320:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f324:	d106      	bne.n	800f334 <__ieee754_pow+0x154>
 800f326:	4632      	mov	r2, r6
 800f328:	463b      	mov	r3, r7
 800f32a:	4630      	mov	r0, r6
 800f32c:	4639      	mov	r1, r7
 800f32e:	f7f1 f96b 	bl	8000608 <__aeabi_dmul>
 800f332:	e772      	b.n	800f21a <__ieee754_pow+0x3a>
 800f334:	4a4f      	ldr	r2, [pc, #316]	@ (800f474 <__ieee754_pow+0x294>)
 800f336:	4591      	cmp	r9, r2
 800f338:	d109      	bne.n	800f34e <__ieee754_pow+0x16e>
 800f33a:	2d00      	cmp	r5, #0
 800f33c:	db07      	blt.n	800f34e <__ieee754_pow+0x16e>
 800f33e:	ec47 6b10 	vmov	d0, r6, r7
 800f342:	b011      	add	sp, #68	@ 0x44
 800f344:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f348:	f7ff bc2a 	b.w	800eba0 <__ieee754_sqrt>
 800f34c:	2400      	movs	r4, #0
 800f34e:	9302      	str	r3, [sp, #8]
 800f350:	ec47 6b10 	vmov	d0, r6, r7
 800f354:	f000 fc84 	bl	800fc60 <fabs>
 800f358:	9b02      	ldr	r3, [sp, #8]
 800f35a:	ec51 0b10 	vmov	r0, r1, d0
 800f35e:	bb53      	cbnz	r3, 800f3b6 <__ieee754_pow+0x1d6>
 800f360:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f364:	4b41      	ldr	r3, [pc, #260]	@ (800f46c <__ieee754_pow+0x28c>)
 800f366:	429a      	cmp	r2, r3
 800f368:	d002      	beq.n	800f370 <__ieee754_pow+0x190>
 800f36a:	f1b8 0f00 	cmp.w	r8, #0
 800f36e:	d122      	bne.n	800f3b6 <__ieee754_pow+0x1d6>
 800f370:	f1b9 0f00 	cmp.w	r9, #0
 800f374:	da05      	bge.n	800f382 <__ieee754_pow+0x1a2>
 800f376:	4602      	mov	r2, r0
 800f378:	460b      	mov	r3, r1
 800f37a:	2000      	movs	r0, #0
 800f37c:	493b      	ldr	r1, [pc, #236]	@ (800f46c <__ieee754_pow+0x28c>)
 800f37e:	f7f1 fa6d 	bl	800085c <__aeabi_ddiv>
 800f382:	2d00      	cmp	r5, #0
 800f384:	f6bf af49 	bge.w	800f21a <__ieee754_pow+0x3a>
 800f388:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f38c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f390:	ea58 0804 	orrs.w	r8, r8, r4
 800f394:	d108      	bne.n	800f3a8 <__ieee754_pow+0x1c8>
 800f396:	4602      	mov	r2, r0
 800f398:	460b      	mov	r3, r1
 800f39a:	4610      	mov	r0, r2
 800f39c:	4619      	mov	r1, r3
 800f39e:	f7f0 ff7b 	bl	8000298 <__aeabi_dsub>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	e794      	b.n	800f2d2 <__ieee754_pow+0xf2>
 800f3a8:	2c01      	cmp	r4, #1
 800f3aa:	f47f af36 	bne.w	800f21a <__ieee754_pow+0x3a>
 800f3ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	e731      	b.n	800f21a <__ieee754_pow+0x3a>
 800f3b6:	0feb      	lsrs	r3, r5, #31
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	ea53 0204 	orrs.w	r2, r3, r4
 800f3be:	d102      	bne.n	800f3c6 <__ieee754_pow+0x1e6>
 800f3c0:	4632      	mov	r2, r6
 800f3c2:	463b      	mov	r3, r7
 800f3c4:	e7e9      	b.n	800f39a <__ieee754_pow+0x1ba>
 800f3c6:	3c01      	subs	r4, #1
 800f3c8:	431c      	orrs	r4, r3
 800f3ca:	d016      	beq.n	800f3fa <__ieee754_pow+0x21a>
 800f3cc:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800f450 <__ieee754_pow+0x270>
 800f3d0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f3d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f3d8:	f240 810e 	bls.w	800f5f8 <__ieee754_pow+0x418>
 800f3dc:	4b26      	ldr	r3, [pc, #152]	@ (800f478 <__ieee754_pow+0x298>)
 800f3de:	459a      	cmp	sl, r3
 800f3e0:	4b23      	ldr	r3, [pc, #140]	@ (800f470 <__ieee754_pow+0x290>)
 800f3e2:	d916      	bls.n	800f412 <__ieee754_pow+0x232>
 800f3e4:	4598      	cmp	r8, r3
 800f3e6:	d80b      	bhi.n	800f400 <__ieee754_pow+0x220>
 800f3e8:	f1b9 0f00 	cmp.w	r9, #0
 800f3ec:	da0b      	bge.n	800f406 <__ieee754_pow+0x226>
 800f3ee:	2000      	movs	r0, #0
 800f3f0:	b011      	add	sp, #68	@ 0x44
 800f3f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f6:	f000 bcef 	b.w	800fdd8 <__math_oflow>
 800f3fa:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 800f458 <__ieee754_pow+0x278>
 800f3fe:	e7e7      	b.n	800f3d0 <__ieee754_pow+0x1f0>
 800f400:	f1b9 0f00 	cmp.w	r9, #0
 800f404:	dcf3      	bgt.n	800f3ee <__ieee754_pow+0x20e>
 800f406:	2000      	movs	r0, #0
 800f408:	b011      	add	sp, #68	@ 0x44
 800f40a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f40e:	f000 bcdb 	b.w	800fdc8 <__math_uflow>
 800f412:	4598      	cmp	r8, r3
 800f414:	d20c      	bcs.n	800f430 <__ieee754_pow+0x250>
 800f416:	2200      	movs	r2, #0
 800f418:	2300      	movs	r3, #0
 800f41a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f41e:	f7f1 fb65 	bl	8000aec <__aeabi_dcmplt>
 800f422:	3800      	subs	r0, #0
 800f424:	bf18      	it	ne
 800f426:	2001      	movne	r0, #1
 800f428:	f1b9 0f00 	cmp.w	r9, #0
 800f42c:	daec      	bge.n	800f408 <__ieee754_pow+0x228>
 800f42e:	e7df      	b.n	800f3f0 <__ieee754_pow+0x210>
 800f430:	4b0e      	ldr	r3, [pc, #56]	@ (800f46c <__ieee754_pow+0x28c>)
 800f432:	2200      	movs	r2, #0
 800f434:	4598      	cmp	r8, r3
 800f436:	d921      	bls.n	800f47c <__ieee754_pow+0x29c>
 800f438:	2300      	movs	r3, #0
 800f43a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f43e:	f7f1 fb55 	bl	8000aec <__aeabi_dcmplt>
 800f442:	3800      	subs	r0, #0
 800f444:	bf18      	it	ne
 800f446:	2001      	movne	r0, #1
 800f448:	f1b9 0f00 	cmp.w	r9, #0
 800f44c:	dcd0      	bgt.n	800f3f0 <__ieee754_pow+0x210>
 800f44e:	e7db      	b.n	800f408 <__ieee754_pow+0x228>
 800f450:	00000000 	.word	0x00000000
 800f454:	3ff00000 	.word	0x3ff00000
 800f458:	00000000 	.word	0x00000000
 800f45c:	bff00000 	.word	0xbff00000
 800f460:	fff00000 	.word	0xfff00000
 800f464:	7ff00000 	.word	0x7ff00000
 800f468:	433fffff 	.word	0x433fffff
 800f46c:	3ff00000 	.word	0x3ff00000
 800f470:	3fefffff 	.word	0x3fefffff
 800f474:	3fe00000 	.word	0x3fe00000
 800f478:	43f00000 	.word	0x43f00000
 800f47c:	4b5a      	ldr	r3, [pc, #360]	@ (800f5e8 <__ieee754_pow+0x408>)
 800f47e:	f7f0 ff0b 	bl	8000298 <__aeabi_dsub>
 800f482:	4604      	mov	r4, r0
 800f484:	460d      	mov	r5, r1
 800f486:	a350      	add	r3, pc, #320	@ (adr r3, 800f5c8 <__ieee754_pow+0x3e8>)
 800f488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f48c:	f7f1 f8bc 	bl	8000608 <__aeabi_dmul>
 800f490:	4606      	mov	r6, r0
 800f492:	460f      	mov	r7, r1
 800f494:	4620      	mov	r0, r4
 800f496:	4629      	mov	r1, r5
 800f498:	a34d      	add	r3, pc, #308	@ (adr r3, 800f5d0 <__ieee754_pow+0x3f0>)
 800f49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49e:	f7f1 f8b3 	bl	8000608 <__aeabi_dmul>
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	4682      	mov	sl, r0
 800f4a6:	468b      	mov	fp, r1
 800f4a8:	4b50      	ldr	r3, [pc, #320]	@ (800f5ec <__ieee754_pow+0x40c>)
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	4629      	mov	r1, r5
 800f4ae:	f7f1 f8ab 	bl	8000608 <__aeabi_dmul>
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	a148      	add	r1, pc, #288	@ (adr r1, 800f5d8 <__ieee754_pow+0x3f8>)
 800f4b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4bc:	f7f0 feec 	bl	8000298 <__aeabi_dsub>
 800f4c0:	4622      	mov	r2, r4
 800f4c2:	462b      	mov	r3, r5
 800f4c4:	f7f1 f8a0 	bl	8000608 <__aeabi_dmul>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	4948      	ldr	r1, [pc, #288]	@ (800f5f0 <__ieee754_pow+0x410>)
 800f4d0:	f7f0 fee2 	bl	8000298 <__aeabi_dsub>
 800f4d4:	4680      	mov	r8, r0
 800f4d6:	4689      	mov	r9, r1
 800f4d8:	4622      	mov	r2, r4
 800f4da:	462b      	mov	r3, r5
 800f4dc:	4620      	mov	r0, r4
 800f4de:	4629      	mov	r1, r5
 800f4e0:	2400      	movs	r4, #0
 800f4e2:	f7f1 f891 	bl	8000608 <__aeabi_dmul>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	4649      	mov	r1, r9
 800f4ee:	f7f1 f88b 	bl	8000608 <__aeabi_dmul>
 800f4f2:	a33b      	add	r3, pc, #236	@ (adr r3, 800f5e0 <__ieee754_pow+0x400>)
 800f4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f8:	f7f1 f886 	bl	8000608 <__aeabi_dmul>
 800f4fc:	4602      	mov	r2, r0
 800f4fe:	460b      	mov	r3, r1
 800f500:	4650      	mov	r0, sl
 800f502:	4659      	mov	r1, fp
 800f504:	f7f0 fec8 	bl	8000298 <__aeabi_dsub>
 800f508:	4602      	mov	r2, r0
 800f50a:	460b      	mov	r3, r1
 800f50c:	4680      	mov	r8, r0
 800f50e:	4689      	mov	r9, r1
 800f510:	4630      	mov	r0, r6
 800f512:	4639      	mov	r1, r7
 800f514:	f7f0 fec2 	bl	800029c <__adddf3>
 800f518:	4632      	mov	r2, r6
 800f51a:	463b      	mov	r3, r7
 800f51c:	4620      	mov	r0, r4
 800f51e:	460d      	mov	r5, r1
 800f520:	f7f0 feba 	bl	8000298 <__aeabi_dsub>
 800f524:	4602      	mov	r2, r0
 800f526:	460b      	mov	r3, r1
 800f528:	4640      	mov	r0, r8
 800f52a:	4649      	mov	r1, r9
 800f52c:	f7f0 feb4 	bl	8000298 <__aeabi_dsub>
 800f530:	4606      	mov	r6, r0
 800f532:	460f      	mov	r7, r1
 800f534:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f538:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f53c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f540:	2300      	movs	r3, #0
 800f542:	9304      	str	r3, [sp, #16]
 800f544:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f548:	4652      	mov	r2, sl
 800f54a:	465b      	mov	r3, fp
 800f54c:	f7f0 fea4 	bl	8000298 <__aeabi_dsub>
 800f550:	4622      	mov	r2, r4
 800f552:	462b      	mov	r3, r5
 800f554:	f7f1 f858 	bl	8000608 <__aeabi_dmul>
 800f558:	4680      	mov	r8, r0
 800f55a:	4689      	mov	r9, r1
 800f55c:	4630      	mov	r0, r6
 800f55e:	4639      	mov	r1, r7
 800f560:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f564:	f7f1 f850 	bl	8000608 <__aeabi_dmul>
 800f568:	4602      	mov	r2, r0
 800f56a:	460b      	mov	r3, r1
 800f56c:	4640      	mov	r0, r8
 800f56e:	4649      	mov	r1, r9
 800f570:	f7f0 fe94 	bl	800029c <__adddf3>
 800f574:	4606      	mov	r6, r0
 800f576:	460f      	mov	r7, r1
 800f578:	4652      	mov	r2, sl
 800f57a:	465b      	mov	r3, fp
 800f57c:	4620      	mov	r0, r4
 800f57e:	4629      	mov	r1, r5
 800f580:	f7f1 f842 	bl	8000608 <__aeabi_dmul>
 800f584:	460b      	mov	r3, r1
 800f586:	4602      	mov	r2, r0
 800f588:	4680      	mov	r8, r0
 800f58a:	4689      	mov	r9, r1
 800f58c:	4630      	mov	r0, r6
 800f58e:	4639      	mov	r1, r7
 800f590:	f7f0 fe84 	bl	800029c <__adddf3>
 800f594:	4b17      	ldr	r3, [pc, #92]	@ (800f5f4 <__ieee754_pow+0x414>)
 800f596:	4604      	mov	r4, r0
 800f598:	460d      	mov	r5, r1
 800f59a:	4299      	cmp	r1, r3
 800f59c:	468a      	mov	sl, r1
 800f59e:	468b      	mov	fp, r1
 800f5a0:	f340 82f0 	ble.w	800fb84 <__ieee754_pow+0x9a4>
 800f5a4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f5a8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f5ac:	4303      	orrs	r3, r0
 800f5ae:	f000 81e8 	beq.w	800f982 <__ieee754_pow+0x7a2>
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5ba:	f7f1 fa97 	bl	8000aec <__aeabi_dcmplt>
 800f5be:	3800      	subs	r0, #0
 800f5c0:	bf18      	it	ne
 800f5c2:	2001      	movne	r0, #1
 800f5c4:	e714      	b.n	800f3f0 <__ieee754_pow+0x210>
 800f5c6:	bf00      	nop
 800f5c8:	60000000 	.word	0x60000000
 800f5cc:	3ff71547 	.word	0x3ff71547
 800f5d0:	f85ddf44 	.word	0xf85ddf44
 800f5d4:	3e54ae0b 	.word	0x3e54ae0b
 800f5d8:	55555555 	.word	0x55555555
 800f5dc:	3fd55555 	.word	0x3fd55555
 800f5e0:	652b82fe 	.word	0x652b82fe
 800f5e4:	3ff71547 	.word	0x3ff71547
 800f5e8:	3ff00000 	.word	0x3ff00000
 800f5ec:	3fd00000 	.word	0x3fd00000
 800f5f0:	3fe00000 	.word	0x3fe00000
 800f5f4:	408fffff 	.word	0x408fffff
 800f5f8:	4bd5      	ldr	r3, [pc, #852]	@ (800f950 <__ieee754_pow+0x770>)
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	402b      	ands	r3, r5
 800f5fe:	b92b      	cbnz	r3, 800f60c <__ieee754_pow+0x42c>
 800f600:	4bd4      	ldr	r3, [pc, #848]	@ (800f954 <__ieee754_pow+0x774>)
 800f602:	f7f1 f801 	bl	8000608 <__aeabi_dmul>
 800f606:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f60a:	468b      	mov	fp, r1
 800f60c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f610:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f614:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f618:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f61c:	4413      	add	r3, r2
 800f61e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f622:	930a      	str	r3, [sp, #40]	@ 0x28
 800f624:	4bcc      	ldr	r3, [pc, #816]	@ (800f958 <__ieee754_pow+0x778>)
 800f626:	459b      	cmp	fp, r3
 800f628:	dd08      	ble.n	800f63c <__ieee754_pow+0x45c>
 800f62a:	4bcc      	ldr	r3, [pc, #816]	@ (800f95c <__ieee754_pow+0x77c>)
 800f62c:	459b      	cmp	fp, r3
 800f62e:	f340 81a5 	ble.w	800f97c <__ieee754_pow+0x79c>
 800f632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f634:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f638:	3301      	adds	r3, #1
 800f63a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f63c:	f04f 0a00 	mov.w	sl, #0
 800f640:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f644:	4629      	mov	r1, r5
 800f646:	106d      	asrs	r5, r5, #1
 800f648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f64a:	4bc5      	ldr	r3, [pc, #788]	@ (800f960 <__ieee754_pow+0x780>)
 800f64c:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f650:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f654:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800f658:	ed93 7b00 	vldr	d7, [r3]
 800f65c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f660:	ec53 2b17 	vmov	r2, r3, d7
 800f664:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f668:	f7f0 fe16 	bl	8000298 <__aeabi_dsub>
 800f66c:	4606      	mov	r6, r0
 800f66e:	460f      	mov	r7, r1
 800f670:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f674:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f678:	f7f0 fe10 	bl	800029c <__adddf3>
 800f67c:	4602      	mov	r2, r0
 800f67e:	460b      	mov	r3, r1
 800f680:	2000      	movs	r0, #0
 800f682:	49b8      	ldr	r1, [pc, #736]	@ (800f964 <__ieee754_pow+0x784>)
 800f684:	f7f1 f8ea 	bl	800085c <__aeabi_ddiv>
 800f688:	4602      	mov	r2, r0
 800f68a:	460b      	mov	r3, r1
 800f68c:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f690:	4630      	mov	r0, r6
 800f692:	4639      	mov	r1, r7
 800f694:	f7f0 ffb8 	bl	8000608 <__aeabi_dmul>
 800f698:	2200      	movs	r2, #0
 800f69a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f69e:	4614      	mov	r4, r2
 800f6a0:	461d      	mov	r5, r3
 800f6a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6a6:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800f6aa:	f04f 0b00 	mov.w	fp, #0
 800f6ae:	4661      	mov	r1, ip
 800f6b0:	46e1      	mov	r9, ip
 800f6b2:	4658      	mov	r0, fp
 800f6b4:	46d8      	mov	r8, fp
 800f6b6:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800f6ba:	f7f0 ffa5 	bl	8000608 <__aeabi_dmul>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	4639      	mov	r1, r7
 800f6c6:	f7f0 fde7 	bl	8000298 <__aeabi_dsub>
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	460f      	mov	r7, r1
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	4629      	mov	r1, r5
 800f6d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f6d6:	f7f0 fddf 	bl	8000298 <__aeabi_dsub>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	460b      	mov	r3, r1
 800f6de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f6e2:	f7f0 fdd9 	bl	8000298 <__aeabi_dsub>
 800f6e6:	465a      	mov	r2, fp
 800f6e8:	464b      	mov	r3, r9
 800f6ea:	f7f0 ff8d 	bl	8000608 <__aeabi_dmul>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	4639      	mov	r1, r7
 800f6f6:	f7f0 fdcf 	bl	8000298 <__aeabi_dsub>
 800f6fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f6fe:	f7f0 ff83 	bl	8000608 <__aeabi_dmul>
 800f702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f706:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f70a:	4610      	mov	r0, r2
 800f70c:	4619      	mov	r1, r3
 800f70e:	f7f0 ff7b 	bl	8000608 <__aeabi_dmul>
 800f712:	4604      	mov	r4, r0
 800f714:	460d      	mov	r5, r1
 800f716:	a37c      	add	r3, pc, #496	@ (adr r3, 800f908 <__ieee754_pow+0x728>)
 800f718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71c:	f7f0 ff74 	bl	8000608 <__aeabi_dmul>
 800f720:	a37b      	add	r3, pc, #492	@ (adr r3, 800f910 <__ieee754_pow+0x730>)
 800f722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f726:	f7f0 fdb9 	bl	800029c <__adddf3>
 800f72a:	4622      	mov	r2, r4
 800f72c:	462b      	mov	r3, r5
 800f72e:	f7f0 ff6b 	bl	8000608 <__aeabi_dmul>
 800f732:	a379      	add	r3, pc, #484	@ (adr r3, 800f918 <__ieee754_pow+0x738>)
 800f734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f738:	f7f0 fdb0 	bl	800029c <__adddf3>
 800f73c:	4622      	mov	r2, r4
 800f73e:	462b      	mov	r3, r5
 800f740:	f7f0 ff62 	bl	8000608 <__aeabi_dmul>
 800f744:	a376      	add	r3, pc, #472	@ (adr r3, 800f920 <__ieee754_pow+0x740>)
 800f746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74a:	f7f0 fda7 	bl	800029c <__adddf3>
 800f74e:	4622      	mov	r2, r4
 800f750:	462b      	mov	r3, r5
 800f752:	f7f0 ff59 	bl	8000608 <__aeabi_dmul>
 800f756:	a374      	add	r3, pc, #464	@ (adr r3, 800f928 <__ieee754_pow+0x748>)
 800f758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75c:	f7f0 fd9e 	bl	800029c <__adddf3>
 800f760:	4622      	mov	r2, r4
 800f762:	462b      	mov	r3, r5
 800f764:	f7f0 ff50 	bl	8000608 <__aeabi_dmul>
 800f768:	a371      	add	r3, pc, #452	@ (adr r3, 800f930 <__ieee754_pow+0x750>)
 800f76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76e:	f7f0 fd95 	bl	800029c <__adddf3>
 800f772:	4606      	mov	r6, r0
 800f774:	460f      	mov	r7, r1
 800f776:	4622      	mov	r2, r4
 800f778:	462b      	mov	r3, r5
 800f77a:	4620      	mov	r0, r4
 800f77c:	4629      	mov	r1, r5
 800f77e:	f7f0 ff43 	bl	8000608 <__aeabi_dmul>
 800f782:	4602      	mov	r2, r0
 800f784:	460b      	mov	r3, r1
 800f786:	4630      	mov	r0, r6
 800f788:	4639      	mov	r1, r7
 800f78a:	f7f0 ff3d 	bl	8000608 <__aeabi_dmul>
 800f78e:	465a      	mov	r2, fp
 800f790:	4604      	mov	r4, r0
 800f792:	460d      	mov	r5, r1
 800f794:	464b      	mov	r3, r9
 800f796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f79a:	f7f0 fd7f 	bl	800029c <__adddf3>
 800f79e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7a2:	f7f0 ff31 	bl	8000608 <__aeabi_dmul>
 800f7a6:	4622      	mov	r2, r4
 800f7a8:	462b      	mov	r3, r5
 800f7aa:	f7f0 fd77 	bl	800029c <__adddf3>
 800f7ae:	465a      	mov	r2, fp
 800f7b0:	464b      	mov	r3, r9
 800f7b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f7b6:	4658      	mov	r0, fp
 800f7b8:	4649      	mov	r1, r9
 800f7ba:	f7f0 ff25 	bl	8000608 <__aeabi_dmul>
 800f7be:	2200      	movs	r2, #0
 800f7c0:	4b69      	ldr	r3, [pc, #420]	@ (800f968 <__ieee754_pow+0x788>)
 800f7c2:	4606      	mov	r6, r0
 800f7c4:	460f      	mov	r7, r1
 800f7c6:	f7f0 fd69 	bl	800029c <__adddf3>
 800f7ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f7ce:	f7f0 fd65 	bl	800029c <__adddf3>
 800f7d2:	460d      	mov	r5, r1
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	4640      	mov	r0, r8
 800f7d8:	4649      	mov	r1, r9
 800f7da:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800f7de:	465c      	mov	r4, fp
 800f7e0:	465a      	mov	r2, fp
 800f7e2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800f7e6:	f7f0 ff0f 	bl	8000608 <__aeabi_dmul>
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	4680      	mov	r8, r0
 800f7ee:	4689      	mov	r9, r1
 800f7f0:	4b5d      	ldr	r3, [pc, #372]	@ (800f968 <__ieee754_pow+0x788>)
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	4629      	mov	r1, r5
 800f7f6:	f7f0 fd4f 	bl	8000298 <__aeabi_dsub>
 800f7fa:	4632      	mov	r2, r6
 800f7fc:	463b      	mov	r3, r7
 800f7fe:	f7f0 fd4b 	bl	8000298 <__aeabi_dsub>
 800f802:	4602      	mov	r2, r0
 800f804:	460b      	mov	r3, r1
 800f806:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f80a:	f7f0 fd45 	bl	8000298 <__aeabi_dsub>
 800f80e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f812:	f7f0 fef9 	bl	8000608 <__aeabi_dmul>
 800f816:	4606      	mov	r6, r0
 800f818:	460f      	mov	r7, r1
 800f81a:	4622      	mov	r2, r4
 800f81c:	462b      	mov	r3, r5
 800f81e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f822:	f7f0 fef1 	bl	8000608 <__aeabi_dmul>
 800f826:	4602      	mov	r2, r0
 800f828:	460b      	mov	r3, r1
 800f82a:	4630      	mov	r0, r6
 800f82c:	4639      	mov	r1, r7
 800f82e:	f7f0 fd35 	bl	800029c <__adddf3>
 800f832:	4606      	mov	r6, r0
 800f834:	460f      	mov	r7, r1
 800f836:	4602      	mov	r2, r0
 800f838:	460b      	mov	r3, r1
 800f83a:	4640      	mov	r0, r8
 800f83c:	4649      	mov	r1, r9
 800f83e:	f7f0 fd2d 	bl	800029c <__adddf3>
 800f842:	460d      	mov	r5, r1
 800f844:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800f848:	a33b      	add	r3, pc, #236	@ (adr r3, 800f938 <__ieee754_pow+0x758>)
 800f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84e:	465c      	mov	r4, fp
 800f850:	4658      	mov	r0, fp
 800f852:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800f856:	f7f0 fed7 	bl	8000608 <__aeabi_dmul>
 800f85a:	4642      	mov	r2, r8
 800f85c:	464b      	mov	r3, r9
 800f85e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f862:	4620      	mov	r0, r4
 800f864:	4629      	mov	r1, r5
 800f866:	f7f0 fd17 	bl	8000298 <__aeabi_dsub>
 800f86a:	4602      	mov	r2, r0
 800f86c:	460b      	mov	r3, r1
 800f86e:	4630      	mov	r0, r6
 800f870:	4639      	mov	r1, r7
 800f872:	f7f0 fd11 	bl	8000298 <__aeabi_dsub>
 800f876:	a332      	add	r3, pc, #200	@ (adr r3, 800f940 <__ieee754_pow+0x760>)
 800f878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87c:	f7f0 fec4 	bl	8000608 <__aeabi_dmul>
 800f880:	4606      	mov	r6, r0
 800f882:	460f      	mov	r7, r1
 800f884:	4620      	mov	r0, r4
 800f886:	4629      	mov	r1, r5
 800f888:	a32f      	add	r3, pc, #188	@ (adr r3, 800f948 <__ieee754_pow+0x768>)
 800f88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88e:	f7f0 febb 	bl	8000608 <__aeabi_dmul>
 800f892:	4602      	mov	r2, r0
 800f894:	460b      	mov	r3, r1
 800f896:	4630      	mov	r0, r6
 800f898:	4639      	mov	r1, r7
 800f89a:	f7f0 fcff 	bl	800029c <__adddf3>
 800f89e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f8a0:	4b32      	ldr	r3, [pc, #200]	@ (800f96c <__ieee754_pow+0x78c>)
 800f8a2:	4413      	add	r3, r2
 800f8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a8:	f7f0 fcf8 	bl	800029c <__adddf3>
 800f8ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f8b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f8b2:	f7f0 fe3f 	bl	8000534 <__aeabi_i2d>
 800f8b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f8b8:	4b2d      	ldr	r3, [pc, #180]	@ (800f970 <__ieee754_pow+0x790>)
 800f8ba:	4606      	mov	r6, r0
 800f8bc:	460f      	mov	r7, r1
 800f8be:	4413      	add	r3, r2
 800f8c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f8cc:	f7f0 fce6 	bl	800029c <__adddf3>
 800f8d0:	4642      	mov	r2, r8
 800f8d2:	464b      	mov	r3, r9
 800f8d4:	f7f0 fce2 	bl	800029c <__adddf3>
 800f8d8:	4632      	mov	r2, r6
 800f8da:	463b      	mov	r3, r7
 800f8dc:	f7f0 fcde 	bl	800029c <__adddf3>
 800f8e0:	4632      	mov	r2, r6
 800f8e2:	463b      	mov	r3, r7
 800f8e4:	460d      	mov	r5, r1
 800f8e6:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800f8ea:	4658      	mov	r0, fp
 800f8ec:	465c      	mov	r4, fp
 800f8ee:	f7f0 fcd3 	bl	8000298 <__aeabi_dsub>
 800f8f2:	4642      	mov	r2, r8
 800f8f4:	464b      	mov	r3, r9
 800f8f6:	f7f0 fccf 	bl	8000298 <__aeabi_dsub>
 800f8fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8fe:	f7f0 fccb 	bl	8000298 <__aeabi_dsub>
 800f902:	4602      	mov	r2, r0
 800f904:	e036      	b.n	800f974 <__ieee754_pow+0x794>
 800f906:	bf00      	nop
 800f908:	4a454eef 	.word	0x4a454eef
 800f90c:	3fca7e28 	.word	0x3fca7e28
 800f910:	93c9db65 	.word	0x93c9db65
 800f914:	3fcd864a 	.word	0x3fcd864a
 800f918:	a91d4101 	.word	0xa91d4101
 800f91c:	3fd17460 	.word	0x3fd17460
 800f920:	518f264d 	.word	0x518f264d
 800f924:	3fd55555 	.word	0x3fd55555
 800f928:	db6fabff 	.word	0xdb6fabff
 800f92c:	3fdb6db6 	.word	0x3fdb6db6
 800f930:	33333303 	.word	0x33333303
 800f934:	3fe33333 	.word	0x3fe33333
 800f938:	e0000000 	.word	0xe0000000
 800f93c:	3feec709 	.word	0x3feec709
 800f940:	dc3a03fd 	.word	0xdc3a03fd
 800f944:	3feec709 	.word	0x3feec709
 800f948:	145b01f5 	.word	0x145b01f5
 800f94c:	be3e2fe0 	.word	0xbe3e2fe0
 800f950:	7ff00000 	.word	0x7ff00000
 800f954:	43400000 	.word	0x43400000
 800f958:	0003988e 	.word	0x0003988e
 800f95c:	000bb679 	.word	0x000bb679
 800f960:	0800ff28 	.word	0x0800ff28
 800f964:	3ff00000 	.word	0x3ff00000
 800f968:	40080000 	.word	0x40080000
 800f96c:	0800ff08 	.word	0x0800ff08
 800f970:	0800ff18 	.word	0x0800ff18
 800f974:	460b      	mov	r3, r1
 800f976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f97a:	e5d7      	b.n	800f52c <__ieee754_pow+0x34c>
 800f97c:	f04f 0a01 	mov.w	sl, #1
 800f980:	e65e      	b.n	800f640 <__ieee754_pow+0x460>
 800f982:	a3b4      	add	r3, pc, #720	@ (adr r3, 800fc54 <__ieee754_pow+0xa74>)
 800f984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f988:	4630      	mov	r0, r6
 800f98a:	4639      	mov	r1, r7
 800f98c:	f7f0 fc86 	bl	800029c <__adddf3>
 800f990:	4642      	mov	r2, r8
 800f992:	464b      	mov	r3, r9
 800f994:	e9cd 0100 	strd	r0, r1, [sp]
 800f998:	4620      	mov	r0, r4
 800f99a:	4629      	mov	r1, r5
 800f99c:	f7f0 fc7c 	bl	8000298 <__aeabi_dsub>
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9a8:	f7f1 f8be 	bl	8000b28 <__aeabi_dcmpgt>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	f47f ae00 	bne.w	800f5b2 <__ieee754_pow+0x3d2>
 800f9b2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800f9b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f9ba:	48a1      	ldr	r0, [pc, #644]	@ (800fc40 <__ieee754_pow+0xa60>)
 800f9bc:	f1bb 0f00 	cmp.w	fp, #0
 800f9c0:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800f9c4:	f04f 0200 	mov.w	r2, #0
 800f9c8:	fa43 fa0a 	asr.w	sl, r3, sl
 800f9cc:	44da      	add	sl, fp
 800f9ce:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f9d2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f9d6:	fa40 f001 	asr.w	r0, r0, r1
 800f9da:	f1c1 0114 	rsb	r1, r1, #20
 800f9de:	ea00 030a 	and.w	r3, r0, sl
 800f9e2:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f9e6:	4640      	mov	r0, r8
 800f9e8:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800f9ec:	fa4a fa01 	asr.w	sl, sl, r1
 800f9f0:	4649      	mov	r1, r9
 800f9f2:	bfb8      	it	lt
 800f9f4:	f1ca 0a00 	rsblt	sl, sl, #0
 800f9f8:	f7f0 fc4e 	bl	8000298 <__aeabi_dsub>
 800f9fc:	4680      	mov	r8, r0
 800f9fe:	4689      	mov	r9, r1
 800fa00:	2400      	movs	r4, #0
 800fa02:	4632      	mov	r2, r6
 800fa04:	463b      	mov	r3, r7
 800fa06:	4640      	mov	r0, r8
 800fa08:	4649      	mov	r1, r9
 800fa0a:	f7f0 fc47 	bl	800029c <__adddf3>
 800fa0e:	460d      	mov	r5, r1
 800fa10:	4620      	mov	r0, r4
 800fa12:	a37b      	add	r3, pc, #492	@ (adr r3, 800fc00 <__ieee754_pow+0xa20>)
 800fa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa18:	f7f0 fdf6 	bl	8000608 <__aeabi_dmul>
 800fa1c:	4642      	mov	r2, r8
 800fa1e:	464b      	mov	r3, r9
 800fa20:	e9cd 0100 	strd	r0, r1, [sp]
 800fa24:	4620      	mov	r0, r4
 800fa26:	4629      	mov	r1, r5
 800fa28:	f7f0 fc36 	bl	8000298 <__aeabi_dsub>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	4630      	mov	r0, r6
 800fa32:	4639      	mov	r1, r7
 800fa34:	f7f0 fc30 	bl	8000298 <__aeabi_dsub>
 800fa38:	a373      	add	r3, pc, #460	@ (adr r3, 800fc08 <__ieee754_pow+0xa28>)
 800fa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3e:	f7f0 fde3 	bl	8000608 <__aeabi_dmul>
 800fa42:	4680      	mov	r8, r0
 800fa44:	4689      	mov	r9, r1
 800fa46:	4620      	mov	r0, r4
 800fa48:	4629      	mov	r1, r5
 800fa4a:	a371      	add	r3, pc, #452	@ (adr r3, 800fc10 <__ieee754_pow+0xa30>)
 800fa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa50:	f7f0 fdda 	bl	8000608 <__aeabi_dmul>
 800fa54:	4602      	mov	r2, r0
 800fa56:	460b      	mov	r3, r1
 800fa58:	4640      	mov	r0, r8
 800fa5a:	4649      	mov	r1, r9
 800fa5c:	f7f0 fc1e 	bl	800029c <__adddf3>
 800fa60:	4604      	mov	r4, r0
 800fa62:	460d      	mov	r5, r1
 800fa64:	4602      	mov	r2, r0
 800fa66:	460b      	mov	r3, r1
 800fa68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa6c:	f7f0 fc16 	bl	800029c <__adddf3>
 800fa70:	4680      	mov	r8, r0
 800fa72:	4689      	mov	r9, r1
 800fa74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa78:	f7f0 fc0e 	bl	8000298 <__aeabi_dsub>
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	460b      	mov	r3, r1
 800fa80:	4620      	mov	r0, r4
 800fa82:	4629      	mov	r1, r5
 800fa84:	f7f0 fc08 	bl	8000298 <__aeabi_dsub>
 800fa88:	4642      	mov	r2, r8
 800fa8a:	4606      	mov	r6, r0
 800fa8c:	460f      	mov	r7, r1
 800fa8e:	464b      	mov	r3, r9
 800fa90:	4640      	mov	r0, r8
 800fa92:	4649      	mov	r1, r9
 800fa94:	f7f0 fdb8 	bl	8000608 <__aeabi_dmul>
 800fa98:	4604      	mov	r4, r0
 800fa9a:	460d      	mov	r5, r1
 800fa9c:	a35e      	add	r3, pc, #376	@ (adr r3, 800fc18 <__ieee754_pow+0xa38>)
 800fa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa2:	f7f0 fdb1 	bl	8000608 <__aeabi_dmul>
 800faa6:	a35e      	add	r3, pc, #376	@ (adr r3, 800fc20 <__ieee754_pow+0xa40>)
 800faa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faac:	f7f0 fbf4 	bl	8000298 <__aeabi_dsub>
 800fab0:	4622      	mov	r2, r4
 800fab2:	462b      	mov	r3, r5
 800fab4:	f7f0 fda8 	bl	8000608 <__aeabi_dmul>
 800fab8:	a35b      	add	r3, pc, #364	@ (adr r3, 800fc28 <__ieee754_pow+0xa48>)
 800faba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabe:	f7f0 fbed 	bl	800029c <__adddf3>
 800fac2:	4622      	mov	r2, r4
 800fac4:	462b      	mov	r3, r5
 800fac6:	f7f0 fd9f 	bl	8000608 <__aeabi_dmul>
 800faca:	a359      	add	r3, pc, #356	@ (adr r3, 800fc30 <__ieee754_pow+0xa50>)
 800facc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad0:	f7f0 fbe2 	bl	8000298 <__aeabi_dsub>
 800fad4:	4622      	mov	r2, r4
 800fad6:	462b      	mov	r3, r5
 800fad8:	f7f0 fd96 	bl	8000608 <__aeabi_dmul>
 800fadc:	a356      	add	r3, pc, #344	@ (adr r3, 800fc38 <__ieee754_pow+0xa58>)
 800fade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae2:	f7f0 fbdb 	bl	800029c <__adddf3>
 800fae6:	4622      	mov	r2, r4
 800fae8:	462b      	mov	r3, r5
 800faea:	f7f0 fd8d 	bl	8000608 <__aeabi_dmul>
 800faee:	4602      	mov	r2, r0
 800faf0:	460b      	mov	r3, r1
 800faf2:	4640      	mov	r0, r8
 800faf4:	4649      	mov	r1, r9
 800faf6:	f7f0 fbcf 	bl	8000298 <__aeabi_dsub>
 800fafa:	4604      	mov	r4, r0
 800fafc:	460d      	mov	r5, r1
 800fafe:	4602      	mov	r2, r0
 800fb00:	460b      	mov	r3, r1
 800fb02:	4640      	mov	r0, r8
 800fb04:	4649      	mov	r1, r9
 800fb06:	f7f0 fd7f 	bl	8000608 <__aeabi_dmul>
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fb10:	e9cd 0100 	strd	r0, r1, [sp]
 800fb14:	4620      	mov	r0, r4
 800fb16:	4629      	mov	r1, r5
 800fb18:	f7f0 fbbe 	bl	8000298 <__aeabi_dsub>
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	460b      	mov	r3, r1
 800fb20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb24:	f7f0 fe9a 	bl	800085c <__aeabi_ddiv>
 800fb28:	4632      	mov	r2, r6
 800fb2a:	4604      	mov	r4, r0
 800fb2c:	460d      	mov	r5, r1
 800fb2e:	463b      	mov	r3, r7
 800fb30:	4640      	mov	r0, r8
 800fb32:	4649      	mov	r1, r9
 800fb34:	f7f0 fd68 	bl	8000608 <__aeabi_dmul>
 800fb38:	4632      	mov	r2, r6
 800fb3a:	463b      	mov	r3, r7
 800fb3c:	f7f0 fbae 	bl	800029c <__adddf3>
 800fb40:	4602      	mov	r2, r0
 800fb42:	460b      	mov	r3, r1
 800fb44:	4620      	mov	r0, r4
 800fb46:	4629      	mov	r1, r5
 800fb48:	f7f0 fba6 	bl	8000298 <__aeabi_dsub>
 800fb4c:	4642      	mov	r2, r8
 800fb4e:	464b      	mov	r3, r9
 800fb50:	f7f0 fba2 	bl	8000298 <__aeabi_dsub>
 800fb54:	460b      	mov	r3, r1
 800fb56:	4602      	mov	r2, r0
 800fb58:	493a      	ldr	r1, [pc, #232]	@ (800fc44 <__ieee754_pow+0xa64>)
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	f7f0 fb9c 	bl	8000298 <__aeabi_dsub>
 800fb60:	ec41 0b10 	vmov	d0, r0, r1
 800fb64:	ee10 3a90 	vmov	r3, s1
 800fb68:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fb6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fb70:	da30      	bge.n	800fbd4 <__ieee754_pow+0x9f4>
 800fb72:	4650      	mov	r0, sl
 800fb74:	f000 f87c 	bl	800fc70 <scalbn>
 800fb78:	ec51 0b10 	vmov	r0, r1, d0
 800fb7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb80:	f7ff bbd5 	b.w	800f32e <__ieee754_pow+0x14e>
 800fb84:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fb88:	4c2f      	ldr	r4, [pc, #188]	@ (800fc48 <__ieee754_pow+0xa68>)
 800fb8a:	42a3      	cmp	r3, r4
 800fb8c:	d91a      	bls.n	800fbc4 <__ieee754_pow+0x9e4>
 800fb8e:	4b2f      	ldr	r3, [pc, #188]	@ (800fc4c <__ieee754_pow+0xa6c>)
 800fb90:	440b      	add	r3, r1
 800fb92:	4303      	orrs	r3, r0
 800fb94:	d009      	beq.n	800fbaa <__ieee754_pow+0x9ca>
 800fb96:	2200      	movs	r2, #0
 800fb98:	2300      	movs	r3, #0
 800fb9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb9e:	f7f0 ffa5 	bl	8000aec <__aeabi_dcmplt>
 800fba2:	3800      	subs	r0, #0
 800fba4:	bf18      	it	ne
 800fba6:	2001      	movne	r0, #1
 800fba8:	e42e      	b.n	800f408 <__ieee754_pow+0x228>
 800fbaa:	4642      	mov	r2, r8
 800fbac:	464b      	mov	r3, r9
 800fbae:	f7f0 fb73 	bl	8000298 <__aeabi_dsub>
 800fbb2:	4632      	mov	r2, r6
 800fbb4:	463b      	mov	r3, r7
 800fbb6:	f7f0 ffad 	bl	8000b14 <__aeabi_dcmpge>
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	d1eb      	bne.n	800fb96 <__ieee754_pow+0x9b6>
 800fbbe:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800fc5c <__ieee754_pow+0xa7c>
 800fbc2:	e6f6      	b.n	800f9b2 <__ieee754_pow+0x7d2>
 800fbc4:	469a      	mov	sl, r3
 800fbc6:	4b22      	ldr	r3, [pc, #136]	@ (800fc50 <__ieee754_pow+0xa70>)
 800fbc8:	459a      	cmp	sl, r3
 800fbca:	f63f aef2 	bhi.w	800f9b2 <__ieee754_pow+0x7d2>
 800fbce:	f8dd a010 	ldr.w	sl, [sp, #16]
 800fbd2:	e715      	b.n	800fa00 <__ieee754_pow+0x820>
 800fbd4:	ec51 0b10 	vmov	r0, r1, d0
 800fbd8:	4619      	mov	r1, r3
 800fbda:	e7cf      	b.n	800fb7c <__ieee754_pow+0x99c>
 800fbdc:	2000      	movs	r0, #0
 800fbde:	4919      	ldr	r1, [pc, #100]	@ (800fc44 <__ieee754_pow+0xa64>)
 800fbe0:	f7ff bb1b 	b.w	800f21a <__ieee754_pow+0x3a>
 800fbe4:	2000      	movs	r0, #0
 800fbe6:	2100      	movs	r1, #0
 800fbe8:	f7ff bb17 	b.w	800f21a <__ieee754_pow+0x3a>
 800fbec:	4630      	mov	r0, r6
 800fbee:	4639      	mov	r1, r7
 800fbf0:	f7ff bb13 	b.w	800f21a <__ieee754_pow+0x3a>
 800fbf4:	460c      	mov	r4, r1
 800fbf6:	f7ff bb61 	b.w	800f2bc <__ieee754_pow+0xdc>
 800fbfa:	2400      	movs	r4, #0
 800fbfc:	f7ff bb4c 	b.w	800f298 <__ieee754_pow+0xb8>
 800fc00:	00000000 	.word	0x00000000
 800fc04:	3fe62e43 	.word	0x3fe62e43
 800fc08:	fefa39ef 	.word	0xfefa39ef
 800fc0c:	3fe62e42 	.word	0x3fe62e42
 800fc10:	0ca86c39 	.word	0x0ca86c39
 800fc14:	be205c61 	.word	0xbe205c61
 800fc18:	72bea4d0 	.word	0x72bea4d0
 800fc1c:	3e663769 	.word	0x3e663769
 800fc20:	c5d26bf1 	.word	0xc5d26bf1
 800fc24:	3ebbbd41 	.word	0x3ebbbd41
 800fc28:	af25de2c 	.word	0xaf25de2c
 800fc2c:	3f11566a 	.word	0x3f11566a
 800fc30:	16bebd93 	.word	0x16bebd93
 800fc34:	3f66c16c 	.word	0x3f66c16c
 800fc38:	5555553e 	.word	0x5555553e
 800fc3c:	3fc55555 	.word	0x3fc55555
 800fc40:	fff00000 	.word	0xfff00000
 800fc44:	3ff00000 	.word	0x3ff00000
 800fc48:	4090cbff 	.word	0x4090cbff
 800fc4c:	3f6f3400 	.word	0x3f6f3400
 800fc50:	3fe00000 	.word	0x3fe00000
 800fc54:	652b82fe 	.word	0x652b82fe
 800fc58:	3c971547 	.word	0x3c971547
 800fc5c:	4090cc00 	.word	0x4090cc00

0800fc60 <fabs>:
 800fc60:	ec51 0b10 	vmov	r0, r1, d0
 800fc64:	4602      	mov	r2, r0
 800fc66:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fc6a:	ec43 2b10 	vmov	d0, r2, r3
 800fc6e:	4770      	bx	lr

0800fc70 <scalbn>:
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	ec55 4b10 	vmov	r4, r5, d0
 800fc76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fc7a:	4606      	mov	r6, r0
 800fc7c:	462b      	mov	r3, r5
 800fc7e:	b991      	cbnz	r1, 800fca6 <scalbn+0x36>
 800fc80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800fc84:	4323      	orrs	r3, r4
 800fc86:	d03d      	beq.n	800fd04 <scalbn+0x94>
 800fc88:	4b35      	ldr	r3, [pc, #212]	@ (800fd60 <scalbn+0xf0>)
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	4629      	mov	r1, r5
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f7f0 fcba 	bl	8000608 <__aeabi_dmul>
 800fc94:	4b33      	ldr	r3, [pc, #204]	@ (800fd64 <scalbn+0xf4>)
 800fc96:	4604      	mov	r4, r0
 800fc98:	460d      	mov	r5, r1
 800fc9a:	429e      	cmp	r6, r3
 800fc9c:	da0f      	bge.n	800fcbe <scalbn+0x4e>
 800fc9e:	a328      	add	r3, pc, #160	@ (adr r3, 800fd40 <scalbn+0xd0>)
 800fca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca4:	e01e      	b.n	800fce4 <scalbn+0x74>
 800fca6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800fcaa:	4291      	cmp	r1, r2
 800fcac:	d10b      	bne.n	800fcc6 <scalbn+0x56>
 800fcae:	4622      	mov	r2, r4
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	4629      	mov	r1, r5
 800fcb4:	f7f0 faf2 	bl	800029c <__adddf3>
 800fcb8:	4604      	mov	r4, r0
 800fcba:	460d      	mov	r5, r1
 800fcbc:	e022      	b.n	800fd04 <scalbn+0x94>
 800fcbe:	460b      	mov	r3, r1
 800fcc0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fcc4:	3936      	subs	r1, #54	@ 0x36
 800fcc6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800fcca:	4296      	cmp	r6, r2
 800fccc:	dd0d      	ble.n	800fcea <scalbn+0x7a>
 800fcce:	2d00      	cmp	r5, #0
 800fcd0:	a11d      	add	r1, pc, #116	@ (adr r1, 800fd48 <scalbn+0xd8>)
 800fcd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcd6:	da02      	bge.n	800fcde <scalbn+0x6e>
 800fcd8:	a11d      	add	r1, pc, #116	@ (adr r1, 800fd50 <scalbn+0xe0>)
 800fcda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcde:	a31a      	add	r3, pc, #104	@ (adr r3, 800fd48 <scalbn+0xd8>)
 800fce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce4:	f7f0 fc90 	bl	8000608 <__aeabi_dmul>
 800fce8:	e7e6      	b.n	800fcb8 <scalbn+0x48>
 800fcea:	1872      	adds	r2, r6, r1
 800fcec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800fcf0:	428a      	cmp	r2, r1
 800fcf2:	dcec      	bgt.n	800fcce <scalbn+0x5e>
 800fcf4:	2a00      	cmp	r2, #0
 800fcf6:	dd08      	ble.n	800fd0a <scalbn+0x9a>
 800fcf8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fcfc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fd00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fd04:	ec45 4b10 	vmov	d0, r4, r5
 800fd08:	bd70      	pop	{r4, r5, r6, pc}
 800fd0a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800fd0e:	da08      	bge.n	800fd22 <scalbn+0xb2>
 800fd10:	2d00      	cmp	r5, #0
 800fd12:	a10b      	add	r1, pc, #44	@ (adr r1, 800fd40 <scalbn+0xd0>)
 800fd14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd18:	dac1      	bge.n	800fc9e <scalbn+0x2e>
 800fd1a:	a10f      	add	r1, pc, #60	@ (adr r1, 800fd58 <scalbn+0xe8>)
 800fd1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd20:	e7bd      	b.n	800fc9e <scalbn+0x2e>
 800fd22:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fd26:	3236      	adds	r2, #54	@ 0x36
 800fd28:	4620      	mov	r0, r4
 800fd2a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fd2e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fd32:	2200      	movs	r2, #0
 800fd34:	4b0c      	ldr	r3, [pc, #48]	@ (800fd68 <scalbn+0xf8>)
 800fd36:	4629      	mov	r1, r5
 800fd38:	e7d4      	b.n	800fce4 <scalbn+0x74>
 800fd3a:	bf00      	nop
 800fd3c:	f3af 8000 	nop.w
 800fd40:	c2f8f359 	.word	0xc2f8f359
 800fd44:	01a56e1f 	.word	0x01a56e1f
 800fd48:	8800759c 	.word	0x8800759c
 800fd4c:	7e37e43c 	.word	0x7e37e43c
 800fd50:	8800759c 	.word	0x8800759c
 800fd54:	fe37e43c 	.word	0xfe37e43c
 800fd58:	c2f8f359 	.word	0xc2f8f359
 800fd5c:	81a56e1f 	.word	0x81a56e1f
 800fd60:	43500000 	.word	0x43500000
 800fd64:	ffff3cb0 	.word	0xffff3cb0
 800fd68:	3c900000 	.word	0x3c900000

0800fd6c <with_errno>:
 800fd6c:	b510      	push	{r4, lr}
 800fd6e:	ed2d 8b02 	vpush	{d8}
 800fd72:	eeb0 8a40 	vmov.f32	s16, s0
 800fd76:	eef0 8a60 	vmov.f32	s17, s1
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	f7fe fd68 	bl	800e850 <__errno>
 800fd80:	6004      	str	r4, [r0, #0]
 800fd82:	eeb0 0a48 	vmov.f32	s0, s16
 800fd86:	eef0 0a68 	vmov.f32	s1, s17
 800fd8a:	ecbd 8b02 	vpop	{d8}
 800fd8e:	bd10      	pop	{r4, pc}

0800fd90 <xflow>:
 800fd90:	4603      	mov	r3, r0
 800fd92:	b507      	push	{r0, r1, r2, lr}
 800fd94:	ec51 0b10 	vmov	r0, r1, d0
 800fd98:	b183      	cbz	r3, 800fdbc <xflow+0x2c>
 800fd9a:	4602      	mov	r2, r0
 800fd9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fda0:	e9cd 2300 	strd	r2, r3, [sp]
 800fda4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fda8:	f7f0 fc2e 	bl	8000608 <__aeabi_dmul>
 800fdac:	ec41 0b10 	vmov	d0, r0, r1
 800fdb0:	2022      	movs	r0, #34	@ 0x22
 800fdb2:	b003      	add	sp, #12
 800fdb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdb8:	f7ff bfd8 	b.w	800fd6c <with_errno>
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	460b      	mov	r3, r1
 800fdc0:	e7ee      	b.n	800fda0 <xflow+0x10>
 800fdc2:	0000      	movs	r0, r0
 800fdc4:	0000      	movs	r0, r0
	...

0800fdc8 <__math_uflow>:
 800fdc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fdd0 <__math_uflow+0x8>
 800fdcc:	f7ff bfe0 	b.w	800fd90 <xflow>
 800fdd0:	00000000 	.word	0x00000000
 800fdd4:	10000000 	.word	0x10000000

0800fdd8 <__math_oflow>:
 800fdd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fde0 <__math_oflow+0x8>
 800fddc:	f7ff bfd8 	b.w	800fd90 <xflow>
 800fde0:	00000000 	.word	0x00000000
 800fde4:	70000000 	.word	0x70000000

0800fde8 <_init>:
 800fde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdea:	bf00      	nop
 800fdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdee:	bc08      	pop	{r3}
 800fdf0:	469e      	mov	lr, r3
 800fdf2:	4770      	bx	lr

0800fdf4 <_fini>:
 800fdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdf6:	bf00      	nop
 800fdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdfa:	bc08      	pop	{r3}
 800fdfc:	469e      	mov	lr, r3
 800fdfe:	4770      	bx	lr
