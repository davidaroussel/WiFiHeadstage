
rhd_acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5b8  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800e808  0800e808  0000f808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e940  0800e940  0000f940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e948  0800e948  0000f948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e94c  0800e94c  0000f94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000000  0800e950  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007ed  20000078  0800e9c8  00010078  2**3
                  ALLOC
  8 ._user_heap_stack 00000603  20000865  0800e9c8  00010865  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ef60  00000000  00000000  000100ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000394c  00000000  00000000  0002f00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001990  00000000  00000000  00032960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013f1  00000000  00000000  000342f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037a84  00000000  00000000  000356e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020557  00000000  00000000  0006d165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001600ee  00000000  00000000  0008d6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ed7aa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007778  00000000  00000000  001ed7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000083  00000000  00000000  001f4f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000078 	.word	0x20000078
 800026c:	00000000 	.word	0x00000000
 8000270:	0800e7f0 	.word	0x0800e7f0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000007c 	.word	0x2000007c
 800028c:	0800e7f0 	.word	0x0800e7f0

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b97e 	b.w	8000ebc <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bdc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14d      	bne.n	8000c80 <__udivmoddi4+0xa8>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	460f      	mov	r7, r1
 8000be8:	4684      	mov	ip, r0
 8000bea:	4696      	mov	lr, r2
 8000bec:	fab2 f382 	clz	r3, r2
 8000bf0:	d960      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bf2:	b14b      	cbz	r3, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c0c:	fa1f f48e 	uxth.w	r4, lr
 8000c10:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c14:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c18:	fb06 7711 	mls	r7, r6, r1, r7
 8000c1c:	fb01 f004 	mul.w	r0, r1, r4
 8000c20:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c28:	eb1e 0202 	adds.w	r2, lr, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x60>
 8000c32:	4290      	cmp	r0, r2
 8000c34:	f200 812d 	bhi.w	8000e92 <__udivmoddi4+0x2ba>
 8000c38:	4639      	mov	r1, r7
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	fa1f fc8c 	uxth.w	ip, ip
 8000c40:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c44:	fb06 2210 	mls	r2, r6, r0, r2
 8000c48:	fb00 f404 	mul.w	r4, r0, r4
 8000c4c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c50:	4564      	cmp	r4, ip
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c54:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5c:	d202      	bcs.n	8000c64 <__udivmoddi4+0x8c>
 8000c5e:	4564      	cmp	r4, ip
 8000c60:	f200 811a 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000c64:	4610      	mov	r0, r2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	ebac 0c04 	sub.w	ip, ip, r4
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b125      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c72:	fa2c f303 	lsr.w	r3, ip, r3
 8000c76:	2200      	movs	r2, #0
 8000c78:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d905      	bls.n	8000c90 <__udivmoddi4+0xb8>
 8000c84:	b10d      	cbz	r5, 8000c8a <__udivmoddi4+0xb2>
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	e7f5      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d14d      	bne.n	8000d34 <__udivmoddi4+0x15c>
 8000c98:	42a3      	cmp	r3, r4
 8000c9a:	f0c0 80f2 	bcc.w	8000e82 <__udivmoddi4+0x2aa>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f080 80ef 	bcs.w	8000e82 <__udivmoddi4+0x2aa>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	4608      	mov	r0, r1
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e6      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cae:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb2:	e7e3      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 80a2 	bne.w	8000dfe <__udivmoddi4+0x226>
 8000cba:	1a8a      	subs	r2, r1, r2
 8000cbc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cc0:	fa1f f68e 	uxth.w	r6, lr
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cca:	fb07 2014 	mls	r0, r7, r4, r2
 8000cce:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb06 f004 	mul.w	r0, r6, r4
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d90f      	bls.n	8000cfe <__udivmoddi4+0x126>
 8000cde:	eb1e 0202 	adds.w	r2, lr, r2
 8000ce2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000ce6:	bf2c      	ite	cs
 8000ce8:	f04f 0901 	movcs.w	r9, #1
 8000cec:	f04f 0900 	movcc.w	r9, #0
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d903      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cf4:	f1b9 0f00 	cmp.w	r9, #0
 8000cf8:	f000 80c8 	beq.w	8000e8c <__udivmoddi4+0x2b4>
 8000cfc:	4644      	mov	r4, r8
 8000cfe:	1a12      	subs	r2, r2, r0
 8000d00:	fa1f fc8c 	uxth.w	ip, ip
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	fb00 f606 	mul.w	r6, r0, r6
 8000d10:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d14:	4566      	cmp	r6, ip
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x152>
 8000d18:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x150>
 8000d22:	4566      	cmp	r6, ip
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	ebac 0c06 	sub.w	ip, ip, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	e79d      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d46:	40f4      	lsrs	r4, r6
 8000d48:	408a      	lsls	r2, r1
 8000d4a:	431f      	orrs	r7, r3
 8000d4c:	ea4e 030c 	orr.w	r3, lr, ip
 8000d50:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d54:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d64:	fb08 4410 	mls	r4, r8, r0, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb00 f90c 	mul.w	r9, r0, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	d90e      	bls.n	8000d92 <__udivmoddi4+0x1ba>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	bf2c      	ite	cs
 8000d7c:	f04f 0b01 	movcs.w	fp, #1
 8000d80:	f04f 0b00 	movcc.w	fp, #0
 8000d84:	45a1      	cmp	r9, r4
 8000d86:	d903      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d88:	f1bb 0f00 	cmp.w	fp, #0
 8000d8c:	f000 8093 	beq.w	8000eb6 <__udivmoddi4+0x2de>
 8000d90:	4650      	mov	r0, sl
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d9e:	fb08 4413 	mls	r4, r8, r3, r4
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d906      	bls.n	8000dbc <__udivmoddi4+0x1e4>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 38ff 	add.w	r8, r3, #4294967295
 8000db4:	d201      	bcs.n	8000dba <__udivmoddi4+0x1e2>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d87a      	bhi.n	8000eb0 <__udivmoddi4+0x2d8>
 8000dba:	4643      	mov	r3, r8
 8000dbc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc0:	eba4 040c 	sub.w	r4, r4, ip
 8000dc4:	fba0 9802 	umull	r9, r8, r0, r2
 8000dc8:	4544      	cmp	r4, r8
 8000dca:	46cc      	mov	ip, r9
 8000dcc:	4643      	mov	r3, r8
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0x1fe>
 8000dd0:	d106      	bne.n	8000de0 <__udivmoddi4+0x208>
 8000dd2:	45ce      	cmp	lr, r9
 8000dd4:	d204      	bcs.n	8000de0 <__udivmoddi4+0x208>
 8000dd6:	3801      	subs	r0, #1
 8000dd8:	ebb9 0c02 	subs.w	ip, r9, r2
 8000ddc:	eb68 0307 	sbc.w	r3, r8, r7
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x222>
 8000de2:	ebbe 020c 	subs.w	r2, lr, ip
 8000de6:	eb64 0403 	sbc.w	r4, r4, r3
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	fa22 f301 	lsr.w	r3, r2, r1
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	431e      	orrs	r6, r3
 8000df6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	e73e      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000dfe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e02:	f1c3 0120 	rsb	r1, r3, #32
 8000e06:	fa04 f203 	lsl.w	r2, r4, r3
 8000e0a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e0e:	40cc      	lsrs	r4, r1
 8000e10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e14:	fa20 f101 	lsr.w	r1, r0, r1
 8000e18:	fa1f f68e 	uxth.w	r6, lr
 8000e1c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fb07 4410 	mls	r4, r7, r0, r4
 8000e26:	0c11      	lsrs	r1, r2, #16
 8000e28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e2c:	fb00 f406 	mul.w	r4, r0, r6
 8000e30:	428c      	cmp	r4, r1
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x27a>
 8000e34:	eb1e 0101 	adds.w	r1, lr, r1
 8000e38:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3c:	bf2c      	ite	cs
 8000e3e:	f04f 0901 	movcs.w	r9, #1
 8000e42:	f04f 0900 	movcc.w	r9, #0
 8000e46:	428c      	cmp	r4, r1
 8000e48:	d902      	bls.n	8000e50 <__udivmoddi4+0x278>
 8000e4a:	f1b9 0f00 	cmp.w	r9, #0
 8000e4e:	d02c      	beq.n	8000eaa <__udivmoddi4+0x2d2>
 8000e50:	4640      	mov	r0, r8
 8000e52:	1b09      	subs	r1, r1, r4
 8000e54:	b292      	uxth	r2, r2
 8000e56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x2a2>
 8000e6a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e6e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e72:	d201      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d815      	bhi.n	8000ea4 <__udivmoddi4+0x2cc>
 8000e78:	4644      	mov	r4, r8
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e80:	e721      	b.n	8000cc6 <__udivmoddi4+0xee>
 8000e82:	1a86      	subs	r6, r0, r2
 8000e84:	eb64 0303 	sbc.w	r3, r4, r3
 8000e88:	2001      	movs	r0, #1
 8000e8a:	e70e      	b.n	8000caa <__udivmoddi4+0xd2>
 8000e8c:	3c02      	subs	r4, #2
 8000e8e:	4472      	add	r2, lr
 8000e90:	e735      	b.n	8000cfe <__udivmoddi4+0x126>
 8000e92:	3902      	subs	r1, #2
 8000e94:	4472      	add	r2, lr
 8000e96:	e6d0      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e98:	44f4      	add	ip, lr
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	e6e3      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e9e:	44f4      	add	ip, lr
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x152>
 8000ea4:	3c02      	subs	r4, #2
 8000ea6:	4472      	add	r2, lr
 8000ea8:	e7e7      	b.n	8000e7a <__udivmoddi4+0x2a2>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	4471      	add	r1, lr
 8000eae:	e7d0      	b.n	8000e52 <__udivmoddi4+0x27a>
 8000eb0:	3b02      	subs	r3, #2
 8000eb2:	443c      	add	r4, r7
 8000eb4:	e782      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	e76a      	b.n	8000d92 <__udivmoddi4+0x1ba>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <write_pin>:
void uart_interrupt_routine();
#endif

// Write specified pin on specified port either high (1) or low (0).
static inline void write_pin(GPIO_TypeDef * gpio_port, uint32_t gpio_pin, int level)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
#ifdef USE_HAL
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f004 f8e0 	bl	800509c <HAL_GPIO_WritePin>
#else
	level ? LL_GPIO_SetOutputPin(gpio_port, gpio_pin) : LL_GPIO_ResetOutputPin(gpio_port, gpio_pin);
#endif
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <wait_ms>:
 * helpful for repeated function calls within interrupt routine.
 */

// Wait for 'duration' ms. Recommended to never call from within an interrupt function.
static inline void wait_ms(int duration)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	HAL_Delay(duration);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fe00 	bl	8003af4 <HAL_Delay>
#else
	SysTick_Config(SystemCoreClock/1000); // Set up SysTick so that getSysTick() returns ms since program started.
	while (get_SysTick() < duration) {}
#endif
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <enable_interrupt_timer>:

// Enable/disable timer interrupts.
static inline void enable_interrupt_timer(int enable)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <enable_interrupt_timer+0x16>
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <enable_interrupt_timer+0x24>)
 8000f0c:	f009 fd92 	bl	800aa34 <HAL_TIM_Base_Start_IT>
	} else {
		LL_TIM_DisableCounter(INTERRUPT_TIM);
		LL_TIM_DisableIT_UPDATE(INTERRUPT_TIM);
	}
#endif
}
 8000f10:	e002      	b.n	8000f18 <enable_interrupt_timer+0x1c>
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000f12:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <enable_interrupt_timer+0x24>)
 8000f14:	f009 fe2e 	bl	800ab74 <HAL_TIM_Base_Stop_IT>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000214 	.word	0x20000214

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0ea      	sub	sp, #424	@ 0x1a8
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2a:	f002 fd1d 	bl	8003968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2e:	f000 f85d 	bl	8000fec <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000f32:	f000 f8b3 	bl	800109c <SystemPower_Config>
  // reset, for example pushing the RESET button on a NUCLEO board, or when downloading/running using
  // STM32CubeProgrammer. For these cases, this delay can be removed.
  // When this bug does occur, we recommend including a delay of ~500 ms so that this brief running of the previously
  // loaded program doesn't have any interaction with any peripherals and this re-run program does nothing important.
  // In practice, 50 ms is likely enough of a pause from our testing, but 500 ms is even safer.
  wait_ms(500);
 8000f36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f3a:	f7ff ffd3 	bl	8000ee4 <wait_ms>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fa23 	bl	8001388 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000f42:	f000 f8bb 	bl	80010bc <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8000f46:	f000 f9c7 	bl	80012d8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000f4a:	f000 f96d 	bl	8001228 <MX_TIM3_Init>
  MX_SPI3_Init();
 8000f4e:	f000 f8f9 	bl	8001144 <MX_SPI3_Init>
  MX_ICACHE_Init();
 8000f52:	f000 f8e3 	bl	800111c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  // Write register value to pause all used timers when execution pauses during debug
  SET_BIT(DBGMCU->APB1FZR1, 0b10); // enable pausing TIM3 during debug
 8000f56:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <main+0xb8>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	4a20      	ldr	r2, [pc, #128]	@ (8000fdc <main+0xb8>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6093      	str	r3, [r2, #8]

  // Alocate sample_memory array which will be used to store acquired data.
  allocate_sample_memory();
 8000f62:	f000 fbad 	bl	80016c0 <allocate_sample_memory>

  // Set up SPI DMA configuration for when SPI transfers begin.
  initialize_spi_with_dma();
 8000f66:	f000 fbdb 	bl	8001720 <initialize_spi_with_dma>

  // Initialize Intan chip registers with suitable settings for this application.
  // This not only determines the initial registers, but actually writes them via SPI.
  RHDConfigParameters parameters;
  configure_registers(&parameters);
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 fc7d 	bl	800386c <configure_registers>

  // Populate first CONVERT_COMMANDS_PER_SEQUENCE that will repeatedly
  // convert for each sample interrupt.
  // Note that AUX_COMMANDS_PER_SEQUENCE remain unpopulated in command_sequence_MOSI after this.
  configure_convert_commands();
 8000f72:	f002 fc86 	bl	8003882 <configure_convert_commands>

  // Populate the AUX_COMMANDS_PER_SEQUENCE command lists (default 3) with auxiliary commands.
  configure_aux_commands(&parameters);
 8000f76:	463b      	mov	r3, r7
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 fc89 	bl	8003890 <configure_aux_commands>

  // Turn on LED to indicate acquisition is about to start.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	4817      	ldr	r0, [pc, #92]	@ (8000fe0 <main+0xbc>)
 8000f84:	f7ff ff9c 	bl	8000ec0 <write_pin>

  // Start timer so that at every period of 1/SAMPLE_RATE an interrupt occurs. // TODO
  sample_counter = 0;
 8000f88:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <main+0xc0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	801a      	strh	r2, [r3, #0]
  enable_interrupt_timer(1);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f7ff ffb4 	bl	8000efc <enable_interrupt_timer>
  main_loop_active = 1;
 8000f94:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <main+0xc4>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]

  // Keep looping, doing nothing (other than handling interrupts) until enough data has been gathered
  while (1) {

	  // Break infinite loop when loop_escape() condition have been met.
	  if (loop_escape()) break;
 8000f9a:	f002 fbc1 	bl	8003720 <loop_escape>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d106      	bne.n	8000fb2 <main+0x8e>

	  // During infinite loop, write this pin High to indicate this main loop is currently processing.
	  write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 1);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000faa:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <main+0xbc>)
 8000fac:	f7ff ff88 	bl	8000ec0 <write_pin>
	  if (loop_escape()) break;
 8000fb0:	e7f3      	b.n	8000f9a <main+0x76>
 8000fb2:	bf00      	nop
    /* USER CODE BEGIN 3 */

  }

  // Disable TIM to stop sample interrupts.
  enable_interrupt_timer(0);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff ffa1 	bl	8000efc <enable_interrupt_timer>
  main_loop_active = 0;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <main+0xc4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]

  // Disable SPI DMA.
  end_spi_with_dma();
 8000fc0:	f000 fbb5 	bl	800172e <end_spi_with_dma>

  // Transmit accumulated data.
  transmit_data_offline();
 8000fc4:	f002 fbde 	bl	8003784 <transmit_data_offline>

  // Free previously allocated sample memory.
  free_sample_memory();
 8000fc8:	f000 fb9e 	bl	8001708 <free_sample_memory>

  // Indicate acquisition and data transfer have completed.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2180      	movs	r1, #128	@ 0x80
 8000fd0:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <main+0xbc>)
 8000fd2:	f7ff ff75 	bl	8000ec0 <write_pin>

  // Infinite loop for remainder of program life.
  while (1);
 8000fd6:	bf00      	nop
 8000fd8:	e7fd      	b.n	8000fd6 <main+0xb2>
 8000fda:	bf00      	nop
 8000fdc:	e0044000 	.word	0xe0044000
 8000fe0:	42020800 	.word	0x42020800
 8000fe4:	200003fa 	.word	0x200003fa
 8000fe8:	20000701 	.word	0x20000701

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b09e      	sub	sp, #120	@ 0x78
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0318 	add.w	r3, r7, #24
 8000ff6:	2260      	movs	r2, #96	@ 0x60
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00c f916 	bl	800d22c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8001010:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001014:	f004 f88a 	bl	800512c <HAL_PWREx_ControlVoltageScaling>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800101e:	f000 faef 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001026:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800102a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102c:	2302      	movs	r3, #2
 800102e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001030:	2303      	movs	r3, #3
 8001032:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001038:	2301      	movs	r3, #1
 800103a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 12;
 800103c:	230c      	movs	r3, #12
 800103e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8001040:	2308      	movs	r3, #8
 8001042:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001044:	2302      	movs	r3, #2
 8001046:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001048:	2302      	movs	r3, #2
 800104a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800104c:	230c      	movs	r3, #12
 800104e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	4618      	mov	r0, r3
 800105a:	f004 f963 	bl	8005324 <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001064:	f000 facc 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	231f      	movs	r3, #31
 800106a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	2303      	movs	r3, #3
 800106e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	2103      	movs	r1, #3
 8001084:	4618      	mov	r0, r3
 8001086:	f005 f829 	bl	80060dc <HAL_RCC_ClockConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001090:	f000 fab6 	bl	8001600 <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	3778      	adds	r7, #120	@ 0x78
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80010a0:	f004 f920 	bl	80052e4 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010a4:	f004 f92e 	bl	8005304 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80010a8:	2002      	movs	r0, #2
 80010aa:	f004 f8cb 	bl	8005244 <HAL_PWREx_ConfigSupply>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 80010b4:	f000 faa4 	bl	8001600 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_GPDMA1_Init+0x5c>)
 80010c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c8:	4a13      	ldr	r2, [pc, #76]	@ (8001118 <MX_GPDMA1_Init+0x5c>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_GPDMA1_Init+0x5c>)
 80010d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	201d      	movs	r0, #29
 80010e6:	f002 fde1 	bl	8003cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80010ea:	201d      	movs	r0, #29
 80010ec:	f002 fdf8 	bl	8003ce0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2054      	movs	r0, #84	@ 0x54
 80010f6:	f002 fdd9 	bl	8003cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80010fa:	2054      	movs	r0, #84	@ 0x54
 80010fc:	f002 fdf0 	bl	8003ce0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 0, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	2055      	movs	r0, #85	@ 0x55
 8001106:	f002 fdd1 	bl	8003cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 800110a:	2055      	movs	r0, #85	@ 0x55
 800110c:	f002 fde8 	bl	8003ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	46020c00 	.word	0x46020c00

0800111c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001120:	2000      	movs	r0, #0
 8001122:	f003 ffd3 	bl	80050cc <HAL_ICACHE_ConfigAssociativityMode>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800112c:	f000 fa68 	bl	8001600 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001130:	f003 ffec 	bl	800510c <HAL_ICACHE_Enable>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800113a:	f000 fa61 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001154:	4b32      	ldr	r3, [pc, #200]	@ (8001220 <MX_SPI3_Init+0xdc>)
 8001156:	4a33      	ldr	r2, [pc, #204]	@ (8001224 <MX_SPI3_Init+0xe0>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800115a:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <MX_SPI3_Init+0xdc>)
 800115c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001160:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001162:	4b2f      	ldr	r3, [pc, #188]	@ (8001220 <MX_SPI3_Init+0xdc>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001168:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <MX_SPI3_Init+0xdc>)
 800116a:	220f      	movs	r2, #15
 800116c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116e:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <MX_SPI3_Init+0xdc>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001174:	4b2a      	ldr	r3, [pc, #168]	@ (8001220 <MX_SPI3_Init+0xdc>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800117a:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <MX_SPI3_Init+0xdc>)
 800117c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001180:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001182:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <MX_SPI3_Init+0xdc>)
 8001184:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001188:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118a:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <MX_SPI3_Init+0xdc>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001190:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <MX_SPI3_Init+0xdc>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001196:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <MX_SPI3_Init+0xdc>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 800119c:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <MX_SPI3_Init+0xdc>)
 800119e:	2207      	movs	r2, #7
 80011a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <MX_SPI3_Init+0xdc>)
 80011a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <MX_SPI3_Init+0xdc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <MX_SPI3_Init+0xdc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <MX_SPI3_Init+0xdc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_06CYCLE;
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <MX_SPI3_Init+0xdc>)
 80011be:	2260      	movs	r2, #96	@ 0x60
 80011c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_ENABLE;
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <MX_SPI3_Init+0xdc>)
 80011c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <MX_SPI3_Init+0xdc>)
 80011cc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80011d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011d2:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <MX_SPI3_Init+0xdc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_SPI3_Init+0xdc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <MX_SPI3_Init+0xdc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011e4:	480e      	ldr	r0, [pc, #56]	@ (8001220 <MX_SPI3_Init+0xdc>)
 80011e6:	f008 faa1 	bl	800972c <HAL_SPI_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_SPI3_Init+0xb0>
  {
    Error_Handler();
 80011f0:	f000 fa06 	bl	8001600 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 80011f8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011fc:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4806      	ldr	r0, [pc, #24]	@ (8001220 <MX_SPI3_Init+0xdc>)
 8001208:	f009 fbd3 	bl	800a9b2 <HAL_SPIEx_SetConfigAutonomousMode>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_SPI3_Init+0xd2>
  {
    Error_Handler();
 8001212:	f000 f9f5 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000094 	.word	0x20000094
 8001224:	46002000 	.word	0x46002000

08001228 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123a:	463b      	mov	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	615a      	str	r2, [r3, #20]
 800124a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800124c:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <MX_TIM3_Init+0xa8>)
 800124e:	4a21      	ldr	r2, [pc, #132]	@ (80012d4 <MX_TIM3_Init+0xac>)
 8001250:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <MX_TIM3_Init+0xa8>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_TIM3_Init+0xa8>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000;
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <MX_TIM3_Init+0xa8>)
 8001260:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001264:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_TIM3_Init+0xa8>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_TIM3_Init+0xa8>)
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001272:	4817      	ldr	r0, [pc, #92]	@ (80012d0 <MX_TIM3_Init+0xa8>)
 8001274:	f009 fcad 	bl	800abd2 <HAL_TIM_OC_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800127e:	f000 f9bf 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	480f      	ldr	r0, [pc, #60]	@ (80012d0 <MX_TIM3_Init+0xa8>)
 8001292:	f00a fbc3 	bl	800ba1c <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800129c:	f000 f9b0 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012a0:	2300      	movs	r3, #0
 80012a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	2200      	movs	r2, #0
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	@ (80012d0 <MX_TIM3_Init+0xa8>)
 80012b8:	f009 fe32 	bl	800af20 <HAL_TIM_OC_ConfigChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012c2:	f000 f99d 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	@ 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000214 	.word	0x20000214
 80012d4:	40000400 	.word	0x40000400

080012d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 80012de:	4a28      	ldr	r2, [pc, #160]	@ (8001380 <MX_USART1_UART_Init+0xa8>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 12000000;
 80012e2:	4b26      	ldr	r3, [pc, #152]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 80012e4:	4a27      	ldr	r2, [pc, #156]	@ (8001384 <MX_USART1_UART_Init+0xac>)
 80012e6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e8:	4b24      	ldr	r3, [pc, #144]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ee:	4b23      	ldr	r3, [pc, #140]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f4:	4b21      	ldr	r3, [pc, #132]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80012fa:	4b20      	ldr	r3, [pc, #128]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 80012fc:	2208      	movs	r2, #8
 80012fe:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001300:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001306:	4b1d      	ldr	r3, [pc, #116]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 8001308:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800130c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 800130e:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 8001310:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001314:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001316:	4b19      	ldr	r3, [pc, #100]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800131c:	4b17      	ldr	r3, [pc, #92]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 800131e:	2230      	movs	r2, #48	@ 0x30
 8001320:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 8001324:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001328:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800132a:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 800132c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001330:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001332:	4812      	ldr	r0, [pc, #72]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 8001334:	f00a fc7a 	bl	800bc2c <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800133e:	f000 f95f 	bl	8001600 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	480d      	ldr	r0, [pc, #52]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 8001346:	f00b fde9 	bl	800cf1c <HAL_UARTEx_SetTxFifoThreshold>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001350:	f000 f956 	bl	8001600 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001354:	2100      	movs	r1, #0
 8001356:	4809      	ldr	r0, [pc, #36]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 8001358:	f00b fe1e 	bl	800cf98 <HAL_UARTEx_SetRxFifoThreshold>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001362:	f000 f94d 	bl	8001600 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_USART1_UART_Init+0xa4>)
 8001368:	f00b fd9f 	bl	800ceaa <HAL_UARTEx_DisableFifoMode>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_USART1_UART_Init+0x9e>
  {
    Error_Handler();
 8001372:	f000 f945 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000260 	.word	0x20000260
 8001380:	40013800 	.word	0x40013800
 8001384:	00b71b00 	.word	0x00b71b00

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b91      	ldr	r3, [pc, #580]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 80013a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013a4:	4a8f      	ldr	r2, [pc, #572]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ae:	4b8d      	ldr	r3, [pc, #564]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 80013b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013bc:	4b89      	ldr	r3, [pc, #548]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 80013be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c2:	4a88      	ldr	r2, [pc, #544]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013cc:	4b85      	ldr	r3, [pc, #532]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 80013ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	4b82      	ldr	r3, [pc, #520]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 80013dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e0:	4a80      	ldr	r2, [pc, #512]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ea:	4b7e      	ldr	r3, [pc, #504]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 80013ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	4b7a      	ldr	r3, [pc, #488]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 80013fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fe:	4a79      	ldr	r2, [pc, #484]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001408:	4b76      	ldr	r3, [pc, #472]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 800140a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001416:	4b73      	ldr	r3, [pc, #460]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 8001418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141c:	4a71      	ldr	r2, [pc, #452]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001426:	4b6f      	ldr	r3, [pc, #444]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 8001428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001434:	4b6b      	ldr	r3, [pc, #428]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 8001436:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800143a:	4a6a      	ldr	r2, [pc, #424]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 800143c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001440:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001444:	4b67      	ldr	r3, [pc, #412]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 8001446:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800144a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001452:	4b64      	ldr	r3, [pc, #400]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 8001454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001458:	4a62      	ldr	r2, [pc, #392]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 800145a:	f043 0310 	orr.w	r3, r3, #16
 800145e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001462:	4b60      	ldr	r3, [pc, #384]	@ (80015e4 <MX_GPIO_Init+0x25c>)
 8001464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001476:	485c      	ldr	r0, [pc, #368]	@ (80015e8 <MX_GPIO_Init+0x260>)
 8001478:	f003 fe10 	bl	800509c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_RED_Pin|ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 8001482:	485a      	ldr	r0, [pc, #360]	@ (80015ec <MX_GPIO_Init+0x264>)
 8001484:	f003 fe0a 	bl	800509c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|Main_Monitor_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800148e:	4858      	ldr	r0, [pc, #352]	@ (80015f0 <MX_GPIO_Init+0x268>)
 8001490:	f003 fe04 	bl	800509c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	21a0      	movs	r1, #160	@ 0xa0
 8001498:	4856      	ldr	r0, [pc, #344]	@ (80015f4 <MX_GPIO_Init+0x26c>)
 800149a:	f003 fdff 	bl	800509c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ErrorCode_Bit_3_GPIO_Port, ErrorCode_Bit_3_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2101      	movs	r1, #1
 80014a2:	4855      	ldr	r0, [pc, #340]	@ (80015f8 <MX_GPIO_Init+0x270>)
 80014a4:	f003 fdfa 	bl	800509c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80014a8:	2304      	movs	r3, #4
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4619      	mov	r1, r3
 80014ba:	484d      	ldr	r0, [pc, #308]	@ (80015f0 <MX_GPIO_Init+0x268>)
 80014bc:	f003 fc16 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80014c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	4847      	ldr	r0, [pc, #284]	@ (80015f4 <MX_GPIO_Init+0x26c>)
 80014d6:	f003 fc09 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e0:	2303      	movs	r3, #3
 80014e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4841      	ldr	r0, [pc, #260]	@ (80015f4 <MX_GPIO_Init+0x26c>)
 80014f0:	f003 fbfc 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Monitor_Pin */
  GPIO_InitStruct.Pin = Interrupt_Monitor_Pin;
 80014f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Interrupt_Monitor_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	4836      	ldr	r0, [pc, #216]	@ (80015e8 <MX_GPIO_Init+0x260>)
 800150e:	f003 fbed 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin ErrorCode_Bit_1_Pin ErrorCode_Bit_0_Pin ErrorCode_Bit_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin;
 8001512:	f44f 73b2 	mov.w	r3, #356	@ 0x164
 8001516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001518:	2301      	movs	r3, #1
 800151a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	4830      	ldr	r0, [pc, #192]	@ (80015ec <MX_GPIO_Init+0x264>)
 800152c:	f003 fbde 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001530:	2380      	movs	r3, #128	@ 0x80
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	482a      	ldr	r0, [pc, #168]	@ (80015f0 <MX_GPIO_Init+0x268>)
 8001548:	f003 fbd0 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : Main_Monitor_Pin */
  GPIO_InitStruct.Pin = Main_Monitor_Pin;
 800154c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Main_Monitor_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4619      	mov	r1, r3
 8001564:	4822      	ldr	r0, [pc, #136]	@ (80015f0 <MX_GPIO_Init+0x268>)
 8001566:	f003 fbc1 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800156a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	481e      	ldr	r0, [pc, #120]	@ (80015fc <MX_GPIO_Init+0x274>)
 8001584:	f003 fbb2 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001588:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158e:	2303      	movs	r3, #3
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	4817      	ldr	r0, [pc, #92]	@ (80015fc <MX_GPIO_Init+0x274>)
 800159e:	f003 fba5 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 80015a2:	23a0      	movs	r3, #160	@ 0xa0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <MX_GPIO_Init+0x26c>)
 80015ba:	f003 fb97 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : ErrorCode_Bit_3_Pin */
  GPIO_InitStruct.Pin = ErrorCode_Bit_3_Pin;
 80015be:	2301      	movs	r3, #1
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ErrorCode_Bit_3_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <MX_GPIO_Init+0x270>)
 80015d6:	f003 fb89 	bl	8004cec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015da:	bf00      	nop
 80015dc:	3730      	adds	r7, #48	@ 0x30
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	46020c00 	.word	0x46020c00
 80015e8:	42020c00 	.word	0x42020c00
 80015ec:	42021800 	.word	0x42021800
 80015f0:	42020800 	.word	0x42020800
 80015f4:	42020400 	.word	0x42020400
 80015f8:	42021000 	.word	0x42021000
 80015fc:	42020000 	.word	0x42020000

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <Error_Handler+0x8>

0800160c <write_pin>:
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	b29b      	uxth	r3, r3
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	4619      	mov	r1, r3
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f003 fd3a 	bl	800509c <HAL_GPIO_WritePin>
}
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <sample_interrupt_routine>:
// Due to use of DMA in this example (which is very efficient for large data transfers), processing is not
// the likely bottleneck, but rather the rate of SPI communication itself. Shorter SPI command sequences
// (default is 32 CONVERT commands + 3 AUX commands) and/or faster Baud rate will allow SPI communication to
// finish faster.
void sample_interrupt_routine()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	// Check if condition specified in loop_escape (e.g. target number of samples have been acquired) is true.
	// If so, keep from continuing interrupt execution and return to main loop so it can be escaped.
	if (loop_escape()) return;
 8001634:	f002 f874 	bl	8003720 <loop_escape>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d11e      	bne.n	800167c <sample_interrupt_routine+0x4c>

	// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
	// Main loop will write Main_Monitor_Pin when processing returns to main, so the duty cycle of this pin
	// can be measured to estimate what percentage of clock cycles are available for main processing.
	write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001644:	480e      	ldr	r0, [pc, #56]	@ (8001680 <sample_interrupt_routine+0x50>)
 8001646:	f7ff ffe1 	bl	800160c <write_pin>

	// If previous DMA transfer has not completed, SPI communication from previous sample has not finished.
	// This is a critical error that will halt execution. To avoid this, all processing from previous interrupt
	// must conclude sooner (most likely, this would be waiting on SPI transfer completion, in which case
	// fewer channels can be included in the command sequence, or the SPI communication itself must be sped up).
	if (command_transfer_state == TRANSFER_WAIT) {
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <sample_interrupt_routine+0x54>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <sample_interrupt_routine+0x28>
		handle_comm_error(ITClip);
 8001652:	2005      	movs	r0, #5
 8001654:	f000 f872 	bl	800173c <handle_comm_error>

	// Indicate start of timer interrupt by writing Interrupt_Monitor_Pin High.
	// At the end of this function, Interrupt_Monitor_Pin will be written Low (though, keep in mind that
	// this only indicates that the DMA transfer has been initiated - DMA will continue running either until
	// its SPI command sequence concludes, or the next interrupt occurs, causing an ITClip error).
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 1);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800165e:	480a      	ldr	r0, [pc, #40]	@ (8001688 <sample_interrupt_routine+0x58>)
 8001660:	f7ff ffd4 	bl	800160c <write_pin>

	// Update variable indicate to wait until SPI DMA transfer completes.
	command_transfer_state = TRANSFER_WAIT;
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <sample_interrupt_routine+0x54>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]

	transfer_sequence_spi_dma();
 800166a:	f000 f80f 	bl	800168c <transfer_sequence_spi_dma>

	// SPI DMA transfer has begun, so write Interrupt_Monitor_Pin Low and exit interrupt function,
	// returning to processing main loop.
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001674:	4804      	ldr	r0, [pc, #16]	@ (8001688 <sample_interrupt_routine+0x58>)
 8001676:	f7ff ffc9 	bl	800160c <write_pin>
 800167a:	e000      	b.n	800167e <sample_interrupt_routine+0x4e>
	if (loop_escape()) return;
 800167c:	bf00      	nop
}
 800167e:	bd80      	pop	{r7, pc}
 8001680:	42020800 	.word	0x42020800
 8001684:	20000004 	.word	0x20000004
 8001688:	42020c00 	.word	0x42020c00

0800168c <transfer_sequence_spi_dma>:

// Begin receiving MISO data (RHD -> SPI -> DMA -> memory) and transmitting MOSI data (memory -> DMA -> SPI -> RHD)
void transfer_sequence_spi_dma()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af02      	add	r7, sp, #8
	// HAL handles all of SPI DMA transfer with this single function call.

	// Note: this HAL function call seems to not be consistent in how long it takes, causing some jitter between Interrupt_Monitor_Pin (GPIO) and SPI signals.
	// However, SPI/DMA signals seem to be consistent with each other, so this shouldn't affect functionality.

	if (HAL_SPI_TransmitReceive(&SPI, (uint8_t*)command_sequence_MOSI, (uint8_t*)command_sequence_MISO,
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2323      	movs	r3, #35	@ 0x23
 800169a:	4a06      	ldr	r2, [pc, #24]	@ (80016b4 <transfer_sequence_spi_dma+0x28>)
 800169c:	4906      	ldr	r1, [pc, #24]	@ (80016b8 <transfer_sequence_spi_dma+0x2c>)
 800169e:	4807      	ldr	r0, [pc, #28]	@ (80016bc <transfer_sequence_spi_dma+0x30>)
 80016a0:	f008 f95a 	bl	8009958 <HAL_SPI_TransmitReceive>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <transfer_sequence_spi_dma+0x22>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE, HAL_MAX_DELAY) != HAL_OK)
	{
		Error_Handler();
 80016aa:	f7ff ffa9 	bl	8001600 <Error_Handler>

#else
	begin_spi_rx(LL_DMA_DEST_INCREMENT, (uint32_t) command_sequence_MISO, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
	begin_spi_tx(LL_DMA_SRC_INCREMENT, (uint32_t) command_sequence_MOSI, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
#endif
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200003b4 	.word	0x200003b4
 80016b8:	2000036c 	.word	0x2000036c
 80016bc:	20000094 	.word	0x20000094

080016c0 <allocate_sample_memory>:


// Calculate suitable size for sample_memory array and allocate memory.
// Note, free_sample_memory() should be called after this function and when memory allocation is no longer needed.
void allocate_sample_memory()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
	per_channel_sample_memory_capacity = calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 80016c6:	f000 f91f 	bl	8001908 <calculate_sample_rate>
 80016ca:	ec53 2b10 	vmov	r2, r3, d0
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff fa49 	bl	8000b68 <__aeabi_d2uiz>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a09      	ldr	r2, [pc, #36]	@ (8001700 <allocate_sample_memory+0x40>)
 80016da:	6013      	str	r3, [r2, #0]
	uint32_t total_sample_memory_capacity = NUM_SAMPLED_CHANNELS * per_channel_sample_memory_capacity;
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <allocate_sample_memory+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	607b      	str	r3, [r7, #4]
	sample_memory = (uint16_t *)malloc(total_sample_memory_capacity * sizeof(uint16_t));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00b fce1 	bl	800d0b0 <malloc>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <allocate_sample_memory+0x44>)
 80016f4:	601a      	str	r2, [r3, #0]
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000000 	.word	0x20000000
 8001704:	200003fc 	.word	0x200003fc

08001708 <free_sample_memory>:


// Free memory previously allocated for sample_memory array.
// Note, this should be called after allocate_sample_memory() and when memory allocation is no longer needed.
void free_sample_memory()
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	free(sample_memory);
 800170c:	4b03      	ldr	r3, [pc, #12]	@ (800171c <free_sample_memory+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f00b fcd5 	bl	800d0c0 <free>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200003fc 	.word	0x200003fc

08001720 <initialize_spi_with_dma>:
// so this function only has an LL implementation.
// Some of these settings (data length, memory location, and memory increment state)
// will be overwritten on a transfer-by-transfer basis, but the general configurations
// like transfer directions, peripheral addresses, and DMAMUX request ID can be permanently set here.
void initialize_spi_with_dma()
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	return;
 8001724:	bf00      	nop
	LL_DMA_SetDestIncMode(DMA, DMA_RX_CHANNEL, LL_DMA_DEST_INCREMENT);

	// Default to data length of full command sequence - may be overwritten for individual transfers
	LL_DMA_SetBlkDataLength(DMA, DMA_RX_CHANNEL, (CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) * 2);
#endif
}
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <end_spi_with_dma>:

// Write SPI/DMA registers to cleanly disable once DMA transfer ends.
// HAL automatically does this for each Send/Receive with SPI/DMA,
// so this function only has an LL implmentation.
void end_spi_with_dma()
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
#ifdef USE_HAL
#else
	end_spi_rx();
	end_spi_tx();
#endif
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <handle_comm_error>:
// Handle communication error.
// Write ERROR_DETECTED_PIN (by default, red LED) High.
// Write each bit of a 4-bit error code to a pin so that by measuring pins, user can determine the error code.
// Enter an infinite loop, halting execution and allowing user to measure error pins.
void handle_comm_error(CommErrorStatus error_code)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
	// No error, just return.
	if (error_code == 0) return;
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d03e      	beq.n	80017ca <handle_comm_error+0x8e>

	// Write ERROR_DETECTED_PIN (by default red LED) to communicate that an error occurred.
	write_pin(ERROR_DETECTED_PORT, ERROR_DETECTED_PIN, 1);
 800174c:	2201      	movs	r2, #1
 800174e:	2104      	movs	r1, #4
 8001750:	4820      	ldr	r0, [pc, #128]	@ (80017d4 <handle_comm_error+0x98>)
 8001752:	f7ff ff5b 	bl	800160c <write_pin>

	// Write 4 bits of error code to 4 pins.
	uint8_t error_code_bit_0 = (error_code & 0b0001) >> 0;
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
	uint8_t error_code_bit_1 = (error_code & 0b0010) >> 1;
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	105b      	asrs	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	73bb      	strb	r3, [r7, #14]
	uint8_t error_code_bit_2 = (error_code & 0b0100) >> 2;
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	109b      	asrs	r3, r3, #2
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	737b      	strb	r3, [r7, #13]
	uint8_t error_code_bit_3 = (error_code & 0b1000) >> 3;
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	10db      	asrs	r3, r3, #3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	733b      	strb	r3, [r7, #12]
	if (error_code_bit_0) write_pin(ErrorCode_Bit_0_GPIO_Port, ErrorCode_Bit_0_Pin, 1);
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <handle_comm_error+0x56>
 8001788:	2201      	movs	r2, #1
 800178a:	2140      	movs	r1, #64	@ 0x40
 800178c:	4811      	ldr	r0, [pc, #68]	@ (80017d4 <handle_comm_error+0x98>)
 800178e:	f7ff ff3d 	bl	800160c <write_pin>
	if (error_code_bit_1) write_pin(ErrorCode_Bit_1_GPIO_Port, ErrorCode_Bit_1_Pin, 1);
 8001792:	7bbb      	ldrb	r3, [r7, #14]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d004      	beq.n	80017a2 <handle_comm_error+0x66>
 8001798:	2201      	movs	r2, #1
 800179a:	2120      	movs	r1, #32
 800179c:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <handle_comm_error+0x98>)
 800179e:	f7ff ff35 	bl	800160c <write_pin>
	if (error_code_bit_2) write_pin(ErrorCode_Bit_2_GPIO_Port, ErrorCode_Bit_2_Pin, 1);
 80017a2:	7b7b      	ldrb	r3, [r7, #13]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <handle_comm_error+0x78>
 80017a8:	2201      	movs	r2, #1
 80017aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017ae:	4809      	ldr	r0, [pc, #36]	@ (80017d4 <handle_comm_error+0x98>)
 80017b0:	f7ff ff2c 	bl	800160c <write_pin>
	if (error_code_bit_3) write_pin(ErrorCode_Bit_3_GPIO_Port, ErrorCode_Bit_3_Pin, 1);
 80017b4:	7b3b      	ldrb	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <handle_comm_error+0x8a>
 80017ba:	2201      	movs	r2, #1
 80017bc:	2101      	movs	r1, #1
 80017be:	4806      	ldr	r0, [pc, #24]	@ (80017d8 <handle_comm_error+0x9c>)
 80017c0:	f7ff ff24 	bl	800160c <write_pin>

	// Enter infinite loop.
	while(1);
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	e7fd      	b.n	80017c6 <handle_comm_error+0x8a>
	if (error_code == 0) return;
 80017ca:	bf00      	nop
}
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	42021800 	.word	0x42021800
 80017d8:	42021000 	.word	0x42021000

080017dc <spi_txrx_cplt_callback>:

// Callback function that executes when both Transmission and Reception of SPI have completed.
void spi_txrx_cplt_callback()
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	// If main loop is active, drive Main_Monitor_Pin low, write data to memory, transmit data in realtime, and update command_transfer_state
	if (main_loop_active) {
 80017e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <spi_txrx_cplt_callback+0x34>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00d      	beq.n	8001806 <spi_txrx_cplt_callback+0x2a>
		//Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
		write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017f0:	4808      	ldr	r0, [pc, #32]	@ (8001814 <spi_txrx_cplt_callback+0x38>)
 80017f2:	f7ff ff0b 	bl	800160c <write_pin>

		// User-specified function - here is where specified channel(s) can be written to memory.
		write_data_to_memory();
 80017f6:	f001 ff9b 	bl	8003730 <write_data_to_memory>

		// User-specified function - here is where user can transmit data in real time every sample period.
		transmit_data_realtime();
 80017fa:	f001 ffa1 	bl	8003740 <transmit_data_realtime>

		// Update state variable to show that transfer has completed.
		command_transfer_state = TRANSFER_COMPLETE;
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <spi_txrx_cplt_callback+0x3c>)
 8001800:	2201      	movs	r2, #1
 8001802:	601a      	str	r2, [r3, #0]
#else
		end_spi_rx();
#endif
		reception_in_progress = 0;
	}
}
 8001804:	e002      	b.n	800180c <spi_txrx_cplt_callback+0x30>
		reception_in_progress = 0;
 8001806:	4b05      	ldr	r3, [pc, #20]	@ (800181c <spi_txrx_cplt_callback+0x40>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000701 	.word	0x20000701
 8001814:	42020800 	.word	0x42020800
 8001818:	20000004 	.word	0x20000004
 800181c:	20000700 	.word	0x20000700

08001820 <spi_error_callback>:

// Callback function to show that an SPI error occurred.
void spi_error_callback()
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
	command_transfer_state = TRANSFER_ERROR;
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <spi_error_callback+0x14>)
 8001826:	2202      	movs	r2, #2
 8001828:	601a      	str	r2, [r3, #0]
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	20000004 	.word	0x20000004

08001838 <write_initial_reg_values>:
// Determine suitable values to be written to registers
// (based on default acquisition values from RHX software).
// These suitable default values are saved to RHDConfigParameters argument.
// Write these values to registers, and calibrate and run for 9 commands to fully initialize chip.
void write_initial_reg_values(RHDConfigParameters *p)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08e      	sub	sp, #56	@ 0x38
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	// Determine suitable values to be written for each of the registers.
	p->sample_rate = calculate_sample_rate();
 8001840:	f000 f862 	bl	8001908 <calculate_sample_rate>
 8001844:	eeb0 7a40 	vmov.f32	s14, s0
 8001848:	eef0 7a60 	vmov.f32	s15, s1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	ed83 7b00 	vstr	d7, [r3]
	set_default_rhd_settings(p);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f001 f910 	bl	8002a78 <set_default_rhd_settings>

	uint16_t registers[18];
	for (int i = 0; i < 18; i++) {
 8001858:	2300      	movs	r3, #0
 800185a:	637b      	str	r3, [r7, #52]	@ 0x34
 800185c:	e00e      	b.n	800187c <write_initial_reg_values+0x44>
		registers[i] = get_register_value(p, i);
 800185e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f001 fa59 	bl	8002d18 <get_register_value>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	3338      	adds	r3, #56	@ 0x38
 8001870:	443b      	add	r3, r7
 8001872:	f823 2c30 	strh.w	r2, [r3, #-48]
	for (int i = 0; i < 18; i++) {
 8001876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001878:	3301      	adds	r3, #1
 800187a:	637b      	str	r3, [r7, #52]	@ 0x34
 800187c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800187e:	2b11      	cmp	r3, #17
 8001880:	dded      	ble.n	800185e <write_initial_reg_values+0x26>
	}

	// Send a few dummy commands in case chip is still powering up.
	send_spi_command(read_command(63));
 8001882:	203f      	movs	r0, #63	@ 0x3f
 8001884:	f001 fbf2 	bl	800306c <read_command>
 8001888:	4603      	mov	r3, r0
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f8da 	bl	8001a44 <send_spi_command>
	send_spi_command(read_command(63));
 8001890:	203f      	movs	r0, #63	@ 0x3f
 8001892:	f001 fbeb 	bl	800306c <read_command>
 8001896:	4603      	mov	r3, r0
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f8d3 	bl	8001a44 <send_spi_command>


	// Write suitable default values for RHD registers.
	for (int i = 0; i < 18; i++) {
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80018a2:	e013      	b.n	80018cc <write_initial_reg_values+0x94>
		send_spi_command(write_command(i, registers[i]));
 80018a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	3338      	adds	r3, #56	@ 0x38
 80018ae:	443b      	add	r3, r7
 80018b0:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	4619      	mov	r1, r3
 80018b8:	4610      	mov	r0, r2
 80018ba:	f001 fbba 	bl	8003032 <write_command>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 f8bf 	bl	8001a44 <send_spi_command>
	for (int i = 0; i < 18; i++) {
 80018c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c8:	3301      	adds	r3, #1
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80018cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ce:	2b11      	cmp	r3, #17
 80018d0:	dde8      	ble.n	80018a4 <write_initial_reg_values+0x6c>
	}

	// Calibrate and run for 9 commands.
	send_spi_command(calibrate_command());
 80018d2:	f001 fba5 	bl	8003020 <calibrate_command>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f8b3 	bl	8001a44 <send_spi_command>
	for (int i = 0; i < 9; i++) {
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018e2:	e009      	b.n	80018f8 <write_initial_reg_values+0xc0>
		send_spi_command(read_command(40));
 80018e4:	2028      	movs	r0, #40	@ 0x28
 80018e6:	f001 fbc1 	bl	800306c <read_command>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f8a9 	bl	8001a44 <send_spi_command>
	for (int i = 0; i < 9; i++) {
 80018f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f4:	3301      	adds	r3, #1
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	ddf2      	ble.n	80018e4 <write_initial_reg_values+0xac>
	}
}
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	3738      	adds	r7, #56	@ 0x38
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <calculate_sample_rate>:
// Check timer clock input, clock division, prescaling, and counter period
// to determine the rate at which INTERRUPT_TIM interrupts occur (sample rate).
// Note that this reads clock and timer configuration register values during runtime,
// so this function should adapt to any changes made to the .ioc.
double calculate_sample_rate()
{
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b08a      	sub	sp, #40	@ 0x28
 800190c:	af00      	add	r7, sp, #0
	uint32_t apb1_timer_freq, ckd_value, psc_value, counter_period;

#ifdef USE_HAL
	apb1_timer_freq = HAL_RCC_GetPCLK1Freq();
 800190e:	f004 fef3 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8001912:	61f8      	str	r0, [r7, #28]
	ckd_value = INTERRUPT_TIM.Init.ClockDivision;
 8001914:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <calculate_sample_rate+0xb0>)
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	61bb      	str	r3, [r7, #24]
	psc_value = INTERRUPT_TIM.Init.Prescaler;
 800191a:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <calculate_sample_rate+0xb0>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	617b      	str	r3, [r7, #20]
	counter_period = INTERRUPT_TIM.Init.Period;
 8001920:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <calculate_sample_rate+0xb0>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	613b      	str	r3, [r7, #16]
	ckd_value = LL_TIM_GetClockDivision(INTERRUPT_TIM);
	psc_value = LL_TIM_GetPrescaler(INTERRUPT_TIM);
	counter_period = LL_TIM_GetAutoReload(INTERRUPT_TIM);
#endif

	double ckd_factor = 1.0;
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <calculate_sample_rate+0xb4>)
 800192c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (ckd_value == 0b01) {
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d106      	bne.n	8001944 <calculate_sample_rate+0x3c>
		ckd_factor = 2;
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800193e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001942:	e007      	b.n	8001954 <calculate_sample_rate+0x4c>
	} else if (ckd_value == 0b10) {
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d104      	bne.n	8001954 <calculate_sample_rate+0x4c>
		ckd_factor = 4;
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	4b1c      	ldr	r3, [pc, #112]	@ (80019c0 <calculate_sample_rate+0xb8>)
 8001950:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	double psc_factor = psc_value + 1;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fddb 	bl	8000514 <__aeabi_ui2d>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double input_frequency = apb1_timer_freq / (ckd_factor * psc_factor);
 8001966:	69f8      	ldr	r0, [r7, #28]
 8001968:	f7fe fdd4 	bl	8000514 <__aeabi_ui2d>
 800196c:	4604      	mov	r4, r0
 800196e:	460d      	mov	r5, r1
 8001970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001974:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001978:	f7fe fe46 	bl	8000608 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4620      	mov	r0, r4
 8001982:	4629      	mov	r1, r5
 8001984:	f7fe ff6a 	bl	800085c <__aeabi_ddiv>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	e9c7 2300 	strd	r2, r3, [r7]
	return input_frequency / counter_period;
 8001990:	6938      	ldr	r0, [r7, #16]
 8001992:	f7fe fdbf 	bl	8000514 <__aeabi_ui2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800199e:	f7fe ff5d 	bl	800085c <__aeabi_ddiv>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80019aa:	eeb0 0a47 	vmov.f32	s0, s14
 80019ae:	eef0 0a67 	vmov.f32	s1, s15
 80019b2:	3728      	adds	r7, #40	@ 0x28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	20000214 	.word	0x20000214
 80019bc:	3ff00000 	.word	0x3ff00000
 80019c0:	40100000 	.word	0x40100000

080019c4 <create_convert_sequence>:
// and load them into command_sequence_MOSI.
// If the channel_numbers_to_convert parameter is NULL,
// create CONVERT_COMMANDS_PER_SEQUENCE commands from channel 0 (default 0 - 31).
// Otherwise, populate the CONVERT commands in the order specified by channel_numbers_to_convert.
void create_convert_sequence(uint8_t* channel_numbers_to_convert)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
//			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
//		}
//	}

	// TODO - IMPORTANT - doesn't look like AUX commands are written to command_sequence_MOSI properly the way CONVERT commands are here
	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE; i++) {
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e00b      	b.n	80019ea <create_convert_sequence+0x26>
		//command_sequence_MOSI[i] = read_command(63);
		command_sequence_MOSI[i] = read_command(40);
 80019d2:	2028      	movs	r0, #40	@ 0x28
 80019d4:	f001 fb4a 	bl	800306c <read_command>
 80019d8:	4603      	mov	r3, r0
 80019da:	4619      	mov	r1, r3
 80019dc:	4a07      	ldr	r2, [pc, #28]	@ (80019fc <create_convert_sequence+0x38>)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE; i++) {
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3301      	adds	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b22      	cmp	r3, #34	@ 0x22
 80019ee:	ddf0      	ble.n	80019d2 <create_convert_sequence+0xe>
	}
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000036c 	.word	0x2000036c

08001a00 <create_command_list_dummy>:


// Create a list of dummy commands with a specific command.
// Return the length of the command list (which should be n).
int create_command_list_dummy(RHDConfigParameters *p, uint16_t *command_list, int n, uint16_t cmd)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	807b      	strh	r3, [r7, #2]
	int command_index = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < n; i++) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	e00a      	b.n	8001a2e <create_command_list_dummy+0x2e>
		command_list[command_index++] = cmd;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	617a      	str	r2, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	4413      	add	r3, r2
 8001a24:	887a      	ldrh	r2, [r7, #2]
 8001a26:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < n; i++) {
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dbf0      	blt.n	8001a18 <create_command_list_dummy+0x18>
	}

	return command_index;
 8001a36:	697b      	ldr	r3, [r7, #20]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <send_spi_command>:
	return command_index;
}

// Send provided 16-bit word 'tx_data' over SPI, ignoring resultant 16-bit received word.
void send_spi_command(uint16_t tx_data)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
	uint16_t dummy_data = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	81fb      	strh	r3, [r7, #14]
	send_receive_spi_command(tx_data, &dummy_data);
 8001a52:	f107 020e 	add.w	r2, r7, #14
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f804 	bl	8001a68 <send_receive_spi_command>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <send_receive_spi_command>:

// Send provided 16-bit word 'tx_data' over SPI, and pass resultant 16-bit received work by reference.
// Note that the pipelined nature of the SPI communication has a 2-command delay,
// so the obtained result corresponds to the command from 2 transactions earlier.
void send_receive_spi_command(uint16_t tx_data, uint16_t *rx_data)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	80fb      	strh	r3, [r7, #6]
	reception_in_progress = 1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <send_receive_spi_command+0x40>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
#ifdef USE_HAL

	if (HAL_SPI_TransmitReceive_DMA(&SPI, (uint8_t*) &tx_data, (uint8_t*)rx_data, 1) != HAL_OK)
 8001a7a:	1db9      	adds	r1, r7, #6
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	480a      	ldr	r0, [pc, #40]	@ (8001aac <send_receive_spi_command+0x44>)
 8001a82:	f008 f9c3 	bl	8009e0c <HAL_SPI_TransmitReceive_DMA>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <send_receive_spi_command+0x28>
	{
		Error_Handler();
 8001a8c:	f7ff fdb8 	bl	8001600 <Error_Handler>

#else
	begin_spi_rx(LL_DMA_DEST_FIXED, (uint32_t) rx_data, 1);
	begin_spi_tx(LL_DMA_SRC_FIXED, (uint32_t) &tx_data, 1);
#endif
	while (reception_in_progress == 1) {}
 8001a90:	bf00      	nop
 8001a92:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <send_receive_spi_command+0x40>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d0fa      	beq.n	8001a92 <send_receive_spi_command+0x2a>
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000700 	.word	0x20000700
 8001aac:	20000094 	.word	0x20000094

08001ab0 <HAL_SPI_TxRxCpltCallback>:

#ifdef USE_HAL
// HAL calls this function when both Tx and Rx have completed.
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	if (hspi == &SPI) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <HAL_SPI_TxRxCpltCallback+0x1c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_SPI_TxRxCpltCallback+0x14>
		spi_txrx_cplt_callback();
 8001ac0:	f7ff fe8c 	bl	80017dc <spi_txrx_cplt_callback>
	}
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000094 	.word	0x20000094

08001ad0 <HAL_SPI_ErrorCallback>:


// HAL calls this function when an error in the SPI communication has been detected.
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	spi_error_callback();
 8001ad8:	f7ff fea2 	bl	8001820 <spi_error_callback>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_UART_TxCpltCallback>:


// HAL calls this function when UART Tx has completed.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	uart_ready = 1;
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <HAL_UART_TxCpltCallback+0x1c>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000008 	.word	0x20000008

08001b04 <set_DigOut_hiZ>:
	p->digOut_hiZ = 0;
}

// Set auxiliary digital output to high-impedance (HiZ) state.
void set_DigOut_hiZ(RHDConfigParameters *p)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	p->digOut = 0;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	635a      	str	r2, [r3, #52]	@ 0x34
	p->digOut_hiZ = 1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	0000      	movs	r0, r0
	...

08001b28 <set_DSP_cutoff_freq>:

// Set the DSP offset removal filter cutoff frequency as closely to the requested
// newDspCutoffFreq (in Hz) as possible; returns the actual cutoff frequency (in Hz).
double set_DSP_cutoff_freq(RHDConfigParameters *p, double new_DSP_cutoff_freq)
{
 8001b28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b2c:	b0b0      	sub	sp, #192	@ 0xc0
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	ed87 0b00 	vstr	d0, [r7]
	double f_cutoff[16] = {0};
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	2280      	movs	r2, #128	@ 0x80
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f00b fb74 	bl	800d22c <memset>
	// Note: f_cutoff[0] = 0.0 here, but this index should not be used.
	for (int n = 1; n < 16; ++n) {
 8001b44:	2301      	movs	r3, #1
 8001b46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001b4a:	e045      	b.n	8001bd8 <set_DSP_cutoff_freq+0xb0>
		double x = pow(2.0, (double) n);
 8001b4c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001b50:	f7fe fcf0 	bl	8000534 <__aeabi_i2d>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	ec43 2b11 	vmov	d1, r2, r3
 8001b5c:	ed9f 0b5e 	vldr	d0, [pc, #376]	@ 8001cd8 <set_DSP_cutoff_freq+0x1b0>
 8001b60:	f00b fc70 	bl	800d444 <pow>
 8001b64:	ed87 0b24 	vstr	d0, [r7, #144]	@ 0x90
		f_cutoff[n] = p->sample_rate * log(x / (x - 1.0)) / (2.0 * M_PI);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf0 <set_DSP_cutoff_freq+0x1c8>)
 8001b74:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001b78:	f7fe fb8e 	bl	8000298 <__aeabi_dsub>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001b84:	f7fe fe6a 	bl	800085c <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	ec43 2b17 	vmov	d7, r2, r3
 8001b90:	eeb0 0a47 	vmov.f32	s0, s14
 8001b94:	eef0 0a67 	vmov.f32	s1, s15
 8001b98:	f00b fbd6 	bl	800d348 <log>
 8001b9c:	ec53 2b10 	vmov	r2, r3, d0
 8001ba0:	4640      	mov	r0, r8
 8001ba2:	4649      	mov	r1, r9
 8001ba4:	f7fe fd30 	bl	8000608 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	a34b      	add	r3, pc, #300	@ (adr r3, 8001ce0 <set_DSP_cutoff_freq+0x1b8>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	f7fe fe51 	bl	800085c <__aeabi_ddiv>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8001bc2:	00c9      	lsls	r1, r1, #3
 8001bc4:	31c0      	adds	r1, #192	@ 0xc0
 8001bc6:	4439      	add	r1, r7
 8001bc8:	39b0      	subs	r1, #176	@ 0xb0
 8001bca:	e9c1 2300 	strd	r2, r3, [r1]
	for (int n = 1; n < 16; ++n) {
 8001bce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001bd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	ddb5      	ble.n	8001b4c <set_DSP_cutoff_freq+0x24>
	}
	double log_new_DSP_cutoff_freq = log10(new_DSP_cutoff_freq);
 8001be0:	ed97 0b00 	vldr	d0, [r7]
 8001be4:	f00b fbf0 	bl	800d3c8 <log10>
 8001be8:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

	// Find the closest value to the requested cutoff frequency (on a logarithmic scale).
	if (new_DSP_cutoff_freq > f_cutoff[1]) {
 8001bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf4:	f7fe ff98 	bl	8000b28 <__aeabi_dcmpgt>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <set_DSP_cutoff_freq+0xde>
		p->DSP_cutoff_freq = 1;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001c04:	e055      	b.n	8001cb2 <set_DSP_cutoff_freq+0x18a>
	} else if (new_DSP_cutoff_freq < f_cutoff[15]) {
 8001c06:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c0e:	f7fe ff6d 	bl	8000aec <__aeabi_dcmplt>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <set_DSP_cutoff_freq+0xf8>
		p->DSP_cutoff_freq = 15;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001c1e:	e048      	b.n	8001cb2 <set_DSP_cutoff_freq+0x18a>
	} else {
		double min_log_diff = 10000000.0;
 8001c20:	a331      	add	r3, pc, #196	@ (adr r3, 8001ce8 <set_DSP_cutoff_freq+0x1c0>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		for (int n = 1; n < 16; n++) {
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001c30:	e03b      	b.n	8001caa <set_DSP_cutoff_freq+0x182>
			double log_f_cutoff = log10(f_cutoff[n]);
 8001c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	33c0      	adds	r3, #192	@ 0xc0
 8001c3a:	443b      	add	r3, r7
 8001c3c:	3bb0      	subs	r3, #176	@ 0xb0
 8001c3e:	ed93 7b00 	vldr	d7, [r3]
 8001c42:	eeb0 0a47 	vmov.f32	s0, s14
 8001c46:	eef0 0a67 	vmov.f32	s1, s15
 8001c4a:	f00b fbbd 	bl	800d3c8 <log10>
 8001c4e:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
			if (fabs(log_new_DSP_cutoff_freq - log_f_cutoff) < min_log_diff) {
 8001c52:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001c56:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001c5a:	f7fe fb1d 	bl	8000298 <__aeabi_dsub>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4614      	mov	r4, r2
 8001c64:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001c68:	4622      	mov	r2, r4
 8001c6a:	462b      	mov	r3, r5
 8001c6c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001c70:	f7fe ff5a 	bl	8000b28 <__aeabi_dcmpgt>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d012      	beq.n	8001ca0 <set_DSP_cutoff_freq+0x178>
				min_log_diff = fabs(log_new_DSP_cutoff_freq - log_f_cutoff);
 8001c7a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001c7e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001c82:	f7fe fb09 	bl	8000298 <__aeabi_dsub>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8001c90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
				p->DSP_cutoff_freq = n;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001c9e:	64da      	str	r2, [r3, #76]	@ 0x4c
		for (int n = 1; n < 16; n++) {
 8001ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	ddbf      	ble.n	8001c32 <set_DSP_cutoff_freq+0x10a>
			}
		}
	}
	return f_cutoff[p->DSP_cutoff_freq];
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	33c0      	adds	r3, #192	@ 0xc0
 8001cba:	443b      	add	r3, r7
 8001cbc:	3bb0      	subs	r3, #176	@ 0xb0
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cca:	eef0 0a67 	vmov.f32	s1, s15
 8001cce:	37c0      	adds	r7, #192	@ 0xc0
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cd6:	bf00      	nop
 8001cd8:	00000000 	.word	0x00000000
 8001cdc:	40000000 	.word	0x40000000
 8001ce0:	54442d18 	.word	0x54442d18
 8001ce4:	401921fb 	.word	0x401921fb
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	416312d0 	.word	0x416312d0
 8001cf0:	3ff00000 	.word	0x3ff00000

08001cf4 <set_zcheck_scale>:
}

// Select the series capacitor used to convert the voltage waveform generated by the on-chip DAC into an AC
// current waveform that stimulates a selected electrode for impedance testing (ZcheckCs100fF, ZcheckCs1pF, or Zcheck10pF).
void set_zcheck_scale(RHDConfigParameters *p, ZcheckCs scale)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
	switch (scale) {
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d00e      	beq.n	8001d24 <set_zcheck_scale+0x30>
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	dc10      	bgt.n	8001d2c <set_zcheck_scale+0x38>
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <set_zcheck_scale+0x20>
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d004      	beq.n	8001d1c <set_zcheck_scale+0x28>
		break;
	case ZcheckCs10pF:
		p->zcheck_scale = 0x03;
		break;
	}
}
 8001d12:	e00b      	b.n	8001d2c <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x00;		// Cs = 0.1 pF
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001d1a:	e007      	b.n	8001d2c <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x01;		// Cs = 1.0 pF
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001d22:	e003      	b.n	8001d2c <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x03;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2203      	movs	r2, #3
 8001d28:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001d2a:	bf00      	nop
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <set_zcheck_polarity>:

// Select impedance testing of positive or negative amplifier inputs (RHD2216 only), based on
// the variable polarity (ZcheckPositiveInput or ZcheckNegativeInput).
void set_zcheck_polarity(RHDConfigParameters *p, ZcheckPolarity polarity)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	70fb      	strb	r3, [r7, #3]
	p->zcheck_sel_pol = polarity == ZcheckNegativeInput; // Negative: 1, Positive: 0
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	bf0c      	ite	eq
 8001d4a:	2301      	moveq	r3, #1
 8001d4c:	2300      	movne	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <set_zcheck_channel>:

// Select the amplifier channel for impedance testing.
int set_zcheck_channel(RHDConfigParameters *p, int channel)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
	if (channel < 0 || channel > max_num_channels_per_chip() - 1) {
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db05      	blt.n	8001d7e <set_zcheck_channel+0x1c>
 8001d72:	f000 fe77 	bl	8002a64 <max_num_channels_per_chip>
 8001d76:	4602      	mov	r2, r0
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	db02      	blt.n	8001d84 <set_zcheck_channel+0x22>
		return -1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	e004      	b.n	8001d8e <set_zcheck_channel+0x2c>
	} else {
		p->zcheck_select = channel;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	669a      	str	r2, [r3, #104]	@ 0x68
		return p->zcheck_select;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
	}
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <power_up_all_amps>:
	}
}

// Power up all amplifiers on chip.
void power_up_all_amps(RHDConfigParameters *p)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	e008      	b.n	8001db6 <power_up_all_amps+0x20>
		p->amp_pwr[channel] = 1;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	3228      	adds	r2, #40	@ 0x28
 8001daa:	2101      	movs	r1, #1
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3301      	adds	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	f000 fe55 	bl	8002a64 <max_num_channels_per_chip>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	dbf0      	blt.n	8001da4 <power_up_all_amps+0xe>
	}
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	0000      	movs	r0, r0
	...

08001dd0 <set_upper_bandwidth>:
}

// Set the on-chip RH1 and RH2 DAC values appropriately to set a particular amplifier
// upper bandwidth (in Hz).  Return an estimate of the actual upper bandwidth achieved.
double set_upper_bandwidth(RHDConfigParameters *p, double upper_bandwidth)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0a6      	sub	sp, #152	@ 0x98
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	ed87 0b00 	vstr	d0, [r7]
	const double RH1Base = 2200.0;
 8001ddc:	a3b7      	add	r3, pc, #732	@ (adr r3, 80020bc <set_upper_bandwidth+0x2ec>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	const double RH1Dac1Unit = 600.0;
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	4bb1      	ldr	r3, [pc, #708]	@ (80020b0 <set_upper_bandwidth+0x2e0>)
 8001dec:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	const double RH1Dac2Unit = 29400.0;
 8001df0:	a3a9      	add	r3, pc, #676	@ (adr r3, 8002098 <set_upper_bandwidth+0x2c8>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	const int RH1Dac1Steps = 63;
 8001dfa:	233f      	movs	r3, #63	@ 0x3f
 8001dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const int RH1Dac2Steps = 31;
 8001dfe:	231f      	movs	r3, #31
 8001e00:	65bb      	str	r3, [r7, #88]	@ 0x58

	const double RH2Base = 8700.0;
 8001e02:	a3a7      	add	r3, pc, #668	@ (adr r3, 80020a0 <set_upper_bandwidth+0x2d0>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	const double RH2Dac1Unit = 763.0;
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	4ba8      	ldr	r3, [pc, #672]	@ (80020b4 <set_upper_bandwidth+0x2e4>)
 8001e12:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	const double RH2Dac2Unit = 38400.0;
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	4ba7      	ldr	r3, [pc, #668]	@ (80020b8 <set_upper_bandwidth+0x2e8>)
 8001e1c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	const int RH2Dac1Steps = 63;
 8001e20:	233f      	movs	r3, #63	@ 0x3f
 8001e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const int RH2Dac2Steps = 31;
 8001e24:	231f      	movs	r3, #31
 8001e26:	63bb      	str	r3, [r7, #56]	@ 0x38

	// No upper bandwidths higher than 30 kHz.
	if (upper_bandwidth > 30000.0) {
 8001e28:	a39f      	add	r3, pc, #636	@ (adr r3, 80020a8 <set_upper_bandwidth+0x2d8>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e32:	f7fe fe79 	bl	8000b28 <__aeabi_dcmpgt>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <set_upper_bandwidth+0x76>
		upper_bandwidth = 30000.0;
 8001e3c:	a39a      	add	r3, pc, #616	@ (adr r3, 80020a8 <set_upper_bandwidth+0x2d8>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	e9c7 2300 	strd	r2, r3, [r7]
	}

	double rH1_target = rH1_from_upper_bandwidth(upper_bandwidth);
 8001e46:	ed97 0b00 	vldr	d0, [r7]
 8001e4a:	f000 fa31 	bl	80022b0 <rH1_from_upper_bandwidth>
 8001e4e:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

	p->rH1_DAC1 = 0;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	p->rH1_DAC2 = 0;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	double rH1_actual = RH1Base;
 8001e62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e66:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

	for (int i = 0; i < RH1Dac2Steps; ++i) {
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001e70:	e032      	b.n	8001ed8 <set_upper_bandwidth+0x108>
		if (rH1_actual < rH1_target - (RH1Dac2Unit - RH1Dac1Unit / 2)) {
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001e7e:	f7fe fced 	bl	800085c <__aeabi_ddiv>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001e8a:	f7fe fa05 	bl	8000298 <__aeabi_dsub>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001e96:	f7fe f9ff 	bl	8000298 <__aeabi_dsub>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001ea2:	f7fe fe23 	bl	8000aec <__aeabi_dcmplt>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d010      	beq.n	8001ece <set_upper_bandwidth+0xfe>
			rH1_actual += RH1Dac2Unit;
 8001eac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001eb0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001eb4:	f7fe f9f2 	bl	800029c <__adddf3>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			++p->rH1_DAC2;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < RH1Dac2Steps; ++i) {
 8001ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001ed8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001edc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	dbc7      	blt.n	8001e72 <set_upper_bandwidth+0xa2>
		}
	}

	for (int i = 0; i < RH1Dac1Steps; ++i) {
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ee8:	e02c      	b.n	8001f44 <set_upper_bandwidth+0x174>
		if (rH1_actual < rH1_target - (RH1Dac1Unit / 2)) {
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ef2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001ef6:	f7fe fcb1 	bl	800085c <__aeabi_ddiv>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f02:	f7fe f9c9 	bl	8000298 <__aeabi_dsub>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001f0e:	f7fe fded 	bl	8000aec <__aeabi_dcmplt>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d010      	beq.n	8001f3a <set_upper_bandwidth+0x16a>
			rH1_actual += RH1Dac1Unit;
 8001f18:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001f1c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001f20:	f7fe f9bc 	bl	800029c <__adddf3>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			++p->rH1_DAC1;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	for (int i = 0; i < RH1Dac1Steps; ++i) {
 8001f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f44:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001f48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	dbcd      	blt.n	8001eea <set_upper_bandwidth+0x11a>
		}
	}

	double rH2_target = rH2_from_upper_bandwidth(upper_bandwidth);
 8001f4e:	ed97 0b00 	vldr	d0, [r7]
 8001f52:	f000 fa11 	bl	8002378 <rH2_from_upper_bandwidth>
 8001f56:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	p->rH2_DAC1 = 0;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	p->rH2_DAC2 = 0;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	double rH2_actual = RH2Base;
 8001f6a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f6e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	for (int i = 0; i < RH2Dac2Steps; ++i) {
 8001f72:	2300      	movs	r3, #0
 8001f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f76:	e030      	b.n	8001fda <set_upper_bandwidth+0x20a>
		if (rH2_actual < rH2_target - (RH2Dac2Unit - RH2Dac1Unit / 2)) {
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f80:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001f84:	f7fe fc6a 	bl	800085c <__aeabi_ddiv>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001f90:	f7fe f982 	bl	8000298 <__aeabi_dsub>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f9c:	f7fe f97c 	bl	8000298 <__aeabi_dsub>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001fa8:	f7fe fda0 	bl	8000aec <__aeabi_dcmplt>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d010      	beq.n	8001fd4 <set_upper_bandwidth+0x204>
			rH2_actual += RH2Dac2Unit;
 8001fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001fba:	f7fe f96f 	bl	800029c <__adddf3>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			++p->rH2_DAC2;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	for (int i = 0; i < RH2Dac2Steps; ++i) {
 8001fd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	dbca      	blt.n	8001f78 <set_upper_bandwidth+0x1a8>
		}
	}

	for (int i = 0; i < RH2Dac1Steps; ++i) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fe6:	e02a      	b.n	800203e <set_upper_bandwidth+0x26e>
		if (rH2_actual < rH2_target - (RH2Dac1Unit / 2)) {
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ff0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001ff4:	f7fe fc32 	bl	800085c <__aeabi_ddiv>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002000:	f7fe f94a 	bl	8000298 <__aeabi_dsub>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800200c:	f7fe fd6e 	bl	8000aec <__aeabi_dcmplt>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d010      	beq.n	8002038 <set_upper_bandwidth+0x268>
			rH2_actual += RH2Dac1Unit;
 8002016:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800201a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800201e:	f7fe f93d 	bl	800029c <__adddf3>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			++p->rH2_DAC1;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < RH2Dac1Steps; ++i) {
 8002038:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800203a:	3301      	adds	r3, #1
 800203c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800203e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002042:	429a      	cmp	r2, r3
 8002044:	dbd0      	blt.n	8001fe8 <set_upper_bandwidth+0x218>
		}
	}

	double actual_upper_bandwidth1 = upper_bandwidth_from_rH1(rH1_actual);
 8002046:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800204a:	f000 fad9 	bl	8002600 <upper_bandwidth_from_rH1>
 800204e:	ed87 0b08 	vstr	d0, [r7, #32]
	double actual_upper_bandwidth2 = upper_bandwidth_from_rH2(rH2_actual);
 8002052:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8002056:	f000 fb73 	bl	8002740 <upper_bandwidth_from_rH2>
 800205a:	ed87 0b06 	vstr	d0, [r7, #24]

	// Upper bandwidth estimates calculated from actual RH1 value and actual RH2 value
	// should be very close; we will take their geometric means to get a single number.
	double actual_upper_bandwidth = sqrt(actual_upper_bandwidth1 * actual_upper_bandwidth2);
 800205e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002062:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002066:	f7fe facf 	bl	8000608 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	ec43 2b17 	vmov	d7, r2, r3
 8002072:	eeb0 0a47 	vmov.f32	s0, s14
 8002076:	eef0 0a67 	vmov.f32	s1, s15
 800207a:	f00b fa53 	bl	800d524 <sqrt>
 800207e:	ed87 0b04 	vstr	d0, [r7, #16]

	return actual_upper_bandwidth;
 8002082:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002086:	ec43 2b17 	vmov	d7, r2, r3
}
 800208a:	eeb0 0a47 	vmov.f32	s0, s14
 800208e:	eef0 0a67 	vmov.f32	s1, s15
 8002092:	3798      	adds	r7, #152	@ 0x98
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	00000000 	.word	0x00000000
 800209c:	40dcb600 	.word	0x40dcb600
 80020a0:	00000000 	.word	0x00000000
 80020a4:	40c0fe00 	.word	0x40c0fe00
 80020a8:	00000000 	.word	0x00000000
 80020ac:	40dd4c00 	.word	0x40dd4c00
 80020b0:	4082c000 	.word	0x4082c000
 80020b4:	4087d800 	.word	0x4087d800
 80020b8:	40e2c000 	.word	0x40e2c000
 80020bc:	00000000 	.word	0x00000000
 80020c0:	40a13000 	.word	0x40a13000
 80020c4:	00000000 	.word	0x00000000

080020c8 <set_lower_bandwidth>:

// Set the on-chip RL DAC values appropriately to set a particular amplifier lower bandwidth (in Hz).
// Return an estimate of the actual lower bandwidth achieved.
double set_lower_bandwidth(RHDConfigParameters *p, double lower_bandwidth)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b096      	sub	sp, #88	@ 0x58
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	ed87 0b00 	vstr	d0, [r7]
    const double RLBase = 3500.0;
 80020d4:	a36a      	add	r3, pc, #424	@ (adr r3, 8002280 <set_lower_bandwidth+0x1b8>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    const double RLDac1Unit = 175.0;
 80020de:	a36a      	add	r3, pc, #424	@ (adr r3, 8002288 <set_lower_bandwidth+0x1c0>)
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    const double RLDac2Unit = 12700.0;
 80020e8:	a369      	add	r3, pc, #420	@ (adr r3, 8002290 <set_lower_bandwidth+0x1c8>)
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    const double RLDac3Unit = 3000000.0;
 80020f2:	a369      	add	r3, pc, #420	@ (adr r3, 8002298 <set_lower_bandwidth+0x1d0>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    const int RLDac1Steps = 127;
 80020fc:	237f      	movs	r3, #127	@ 0x7f
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
    const int RLDac2Steps = 63;
 8002100:	233f      	movs	r3, #63	@ 0x3f
 8002102:	623b      	str	r3, [r7, #32]

    // No lower bandwidths higher than 1.5 kHz.
    if (lower_bandwidth > 1500.0) {
 8002104:	a366      	add	r3, pc, #408	@ (adr r3, 80022a0 <set_lower_bandwidth+0x1d8>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800210e:	f7fe fd0b 	bl	8000b28 <__aeabi_dcmpgt>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <set_lower_bandwidth+0x5a>
    	lower_bandwidth = 1500.0;
 8002118:	a361      	add	r3, pc, #388	@ (adr r3, 80022a0 <set_lower_bandwidth+0x1d8>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	e9c7 2300 	strd	r2, r3, [r7]
    }

    double rL_target = rL_from_lower_bandwidth(lower_bandwidth);
 8002122:	ed97 0b00 	vldr	d0, [r7]
 8002126:	f000 f98b 	bl	8002440 <rL_from_lower_bandwidth>
 800212a:	ed87 0b06 	vstr	d0, [r7, #24]

    p->rL_DAC1 = 0;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    p->rL_DAC2 = 0;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    p->rL_DAC3 = 0;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    double rL_actual = RLBase;
 8002146:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800214a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    if (lower_bandwidth < 0.15) {
 800214e:	a356      	add	r3, pc, #344	@ (adr r3, 80022a8 <set_lower_bandwidth+0x1e0>)
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002158:	f7fe fcc8 	bl	8000aec <__aeabi_dcmplt>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d010      	beq.n	8002184 <set_lower_bandwidth+0xbc>
    	rL_actual += RLDac3Unit;
 8002162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002166:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800216a:	f7fe f897 	bl	800029c <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    	++p->rL_DAC3;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    for (int i = 0; i < RLDac2Steps; ++i) {
 8002184:	2300      	movs	r3, #0
 8002186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002188:	e030      	b.n	80021ec <set_lower_bandwidth+0x124>
    	if (rL_actual < rL_target - (RLDac2Unit - RLDac1Unit / 2)) {
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002192:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002196:	f7fe fb61 	bl	800085c <__aeabi_ddiv>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80021a2:	f7fe f879 	bl	8000298 <__aeabi_dsub>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021ae:	f7fe f873 	bl	8000298 <__aeabi_dsub>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80021ba:	f7fe fc97 	bl	8000aec <__aeabi_dcmplt>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d010      	beq.n	80021e6 <set_lower_bandwidth+0x11e>
    		rL_actual += RLDac2Unit;
 80021c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80021cc:	f7fe f866 	bl	800029c <__adddf3>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    		++p->rL_DAC2;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    for (int i = 0; i < RLDac2Steps; ++i) {
 80021e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021e8:	3301      	adds	r3, #1
 80021ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	dbca      	blt.n	800218a <set_lower_bandwidth+0xc2>
    	}
    }

    for (int i = 0; i < RLDac1Steps; ++i) {
 80021f4:	2300      	movs	r3, #0
 80021f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021f8:	e02a      	b.n	8002250 <set_lower_bandwidth+0x188>
    	if (rL_actual < rL_target - (RLDac1Unit / 2)) {
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002202:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002206:	f7fe fb29 	bl	800085c <__aeabi_ddiv>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002212:	f7fe f841 	bl	8000298 <__aeabi_dsub>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800221e:	f7fe fc65 	bl	8000aec <__aeabi_dcmplt>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d010      	beq.n	800224a <set_lower_bandwidth+0x182>
    		rL_actual += RLDac1Unit;
 8002228:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800222c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002230:	f7fe f834 	bl	800029c <__adddf3>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    		++p->rL_DAC1;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    for (int i = 0; i < RLDac1Steps; ++i) {
 800224a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800224c:	3301      	adds	r3, #1
 800224e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002250:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	429a      	cmp	r2, r3
 8002256:	dbd0      	blt.n	80021fa <set_lower_bandwidth+0x132>
    	}
    }

    double actual_lower_bandwidth = lower_bandwidth_from_rL(rL_actual);
 8002258:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 800225c:	f000 fb10 	bl	8002880 <lower_bandwidth_from_rL>
 8002260:	ed87 0b04 	vstr	d0, [r7, #16]

    return actual_lower_bandwidth;
 8002264:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002268:	ec43 2b17 	vmov	d7, r2, r3
}
 800226c:	eeb0 0a47 	vmov.f32	s0, s14
 8002270:	eef0 0a67 	vmov.f32	s1, s15
 8002274:	3758      	adds	r7, #88	@ 0x58
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	f3af 8000 	nop.w
 8002280:	00000000 	.word	0x00000000
 8002284:	40ab5800 	.word	0x40ab5800
 8002288:	00000000 	.word	0x00000000
 800228c:	4065e000 	.word	0x4065e000
 8002290:	00000000 	.word	0x00000000
 8002294:	40c8ce00 	.word	0x40c8ce00
 8002298:	00000000 	.word	0x00000000
 800229c:	4146e360 	.word	0x4146e360
 80022a0:	00000000 	.word	0x00000000
 80022a4:	40977000 	.word	0x40977000
 80022a8:	33333333 	.word	0x33333333
 80022ac:	3fc33333 	.word	0x3fc33333

080022b0 <rH1_from_upper_bandwidth>:

// Return the value of the RH1 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH1_from_upper_bandwidth(double upper_bandwidth)
{
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	ed87 0b00 	vstr	d0, [r7]
	double log10f = log10(upper_bandwidth);
 80022ba:	ed97 0b00 	vldr	d0, [r7]
 80022be:	f00b f883 	bl	800d3c8 <log10>
 80022c2:	ed87 0b02 	vstr	d0, [r7, #8]

    return 0.9730 * pow(10.0, (8.0968 - 1.1892 * log10f + 0.04767 * log10f * log10f));
 80022c6:	a324      	add	r3, pc, #144	@ (adr r3, 8002358 <rH1_from_upper_bandwidth+0xa8>)
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022d0:	f7fe f99a 	bl	8000608 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	a121      	add	r1, pc, #132	@ (adr r1, 8002360 <rH1_from_upper_bandwidth+0xb0>)
 80022da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022de:	f7fd ffdb 	bl	8000298 <__aeabi_dsub>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4614      	mov	r4, r2
 80022e8:	461d      	mov	r5, r3
 80022ea:	a31f      	add	r3, pc, #124	@ (adr r3, 8002368 <rH1_from_upper_bandwidth+0xb8>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022f4:	f7fe f988 	bl	8000608 <__aeabi_dmul>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002304:	f7fe f980 	bl	8000608 <__aeabi_dmul>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4620      	mov	r0, r4
 800230e:	4629      	mov	r1, r5
 8002310:	f7fd ffc4 	bl	800029c <__adddf3>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	ec43 2b17 	vmov	d7, r2, r3
 800231c:	eeb0 1a47 	vmov.f32	s2, s14
 8002320:	eef0 1a67 	vmov.f32	s3, s15
 8002324:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8002350 <rH1_from_upper_bandwidth+0xa0>
 8002328:	f00b f88c 	bl	800d444 <pow>
 800232c:	ec51 0b10 	vmov	r0, r1, d0
 8002330:	a30f      	add	r3, pc, #60	@ (adr r3, 8002370 <rH1_from_upper_bandwidth+0xc0>)
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002336:	f7fe f967 	bl	8000608 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002342:	eeb0 0a47 	vmov.f32	s0, s14
 8002346:	eef0 0a67 	vmov.f32	s1, s15
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bdb0      	pop	{r4, r5, r7, pc}
 8002350:	00000000 	.word	0x00000000
 8002354:	40240000 	.word	0x40240000
 8002358:	94467382 	.word	0x94467382
 800235c:	3ff306f6 	.word	0x3ff306f6
 8002360:	c504816f 	.word	0xc504816f
 8002364:	4020318f 	.word	0x4020318f
 8002368:	c60029f1 	.word	0xc60029f1
 800236c:	3fa86833 	.word	0x3fa86833
 8002370:	e5604189 	.word	0xe5604189
 8002374:	3fef22d0 	.word	0x3fef22d0

08002378 <rH2_from_upper_bandwidth>:

// Return the value of the RH2 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH2_from_upper_bandwidth(double upper_bandwidth)
{
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(upper_bandwidth);
 8002382:	ed97 0b00 	vldr	d0, [r7]
 8002386:	f00b f81f 	bl	800d3c8 <log10>
 800238a:	ed87 0b02 	vstr	d0, [r7, #8]

    return 1.0191 * pow(10.0, (8.1009 - 1.0821 * log10f + 0.03383 * log10f * log10f));
 800238e:	a324      	add	r3, pc, #144	@ (adr r3, 8002420 <rH2_from_upper_bandwidth+0xa8>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002398:	f7fe f936 	bl	8000608 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	a121      	add	r1, pc, #132	@ (adr r1, 8002428 <rH2_from_upper_bandwidth+0xb0>)
 80023a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023a6:	f7fd ff77 	bl	8000298 <__aeabi_dsub>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4614      	mov	r4, r2
 80023b0:	461d      	mov	r5, r3
 80023b2:	a31f      	add	r3, pc, #124	@ (adr r3, 8002430 <rH2_from_upper_bandwidth+0xb8>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023bc:	f7fe f924 	bl	8000608 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023cc:	f7fe f91c 	bl	8000608 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4620      	mov	r0, r4
 80023d6:	4629      	mov	r1, r5
 80023d8:	f7fd ff60 	bl	800029c <__adddf3>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	ec43 2b17 	vmov	d7, r2, r3
 80023e4:	eeb0 1a47 	vmov.f32	s2, s14
 80023e8:	eef0 1a67 	vmov.f32	s3, s15
 80023ec:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8002418 <rH2_from_upper_bandwidth+0xa0>
 80023f0:	f00b f828 	bl	800d444 <pow>
 80023f4:	ec51 0b10 	vmov	r0, r1, d0
 80023f8:	a30f      	add	r3, pc, #60	@ (adr r3, 8002438 <rH2_from_upper_bandwidth+0xc0>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	f7fe f903 	bl	8000608 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	ec43 2b17 	vmov	d7, r2, r3
}
 800240a:	eeb0 0a47 	vmov.f32	s0, s14
 800240e:	eef0 0a67 	vmov.f32	s1, s15
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bdb0      	pop	{r4, r5, r7, pc}
 8002418:	00000000 	.word	0x00000000
 800241c:	40240000 	.word	0x40240000
 8002420:	16f0068e 	.word	0x16f0068e
 8002424:	3ff15048 	.word	0x3ff15048
 8002428:	2a305532 	.word	0x2a305532
 800242c:	402033a9 	.word	0x402033a9
 8002430:	6f3f52fc 	.word	0x6f3f52fc
 8002434:	3fa1522a 	.word	0x3fa1522a
 8002438:	cd35a858 	.word	0xcd35a858
 800243c:	3ff04e3b 	.word	0x3ff04e3b

08002440 <rL_from_lower_bandwidth>:

// Return the value of the RL resistor (in ohms) corresponding to a particular lower bandwidth value (in Hz).
double rL_from_lower_bandwidth(double lower_bandwidth)
{
 8002440:	b5b0      	push	{r4, r5, r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(lower_bandwidth);
 800244a:	ed97 0b00 	vldr	d0, [r7]
 800244e:	f00a ffbb 	bl	800d3c8 <log10>
 8002452:	ed87 0b02 	vstr	d0, [r7, #8]

    if (lower_bandwidth < 4.0) {
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	4b67      	ldr	r3, [pc, #412]	@ (80025f8 <rL_from_lower_bandwidth+0x1b8>)
 800245c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002460:	f7fe fb44 	bl	8000aec <__aeabi_dcmplt>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d05d      	beq.n	8002526 <rL_from_lower_bandwidth+0xe6>
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 800246a:	a351      	add	r3, pc, #324	@ (adr r3, 80025b0 <rL_from_lower_bandwidth+0x170>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002474:	f7fe f8c8 	bl	8000608 <__aeabi_dmul>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	a14e      	add	r1, pc, #312	@ (adr r1, 80025b8 <rL_from_lower_bandwidth+0x178>)
 800247e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002482:	f7fd ff09 	bl	8000298 <__aeabi_dsub>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4614      	mov	r4, r2
 800248c:	461d      	mov	r5, r3
 800248e:	a34c      	add	r3, pc, #304	@ (adr r3, 80025c0 <rL_from_lower_bandwidth+0x180>)
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002498:	f7fe f8b6 	bl	8000608 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024a8:	f7fe f8ae 	bl	8000608 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4620      	mov	r0, r4
 80024b2:	4629      	mov	r1, r5
 80024b4:	f7fd fef2 	bl	800029c <__adddf3>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4614      	mov	r4, r2
 80024be:	461d      	mov	r5, r3
            0.1442 * log10f * log10f * log10f));
 80024c0:	a341      	add	r3, pc, #260	@ (adr r3, 80025c8 <rL_from_lower_bandwidth+0x188>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024ca:	f7fe f89d 	bl	8000608 <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024da:	f7fe f895 	bl	8000608 <__aeabi_dmul>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ea:	f7fe f88d 	bl	8000608 <__aeabi_dmul>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 80024f2:	4620      	mov	r0, r4
 80024f4:	4629      	mov	r1, r5
 80024f6:	f7fd fed1 	bl	800029c <__adddf3>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	ec43 2b17 	vmov	d7, r2, r3
 8002502:	eeb0 1a47 	vmov.f32	s2, s14
 8002506:	eef0 1a67 	vmov.f32	s3, s15
 800250a:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 80025d0 <rL_from_lower_bandwidth+0x190>
 800250e:	f00a ff99 	bl	800d444 <pow>
 8002512:	ec51 0b10 	vmov	r0, r1, d0
 8002516:	a330      	add	r3, pc, #192	@ (adr r3, 80025d8 <rL_from_lower_bandwidth+0x198>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	f7fe f874 	bl	8000608 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e03b      	b.n	800259e <rL_from_lower_bandwidth+0x15e>
    } else {
        return 1.0061 * pow(10.0, (4.7351 - 0.5916 * log10f + 0.08482 * log10f * log10f));
 8002526:	a32e      	add	r3, pc, #184	@ (adr r3, 80025e0 <rL_from_lower_bandwidth+0x1a0>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002530:	f7fe f86a 	bl	8000608 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	a12b      	add	r1, pc, #172	@ (adr r1, 80025e8 <rL_from_lower_bandwidth+0x1a8>)
 800253a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800253e:	f7fd feab 	bl	8000298 <__aeabi_dsub>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4614      	mov	r4, r2
 8002548:	461d      	mov	r5, r3
 800254a:	a329      	add	r3, pc, #164	@ (adr r3, 80025f0 <rL_from_lower_bandwidth+0x1b0>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002554:	f7fe f858 	bl	8000608 <__aeabi_dmul>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002564:	f7fe f850 	bl	8000608 <__aeabi_dmul>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fd fe94 	bl	800029c <__adddf3>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	ec43 2b17 	vmov	d7, r2, r3
 800257c:	eeb0 1a47 	vmov.f32	s2, s14
 8002580:	eef0 1a67 	vmov.f32	s3, s15
 8002584:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 80025d0 <rL_from_lower_bandwidth+0x190>
 8002588:	f00a ff5c 	bl	800d444 <pow>
 800258c:	ec51 0b10 	vmov	r0, r1, d0
 8002590:	a311      	add	r3, pc, #68	@ (adr r3, 80025d8 <rL_from_lower_bandwidth+0x198>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f7fe f837 	bl	8000608 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
    }
}
 800259e:	ec43 2b17 	vmov	d7, r2, r3
 80025a2:	eeb0 0a47 	vmov.f32	s0, s14
 80025a6:	eef0 0a67 	vmov.f32	s1, s15
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bdb0      	pop	{r4, r5, r7, pc}
 80025b0:	ab367a10 	.word	0xab367a10
 80025b4:	3ff3573e 	.word	0x3ff3573e
 80025b8:	6e2eb1c4 	.word	0x6e2eb1c4
 80025bc:	4013c1a3 	.word	0x4013c1a3
 80025c0:	35a85879 	.word	0x35a85879
 80025c4:	3fe23bcd 	.word	0x3fe23bcd
 80025c8:	460aa64c 	.word	0x460aa64c
 80025cc:	3fc27525 	.word	0x3fc27525
 80025d0:	00000000 	.word	0x00000000
 80025d4:	40240000 	.word	0x40240000
 80025d8:	504816f0 	.word	0x504816f0
 80025dc:	3ff018fc 	.word	0x3ff018fc
 80025e0:	1f8a0903 	.word	0x1f8a0903
 80025e4:	3fe2ee63 	.word	0x3fe2ee63
 80025e8:	0ded288d 	.word	0x0ded288d
 80025ec:	4012f0be 	.word	0x4012f0be
 80025f0:	760bf5d8 	.word	0x760bf5d8
 80025f4:	3fb5b6c3 	.word	0x3fb5b6c3
 80025f8:	40100000 	.word	0x40100000
 80025fc:	00000000 	.word	0x00000000

08002600 <upper_bandwidth_from_rH1>:

// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH1 (in Ohms).
double upper_bandwidth_from_rH1(double rH1)
{
 8002600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002604:	b088      	sub	sp, #32
 8002606:	af00      	add	r7, sp, #0
 8002608:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.04767;
 800260c:	a343      	add	r3, pc, #268	@ (adr r3, 800271c <upper_bandwidth_from_rH1+0x11c>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.1892;
 8002616:	a343      	add	r3, pc, #268	@ (adr r3, 8002724 <upper_bandwidth_from_rH1+0x124>)
 8002618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.0968 - log10(rH1 / 0.9730);
 8002620:	a342      	add	r3, pc, #264	@ (adr r3, 800272c <upper_bandwidth_from_rH1+0x12c>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	e9d7 0100 	ldrd	r0, r1, [r7]
 800262a:	f7fe f917 	bl	800085c <__aeabi_ddiv>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	ec43 2b17 	vmov	d7, r2, r3
 8002636:	eeb0 0a47 	vmov.f32	s0, s14
 800263a:	eef0 0a67 	vmov.f32	s1, s15
 800263e:	f00a fec3 	bl	800d3c8 <log10>
 8002642:	ec53 2b10 	vmov	r2, r3, d0
 8002646:	a13b      	add	r1, pc, #236	@ (adr r1, 8002734 <upper_bandwidth_from_rH1+0x134>)
 8002648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800264c:	f7fd fe24 	bl	8000298 <__aeabi_dsub>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002658:	693c      	ldr	r4, [r7, #16]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002660:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002664:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002668:	f7fd ffce 	bl	8000608 <__aeabi_dmul>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4690      	mov	r8, r2
 8002672:	4699      	mov	r9, r3
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	4b27      	ldr	r3, [pc, #156]	@ (8002718 <upper_bandwidth_from_rH1+0x118>)
 800267a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800267e:	f7fd ffc3 	bl	8000608 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800268e:	f7fd ffbb 	bl	8000608 <__aeabi_dmul>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4640      	mov	r0, r8
 8002698:	4649      	mov	r1, r9
 800269a:	f7fd fdfd 	bl	8000298 <__aeabi_dsub>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	ec43 2b17 	vmov	d7, r2, r3
 80026a6:	eeb0 0a47 	vmov.f32	s0, s14
 80026aa:	eef0 0a67 	vmov.f32	s1, s15
 80026ae:	f00a ff39 	bl	800d524 <sqrt>
 80026b2:	ec53 2b10 	vmov	r2, r3, d0
 80026b6:	4620      	mov	r0, r4
 80026b8:	4629      	mov	r1, r5
 80026ba:	f7fd fded 	bl	8000298 <__aeabi_dsub>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4614      	mov	r4, r2
 80026c4:	461d      	mov	r5, r3
 80026c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	f7fd fde5 	bl	800029c <__adddf3>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4620      	mov	r0, r4
 80026d8:	4629      	mov	r1, r5
 80026da:	f7fe f8bf 	bl	800085c <__aeabi_ddiv>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	ec43 2b17 	vmov	d7, r2, r3
 80026e6:	eeb0 1a47 	vmov.f32	s2, s14
 80026ea:	eef0 1a67 	vmov.f32	s3, s15
 80026ee:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8002710 <upper_bandwidth_from_rH1+0x110>
 80026f2:	f00a fea7 	bl	800d444 <pow>
 80026f6:	eeb0 7a40 	vmov.f32	s14, s0
 80026fa:	eef0 7a60 	vmov.f32	s15, s1
}
 80026fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002702:	eef0 0a67 	vmov.f32	s1, s15
 8002706:	3720      	adds	r7, #32
 8002708:	46bd      	mov	sp, r7
 800270a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800270e:	bf00      	nop
 8002710:	00000000 	.word	0x00000000
 8002714:	40240000 	.word	0x40240000
 8002718:	40100000 	.word	0x40100000
 800271c:	c60029f1 	.word	0xc60029f1
 8002720:	3fa86833 	.word	0x3fa86833
 8002724:	94467382 	.word	0x94467382
 8002728:	bff306f6 	.word	0xbff306f6
 800272c:	e5604189 	.word	0xe5604189
 8002730:	3fef22d0 	.word	0x3fef22d0
 8002734:	c504816f 	.word	0xc504816f
 8002738:	4020318f 	.word	0x4020318f
 800273c:	00000000 	.word	0x00000000

08002740 <upper_bandwidth_from_rH2>:

// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH2 (in Ohms).
double upper_bandwidth_from_rH2(double rH2)
{
 8002740:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002744:	b088      	sub	sp, #32
 8002746:	af00      	add	r7, sp, #0
 8002748:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.03383;
 800274c:	a343      	add	r3, pc, #268	@ (adr r3, 800285c <upper_bandwidth_from_rH2+0x11c>)
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.0821;
 8002756:	a343      	add	r3, pc, #268	@ (adr r3, 8002864 <upper_bandwidth_from_rH2+0x124>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.1009 - log10(rH2 / 1.0191);
 8002760:	a342      	add	r3, pc, #264	@ (adr r3, 800286c <upper_bandwidth_from_rH2+0x12c>)
 8002762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002766:	e9d7 0100 	ldrd	r0, r1, [r7]
 800276a:	f7fe f877 	bl	800085c <__aeabi_ddiv>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	ec43 2b17 	vmov	d7, r2, r3
 8002776:	eeb0 0a47 	vmov.f32	s0, s14
 800277a:	eef0 0a67 	vmov.f32	s1, s15
 800277e:	f00a fe23 	bl	800d3c8 <log10>
 8002782:	ec53 2b10 	vmov	r2, r3, d0
 8002786:	a13b      	add	r1, pc, #236	@ (adr r1, 8002874 <upper_bandwidth_from_rH2+0x134>)
 8002788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800278c:	f7fd fd84 	bl	8000298 <__aeabi_dsub>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002798:	693c      	ldr	r4, [r7, #16]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80027a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027a8:	f7fd ff2e 	bl	8000608 <__aeabi_dmul>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4690      	mov	r8, r2
 80027b2:	4699      	mov	r9, r3
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	4b27      	ldr	r3, [pc, #156]	@ (8002858 <upper_bandwidth_from_rH2+0x118>)
 80027ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027be:	f7fd ff23 	bl	8000608 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ce:	f7fd ff1b 	bl	8000608 <__aeabi_dmul>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4640      	mov	r0, r8
 80027d8:	4649      	mov	r1, r9
 80027da:	f7fd fd5d 	bl	8000298 <__aeabi_dsub>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	ec43 2b17 	vmov	d7, r2, r3
 80027e6:	eeb0 0a47 	vmov.f32	s0, s14
 80027ea:	eef0 0a67 	vmov.f32	s1, s15
 80027ee:	f00a fe99 	bl	800d524 <sqrt>
 80027f2:	ec53 2b10 	vmov	r2, r3, d0
 80027f6:	4620      	mov	r0, r4
 80027f8:	4629      	mov	r1, r5
 80027fa:	f7fd fd4d 	bl	8000298 <__aeabi_dsub>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4614      	mov	r4, r2
 8002804:	461d      	mov	r5, r3
 8002806:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	f7fd fd45 	bl	800029c <__adddf3>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4620      	mov	r0, r4
 8002818:	4629      	mov	r1, r5
 800281a:	f7fe f81f 	bl	800085c <__aeabi_ddiv>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	ec43 2b17 	vmov	d7, r2, r3
 8002826:	eeb0 1a47 	vmov.f32	s2, s14
 800282a:	eef0 1a67 	vmov.f32	s3, s15
 800282e:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8002850 <upper_bandwidth_from_rH2+0x110>
 8002832:	f00a fe07 	bl	800d444 <pow>
 8002836:	eeb0 7a40 	vmov.f32	s14, s0
 800283a:	eef0 7a60 	vmov.f32	s15, s1
}
 800283e:	eeb0 0a47 	vmov.f32	s0, s14
 8002842:	eef0 0a67 	vmov.f32	s1, s15
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800284e:	bf00      	nop
 8002850:	00000000 	.word	0x00000000
 8002854:	40240000 	.word	0x40240000
 8002858:	40100000 	.word	0x40100000
 800285c:	6f3f52fc 	.word	0x6f3f52fc
 8002860:	3fa1522a 	.word	0x3fa1522a
 8002864:	16f0068e 	.word	0x16f0068e
 8002868:	bff15048 	.word	0xbff15048
 800286c:	cd35a858 	.word	0xcd35a858
 8002870:	3ff04e3b 	.word	0x3ff04e3b
 8002874:	2a305532 	.word	0x2a305532
 8002878:	402033a9 	.word	0x402033a9
 800287c:	00000000 	.word	0x00000000

08002880 <lower_bandwidth_from_rL>:

// Return the amplifier lower bandwidth (in Hz) corresponding to a particular value of the resistor RL (in Ohms).
double lower_bandwidth_from_rL(double rL)
{
 8002880:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002884:	b088      	sub	sp, #32
 8002886:	af00      	add	r7, sp, #0
 8002888:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    // Quadratic fit below is invalid for values of RL less than 5.1 kOhm.
    if (rL < 5100.0) {
 800288c:	a363      	add	r3, pc, #396	@ (adr r3, 8002a1c <lower_bandwidth_from_rL+0x19c>)
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002896:	f7fe f929 	bl	8000aec <__aeabi_dcmplt>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d004      	beq.n	80028aa <lower_bandwidth_from_rL+0x2a>
        rL = 5100.0;
 80028a0:	a35e      	add	r3, pc, #376	@ (adr r3, 8002a1c <lower_bandwidth_from_rL+0x19c>)
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	e9c7 2300 	strd	r2, r3, [r7]
    }

    if (rL < 30000.0) {
 80028aa:	a35e      	add	r3, pc, #376	@ (adr r3, 8002a24 <lower_bandwidth_from_rL+0x1a4>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028b4:	f7fe f91a 	bl	8000aec <__aeabi_dcmplt>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d026      	beq.n	800290c <lower_bandwidth_from_rL+0x8c>
        a = 0.08482;
 80028be:	a35b      	add	r3, pc, #364	@ (adr r3, 8002a2c <lower_bandwidth_from_rL+0x1ac>)
 80028c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -0.5916;
 80028c8:	a35a      	add	r3, pc, #360	@ (adr r3, 8002a34 <lower_bandwidth_from_rL+0x1b4>)
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.7351 - log10(rL / 1.0061);
 80028d2:	a35a      	add	r3, pc, #360	@ (adr r3, 8002a3c <lower_bandwidth_from_rL+0x1bc>)
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028dc:	f7fd ffbe 	bl	800085c <__aeabi_ddiv>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	ec43 2b17 	vmov	d7, r2, r3
 80028e8:	eeb0 0a47 	vmov.f32	s0, s14
 80028ec:	eef0 0a67 	vmov.f32	s1, s15
 80028f0:	f00a fd6a 	bl	800d3c8 <log10>
 80028f4:	ec53 2b10 	vmov	r2, r3, d0
 80028f8:	a152      	add	r1, pc, #328	@ (adr r1, 8002a44 <lower_bandwidth_from_rL+0x1c4>)
 80028fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028fe:	f7fd fccb 	bl	8000298 <__aeabi_dsub>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800290a:	e025      	b.n	8002958 <lower_bandwidth_from_rL+0xd8>
    } else {
        a = 0.3303;
 800290c:	a34f      	add	r3, pc, #316	@ (adr r3, 8002a4c <lower_bandwidth_from_rL+0x1cc>)
 800290e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002912:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -1.2100;
 8002916:	a34f      	add	r3, pc, #316	@ (adr r3, 8002a54 <lower_bandwidth_from_rL+0x1d4>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.9873 - log10(rL / 1.0061);
 8002920:	a346      	add	r3, pc, #280	@ (adr r3, 8002a3c <lower_bandwidth_from_rL+0x1bc>)
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	e9d7 0100 	ldrd	r0, r1, [r7]
 800292a:	f7fd ff97 	bl	800085c <__aeabi_ddiv>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	ec43 2b17 	vmov	d7, r2, r3
 8002936:	eeb0 0a47 	vmov.f32	s0, s14
 800293a:	eef0 0a67 	vmov.f32	s1, s15
 800293e:	f00a fd43 	bl	800d3c8 <log10>
 8002942:	ec53 2b10 	vmov	r2, r3, d0
 8002946:	a145      	add	r1, pc, #276	@ (adr r1, 8002a5c <lower_bandwidth_from_rL+0x1dc>)
 8002948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800294c:	f7fd fca4 	bl	8000298 <__aeabi_dsub>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002958:	693c      	ldr	r4, [r7, #16]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002960:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002964:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002968:	f7fd fe4e 	bl	8000608 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4690      	mov	r8, r2
 8002972:	4699      	mov	r9, r3
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	4b27      	ldr	r3, [pc, #156]	@ (8002a18 <lower_bandwidth_from_rL+0x198>)
 800297a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800297e:	f7fd fe43 	bl	8000608 <__aeabi_dmul>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800298e:	f7fd fe3b 	bl	8000608 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4640      	mov	r0, r8
 8002998:	4649      	mov	r1, r9
 800299a:	f7fd fc7d 	bl	8000298 <__aeabi_dsub>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	ec43 2b17 	vmov	d7, r2, r3
 80029a6:	eeb0 0a47 	vmov.f32	s0, s14
 80029aa:	eef0 0a67 	vmov.f32	s1, s15
 80029ae:	f00a fdb9 	bl	800d524 <sqrt>
 80029b2:	ec53 2b10 	vmov	r2, r3, d0
 80029b6:	4620      	mov	r0, r4
 80029b8:	4629      	mov	r1, r5
 80029ba:	f7fd fc6d 	bl	8000298 <__aeabi_dsub>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4614      	mov	r4, r2
 80029c4:	461d      	mov	r5, r3
 80029c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	f7fd fc65 	bl	800029c <__adddf3>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4620      	mov	r0, r4
 80029d8:	4629      	mov	r1, r5
 80029da:	f7fd ff3f 	bl	800085c <__aeabi_ddiv>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	ec43 2b17 	vmov	d7, r2, r3
 80029e6:	eeb0 1a47 	vmov.f32	s2, s14
 80029ea:	eef0 1a67 	vmov.f32	s3, s15
 80029ee:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8002a10 <lower_bandwidth_from_rL+0x190>
 80029f2:	f00a fd27 	bl	800d444 <pow>
 80029f6:	eeb0 7a40 	vmov.f32	s14, s0
 80029fa:	eef0 7a60 	vmov.f32	s15, s1
}
 80029fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002a02:	eef0 0a67 	vmov.f32	s1, s15
 8002a06:	3720      	adds	r7, #32
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a0e:	bf00      	nop
 8002a10:	00000000 	.word	0x00000000
 8002a14:	40240000 	.word	0x40240000
 8002a18:	40100000 	.word	0x40100000
 8002a1c:	00000000 	.word	0x00000000
 8002a20:	40b3ec00 	.word	0x40b3ec00
 8002a24:	00000000 	.word	0x00000000
 8002a28:	40dd4c00 	.word	0x40dd4c00
 8002a2c:	760bf5d8 	.word	0x760bf5d8
 8002a30:	3fb5b6c3 	.word	0x3fb5b6c3
 8002a34:	1f8a0903 	.word	0x1f8a0903
 8002a38:	bfe2ee63 	.word	0xbfe2ee63
 8002a3c:	504816f0 	.word	0x504816f0
 8002a40:	3ff018fc 	.word	0x3ff018fc
 8002a44:	0ded288d 	.word	0x0ded288d
 8002a48:	4012f0be 	.word	0x4012f0be
 8002a4c:	9c779a6b 	.word	0x9c779a6b
 8002a50:	3fd523a2 	.word	0x3fd523a2
 8002a54:	f5c28f5c 	.word	0xf5c28f5c
 8002a58:	bff35c28 	.word	0xbff35c28
 8002a5c:	c56d5cfb 	.word	0xc56d5cfb
 8002a60:	4013f2fe 	.word	0x4013f2fe

08002a64 <max_num_channels_per_chip>:

// Maximum number of amplifier channels per chip.
int max_num_channels_per_chip()
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
	return 32;
 8002a68:	2320      	movs	r3, #32
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	0000      	movs	r0, r0
	...

08002a78 <set_default_rhd_settings>:

// Set default values for parameters used to configure RAM registers on RHD2000 chip.
void set_default_rhd_settings(RHDConfigParameters *p)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	// D[7:6]: ADC reference BW
	// D[5]: amp fast settle
	// D[4]: amp Vref enable
	// D[3:2]: ADC comparator bias
	// D[1:0]: ADC comparator select
	p->adc_reference_bw = 3;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2203      	movs	r2, #3
 8002a84:	609a      	str	r2, [r3, #8]
	p->amp_fast_settle = 0;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
	p->amp_vref_enable = 1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	60da      	str	r2, [r3, #12]
	p->adc_comparator_bias = 3;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2203      	movs	r2, #3
 8002a98:	611a      	str	r2, [r3, #16]
	p->adc_comparator_select = 2;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	615a      	str	r2, [r3, #20]

	// Register 1: Supply Sensor and ADC Buffer Bias Current
	// D[7]: X (No Function)
	// D[6]: VDD sense enable
	// D[5:0]: ADC buffer bias
	p->vdd_sense_enable = 1;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	619a      	str	r2, [r3, #24]

	// Register 2: MUX Bias Current
	// D[7:6]: X (No Function)
	// D[5:0]: MUX bias
	set_biases_based_on_sample_rate(&p->adc_buffer_bias, &p->mux_bias, p->sample_rate);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f103 021c 	add.w	r2, r3, #28
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f103 0120 	add.w	r1, r3, #32
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	ed93 7b00 	vldr	d7, [r3]
 8002ab8:	eeb0 0a47 	vmov.f32	s0, s14
 8002abc:	eef0 0a67 	vmov.f32	s1, s15
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f000 f865 	bl	8002b90 <set_biases_based_on_sample_rate>
	// D[4]: tempS2
	// D[3]: tempS1
	// D[2]: tempen
	// D[1]: digout HiZ
	// D[0]: digout
	p->mux_load = 0;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	625a      	str	r2, [r3, #36]	@ 0x24
	p->temp_S1 = 0;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	629a      	str	r2, [r3, #40]	@ 0x28
	p->temp_S2 = 0;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
	p->temp_en = 0;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	631a      	str	r2, [r3, #48]	@ 0x30
	set_DigOut_hiZ(p);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff f810 	bl	8001b04 <set_DigOut_hiZ>
	// D[7]: weak MISO
	// D[6]: twoscomp
	// D[5]: absmode
	// D[4]: DSPen
	// D[3:0]: DSP cutoff freq
	p->weak_miso = 1;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	63da      	str	r2, [r3, #60]	@ 0x3c
	p->twos_comp = 0;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40
	p->abs_mode = 0;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	645a      	str	r2, [r3, #68]	@ 0x44
	p->DSP_en = 1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	649a      	str	r2, [r3, #72]	@ 0x48
	set_DSP_cutoff_freq(p, 1.0);
 8002afc:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8002b80 <set_default_rhd_settings+0x108>
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff f811 	bl	8001b28 <set_DSP_cutoff_freq>
	// D[5]: Zcheck load
	// D[4:3]: Zcheck scale
	// D[2]: Zcheck conn all
	// D[1]: Zcheck sel pol
	// D[0]: Zcheck en
	p->zcheck_DAC_power = 1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	651a      	str	r2, [r3, #80]	@ 0x50
	p->zcheck_load = 0;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	655a      	str	r2, [r3, #84]	@ 0x54
	set_zcheck_scale(p, ZcheckCs100fF);
 8002b12:	2100      	movs	r1, #0
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff f8ed 	bl	8001cf4 <set_zcheck_scale>
	p->zcheck_conn_all = 0;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	65da      	str	r2, [r3, #92]	@ 0x5c
	set_zcheck_polarity(p, ZcheckPositiveInput);
 8002b20:	2100      	movs	r1, #0
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff f908 	bl	8001d38 <set_zcheck_polarity>
	p->zcheck_en = 0;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	665a      	str	r2, [r3, #100]	@ 0x64
	// D[7:0]: Zcheck DAC

	// Register 7: Impedance Check Amplifier Select
	// D[7:6]: X (No Function)
	// D[5:0]: Zcheck select
	set_zcheck_channel(p, 0);
 8002b2e:	2100      	movs	r1, #0
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff f916 	bl	8001d62 <set_zcheck_channel>

	// Registers 8-13: On-Chip Amplifier Bandwidth Select
	// R[8]D[7]: offchip RH1
	// R[8]D[6]: X (No Function)
	// R[8]D[5:0]: RH1 DAC1
	p->off_chip_RH1 = 0;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	66da      	str	r2, [r3, #108]	@ 0x6c

	// R[9]D[7]: ADC aux1 en
	// R[9]D[6:5]: X (No Function)
	// R[9]D[4:0] RH1 DAC2
	p->adc_Aux1_en = 1;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	679a      	str	r2, [r3, #120]	@ 0x78

	// R[10]D[7]: offchip RH2
	// R[10]D[6]: X (No Function)
	// R[10]D[5:0]: RH2 DAC1
	p->off_chip_RH2 = 0;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	671a      	str	r2, [r3, #112]	@ 0x70

	// R[11]D[7]: ADC2 aux2 en
	// R[11]D[6:5]: X (No Function)
	// R[11]D[4:0]: RH2 DAC2
	p->adc_Aux2_en = 1;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

	// R[12]D[7]: offchip RL
	// R[12]D[6:0]: RL DAC1
	p->off_chip_RL = 0;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	675a      	str	r2, [r3, #116]	@ 0x74

	// R[13]D[7]: ADC3 aux3 en
	// R[13]D[6]: RL DAC3
	// R[13]D[5:0]: RL DAC2
	p->adc_Aux3_en = 1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	set_upper_bandwidth(p, 7500.0);
 8002b5c:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8002b88 <set_default_rhd_settings+0x110>
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff f935 	bl	8001dd0 <set_upper_bandwidth>
	set_lower_bandwidth(p, 1.0);
 8002b66:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 8002b80 <set_default_rhd_settings+0x108>
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff faac 	bl	80020c8 <set_lower_bandwidth>
	// Register 14-17: Individual Amplifier Power
	// R[14]D[7:0]: apwr[7:0]
	// R[15]D[7:0]: apwr[15:8]
	// R[16]D[7:0]: apwr[23:16]
	// R[17]D[7:0]: apwr[31:0]
	power_up_all_amps(p);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff f910 	bl	8001d96 <power_up_all_amps>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	00000000 	.word	0x00000000
 8002b84:	3ff00000 	.word	0x3ff00000
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	40bd4c00 	.word	0x40bd4c00

08002b90 <set_biases_based_on_sample_rate>:


// Determine suitable ADC buffer bias and mux bias values based on provided sample rate.
void set_biases_based_on_sample_rate(int *adc_buffer_bias, int *mux_bias, const double sample_rate)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	ed87 0b00 	vstr	d0, [r7]
	double adc_sampling_rate = (CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) * sample_rate;
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8002d10 <set_biases_based_on_sample_rate+0x180>)
 8002ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ba8:	f7fd fd2e 	bl	8000608 <__aeabi_dmul>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (adc_sampling_rate <= 120000.0) {
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	4b56      	ldr	r3, [pc, #344]	@ (8002d14 <set_biases_based_on_sample_rate+0x184>)
 8002bba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bbe:	f7fd ff9f 	bl	8000b00 <__aeabi_dcmple>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <set_biases_based_on_sample_rate+0x46>
		*adc_buffer_bias = 32;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2228      	movs	r2, #40	@ 0x28
 8002bd2:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
	} else {
		*adc_buffer_bias = 2;
		*mux_bias = 4;
	}
}
 8002bd4:	e07c      	b.n	8002cd0 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 140000.0) {
 8002bd6:	a340      	add	r3, pc, #256	@ (adr r3, 8002cd8 <set_biases_based_on_sample_rate+0x148>)
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002be0:	f7fd ff8e 	bl	8000b00 <__aeabi_dcmple>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <set_biases_based_on_sample_rate+0x68>
		*adc_buffer_bias = 16;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2210      	movs	r2, #16
 8002bee:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2228      	movs	r2, #40	@ 0x28
 8002bf4:	601a      	str	r2, [r3, #0]
}
 8002bf6:	e06b      	b.n	8002cd0 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 175000.0) {
 8002bf8:	a339      	add	r3, pc, #228	@ (adr r3, 8002ce0 <set_biases_based_on_sample_rate+0x150>)
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c02:	f7fd ff7d 	bl	8000b00 <__aeabi_dcmple>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <set_biases_based_on_sample_rate+0x8a>
		*adc_buffer_bias = 8;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2208      	movs	r2, #8
 8002c10:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2228      	movs	r2, #40	@ 0x28
 8002c16:	601a      	str	r2, [r3, #0]
}
 8002c18:	e05a      	b.n	8002cd0 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 220000.0) {
 8002c1a:	a333      	add	r3, pc, #204	@ (adr r3, 8002ce8 <set_biases_based_on_sample_rate+0x158>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c24:	f7fd ff6c 	bl	8000b00 <__aeabi_dcmple>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d006      	beq.n	8002c3c <set_biases_based_on_sample_rate+0xac>
		*adc_buffer_bias = 8;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2208      	movs	r2, #8
 8002c32:	601a      	str	r2, [r3, #0]
		*mux_bias = 32;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2220      	movs	r2, #32
 8002c38:	601a      	str	r2, [r3, #0]
}
 8002c3a:	e049      	b.n	8002cd0 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 280000.0) {
 8002c3c:	a32c      	add	r3, pc, #176	@ (adr r3, 8002cf0 <set_biases_based_on_sample_rate+0x160>)
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c46:	f7fd ff5b 	bl	8000b00 <__aeabi_dcmple>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d006      	beq.n	8002c5e <set_biases_based_on_sample_rate+0xce>
		*adc_buffer_bias = 8;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2208      	movs	r2, #8
 8002c54:	601a      	str	r2, [r3, #0]
		*mux_bias = 26;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	221a      	movs	r2, #26
 8002c5a:	601a      	str	r2, [r3, #0]
}
 8002c5c:	e038      	b.n	8002cd0 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 350000.0) {
 8002c5e:	a326      	add	r3, pc, #152	@ (adr r3, 8002cf8 <set_biases_based_on_sample_rate+0x168>)
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c68:	f7fd ff4a 	bl	8000b00 <__aeabi_dcmple>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <set_biases_based_on_sample_rate+0xf0>
		*adc_buffer_bias = 4;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2204      	movs	r2, #4
 8002c76:	601a      	str	r2, [r3, #0]
		*mux_bias = 18;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2212      	movs	r2, #18
 8002c7c:	601a      	str	r2, [r3, #0]
}
 8002c7e:	e027      	b.n	8002cd0 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 440000.0) {
 8002c80:	a31f      	add	r3, pc, #124	@ (adr r3, 8002d00 <set_biases_based_on_sample_rate+0x170>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c8a:	f7fd ff39 	bl	8000b00 <__aeabi_dcmple>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <set_biases_based_on_sample_rate+0x112>
		*adc_buffer_bias = 3;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2203      	movs	r2, #3
 8002c98:	601a      	str	r2, [r3, #0]
		*mux_bias = 16;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	601a      	str	r2, [r3, #0]
}
 8002ca0:	e016      	b.n	8002cd0 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 525000.0) {
 8002ca2:	a319      	add	r3, pc, #100	@ (adr r3, 8002d08 <set_biases_based_on_sample_rate+0x178>)
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cac:	f7fd ff28 	bl	8000b00 <__aeabi_dcmple>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <set_biases_based_on_sample_rate+0x134>
		*adc_buffer_bias = 3;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	601a      	str	r2, [r3, #0]
}
 8002cc2:	e005      	b.n	8002cd0 <set_biases_based_on_sample_rate+0x140>
		*adc_buffer_bias = 2;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	601a      	str	r2, [r3, #0]
		*mux_bias = 4;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	601a      	str	r2, [r3, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	00000000 	.word	0x00000000
 8002cdc:	41011700 	.word	0x41011700
 8002ce0:	00000000 	.word	0x00000000
 8002ce4:	41055cc0 	.word	0x41055cc0
 8002ce8:	00000000 	.word	0x00000000
 8002cec:	410adb00 	.word	0x410adb00
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	41111700 	.word	0x41111700
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	41155cc0 	.word	0x41155cc0
 8002d00:	00000000 	.word	0x00000000
 8002d04:	411adb00 	.word	0x411adb00
 8002d08:	00000000 	.word	0x00000000
 8002d0c:	41200590 	.word	0x41200590
 8002d10:	40418000 	.word	0x40418000
 8002d14:	40fd4c00 	.word	0x40fd4c00

08002d18 <get_register_value>:


// Return the value of a selected RAM register (0-17) on the RHD2000 chip,
// based on the current register variables in RHDConfigParameters.
uint16_t get_register_value(RHDConfigParameters *p, int reg)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
	int regout;
	const int ZcheckDac = 128;  // midrange
 8002d22:	2380      	movs	r3, #128	@ 0x80
 8002d24:	60bb      	str	r3, [r7, #8]

	switch (reg) {
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b11      	cmp	r3, #17
 8002d2a:	f200 816f 	bhi.w	800300c <get_register_value+0x2f4>
 8002d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d34 <get_register_value+0x1c>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002d7d 	.word	0x08002d7d
 8002d38:	08002da7 	.word	0x08002da7
 8002d3c:	08002db7 	.word	0x08002db7
 8002d40:	08002dbf 	.word	0x08002dbf
 8002d44:	08002def 	.word	0x08002def
 8002d48:	08002e17 	.word	0x08002e17
 8002d4c:	08002e47 	.word	0x08002e47
 8002d50:	08002e4d 	.word	0x08002e4d
 8002d54:	08002e55 	.word	0x08002e55
 8002d58:	08002e67 	.word	0x08002e67
 8002d5c:	08002e79 	.word	0x08002e79
 8002d60:	08002e8b 	.word	0x08002e8b
 8002d64:	08002e9d 	.word	0x08002e9d
 8002d68:	08002eaf 	.word	0x08002eaf
 8002d6c:	08002ecd 	.word	0x08002ecd
 8002d70:	08002f1d 	.word	0x08002f1d
 8002d74:	08002f6d 	.word	0x08002f6d
 8002d78:	08002fbd 	.word	0x08002fbd
	case 0:
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	019a      	lsls	r2, r3, #6
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8002d88:	015b      	lsls	r3, r3, #5
 8002d8a:	441a      	add	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	009b      	lsls	r3, r3, #2
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8002d9a:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8002da0:	4413      	add	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
		break;
 8002da4:	e134      	b.n	8003010 <get_register_value+0x2f8>

	case 1:
		regout = (p->vdd_sense_enable << 6) + p->adc_buffer_bias;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	019a      	lsls	r2, r3, #6
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
		break;
 8002db4:	e12c      	b.n	8003010 <get_register_value+0x2f8>

	case 2:
		regout = p->mux_bias;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	60fb      	str	r3, [r7, #12]
		break;
 8002dbc:	e128      	b.n	8003010 <get_register_value+0x2f8>

	case 3:
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	441a      	add	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	441a      	add	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de0:	005b      	lsls	r3, r3, #1
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002de2:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002de8:	4413      	add	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
		break;
 8002dec:	e110      	b.n	8003010 <get_register_value+0x2f8>

	case 4:
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df2:	01da      	lsls	r2, r3, #7
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	019b      	lsls	r3, r3, #6
 8002dfa:	441a      	add	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e00:	015b      	lsls	r3, r3, #5
 8002e02:	441a      	add	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	441a      	add	r2, r3
			(p->DSP_cutoff_freq);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8002e10:	4413      	add	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
		break;
 8002e14:	e0fc      	b.n	8003010 <get_register_value+0x2f8>

	case 5:
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1a:	019a      	lsls	r2, r3, #6
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e20:	015b      	lsls	r3, r3, #5
 8002e22:	441a      	add	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	009b      	lsls	r3, r3, #2
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002e32:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	441a      	add	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002e40:	4413      	add	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
		break;
 8002e44:	e0e4      	b.n	8003010 <get_register_value+0x2f8>

	case 6:
		regout = ZcheckDac;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	60fb      	str	r3, [r7, #12]
		break;
 8002e4a:	e0e1      	b.n	8003010 <get_register_value+0x2f8>

	case 7:
		regout = p->zcheck_select;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e50:	60fb      	str	r3, [r7, #12]
		break;
 8002e52:	e0dd      	b.n	8003010 <get_register_value+0x2f8>

	case 8:
		regout = (p->off_chip_RH1 << 7) + p->rH1_DAC1;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e58:	01da      	lsls	r2, r3, #7
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e60:	4413      	add	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
		break;
 8002e64:	e0d4      	b.n	8003010 <get_register_value+0x2f8>

	case 9:
		regout = (p->adc_Aux1_en << 7) + p->rH1_DAC2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e6a:	01da      	lsls	r2, r3, #7
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
		break;
 8002e76:	e0cb      	b.n	8003010 <get_register_value+0x2f8>

	case 10:
		regout = (p->off_chip_RH2 << 7) + p->rH2_DAC1;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	01da      	lsls	r2, r3, #7
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e84:	4413      	add	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
		break;
 8002e88:	e0c2      	b.n	8003010 <get_register_value+0x2f8>

	case 11:
		regout = (p->adc_Aux2_en << 7) + p->rH2_DAC2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e8e:	01da      	lsls	r2, r3, #7
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e96:	4413      	add	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
		break;
 8002e9a:	e0b9      	b.n	8003010 <get_register_value+0x2f8>

	case 12:
		regout = (p->off_chip_RL << 7) + p->rL_DAC1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea0:	01da      	lsls	r2, r3, #7
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea8:	4413      	add	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
		break;
 8002eac:	e0b0      	b.n	8003010 <get_register_value+0x2f8>

	case 13:
		regout = (p->adc_Aux3_en << 7) + (p->rL_DAC3 << 6) + p->rL_DAC2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eb4:	01da      	lsls	r2, r3, #7
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ebc:	019b      	lsls	r3, r3, #6
 8002ebe:	441a      	add	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ec6:	4413      	add	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
		break;
 8002eca:	e0a1      	b.n	8003010 <get_register_value+0x2f8>

	case 14:
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002ed2:	01da      	lsls	r2, r3, #7
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002eda:	019b      	lsls	r3, r3, #6
 8002edc:	441a      	add	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ee4:	015b      	lsls	r3, r3, #5
 8002ee6:	441a      	add	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ef8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002efa:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	441a      	add	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	441a      	add	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002f16:	4413      	add	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
		break;
 8002f1a:	e079      	b.n	8003010 <get_register_value+0x2f8>

	case 15:
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002f22:	01da      	lsls	r2, r3, #7
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f2a:	019b      	lsls	r3, r3, #6
 8002f2c:	441a      	add	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002f34:	015b      	lsls	r3, r3, #5
 8002f36:	441a      	add	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002f48:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002f4a:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	441a      	add	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
		break;
 8002f6a:	e051      	b.n	8003010 <get_register_value+0x2f8>

	case 16:
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8002f72:	01da      	lsls	r2, r3, #7
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8002f7a:	019b      	lsls	r3, r3, #6
 8002f7c:	441a      	add	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f84:	015b      	lsls	r3, r3, #5
 8002f86:	441a      	add	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002f98:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002f9a:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	441a      	add	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002fb6:	4413      	add	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
		break;
 8002fba:	e029      	b.n	8003010 <get_register_value+0x2f8>

	case 17:
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8002fc2:	01da      	lsls	r2, r3, #7
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002fca:	019b      	lsls	r3, r3, #6
 8002fcc:	441a      	add	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002fd4:	015b      	lsls	r3, r3, #5
 8002fd6:	441a      	add	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002fe8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002fea:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	441a      	add	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
		break;
 800300a:	e001      	b.n	8003010 <get_register_value+0x2f8>

	default:
		regout = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
	}
	return regout;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	b29b      	uxth	r3, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <calibrate_command>:
// These dummy commands are not executed (unless another calibration command is sent, which resets the process).
// During the entire 9-command process, the results are all 0s except the for the MSB.
// The MSB will be 0 if 2's complement mode is enabled (see Register 4), otherwise it will be 1.
// Command: 01010101_00000000
// Result:  *0000000_00000000 where * depends on 2's complement mode
uint16_t calibrate_command() {
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
	return 0b0101010100000000;
 8003024:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <write_command>:
// echoed data that was written (to verify reception of correct data).
// Any attempt to write to a read-only register (or non-existent register) will produce this same result,
// but data will not be written to that register.
// Command: 10_R[5]-R[0]_D[7]-D[0]
// Result:  11111111_D[7]-D[0]
uint16_t write_command(uint8_t reg_addr, uint8_t data) {
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	4603      	mov	r3, r0
 800303a:	460a      	mov	r2, r1
 800303c:	71fb      	strb	r3, [r7, #7]
 800303e:	4613      	mov	r3, r2
 8003040:	71bb      	strb	r3, [r7, #6]
	const uint16_t read_mask = 0b1000000000000000;
 8003042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003046:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	b29b      	uxth	r3, r3
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask | (uint16_t) data;
 8003050:	89fa      	ldrh	r2, [r7, #14]
 8003052:	89bb      	ldrh	r3, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	b29a      	uxth	r2, r3
 8003058:	79bb      	ldrb	r3, [r7, #6]
 800305a:	b29b      	uxth	r3, r3
 800305c:	4313      	orrs	r3, r2
 800305e:	b29b      	uxth	r3, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <read_command>:

// Read contents of register.
// Once sent, SPI returns (2 commands later) 8 MSBs of 0s, and 8 LSBs of the read data.
// Command: 11_R[5]-R[0]_00000000
// Result:  00000000_D[7]-D[0]
uint16_t read_command(uint8_t reg_addr) {
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	71fb      	strb	r3, [r7, #7]
	const uint16_t read_mask = 0b1100000000000000;
 8003076:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800307a:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	b29b      	uxth	r3, r3
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask;
 8003084:	89fa      	ldrh	r2, [r7, #14]
 8003086:	89bb      	ldrh	r3, [r7, #12]
 8003088:	4313      	orrs	r3, r2
 800308a:	b29b      	uxth	r3, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	4b0a      	ldr	r3, [pc, #40]	@ (80030c8 <HAL_MspInit+0x30>)
 80030a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a4:	4a08      	ldr	r2, [pc, #32]	@ (80030c8 <HAL_MspInit+0x30>)
 80030a6:	f043 0304 	orr.w	r3, r3, #4
 80030aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80030ae:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <HAL_MspInit+0x30>)
 80030b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	46020c00 	.word	0x46020c00

080030cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b0c2      	sub	sp, #264	@ 0x108
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80030d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80030da:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030ec:	f107 0318 	add.w	r3, r7, #24
 80030f0:	22d8      	movs	r2, #216	@ 0xd8
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f00a f899 	bl	800d22c <memset>
  if(hspi->Instance==SPI3)
 80030fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80030fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a8a      	ldr	r2, [pc, #552]	@ (8003330 <HAL_SPI_MspInit+0x264>)
 8003108:	4293      	cmp	r3, r2
 800310a:	f040 810b 	bne.w	8003324 <HAL_SPI_MspInit+0x258>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800310e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 800311a:	2308      	movs	r3, #8
 800311c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003120:	f107 0318 	add.w	r3, r7, #24
 8003124:	4618      	mov	r0, r3
 8003126:	f003 fba9 	bl	800687c <HAL_RCCEx_PeriphCLKConfig>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8003130:	f7fe fa66 	bl	8001600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003134:	4b7f      	ldr	r3, [pc, #508]	@ (8003334 <HAL_SPI_MspInit+0x268>)
 8003136:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800313a:	4a7e      	ldr	r2, [pc, #504]	@ (8003334 <HAL_SPI_MspInit+0x268>)
 800313c:	f043 0320 	orr.w	r3, r3, #32
 8003140:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003144:	4b7b      	ldr	r3, [pc, #492]	@ (8003334 <HAL_SPI_MspInit+0x268>)
 8003146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003152:	4b78      	ldr	r3, [pc, #480]	@ (8003334 <HAL_SPI_MspInit+0x268>)
 8003154:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003158:	4a76      	ldr	r2, [pc, #472]	@ (8003334 <HAL_SPI_MspInit+0x268>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003162:	4b74      	ldr	r3, [pc, #464]	@ (8003334 <HAL_SPI_MspInit+0x268>)
 8003164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003170:	4b70      	ldr	r3, [pc, #448]	@ (8003334 <HAL_SPI_MspInit+0x268>)
 8003172:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003176:	4a6f      	ldr	r2, [pc, #444]	@ (8003334 <HAL_SPI_MspInit+0x268>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003180:	4b6c      	ldr	r3, [pc, #432]	@ (8003334 <HAL_SPI_MspInit+0x268>)
 8003182:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800318e:	2310      	movs	r3, #16
 8003190:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a0:	2303      	movs	r3, #3
 80031a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031a6:	2306      	movs	r3, #6
 80031a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ac:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80031b0:	4619      	mov	r1, r3
 80031b2:	4861      	ldr	r0, [pc, #388]	@ (8003338 <HAL_SPI_MspInit+0x26c>)
 80031b4:	f001 fd9a 	bl	8004cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80031b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80031bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	2302      	movs	r3, #2
 80031c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031cc:	2303      	movs	r3, #3
 80031ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031d2:	2306      	movs	r3, #6
 80031d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80031dc:	4619      	mov	r1, r3
 80031de:	4857      	ldr	r0, [pc, #348]	@ (800333c <HAL_SPI_MspInit+0x270>)
 80031e0:	f001 fd84 	bl	8004cec <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* GPDMA1_REQUEST_SPI3_RX Init */
    handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 80031e4:	4b56      	ldr	r3, [pc, #344]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 80031e6:	4a57      	ldr	r2, [pc, #348]	@ (8003344 <HAL_SPI_MspInit+0x278>)
 80031e8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel13.Init.Request = GPDMA1_REQUEST_SPI3_RX;
 80031ea:	4b55      	ldr	r3, [pc, #340]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 80031ec:	220a      	movs	r2, #10
 80031ee:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel13.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80031f0:	4b53      	ldr	r3, [pc, #332]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel13.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031f6:	4b52      	ldr	r3, [pc, #328]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel13.Init.SrcInc = DMA_SINC_FIXED;
 80031fc:	4b50      	ldr	r3, [pc, #320]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel13.Init.DestInc = DMA_DINC_INCREMENTED;
 8003202:	4b4f      	ldr	r3, [pc, #316]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 8003204:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003208:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel13.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800320a:	4b4d      	ldr	r3, [pc, #308]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 800320c:	2201      	movs	r2, #1
 800320e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel13.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8003210:	4b4b      	ldr	r3, [pc, #300]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 8003212:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003216:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel13.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8003218:	4b49      	ldr	r3, [pc, #292]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 800321a:	2200      	movs	r2, #0
 800321c:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel13.Init.SrcBurstLength = 1;
 800321e:	4b48      	ldr	r3, [pc, #288]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 8003220:	2201      	movs	r2, #1
 8003222:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel13.Init.DestBurstLength = 1;
 8003224:	4b46      	ldr	r3, [pc, #280]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 8003226:	2201      	movs	r2, #1
 8003228:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel13.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800322a:	4b45      	ldr	r3, [pc, #276]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 800322c:	2200      	movs	r2, #0
 800322e:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel13.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003230:	4b43      	ldr	r3, [pc, #268]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel13.Init.Mode = DMA_NORMAL;
 8003236:	4b42      	ldr	r3, [pc, #264]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 8003238:	2200      	movs	r2, #0
 800323a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 800323c:	4840      	ldr	r0, [pc, #256]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 800323e:	f000 fe11 	bl	8003e64 <HAL_DMA_Init>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_SPI_MspInit+0x180>
    {
      Error_Handler();
 8003248:	f7fe f9da 	bl	8001600 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel13);
 800324c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003250:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a3a      	ldr	r2, [pc, #232]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 8003258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800325c:	4a38      	ldr	r2, [pc, #224]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 800325e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003262:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 800326a:	2110      	movs	r1, #16
 800326c:	4834      	ldr	r0, [pc, #208]	@ (8003340 <HAL_SPI_MspInit+0x274>)
 800326e:	f001 f997 	bl	80045a0 <HAL_DMA_ConfigChannelAttributes>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_SPI_MspInit+0x1b0>
    {
      Error_Handler();
 8003278:	f7fe f9c2 	bl	8001600 <Error_Handler>
    }

    /* GPDMA1_REQUEST_SPI3_TX Init */
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 800327c:	4b32      	ldr	r3, [pc, #200]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 800327e:	4a33      	ldr	r2, [pc, #204]	@ (800334c <HAL_SPI_MspInit+0x280>)
 8003280:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_SPI3_TX;
 8003282:	4b31      	ldr	r3, [pc, #196]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 8003284:	220b      	movs	r2, #11
 8003286:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003288:	4b2f      	ldr	r3, [pc, #188]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800328e:	4b2e      	ldr	r3, [pc, #184]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 8003290:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003294:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_INCREMENTED;
 8003296:	4b2c      	ldr	r3, [pc, #176]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 8003298:	2208      	movs	r2, #8
 800329a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_FIXED;
 800329c:	4b2a      	ldr	r3, [pc, #168]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80032a2:	4b29      	ldr	r3, [pc, #164]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80032a8:	4b27      	ldr	r3, [pc, #156]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 80032aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032ae:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80032b0:	4b25      	ldr	r3, [pc, #148]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 80032b6:	4b24      	ldr	r3, [pc, #144]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 80032bc:	4b22      	ldr	r3, [pc, #136]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 80032be:	2201      	movs	r2, #1
 80032c0:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80032c2:	4b21      	ldr	r3, [pc, #132]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80032c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 80032ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 80032d4:	481c      	ldr	r0, [pc, #112]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 80032d6:	f000 fdc5 	bl	8003e64 <HAL_DMA_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_SPI_MspInit+0x218>
    {
      Error_Handler();
 80032e0:	f7fe f98e 	bl	8001600 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel12);
 80032e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a16      	ldr	r2, [pc, #88]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 80032f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80032f4:	4a14      	ldr	r2, [pc, #80]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 80032f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003302:	2110      	movs	r1, #16
 8003304:	4810      	ldr	r0, [pc, #64]	@ (8003348 <HAL_SPI_MspInit+0x27c>)
 8003306:	f001 f94b 	bl	80045a0 <HAL_DMA_ConfigChannelAttributes>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_SPI_MspInit+0x248>
    {
      Error_Handler();
 8003310:	f7fe f976 	bl	8001600 <Error_Handler>
    }

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003314:	2200      	movs	r2, #0
 8003316:	2100      	movs	r1, #0
 8003318:	2063      	movs	r0, #99	@ 0x63
 800331a:	f000 fcc7 	bl	8003cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800331e:	2063      	movs	r0, #99	@ 0x63
 8003320:	f000 fcde 	bl	8003ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003324:	bf00      	nop
 8003326:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	46002000 	.word	0x46002000
 8003334:	46020c00 	.word	0x46020c00
 8003338:	42020000 	.word	0x42020000
 800333c:	42020800 	.word	0x42020800
 8003340:	20000124 	.word	0x20000124
 8003344:	400206d0 	.word	0x400206d0
 8003348:	2000019c 	.word	0x2000019c
 800334c:	40020650 	.word	0x40020650

08003350 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0e      	ldr	r2, [pc, #56]	@ (8003398 <HAL_TIM_OC_MspInit+0x48>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d116      	bne.n	8003390 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003362:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <HAL_TIM_OC_MspInit+0x4c>)
 8003364:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003368:	4a0c      	ldr	r2, [pc, #48]	@ (800339c <HAL_TIM_OC_MspInit+0x4c>)
 800336a:	f043 0302 	orr.w	r3, r3, #2
 800336e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003372:	4b0a      	ldr	r3, [pc, #40]	@ (800339c <HAL_TIM_OC_MspInit+0x4c>)
 8003374:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003380:	2200      	movs	r2, #0
 8003382:	2100      	movs	r1, #0
 8003384:	202e      	movs	r0, #46	@ 0x2e
 8003386:	f000 fc91 	bl	8003cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800338a:	202e      	movs	r0, #46	@ 0x2e
 800338c:	f000 fca8 	bl	8003ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40000400 	.word	0x40000400
 800339c:	46020c00 	.word	0x46020c00

080033a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b0c0      	sub	sp, #256	@ 0x100
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033b8:	f107 0310 	add.w	r3, r7, #16
 80033bc:	22d8      	movs	r2, #216	@ 0xd8
 80033be:	2100      	movs	r1, #0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f009 ff33 	bl	800d22c <memset>
  if(huart->Instance==USART1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a58      	ldr	r2, [pc, #352]	@ (800352c <HAL_UART_MspInit+0x18c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	f040 80a7 	bne.w	8003520 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033d2:	f04f 0201 	mov.w	r2, #1
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033de:	2300      	movs	r3, #0
 80033e0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033e2:	f107 0310 	add.w	r3, r7, #16
 80033e6:	4618      	mov	r0, r3
 80033e8:	f003 fa48 	bl	800687c <HAL_RCCEx_PeriphCLKConfig>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80033f2:	f7fe f905 	bl	8001600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003530 <HAL_UART_MspInit+0x190>)
 80033f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003530 <HAL_UART_MspInit+0x190>)
 80033fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003402:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003406:	4b4a      	ldr	r3, [pc, #296]	@ (8003530 <HAL_UART_MspInit+0x190>)
 8003408:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800340c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003414:	4b46      	ldr	r3, [pc, #280]	@ (8003530 <HAL_UART_MspInit+0x190>)
 8003416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800341a:	4a45      	ldr	r2, [pc, #276]	@ (8003530 <HAL_UART_MspInit+0x190>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003424:	4b42      	ldr	r3, [pc, #264]	@ (8003530 <HAL_UART_MspInit+0x190>)
 8003426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin;
 8003432:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003436:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003446:	2303      	movs	r3, #3
 8003448:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800344c:	2307      	movs	r3, #7
 800344e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(T_VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003452:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003456:	4619      	mov	r1, r3
 8003458:	4836      	ldr	r0, [pc, #216]	@ (8003534 <HAL_UART_MspInit+0x194>)
 800345a:	f001 fc47 	bl	8004cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800345e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003462:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003472:	2300      	movs	r3, #0
 8003474:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003478:	2307      	movs	r3, #7
 800347a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003482:	4619      	mov	r1, r3
 8003484:	482b      	ldr	r0, [pc, #172]	@ (8003534 <HAL_UART_MspInit+0x194>)
 8003486:	f001 fc31 	bl	8004cec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800348a:	4b2b      	ldr	r3, [pc, #172]	@ (8003538 <HAL_UART_MspInit+0x198>)
 800348c:	4a2b      	ldr	r2, [pc, #172]	@ (800353c <HAL_UART_MspInit+0x19c>)
 800348e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8003490:	4b29      	ldr	r3, [pc, #164]	@ (8003538 <HAL_UART_MspInit+0x198>)
 8003492:	2219      	movs	r2, #25
 8003494:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003496:	4b28      	ldr	r3, [pc, #160]	@ (8003538 <HAL_UART_MspInit+0x198>)
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800349c:	4b26      	ldr	r3, [pc, #152]	@ (8003538 <HAL_UART_MspInit+0x198>)
 800349e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034a2:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 80034a4:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034a6:	2208      	movs	r2, #8
 80034a8:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 80034aa:	4b23      	ldr	r3, [pc, #140]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80034b0:	4b21      	ldr	r3, [pc, #132]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80034b6:	4b20      	ldr	r3, [pc, #128]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_HIGH_PRIORITY;
 80034bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034be:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80034c2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80034c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80034ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80034d0:	4b19      	ldr	r3, [pc, #100]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80034d6:	4b18      	ldr	r3, [pc, #96]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80034dc:	4b16      	ldr	r3, [pc, #88]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034de:	2200      	movs	r2, #0
 80034e0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80034e2:	4815      	ldr	r0, [pc, #84]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034e4:	f000 fcbe 	bl	8003e64 <HAL_DMA_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_UART_MspInit+0x152>
    {
      Error_Handler();
 80034ee:	f7fe f887 	bl	8001600 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel0);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a10      	ldr	r2, [pc, #64]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034f6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80034f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003538 <HAL_UART_MspInit+0x198>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80034fe:	2110      	movs	r1, #16
 8003500:	480d      	ldr	r0, [pc, #52]	@ (8003538 <HAL_UART_MspInit+0x198>)
 8003502:	f001 f84d 	bl	80045a0 <HAL_DMA_ConfigChannelAttributes>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 800350c:	f7fe f878 	bl	8001600 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003510:	2200      	movs	r2, #0
 8003512:	2100      	movs	r1, #0
 8003514:	203d      	movs	r0, #61	@ 0x3d
 8003516:	f000 fbc9 	bl	8003cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800351a:	203d      	movs	r0, #61	@ 0x3d
 800351c:	f000 fbe0 	bl	8003ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003520:	bf00      	nop
 8003522:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40013800 	.word	0x40013800
 8003530:	46020c00 	.word	0x46020c00
 8003534:	42020000 	.word	0x42020000
 8003538:	200002f4 	.word	0x200002f4
 800353c:	40020050 	.word	0x40020050

08003540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <NMI_Handler+0x4>

08003548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <HardFault_Handler+0x4>

08003550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <MemManage_Handler+0x4>

08003558 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <BusFault_Handler+0x4>

08003560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <UsageFault_Handler+0x4>

08003568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SysTick_counter++;
 8003598:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <SysTick_Handler+0x20>)
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	1c50      	adds	r0, r2, #1
 80035a0:	f143 0100 	adc.w	r1, r3, #0
 80035a4:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <SysTick_Handler+0x20>)
 80035a6:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035aa:	f000 fa83 	bl	8003ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000708 	.word	0x20000708

080035b8 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_usart_tx();
#endif
  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80035bc:	4802      	ldr	r0, [pc, #8]	@ (80035c8 <GPDMA1_Channel0_IRQHandler+0x10>)
 80035be:	f000 fe82 	bl	80042c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200002f4 	.word	0x200002f4

080035cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
	if (!LL_TIM_IsActiveFlag_UPDATE(INTERRUPT_TIM)) return; // Ignore any non-UPDATE events that may  have generated this interrupt
	LL_TIM_ClearFlag_UPDATE(INTERRUPT_TIM); // If this was an UPDATE event, clear the flag and proceed with interrupt routine
	sample_interrupt_routine();
#endif
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035d0:	4802      	ldr	r0, [pc, #8]	@ (80035dc <TIM3_IRQHandler+0x10>)
 80035d2:	f007 fb55 	bl	800ac80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000214 	.word	0x20000214

080035e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
#ifndef USE_HAL
	uart_interrupt_routine();
#endif
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035e4:	4802      	ldr	r0, [pc, #8]	@ (80035f0 <USART1_IRQHandler+0x10>)
 80035e6:	f008 fc39 	bl	800be5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000260 	.word	0x20000260

080035f4 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_tx();
#endif
  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 80035f8:	4802      	ldr	r0, [pc, #8]	@ (8003604 <GPDMA1_Channel12_IRQHandler+0x10>)
 80035fa:	f000 fe64 	bl	80042c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	2000019c 	.word	0x2000019c

08003608 <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_rx();
#endif
  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 800360c:	4802      	ldr	r0, [pc, #8]	@ (8003618 <GPDMA1_Channel13_IRQHandler+0x10>)
 800360e:	f000 fe5a 	bl	80042c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000124 	.word	0x20000124

0800361c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine();
#endif
  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003620:	4802      	ldr	r0, [pc, #8]	@ (800362c <SPI3_IRQHandler+0x10>)
 8003622:	f006 fe6d 	bl	800a300 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000094 	.word	0x20000094

08003630 <HAL_TIM_PeriodElapsedCallback>:

#ifdef USE_HAL

// This HAL function is called when the timer reaches its counter target - execute interrupt routine when this happens
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	sample_interrupt_routine();
 8003638:	f7fd fffa 	bl	8001630 <sample_interrupt_routine>
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800364c:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <_sbrk+0x5c>)
 800364e:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <_sbrk+0x60>)
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003658:	4b13      	ldr	r3, [pc, #76]	@ (80036a8 <_sbrk+0x64>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003660:	4b11      	ldr	r3, [pc, #68]	@ (80036a8 <_sbrk+0x64>)
 8003662:	4a12      	ldr	r2, [pc, #72]	@ (80036ac <_sbrk+0x68>)
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003666:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <_sbrk+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d207      	bcs.n	8003684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003674:	f009 fdf2 	bl	800d25c <__errno>
 8003678:	4603      	mov	r3, r0
 800367a:	220c      	movs	r2, #12
 800367c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	e009      	b.n	8003698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003684:	4b08      	ldr	r3, [pc, #32]	@ (80036a8 <_sbrk+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368a:	4b07      	ldr	r3, [pc, #28]	@ (80036a8 <_sbrk+0x64>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	4a05      	ldr	r2, [pc, #20]	@ (80036a8 <_sbrk+0x64>)
 8003694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20270000 	.word	0x20270000
 80036a4:	00000400 	.word	0x00000400
 80036a8:	20000710 	.word	0x20000710
 80036ac:	20000868 	.word	0x20000868

080036b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80036b4:	4b18      	ldr	r3, [pc, #96]	@ (8003718 <SystemInit+0x68>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ba:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <SystemInit+0x68>)
 80036bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80036c4:	4b15      	ldr	r3, [pc, #84]	@ (800371c <SystemInit+0x6c>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80036ca:	4b14      	ldr	r3, [pc, #80]	@ (800371c <SystemInit+0x6c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80036d0:	4b12      	ldr	r3, [pc, #72]	@ (800371c <SystemInit+0x6c>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80036d6:	4b11      	ldr	r3, [pc, #68]	@ (800371c <SystemInit+0x6c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80036dc:	4b0f      	ldr	r3, [pc, #60]	@ (800371c <SystemInit+0x6c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0e      	ldr	r2, [pc, #56]	@ (800371c <SystemInit+0x6c>)
 80036e2:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80036e6:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80036ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <SystemInit+0x6c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80036f2:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <SystemInit+0x6c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a09      	ldr	r2, [pc, #36]	@ (800371c <SystemInit+0x6c>)
 80036f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80036fe:	4b07      	ldr	r3, [pc, #28]	@ (800371c <SystemInit+0x6c>)
 8003700:	2200      	movs	r2, #0
 8003702:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003704:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <SystemInit+0x68>)
 8003706:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800370a:	609a      	str	r2, [r3, #8]
  #endif
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	e000ed00 	.word	0xe000ed00
 800371c:	46020c00 	.word	0x46020c00

08003720 <loop_escape>:
uint16_t samples[NUM_SAMPLED_CHANNELS];

// Specify condition that should result in the main while loop ending.
// By default, escape once 1 second of data has been gathered.
int loop_escape()
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
	// Escape once sample memory capacity (default 1 second of data) has been reached.
#ifdef OFFLINE_TRANSFER
	return sample_counter > per_channel_sample_memory_capacity;
#else
	return 0;
 8003724:	2300      	movs	r3, #0
#endif
}
 8003726:	4618      	mov	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <write_data_to_memory>:


// Write any desired data from this sequence to memory.
// By default, only the result corresponding to a CONVERT on FIRST_SAMPLED_CHANNEL is saved per sequence.
void write_data_to_memory()
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
	// Read results of aux command slots (not used in this sample example).
	// For more advanced programs that require reading of aux command results, those would be read and saved here.
//	uint16_t aux0_result = command_sequence_MISO[34]; // Result of AUX SLOT 1 from this command sequence
//	uint16_t aux1_result = command_sequence_MISO[0];  // Result of AUX SLOT 2 from the previous command sequence
//	uint16_t aux2_result = command_sequence_MISO[1];  // Result of AUX SLOT 3 from the previous command sequence
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <transmit_data_realtime>:


// Determine if data is ready to be transmitted, and if so, transmit (for example via USART).
void transmit_data_realtime()
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
	// Data corruption is more likely to occur with larger NUM_CHANNELS_TO_TRANSMIT, slower USART Baud rate, and faster SPI Baud rate.
//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE; i++) {
//		command_sequence_MISO[i] = i;
//	}

	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	e00c      	b.n	8003766 <transmit_data_realtime+0x26>
		samples[i] = command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2];
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	330a      	adds	r3, #10
 8003750:	4a0a      	ldr	r2, [pc, #40]	@ (800377c <transmit_data_realtime+0x3c>)
 8003752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003756:	b299      	uxth	r1, r3
 8003758:	4a09      	ldr	r2, [pc, #36]	@ (8003780 <transmit_data_realtime+0x40>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3301      	adds	r3, #1
 8003764:	607b      	str	r3, [r7, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b03      	cmp	r3, #3
 800376a:	ddef      	ble.n	800374c <transmit_data_realtime+0xc>
		//samples[i] = 32768 + i;
	}
	transmit_dma_to_usart(samples, NUM_SAMPLED_CHANNELS * sizeof(uint16_t));
 800376c:	2108      	movs	r1, #8
 800376e:	4804      	ldr	r0, [pc, #16]	@ (8003780 <transmit_data_realtime+0x40>)
 8003770:	f000 f8b8 	bl	80038e4 <transmit_dma_to_usart>
//	LL_USART_TransmitData8(USART, (uint8_t) (sample & 0xff));
//	while (!LL_USART_IsActiveFlag_TXE(USART)) {}
//	LL_USART_TransmitData8(USART, (uint8_t) ((sample & 0xff00) >> 8));
//#endif
#endif
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	200003b4 	.word	0x200003b4
 8003780:	20000714 	.word	0x20000714

08003784 <transmit_data_offline>:


// Transmit accumulated data after acquisition has finished (for example via USART).
void transmit_data_offline()
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
	// into very small chunks seems to be the most reliable at high Baud rates.

	// We do the same thing for LL, for consistency - optimized performance is not critical for offline transfers, so there is likely
	// no significant downside to chunking data into many smaller transfers.

	uint16_t samples_per_chunk = 1;
 800378a:	2301      	movs	r3, #1
 800378c:	827b      	strh	r3, [r7, #18]
	uint32_t total_samples_in_memory = NUM_SAMPLED_CHANNELS * calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 800378e:	f7fe f8bb 	bl	8001908 <calculate_sample_rate>
 8003792:	ec51 0b10 	vmov	r0, r1, d0
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	4b31      	ldr	r3, [pc, #196]	@ (8003860 <transmit_data_offline+0xdc>)
 800379c:	f7fc ff34 	bl	8000608 <__aeabi_dmul>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	f7fd f9de 	bl	8000b68 <__aeabi_d2uiz>
 80037ac:	4603      	mov	r3, r0
 80037ae:	60fb      	str	r3, [r7, #12]
	uint32_t num_chunks = floor(total_samples_in_memory / samples_per_chunk);
 80037b0:	8a7b      	ldrh	r3, [r7, #18]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fc feab 	bl	8000514 <__aeabi_ui2d>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	f7fd f9cf 	bl	8000b68 <__aeabi_d2uiz>
 80037ca:	4603      	mov	r3, r0
 80037cc:	60bb      	str	r3, [r7, #8]
	uint16_t remaining_samples = total_samples_in_memory % samples_per_chunk;
 80037ce:	8a7a      	ldrh	r2, [r7, #18]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80037d6:	fb01 f202 	mul.w	r2, r1, r2
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]

	// Transmit multiple complete chunks of data
	for (int i = 0; i < num_chunks; i++) {
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e01a      	b.n	800381a <transmit_data_offline+0x96>
		uart_ready = 0;
 80037e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003864 <transmit_data_offline+0xe0>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * i], samples_per_chunk * sizeof(uint16_t));
 80037ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003868 <transmit_data_offline+0xe4>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	8a7b      	ldrh	r3, [r7, #18]
 80037f0:	6979      	ldr	r1, [r7, #20]
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	441a      	add	r2, r3
 80037fa:	8a7b      	ldrh	r3, [r7, #18]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	b29b      	uxth	r3, r3
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f000 f86e 	bl	80038e4 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 8003808:	bf00      	nop
 800380a:	4b16      	ldr	r3, [pc, #88]	@ (8003864 <transmit_data_offline+0xe0>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d1fa      	bne.n	800380a <transmit_data_offline+0x86>
	for (int i = 0; i < num_chunks; i++) {
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	3301      	adds	r3, #1
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	429a      	cmp	r2, r3
 8003820:	d8e0      	bhi.n	80037e4 <transmit_data_offline+0x60>
	}

	// Transmit any remaining data too small to fit in a complete chunk
	if (remaining_samples > 0) {
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d017      	beq.n	8003858 <transmit_data_offline+0xd4>
		uart_ready = 0;
 8003828:	4b0e      	ldr	r3, [pc, #56]	@ (8003864 <transmit_data_offline+0xe0>)
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * num_chunks], remaining_samples * sizeof(uint16_t));
 800382e:	4b0e      	ldr	r3, [pc, #56]	@ (8003868 <transmit_data_offline+0xe4>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	8a7b      	ldrh	r3, [r7, #18]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	441a      	add	r2, r3
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	b29b      	uxth	r3, r3
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f000 f84c 	bl	80038e4 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 800384c:	bf00      	nop
 800384e:	4b05      	ldr	r3, [pc, #20]	@ (8003864 <transmit_data_offline+0xe0>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d1fa      	bne.n	800384e <transmit_data_offline+0xca>
//		LL_USART_TransmitData8(USART, (uint8_t) (sample & 0xff));
//		while (!LL_USART_IsActiveFlag_TXE(USART)) {}
//		LL_USART_TransmitData8(USART, (uint8_t) ((sample & 0xff00) >> 8));
//	}
//#endif
}
 8003858:	bf00      	nop
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40100000 	.word	0x40100000
 8003864:	20000008 	.word	0x20000008
 8003868:	200003fc 	.word	0x200003fc

0800386c <configure_registers>:

// Configure and transmit register values.
// Initial register values default to the same default settings in the RHX software.
// Any desired changes to these values added after the 'write_initial_reg_values()' function call.
void configure_registers(RHDConfigParameters *parameters)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	write_initial_reg_values(parameters);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7fd ffdf 	bl	8001838 <write_initial_reg_values>
//	// Reg 6: (Actual DAC value which changes over time - instead of setting once here, this should be written sample-by-sample in an aux command list).
//
//	// Reg 7: Set zcheck_select
//	set_zcheck_channel(parameters, SELECTED_CHANNEL);
//	write_command(7, get_register_value(parameters, 7));
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <configure_convert_commands>:


// Configure the CONVERT commands that are loaded at the beginning of command_sequence_MOSI.
// By default, channels from 0 to CONVERT_COMMANDS_PER_SEQUENCE - 1 (0 to 31) are loaded consecutively (0, 1, 2, 3, ... 31).
void configure_convert_commands()
{
 8003882:	b580      	push	{r7, lr}
 8003884:	af00      	add	r7, sp, #0
	// If default ordering of channel CONVERT commands (0, 1, 2, 3, ... 31) is desired, pass a NULL 2nd parameter to create_convert_sequence().
	create_convert_sequence(NULL);
 8003886:	2000      	movs	r0, #0
 8003888:	f7fe f89c 	bl	80019c4 <create_convert_sequence>
	//	uint8_t channel_numbers[CONVERT_COMMANDS_PER_SEQUENCE] = {0};
	//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
	//		channel_numbers[i] = (CONVERT_COMMANDS_PER_SEQUENCE - 1) - i;
	//	}
	//	create_convert_sequence((uint16_t*) command_sequence_MOSI, channel_numbers);
}
 800388c:	bf00      	nop
 800388e:	bd80      	pop	{r7, pc}

08003890 <configure_aux_commands>:


// Configure the AUX commands that are loaded at the end of command_sequence_MOSI.
// By defaults, command lists from 0 to AUX_COMMANDS_PER_SEQUENCE - 1 (0 to 2) are loaded consecutively (32, 33, 34).
void configure_aux_commands(RHDConfigParameters *parameters)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	  // execution of this list, after the length has been reached it can begin at 0 again.

	// Slot 0: Write RHD register loading to aux_command_list[0], so that the register values saved in software (parameters) are continually re-written.
	//create_command_list_RHD_register_config(parameters, (uint16_t*) aux_command_list[0], 0, AUX_COMMAND_LIST_LENGTH);
	// TODO
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[0], AUX_COMMAND_LIST_LENGTH, read_command(40));
 8003898:	2028      	movs	r0, #40	@ 0x28
 800389a:	f7ff fbe7 	bl	800306c <read_command>
 800389e:	4603      	mov	r3, r0
 80038a0:	2280      	movs	r2, #128	@ 0x80
 80038a2:	490d      	ldr	r1, [pc, #52]	@ (80038d8 <configure_aux_commands+0x48>)
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fe f8ab 	bl	8001a00 <create_command_list_dummy>

	// Slot 1: Write dummy reads to aux_command_list[1], so that register 40 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[1], AUX_COMMAND_LIST_LENGTH, read_command(40));
 80038aa:	2028      	movs	r0, #40	@ 0x28
 80038ac:	f7ff fbde 	bl	800306c <read_command>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2280      	movs	r2, #128	@ 0x80
 80038b4:	4909      	ldr	r1, [pc, #36]	@ (80038dc <configure_aux_commands+0x4c>)
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe f8a2 	bl	8001a00 <create_command_list_dummy>

	// Slot 2: Write dummy reads to aux_command_list[2], so that register 41 is repeatedly read.
	//create_command_list_dummy(parameters, (uint16_t*) aux_command_list[2], AUX_COMMAND_LIST_LENGTH, read_command(41));
	// TODO
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[2], AUX_COMMAND_LIST_LENGTH, read_command(40));
 80038bc:	2028      	movs	r0, #40	@ 0x28
 80038be:	f7ff fbd5 	bl	800306c <read_command>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2280      	movs	r2, #128	@ 0x80
 80038c6:	4906      	ldr	r1, [pc, #24]	@ (80038e0 <configure_aux_commands+0x50>)
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fe f899 	bl	8001a00 <create_command_list_dummy>
	// zcheck_DAC commands can have different lengths depending on desired frequency. To handle this, be sure to:
	// a) assign create_command_list_zcheck_DAC()'s return value to zcheck_DAC_command_list_length, and
	// b) assign which command slot the zcheck_DAC command list is in to zcheck_DAC_command_slot_position.
//	zcheck_DAC_command_list_length = create_command_list_zcheck_DAC(parameters, (uint16_t*) aux_command_list[2], 1000.0, 100);
//	zcheck_DAC_command_slot_position = 2;
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000400 	.word	0x20000400
 80038dc:	20000500 	.word	0x20000500
 80038e0:	20000600 	.word	0x20000600

080038e4 <transmit_dma_to_usart>:

// Use DMA to transmit num_bytes of data from memory pointer tx_data directly to USART.
// Non-blocking, so it may be helpful to set the 'uart_ready' variable to 0 prior to this function call,
// monitor it, and hold off on further transmissions until the USART Tx complete callback sets it to 1.
void transmit_dma_to_usart(volatile uint16_t *tx_data, uint16_t num_bytes)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	807b      	strh	r3, [r7, #2]
#ifdef USE_HAL
	if (HAL_UART_Transmit_DMA(&USART, (uint8_t*) tx_data, num_bytes) != HAL_OK)
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	461a      	mov	r2, r3
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4806      	ldr	r0, [pc, #24]	@ (8003910 <transmit_dma_to_usart+0x2c>)
 80038f8:	f008 f9e8 	bl	800bccc <HAL_UART_Transmit_DMA>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <transmit_dma_to_usart+0x22>
	{
		Error_Handler();
 8003902:	f7fd fe7d 	bl	8001600 <Error_Handler>
	LL_DMA_EnableChannel(DMA, DMA_USART_CHANNEL);

	// Enable DMA transfer for transmit request by setting DMAT bit in UART CR3 register
	LL_USART_EnableDMAReq_TX(USART);
#endif
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000260 	.word	0x20000260

08003914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800394c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003918:	f7ff feca 	bl	80036b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800391c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800391e:	e003      	b.n	8003928 <LoopCopyDataInit>

08003920 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003922:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003924:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003926:	3104      	adds	r1, #4

08003928 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003928:	480a      	ldr	r0, [pc, #40]	@ (8003954 <LoopForever+0xa>)
	ldr	r3, =_edata
 800392a:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <LoopForever+0xe>)
	adds	r2, r0, r1
 800392c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800392e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003930:	d3f6      	bcc.n	8003920 <CopyDataInit>
	ldr	r2, =_sbss
 8003932:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003934:	e002      	b.n	800393c <LoopFillZerobss>

08003936 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003936:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003938:	f842 3b04 	str.w	r3, [r2], #4

0800393c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800393c:	4b08      	ldr	r3, [pc, #32]	@ (8003960 <LoopForever+0x16>)
	cmp	r2, r3
 800393e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003940:	d3f9      	bcc.n	8003936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003942:	f009 fc91 	bl	800d268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003946:	f7fd faed 	bl	8000f24 <main>

0800394a <LoopForever>:

LoopForever:
    b LoopForever
 800394a:	e7fe      	b.n	800394a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800394c:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8003950:	0800e950 	.word	0x0800e950
	ldr	r0, =_sdata
 8003954:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003958:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 800395c:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8003960:	20000865 	.word	0x20000865

08003964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003964:	e7fe      	b.n	8003964 <ADC1_2_IRQHandler>
	...

08003968 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800396c:	4b12      	ldr	r3, [pc, #72]	@ (80039b8 <HAL_Init+0x50>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a11      	ldr	r2, [pc, #68]	@ (80039b8 <HAL_Init+0x50>)
 8003972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003978:	2003      	movs	r0, #3
 800397a:	f000 f98c 	bl	8003c96 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800397e:	f002 fd9f 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <HAL_Init+0x54>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	490c      	ldr	r1, [pc, #48]	@ (80039c0 <HAL_Init+0x58>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
 8003994:	4a0b      	ldr	r2, [pc, #44]	@ (80039c4 <HAL_Init+0x5c>)
 8003996:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003998:	2004      	movs	r0, #4
 800399a:	f000 f9d1 	bl	8003d40 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800399e:	200f      	movs	r0, #15
 80039a0:	f000 f812 	bl	80039c8 <HAL_InitTick>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e002      	b.n	80039b4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039ae:	f7ff fb73 	bl	8003098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40022000 	.word	0x40022000
 80039bc:	46020c00 	.word	0x46020c00
 80039c0:	0800e808 	.word	0x0800e808
 80039c4:	2000000c 	.word	0x2000000c

080039c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80039d4:	4b33      	ldr	r3, [pc, #204]	@ (8003aa4 <HAL_InitTick+0xdc>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e05c      	b.n	8003a9a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80039e0:	4b31      	ldr	r3, [pc, #196]	@ (8003aa8 <HAL_InitTick+0xe0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d10c      	bne.n	8003a06 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80039ec:	4b2f      	ldr	r3, [pc, #188]	@ (8003aac <HAL_InitTick+0xe4>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa4 <HAL_InitTick+0xdc>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4619      	mov	r1, r3
 80039f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80039fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	e037      	b.n	8003a76 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8003a06:	f000 f9f3 	bl	8003df0 <HAL_SYSTICK_GetCLKSourceConfig>
 8003a0a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d023      	beq.n	8003a5a <HAL_InitTick+0x92>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d82d      	bhi.n	8003a74 <HAL_InitTick+0xac>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_InitTick+0x5e>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d00d      	beq.n	8003a40 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003a24:	e026      	b.n	8003a74 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003a26:	4b21      	ldr	r3, [pc, #132]	@ (8003aac <HAL_InitTick+0xe4>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa4 <HAL_InitTick+0xdc>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003a34:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3c:	60fb      	str	r3, [r7, #12]
        break;
 8003a3e:	e01a      	b.n	8003a76 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003a40:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <HAL_InitTick+0xdc>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a4e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	60fb      	str	r3, [r7, #12]
        break;
 8003a58:	e00d      	b.n	8003a76 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003a5a:	4b12      	ldr	r3, [pc, #72]	@ (8003aa4 <HAL_InitTick+0xdc>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	60fb      	str	r3, [r7, #12]
        break;
 8003a72:	e000      	b.n	8003a76 <HAL_InitTick+0xae>
        break;
 8003a74:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f940 	bl	8003cfc <HAL_SYSTICK_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e009      	b.n	8003a9a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a86:	2200      	movs	r2, #0
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8e:	f000 f90d 	bl	8003cac <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003a92:	4a07      	ldr	r2, [pc, #28]	@ (8003ab0 <HAL_InitTick+0xe8>)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000014 	.word	0x20000014
 8003aa8:	e000e010 	.word	0xe000e010
 8003aac:	2000000c 	.word	0x2000000c
 8003ab0:	20000010 	.word	0x20000010

08003ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ab8:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <HAL_IncTick+0x20>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <HAL_IncTick+0x24>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	4a04      	ldr	r2, [pc, #16]	@ (8003ad8 <HAL_IncTick+0x24>)
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000014 	.word	0x20000014
 8003ad8:	2000071c 	.word	0x2000071c

08003adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return uwTick;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	@ (8003af0 <HAL_GetTick+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	2000071c 	.word	0x2000071c

08003af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003afc:	f7ff ffee 	bl	8003adc <HAL_GetTick>
 8003b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d005      	beq.n	8003b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <HAL_Delay+0x44>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b1a:	bf00      	nop
 8003b1c:	f7ff ffde 	bl	8003adc <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d8f7      	bhi.n	8003b1c <HAL_Delay+0x28>
  {
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000014 	.word	0x20000014

08003b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <__NVIC_SetPriorityGrouping+0x44>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b58:	4013      	ands	r3, r2
 8003b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b6e:	4a04      	ldr	r2, [pc, #16]	@ (8003b80 <__NVIC_SetPriorityGrouping+0x44>)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	60d3      	str	r3, [r2, #12]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b88:	4b04      	ldr	r3, [pc, #16]	@ (8003b9c <__NVIC_GetPriorityGrouping+0x18>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	f003 0307 	and.w	r3, r3, #7
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	db0b      	blt.n	8003bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	f003 021f 	and.w	r2, r3, #31
 8003bb8:	4907      	ldr	r1, [pc, #28]	@ (8003bd8 <__NVIC_EnableIRQ+0x38>)
 8003bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000e100 	.word	0xe000e100

08003bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	6039      	str	r1, [r7, #0]
 8003be6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	db0a      	blt.n	8003c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	490c      	ldr	r1, [pc, #48]	@ (8003c28 <__NVIC_SetPriority+0x4c>)
 8003bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bfa:	0112      	lsls	r2, r2, #4
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	440b      	add	r3, r1
 8003c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c04:	e00a      	b.n	8003c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	4908      	ldr	r1, [pc, #32]	@ (8003c2c <__NVIC_SetPriority+0x50>)
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	3b04      	subs	r3, #4
 8003c14:	0112      	lsls	r2, r2, #4
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	440b      	add	r3, r1
 8003c1a:	761a      	strb	r2, [r3, #24]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000e100 	.word	0xe000e100
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b089      	sub	sp, #36	@ 0x24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f1c3 0307 	rsb	r3, r3, #7
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	bf28      	it	cs
 8003c4e:	2304      	movcs	r3, #4
 8003c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	3304      	adds	r3, #4
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d902      	bls.n	8003c60 <NVIC_EncodePriority+0x30>
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3b03      	subs	r3, #3
 8003c5e:	e000      	b.n	8003c62 <NVIC_EncodePriority+0x32>
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c64:	f04f 32ff 	mov.w	r2, #4294967295
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	401a      	ands	r2, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c78:	f04f 31ff 	mov.w	r1, #4294967295
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c82:	43d9      	mvns	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c88:	4313      	orrs	r3, r2
         );
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3724      	adds	r7, #36	@ 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff ff4c 	bl	8003b3c <__NVIC_SetPriorityGrouping>
}
 8003ca4:	bf00      	nop
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cba:	f7ff ff63 	bl	8003b84 <__NVIC_GetPriorityGrouping>
 8003cbe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	6978      	ldr	r0, [r7, #20]
 8003cc6:	f7ff ffb3 	bl	8003c30 <NVIC_EncodePriority>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff ff82 	bl	8003bdc <__NVIC_SetPriority>
}
 8003cd8:	bf00      	nop
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff ff56 	bl	8003ba0 <__NVIC_EnableIRQ>
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d0c:	d301      	bcc.n	8003d12 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e00d      	b.n	8003d2e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003d12:	4a0a      	ldr	r2, [pc, #40]	@ (8003d3c <HAL_SYSTICK_Config+0x40>)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003d1a:	4b08      	ldr	r3, [pc, #32]	@ (8003d3c <HAL_SYSTICK_Config+0x40>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003d20:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_SYSTICK_Config+0x40>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a05      	ldr	r2, [pc, #20]	@ (8003d3c <HAL_SYSTICK_Config+0x40>)
 8003d26:	f043 0303 	orr.w	r3, r3, #3
 8003d2a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	e000e010 	.word	0xe000e010

08003d40 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d844      	bhi.n	8003dd8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d77 	.word	0x08003d77
 8003d58:	08003d95 	.word	0x08003d95
 8003d5c:	08003db7 	.word	0x08003db7
 8003d60:	08003dd9 	.word	0x08003dd9
 8003d64:	08003d69 	.word	0x08003d69
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003d68:	4b1f      	ldr	r3, [pc, #124]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d6e:	f043 0304 	orr.w	r3, r3, #4
 8003d72:	6013      	str	r3, [r2, #0]
      break;
 8003d74:	e031      	b.n	8003dda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003d76:	4b1c      	ldr	r3, [pc, #112]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d7c:	f023 0304 	bic.w	r3, r3, #4
 8003d80:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003d82:	4b1a      	ldr	r3, [pc, #104]	@ (8003dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d88:	4a18      	ldr	r2, [pc, #96]	@ (8003dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003d8a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003d92:	e022      	b.n	8003dda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003d94:	4b14      	ldr	r3, [pc, #80]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a13      	ldr	r2, [pc, #76]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d9a:	f023 0304 	bic.w	r3, r3, #4
 8003d9e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003da0:	4b12      	ldr	r3, [pc, #72]	@ (8003dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003da6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003daa:	4a10      	ldr	r2, [pc, #64]	@ (8003dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003dac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003db4:	e011      	b.n	8003dda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003db6:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a0b      	ldr	r2, [pc, #44]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dc8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003dcc:	4a07      	ldr	r2, [pc, #28]	@ (8003dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003dce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003dd6:	e000      	b.n	8003dda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003dd8:	bf00      	nop
  }
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	e000e010 	.word	0xe000e010
 8003dec:	46020c00 	.word	0x46020c00

08003df0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003df6:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003e02:	2304      	movs	r3, #4
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	e021      	b.n	8003e4c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8003e08:	4b15      	ldr	r3, [pc, #84]	@ (8003e60 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8003e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e0e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003e12:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e1a:	d011      	beq.n	8003e40 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e22:	d810      	bhi.n	8003e46 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e30:	d003      	beq.n	8003e3a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003e32:	e008      	b.n	8003e46 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003e34:	2300      	movs	r3, #0
 8003e36:	607b      	str	r3, [r7, #4]
        break;
 8003e38:	e008      	b.n	8003e4c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	607b      	str	r3, [r7, #4]
        break;
 8003e3e:	e005      	b.n	8003e4c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003e40:	2302      	movs	r3, #2
 8003e42:	607b      	str	r3, [r7, #4]
        break;
 8003e44:	e002      	b.n	8003e4c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
        break;
 8003e4a:	bf00      	nop
    }
  }
  return systick_source;
 8003e4c:	687b      	ldr	r3, [r7, #4]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000e010 	.word	0xe000e010
 8003e60:	46020c00 	.word	0x46020c00

08003e64 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003e6c:	f7ff fe36 	bl	8003adc <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0db      	b.n	8004034 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a6e      	ldr	r2, [pc, #440]	@ (800403c <HAL_DMA_Init+0x1d8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	f000 809f 	beq.w	8003fc6 <HAL_DMA_Init+0x162>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a6c      	ldr	r2, [pc, #432]	@ (8004040 <HAL_DMA_Init+0x1dc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	f000 8099 	beq.w	8003fc6 <HAL_DMA_Init+0x162>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a6a      	ldr	r2, [pc, #424]	@ (8004044 <HAL_DMA_Init+0x1e0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	f000 8093 	beq.w	8003fc6 <HAL_DMA_Init+0x162>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a68      	ldr	r2, [pc, #416]	@ (8004048 <HAL_DMA_Init+0x1e4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	f000 808d 	beq.w	8003fc6 <HAL_DMA_Init+0x162>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a66      	ldr	r2, [pc, #408]	@ (800404c <HAL_DMA_Init+0x1e8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	f000 8087 	beq.w	8003fc6 <HAL_DMA_Init+0x162>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a64      	ldr	r2, [pc, #400]	@ (8004050 <HAL_DMA_Init+0x1ec>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	f000 8081 	beq.w	8003fc6 <HAL_DMA_Init+0x162>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a62      	ldr	r2, [pc, #392]	@ (8004054 <HAL_DMA_Init+0x1f0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d07b      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a61      	ldr	r2, [pc, #388]	@ (8004058 <HAL_DMA_Init+0x1f4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d076      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a5f      	ldr	r2, [pc, #380]	@ (800405c <HAL_DMA_Init+0x1f8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d071      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8004060 <HAL_DMA_Init+0x1fc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d06c      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a5c      	ldr	r2, [pc, #368]	@ (8004064 <HAL_DMA_Init+0x200>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d067      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a5b      	ldr	r2, [pc, #364]	@ (8004068 <HAL_DMA_Init+0x204>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d062      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a59      	ldr	r2, [pc, #356]	@ (800406c <HAL_DMA_Init+0x208>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d05d      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a58      	ldr	r2, [pc, #352]	@ (8004070 <HAL_DMA_Init+0x20c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d058      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a56      	ldr	r2, [pc, #344]	@ (8004074 <HAL_DMA_Init+0x210>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d053      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a55      	ldr	r2, [pc, #340]	@ (8004078 <HAL_DMA_Init+0x214>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d04e      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a53      	ldr	r2, [pc, #332]	@ (800407c <HAL_DMA_Init+0x218>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d049      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a52      	ldr	r2, [pc, #328]	@ (8004080 <HAL_DMA_Init+0x21c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d044      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a50      	ldr	r2, [pc, #320]	@ (8004084 <HAL_DMA_Init+0x220>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d03f      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a4f      	ldr	r2, [pc, #316]	@ (8004088 <HAL_DMA_Init+0x224>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d03a      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a4d      	ldr	r2, [pc, #308]	@ (800408c <HAL_DMA_Init+0x228>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d035      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a4c      	ldr	r2, [pc, #304]	@ (8004090 <HAL_DMA_Init+0x22c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d030      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a4a      	ldr	r2, [pc, #296]	@ (8004094 <HAL_DMA_Init+0x230>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d02b      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a49      	ldr	r2, [pc, #292]	@ (8004098 <HAL_DMA_Init+0x234>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d026      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a47      	ldr	r2, [pc, #284]	@ (800409c <HAL_DMA_Init+0x238>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d021      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a46      	ldr	r2, [pc, #280]	@ (80040a0 <HAL_DMA_Init+0x23c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d01c      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a44      	ldr	r2, [pc, #272]	@ (80040a4 <HAL_DMA_Init+0x240>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d017      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a43      	ldr	r2, [pc, #268]	@ (80040a8 <HAL_DMA_Init+0x244>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d012      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a41      	ldr	r2, [pc, #260]	@ (80040ac <HAL_DMA_Init+0x248>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00d      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a40      	ldr	r2, [pc, #256]	@ (80040b0 <HAL_DMA_Init+0x24c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d008      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80040b4 <HAL_DMA_Init+0x250>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d003      	beq.n	8003fc6 <HAL_DMA_Init+0x162>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a3d      	ldr	r2, [pc, #244]	@ (80040b8 <HAL_DMA_Init+0x254>)
 8003fc4:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0206 	orr.w	r2, r2, #6
 8003fe4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003fe6:	e00f      	b.n	8004008 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003fe8:	f7ff fd78 	bl	8003adc <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d908      	bls.n	8004008 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2203      	movs	r2, #3
 8004000:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e015      	b.n	8004034 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e8      	bne.n	8003fe8 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fb24 	bl	8004664 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40020050 	.word	0x40020050
 8004040:	50020050 	.word	0x50020050
 8004044:	400200d0 	.word	0x400200d0
 8004048:	500200d0 	.word	0x500200d0
 800404c:	40020150 	.word	0x40020150
 8004050:	50020150 	.word	0x50020150
 8004054:	400201d0 	.word	0x400201d0
 8004058:	500201d0 	.word	0x500201d0
 800405c:	40020250 	.word	0x40020250
 8004060:	50020250 	.word	0x50020250
 8004064:	400202d0 	.word	0x400202d0
 8004068:	500202d0 	.word	0x500202d0
 800406c:	40020350 	.word	0x40020350
 8004070:	50020350 	.word	0x50020350
 8004074:	400203d0 	.word	0x400203d0
 8004078:	500203d0 	.word	0x500203d0
 800407c:	40020450 	.word	0x40020450
 8004080:	50020450 	.word	0x50020450
 8004084:	400204d0 	.word	0x400204d0
 8004088:	500204d0 	.word	0x500204d0
 800408c:	40020550 	.word	0x40020550
 8004090:	50020550 	.word	0x50020550
 8004094:	400205d0 	.word	0x400205d0
 8004098:	500205d0 	.word	0x500205d0
 800409c:	40020650 	.word	0x40020650
 80040a0:	50020650 	.word	0x50020650
 80040a4:	400206d0 	.word	0x400206d0
 80040a8:	500206d0 	.word	0x500206d0
 80040ac:	40020750 	.word	0x40020750
 80040b0:	50020750 	.word	0x50020750
 80040b4:	400207d0 	.word	0x400207d0
 80040b8:	500207d0 	.word	0x500207d0

080040bc <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e04f      	b.n	8004174 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_DMA_Start_IT+0x26>
 80040de:	2302      	movs	r3, #2
 80040e0:	e048      	b.n	8004174 <HAL_DMA_Start_IT+0xb8>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d136      	bne.n	8004164 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2202      	movs	r2, #2
 80040fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fa84 	bl	8004618 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800411e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004136:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800414e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	e007      	b.n	8004174 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2240      	movs	r2, #64	@ 0x40
 8004168:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004184:	f7ff fcaa 	bl	8003adc <HAL_GetTick>
 8004188:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e06b      	b.n	800426c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d008      	beq.n	80041b2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e05c      	b.n	800426c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0204 	orr.w	r2, r2, #4
 80041c0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2205      	movs	r2, #5
 80041c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80041ca:	e020      	b.n	800420e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80041cc:	f7ff fc86 	bl	8003adc <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b05      	cmp	r3, #5
 80041d8:	d919      	bls.n	800420e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041de:	f043 0210 	orr.w	r2, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2203      	movs	r2, #3
 80041ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041fe:	2201      	movs	r2, #1
 8004200:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e02e      	b.n	800426c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0d7      	beq.n	80041cc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0202 	orr.w	r2, r2, #2
 800422a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2204      	movs	r2, #4
 8004230:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800423c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800424a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004256:	2201      	movs	r2, #1
 8004258:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2200      	movs	r2, #0
 8004260:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e019      	b.n	80042ba <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d004      	beq.n	800429c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e00e      	b.n	80042ba <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2204      	movs	r2, #4
 80042a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80042b2:	f043 0304 	orr.w	r3, r3, #4
 80042b6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b086      	sub	sp, #24
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80042d6:	f023 030f 	bic.w	r3, r3, #15
 80042da:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e4:	3b50      	subs	r3, #80	@ 0x50
 80042e6:	09db      	lsrs	r3, r3, #7
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2201      	movs	r2, #1
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4013      	ands	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 813b 	beq.w	800457c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004310:	2b00      	cmp	r3, #0
 8004312:	d011      	beq.n	8004338 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800432a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004330:	f043 0201 	orr.w	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004342:	2b00      	cmp	r3, #0
 8004344:	d011      	beq.n	800436a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800435c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004362:	f043 0202 	orr.w	r2, r3, #2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d011      	beq.n	800439c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800438e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004394:	f043 0204 	orr.w	r2, r3, #4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d011      	beq.n	80043ce <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80043c0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c6:	f043 0208 	orr.w	r2, r3, #8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d013      	beq.n	8004404 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00c      	beq.n	8004404 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043f2:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d04c      	beq.n	80044ac <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d045      	beq.n	80044ac <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004428:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b04      	cmp	r3, #4
 8004434:	d12e      	bne.n	8004494 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004444:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695a      	ldr	r2, [r3, #20]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0202 	orr.w	r2, r2, #2
 8004454:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	2b00      	cmp	r3, #0
 8004468:	d007      	beq.n	800447a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446e:	2201      	movs	r2, #1
 8004470:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2200      	movs	r2, #0
 8004478:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d07a      	beq.n	8004580 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
        }

        return;
 8004492:	e075      	b.n	8004580 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2205      	movs	r2, #5
 8004498:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d039      	beq.n	800452e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d032      	beq.n	800452e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d012      	beq.n	80044fa <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d116      	bne.n	800450c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d111      	bne.n	800450c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f4:	2201      	movs	r2, #1
 80044f6:	731a      	strb	r2, [r3, #12]
 80044f8:	e008      	b.n	800450c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004500:	2b00      	cmp	r3, #0
 8004502:	d103      	bne.n	800450c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004514:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004532:	2b00      	cmp	r3, #0
 8004534:	d025      	beq.n	8004582 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0202 	orr.w	r2, r2, #2
 8004544:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800455e:	2201      	movs	r2, #1
 8004560:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
 800457a:	e002      	b.n	8004582 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8004580:	bf00      	nop
    }
  }
}
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e02b      	b.n	800460c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80045bc:	f023 030f 	bic.w	r3, r3, #15
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ca:	3b50      	subs	r3, #80	@ 0x50
 80045cc:	09db      	lsrs	r3, r3, #7
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2201      	movs	r2, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d012      	beq.n	800460a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	f003 0311 	and.w	r3, r3, #17
 80045ea:	2b11      	cmp	r3, #17
 80045ec:	d106      	bne.n	80045fc <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	e006      	b.n	800460a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	43db      	mvns	r3, r3
 8004604:	401a      	ands	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	b291      	uxth	r1, r2
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	430b      	orrs	r3, r1
 800463a:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004644:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	430a      	orrs	r2, r1
 8004684:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a53      	ldr	r2, [pc, #332]	@ (80047f0 <DMA_Init+0x18c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	f000 80a0 	beq.w	80047ea <DMA_Init+0x186>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a51      	ldr	r2, [pc, #324]	@ (80047f4 <DMA_Init+0x190>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	f000 809a 	beq.w	80047ea <DMA_Init+0x186>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a4f      	ldr	r2, [pc, #316]	@ (80047f8 <DMA_Init+0x194>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	f000 8094 	beq.w	80047ea <DMA_Init+0x186>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a4d      	ldr	r2, [pc, #308]	@ (80047fc <DMA_Init+0x198>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	f000 808e 	beq.w	80047ea <DMA_Init+0x186>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a4b      	ldr	r2, [pc, #300]	@ (8004800 <DMA_Init+0x19c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	f000 8088 	beq.w	80047ea <DMA_Init+0x186>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a49      	ldr	r2, [pc, #292]	@ (8004804 <DMA_Init+0x1a0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	f000 8082 	beq.w	80047ea <DMA_Init+0x186>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a47      	ldr	r2, [pc, #284]	@ (8004808 <DMA_Init+0x1a4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d07c      	beq.n	80047ea <DMA_Init+0x186>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a45      	ldr	r2, [pc, #276]	@ (800480c <DMA_Init+0x1a8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d077      	beq.n	80047ea <DMA_Init+0x186>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a44      	ldr	r2, [pc, #272]	@ (8004810 <DMA_Init+0x1ac>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d072      	beq.n	80047ea <DMA_Init+0x186>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a42      	ldr	r2, [pc, #264]	@ (8004814 <DMA_Init+0x1b0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d06d      	beq.n	80047ea <DMA_Init+0x186>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a41      	ldr	r2, [pc, #260]	@ (8004818 <DMA_Init+0x1b4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d068      	beq.n	80047ea <DMA_Init+0x186>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a3f      	ldr	r2, [pc, #252]	@ (800481c <DMA_Init+0x1b8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d063      	beq.n	80047ea <DMA_Init+0x186>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a3e      	ldr	r2, [pc, #248]	@ (8004820 <DMA_Init+0x1bc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d05e      	beq.n	80047ea <DMA_Init+0x186>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3c      	ldr	r2, [pc, #240]	@ (8004824 <DMA_Init+0x1c0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d059      	beq.n	80047ea <DMA_Init+0x186>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3b      	ldr	r2, [pc, #236]	@ (8004828 <DMA_Init+0x1c4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d054      	beq.n	80047ea <DMA_Init+0x186>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a39      	ldr	r2, [pc, #228]	@ (800482c <DMA_Init+0x1c8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d04f      	beq.n	80047ea <DMA_Init+0x186>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a38      	ldr	r2, [pc, #224]	@ (8004830 <DMA_Init+0x1cc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d04a      	beq.n	80047ea <DMA_Init+0x186>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a36      	ldr	r2, [pc, #216]	@ (8004834 <DMA_Init+0x1d0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d045      	beq.n	80047ea <DMA_Init+0x186>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a35      	ldr	r2, [pc, #212]	@ (8004838 <DMA_Init+0x1d4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d040      	beq.n	80047ea <DMA_Init+0x186>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a33      	ldr	r2, [pc, #204]	@ (800483c <DMA_Init+0x1d8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d03b      	beq.n	80047ea <DMA_Init+0x186>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a32      	ldr	r2, [pc, #200]	@ (8004840 <DMA_Init+0x1dc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d036      	beq.n	80047ea <DMA_Init+0x186>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a30      	ldr	r2, [pc, #192]	@ (8004844 <DMA_Init+0x1e0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d031      	beq.n	80047ea <DMA_Init+0x186>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a2f      	ldr	r2, [pc, #188]	@ (8004848 <DMA_Init+0x1e4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d02c      	beq.n	80047ea <DMA_Init+0x186>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2d      	ldr	r2, [pc, #180]	@ (800484c <DMA_Init+0x1e8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d027      	beq.n	80047ea <DMA_Init+0x186>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2c      	ldr	r2, [pc, #176]	@ (8004850 <DMA_Init+0x1ec>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d022      	beq.n	80047ea <DMA_Init+0x186>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004854 <DMA_Init+0x1f0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d01d      	beq.n	80047ea <DMA_Init+0x186>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a29      	ldr	r2, [pc, #164]	@ (8004858 <DMA_Init+0x1f4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d018      	beq.n	80047ea <DMA_Init+0x186>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a27      	ldr	r2, [pc, #156]	@ (800485c <DMA_Init+0x1f8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <DMA_Init+0x186>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a26      	ldr	r2, [pc, #152]	@ (8004860 <DMA_Init+0x1fc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00e      	beq.n	80047ea <DMA_Init+0x186>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a24      	ldr	r2, [pc, #144]	@ (8004864 <DMA_Init+0x200>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d009      	beq.n	80047ea <DMA_Init+0x186>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a23      	ldr	r2, [pc, #140]	@ (8004868 <DMA_Init+0x204>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <DMA_Init+0x186>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a21      	ldr	r2, [pc, #132]	@ (800486c <DMA_Init+0x208>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d142      	bne.n	8004870 <DMA_Init+0x20c>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e041      	b.n	8004872 <DMA_Init+0x20e>
 80047ee:	bf00      	nop
 80047f0:	40020050 	.word	0x40020050
 80047f4:	50020050 	.word	0x50020050
 80047f8:	400200d0 	.word	0x400200d0
 80047fc:	500200d0 	.word	0x500200d0
 8004800:	40020150 	.word	0x40020150
 8004804:	50020150 	.word	0x50020150
 8004808:	400201d0 	.word	0x400201d0
 800480c:	500201d0 	.word	0x500201d0
 8004810:	40020250 	.word	0x40020250
 8004814:	50020250 	.word	0x50020250
 8004818:	400202d0 	.word	0x400202d0
 800481c:	500202d0 	.word	0x500202d0
 8004820:	40020350 	.word	0x40020350
 8004824:	50020350 	.word	0x50020350
 8004828:	400203d0 	.word	0x400203d0
 800482c:	500203d0 	.word	0x500203d0
 8004830:	40020450 	.word	0x40020450
 8004834:	50020450 	.word	0x50020450
 8004838:	400204d0 	.word	0x400204d0
 800483c:	500204d0 	.word	0x500204d0
 8004840:	40020550 	.word	0x40020550
 8004844:	50020550 	.word	0x50020550
 8004848:	400205d0 	.word	0x400205d0
 800484c:	500205d0 	.word	0x500205d0
 8004850:	40020650 	.word	0x40020650
 8004854:	50020650 	.word	0x50020650
 8004858:	400206d0 	.word	0x400206d0
 800485c:	500206d0 	.word	0x500206d0
 8004860:	40020750 	.word	0x40020750
 8004864:	50020750 	.word	0x50020750
 8004868:	400207d0 	.word	0x400207d0
 800486c:	500207d0 	.word	0x500207d0
 8004870:	2300      	movs	r3, #0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d012      	beq.n	800489c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	3b01      	subs	r3, #1
 8004880:	051b      	lsls	r3, r3, #20
 8004882:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004886:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	3b01      	subs	r3, #1
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004894:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ce:	f040 80b0 	bne.w	8004a32 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a82      	ldr	r2, [pc, #520]	@ (8004ae0 <DMA_Init+0x47c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	f000 80a0 	beq.w	8004a1e <DMA_Init+0x3ba>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a80      	ldr	r2, [pc, #512]	@ (8004ae4 <DMA_Init+0x480>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	f000 809a 	beq.w	8004a1e <DMA_Init+0x3ba>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a7e      	ldr	r2, [pc, #504]	@ (8004ae8 <DMA_Init+0x484>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	f000 8094 	beq.w	8004a1e <DMA_Init+0x3ba>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a7c      	ldr	r2, [pc, #496]	@ (8004aec <DMA_Init+0x488>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	f000 808e 	beq.w	8004a1e <DMA_Init+0x3ba>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a7a      	ldr	r2, [pc, #488]	@ (8004af0 <DMA_Init+0x48c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	f000 8088 	beq.w	8004a1e <DMA_Init+0x3ba>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a78      	ldr	r2, [pc, #480]	@ (8004af4 <DMA_Init+0x490>)
 8004914:	4293      	cmp	r3, r2
 8004916:	f000 8082 	beq.w	8004a1e <DMA_Init+0x3ba>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a76      	ldr	r2, [pc, #472]	@ (8004af8 <DMA_Init+0x494>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d07c      	beq.n	8004a1e <DMA_Init+0x3ba>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a74      	ldr	r2, [pc, #464]	@ (8004afc <DMA_Init+0x498>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d077      	beq.n	8004a1e <DMA_Init+0x3ba>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a73      	ldr	r2, [pc, #460]	@ (8004b00 <DMA_Init+0x49c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d072      	beq.n	8004a1e <DMA_Init+0x3ba>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a71      	ldr	r2, [pc, #452]	@ (8004b04 <DMA_Init+0x4a0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d06d      	beq.n	8004a1e <DMA_Init+0x3ba>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a70      	ldr	r2, [pc, #448]	@ (8004b08 <DMA_Init+0x4a4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d068      	beq.n	8004a1e <DMA_Init+0x3ba>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a6e      	ldr	r2, [pc, #440]	@ (8004b0c <DMA_Init+0x4a8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d063      	beq.n	8004a1e <DMA_Init+0x3ba>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6d      	ldr	r2, [pc, #436]	@ (8004b10 <DMA_Init+0x4ac>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d05e      	beq.n	8004a1e <DMA_Init+0x3ba>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6b      	ldr	r2, [pc, #428]	@ (8004b14 <DMA_Init+0x4b0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d059      	beq.n	8004a1e <DMA_Init+0x3ba>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a6a      	ldr	r2, [pc, #424]	@ (8004b18 <DMA_Init+0x4b4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d054      	beq.n	8004a1e <DMA_Init+0x3ba>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a68      	ldr	r2, [pc, #416]	@ (8004b1c <DMA_Init+0x4b8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d04f      	beq.n	8004a1e <DMA_Init+0x3ba>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a67      	ldr	r2, [pc, #412]	@ (8004b20 <DMA_Init+0x4bc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d04a      	beq.n	8004a1e <DMA_Init+0x3ba>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a65      	ldr	r2, [pc, #404]	@ (8004b24 <DMA_Init+0x4c0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d045      	beq.n	8004a1e <DMA_Init+0x3ba>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a64      	ldr	r2, [pc, #400]	@ (8004b28 <DMA_Init+0x4c4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d040      	beq.n	8004a1e <DMA_Init+0x3ba>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a62      	ldr	r2, [pc, #392]	@ (8004b2c <DMA_Init+0x4c8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d03b      	beq.n	8004a1e <DMA_Init+0x3ba>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a61      	ldr	r2, [pc, #388]	@ (8004b30 <DMA_Init+0x4cc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d036      	beq.n	8004a1e <DMA_Init+0x3ba>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a5f      	ldr	r2, [pc, #380]	@ (8004b34 <DMA_Init+0x4d0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d031      	beq.n	8004a1e <DMA_Init+0x3ba>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a5e      	ldr	r2, [pc, #376]	@ (8004b38 <DMA_Init+0x4d4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d02c      	beq.n	8004a1e <DMA_Init+0x3ba>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a5c      	ldr	r2, [pc, #368]	@ (8004b3c <DMA_Init+0x4d8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d027      	beq.n	8004a1e <DMA_Init+0x3ba>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004b40 <DMA_Init+0x4dc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d022      	beq.n	8004a1e <DMA_Init+0x3ba>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a59      	ldr	r2, [pc, #356]	@ (8004b44 <DMA_Init+0x4e0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d01d      	beq.n	8004a1e <DMA_Init+0x3ba>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a58      	ldr	r2, [pc, #352]	@ (8004b48 <DMA_Init+0x4e4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d018      	beq.n	8004a1e <DMA_Init+0x3ba>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a56      	ldr	r2, [pc, #344]	@ (8004b4c <DMA_Init+0x4e8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <DMA_Init+0x3ba>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a55      	ldr	r2, [pc, #340]	@ (8004b50 <DMA_Init+0x4ec>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00e      	beq.n	8004a1e <DMA_Init+0x3ba>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a53      	ldr	r2, [pc, #332]	@ (8004b54 <DMA_Init+0x4f0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d009      	beq.n	8004a1e <DMA_Init+0x3ba>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a52      	ldr	r2, [pc, #328]	@ (8004b58 <DMA_Init+0x4f4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d004      	beq.n	8004a1e <DMA_Init+0x3ba>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a50      	ldr	r2, [pc, #320]	@ (8004b5c <DMA_Init+0x4f8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d101      	bne.n	8004a22 <DMA_Init+0x3be>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <DMA_Init+0x3c0>
 8004a22:	2300      	movs	r3, #0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00d      	beq.n	8004a44 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	e008      	b.n	8004a44 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a3a:	d103      	bne.n	8004a44 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a42:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a4a:	4b45      	ldr	r3, [pc, #276]	@ (8004b60 <DMA_Init+0x4fc>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a36      	ldr	r2, [pc, #216]	@ (8004b40 <DMA_Init+0x4dc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d022      	beq.n	8004ab0 <DMA_Init+0x44c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a35      	ldr	r2, [pc, #212]	@ (8004b44 <DMA_Init+0x4e0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d01d      	beq.n	8004ab0 <DMA_Init+0x44c>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a33      	ldr	r2, [pc, #204]	@ (8004b48 <DMA_Init+0x4e4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d018      	beq.n	8004ab0 <DMA_Init+0x44c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a32      	ldr	r2, [pc, #200]	@ (8004b4c <DMA_Init+0x4e8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <DMA_Init+0x44c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a30      	ldr	r2, [pc, #192]	@ (8004b50 <DMA_Init+0x4ec>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <DMA_Init+0x44c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a2f      	ldr	r2, [pc, #188]	@ (8004b54 <DMA_Init+0x4f0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <DMA_Init+0x44c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b58 <DMA_Init+0x4f4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <DMA_Init+0x44c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8004b5c <DMA_Init+0x4f8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d101      	bne.n	8004ab4 <DMA_Init+0x450>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <DMA_Init+0x452>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40020050 	.word	0x40020050
 8004ae4:	50020050 	.word	0x50020050
 8004ae8:	400200d0 	.word	0x400200d0
 8004aec:	500200d0 	.word	0x500200d0
 8004af0:	40020150 	.word	0x40020150
 8004af4:	50020150 	.word	0x50020150
 8004af8:	400201d0 	.word	0x400201d0
 8004afc:	500201d0 	.word	0x500201d0
 8004b00:	40020250 	.word	0x40020250
 8004b04:	50020250 	.word	0x50020250
 8004b08:	400202d0 	.word	0x400202d0
 8004b0c:	500202d0 	.word	0x500202d0
 8004b10:	40020350 	.word	0x40020350
 8004b14:	50020350 	.word	0x50020350
 8004b18:	400203d0 	.word	0x400203d0
 8004b1c:	500203d0 	.word	0x500203d0
 8004b20:	40020450 	.word	0x40020450
 8004b24:	50020450 	.word	0x50020450
 8004b28:	400204d0 	.word	0x400204d0
 8004b2c:	500204d0 	.word	0x500204d0
 8004b30:	40020550 	.word	0x40020550
 8004b34:	50020550 	.word	0x50020550
 8004b38:	400205d0 	.word	0x400205d0
 8004b3c:	500205d0 	.word	0x500205d0
 8004b40:	40020650 	.word	0x40020650
 8004b44:	50020650 	.word	0x50020650
 8004b48:	400206d0 	.word	0x400206d0
 8004b4c:	500206d0 	.word	0x500206d0
 8004b50:	40020750 	.word	0x40020750
 8004b54:	50020750 	.word	0x50020750
 8004b58:	400207d0 	.word	0x400207d0
 8004b5c:	500207d0 	.word	0x500207d0
 8004b60:	3cc03180 	.word	0x3cc03180

08004b64 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_DMAEx_List_Start_IT+0x16>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e082      	b.n	8004c84 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004b84:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b90:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d005      	beq.n	8004ba4 <HAL_DMAEx_List_Start_IT+0x40>
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d16a      	bne.n	8004c74 <HAL_DMAEx_List_Start_IT+0x110>
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d067      	beq.n	8004c74 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d157      	bne.n	8004c60 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_DMAEx_List_Start_IT+0x5a>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e062      	b.n	8004c84 <HAL_DMAEx_List_Start_IT+0x120>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be0:	2200      	movs	r2, #0
 8004be2:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004bf2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c0a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c22:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f107 010c 	add.w	r1, r7, #12
 8004c2e:	2200      	movs	r2, #0
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 f82b 	bl	8004c8c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	0c0b      	lsrs	r3, r1, #16
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004c54:	4013      	ands	r3, r2
 8004c56:	68f9      	ldr	r1, [r7, #12]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e007      	b.n	8004c84 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2240      	movs	r2, #64	@ 0x40
 8004c78:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00c      	beq.n	8004cbe <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4a0d      	ldr	r2, [pc, #52]	@ (8004ce4 <DMA_List_GetCLLRNodeInfo+0x58>)
 8004cae:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00f      	beq.n	8004cd6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2207      	movs	r2, #7
 8004cba:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004cbc:	e00b      	b.n	8004cd6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a08      	ldr	r2, [pc, #32]	@ (8004ce8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004cc8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2205      	movs	r2, #5
 8004cd4:	601a      	str	r2, [r3, #0]
}
 8004cd6:	bf00      	nop
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	fe010000 	.word	0xfe010000
 8004ce8:	f8010000 	.word	0xf8010000

08004cec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b089      	sub	sp, #36	@ 0x24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004cfe:	e1ba      	b.n	8005076 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	2101      	movs	r1, #1
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 81aa 	beq.w	8005070 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a55      	ldr	r2, [pc, #340]	@ (8004e74 <HAL_GPIO_Init+0x188>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d15d      	bne.n	8004de0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43db      	mvns	r3, r3
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	4013      	ands	r3, r2
 8004d38:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 0201 	and.w	r2, r3, #1
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004d54:	4a48      	ldr	r2, [pc, #288]	@ (8004e78 <HAL_GPIO_Init+0x18c>)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d5c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004d5e:	4a46      	ldr	r2, [pc, #280]	@ (8004e78 <HAL_GPIO_Init+0x18c>)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	08da      	lsrs	r2, r3, #3
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	3208      	adds	r2, #8
 8004d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d76:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	220f      	movs	r2, #15
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	220b      	movs	r2, #11
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	08da      	lsrs	r2, r3, #3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	3208      	adds	r2, #8
 8004daa:	69f9      	ldr	r1, [r7, #28]
 8004dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	2203      	movs	r2, #3
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	2202      	movs	r2, #2
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e067      	b.n	8004eb0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d003      	beq.n	8004df0 <HAL_GPIO_Init+0x104>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b12      	cmp	r3, #18
 8004dee:	d145      	bne.n	8004e7c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	08da      	lsrs	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3208      	adds	r2, #8
 8004df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	220f      	movs	r2, #15
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f003 020f 	and.w	r2, r3, #15
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	08da      	lsrs	r2, r3, #3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3208      	adds	r2, #8
 8004e36:	69f9      	ldr	r1, [r7, #28]
 8004e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	2203      	movs	r2, #3
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 0203 	and.w	r2, r3, #3
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e01e      	b.n	8004eb0 <HAL_GPIO_Init+0x1c4>
 8004e72:	bf00      	nop
 8004e74:	46020000 	.word	0x46020000
 8004e78:	0800e860 	.word	0x0800e860
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	2203      	movs	r2, #3
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	69fa      	ldr	r2, [r7, #28]
 8004e90:	4013      	ands	r3, r2
 8004e92:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 0203 	and.w	r2, r3, #3
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d00b      	beq.n	8004ed0 <HAL_GPIO_Init+0x1e4>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d007      	beq.n	8004ed0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ec4:	2b11      	cmp	r3, #17
 8004ec6:	d003      	beq.n	8004ed0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b12      	cmp	r3, #18
 8004ece:	d130      	bne.n	8004f32 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	2203      	movs	r2, #3
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004f06:	2201      	movs	r2, #1
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	4013      	ands	r3, r2
 8004f14:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	f003 0201 	and.w	r2, r3, #1
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d017      	beq.n	8004f6a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	2203      	movs	r2, #3
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d07c      	beq.n	8005070 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004f76:	4a47      	ldr	r2, [pc, #284]	@ (8005094 <HAL_GPIO_Init+0x3a8>)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	3318      	adds	r3, #24
 8004f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f82:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	220f      	movs	r2, #15
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	4013      	ands	r3, r2
 8004f98:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	0a9a      	lsrs	r2, r3, #10
 8004f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005098 <HAL_GPIO_Init+0x3ac>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	f002 0203 	and.w	r2, r2, #3
 8004fa8:	00d2      	lsls	r2, r2, #3
 8004faa:	4093      	lsls	r3, r2
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004fb2:	4938      	ldr	r1, [pc, #224]	@ (8005094 <HAL_GPIO_Init+0x3a8>)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	089b      	lsrs	r3, r3, #2
 8004fb8:	3318      	adds	r3, #24
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004fc0:	4b34      	ldr	r3, [pc, #208]	@ (8005094 <HAL_GPIO_Init+0x3a8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8005094 <HAL_GPIO_Init+0x3a8>)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004fea:	4b2a      	ldr	r3, [pc, #168]	@ (8005094 <HAL_GPIO_Init+0x3a8>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800500e:	4a21      	ldr	r2, [pc, #132]	@ (8005094 <HAL_GPIO_Init+0x3a8>)
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005014:	4b1f      	ldr	r3, [pc, #124]	@ (8005094 <HAL_GPIO_Init+0x3a8>)
 8005016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800501a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	43db      	mvns	r3, r3
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	4013      	ands	r3, r2
 8005024:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800503a:	4a16      	ldr	r2, [pc, #88]	@ (8005094 <HAL_GPIO_Init+0x3a8>)
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005042:	4b14      	ldr	r3, [pc, #80]	@ (8005094 <HAL_GPIO_Init+0x3a8>)
 8005044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005048:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	43db      	mvns	r3, r3
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	4013      	ands	r3, r2
 8005052:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005068:	4a0a      	ldr	r2, [pc, #40]	@ (8005094 <HAL_GPIO_Init+0x3a8>)
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	3301      	adds	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	f47f ae3d 	bne.w	8004d00 <HAL_GPIO_Init+0x14>
  }
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	3724      	adds	r7, #36	@ 0x24
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	46022000 	.word	0x46022000
 8005098:	002f7f7f 	.word	0x002f7f7f

0800509c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	807b      	strh	r3, [r7, #2]
 80050a8:	4613      	mov	r3, r2
 80050aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050ac:	787b      	ldrb	r3, [r7, #1]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050b2:	887a      	ldrh	r2, [r7, #2]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80050b8:	e002      	b.n	80050c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80050ba:	887a      	ldrh	r2, [r7, #2]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80050d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005108 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
 80050e8:	e007      	b.n	80050fa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80050ea:	4b07      	ldr	r3, [pc, #28]	@ (8005108 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f023 0204 	bic.w	r2, r3, #4
 80050f2:	4905      	ldr	r1, [pc, #20]	@ (8005108 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	40030400 	.word	0x40030400

0800510c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005110:	4b05      	ldr	r3, [pc, #20]	@ (8005128 <HAL_ICACHE_Enable+0x1c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a04      	ldr	r2, [pc, #16]	@ (8005128 <HAL_ICACHE_Enable+0x1c>)
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40030400 	.word	0x40030400

0800512c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005134:	4b39      	ldr	r3, [pc, #228]	@ (800521c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005138:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800513c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	429a      	cmp	r2, r3
 8005144:	d10b      	bne.n	800515e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800514c:	d905      	bls.n	800515a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800514e:	4b33      	ldr	r3, [pc, #204]	@ (800521c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	4a32      	ldr	r2, [pc, #200]	@ (800521c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005158:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	e057      	b.n	800520e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005164:	d90a      	bls.n	800517c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005166:	4b2d      	ldr	r3, [pc, #180]	@ (800521c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4313      	orrs	r3, r2
 8005172:	4a2a      	ldr	r2, [pc, #168]	@ (800521c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005178:	60d3      	str	r3, [r2, #12]
 800517a:	e007      	b.n	800518c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800517c:	4b27      	ldr	r3, [pc, #156]	@ (800521c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005184:	4925      	ldr	r1, [pc, #148]	@ (800521c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4313      	orrs	r3, r2
 800518a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800518c:	4b24      	ldr	r3, [pc, #144]	@ (8005220 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a24      	ldr	r2, [pc, #144]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	099b      	lsrs	r3, r3, #6
 8005198:	2232      	movs	r2, #50	@ 0x32
 800519a:	fb02 f303 	mul.w	r3, r2, r3
 800519e:	4a21      	ldr	r2, [pc, #132]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
 80051a4:	099b      	lsrs	r3, r3, #6
 80051a6:	3301      	adds	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80051aa:	e002      	b.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80051b2:	4b1a      	ldr	r3, [pc, #104]	@ (800521c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f3      	bne.n	80051ac <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01b      	beq.n	8005202 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80051ca:	4b15      	ldr	r3, [pc, #84]	@ (8005220 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a15      	ldr	r2, [pc, #84]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	099b      	lsrs	r3, r3, #6
 80051d6:	2232      	movs	r2, #50	@ 0x32
 80051d8:	fb02 f303 	mul.w	r3, r2, r3
 80051dc:	4a11      	ldr	r2, [pc, #68]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	099b      	lsrs	r3, r3, #6
 80051e4:	3301      	adds	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80051e8:	e002      	b.n	80051f0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80051f0:	4b0a      	ldr	r3, [pc, #40]	@ (800521c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80051f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f3      	bne.n	80051ea <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e000      	b.n	800520e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	46020800 	.word	0x46020800
 8005220:	2000000c 	.word	0x2000000c
 8005224:	10624dd3 	.word	0x10624dd3

08005228 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800522c:	4b04      	ldr	r3, [pc, #16]	@ (8005240 <HAL_PWREx_GetVoltageRange+0x18>)
 800522e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005230:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005234:	4618      	mov	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	46020800 	.word	0x46020800

08005244 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800524c:	4b22      	ldr	r3, [pc, #136]	@ (80052d8 <HAL_PWREx_ConfigSupply+0x94>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a22      	ldr	r2, [pc, #136]	@ (80052dc <HAL_PWREx_ConfigSupply+0x98>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	099b      	lsrs	r3, r3, #6
 8005258:	2232      	movs	r2, #50	@ 0x32
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	4a1f      	ldr	r2, [pc, #124]	@ (80052dc <HAL_PWREx_ConfigSupply+0x98>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	099b      	lsrs	r3, r3, #6
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d113      	bne.n	8005298 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005270:	4b1b      	ldr	r3, [pc, #108]	@ (80052e0 <HAL_PWREx_ConfigSupply+0x9c>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	4a1a      	ldr	r2, [pc, #104]	@ (80052e0 <HAL_PWREx_ConfigSupply+0x9c>)
 8005276:	f023 0302 	bic.w	r3, r3, #2
 800527a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800527c:	e002      	b.n	8005284 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3b01      	subs	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005284:	4b16      	ldr	r3, [pc, #88]	@ (80052e0 <HAL_PWREx_ConfigSupply+0x9c>)
 8005286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b02      	cmp	r3, #2
 800528e:	d116      	bne.n	80052be <HAL_PWREx_ConfigSupply+0x7a>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f3      	bne.n	800527e <HAL_PWREx_ConfigSupply+0x3a>
 8005296:	e012      	b.n	80052be <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005298:	4b11      	ldr	r3, [pc, #68]	@ (80052e0 <HAL_PWREx_ConfigSupply+0x9c>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	4a10      	ldr	r2, [pc, #64]	@ (80052e0 <HAL_PWREx_ConfigSupply+0x9c>)
 800529e:	f043 0302 	orr.w	r3, r3, #2
 80052a2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80052a4:	e002      	b.n	80052ac <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80052ac:	4b0c      	ldr	r3, [pc, #48]	@ (80052e0 <HAL_PWREx_ConfigSupply+0x9c>)
 80052ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <HAL_PWREx_ConfigSupply+0x7a>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f3      	bne.n	80052a6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e000      	b.n	80052ca <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	2000000c 	.word	0x2000000c
 80052dc:	10624dd3 	.word	0x10624dd3
 80052e0:	46020800 	.word	0x46020800

080052e4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80052e8:	4b05      	ldr	r3, [pc, #20]	@ (8005300 <HAL_PWREx_EnableVddIO2+0x1c>)
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	4a04      	ldr	r2, [pc, #16]	@ (8005300 <HAL_PWREx_EnableVddIO2+0x1c>)
 80052ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052f2:	6113      	str	r3, [r2, #16]
}
 80052f4:	bf00      	nop
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	46020800 	.word	0x46020800

08005304 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8005308:	4b05      	ldr	r3, [pc, #20]	@ (8005320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530c:	4a04      	ldr	r2, [pc, #16]	@ (8005320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800530e:	f043 0301 	orr.w	r3, r3, #1
 8005312:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	46020800 	.word	0x46020800

08005324 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08e      	sub	sp, #56	@ 0x38
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800532c:	2300      	movs	r3, #0
 800532e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f000 bec8 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800533e:	4b99      	ldr	r3, [pc, #612]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005348:	4b96      	ldr	r3, [pc, #600]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0310 	and.w	r3, r3, #16
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 816c 	beq.w	8005638 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <HAL_RCC_OscConfig+0x52>
 8005366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005368:	2b0c      	cmp	r3, #12
 800536a:	f040 80de 	bne.w	800552a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005370:	2b01      	cmp	r3, #1
 8005372:	f040 80da 	bne.w	800552a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	f000 bea5 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005388:	4b86      	ldr	r3, [pc, #536]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <HAL_RCC_OscConfig+0x7a>
 8005394:	4b83      	ldr	r3, [pc, #524]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800539c:	e005      	b.n	80053aa <HAL_RCC_OscConfig+0x86>
 800539e:	4b81      	ldr	r3, [pc, #516]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 80053a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d255      	bcs.n	800545a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80053ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	4618      	mov	r0, r3
 80053ba:	f001 f9d9 	bl	8006770 <RCC_SetFlashLatencyFromMSIRange>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f000 be82 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80053ca:	4b76      	ldr	r3, [pc, #472]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	4a75      	ldr	r2, [pc, #468]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 80053d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053d4:	6093      	str	r3, [r2, #8]
 80053d6:	4b73      	ldr	r3, [pc, #460]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	4970      	ldr	r1, [pc, #448]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80053f0:	d309      	bcc.n	8005406 <HAL_RCC_OscConfig+0xe2>
 80053f2:	4b6c      	ldr	r3, [pc, #432]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f023 021f 	bic.w	r2, r3, #31
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	4969      	ldr	r1, [pc, #420]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005400:	4313      	orrs	r3, r2
 8005402:	60cb      	str	r3, [r1, #12]
 8005404:	e07e      	b.n	8005504 <HAL_RCC_OscConfig+0x1e0>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	da0a      	bge.n	8005424 <HAL_RCC_OscConfig+0x100>
 800540e:	4b65      	ldr	r3, [pc, #404]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	015b      	lsls	r3, r3, #5
 800541c:	4961      	ldr	r1, [pc, #388]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 800541e:	4313      	orrs	r3, r2
 8005420:	60cb      	str	r3, [r1, #12]
 8005422:	e06f      	b.n	8005504 <HAL_RCC_OscConfig+0x1e0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542c:	d30a      	bcc.n	8005444 <HAL_RCC_OscConfig+0x120>
 800542e:	4b5d      	ldr	r3, [pc, #372]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	029b      	lsls	r3, r3, #10
 800543c:	4959      	ldr	r1, [pc, #356]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 800543e:	4313      	orrs	r3, r2
 8005440:	60cb      	str	r3, [r1, #12]
 8005442:	e05f      	b.n	8005504 <HAL_RCC_OscConfig+0x1e0>
 8005444:	4b57      	ldr	r3, [pc, #348]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	03db      	lsls	r3, r3, #15
 8005452:	4954      	ldr	r1, [pc, #336]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005454:	4313      	orrs	r3, r2
 8005456:	60cb      	str	r3, [r1, #12]
 8005458:	e054      	b.n	8005504 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800545a:	4b52      	ldr	r3, [pc, #328]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	4a51      	ldr	r2, [pc, #324]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005460:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005464:	6093      	str	r3, [r2, #8]
 8005466:	4b4f      	ldr	r3, [pc, #316]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	494c      	ldr	r1, [pc, #304]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005474:	4313      	orrs	r3, r2
 8005476:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005480:	d309      	bcc.n	8005496 <HAL_RCC_OscConfig+0x172>
 8005482:	4b48      	ldr	r3, [pc, #288]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f023 021f 	bic.w	r2, r3, #31
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	4945      	ldr	r1, [pc, #276]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005490:	4313      	orrs	r3, r2
 8005492:	60cb      	str	r3, [r1, #12]
 8005494:	e028      	b.n	80054e8 <HAL_RCC_OscConfig+0x1c4>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	2b00      	cmp	r3, #0
 800549c:	da0a      	bge.n	80054b4 <HAL_RCC_OscConfig+0x190>
 800549e:	4b41      	ldr	r3, [pc, #260]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	015b      	lsls	r3, r3, #5
 80054ac:	493d      	ldr	r1, [pc, #244]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60cb      	str	r3, [r1, #12]
 80054b2:	e019      	b.n	80054e8 <HAL_RCC_OscConfig+0x1c4>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054bc:	d30a      	bcc.n	80054d4 <HAL_RCC_OscConfig+0x1b0>
 80054be:	4b39      	ldr	r3, [pc, #228]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	029b      	lsls	r3, r3, #10
 80054cc:	4935      	ldr	r1, [pc, #212]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60cb      	str	r3, [r1, #12]
 80054d2:	e009      	b.n	80054e8 <HAL_RCC_OscConfig+0x1c4>
 80054d4:	4b33      	ldr	r3, [pc, #204]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	03db      	lsls	r3, r3, #15
 80054e2:	4930      	ldr	r1, [pc, #192]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	4618      	mov	r0, r3
 80054f4:	f001 f93c 	bl	8006770 <RCC_SetFlashLatencyFromMSIRange>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	f000 bde5 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005504:	f001 f8de 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005508:	4b27      	ldr	r3, [pc, #156]	@ (80055a8 <HAL_RCC_OscConfig+0x284>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f7fe fa5b 	bl	80039c8 <HAL_InitTick>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 808a 	beq.w	8005636 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005526:	f000 bdd2 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d066      	beq.n	8005600 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005532:	4b1c      	ldr	r3, [pc, #112]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1b      	ldr	r2, [pc, #108]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800553e:	f7fe facd 	bl	8003adc <HAL_GetTick>
 8005542:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005544:	e009      	b.n	800555a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005546:	f7fe fac9 	bl	8003adc <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d902      	bls.n	800555a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	f000 bdba 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800555a:	4b12      	ldr	r3, [pc, #72]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0ef      	beq.n	8005546 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005566:	4b0f      	ldr	r3, [pc, #60]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	4a0e      	ldr	r2, [pc, #56]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 800556c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005570:	6093      	str	r3, [r2, #8]
 8005572:	4b0c      	ldr	r3, [pc, #48]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557e:	4909      	ldr	r1, [pc, #36]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005580:	4313      	orrs	r3, r2
 8005582:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005588:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800558c:	d30e      	bcc.n	80055ac <HAL_RCC_OscConfig+0x288>
 800558e:	4b05      	ldr	r3, [pc, #20]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f023 021f 	bic.w	r2, r3, #31
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	4902      	ldr	r1, [pc, #8]	@ (80055a4 <HAL_RCC_OscConfig+0x280>)
 800559c:	4313      	orrs	r3, r2
 800559e:	60cb      	str	r3, [r1, #12]
 80055a0:	e04a      	b.n	8005638 <HAL_RCC_OscConfig+0x314>
 80055a2:	bf00      	nop
 80055a4:	46020c00 	.word	0x46020c00
 80055a8:	20000010 	.word	0x20000010
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	da0a      	bge.n	80055ca <HAL_RCC_OscConfig+0x2a6>
 80055b4:	4b98      	ldr	r3, [pc, #608]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	015b      	lsls	r3, r3, #5
 80055c2:	4995      	ldr	r1, [pc, #596]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60cb      	str	r3, [r1, #12]
 80055c8:	e036      	b.n	8005638 <HAL_RCC_OscConfig+0x314>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d2:	d30a      	bcc.n	80055ea <HAL_RCC_OscConfig+0x2c6>
 80055d4:	4b90      	ldr	r3, [pc, #576]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	029b      	lsls	r3, r3, #10
 80055e2:	498d      	ldr	r1, [pc, #564]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60cb      	str	r3, [r1, #12]
 80055e8:	e026      	b.n	8005638 <HAL_RCC_OscConfig+0x314>
 80055ea:	4b8b      	ldr	r3, [pc, #556]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	03db      	lsls	r3, r3, #15
 80055f8:	4987      	ldr	r1, [pc, #540]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60cb      	str	r3, [r1, #12]
 80055fe:	e01b      	b.n	8005638 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005600:	4b85      	ldr	r3, [pc, #532]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a84      	ldr	r2, [pc, #528]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 8005606:	f023 0301 	bic.w	r3, r3, #1
 800560a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800560c:	f7fe fa66 	bl	8003adc <HAL_GetTick>
 8005610:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005612:	e009      	b.n	8005628 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005614:	f7fe fa62 	bl	8003adc <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d902      	bls.n	8005628 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	f000 bd53 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005628:	4b7b      	ldr	r3, [pc, #492]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1ef      	bne.n	8005614 <HAL_RCC_OscConfig+0x2f0>
 8005634:	e000      	b.n	8005638 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005636:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 808b 	beq.w	800575c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	2b08      	cmp	r3, #8
 800564a:	d005      	beq.n	8005658 <HAL_RCC_OscConfig+0x334>
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	2b0c      	cmp	r3, #12
 8005650:	d109      	bne.n	8005666 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005654:	2b03      	cmp	r3, #3
 8005656:	d106      	bne.n	8005666 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d17d      	bne.n	800575c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f000 bd34 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800566e:	d106      	bne.n	800567e <HAL_RCC_OscConfig+0x35a>
 8005670:	4b69      	ldr	r3, [pc, #420]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a68      	ldr	r2, [pc, #416]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 8005676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	e041      	b.n	8005702 <HAL_RCC_OscConfig+0x3de>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005686:	d112      	bne.n	80056ae <HAL_RCC_OscConfig+0x38a>
 8005688:	4b63      	ldr	r3, [pc, #396]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a62      	ldr	r2, [pc, #392]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 800568e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b60      	ldr	r3, [pc, #384]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a5f      	ldr	r2, [pc, #380]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 800569a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	4b5d      	ldr	r3, [pc, #372]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e029      	b.n	8005702 <HAL_RCC_OscConfig+0x3de>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80056b6:	d112      	bne.n	80056de <HAL_RCC_OscConfig+0x3ba>
 80056b8:	4b57      	ldr	r3, [pc, #348]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a56      	ldr	r2, [pc, #344]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b54      	ldr	r3, [pc, #336]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a53      	ldr	r2, [pc, #332]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	4b51      	ldr	r3, [pc, #324]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a50      	ldr	r2, [pc, #320]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	e011      	b.n	8005702 <HAL_RCC_OscConfig+0x3de>
 80056de:	4b4e      	ldr	r3, [pc, #312]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a4d      	ldr	r2, [pc, #308]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b4b      	ldr	r3, [pc, #300]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	4b48      	ldr	r3, [pc, #288]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a47      	ldr	r2, [pc, #284]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80056fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005700:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d014      	beq.n	8005734 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800570a:	f7fe f9e7 	bl	8003adc <HAL_GetTick>
 800570e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005710:	e009      	b.n	8005726 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005712:	f7fe f9e3 	bl	8003adc <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b64      	cmp	r3, #100	@ 0x64
 800571e:	d902      	bls.n	8005726 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	f000 bcd4 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005726:	4b3c      	ldr	r3, [pc, #240]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0ef      	beq.n	8005712 <HAL_RCC_OscConfig+0x3ee>
 8005732:	e013      	b.n	800575c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005734:	f7fe f9d2 	bl	8003adc <HAL_GetTick>
 8005738:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800573a:	e009      	b.n	8005750 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800573c:	f7fe f9ce 	bl	8003adc <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b64      	cmp	r3, #100	@ 0x64
 8005748:	d902      	bls.n	8005750 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	f000 bcbf 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005750:	4b31      	ldr	r3, [pc, #196]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1ef      	bne.n	800573c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d05f      	beq.n	8005828 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576a:	2b04      	cmp	r3, #4
 800576c:	d005      	beq.n	800577a <HAL_RCC_OscConfig+0x456>
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	2b0c      	cmp	r3, #12
 8005772:	d114      	bne.n	800579e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005776:	2b02      	cmp	r3, #2
 8005778:	d111      	bne.n	800579e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f000 bca3 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005788:	4b23      	ldr	r3, [pc, #140]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	4920      	ldr	r1, [pc, #128]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 8005798:	4313      	orrs	r3, r2
 800579a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800579c:	e044      	b.n	8005828 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d024      	beq.n	80057f0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80057a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80057b2:	f7fe f993 	bl	8003adc <HAL_GetTick>
 80057b6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b8:	e009      	b.n	80057ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ba:	f7fe f98f 	bl	8003adc <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d902      	bls.n	80057ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	f000 bc80 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057ce:	4b12      	ldr	r3, [pc, #72]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0ef      	beq.n	80057ba <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80057da:	4b0f      	ldr	r3, [pc, #60]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	041b      	lsls	r3, r3, #16
 80057e8:	490b      	ldr	r1, [pc, #44]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	610b      	str	r3, [r1, #16]
 80057ee:	e01b      	b.n	8005828 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80057f0:	4b09      	ldr	r3, [pc, #36]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a08      	ldr	r2, [pc, #32]	@ (8005818 <HAL_RCC_OscConfig+0x4f4>)
 80057f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80057fc:	f7fe f96e 	bl	8003adc <HAL_GetTick>
 8005800:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005802:	e00b      	b.n	800581c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005804:	f7fe f96a 	bl	8003adc <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d904      	bls.n	800581c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	f000 bc5b 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
 8005818:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800581c:	4baf      	ldr	r3, [pc, #700]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1ed      	bne.n	8005804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 80c8 	beq.w	80059c6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005836:	2300      	movs	r3, #0
 8005838:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800583c:	4ba7      	ldr	r3, [pc, #668]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 800583e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d111      	bne.n	800586e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800584a:	4ba4      	ldr	r3, [pc, #656]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 800584c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005850:	4aa2      	ldr	r2, [pc, #648]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005852:	f043 0304 	orr.w	r3, r3, #4
 8005856:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800585a:	4ba0      	ldr	r3, [pc, #640]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 800585c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800586e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ae0 <HAL_RCC_OscConfig+0x7bc>)
 8005870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d119      	bne.n	80058ae <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800587a:	4b99      	ldr	r3, [pc, #612]	@ (8005ae0 <HAL_RCC_OscConfig+0x7bc>)
 800587c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587e:	4a98      	ldr	r2, [pc, #608]	@ (8005ae0 <HAL_RCC_OscConfig+0x7bc>)
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005886:	f7fe f929 	bl	8003adc <HAL_GetTick>
 800588a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800588c:	e009      	b.n	80058a2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588e:	f7fe f925 	bl	8003adc <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d902      	bls.n	80058a2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	f000 bc16 	b.w	80060ce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80058a2:	4b8f      	ldr	r3, [pc, #572]	@ (8005ae0 <HAL_RCC_OscConfig+0x7bc>)
 80058a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0ef      	beq.n	800588e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d05f      	beq.n	8005976 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80058b6:	4b89      	ldr	r3, [pc, #548]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 80058b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058bc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d037      	beq.n	800593c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d006      	beq.n	80058e4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e3f4      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01b      	beq.n	8005926 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80058ee:	4b7b      	ldr	r3, [pc, #492]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 80058f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058f4:	4a79      	ldr	r2, [pc, #484]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 80058f6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80058fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80058fe:	f7fe f8ed 	bl	8003adc <HAL_GetTick>
 8005902:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005906:	f7fe f8e9 	bl	8003adc <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b05      	cmp	r3, #5
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e3da      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005918:	4b70      	ldr	r3, [pc, #448]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 800591a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800591e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1ef      	bne.n	8005906 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005926:	4b6d      	ldr	r3, [pc, #436]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800592c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	4969      	ldr	r1, [pc, #420]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800593c:	4b67      	ldr	r3, [pc, #412]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 800593e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005942:	4a66      	ldr	r2, [pc, #408]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005944:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005948:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800594c:	f7fe f8c6 	bl	8003adc <HAL_GetTick>
 8005950:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005954:	f7fe f8c2 	bl	8003adc <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b05      	cmp	r3, #5
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e3b3      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005966:	4b5d      	ldr	r3, [pc, #372]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800596c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0ef      	beq.n	8005954 <HAL_RCC_OscConfig+0x630>
 8005974:	e01b      	b.n	80059ae <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005976:	4b59      	ldr	r3, [pc, #356]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800597c:	4a57      	ldr	r2, [pc, #348]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 800597e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005982:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005986:	f7fe f8a9 	bl	8003adc <HAL_GetTick>
 800598a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800598e:	f7fe f8a5 	bl	8003adc <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b05      	cmp	r3, #5
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e396      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80059a0:	4b4e      	ldr	r3, [pc, #312]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 80059a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1ef      	bne.n	800598e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059ae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d107      	bne.n	80059c6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b6:	4b49      	ldr	r3, [pc, #292]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 80059b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059bc:	4a47      	ldr	r2, [pc, #284]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 80059be:	f023 0304 	bic.w	r3, r3, #4
 80059c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8111 	beq.w	8005bf6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80059d4:	2300      	movs	r3, #0
 80059d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059da:	4b40      	ldr	r3, [pc, #256]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 80059dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d111      	bne.n	8005a0c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e8:	4b3c      	ldr	r3, [pc, #240]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 80059ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ee:	4a3b      	ldr	r2, [pc, #236]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 80059f0:	f043 0304 	orr.w	r3, r3, #4
 80059f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80059f8:	4b38      	ldr	r3, [pc, #224]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 80059fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a0c:	4b34      	ldr	r3, [pc, #208]	@ (8005ae0 <HAL_RCC_OscConfig+0x7bc>)
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d118      	bne.n	8005a4a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005a18:	4b31      	ldr	r3, [pc, #196]	@ (8005ae0 <HAL_RCC_OscConfig+0x7bc>)
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1c:	4a30      	ldr	r2, [pc, #192]	@ (8005ae0 <HAL_RCC_OscConfig+0x7bc>)
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a24:	f7fe f85a 	bl	8003adc <HAL_GetTick>
 8005a28:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a2c:	f7fe f856 	bl	8003adc <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e347      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a3e:	4b28      	ldr	r3, [pc, #160]	@ (8005ae0 <HAL_RCC_OscConfig+0x7bc>)
 8005a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01f      	beq.n	8005a96 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d010      	beq.n	8005a84 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005a62:	4b1e      	ldr	r3, [pc, #120]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a68:	4a1c      	ldr	r2, [pc, #112]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005a6a:	f043 0304 	orr.w	r3, r3, #4
 8005a6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005a72:	4b1a      	ldr	r3, [pc, #104]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a78:	4a18      	ldr	r2, [pc, #96]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a82:	e018      	b.n	8005ab6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005a84:	4b15      	ldr	r3, [pc, #84]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a8a:	4a14      	ldr	r2, [pc, #80]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005a8c:	f043 0301 	orr.w	r3, r3, #1
 8005a90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a94:	e00f      	b.n	8005ab6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005a96:	4b11      	ldr	r3, [pc, #68]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005a9e:	f023 0301 	bic.w	r3, r3, #1
 8005aa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005aac:	4a0b      	ldr	r2, [pc, #44]	@ (8005adc <HAL_RCC_OscConfig+0x7b8>)
 8005aae:	f023 0304 	bic.w	r3, r3, #4
 8005ab2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d057      	beq.n	8005b6e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005abe:	f7fe f80d 	bl	8003adc <HAL_GetTick>
 8005ac2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ac4:	e00e      	b.n	8005ae4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac6:	f7fe f809 	bl	8003adc <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d905      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e2f8      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
 8005adc:	46020c00 	.word	0x46020c00
 8005ae0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ae4:	4b9c      	ldr	r3, [pc, #624]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0e9      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01b      	beq.n	8005b36 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005afe:	4b96      	ldr	r3, [pc, #600]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b04:	4a94      	ldr	r2, [pc, #592]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005b0e:	e00a      	b.n	8005b26 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b10:	f7fd ffe4 	bl	8003adc <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e2d3      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005b26:	4b8c      	ldr	r3, [pc, #560]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0ed      	beq.n	8005b10 <HAL_RCC_OscConfig+0x7ec>
 8005b34:	e053      	b.n	8005bde <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005b36:	4b88      	ldr	r3, [pc, #544]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b3c:	4a86      	ldr	r2, [pc, #536]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005b3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b46:	e00a      	b.n	8005b5e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b48:	f7fd ffc8 	bl	8003adc <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e2b7      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b5e:	4b7e      	ldr	r3, [pc, #504]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ed      	bne.n	8005b48 <HAL_RCC_OscConfig+0x824>
 8005b6c:	e037      	b.n	8005bde <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005b6e:	f7fd ffb5 	bl	8003adc <HAL_GetTick>
 8005b72:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b74:	e00a      	b.n	8005b8c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b76:	f7fd ffb1 	bl	8003adc <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e2a0      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b8c:	4b72      	ldr	r3, [pc, #456]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1ed      	bne.n	8005b76 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005b9a:	4b6f      	ldr	r3, [pc, #444]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01a      	beq.n	8005bde <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ba8:	4b6b      	ldr	r3, [pc, #428]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bae:	4a6a      	ldr	r2, [pc, #424]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005bb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005bb8:	e00a      	b.n	8005bd0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bba:	f7fd ff8f 	bl	8003adc <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e27e      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005bd0:	4b61      	ldr	r3, [pc, #388]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1ed      	bne.n	8005bba <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bde:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be6:	4b5c      	ldr	r3, [pc, #368]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bec:	4a5a      	ldr	r2, [pc, #360]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005bee:	f023 0304 	bic.w	r3, r3, #4
 8005bf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d036      	beq.n	8005c70 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d019      	beq.n	8005c3e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005c0a:	4b53      	ldr	r3, [pc, #332]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a52      	ldr	r2, [pc, #328]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005c10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c14:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005c16:	f7fd ff61 	bl	8003adc <HAL_GetTick>
 8005c1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c1e:	f7fd ff5d 	bl	8003adc <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e24e      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005c30:	4b49      	ldr	r3, [pc, #292]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <HAL_RCC_OscConfig+0x8fa>
 8005c3c:	e018      	b.n	8005c70 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005c3e:	4b46      	ldr	r3, [pc, #280]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a45      	ldr	r2, [pc, #276]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005c44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c48:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005c4a:	f7fd ff47 	bl	8003adc <HAL_GetTick>
 8005c4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c52:	f7fd ff43 	bl	8003adc <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e234      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005c64:	4b3c      	ldr	r3, [pc, #240]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1f0      	bne.n	8005c52 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d036      	beq.n	8005cea <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d019      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005c84:	4b34      	ldr	r3, [pc, #208]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a33      	ldr	r2, [pc, #204]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005c8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c8e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005c90:	f7fd ff24 	bl	8003adc <HAL_GetTick>
 8005c94:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005c98:	f7fd ff20 	bl	8003adc <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e211      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005caa:	4b2b      	ldr	r3, [pc, #172]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0x974>
 8005cb6:	e018      	b.n	8005cea <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005cb8:	4b27      	ldr	r3, [pc, #156]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a26      	ldr	r2, [pc, #152]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005cbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cc2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005cc4:	f7fd ff0a 	bl	8003adc <HAL_GetTick>
 8005cc8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005ccc:	f7fd ff06 	bl	8003adc <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e1f7      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005cde:	4b1e      	ldr	r3, [pc, #120]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f0      	bne.n	8005ccc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d07f      	beq.n	8005df6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d062      	beq.n	8005dc4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005cfe:	4b16      	ldr	r3, [pc, #88]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	4a15      	ldr	r2, [pc, #84]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005d04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d08:	6093      	str	r3, [r2, #8]
 8005d0a:	4b13      	ldr	r3, [pc, #76]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d16:	4910      	ldr	r1, [pc, #64]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d20:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005d24:	d309      	bcc.n	8005d3a <HAL_RCC_OscConfig+0xa16>
 8005d26:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f023 021f 	bic.w	r2, r3, #31
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	4909      	ldr	r1, [pc, #36]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60cb      	str	r3, [r1, #12]
 8005d38:	e02a      	b.n	8005d90 <HAL_RCC_OscConfig+0xa6c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	da0c      	bge.n	8005d5c <HAL_RCC_OscConfig+0xa38>
 8005d42:	4b05      	ldr	r3, [pc, #20]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	015b      	lsls	r3, r3, #5
 8005d50:	4901      	ldr	r1, [pc, #4]	@ (8005d58 <HAL_RCC_OscConfig+0xa34>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60cb      	str	r3, [r1, #12]
 8005d56:	e01b      	b.n	8005d90 <HAL_RCC_OscConfig+0xa6c>
 8005d58:	46020c00 	.word	0x46020c00
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d64:	d30a      	bcc.n	8005d7c <HAL_RCC_OscConfig+0xa58>
 8005d66:	4ba1      	ldr	r3, [pc, #644]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	029b      	lsls	r3, r3, #10
 8005d74:	499d      	ldr	r1, [pc, #628]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60cb      	str	r3, [r1, #12]
 8005d7a:	e009      	b.n	8005d90 <HAL_RCC_OscConfig+0xa6c>
 8005d7c:	4b9b      	ldr	r3, [pc, #620]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	03db      	lsls	r3, r3, #15
 8005d8a:	4998      	ldr	r1, [pc, #608]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005d90:	4b96      	ldr	r3, [pc, #600]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a95      	ldr	r2, [pc, #596]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005d96:	f043 0310 	orr.w	r3, r3, #16
 8005d9a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005d9c:	f7fd fe9e 	bl	8003adc <HAL_GetTick>
 8005da0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005da4:	f7fd fe9a 	bl	8003adc <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e18b      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005db6:	4b8d      	ldr	r3, [pc, #564]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0xa80>
 8005dc2:	e018      	b.n	8005df6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005dc4:	4b89      	ldr	r3, [pc, #548]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a88      	ldr	r2, [pc, #544]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005dca:	f023 0310 	bic.w	r3, r3, #16
 8005dce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005dd0:	f7fd fe84 	bl	8003adc <HAL_GetTick>
 8005dd4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005dd8:	f7fd fe80 	bl	8003adc <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e171      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005dea:	4b80      	ldr	r3, [pc, #512]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f0      	bne.n	8005dd8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8166 	beq.w	80060cc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005e00:	2300      	movs	r3, #0
 8005e02:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e06:	4b79      	ldr	r3, [pc, #484]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b0c      	cmp	r3, #12
 8005e10:	f000 80f2 	beq.w	8005ff8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	f040 80c5 	bne.w	8005fa8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005e1e:	4b73      	ldr	r3, [pc, #460]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a72      	ldr	r2, [pc, #456]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005e24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e28:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005e2a:	f7fd fe57 	bl	8003adc <HAL_GetTick>
 8005e2e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005e30:	e008      	b.n	8005e44 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e32:	f7fd fe53 	bl	8003adc <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e144      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005e44:	4b69      	ldr	r3, [pc, #420]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f0      	bne.n	8005e32 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e50:	4b66      	ldr	r3, [pc, #408]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e56:	f003 0304 	and.w	r3, r3, #4
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d111      	bne.n	8005e82 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005e5e:	4b63      	ldr	r3, [pc, #396]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e64:	4a61      	ldr	r2, [pc, #388]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005e66:	f043 0304 	orr.w	r3, r3, #4
 8005e6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005e6e:	4b5f      	ldr	r3, [pc, #380]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005e82:	4b5b      	ldr	r3, [pc, #364]	@ (8005ff0 <HAL_RCC_OscConfig+0xccc>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e8e:	d102      	bne.n	8005e96 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005e96:	4b56      	ldr	r3, [pc, #344]	@ (8005ff0 <HAL_RCC_OscConfig+0xccc>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	4a55      	ldr	r2, [pc, #340]	@ (8005ff0 <HAL_RCC_OscConfig+0xccc>)
 8005e9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ea0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005ea2:	4b52      	ldr	r3, [pc, #328]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eaa:	f023 0303 	bic.w	r3, r3, #3
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005eb6:	3a01      	subs	r2, #1
 8005eb8:	0212      	lsls	r2, r2, #8
 8005eba:	4311      	orrs	r1, r2
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	494a      	ldr	r1, [pc, #296]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ec8:	4b48      	ldr	r3, [pc, #288]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ecc:	4b49      	ldr	r3, [pc, #292]	@ (8005ff4 <HAL_RCC_OscConfig+0xcd0>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ed4:	3a01      	subs	r2, #1
 8005ed6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005ede:	3a01      	subs	r2, #1
 8005ee0:	0252      	lsls	r2, r2, #9
 8005ee2:	b292      	uxth	r2, r2
 8005ee4:	4311      	orrs	r1, r2
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005eea:	3a01      	subs	r2, #1
 8005eec:	0412      	lsls	r2, r2, #16
 8005eee:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005ef2:	4311      	orrs	r1, r2
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005ef8:	3a01      	subs	r2, #1
 8005efa:	0612      	lsls	r2, r2, #24
 8005efc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005f00:	430a      	orrs	r2, r1
 8005f02:	493a      	ldr	r1, [pc, #232]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005f08:	4b38      	ldr	r3, [pc, #224]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0c:	4a37      	ldr	r2, [pc, #220]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f0e:	f023 0310 	bic.w	r3, r3, #16
 8005f12:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f18:	4a34      	ldr	r2, [pc, #208]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005f1e:	4b33      	ldr	r3, [pc, #204]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f22:	4a32      	ldr	r2, [pc, #200]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f24:	f043 0310 	orr.w	r3, r3, #16
 8005f28:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005f2a:	4b30      	ldr	r3, [pc, #192]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2e:	f023 020c 	bic.w	r2, r3, #12
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f36:	492d      	ldr	r1, [pc, #180]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005f3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d105      	bne.n	8005f50 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005f44:	4b2a      	ldr	r3, [pc, #168]	@ (8005ff0 <HAL_RCC_OscConfig+0xccc>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4a29      	ldr	r2, [pc, #164]	@ (8005ff0 <HAL_RCC_OscConfig+0xccc>)
 8005f4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f4e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005f50:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d107      	bne.n	8005f68 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005f58:	4b24      	ldr	r3, [pc, #144]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f5e:	4a23      	ldr	r2, [pc, #140]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f60:	f023 0304 	bic.w	r3, r3, #4
 8005f64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005f68:	4b20      	ldr	r3, [pc, #128]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f72:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005f74:	f7fd fdb2 	bl	8003adc <HAL_GetTick>
 8005f78:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f7c:	f7fd fdae 	bl	8003adc <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e09f      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005f8e:	4b17      	ldr	r3, [pc, #92]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0f0      	beq.n	8005f7c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005f9a:	4b14      	ldr	r3, [pc, #80]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9e:	4a13      	ldr	r2, [pc, #76]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fa4:	6293      	str	r3, [r2, #40]	@ 0x28
 8005fa6:	e091      	b.n	80060cc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005fa8:	4b10      	ldr	r3, [pc, #64]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a0f      	ldr	r2, [pc, #60]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fb2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005fb4:	f7fd fd92 	bl	8003adc <HAL_GetTick>
 8005fb8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fbc:	f7fd fd8e 	bl	8003adc <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e07f      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005fce:	4b07      	ldr	r3, [pc, #28]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f0      	bne.n	8005fbc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005fda:	4b04      	ldr	r3, [pc, #16]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fde:	4a03      	ldr	r2, [pc, #12]	@ (8005fec <HAL_RCC_OscConfig+0xcc8>)
 8005fe0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005fe4:	f023 0303 	bic.w	r3, r3, #3
 8005fe8:	6293      	str	r3, [r2, #40]	@ 0x28
 8005fea:	e06f      	b.n	80060cc <HAL_RCC_OscConfig+0xda8>
 8005fec:	46020c00 	.word	0x46020c00
 8005ff0:	46020800 	.word	0x46020800
 8005ff4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005ff8:	4b37      	ldr	r3, [pc, #220]	@ (80060d8 <HAL_RCC_OscConfig+0xdb4>)
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ffe:	4b36      	ldr	r3, [pc, #216]	@ (80060d8 <HAL_RCC_OscConfig+0xdb4>)
 8006000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006002:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006008:	2b01      	cmp	r3, #1
 800600a:	d039      	beq.n	8006080 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0203 	and.w	r2, r3, #3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006016:	429a      	cmp	r2, r3
 8006018:	d132      	bne.n	8006080 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	0a1b      	lsrs	r3, r3, #8
 800601e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006026:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006028:	429a      	cmp	r2, r3
 800602a:	d129      	bne.n	8006080 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006036:	429a      	cmp	r2, r3
 8006038:	d122      	bne.n	8006080 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006044:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006046:	429a      	cmp	r2, r3
 8006048:	d11a      	bne.n	8006080 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	0a5b      	lsrs	r3, r3, #9
 800604e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006056:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006058:	429a      	cmp	r2, r3
 800605a:	d111      	bne.n	8006080 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	0c1b      	lsrs	r3, r3, #16
 8006060:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006068:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800606a:	429a      	cmp	r2, r3
 800606c:	d108      	bne.n	8006080 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	0e1b      	lsrs	r3, r3, #24
 8006072:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800607c:	429a      	cmp	r2, r3
 800607e:	d001      	beq.n	8006084 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e024      	b.n	80060ce <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006084:	4b14      	ldr	r3, [pc, #80]	@ (80060d8 <HAL_RCC_OscConfig+0xdb4>)
 8006086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006088:	08db      	lsrs	r3, r3, #3
 800608a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006092:	429a      	cmp	r2, r3
 8006094:	d01a      	beq.n	80060cc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006096:	4b10      	ldr	r3, [pc, #64]	@ (80060d8 <HAL_RCC_OscConfig+0xdb4>)
 8006098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609a:	4a0f      	ldr	r2, [pc, #60]	@ (80060d8 <HAL_RCC_OscConfig+0xdb4>)
 800609c:	f023 0310 	bic.w	r3, r3, #16
 80060a0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a2:	f7fd fd1b 	bl	8003adc <HAL_GetTick>
 80060a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80060a8:	bf00      	nop
 80060aa:	f7fd fd17 	bl	8003adc <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d0f9      	beq.n	80060aa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ba:	4a07      	ldr	r2, [pc, #28]	@ (80060d8 <HAL_RCC_OscConfig+0xdb4>)
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80060c0:	4b05      	ldr	r3, [pc, #20]	@ (80060d8 <HAL_RCC_OscConfig+0xdb4>)
 80060c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c4:	4a04      	ldr	r2, [pc, #16]	@ (80060d8 <HAL_RCC_OscConfig+0xdb4>)
 80060c6:	f043 0310 	orr.w	r3, r3, #16
 80060ca:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3738      	adds	r7, #56	@ 0x38
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	46020c00 	.word	0x46020c00

080060dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e1d9      	b.n	80064a4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060f0:	4b9b      	ldr	r3, [pc, #620]	@ (8006360 <HAL_RCC_ClockConfig+0x284>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 030f 	and.w	r3, r3, #15
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d910      	bls.n	8006120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060fe:	4b98      	ldr	r3, [pc, #608]	@ (8006360 <HAL_RCC_ClockConfig+0x284>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f023 020f 	bic.w	r2, r3, #15
 8006106:	4996      	ldr	r1, [pc, #600]	@ (8006360 <HAL_RCC_ClockConfig+0x284>)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	4313      	orrs	r3, r2
 800610c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800610e:	4b94      	ldr	r3, [pc, #592]	@ (8006360 <HAL_RCC_ClockConfig+0x284>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	d001      	beq.n	8006120 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e1c1      	b.n	80064a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b00      	cmp	r3, #0
 800612a:	d010      	beq.n	800614e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	695a      	ldr	r2, [r3, #20]
 8006130:	4b8c      	ldr	r3, [pc, #560]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 8006132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006134:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006138:	429a      	cmp	r2, r3
 800613a:	d908      	bls.n	800614e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800613c:	4b89      	ldr	r3, [pc, #548]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	4986      	ldr	r1, [pc, #536]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 800614a:	4313      	orrs	r3, r2
 800614c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d012      	beq.n	8006180 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	4b81      	ldr	r3, [pc, #516]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	091b      	lsrs	r3, r3, #4
 8006164:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006168:	429a      	cmp	r2, r3
 800616a:	d909      	bls.n	8006180 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800616c:	4b7d      	ldr	r3, [pc, #500]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	497a      	ldr	r1, [pc, #488]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 800617c:	4313      	orrs	r3, r2
 800617e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d010      	beq.n	80061ae <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	4b74      	ldr	r3, [pc, #464]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006198:	429a      	cmp	r2, r3
 800619a:	d908      	bls.n	80061ae <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800619c:	4b71      	ldr	r3, [pc, #452]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	496e      	ldr	r1, [pc, #440]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d010      	beq.n	80061dc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	4b69      	ldr	r3, [pc, #420]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d908      	bls.n	80061dc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80061ca:	4b66      	ldr	r3, [pc, #408]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 020f 	bic.w	r2, r3, #15
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	4963      	ldr	r1, [pc, #396]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 80d2 	beq.w	800638e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80061ea:	2300      	movs	r3, #0
 80061ec:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d143      	bne.n	800627e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061f6:	4b5b      	ldr	r3, [pc, #364]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 80061f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d110      	bne.n	8006226 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006204:	4b57      	ldr	r3, [pc, #348]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 8006206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800620a:	4a56      	ldr	r2, [pc, #344]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 800620c:	f043 0304 	orr.w	r3, r3, #4
 8006210:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006214:	4b53      	ldr	r3, [pc, #332]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 8006216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	60bb      	str	r3, [r7, #8]
 8006220:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006222:	2301      	movs	r3, #1
 8006224:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006226:	f7fd fc59 	bl	8003adc <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800622c:	4b4e      	ldr	r3, [pc, #312]	@ (8006368 <HAL_RCC_ClockConfig+0x28c>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00f      	beq.n	8006258 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006238:	e008      	b.n	800624c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800623a:	f7fd fc4f 	bl	8003adc <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e12b      	b.n	80064a4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800624c:	4b46      	ldr	r3, [pc, #280]	@ (8006368 <HAL_RCC_ClockConfig+0x28c>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d107      	bne.n	800626e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800625e:	4b41      	ldr	r3, [pc, #260]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 8006260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006264:	4a3f      	ldr	r2, [pc, #252]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 8006266:	f023 0304 	bic.w	r3, r3, #4
 800626a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800626e:	4b3d      	ldr	r3, [pc, #244]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d121      	bne.n	80062be <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e112      	b.n	80064a4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d107      	bne.n	8006296 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006286:	4b37      	ldr	r3, [pc, #220]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d115      	bne.n	80062be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e106      	b.n	80064a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d107      	bne.n	80062ae <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800629e:	4b31      	ldr	r3, [pc, #196]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e0fa      	b.n	80064a4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e0f2      	b.n	80064a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80062be:	4b29      	ldr	r3, [pc, #164]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f023 0203 	bic.w	r2, r3, #3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	4926      	ldr	r1, [pc, #152]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80062d0:	f7fd fc04 	bl	8003adc <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d112      	bne.n	8006304 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062de:	e00a      	b.n	80062f6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e0:	f7fd fbfc 	bl	8003adc <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e0d6      	b.n	80064a4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f003 030c 	and.w	r3, r3, #12
 80062fe:	2b0c      	cmp	r3, #12
 8006300:	d1ee      	bne.n	80062e0 <HAL_RCC_ClockConfig+0x204>
 8006302:	e044      	b.n	800638e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d112      	bne.n	8006332 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800630c:	e00a      	b.n	8006324 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800630e:	f7fd fbe5 	bl	8003adc <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800631c:	4293      	cmp	r3, r2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e0bf      	b.n	80064a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006324:	4b0f      	ldr	r3, [pc, #60]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f003 030c 	and.w	r3, r3, #12
 800632c:	2b08      	cmp	r3, #8
 800632e:	d1ee      	bne.n	800630e <HAL_RCC_ClockConfig+0x232>
 8006330:	e02d      	b.n	800638e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d123      	bne.n	8006382 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800633a:	e00a      	b.n	8006352 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800633c:	f7fd fbce 	bl	8003adc <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800634a:	4293      	cmp	r3, r2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e0a8      	b.n	80064a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006352:	4b04      	ldr	r3, [pc, #16]	@ (8006364 <HAL_RCC_ClockConfig+0x288>)
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f003 030c 	and.w	r3, r3, #12
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1ee      	bne.n	800633c <HAL_RCC_ClockConfig+0x260>
 800635e:	e016      	b.n	800638e <HAL_RCC_ClockConfig+0x2b2>
 8006360:	40022000 	.word	0x40022000
 8006364:	46020c00 	.word	0x46020c00
 8006368:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800636c:	f7fd fbb6 	bl	8003adc <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800637a:	4293      	cmp	r3, r2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e090      	b.n	80064a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006382:	4b4a      	ldr	r3, [pc, #296]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f003 030c 	and.w	r3, r3, #12
 800638a:	2b04      	cmp	r3, #4
 800638c:	d1ee      	bne.n	800636c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d010      	beq.n	80063bc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	4b43      	ldr	r3, [pc, #268]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d208      	bcs.n	80063bc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80063aa:	4b40      	ldr	r3, [pc, #256]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	f023 020f 	bic.w	r2, r3, #15
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	493d      	ldr	r1, [pc, #244]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063bc:	4b3c      	ldr	r3, [pc, #240]	@ (80064b0 <HAL_RCC_ClockConfig+0x3d4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d210      	bcs.n	80063ec <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ca:	4b39      	ldr	r3, [pc, #228]	@ (80064b0 <HAL_RCC_ClockConfig+0x3d4>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f023 020f 	bic.w	r2, r3, #15
 80063d2:	4937      	ldr	r1, [pc, #220]	@ (80064b0 <HAL_RCC_ClockConfig+0x3d4>)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063da:	4b35      	ldr	r3, [pc, #212]	@ (80064b0 <HAL_RCC_ClockConfig+0x3d4>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d001      	beq.n	80063ec <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e05b      	b.n	80064a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d010      	beq.n	800641a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	4b2b      	ldr	r3, [pc, #172]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006404:	429a      	cmp	r2, r3
 8006406:	d208      	bcs.n	800641a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006408:	4b28      	ldr	r3, [pc, #160]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4925      	ldr	r1, [pc, #148]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 8006416:	4313      	orrs	r3, r2
 8006418:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b00      	cmp	r3, #0
 8006424:	d012      	beq.n	800644c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	4b20      	ldr	r3, [pc, #128]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	091b      	lsrs	r3, r3, #4
 8006430:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006434:	429a      	cmp	r2, r3
 8006436:	d209      	bcs.n	800644c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006438:	4b1c      	ldr	r3, [pc, #112]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	4919      	ldr	r1, [pc, #100]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 8006448:	4313      	orrs	r3, r2
 800644a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d010      	beq.n	800647a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	695a      	ldr	r2, [r3, #20]
 800645c:	4b13      	ldr	r3, [pc, #76]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 800645e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006460:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006464:	429a      	cmp	r2, r3
 8006466:	d208      	bcs.n	800647a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006468:	4b10      	ldr	r3, [pc, #64]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	490d      	ldr	r1, [pc, #52]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 8006476:	4313      	orrs	r3, r2
 8006478:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800647a:	f000 f821 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 800647e:	4602      	mov	r2, r0
 8006480:	4b0a      	ldr	r3, [pc, #40]	@ (80064ac <HAL_RCC_ClockConfig+0x3d0>)
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	490a      	ldr	r1, [pc, #40]	@ (80064b4 <HAL_RCC_ClockConfig+0x3d8>)
 800648a:	5ccb      	ldrb	r3, [r1, r3]
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
 8006490:	4a09      	ldr	r2, [pc, #36]	@ (80064b8 <HAL_RCC_ClockConfig+0x3dc>)
 8006492:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006494:	4b09      	ldr	r3, [pc, #36]	@ (80064bc <HAL_RCC_ClockConfig+0x3e0>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f7fd fa95 	bl	80039c8 <HAL_InitTick>
 800649e:	4603      	mov	r3, r0
 80064a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	46020c00 	.word	0x46020c00
 80064b0:	40022000 	.word	0x40022000
 80064b4:	0800e808 	.word	0x0800e808
 80064b8:	2000000c 	.word	0x2000000c
 80064bc:	20000010 	.word	0x20000010

080064c0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b08b      	sub	sp, #44	@ 0x2c
 80064c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ce:	4b78      	ldr	r3, [pc, #480]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	f003 030c 	and.w	r3, r3, #12
 80064d6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064d8:	4b75      	ldr	r3, [pc, #468]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <HAL_RCC_GetSysClockFreq+0x34>
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	2b0c      	cmp	r3, #12
 80064ec:	d121      	bne.n	8006532 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d11e      	bne.n	8006532 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80064f4:	4b6e      	ldr	r3, [pc, #440]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d107      	bne.n	8006510 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006500:	4b6b      	ldr	r3, [pc, #428]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006506:	0b1b      	lsrs	r3, r3, #12
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	627b      	str	r3, [r7, #36]	@ 0x24
 800650e:	e005      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006510:	4b67      	ldr	r3, [pc, #412]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	0f1b      	lsrs	r3, r3, #28
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800651c:	4a65      	ldr	r2, [pc, #404]	@ (80066b4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800651e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d110      	bne.n	800654e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006530:	e00d      	b.n	800654e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006532:	4b5f      	ldr	r3, [pc, #380]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f003 030c 	and.w	r3, r3, #12
 800653a:	2b04      	cmp	r3, #4
 800653c:	d102      	bne.n	8006544 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800653e:	4b5e      	ldr	r3, [pc, #376]	@ (80066b8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006540:	623b      	str	r3, [r7, #32]
 8006542:	e004      	b.n	800654e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b08      	cmp	r3, #8
 8006548:	d101      	bne.n	800654e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800654a:	4b5b      	ldr	r3, [pc, #364]	@ (80066b8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800654c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b0c      	cmp	r3, #12
 8006552:	f040 80a5 	bne.w	80066a0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006556:	4b56      	ldr	r3, [pc, #344]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006560:	4b53      	ldr	r3, [pc, #332]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	0a1b      	lsrs	r3, r3, #8
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	3301      	adds	r3, #1
 800656c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800656e:	4b50      	ldr	r3, [pc, #320]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006572:	091b      	lsrs	r3, r3, #4
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800657a:	4b4d      	ldr	r3, [pc, #308]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800657c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657e:	08db      	lsrs	r3, r3, #3
 8006580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	fb02 f303 	mul.w	r3, r2, r3
 800658a:	ee07 3a90 	vmov	s15, r3
 800658e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006592:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b02      	cmp	r3, #2
 800659a:	d003      	beq.n	80065a4 <HAL_RCC_GetSysClockFreq+0xe4>
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d022      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0x128>
 80065a2:	e043      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ae:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80066bc <HAL_RCC_GetSysClockFreq+0x1fc>
 80065b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b6:	4b3e      	ldr	r3, [pc, #248]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80065b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80065c6:	ed97 6a01 	vldr	s12, [r7, #4]
 80065ca:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80066c0 <HAL_RCC_GetSysClockFreq+0x200>
 80065ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80065d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065e6:	e046      	b.n	8006676 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80066bc <HAL_RCC_GetSysClockFreq+0x1fc>
 80065f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fa:	4b2d      	ldr	r3, [pc, #180]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80065fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800660a:	ed97 6a01 	vldr	s12, [r7, #4]
 800660e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80066c0 <HAL_RCC_GetSysClockFreq+0x200>
 8006612:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006616:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800661a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800661e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800662a:	e024      	b.n	8006676 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006644:	4b1a      	ldr	r3, [pc, #104]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800664c:	ee07 3a90 	vmov	s15, r3
 8006650:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006654:	ed97 6a01 	vldr	s12, [r7, #4]
 8006658:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80066c0 <HAL_RCC_GetSysClockFreq+0x200>
 800665c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006660:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006664:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006668:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800666c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006674:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006676:	4b0e      	ldr	r3, [pc, #56]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800667a:	0e1b      	lsrs	r3, r3, #24
 800667c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006680:	3301      	adds	r3, #1
 8006682:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800668e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800669a:	ee17 3a90 	vmov	r3, s15
 800669e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80066a0:	6a3b      	ldr	r3, [r7, #32]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	372c      	adds	r7, #44	@ 0x2c
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	46020c00 	.word	0x46020c00
 80066b4:	0800e820 	.word	0x0800e820
 80066b8:	00f42400 	.word	0x00f42400
 80066bc:	4b742400 	.word	0x4b742400
 80066c0:	46000000 	.word	0x46000000

080066c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80066c8:	f7ff fefa 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 80066cc:	4602      	mov	r2, r0
 80066ce:	4b07      	ldr	r3, [pc, #28]	@ (80066ec <HAL_RCC_GetHCLKFreq+0x28>)
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	4906      	ldr	r1, [pc, #24]	@ (80066f0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80066d8:	5ccb      	ldrb	r3, [r1, r3]
 80066da:	fa22 f303 	lsr.w	r3, r2, r3
 80066de:	4a05      	ldr	r2, [pc, #20]	@ (80066f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80066e0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80066e2:	4b04      	ldr	r3, [pc, #16]	@ (80066f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80066e4:	681b      	ldr	r3, [r3, #0]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	46020c00 	.word	0x46020c00
 80066f0:	0800e808 	.word	0x0800e808
 80066f4:	2000000c 	.word	0x2000000c

080066f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80066fc:	f7ff ffe2 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 8006700:	4602      	mov	r2, r0
 8006702:	4b05      	ldr	r3, [pc, #20]	@ (8006718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	091b      	lsrs	r3, r3, #4
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	4903      	ldr	r1, [pc, #12]	@ (800671c <HAL_RCC_GetPCLK1Freq+0x24>)
 800670e:	5ccb      	ldrb	r3, [r1, r3]
 8006710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006714:	4618      	mov	r0, r3
 8006716:	bd80      	pop	{r7, pc}
 8006718:	46020c00 	.word	0x46020c00
 800671c:	0800e818 	.word	0x0800e818

08006720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006724:	f7ff ffce 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 8006728:	4602      	mov	r2, r0
 800672a:	4b05      	ldr	r3, [pc, #20]	@ (8006740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	0a1b      	lsrs	r3, r3, #8
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	4903      	ldr	r1, [pc, #12]	@ (8006744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006736:	5ccb      	ldrb	r3, [r1, r3]
 8006738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800673c:	4618      	mov	r0, r3
 800673e:	bd80      	pop	{r7, pc}
 8006740:	46020c00 	.word	0x46020c00
 8006744:	0800e818 	.word	0x0800e818

08006748 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800674c:	f7ff ffba 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 8006750:	4602      	mov	r2, r0
 8006752:	4b05      	ldr	r3, [pc, #20]	@ (8006768 <HAL_RCC_GetPCLK3Freq+0x20>)
 8006754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006756:	091b      	lsrs	r3, r3, #4
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	4903      	ldr	r1, [pc, #12]	@ (800676c <HAL_RCC_GetPCLK3Freq+0x24>)
 800675e:	5ccb      	ldrb	r3, [r1, r3]
 8006760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006764:	4618      	mov	r0, r3
 8006766:	bd80      	pop	{r7, pc}
 8006768:	46020c00 	.word	0x46020c00
 800676c:	0800e818 	.word	0x0800e818

08006770 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006778:	4b3e      	ldr	r3, [pc, #248]	@ (8006874 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800677a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006786:	f7fe fd4f 	bl	8005228 <HAL_PWREx_GetVoltageRange>
 800678a:	6178      	str	r0, [r7, #20]
 800678c:	e019      	b.n	80067c2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800678e:	4b39      	ldr	r3, [pc, #228]	@ (8006874 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006790:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006794:	4a37      	ldr	r2, [pc, #220]	@ (8006874 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006796:	f043 0304 	orr.w	r3, r3, #4
 800679a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800679e:	4b35      	ldr	r3, [pc, #212]	@ (8006874 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80067a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80067ac:	f7fe fd3c 	bl	8005228 <HAL_PWREx_GetVoltageRange>
 80067b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80067b2:	4b30      	ldr	r3, [pc, #192]	@ (8006874 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80067b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006874 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80067ba:	f023 0304 	bic.w	r3, r3, #4
 80067be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067c8:	d003      	beq.n	80067d2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067d0:	d109      	bne.n	80067e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067d8:	d202      	bcs.n	80067e0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80067da:	2301      	movs	r3, #1
 80067dc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80067de:	e033      	b.n	8006848 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80067e0:	2300      	movs	r3, #0
 80067e2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80067e4:	e030      	b.n	8006848 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067ec:	d208      	bcs.n	8006800 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067f4:	d102      	bne.n	80067fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80067f6:	2303      	movs	r3, #3
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	e025      	b.n	8006848 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e035      	b.n	800686c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006806:	d90f      	bls.n	8006828 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006814:	d902      	bls.n	800681c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006816:	2300      	movs	r3, #0
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	e015      	b.n	8006848 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800681c:	2301      	movs	r3, #1
 800681e:	613b      	str	r3, [r7, #16]
 8006820:	e012      	b.n	8006848 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006822:	2300      	movs	r3, #0
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	e00f      	b.n	8006848 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800682e:	d109      	bne.n	8006844 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006836:	d102      	bne.n	800683e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006838:	2301      	movs	r3, #1
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	e004      	b.n	8006848 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800683e:	2302      	movs	r3, #2
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	e001      	b.n	8006848 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006844:	2301      	movs	r3, #1
 8006846:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006848:	4b0b      	ldr	r3, [pc, #44]	@ (8006878 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f023 020f 	bic.w	r2, r3, #15
 8006850:	4909      	ldr	r1, [pc, #36]	@ (8006878 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006858:	4b07      	ldr	r3, [pc, #28]	@ (8006878 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 030f 	and.w	r3, r3, #15
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	429a      	cmp	r2, r3
 8006864:	d001      	beq.n	800686a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	46020c00 	.word	0x46020c00
 8006878:	40022000 	.word	0x40022000

0800687c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800687c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006880:	b0c4      	sub	sp, #272	@ 0x110
 8006882:	af00      	add	r7, sp, #0
 8006884:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006888:	2300      	movs	r3, #0
 800688a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800688e:	2300      	movs	r3, #0
 8006890:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f002 0401 	and.w	r4, r2, #1
 80068a0:	2500      	movs	r5, #0
 80068a2:	ea54 0305 	orrs.w	r3, r4, r5
 80068a6:	d00b      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80068a8:	4bd5      	ldr	r3, [pc, #852]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80068aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068ae:	f023 0103 	bic.w	r1, r3, #3
 80068b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b8:	4ad1      	ldr	r2, [pc, #836]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80068ba:	430b      	orrs	r3, r1
 80068bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	f002 0802 	and.w	r8, r2, #2
 80068cc:	f04f 0900 	mov.w	r9, #0
 80068d0:	ea58 0309 	orrs.w	r3, r8, r9
 80068d4:	d00b      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80068d6:	4bca      	ldr	r3, [pc, #808]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80068d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068dc:	f023 010c 	bic.w	r1, r3, #12
 80068e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e6:	4ac6      	ldr	r2, [pc, #792]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80068e8:	430b      	orrs	r3, r1
 80068ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f002 0a04 	and.w	sl, r2, #4
 80068fa:	f04f 0b00 	mov.w	fp, #0
 80068fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8006902:	d00b      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006904:	4bbe      	ldr	r3, [pc, #760]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800690a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800690e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006914:	4aba      	ldr	r2, [pc, #744]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006916:	430b      	orrs	r3, r1
 8006918:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800691c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f002 0308 	and.w	r3, r2, #8
 8006928:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800692c:	2300      	movs	r3, #0
 800692e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006932:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006936:	460b      	mov	r3, r1
 8006938:	4313      	orrs	r3, r2
 800693a:	d00b      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800693c:	4bb0      	ldr	r3, [pc, #704]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800693e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006942:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800694a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800694c:	4aac      	ldr	r2, [pc, #688]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800694e:	430b      	orrs	r3, r1
 8006950:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f002 0310 	and.w	r3, r2, #16
 8006960:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006964:	2300      	movs	r3, #0
 8006966:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800696a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800696e:	460b      	mov	r3, r1
 8006970:	4313      	orrs	r3, r2
 8006972:	d00b      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006974:	4ba2      	ldr	r3, [pc, #648]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800697a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800697e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006984:	4a9e      	ldr	r2, [pc, #632]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006986:	430b      	orrs	r3, r1
 8006988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800698c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800699c:	2300      	movs	r3, #0
 800699e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4313      	orrs	r3, r2
 80069aa:	d00b      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80069ac:	4b94      	ldr	r3, [pc, #592]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80069ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80069b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069bc:	4a90      	ldr	r2, [pc, #576]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80069be:	430b      	orrs	r3, r1
 80069c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	f002 0320 	and.w	r3, r2, #32
 80069d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80069da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80069de:	460b      	mov	r3, r1
 80069e0:	4313      	orrs	r3, r2
 80069e2:	d00b      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80069e4:	4b86      	ldr	r3, [pc, #536]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80069e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069ea:	f023 0107 	bic.w	r1, r3, #7
 80069ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069f4:	4a82      	ldr	r2, [pc, #520]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80069f6:	430b      	orrs	r3, r1
 80069f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006a12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	d00b      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006a1c:	4b78      	ldr	r3, [pc, #480]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a22:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a2c:	4a74      	ldr	r2, [pc, #464]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a44:	2300      	movs	r3, #0
 8006a46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4313      	orrs	r3, r2
 8006a52:	d00b      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006a54:	4b6a      	ldr	r3, [pc, #424]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a64:	4a66      	ldr	r2, [pc, #408]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006a66:	430b      	orrs	r3, r1
 8006a68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006a78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	d00b      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a9c:	4a58      	ldr	r2, [pc, #352]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006aba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	d00b      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006ac4:	4b4e      	ldr	r3, [pc, #312]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006aca:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8006ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ad2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8006adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006aec:	2300      	movs	r3, #0
 8006aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006af2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4313      	orrs	r3, r2
 8006afa:	d00b      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8006afc:	4b40      	ldr	r3, [pc, #256]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006afe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b02:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8006b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b0c:	4a3c      	ldr	r2, [pc, #240]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8006b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b24:	2300      	movs	r3, #0
 8006b26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b2a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4313      	orrs	r3, r2
 8006b32:	d00c      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8006b34:	4b32      	ldr	r3, [pc, #200]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006b36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b3a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b46:	4a2e      	ldr	r2, [pc, #184]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	d00c      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006b6e:	4b24      	ldr	r3, [pc, #144]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b74:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b80:	4a1f      	ldr	r2, [pc, #124]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006b82:	430b      	orrs	r3, r1
 8006b84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006b94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	d00c      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006ba8:	4b15      	ldr	r3, [pc, #84]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bae:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bba:	4a11      	ldr	r2, [pc, #68]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006bce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006bd8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4313      	orrs	r3, r2
 8006be0:	d010      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006be2:	4b07      	ldr	r3, [pc, #28]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006be8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bf4:	4a02      	ldr	r2, [pc, #8]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006bf6:	430b      	orrs	r3, r1
 8006bf8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006bfc:	e002      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8006bfe:	bf00      	nop
 8006c00:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006c10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c14:	2300      	movs	r3, #0
 8006c16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c1a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4313      	orrs	r3, r2
 8006c22:	d04c      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c2c:	2b80      	cmp	r3, #128	@ 0x80
 8006c2e:	d02d      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006c30:	2b80      	cmp	r3, #128	@ 0x80
 8006c32:	d827      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006c34:	2b60      	cmp	r3, #96	@ 0x60
 8006c36:	d02b      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006c38:	2b60      	cmp	r3, #96	@ 0x60
 8006c3a:	d823      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006c3c:	2b40      	cmp	r3, #64	@ 0x40
 8006c3e:	d006      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8006c40:	2b40      	cmp	r3, #64	@ 0x40
 8006c42:	d81f      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	d011      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006c4c:	e01a      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c4e:	4bbe      	ldr	r3, [pc, #760]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c52:	4abd      	ldr	r2, [pc, #756]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c58:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c5a:	e01a      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c60:	3308      	adds	r3, #8
 8006c62:	4618      	mov	r0, r3
 8006c64:	f002 fc32 	bl	80094cc <RCCEx_PLL2_Config>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c6e:	e010      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c74:	332c      	adds	r3, #44	@ 0x2c
 8006c76:	4618      	mov	r0, r3
 8006c78:	f002 fcc0 	bl	80095fc <RCCEx_PLL3_Config>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c82:	e006      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006c8a:	e002      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8006c8c:	bf00      	nop
 8006c8e:	e000      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8006c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c92:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10d      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006c9a:	4bab      	ldr	r3, [pc, #684]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ca0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ca8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cac:	4aa6      	ldr	r2, [pc, #664]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006cb4:	e003      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006cba:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006cca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cd4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	d053      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ce2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cea:	d033      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8006cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf0:	d82c      	bhi.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cf6:	d02f      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8006cf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cfc:	d826      	bhi.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d02:	d008      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8006d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d08:	d820      	bhi.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d12:	d011      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006d14:	e01a      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d16:	4b8c      	ldr	r3, [pc, #560]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1a:	4a8b      	ldr	r2, [pc, #556]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d20:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006d22:	e01a      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d28:	3308      	adds	r3, #8
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f002 fbce 	bl	80094cc <RCCEx_PLL2_Config>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006d36:	e010      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d3c:	332c      	adds	r3, #44	@ 0x2c
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f002 fc5c 	bl	80095fc <RCCEx_PLL3_Config>
 8006d44:	4603      	mov	r3, r0
 8006d46:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006d4a:	e006      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006d52:	e002      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8006d54:	bf00      	nop
 8006d56:	e000      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8006d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10d      	bne.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006d62:	4b79      	ldr	r3, [pc, #484]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d68:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d74:	4a74      	ldr	r2, [pc, #464]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d76:	430b      	orrs	r3, r1
 8006d78:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006d7c:	e003      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006d82:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006d92:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d94:	2300      	movs	r3, #0
 8006d96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d98:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	d046      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006da6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006daa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006dae:	d028      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006db0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006db4:	d821      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8006db6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dba:	d022      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006dbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dc0:	d81b      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8006dc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dc6:	d01c      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006dc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dcc:	d815      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8006dce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dd2:	d008      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8006dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dd8:	d80f      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d011      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de2:	d00e      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006de4:	e009      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dea:	3308      	adds	r3, #8
 8006dec:	4618      	mov	r0, r3
 8006dee:	f002 fb6d 	bl	80094cc <RCCEx_PLL2_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006df8:	e004      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006e00:	e000      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8006e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e04:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10d      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e12:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e1e:	4a4a      	ldr	r2, [pc, #296]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e20:	430b      	orrs	r3, r1
 8006e22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006e26:	e003      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e28:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006e2c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006e3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e3e:	2300      	movs	r3, #0
 8006e40:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e42:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006e46:	460b      	mov	r3, r1
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	d03f      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d81e      	bhi.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8006e58:	a201      	add	r2, pc, #4	@ (adr r2, 8006e60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e9f 	.word	0x08006e9f
 8006e64:	08006e75 	.word	0x08006e75
 8006e68:	08006e83 	.word	0x08006e83
 8006e6c:	08006e9f 	.word	0x08006e9f
 8006e70:	08006e9f 	.word	0x08006e9f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e74:	4b34      	ldr	r3, [pc, #208]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e78:	4a33      	ldr	r2, [pc, #204]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e7e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006e80:	e00e      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e86:	332c      	adds	r3, #44	@ 0x2c
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f002 fbb7 	bl	80095fc <RCCEx_PLL3_Config>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006e94:	e004      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006e9c:	e000      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8006e9e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ea0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10d      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006ea8:	4b27      	ldr	r3, [pc, #156]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006eaa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006eae:	f023 0107 	bic.w	r1, r3, #7
 8006eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006eba:	4a23      	ldr	r2, [pc, #140]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006ec2:	e003      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006ec8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eda:	2300      	movs	r3, #0
 8006edc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ede:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	d04c      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ef0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ef4:	d02a      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8006ef6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006efa:	d821      	bhi.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8006efc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f00:	d026      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8006f02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f06:	d81b      	bhi.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8006f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f0c:	d00e      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f12:	d815      	bhi.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01d      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8006f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f1c:	d110      	bne.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f22:	4a09      	ldr	r2, [pc, #36]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f28:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006f2a:	e014      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f30:	332c      	adds	r3, #44	@ 0x2c
 8006f32:	4618      	mov	r0, r3
 8006f34:	f002 fb62 	bl	80095fc <RCCEx_PLL3_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006f3e:	e00a      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006f46:	e006      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8006f48:	46020c00 	.word	0x46020c00
        break;
 8006f4c:	bf00      	nop
 8006f4e:	e002      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8006f50:	bf00      	nop
 8006f52:	e000      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8006f54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006f56:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10d      	bne.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006f5e:	4baf      	ldr	r3, [pc, #700]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f64:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f70:	4aaa      	ldr	r2, [pc, #680]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006f72:	430b      	orrs	r3, r1
 8006f74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006f78:	e003      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006f7e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f90:	2300      	movs	r3, #0
 8006f92:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	f000 80b5 	beq.w	800710a <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fa6:	4b9d      	ldr	r3, [pc, #628]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d113      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fb4:	4b99      	ldr	r3, [pc, #612]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fba:	4a98      	ldr	r2, [pc, #608]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006fbc:	f043 0304 	orr.w	r3, r3, #4
 8006fc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006fc4:	4b95      	ldr	r3, [pc, #596]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006fdc:	4b90      	ldr	r3, [pc, #576]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8006fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe0:	4a8f      	ldr	r2, [pc, #572]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fe8:	f7fc fd78 	bl	8003adc <HAL_GetTick>
 8006fec:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006ff0:	e00b      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ff2:	f7fc fd73 	bl	8003adc <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d903      	bls.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007008:	e005      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800700a:	4b85      	ldr	r3, [pc, #532]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800700c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0ed      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8007016:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800701a:	2b00      	cmp	r3, #0
 800701c:	d165      	bne.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800701e:	4b7f      	ldr	r3, [pc, #508]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007024:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007028:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800702c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007030:	2b00      	cmp	r3, #0
 8007032:	d023      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x800>
 8007034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007038:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800703c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007040:	4293      	cmp	r3, r2
 8007042:	d01b      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007044:	4b75      	ldr	r3, [pc, #468]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800704a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800704e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007052:	4b72      	ldr	r3, [pc, #456]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007058:	4a70      	ldr	r2, [pc, #448]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800705a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800705e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007062:	4b6e      	ldr	r3, [pc, #440]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007068:	4a6c      	ldr	r2, [pc, #432]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800706a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800706e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007072:	4a6a      	ldr	r2, [pc, #424]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007078:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800707c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d019      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007088:	f7fc fd28 	bl	8003adc <HAL_GetTick>
 800708c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007090:	e00d      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007092:	f7fc fd23 	bl	8003adc <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709c:	1ad2      	subs	r2, r2, r3
 800709e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d903      	bls.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 80070ac:	e006      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070ae:	4b5b      	ldr	r3, [pc, #364]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80070b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0ea      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 80070bc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10d      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80070c4:	4b55      	ldr	r3, [pc, #340]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80070c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80070ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80070d6:	4a51      	ldr	r2, [pc, #324]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80070d8:	430b      	orrs	r3, r1
 80070da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80070de:	e008      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070e0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80070e4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 80070e8:	e003      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ea:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80070ee:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070f2:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d107      	bne.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070fa:	4b48      	ldr	r3, [pc, #288]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80070fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007100:	4a46      	ldr	r2, [pc, #280]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007102:	f023 0304 	bic.w	r3, r3, #4
 8007106:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800710a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007116:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007118:	2300      	movs	r3, #0
 800711a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800711c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007120:	460b      	mov	r3, r1
 8007122:	4313      	orrs	r3, r2
 8007124:	d042      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800712a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800712e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007132:	d022      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007134:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007138:	d81b      	bhi.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800713a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800713e:	d011      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8007140:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007144:	d815      	bhi.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d019      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x902>
 800714a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800714e:	d110      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007154:	3308      	adds	r3, #8
 8007156:	4618      	mov	r0, r3
 8007158:	f002 f9b8 	bl	80094cc <RCCEx_PLL2_Config>
 800715c:	4603      	mov	r3, r0
 800715e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007162:	e00d      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007164:	4b2d      	ldr	r3, [pc, #180]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007168:	4a2c      	ldr	r2, [pc, #176]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800716a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800716e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007170:	e006      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007178:	e002      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800717a:	bf00      	nop
 800717c:	e000      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800717e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007180:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10d      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007188:	4b24      	ldr	r3, [pc, #144]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800718a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800718e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007196:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800719a:	4a20      	ldr	r2, [pc, #128]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800719c:	430b      	orrs	r3, r1
 800719e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80071a2:	e003      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80071a8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80071b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80071ba:	2300      	movs	r3, #0
 80071bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80071be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80071c2:	460b      	mov	r3, r1
 80071c4:	4313      	orrs	r3, r2
 80071c6:	d031      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80071c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80071d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071d4:	d00b      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x972>
 80071d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071da:	d804      	bhi.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d008      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80071e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071e4:	d007      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80071ec:	e004      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80071ee:	bf00      	nop
 80071f0:	e002      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80071f2:	bf00      	nop
 80071f4:	e000      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80071f6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80071f8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d111      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007200:	4b06      	ldr	r3, [pc, #24]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007202:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007206:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800720a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800720e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007212:	4a02      	ldr	r2, [pc, #8]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007214:	430b      	orrs	r3, r1
 8007216:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800721a:	e007      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800721c:	46020c00 	.word	0x46020c00
 8007220:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007224:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007228:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800722c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800723a:	2300      	movs	r3, #0
 800723c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800723e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007242:	460b      	mov	r3, r1
 8007244:	4313      	orrs	r3, r2
 8007246:	d00c      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007248:	4bb2      	ldr	r3, [pc, #712]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800724a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800724e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8007252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007256:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800725a:	4aae      	ldr	r2, [pc, #696]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800725c:	430b      	orrs	r3, r1
 800725e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800726e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007270:	2300      	movs	r3, #0
 8007272:	647b      	str	r3, [r7, #68]	@ 0x44
 8007274:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007278:	460b      	mov	r3, r1
 800727a:	4313      	orrs	r3, r2
 800727c:	d019      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800727e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007282:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007286:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800728a:	d105      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800728c:	4ba1      	ldr	r3, [pc, #644]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007290:	4aa0      	ldr	r2, [pc, #640]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007296:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007298:	4b9e      	ldr	r3, [pc, #632]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800729a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800729e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80072a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072aa:	4a9a      	ldr	r2, [pc, #616]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80072ac:	430b      	orrs	r3, r1
 80072ae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80072b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80072be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072c0:	2300      	movs	r3, #0
 80072c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80072c8:	460b      	mov	r3, r1
 80072ca:	4313      	orrs	r3, r2
 80072cc:	d00c      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80072ce:	4b91      	ldr	r3, [pc, #580]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80072d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072d4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80072d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80072e0:	4a8c      	ldr	r2, [pc, #560]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80072e2:	430b      	orrs	r3, r1
 80072e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80072e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80072f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80072f6:	2300      	movs	r3, #0
 80072f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80072fe:	460b      	mov	r3, r1
 8007300:	4313      	orrs	r3, r2
 8007302:	d00c      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007304:	4b83      	ldr	r3, [pc, #524]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800730a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800730e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007312:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007316:	4a7f      	ldr	r2, [pc, #508]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007318:	430b      	orrs	r3, r1
 800731a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800731e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800732a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800732c:	2300      	movs	r3, #0
 800732e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007330:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007334:	460b      	mov	r3, r1
 8007336:	4313      	orrs	r3, r2
 8007338:	d00c      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800733a:	4b76      	ldr	r3, [pc, #472]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800733c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007340:	f023 0218 	bic.w	r2, r3, #24
 8007344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007348:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800734c:	4971      	ldr	r1, [pc, #452]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800734e:	4313      	orrs	r3, r2
 8007350:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007360:	623b      	str	r3, [r7, #32]
 8007362:	2300      	movs	r3, #0
 8007364:	627b      	str	r3, [r7, #36]	@ 0x24
 8007366:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800736a:	460b      	mov	r3, r1
 800736c:	4313      	orrs	r3, r2
 800736e:	d032      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007374:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007378:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800737c:	d105      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800737e:	4b65      	ldr	r3, [pc, #404]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007382:	4a64      	ldr	r2, [pc, #400]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007388:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800738a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800738e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007392:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007396:	d108      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800739c:	3308      	adds	r3, #8
 800739e:	4618      	mov	r0, r3
 80073a0:	f002 f894 	bl	80094cc <RCCEx_PLL2_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 80073aa:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10d      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80073b2:	4b58      	ldr	r3, [pc, #352]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80073b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80073c4:	4953      	ldr	r1, [pc, #332]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80073cc:	e003      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ce:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80073d2:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80073d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	2100      	movs	r1, #0
 80073e0:	61b9      	str	r1, [r7, #24]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	61fb      	str	r3, [r7, #28]
 80073e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80073ec:	460b      	mov	r3, r1
 80073ee:	4313      	orrs	r3, r2
 80073f0:	d04a      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80073f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80073fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80073fe:	d01e      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8007400:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007404:	d825      	bhi.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8007406:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800740a:	d00e      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800740c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007410:	d81f      	bhi.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d021      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8007416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800741a:	d11a      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800741c:	4b3d      	ldr	r3, [pc, #244]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800741e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007420:	4a3c      	ldr	r2, [pc, #240]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007426:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007428:	e018      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800742a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800742e:	3308      	adds	r3, #8
 8007430:	4618      	mov	r0, r3
 8007432:	f002 f84b 	bl	80094cc <RCCEx_PLL2_Config>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800743c:	e00e      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800743e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007442:	332c      	adds	r3, #44	@ 0x2c
 8007444:	4618      	mov	r0, r3
 8007446:	f002 f8d9 	bl	80095fc <RCCEx_PLL3_Config>
 800744a:	4603      	mov	r3, r0
 800744c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007450:	e004      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007458:	e000      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 800745a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800745c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10d      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8007464:	4b2b      	ldr	r3, [pc, #172]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007466:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800746a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800746e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007472:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007476:	4927      	ldr	r1, [pc, #156]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007478:	4313      	orrs	r3, r2
 800747a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800747e:	e003      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007480:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007484:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	2300      	movs	r3, #0
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800749e:	460b      	mov	r3, r1
 80074a0:	4313      	orrs	r3, r2
 80074a2:	d03d      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80074a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074b0:	d00e      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80074b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074b6:	d815      	bhi.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d017      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80074bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074c0:	d110      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c2:	4b14      	ldr	r3, [pc, #80]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80074c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c6:	4a13      	ldr	r2, [pc, #76]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80074c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074cc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80074ce:	e00e      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074d4:	3308      	adds	r3, #8
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 fff8 	bl	80094cc <RCCEx_PLL2_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80074e2:	e004      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80074ea:	e000      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 80074ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 80074ee:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d110      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80074f6:	4b07      	ldr	r3, [pc, #28]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80074f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074fc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007508:	4902      	ldr	r1, [pc, #8]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007510:	e006      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8007512:	bf00      	nop
 8007514:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007518:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800751c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800752c:	60bb      	str	r3, [r7, #8]
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
 8007532:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007536:	460b      	mov	r3, r1
 8007538:	4313      	orrs	r3, r2
 800753a:	d00c      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800753c:	4b2c      	ldr	r3, [pc, #176]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800753e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007542:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800754a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800754e:	4928      	ldr	r1, [pc, #160]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007550:	4313      	orrs	r3, r2
 8007552:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8007556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	2100      	movs	r1, #0
 8007560:	6039      	str	r1, [r7, #0]
 8007562:	f003 0308 	and.w	r3, r3, #8
 8007566:	607b      	str	r3, [r7, #4]
 8007568:	e9d7 1200 	ldrd	r1, r2, [r7]
 800756c:	460b      	mov	r3, r1
 800756e:	4313      	orrs	r3, r2
 8007570:	d036      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8007572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007576:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800757a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800757e:	d00d      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007580:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007584:	d811      	bhi.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8007586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800758a:	d012      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800758c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007590:	d80b      	bhi.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00d      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800759a:	d106      	bne.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800759c:	4b14      	ldr	r3, [pc, #80]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800759e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a0:	4a13      	ldr	r2, [pc, #76]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80075a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075a6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80075a8:	e004      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80075b0:	e000      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 80075b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10d      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80075bc:	4b0c      	ldr	r3, [pc, #48]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80075be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80075c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80075ce:	4908      	ldr	r1, [pc, #32]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80075d6:	e003      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80075dc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80075e0:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80075ea:	46bd      	mov	sp, r7
 80075ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075f0:	46020c00 	.word	0x46020c00

080075f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b089      	sub	sp, #36	@ 0x24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80075fc:	4ba6      	ldr	r3, [pc, #664]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80075fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007604:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007606:	4ba4      	ldr	r3, [pc, #656]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007610:	4ba1      	ldr	r3, [pc, #644]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007614:	0a1b      	lsrs	r3, r3, #8
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	3301      	adds	r3, #1
 800761c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800761e:	4b9e      	ldr	r3, [pc, #632]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007622:	091b      	lsrs	r3, r3, #4
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800762a:	4b9b      	ldr	r3, [pc, #620]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800762c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762e:	08db      	lsrs	r3, r3, #3
 8007630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	fb02 f303 	mul.w	r3, r2, r3
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007642:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b03      	cmp	r3, #3
 800764a:	d062      	beq.n	8007712 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2b03      	cmp	r3, #3
 8007650:	f200 8081 	bhi.w	8007756 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d024      	beq.n	80076a4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d17a      	bne.n	8007756 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800789c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800766e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007672:	4b89      	ldr	r3, [pc, #548]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007682:	ed97 6a02 	vldr	s12, [r7, #8]
 8007686:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800768a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800768e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007696:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800769a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076a2:	e08f      	b.n	80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80076a4:	4b7c      	ldr	r3, [pc, #496]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d005      	beq.n	80076bc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80076b0:	4b79      	ldr	r3, [pc, #484]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	0f1b      	lsrs	r3, r3, #28
 80076b6:	f003 030f 	and.w	r3, r3, #15
 80076ba:	e006      	b.n	80076ca <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80076bc:	4b76      	ldr	r3, [pc, #472]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80076be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076c2:	041b      	lsls	r3, r3, #16
 80076c4:	0f1b      	lsrs	r3, r3, #28
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	4a76      	ldr	r2, [pc, #472]	@ (80078a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80076cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076d0:	ee07 3a90 	vmov	s15, r3
 80076d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	ee07 3a90 	vmov	s15, r3
 80076ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80076f4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80076f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007700:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007704:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007710:	e058      	b.n	80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800789c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007724:	4b5c      	ldr	r3, [pc, #368]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800772c:	ee07 3a90 	vmov	s15, r3
 8007730:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007734:	ed97 6a02 	vldr	s12, [r7, #8]
 8007738:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800773c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007740:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007744:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007748:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800774c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007750:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007754:	e036      	b.n	80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007756:	4b50      	ldr	r3, [pc, #320]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8007762:	4b4d      	ldr	r3, [pc, #308]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	0f1b      	lsrs	r3, r3, #28
 8007768:	f003 030f 	and.w	r3, r3, #15
 800776c:	e006      	b.n	800777c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800776e:	4b4a      	ldr	r3, [pc, #296]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007774:	041b      	lsls	r3, r3, #16
 8007776:	0f1b      	lsrs	r3, r3, #28
 8007778:	f003 030f 	and.w	r3, r3, #15
 800777c:	4a49      	ldr	r2, [pc, #292]	@ (80078a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800777e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80077a6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80077aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80077ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077c2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80077c4:	4b34      	ldr	r3, [pc, #208]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80077c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d017      	beq.n	8007800 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80077d0:	4b31      	ldr	r3, [pc, #196]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80077d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077d4:	0a5b      	lsrs	r3, r3, #9
 80077d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80077e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80077ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f6:	ee17 2a90 	vmov	r2, s15
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	e002      	b.n	8007806 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007806:	4b24      	ldr	r3, [pc, #144]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800780a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d017      	beq.n	8007842 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007812:	4b21      	ldr	r3, [pc, #132]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007816:	0c1b      	lsrs	r3, r3, #16
 8007818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800781c:	ee07 3a90 	vmov	s15, r3
 8007820:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007824:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007828:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800782c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007838:	ee17 2a90 	vmov	r2, s15
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	605a      	str	r2, [r3, #4]
 8007840:	e002      	b.n	8007848 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007848:	4b13      	ldr	r3, [pc, #76]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800784a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d017      	beq.n	8007884 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007854:	4b10      	ldr	r3, [pc, #64]	@ (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007858:	0e1b      	lsrs	r3, r3, #24
 800785a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8007866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800786a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800786e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800787a:	ee17 2a90 	vmov	r2, s15
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007882:	e002      	b.n	800788a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	609a      	str	r2, [r3, #8]
}
 800788a:	bf00      	nop
 800788c:	3724      	adds	r7, #36	@ 0x24
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	46020c00 	.word	0x46020c00
 800789c:	4b742400 	.word	0x4b742400
 80078a0:	46000000 	.word	0x46000000
 80078a4:	0800e820 	.word	0x0800e820

080078a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b089      	sub	sp, #36	@ 0x24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80078b0:	4ba6      	ldr	r3, [pc, #664]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80078b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80078ba:	4ba4      	ldr	r3, [pc, #656]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80078c4:	4ba1      	ldr	r3, [pc, #644]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80078c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c8:	0a1b      	lsrs	r3, r3, #8
 80078ca:	f003 030f 	and.w	r3, r3, #15
 80078ce:	3301      	adds	r3, #1
 80078d0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80078d2:	4b9e      	ldr	r3, [pc, #632]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80078d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d6:	091b      	lsrs	r3, r3, #4
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80078de:	4b9b      	ldr	r3, [pc, #620]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80078e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e2:	08db      	lsrs	r3, r3, #3
 80078e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	fb02 f303 	mul.w	r3, r2, r3
 80078ee:	ee07 3a90 	vmov	s15, r3
 80078f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d062      	beq.n	80079c6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2b03      	cmp	r3, #3
 8007904:	f200 8081 	bhi.w	8007a0a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d024      	beq.n	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d17a      	bne.n	8007a0a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007926:	4b89      	ldr	r3, [pc, #548]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007936:	ed97 6a02 	vldr	s12, [r7, #8]
 800793a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800793e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007942:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800794a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800794e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007956:	e08f      	b.n	8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007958:	4b7c      	ldr	r3, [pc, #496]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d005      	beq.n	8007970 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007964:	4b79      	ldr	r3, [pc, #484]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	0f1b      	lsrs	r3, r3, #28
 800796a:	f003 030f 	and.w	r3, r3, #15
 800796e:	e006      	b.n	800797e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8007970:	4b76      	ldr	r3, [pc, #472]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007972:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007976:	041b      	lsls	r3, r3, #16
 8007978:	0f1b      	lsrs	r3, r3, #28
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	4a76      	ldr	r2, [pc, #472]	@ (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	ee07 3a90 	vmov	s15, r3
 80079a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80079a8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80079ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80079bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079c4:	e058      	b.n	8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80079d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d8:	4b5c      	ldr	r3, [pc, #368]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80079da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e0:	ee07 3a90 	vmov	s15, r3
 80079e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80079e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80079ec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80079f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80079f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80079f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a08:	e036      	b.n	8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007a0a:	4b50      	ldr	r3, [pc, #320]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d005      	beq.n	8007a22 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8007a16:	4b4d      	ldr	r3, [pc, #308]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	0f1b      	lsrs	r3, r3, #28
 8007a1c:	f003 030f 	and.w	r3, r3, #15
 8007a20:	e006      	b.n	8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8007a22:	4b4a      	ldr	r3, [pc, #296]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a28:	041b      	lsls	r3, r3, #16
 8007a2a:	0f1b      	lsrs	r3, r3, #28
 8007a2c:	f003 030f 	and.w	r3, r3, #15
 8007a30:	4a49      	ldr	r2, [pc, #292]	@ (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	ee07 3a90 	vmov	s15, r3
 8007a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a5a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a76:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007a78:	4b34      	ldr	r3, [pc, #208]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d017      	beq.n	8007ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007a84:	4b31      	ldr	r3, [pc, #196]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a88:	0a5b      	lsrs	r3, r3, #9
 8007a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a8e:	ee07 3a90 	vmov	s15, r3
 8007a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007a96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aaa:	ee17 2a90 	vmov	r2, s15
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	601a      	str	r2, [r3, #0]
 8007ab2:	e002      	b.n	8007aba <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007aba:	4b24      	ldr	r3, [pc, #144]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d017      	beq.n	8007af6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007ac6:	4b21      	ldr	r3, [pc, #132]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aca:	0c1b      	lsrs	r3, r3, #16
 8007acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ad0:	ee07 3a90 	vmov	s15, r3
 8007ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007ad8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007adc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007ae0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aec:	ee17 2a90 	vmov	r2, s15
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	605a      	str	r2, [r3, #4]
 8007af4:	e002      	b.n	8007afc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007afc:	4b13      	ldr	r3, [pc, #76]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d017      	beq.n	8007b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007b08:	4b10      	ldr	r3, [pc, #64]	@ (8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b0c:	0e1b      	lsrs	r3, r3, #24
 8007b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8007b1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b2e:	ee17 2a90 	vmov	r2, s15
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b36:	e002      	b.n	8007b3e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	609a      	str	r2, [r3, #8]
}
 8007b3e:	bf00      	nop
 8007b40:	3724      	adds	r7, #36	@ 0x24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	46020c00 	.word	0x46020c00
 8007b50:	4b742400 	.word	0x4b742400
 8007b54:	46000000 	.word	0x46000000
 8007b58:	0800e820 	.word	0x0800e820

08007b5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b089      	sub	sp, #36	@ 0x24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007b64:	4ba6      	ldr	r3, [pc, #664]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007b6e:	4ba4      	ldr	r3, [pc, #656]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007b78:	4ba1      	ldr	r3, [pc, #644]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b7c:	0a1b      	lsrs	r3, r3, #8
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	3301      	adds	r3, #1
 8007b84:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007b86:	4b9e      	ldr	r3, [pc, #632]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8a:	091b      	lsrs	r3, r3, #4
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007b92:	4b9b      	ldr	r3, [pc, #620]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b96:	08db      	lsrs	r3, r3, #3
 8007b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ba2:	ee07 3a90 	vmov	s15, r3
 8007ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007baa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d062      	beq.n	8007c7a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	f200 8081 	bhi.w	8007cbe <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d024      	beq.n	8007c0c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d17a      	bne.n	8007cbe <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bda:	4b89      	ldr	r3, [pc, #548]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bea:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bee:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c06:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8007c0a:	e08f      	b.n	8007d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007c0c:	4b7c      	ldr	r3, [pc, #496]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d005      	beq.n	8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007c18:	4b79      	ldr	r3, [pc, #484]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	0f1b      	lsrs	r3, r3, #28
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	e006      	b.n	8007c32 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8007c24:	4b76      	ldr	r3, [pc, #472]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c2a:	041b      	lsls	r3, r3, #16
 8007c2c:	0f1b      	lsrs	r3, r3, #28
 8007c2e:	f003 030f 	and.w	r3, r3, #15
 8007c32:	4a76      	ldr	r2, [pc, #472]	@ (8007e0c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c38:	ee07 3a90 	vmov	s15, r3
 8007c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	ee07 3a90 	vmov	s15, r3
 8007c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c58:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c5c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c78:	e058      	b.n	8007d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	ee07 3a90 	vmov	s15, r3
 8007c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c84:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ca0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cbc:	e036      	b.n	8007d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007cbe:	4b50      	ldr	r3, [pc, #320]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8007cca:	4b4d      	ldr	r3, [pc, #308]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	0f1b      	lsrs	r3, r3, #28
 8007cd0:	f003 030f 	and.w	r3, r3, #15
 8007cd4:	e006      	b.n	8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8007cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cdc:	041b      	lsls	r3, r3, #16
 8007cde:	0f1b      	lsrs	r3, r3, #28
 8007ce0:	f003 030f 	and.w	r3, r3, #15
 8007ce4:	4a49      	ldr	r2, [pc, #292]	@ (8007e0c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	ee07 3a90 	vmov	s15, r3
 8007cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d0e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d2a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007d2c:	4b34      	ldr	r3, [pc, #208]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d017      	beq.n	8007d68 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007d38:	4b31      	ldr	r3, [pc, #196]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d3c:	0a5b      	lsrs	r3, r3, #9
 8007d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007d4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d5e:	ee17 2a90 	vmov	r2, s15
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	e002      	b.n	8007d6e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007d6e:	4b24      	ldr	r3, [pc, #144]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d017      	beq.n	8007daa <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007d7a:	4b21      	ldr	r3, [pc, #132]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d7e:	0c1b      	lsrs	r3, r3, #16
 8007d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d84:	ee07 3a90 	vmov	s15, r3
 8007d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007d8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d90:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007da0:	ee17 2a90 	vmov	r2, s15
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	605a      	str	r2, [r3, #4]
 8007da8:	e002      	b.n	8007db0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007db0:	4b13      	ldr	r3, [pc, #76]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d017      	beq.n	8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007dbc:	4b10      	ldr	r3, [pc, #64]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc0:	0e1b      	lsrs	r3, r3, #24
 8007dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007de2:	ee17 2a90 	vmov	r2, s15
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007dea:	e002      	b.n	8007df2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	609a      	str	r2, [r3, #8]
}
 8007df2:	bf00      	nop
 8007df4:	3724      	adds	r7, #36	@ 0x24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	46020c00 	.word	0x46020c00
 8007e04:	4b742400 	.word	0x4b742400
 8007e08:	46000000 	.word	0x46000000
 8007e0c:	0800e820 	.word	0x0800e820

08007e10 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08e      	sub	sp, #56	@ 0x38
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e1e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8007e22:	430b      	orrs	r3, r1
 8007e24:	d145      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007e26:	4ba7      	ldr	r3, [pc, #668]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e30:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007e32:	4ba4      	ldr	r3, [pc, #656]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d108      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e46:	d104      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e4e:	f001 bb31 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007e52:	4b9c      	ldr	r3, [pc, #624]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e60:	d114      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e68:	d110      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e6a:	4b96      	ldr	r3, [pc, #600]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e78:	d103      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007e7a:	23fa      	movs	r3, #250	@ 0xfa
 8007e7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e7e:	f001 bb19 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8007e82:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007e86:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e88:	f001 bb14 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007e8c:	4b8d      	ldr	r3, [pc, #564]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e98:	d107      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ea0:	d103      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8007ea2:	4b89      	ldr	r3, [pc, #548]	@ (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea6:	f001 bb05 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eae:	f001 bb01 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eb6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007eba:	430b      	orrs	r3, r1
 8007ebc:	d151      	bne.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007ebe:	4b81      	ldr	r3, [pc, #516]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ec0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ec4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007ec8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ecc:	2b80      	cmp	r3, #128	@ 0x80
 8007ece:	d035      	beq.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed2:	2b80      	cmp	r3, #128	@ 0x80
 8007ed4:	d841      	bhi.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	2b60      	cmp	r3, #96	@ 0x60
 8007eda:	d02a      	beq.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ede:	2b60      	cmp	r3, #96	@ 0x60
 8007ee0:	d83b      	bhi.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee4:	2b40      	cmp	r3, #64	@ 0x40
 8007ee6:	d009      	beq.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eea:	2b40      	cmp	r3, #64	@ 0x40
 8007eec:	d835      	bhi.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00c      	beq.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef6:	2b20      	cmp	r3, #32
 8007ef8:	d012      	beq.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007efa:	e02e      	b.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7ff fb77 	bl	80075f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f0a:	f001 bad3 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f0e:	f107 0318 	add.w	r3, r7, #24
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff fcc8 	bl	80078a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f1c:	f001 baca 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f20:	f107 030c 	add.w	r3, r7, #12
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff fe19 	bl	8007b5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f2e:	f001 bac1 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007f32:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007f36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f38:	f001 babc 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f3c:	4b61      	ldr	r3, [pc, #388]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f48:	d103      	bne.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007f4a:	4b60      	ldr	r3, [pc, #384]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007f4c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f4e:	f001 bab1 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f56:	f001 baad 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f5e:	f001 baa9 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f66:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007f6a:	430b      	orrs	r3, r1
 8007f6c:	d158      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007f6e:	4b55      	ldr	r3, [pc, #340]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007f70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f80:	d03b      	beq.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f88:	d846      	bhi.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f90:	d02e      	beq.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f98:	d83e      	bhi.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa0:	d00b      	beq.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa8:	d836      	bhi.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00d      	beq.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fb6:	d012      	beq.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007fb8:	e02e      	b.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fb18 	bl	80075f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fc8:	f001 ba74 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fcc:	f107 0318 	add.w	r3, r7, #24
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff fc69 	bl	80078a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fda:	f001 ba6b 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fde:	f107 030c 	add.w	r3, r7, #12
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7ff fdba 	bl	8007b5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fec:	f001 ba62 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007ff0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007ff4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ff6:	f001 ba5d 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ffa:	4b32      	ldr	r3, [pc, #200]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008006:	d103      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008008:	4b30      	ldr	r3, [pc, #192]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800800a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800800c:	f001 ba52 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008014:	f001 ba4e 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800801c:	f001 ba4a 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008024:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008028:	430b      	orrs	r3, r1
 800802a:	d126      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800802c:	4b25      	ldr	r3, [pc, #148]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800802e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008032:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008036:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008038:	4b22      	ldr	r3, [pc, #136]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008044:	d106      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	2b00      	cmp	r3, #0
 800804a:	d103      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800804c:	4b1f      	ldr	r3, [pc, #124]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800804e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008050:	f001 ba30 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008054:	4b1b      	ldr	r3, [pc, #108]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800805c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008060:	d107      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008068:	d103      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800806a:	4b19      	ldr	r3, [pc, #100]	@ (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800806c:	637b      	str	r3, [r7, #52]	@ 0x34
 800806e:	f001 ba21 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	637b      	str	r3, [r7, #52]	@ 0x34
 8008076:	f001 ba1d 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800807a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800807e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008082:	430b      	orrs	r3, r1
 8008084:	d16e      	bne.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008086:	4b0f      	ldr	r3, [pc, #60]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800808c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008090:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008094:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008098:	d03d      	beq.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80080a0:	d85c      	bhi.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80080a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080a8:	d014      	beq.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80080aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080b0:	d854      	bhi.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80080b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01f      	beq.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080be:	d012      	beq.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80080c0:	e04c      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80080c2:	bf00      	nop
 80080c4:	46020c00 	.word	0x46020c00
 80080c8:	0007a120 	.word	0x0007a120
 80080cc:	00f42400 	.word	0x00f42400
 80080d0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080d8:	4618      	mov	r0, r3
 80080da:	f7ff fa8b 	bl	80075f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80080de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080e2:	f001 b9e7 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080e6:	f107 0318 	add.w	r3, r7, #24
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff fbdc 	bl	80078a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080f4:	f001 b9de 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80080f8:	4ba7      	ldr	r3, [pc, #668]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008104:	d103      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8008106:	4ba5      	ldr	r3, [pc, #660]	@ (800839c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008108:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800810a:	f001 b9d3 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008112:	f001 b9cf 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008116:	4ba0      	ldr	r3, [pc, #640]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0320 	and.w	r3, r3, #32
 800811e:	2b20      	cmp	r3, #32
 8008120:	d118      	bne.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008122:	4b9d      	ldr	r3, [pc, #628]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d005      	beq.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800812e:	4b9a      	ldr	r3, [pc, #616]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	0e1b      	lsrs	r3, r3, #24
 8008134:	f003 030f 	and.w	r3, r3, #15
 8008138:	e006      	b.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800813a:	4b97      	ldr	r3, [pc, #604]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800813c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008140:	041b      	lsls	r3, r3, #16
 8008142:	0e1b      	lsrs	r3, r3, #24
 8008144:	f003 030f 	and.w	r3, r3, #15
 8008148:	4a95      	ldr	r2, [pc, #596]	@ (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800814a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800814e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008150:	f001 b9b0 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008154:	2300      	movs	r3, #0
 8008156:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008158:	f001 b9ac 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008160:	f001 b9a8 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008168:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800816c:	430b      	orrs	r3, r1
 800816e:	d17f      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008170:	4b89      	ldr	r3, [pc, #548]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008172:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800817a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800817c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817e:	2b00      	cmp	r3, #0
 8008180:	d165      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008182:	4b85      	ldr	r3, [pc, #532]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008188:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800818c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800818e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008190:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008194:	d034      	beq.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8008196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008198:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800819c:	d853      	bhi.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800819e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081a4:	d00b      	beq.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80081a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081ac:	d84b      	bhi.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d016      	beq.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80081b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081ba:	d009      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80081bc:	e043      	b.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff fa16 	bl	80075f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80081cc:	f001 b972 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081d0:	f107 0318 	add.w	r3, r7, #24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff fb67 	bl	80078a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80081de:	f001 b969 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80081e2:	4b6d      	ldr	r3, [pc, #436]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081ee:	d103      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80081f0:	4b6a      	ldr	r3, [pc, #424]	@ (800839c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80081f2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80081f4:	f001 b95e 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80081fc:	f001 b95a 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008200:	4b65      	ldr	r3, [pc, #404]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b20      	cmp	r3, #32
 800820a:	d118      	bne.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800820c:	4b62      	ldr	r3, [pc, #392]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d005      	beq.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8008218:	4b5f      	ldr	r3, [pc, #380]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	0e1b      	lsrs	r3, r3, #24
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	e006      	b.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008224:	4b5c      	ldr	r3, [pc, #368]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800822a:	041b      	lsls	r3, r3, #16
 800822c:	0e1b      	lsrs	r3, r3, #24
 800822e:	f003 030f 	and.w	r3, r3, #15
 8008232:	4a5b      	ldr	r2, [pc, #364]	@ (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008238:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800823a:	f001 b93b 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008242:	f001 b937 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800824a:	f001 b933 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008250:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008254:	d108      	bne.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800825a:	4618      	mov	r0, r3
 800825c:	f7ff f9ca 	bl	80075f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008262:	637b      	str	r3, [r7, #52]	@ 0x34
 8008264:	f001 b926 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8008268:	2300      	movs	r3, #0
 800826a:	637b      	str	r3, [r7, #52]	@ 0x34
 800826c:	f001 b922 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008274:	1e51      	subs	r1, r2, #1
 8008276:	430b      	orrs	r3, r1
 8008278:	d136      	bne.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800827a:	4b47      	ldr	r3, [pc, #284]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800827c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008280:	f003 0303 	and.w	r3, r3, #3
 8008284:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800828c:	f7fe fa48 	bl	8006720 <HAL_RCC_GetPCLK2Freq>
 8008290:	6378      	str	r0, [r7, #52]	@ 0x34
 8008292:	f001 b90f 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008298:	2b01      	cmp	r3, #1
 800829a:	d104      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800829c:	f7fe f910 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 80082a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80082a2:	f001 b907 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80082a6:	4b3c      	ldr	r3, [pc, #240]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082b2:	d106      	bne.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80082b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d103      	bne.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80082ba:	4b3a      	ldr	r3, [pc, #232]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80082bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80082be:	f001 b8f9 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80082c2:	4b35      	ldr	r3, [pc, #212]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80082c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d107      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d104      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80082d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082da:	637b      	str	r3, [r7, #52]	@ 0x34
 80082dc:	f001 b8ea 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082e4:	f001 b8e6 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80082e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ec:	1e91      	subs	r1, r2, #2
 80082ee:	430b      	orrs	r3, r1
 80082f0:	d136      	bne.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80082f2:	4b29      	ldr	r3, [pc, #164]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80082f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082f8:	f003 030c 	and.w	r3, r3, #12
 80082fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80082fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008300:	2b00      	cmp	r3, #0
 8008302:	d104      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008304:	f7fe f9f8 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8008308:	6378      	str	r0, [r7, #52]	@ 0x34
 800830a:	f001 b8d3 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008310:	2b04      	cmp	r3, #4
 8008312:	d104      	bne.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008314:	f7fe f8d4 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8008318:	6378      	str	r0, [r7, #52]	@ 0x34
 800831a:	f001 b8cb 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800831e:	4b1e      	ldr	r3, [pc, #120]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800832a:	d106      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800832c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832e:	2b08      	cmp	r3, #8
 8008330:	d103      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8008332:	4b1c      	ldr	r3, [pc, #112]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008334:	637b      	str	r3, [r7, #52]	@ 0x34
 8008336:	f001 b8bd 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800833a:	4b17      	ldr	r3, [pc, #92]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800833c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b02      	cmp	r3, #2
 8008346:	d107      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834a:	2b0c      	cmp	r3, #12
 800834c:	d104      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800834e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008352:	637b      	str	r3, [r7, #52]	@ 0x34
 8008354:	f001 b8ae 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	637b      	str	r3, [r7, #52]	@ 0x34
 800835c:	f001 b8aa 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008364:	1f11      	subs	r1, r2, #4
 8008366:	430b      	orrs	r3, r1
 8008368:	d13f      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800836a:	4b0b      	ldr	r3, [pc, #44]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800836c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008370:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008374:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800837c:	f7fe f9bc 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8008380:	6378      	str	r0, [r7, #52]	@ 0x34
 8008382:	f001 b897 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	2b10      	cmp	r3, #16
 800838a:	d10d      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800838c:	f7fe f898 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8008390:	6378      	str	r0, [r7, #52]	@ 0x34
 8008392:	f001 b88f 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8008396:	bf00      	nop
 8008398:	46020c00 	.word	0x46020c00
 800839c:	02dc6c00 	.word	0x02dc6c00
 80083a0:	0800e820 	.word	0x0800e820
 80083a4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80083a8:	4ba8      	ldr	r3, [pc, #672]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083b4:	d106      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80083b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	d103      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80083bc:	4ba4      	ldr	r3, [pc, #656]	@ (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80083be:	637b      	str	r3, [r7, #52]	@ 0x34
 80083c0:	f001 b878 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80083c4:	4ba1      	ldr	r3, [pc, #644]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80083c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083ca:	f003 0302 	and.w	r3, r3, #2
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d107      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d4:	2b30      	cmp	r3, #48	@ 0x30
 80083d6:	d104      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80083d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80083de:	f001 b869 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083e6:	f001 b865 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80083ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ee:	f1a2 0108 	sub.w	r1, r2, #8
 80083f2:	430b      	orrs	r3, r1
 80083f4:	d136      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80083f6:	4b95      	ldr	r3, [pc, #596]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80083f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083fc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008400:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008408:	f7fe f976 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 800840c:	6378      	str	r0, [r7, #52]	@ 0x34
 800840e:	f001 b851 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008414:	2b40      	cmp	r3, #64	@ 0x40
 8008416:	d104      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008418:	f7fe f852 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 800841c:	6378      	str	r0, [r7, #52]	@ 0x34
 800841e:	f001 b849 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008422:	4b8a      	ldr	r3, [pc, #552]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800842a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800842e:	d106      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8008430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008432:	2b80      	cmp	r3, #128	@ 0x80
 8008434:	d103      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8008436:	4b86      	ldr	r3, [pc, #536]	@ (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008438:	637b      	str	r3, [r7, #52]	@ 0x34
 800843a:	f001 b83b 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800843e:	4b83      	ldr	r3, [pc, #524]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	2b02      	cmp	r3, #2
 800844a:	d107      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008450:	d104      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8008452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008456:	637b      	str	r3, [r7, #52]	@ 0x34
 8008458:	f001 b82c 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800845c:	2300      	movs	r3, #0
 800845e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008460:	f001 b828 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008468:	f1a2 0110 	sub.w	r1, r2, #16
 800846c:	430b      	orrs	r3, r1
 800846e:	d139      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008470:	4b76      	ldr	r3, [pc, #472]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800847a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800847c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847e:	2b00      	cmp	r3, #0
 8008480:	d104      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008482:	f7fe f939 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8008486:	6378      	str	r0, [r7, #52]	@ 0x34
 8008488:	f001 b814 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800848c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008492:	d104      	bne.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008494:	f7fe f814 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8008498:	6378      	str	r0, [r7, #52]	@ 0x34
 800849a:	f001 b80b 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800849e:	4b6b      	ldr	r3, [pc, #428]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084aa:	d107      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80084ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084b2:	d103      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80084b4:	4b66      	ldr	r3, [pc, #408]	@ (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80084b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084b8:	f000 bffc 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80084bc:	4b63      	ldr	r3, [pc, #396]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80084be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d108      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084d0:	d104      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80084d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d8:	f000 bfec 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80084dc:	2300      	movs	r3, #0
 80084de:	637b      	str	r3, [r7, #52]	@ 0x34
 80084e0:	f000 bfe8 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 80084e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084e8:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80084ec:	430b      	orrs	r3, r1
 80084ee:	d139      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80084f0:	4b56      	ldr	r3, [pc, #344]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80084f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80084f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80084fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80084fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008502:	f7fe f8f9 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8008506:	6378      	str	r0, [r7, #52]	@ 0x34
 8008508:	f000 bfd4 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800850c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008512:	d104      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008514:	f7fd ffd4 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8008518:	6378      	str	r0, [r7, #52]	@ 0x34
 800851a:	f000 bfcb 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800851e:	4b4b      	ldr	r3, [pc, #300]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800852a:	d107      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800852c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008532:	d103      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8008534:	4b46      	ldr	r3, [pc, #280]	@ (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008536:	637b      	str	r3, [r7, #52]	@ 0x34
 8008538:	f000 bfbc 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800853c:	4b43      	ldr	r3, [pc, #268]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800853e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b02      	cmp	r3, #2
 8008548:	d108      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008550:	d104      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8008552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008556:	637b      	str	r3, [r7, #52]	@ 0x34
 8008558:	f000 bfac 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008560:	f000 bfa8 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008568:	f1a2 0120 	sub.w	r1, r2, #32
 800856c:	430b      	orrs	r3, r1
 800856e:	d158      	bne.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008570:	4b36      	ldr	r3, [pc, #216]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008576:	f003 0307 	and.w	r3, r3, #7
 800857a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857e:	2b00      	cmp	r3, #0
 8008580:	d104      	bne.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008582:	f7fe f8e1 	bl	8006748 <HAL_RCC_GetPCLK3Freq>
 8008586:	6378      	str	r0, [r7, #52]	@ 0x34
 8008588:	f000 bf94 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	2b01      	cmp	r3, #1
 8008590:	d104      	bne.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008592:	f7fd ff95 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8008596:	6378      	str	r0, [r7, #52]	@ 0x34
 8008598:	f000 bf8c 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800859c:	4b2b      	ldr	r3, [pc, #172]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085a8:	d106      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d103      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 80085b0:	4b27      	ldr	r3, [pc, #156]	@ (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80085b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80085b4:	f000 bf7e 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80085b8:	4b24      	ldr	r3, [pc, #144]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80085ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d107      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d104      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 80085cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d2:	f000 bf6f 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80085d6:	4b1d      	ldr	r3, [pc, #116]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0320 	and.w	r3, r3, #32
 80085de:	2b20      	cmp	r3, #32
 80085e0:	d11b      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	d118      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085e8:	4b18      	ldr	r3, [pc, #96]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d005      	beq.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 80085f4:	4b15      	ldr	r3, [pc, #84]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	0e1b      	lsrs	r3, r3, #24
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	e006      	b.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8008600:	4b12      	ldr	r3, [pc, #72]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008606:	041b      	lsls	r3, r3, #16
 8008608:	0e1b      	lsrs	r3, r3, #24
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	4a11      	ldr	r2, [pc, #68]	@ (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008614:	637b      	str	r3, [r7, #52]	@ 0x34
 8008616:	f000 bf4d 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	637b      	str	r3, [r7, #52]	@ 0x34
 800861e:	f000 bf49 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008626:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800862a:	430b      	orrs	r3, r1
 800862c:	d172      	bne.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800862e:	4b07      	ldr	r3, [pc, #28]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008634:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008638:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800863a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008640:	d10a      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008642:	f7fd ff3d 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8008646:	6378      	str	r0, [r7, #52]	@ 0x34
 8008648:	f000 bf34 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800864c:	46020c00 	.word	0x46020c00
 8008650:	00f42400 	.word	0x00f42400
 8008654:	0800e820 	.word	0x0800e820
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800865e:	d108      	bne.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008660:	f107 0318 	add.w	r3, r7, #24
 8008664:	4618      	mov	r0, r3
 8008666:	f7ff f91f 	bl	80078a8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	637b      	str	r3, [r7, #52]	@ 0x34
 800866e:	f000 bf21 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	2b00      	cmp	r3, #0
 8008676:	d104      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008678:	f7fe f824 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 800867c:	6378      	str	r0, [r7, #52]	@ 0x34
 800867e:	f000 bf19 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008688:	d122      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800868a:	4bb0      	ldr	r3, [pc, #704]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b20      	cmp	r3, #32
 8008694:	d118      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008696:	4bad      	ldr	r3, [pc, #692]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d005      	beq.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 80086a2:	4baa      	ldr	r3, [pc, #680]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	0e1b      	lsrs	r3, r3, #24
 80086a8:	f003 030f 	and.w	r3, r3, #15
 80086ac:	e006      	b.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80086ae:	4ba7      	ldr	r3, [pc, #668]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80086b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086b4:	041b      	lsls	r3, r3, #16
 80086b6:	0e1b      	lsrs	r3, r3, #24
 80086b8:	f003 030f 	and.w	r3, r3, #15
 80086bc:	4aa4      	ldr	r2, [pc, #656]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80086be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c4:	f000 bef6 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80086cc:	f000 bef2 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80086d0:	4b9e      	ldr	r3, [pc, #632]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086dc:	d107      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80086de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80086e4:	d103      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 80086e6:	4b9b      	ldr	r3, [pc, #620]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 80086e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ea:	f000 bee3 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80086ee:	4b97      	ldr	r3, [pc, #604]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086fa:	d107      	bne.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 80086fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008702:	d103      	bne.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8008704:	4b93      	ldr	r3, [pc, #588]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008706:	637b      	str	r3, [r7, #52]	@ 0x34
 8008708:	f000 bed4 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008710:	f000 bed0 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008718:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800871c:	430b      	orrs	r3, r1
 800871e:	d158      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008720:	4b8a      	ldr	r3, [pc, #552]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008722:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800872c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872e:	2b04      	cmp	r3, #4
 8008730:	d84b      	bhi.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8008732:	a201      	add	r2, pc, #4	@ (adr r2, 8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8008734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008738:	08008771 	.word	0x08008771
 800873c:	0800874d 	.word	0x0800874d
 8008740:	0800875f 	.word	0x0800875f
 8008744:	0800877b 	.word	0x0800877b
 8008748:	08008785 	.word	0x08008785
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800874c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008750:	4618      	mov	r0, r3
 8008752:	f7fe ff4f 	bl	80075f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800875a:	f000 beab 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800875e:	f107 030c 	add.w	r3, r7, #12
 8008762:	4618      	mov	r0, r3
 8008764:	f7ff f9fa 	bl	8007b5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800876c:	f000 bea2 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008770:	f7fd ffa8 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 8008774:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008776:	f000 be9d 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800877a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800877e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008780:	f000 be98 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008784:	4b71      	ldr	r3, [pc, #452]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0320 	and.w	r3, r3, #32
 800878c:	2b20      	cmp	r3, #32
 800878e:	d118      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008790:	4b6e      	ldr	r3, [pc, #440]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d005      	beq.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800879c:	4b6b      	ldr	r3, [pc, #428]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	0e1b      	lsrs	r3, r3, #24
 80087a2:	f003 030f 	and.w	r3, r3, #15
 80087a6:	e006      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80087a8:	4b68      	ldr	r3, [pc, #416]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80087aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087ae:	041b      	lsls	r3, r3, #16
 80087b0:	0e1b      	lsrs	r3, r3, #24
 80087b2:	f003 030f 	and.w	r3, r3, #15
 80087b6:	4a66      	ldr	r2, [pc, #408]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80087b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087be:	f000 be79 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087c6:	f000 be75 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087ce:	f000 be71 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80087d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087d6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80087da:	430b      	orrs	r3, r1
 80087dc:	d167      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80087de:	4b5b      	ldr	r3, [pc, #364]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80087e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087e4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80087e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087f0:	d036      	beq.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80087f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087f8:	d855      	bhi.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008800:	d029      	beq.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8008802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008804:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008808:	d84d      	bhi.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008810:	d013      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008818:	d845      	bhi.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800881a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881c:	2b00      	cmp	r3, #0
 800881e:	d015      	beq.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8008820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008826:	d13e      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe fee1 	bl	80075f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008836:	f000 be3d 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800883a:	f107 030c 	add.w	r3, r7, #12
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff f98c 	bl	8007b5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008848:	f000 be34 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800884c:	f7fd ff3a 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 8008850:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008852:	f000 be2f 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008856:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800885a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800885c:	f000 be2a 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008860:	4b3a      	ldr	r3, [pc, #232]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0320 	and.w	r3, r3, #32
 8008868:	2b20      	cmp	r3, #32
 800886a:	d118      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800886c:	4b37      	ldr	r3, [pc, #220]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d005      	beq.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8008878:	4b34      	ldr	r3, [pc, #208]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	0e1b      	lsrs	r3, r3, #24
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	e006      	b.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008884:	4b31      	ldr	r3, [pc, #196]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800888a:	041b      	lsls	r3, r3, #16
 800888c:	0e1b      	lsrs	r3, r3, #24
 800888e:	f003 030f 	and.w	r3, r3, #15
 8008892:	4a2f      	ldr	r2, [pc, #188]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008898:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800889a:	f000 be0b 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088a2:	f000 be07 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088aa:	f000 be03 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80088ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80088b6:	430b      	orrs	r3, r1
 80088b8:	d152      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80088ba:	4b24      	ldr	r3, [pc, #144]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80088bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80088c4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80088cc:	f7fd ff14 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 80088d0:	6378      	str	r0, [r7, #52]	@ 0x34
 80088d2:	f000 bdef 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088dc:	d104      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80088de:	f7fd fdef 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 80088e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80088e4:	f000 bde6 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80088e8:	4b18      	ldr	r3, [pc, #96]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088f4:	d107      	bne.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 80088f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088fc:	d103      	bne.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 80088fe:	4b15      	ldr	r3, [pc, #84]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008900:	637b      	str	r3, [r7, #52]	@ 0x34
 8008902:	f000 bdd7 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008906:	4b11      	ldr	r3, [pc, #68]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0320 	and.w	r3, r3, #32
 800890e:	2b20      	cmp	r3, #32
 8008910:	d122      	bne.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8008912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008914:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008918:	d11e      	bne.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800891a:	4b0c      	ldr	r3, [pc, #48]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d005      	beq.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8008926:	4b09      	ldr	r3, [pc, #36]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	0e1b      	lsrs	r3, r3, #24
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	e006      	b.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8008932:	4b06      	ldr	r3, [pc, #24]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008938:	041b      	lsls	r3, r3, #16
 800893a:	0e1b      	lsrs	r3, r3, #24
 800893c:	f003 030f 	and.w	r3, r3, #15
 8008940:	4a03      	ldr	r2, [pc, #12]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008946:	637b      	str	r3, [r7, #52]	@ 0x34
 8008948:	f000 bdb4 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800894c:	46020c00 	.word	0x46020c00
 8008950:	0800e820 	.word	0x0800e820
 8008954:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008958:	2300      	movs	r3, #0
 800895a:	637b      	str	r3, [r7, #52]	@ 0x34
 800895c:	f000 bdaa 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008964:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8008968:	430b      	orrs	r3, r1
 800896a:	d14c      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800896c:	4ba8      	ldr	r3, [pc, #672]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800896e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008972:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008976:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	2b00      	cmp	r3, #0
 800897c:	d104      	bne.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800897e:	f7fd febb 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8008982:	6378      	str	r0, [r7, #52]	@ 0x34
 8008984:	f000 bd96 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800898e:	d104      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008990:	f7fd fd96 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8008994:	6378      	str	r0, [r7, #52]	@ 0x34
 8008996:	f000 bd8d 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800899a:	4b9d      	ldr	r3, [pc, #628]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a6:	d107      	bne.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089ae:	d103      	bne.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 80089b0:	4b98      	ldr	r3, [pc, #608]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80089b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b4:	f000 bd7e 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80089b8:	4b95      	ldr	r3, [pc, #596]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0320 	and.w	r3, r3, #32
 80089c0:	2b20      	cmp	r3, #32
 80089c2:	d11c      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 80089c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089ca:	d118      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80089cc:	4b90      	ldr	r3, [pc, #576]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d005      	beq.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80089d8:	4b8d      	ldr	r3, [pc, #564]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	0e1b      	lsrs	r3, r3, #24
 80089de:	f003 030f 	and.w	r3, r3, #15
 80089e2:	e006      	b.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 80089e4:	4b8a      	ldr	r3, [pc, #552]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80089e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80089ea:	041b      	lsls	r3, r3, #16
 80089ec:	0e1b      	lsrs	r3, r3, #24
 80089ee:	f003 030f 	and.w	r3, r3, #15
 80089f2:	4a89      	ldr	r2, [pc, #548]	@ (8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80089f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089fa:	f000 bd5b 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a02:	f000 bd57 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a0a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008a0e:	430b      	orrs	r3, r1
 8008a10:	d158      	bne.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008a12:	4b7f      	ldr	r3, [pc, #508]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a18:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008a1c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a22:	d028      	beq.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a28:	d848      	bhi.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2c:	2b80      	cmp	r3, #128	@ 0x80
 8008a2e:	d00e      	beq.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a32:	2b80      	cmp	r3, #128	@ 0x80
 8008a34:	d842      	bhi.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3e:	2b40      	cmp	r3, #64	@ 0x40
 8008a40:	d014      	beq.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008a42:	e03b      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008a44:	f7fd fe80 	bl	8006748 <HAL_RCC_GetPCLK3Freq>
 8008a48:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008a4a:	f000 bd33 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a4e:	4b70      	ldr	r3, [pc, #448]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a5a:	d103      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8008a5c:	4b6d      	ldr	r3, [pc, #436]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008a5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a60:	f000 bd28 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a68:	f000 bd24 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008a6c:	f7fd fd28 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8008a70:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008a72:	f000 bd1f 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a76:	4b66      	ldr	r3, [pc, #408]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0320 	and.w	r3, r3, #32
 8008a7e:	2b20      	cmp	r3, #32
 8008a80:	d118      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a82:	4b63      	ldr	r3, [pc, #396]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d005      	beq.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8008a8e:	4b60      	ldr	r3, [pc, #384]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	0e1b      	lsrs	r3, r3, #24
 8008a94:	f003 030f 	and.w	r3, r3, #15
 8008a98:	e006      	b.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8008a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008aa0:	041b      	lsls	r3, r3, #16
 8008aa2:	0e1b      	lsrs	r3, r3, #24
 8008aa4:	f003 030f 	and.w	r3, r3, #15
 8008aa8:	4a5b      	ldr	r2, [pc, #364]	@ (8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008ab0:	f000 bd00 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ab8:	f000 bcfc 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ac0:	f000 bcf8 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8008acc:	430b      	orrs	r3, r1
 8008ace:	d14c      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008ad0:	4b4f      	ldr	r3, [pc, #316]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ad6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008ada:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d104      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008ae2:	f7fd fe09 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8008ae6:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ae8:	f000 bce4 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8008aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008af2:	d104      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008af4:	f7fd fce4 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8008af8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008afa:	f000 bcdb 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008afe:	4b44      	ldr	r3, [pc, #272]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b0a:	d107      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b12:	d103      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8008b14:	4b3f      	ldr	r3, [pc, #252]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b18:	f000 bccc 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0320 	and.w	r3, r3, #32
 8008b24:	2b20      	cmp	r3, #32
 8008b26:	d11c      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8008b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008b2e:	d118      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b30:	4b37      	ldr	r3, [pc, #220]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8008b3c:	4b34      	ldr	r3, [pc, #208]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	0e1b      	lsrs	r3, r3, #24
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	e006      	b.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8008b48:	4b31      	ldr	r3, [pc, #196]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b4e:	041b      	lsls	r3, r3, #16
 8008b50:	0e1b      	lsrs	r3, r3, #24
 8008b52:	f003 030f 	and.w	r3, r3, #15
 8008b56:	4a30      	ldr	r2, [pc, #192]	@ (8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b5e:	f000 bca9 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b66:	f000 bca5 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8008b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b6e:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8008b72:	430b      	orrs	r3, r1
 8008b74:	d152      	bne.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8008b76:	4b26      	ldr	r3, [pc, #152]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008b78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b7c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008b80:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8008b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d104      	bne.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008b88:	f7fd fdb6 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8008b8c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b8e:	f000 bc91 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b98:	d104      	bne.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008b9a:	f7fd fc91 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8008b9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ba0:	f000 bc88 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8008ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bb0:	d107      	bne.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bb8:	d103      	bne.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8008bba:	4b16      	ldr	r3, [pc, #88]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bbe:	f000 bc79 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8008bc2:	4b13      	ldr	r3, [pc, #76]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0320 	and.w	r3, r3, #32
 8008bca:	2b20      	cmp	r3, #32
 8008bcc:	d11c      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008bd4:	d118      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d005      	beq.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 8008be2:	4b0b      	ldr	r3, [pc, #44]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	0e1b      	lsrs	r3, r3, #24
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	e006      	b.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8008bee:	4b08      	ldr	r3, [pc, #32]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008bf4:	041b      	lsls	r3, r3, #16
 8008bf6:	0e1b      	lsrs	r3, r3, #24
 8008bf8:	f003 030f 	and.w	r3, r3, #15
 8008bfc:	4a06      	ldr	r2, [pc, #24]	@ (8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c04:	f000 bc56 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c0c:	f000 bc52 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8008c10:	46020c00 	.word	0x46020c00
 8008c14:	00f42400 	.word	0x00f42400
 8008c18:	0800e820 	.word	0x0800e820
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8008c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c20:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8008c24:	430b      	orrs	r3, r1
 8008c26:	d14a      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8008c28:	4ba5      	ldr	r3, [pc, #660]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008c2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c2e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008c32:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8008c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d104      	bne.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008c3a:	f7fd fd5d 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8008c3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c40:	f000 bc38 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8008c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c4a:	d104      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c4c:	f7fd fc38 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8008c50:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c52:	f000 bc2f 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8008c56:	4b9a      	ldr	r3, [pc, #616]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c62:	d107      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c6a:	d103      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8008c6c:	4b95      	ldr	r3, [pc, #596]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c70:	f000 bc20 	b.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8008c74:	4b92      	ldr	r3, [pc, #584]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0320 	and.w	r3, r3, #32
 8008c7c:	2b20      	cmp	r3, #32
 8008c7e:	d11b      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008c86:	d117      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008c88:	4b8d      	ldr	r3, [pc, #564]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d005      	beq.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8008c94:	4b8a      	ldr	r3, [pc, #552]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	0e1b      	lsrs	r3, r3, #24
 8008c9a:	f003 030f 	and.w	r3, r3, #15
 8008c9e:	e006      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 8008ca0:	4b87      	ldr	r3, [pc, #540]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ca6:	041b      	lsls	r3, r3, #16
 8008ca8:	0e1b      	lsrs	r3, r3, #24
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	4a86      	ldr	r2, [pc, #536]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8008cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb6:	e3fd      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cbc:	e3fa      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008cc6:	430b      	orrs	r3, r1
 8008cc8:	d164      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008cca:	4b7d      	ldr	r3, [pc, #500]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cd4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d120      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008cdc:	4b78      	ldr	r3, [pc, #480]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0320 	and.w	r3, r3, #32
 8008ce4:	2b20      	cmp	r3, #32
 8008ce6:	d117      	bne.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008ce8:	4b75      	ldr	r3, [pc, #468]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d005      	beq.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 8008cf4:	4b72      	ldr	r3, [pc, #456]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	0e1b      	lsrs	r3, r3, #24
 8008cfa:	f003 030f 	and.w	r3, r3, #15
 8008cfe:	e006      	b.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 8008d00:	4b6f      	ldr	r3, [pc, #444]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d06:	041b      	lsls	r3, r3, #16
 8008d08:	0e1b      	lsrs	r3, r3, #24
 8008d0a:	f003 030f 	and.w	r3, r3, #15
 8008d0e:	4a6e      	ldr	r2, [pc, #440]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8008d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d16:	e3cd      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d1c:	e3ca      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008d1e:	4b68      	ldr	r3, [pc, #416]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d2c:	d112      	bne.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d34:	d10e      	bne.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d36:	4b62      	ldr	r3, [pc, #392]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d44:	d102      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 8008d46:	23fa      	movs	r3, #250	@ 0xfa
 8008d48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d4a:	e3b3      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8008d4c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008d50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d52:	e3af      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008d54:	4b5a      	ldr	r3, [pc, #360]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d60:	d106      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d68:	d102      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 8008d6a:	4b56      	ldr	r3, [pc, #344]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008d6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d6e:	e3a1      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008d70:	4b53      	ldr	r3, [pc, #332]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d107      	bne.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d84:	d103      	bne.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 8008d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d8c:	e392      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d92:	e38f      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d98:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008d9c:	430b      	orrs	r3, r1
 8008d9e:	d164      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008da0:	4b47      	ldr	r3, [pc, #284]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008da6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008daa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8008dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d120      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008db2:	4b43      	ldr	r3, [pc, #268]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	2b20      	cmp	r3, #32
 8008dbc:	d117      	bne.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008dbe:	4b40      	ldr	r3, [pc, #256]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 8008dca:	4b3d      	ldr	r3, [pc, #244]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	0e1b      	lsrs	r3, r3, #24
 8008dd0:	f003 030f 	and.w	r3, r3, #15
 8008dd4:	e006      	b.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8008dd6:	4b3a      	ldr	r3, [pc, #232]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ddc:	041b      	lsls	r3, r3, #16
 8008dde:	0e1b      	lsrs	r3, r3, #24
 8008de0:	f003 030f 	and.w	r3, r3, #15
 8008de4:	4a38      	ldr	r2, [pc, #224]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8008de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dec:	e362      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8008dee:	2300      	movs	r3, #0
 8008df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df2:	e35f      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008df4:	4b32      	ldr	r3, [pc, #200]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e02:	d112      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 8008e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e0a:	d10e      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e1a:	d102      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8008e1c:	23fa      	movs	r3, #250	@ 0xfa
 8008e1e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008e20:	e348      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8008e22:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008e26:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008e28:	e344      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008e2a:	4b25      	ldr	r3, [pc, #148]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e36:	d106      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8008e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e3e:	d102      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 8008e40:	4b20      	ldr	r3, [pc, #128]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e44:	e336      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008e46:	4b1e      	ldr	r3, [pc, #120]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d107      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8008e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e5a:	d103      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8008e5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e62:	e327      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e68:	e324      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e6e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008e72:	430b      	orrs	r3, r1
 8008e74:	d14e      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008e76:	4b12      	ldr	r3, [pc, #72]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e7c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008e80:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d103      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008e88:	f7fd fc36 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8008e8c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e8e:	e311      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008e90:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e9e:	d119      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ea6:	d115      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ea8:	4b05      	ldr	r3, [pc, #20]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008eb6:	d109      	bne.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 8008eb8:	23fa      	movs	r3, #250	@ 0xfa
 8008eba:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ebc:	e2fa      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8008ebe:	bf00      	nop
 8008ec0:	46020c00 	.word	0x46020c00
 8008ec4:	00f42400 	.word	0x00f42400
 8008ec8:	0800e820 	.word	0x0800e820
      }
      else
      {
        frequency = LSI_VALUE;
 8008ecc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008ed0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ed2:	e2ef      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008ed4:	4ba8      	ldr	r3, [pc, #672]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ee0:	d106      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008ee8:	d102      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 8008eea:	4ba4      	ldr	r3, [pc, #656]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eee:	e2e1      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008ef0:	4ba1      	ldr	r3, [pc, #644]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d107      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008f04:	d103      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 8008f06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f0c:	e2d2      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f12:	e2cf      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f18:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8008f1c:	430b      	orrs	r3, r1
 8008f1e:	d12d      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008f20:	4b95      	ldr	r3, [pc, #596]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f26:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008f2a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008f2c:	4b92      	ldr	r3, [pc, #584]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f38:	d105      	bne.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d102      	bne.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 8008f40:	4b8e      	ldr	r3, [pc, #568]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f44:	e2b6      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f4c:	d107      	bne.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe fb4e 	bl	80075f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f5c:	e2aa      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f64:	d107      	bne.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f66:	f107 0318 	add.w	r3, r7, #24
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fc9c 	bl	80078a8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f74:	e29e      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7a:	e29b      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f80:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008f84:	430b      	orrs	r3, r1
 8008f86:	d156      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008f88:	4b7b      	ldr	r3, [pc, #492]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f8e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008f92:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008f9a:	d028      	beq.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fa2:	d845      	bhi.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008faa:	d013      	beq.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8008fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fb2:	d83d      	bhi.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d004      	beq.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fc0:	d004      	beq.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 8008fc2:	e035      	b.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008fc4:	f7fd fbac 	bl	8006720 <HAL_RCC_GetPCLK2Freq>
 8008fc8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008fca:	e273      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008fcc:	f7fd fa78 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8008fd0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008fd2:	e26f      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008fd4:	4b68      	ldr	r3, [pc, #416]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fe0:	d102      	bne.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 8008fe2:	4b66      	ldr	r3, [pc, #408]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008fe4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008fe6:	e265      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fec:	e262      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008fee:	4b62      	ldr	r3, [pc, #392]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0320 	and.w	r3, r3, #32
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d117      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d005      	beq.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 8009006:	4b5c      	ldr	r3, [pc, #368]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	0e1b      	lsrs	r3, r3, #24
 800900c:	f003 030f 	and.w	r3, r3, #15
 8009010:	e006      	b.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 8009012:	4b59      	ldr	r3, [pc, #356]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009018:	041b      	lsls	r3, r3, #16
 800901a:	0e1b      	lsrs	r3, r3, #24
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	4a57      	ldr	r2, [pc, #348]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8009022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009026:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009028:	e244      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800902e:	e241      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009034:	e23e      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800903a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800903e:	430b      	orrs	r3, r1
 8009040:	d156      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009042:	4b4d      	ldr	r3, [pc, #308]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800904c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800904e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009050:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009054:	d028      	beq.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8009056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009058:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800905c:	d845      	bhi.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800905e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009064:	d013      	beq.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8009066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009068:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800906c:	d83d      	bhi.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800906e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8009074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800907a:	d004      	beq.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 800907c:	e035      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800907e:	f7fd fb3b 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8009082:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009084:	e216      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009086:	f7fd fa1b 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 800908a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800908c:	e212      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800908e:	4b3a      	ldr	r3, [pc, #232]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800909a:	d102      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 800909c:	4b37      	ldr	r3, [pc, #220]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800909e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80090a0:	e208      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090a6:	e205      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80090a8:	4b33      	ldr	r3, [pc, #204]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0320 	and.w	r3, r3, #32
 80090b0:	2b20      	cmp	r3, #32
 80090b2:	d117      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80090b4:	4b30      	ldr	r3, [pc, #192]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 80090c0:	4b2d      	ldr	r3, [pc, #180]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	0e1b      	lsrs	r3, r3, #24
 80090c6:	f003 030f 	and.w	r3, r3, #15
 80090ca:	e006      	b.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 80090cc:	4b2a      	ldr	r3, [pc, #168]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80090ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80090d2:	041b      	lsls	r3, r3, #16
 80090d4:	0e1b      	lsrs	r3, r3, #24
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	4a29      	ldr	r2, [pc, #164]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80090dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80090e2:	e1e7      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090e8:	e1e4      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80090ea:	2300      	movs	r3, #0
 80090ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090ee:	e1e1      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80090f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090f4:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80090f8:	430b      	orrs	r3, r1
 80090fa:	d17c      	bne.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80090fc:	4b1e      	ldr	r3, [pc, #120]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80090fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009102:	f003 0318 	and.w	r3, r3, #24
 8009106:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910a:	2b18      	cmp	r3, #24
 800910c:	d870      	bhi.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 800910e:	a201      	add	r2, pc, #4	@ (adr r2, 8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	08009185 	.word	0x08009185
 8009118:	080091f1 	.word	0x080091f1
 800911c:	080091f1 	.word	0x080091f1
 8009120:	080091f1 	.word	0x080091f1
 8009124:	080091f1 	.word	0x080091f1
 8009128:	080091f1 	.word	0x080091f1
 800912c:	080091f1 	.word	0x080091f1
 8009130:	080091f1 	.word	0x080091f1
 8009134:	0800918d 	.word	0x0800918d
 8009138:	080091f1 	.word	0x080091f1
 800913c:	080091f1 	.word	0x080091f1
 8009140:	080091f1 	.word	0x080091f1
 8009144:	080091f1 	.word	0x080091f1
 8009148:	080091f1 	.word	0x080091f1
 800914c:	080091f1 	.word	0x080091f1
 8009150:	080091f1 	.word	0x080091f1
 8009154:	08009195 	.word	0x08009195
 8009158:	080091f1 	.word	0x080091f1
 800915c:	080091f1 	.word	0x080091f1
 8009160:	080091f1 	.word	0x080091f1
 8009164:	080091f1 	.word	0x080091f1
 8009168:	080091f1 	.word	0x080091f1
 800916c:	080091f1 	.word	0x080091f1
 8009170:	080091f1 	.word	0x080091f1
 8009174:	080091af 	.word	0x080091af
 8009178:	46020c00 	.word	0x46020c00
 800917c:	00f42400 	.word	0x00f42400
 8009180:	0800e820 	.word	0x0800e820
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009184:	f7fd fae0 	bl	8006748 <HAL_RCC_GetPCLK3Freq>
 8009188:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800918a:	e193      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800918c:	f7fd f998 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8009190:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009192:	e18f      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009194:	4b9f      	ldr	r3, [pc, #636]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800919c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091a0:	d102      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 80091a2:	4b9d      	ldr	r3, [pc, #628]	@ (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80091a4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80091a6:	e185      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091ac:	e182      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80091ae:	4b99      	ldr	r3, [pc, #612]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0320 	and.w	r3, r3, #32
 80091b6:	2b20      	cmp	r3, #32
 80091b8:	d117      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80091ba:	4b96      	ldr	r3, [pc, #600]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d005      	beq.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 80091c6:	4b93      	ldr	r3, [pc, #588]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	0e1b      	lsrs	r3, r3, #24
 80091cc:	f003 030f 	and.w	r3, r3, #15
 80091d0:	e006      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 80091d2:	4b90      	ldr	r3, [pc, #576]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80091d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091d8:	041b      	lsls	r3, r3, #16
 80091da:	0e1b      	lsrs	r3, r3, #24
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	4a8e      	ldr	r2, [pc, #568]	@ (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80091e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80091e8:	e164      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091ee:	e161      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80091f0:	2300      	movs	r3, #0
 80091f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091f4:	e15e      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80091f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091fa:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80091fe:	430b      	orrs	r3, r1
 8009200:	d155      	bne.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009202:	4b84      	ldr	r3, [pc, #528]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009204:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009208:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800920c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800920e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009210:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009214:	d013      	beq.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 8009216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009218:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800921c:	d844      	bhi.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 800921e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009220:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009224:	d013      	beq.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 8009226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009228:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800922c:	d83c      	bhi.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	2b00      	cmp	r3, #0
 8009232:	d014      	beq.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 8009234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800923a:	d014      	beq.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 800923c:	e034      	b.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800923e:	f107 0318 	add.w	r3, r7, #24
 8009242:	4618      	mov	r0, r3
 8009244:	f7fe fb30 	bl	80078a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800924c:	e132      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800924e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe f9ce 	bl	80075f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800925c:	e12a      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800925e:	f7fd f92f 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8009262:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009264:	e126      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009266:	4b6b      	ldr	r3, [pc, #428]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b20      	cmp	r3, #32
 8009270:	d117      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009272:	4b68      	ldr	r3, [pc, #416]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d005      	beq.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 800927e:	4b65      	ldr	r3, [pc, #404]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	0e1b      	lsrs	r3, r3, #24
 8009284:	f003 030f 	and.w	r3, r3, #15
 8009288:	e006      	b.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 800928a:	4b62      	ldr	r3, [pc, #392]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800928c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009290:	041b      	lsls	r3, r3, #16
 8009292:	0e1b      	lsrs	r3, r3, #24
 8009294:	f003 030f 	and.w	r3, r3, #15
 8009298:	4a60      	ldr	r2, [pc, #384]	@ (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800929a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800929e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80092a0:	e108      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092a6:	e105      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092ac:	e102      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80092ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092b2:	1e59      	subs	r1, r3, #1
 80092b4:	ea52 0301 	orrs.w	r3, r2, r1
 80092b8:	d13c      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80092ba:	4b56      	ldr	r3, [pc, #344]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80092bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092c0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80092c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80092c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80092cc:	d027      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80092ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80092d4:	d82b      	bhi.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092dc:	d017      	beq.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 80092de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092e4:	d823      	bhi.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80092e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 80092ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092f2:	d004      	beq.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 80092f4:	e01b      	b.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80092f6:	f7fd f8e3 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 80092fa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80092fc:	e0da      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009302:	4618      	mov	r0, r3
 8009304:	f7fe f976 	bl	80075f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800930c:	e0d2      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800930e:	f107 0318 	add.w	r3, r7, #24
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe fac8 	bl	80078a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800931c:	e0ca      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800931e:	f107 030c 	add.w	r3, r7, #12
 8009322:	4618      	mov	r0, r3
 8009324:	f7fe fc1a 	bl	8007b5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800932c:	e0c2      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800932e:	2300      	movs	r3, #0
 8009330:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009332:	e0bf      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009338:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800933c:	430b      	orrs	r3, r1
 800933e:	d131      	bne.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009340:	4b34      	ldr	r3, [pc, #208]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009346:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800934a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800934c:	4b31      	ldr	r3, [pc, #196]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800934e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b02      	cmp	r3, #2
 8009358:	d106      	bne.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	2b00      	cmp	r3, #0
 800935e:	d103      	bne.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8009360:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009364:	637b      	str	r3, [r7, #52]	@ 0x34
 8009366:	e0a5      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009368:	4b2a      	ldr	r3, [pc, #168]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800936a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800936e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009372:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009376:	d112      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8009378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800937e:	d10e      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009380:	4b24      	ldr	r3, [pc, #144]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800938a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800938e:	d102      	bne.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8009390:	23fa      	movs	r3, #250	@ 0xfa
 8009392:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009394:	e08e      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8009396:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800939a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800939c:	e08a      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a2:	e087      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80093a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093a8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80093ac:	430b      	orrs	r3, r1
 80093ae:	d13b      	bne.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80093b0:	4b18      	ldr	r3, [pc, #96]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80093b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80093b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80093ba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80093bc:	4b15      	ldr	r3, [pc, #84]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093c8:	d105      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d102      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 80093d0:	4b13      	ldr	r3, [pc, #76]	@ (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80093d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d4:	e06e      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80093d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093e2:	d106      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 80093e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093ea:	d102      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 80093ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80093ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80093f0:	e060      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80093f2:	4b08      	ldr	r3, [pc, #32]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093fe:	d106      	bne.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8009400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009406:	d102      	bne.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 8009408:	4b03      	ldr	r3, [pc, #12]	@ (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800940a:	637b      	str	r3, [r7, #52]	@ 0x34
 800940c:	e052      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800940e:	2300      	movs	r3, #0
 8009410:	637b      	str	r3, [r7, #52]	@ 0x34
 8009412:	e04f      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8009414:	46020c00 	.word	0x46020c00
 8009418:	00f42400 	.word	0x00f42400
 800941c:	0800e820 	.word	0x0800e820
 8009420:	02dc6c00 	.word	0x02dc6c00
 8009424:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8009428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800942c:	f1a3 0108 	sub.w	r1, r3, #8
 8009430:	ea52 0301 	orrs.w	r3, r2, r1
 8009434:	d13c      	bne.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8009436:	4b22      	ldr	r3, [pc, #136]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8009438:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800943c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009440:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8009442:	4b1f      	ldr	r3, [pc, #124]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800944a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800944e:	d105      	bne.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	2b00      	cmp	r3, #0
 8009454:	d102      	bne.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 8009456:	4b1b      	ldr	r3, [pc, #108]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8009458:	637b      	str	r3, [r7, #52]	@ 0x34
 800945a:	e02b      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800945c:	4b18      	ldr	r3, [pc, #96]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009464:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009468:	d106      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 800946a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009470:	d102      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8009472:	4b15      	ldr	r3, [pc, #84]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8009474:	637b      	str	r3, [r7, #52]	@ 0x34
 8009476:	e01d      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8009478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800947e:	d107      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009484:	4618      	mov	r0, r3
 8009486:	f7fe f8b5 	bl	80075f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948c:	637b      	str	r3, [r7, #52]	@ 0x34
 800948e:	e011      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8009490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009492:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009496:	d108      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe f8a9 	bl	80075f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80094a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a4:	085b      	lsrs	r3, r3, #1
 80094a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a8:	e004      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ae:	e001      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80094b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3738      	adds	r7, #56	@ 0x38
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	46020c00 	.word	0x46020c00
 80094c4:	00f42400 	.word	0x00f42400
 80094c8:	007a1200 	.word	0x007a1200

080094cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80094d4:	4b47      	ldr	r3, [pc, #284]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a46      	ldr	r2, [pc, #280]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 80094da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80094de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80094e0:	f7fa fafc 	bl	8003adc <HAL_GetTick>
 80094e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094e6:	e008      	b.n	80094fa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80094e8:	f7fa faf8 	bl	8003adc <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d901      	bls.n	80094fa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e077      	b.n	80095ea <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094fa:	4b3e      	ldr	r3, [pc, #248]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f0      	bne.n	80094e8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009506:	4b3b      	ldr	r3, [pc, #236]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 8009508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800950e:	f023 0303 	bic.w	r3, r3, #3
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	6811      	ldr	r1, [r2, #0]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	6852      	ldr	r2, [r2, #4]
 800951a:	3a01      	subs	r2, #1
 800951c:	0212      	lsls	r2, r2, #8
 800951e:	430a      	orrs	r2, r1
 8009520:	4934      	ldr	r1, [pc, #208]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 8009522:	4313      	orrs	r3, r2
 8009524:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009526:	4b33      	ldr	r3, [pc, #204]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 8009528:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800952a:	4b33      	ldr	r3, [pc, #204]	@ (80095f8 <RCCEx_PLL2_Config+0x12c>)
 800952c:	4013      	ands	r3, r2
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6892      	ldr	r2, [r2, #8]
 8009532:	3a01      	subs	r2, #1
 8009534:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	68d2      	ldr	r2, [r2, #12]
 800953c:	3a01      	subs	r2, #1
 800953e:	0252      	lsls	r2, r2, #9
 8009540:	b292      	uxth	r2, r2
 8009542:	4311      	orrs	r1, r2
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	6912      	ldr	r2, [r2, #16]
 8009548:	3a01      	subs	r2, #1
 800954a:	0412      	lsls	r2, r2, #16
 800954c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009550:	4311      	orrs	r1, r2
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	6952      	ldr	r2, [r2, #20]
 8009556:	3a01      	subs	r2, #1
 8009558:	0612      	lsls	r2, r2, #24
 800955a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800955e:	430a      	orrs	r2, r1
 8009560:	4924      	ldr	r1, [pc, #144]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 8009562:	4313      	orrs	r3, r2
 8009564:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009566:	4b23      	ldr	r3, [pc, #140]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 8009568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956a:	f023 020c 	bic.w	r2, r3, #12
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	4920      	ldr	r1, [pc, #128]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 8009574:	4313      	orrs	r3, r2
 8009576:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009578:	4b1e      	ldr	r3, [pc, #120]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 800957a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	491c      	ldr	r1, [pc, #112]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 8009582:	4313      	orrs	r3, r2
 8009584:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009586:	4b1b      	ldr	r3, [pc, #108]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 8009588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800958a:	4a1a      	ldr	r2, [pc, #104]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 800958c:	f023 0310 	bic.w	r3, r3, #16
 8009590:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009592:	4b18      	ldr	r3, [pc, #96]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 8009594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009596:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800959a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	69d2      	ldr	r2, [r2, #28]
 80095a2:	00d2      	lsls	r2, r2, #3
 80095a4:	4913      	ldr	r1, [pc, #76]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80095aa:	4b12      	ldr	r3, [pc, #72]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 80095ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ae:	4a11      	ldr	r2, [pc, #68]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 80095b0:	f043 0310 	orr.w	r3, r3, #16
 80095b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80095b6:	4b0f      	ldr	r3, [pc, #60]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a0e      	ldr	r2, [pc, #56]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 80095bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80095c0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80095c2:	f7fa fa8b 	bl	8003adc <HAL_GetTick>
 80095c6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095c8:	e008      	b.n	80095dc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80095ca:	f7fa fa87 	bl	8003adc <HAL_GetTick>
 80095ce:	4602      	mov	r2, r0
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d901      	bls.n	80095dc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	e006      	b.n	80095ea <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095dc:	4b05      	ldr	r3, [pc, #20]	@ (80095f4 <RCCEx_PLL2_Config+0x128>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0f0      	beq.n	80095ca <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80095e8:	2300      	movs	r3, #0

}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	46020c00 	.word	0x46020c00
 80095f8:	80800000 	.word	0x80800000

080095fc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009604:	4b47      	ldr	r3, [pc, #284]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a46      	ldr	r2, [pc, #280]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 800960a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800960e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009610:	f7fa fa64 	bl	8003adc <HAL_GetTick>
 8009614:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009616:	e008      	b.n	800962a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009618:	f7fa fa60 	bl	8003adc <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b02      	cmp	r3, #2
 8009624:	d901      	bls.n	800962a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e077      	b.n	800971a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800962a:	4b3e      	ldr	r3, [pc, #248]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1f0      	bne.n	8009618 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009636:	4b3b      	ldr	r3, [pc, #236]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 8009638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800963a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800963e:	f023 0303 	bic.w	r3, r3, #3
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	6811      	ldr	r1, [r2, #0]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	6852      	ldr	r2, [r2, #4]
 800964a:	3a01      	subs	r2, #1
 800964c:	0212      	lsls	r2, r2, #8
 800964e:	430a      	orrs	r2, r1
 8009650:	4934      	ldr	r1, [pc, #208]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 8009652:	4313      	orrs	r3, r2
 8009654:	630b      	str	r3, [r1, #48]	@ 0x30
 8009656:	4b33      	ldr	r3, [pc, #204]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 8009658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800965a:	4b33      	ldr	r3, [pc, #204]	@ (8009728 <RCCEx_PLL3_Config+0x12c>)
 800965c:	4013      	ands	r3, r2
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	6892      	ldr	r2, [r2, #8]
 8009662:	3a01      	subs	r2, #1
 8009664:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	68d2      	ldr	r2, [r2, #12]
 800966c:	3a01      	subs	r2, #1
 800966e:	0252      	lsls	r2, r2, #9
 8009670:	b292      	uxth	r2, r2
 8009672:	4311      	orrs	r1, r2
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	6912      	ldr	r2, [r2, #16]
 8009678:	3a01      	subs	r2, #1
 800967a:	0412      	lsls	r2, r2, #16
 800967c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009680:	4311      	orrs	r1, r2
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	6952      	ldr	r2, [r2, #20]
 8009686:	3a01      	subs	r2, #1
 8009688:	0612      	lsls	r2, r2, #24
 800968a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800968e:	430a      	orrs	r2, r1
 8009690:	4924      	ldr	r1, [pc, #144]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 8009692:	4313      	orrs	r3, r2
 8009694:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009696:	4b23      	ldr	r3, [pc, #140]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 8009698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969a:	f023 020c 	bic.w	r2, r3, #12
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	4920      	ldr	r1, [pc, #128]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 80096a4:	4313      	orrs	r3, r2
 80096a6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80096a8:	4b1e      	ldr	r3, [pc, #120]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 80096aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a1b      	ldr	r3, [r3, #32]
 80096b0:	491c      	ldr	r1, [pc, #112]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80096b6:	4b1b      	ldr	r3, [pc, #108]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 80096b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ba:	4a1a      	ldr	r2, [pc, #104]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 80096bc:	f023 0310 	bic.w	r3, r3, #16
 80096c0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80096c2:	4b18      	ldr	r3, [pc, #96]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 80096c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096ca:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	69d2      	ldr	r2, [r2, #28]
 80096d2:	00d2      	lsls	r2, r2, #3
 80096d4:	4913      	ldr	r1, [pc, #76]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80096da:	4b12      	ldr	r3, [pc, #72]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 80096dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096de:	4a11      	ldr	r2, [pc, #68]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 80096e0:	f043 0310 	orr.w	r3, r3, #16
 80096e4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80096e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a0e      	ldr	r2, [pc, #56]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 80096ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096f0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80096f2:	f7fa f9f3 	bl	8003adc <HAL_GetTick>
 80096f6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096f8:	e008      	b.n	800970c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096fa:	f7fa f9ef 	bl	8003adc <HAL_GetTick>
 80096fe:	4602      	mov	r2, r0
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	2b02      	cmp	r3, #2
 8009706:	d901      	bls.n	800970c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e006      	b.n	800971a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800970c:	4b05      	ldr	r3, [pc, #20]	@ (8009724 <RCCEx_PLL3_Config+0x128>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0f0      	beq.n	80096fa <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	46020c00 	.word	0x46020c00
 8009728:	80800000 	.word	0x80800000

0800972c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e0fb      	b.n	8009936 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a7f      	ldr	r2, [pc, #508]	@ (8009940 <HAL_SPI_Init+0x214>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d004      	beq.n	8009752 <HAL_SPI_Init+0x26>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a7d      	ldr	r2, [pc, #500]	@ (8009944 <HAL_SPI_Init+0x218>)
 800974e:	4293      	cmp	r3, r2
 8009750:	e000      	b.n	8009754 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009752:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a78      	ldr	r2, [pc, #480]	@ (8009940 <HAL_SPI_Init+0x214>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d004      	beq.n	800976e <HAL_SPI_Init+0x42>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a76      	ldr	r2, [pc, #472]	@ (8009944 <HAL_SPI_Init+0x218>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d105      	bne.n	800977a <HAL_SPI_Init+0x4e>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	2b0f      	cmp	r3, #15
 8009774:	d901      	bls.n	800977a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e0dd      	b.n	8009936 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 f8fe 	bl	800a97c <SPI_GetPacketSize>
 8009780:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a6e      	ldr	r2, [pc, #440]	@ (8009940 <HAL_SPI_Init+0x214>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d004      	beq.n	8009796 <HAL_SPI_Init+0x6a>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a6c      	ldr	r2, [pc, #432]	@ (8009944 <HAL_SPI_Init+0x218>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d102      	bne.n	800979c <HAL_SPI_Init+0x70>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b08      	cmp	r3, #8
 800979a:	d816      	bhi.n	80097ca <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80097a0:	4a69      	ldr	r2, [pc, #420]	@ (8009948 <HAL_SPI_Init+0x21c>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d00e      	beq.n	80097c4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a68      	ldr	r2, [pc, #416]	@ (800994c <HAL_SPI_Init+0x220>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d009      	beq.n	80097c4 <HAL_SPI_Init+0x98>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a66      	ldr	r2, [pc, #408]	@ (8009950 <HAL_SPI_Init+0x224>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d004      	beq.n	80097c4 <HAL_SPI_Init+0x98>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a65      	ldr	r2, [pc, #404]	@ (8009954 <HAL_SPI_Init+0x228>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d104      	bne.n	80097ce <HAL_SPI_Init+0xa2>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b10      	cmp	r3, #16
 80097c8:	d901      	bls.n	80097ce <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e0b3      	b.n	8009936 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d106      	bne.n	80097e8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7f9 fc72 	bl	80030cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2202      	movs	r2, #2
 80097ec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 0201 	bic.w	r2, r2, #1
 80097fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800980a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009814:	d119      	bne.n	800984a <HAL_SPI_Init+0x11e>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800981e:	d103      	bne.n	8009828 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009824:	2b00      	cmp	r3, #0
 8009826:	d008      	beq.n	800983a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10c      	bne.n	800984a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009838:	d107      	bne.n	800984a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009848:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00f      	beq.n	8009876 <HAL_SPI_Init+0x14a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	2b06      	cmp	r3, #6
 800985c:	d90b      	bls.n	8009876 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	430a      	orrs	r2, r1
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	e007      	b.n	8009886 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009884:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	69da      	ldr	r2, [r3, #28]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988e:	431a      	orrs	r2, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	431a      	orrs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009898:	ea42 0103 	orr.w	r1, r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68da      	ldr	r2, [r3, #12]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b0:	431a      	orrs	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	431a      	orrs	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	431a      	orrs	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	431a      	orrs	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	431a      	orrs	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	431a      	orrs	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098da:	431a      	orrs	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	431a      	orrs	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098e6:	431a      	orrs	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ec:	431a      	orrs	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098f2:	ea42 0103 	orr.w	r1, r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	430a      	orrs	r2, r1
 8009900:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	430a      	orrs	r2, r1
 8009922:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	46002000 	.word	0x46002000
 8009944:	56002000 	.word	0x56002000
 8009948:	40013000 	.word	0x40013000
 800994c:	50013000 	.word	0x50013000
 8009950:	40003800 	.word	0x40003800
 8009954:	50003800 	.word	0x50003800

08009958 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b08c      	sub	sp, #48	@ 0x30
 800995c:	af02      	add	r7, sp, #8
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3320      	adds	r3, #32
 800996c:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3330      	adds	r3, #48	@ 0x30
 8009974:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009976:	f7fa f8b1 	bl	8003adc <HAL_GetTick>
 800997a:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800997c:	887b      	ldrh	r3, [r7, #2]
 800997e:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 8009980:	887b      	ldrh	r3, [r7, #2]
 8009982:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b01      	cmp	r3, #1
 800998e:	d001      	beq.n	8009994 <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 8009990:	2302      	movs	r3, #2
 8009992:	e237      	b.n	8009e04 <HAL_SPI_TransmitReceive+0x4ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d005      	beq.n	80099a6 <HAL_SPI_TransmitReceive+0x4e>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <HAL_SPI_TransmitReceive+0x4e>
 80099a0:	887b      	ldrh	r3, [r7, #2]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e22c      	b.n	8009e04 <HAL_SPI_TransmitReceive+0x4ac>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d101      	bne.n	80099b8 <HAL_SPI_TransmitReceive+0x60>
 80099b4:	2302      	movs	r3, #2
 80099b6:	e225      	b.n	8009e04 <HAL_SPI_TransmitReceive+0x4ac>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2205      	movs	r2, #5
 80099c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	887a      	ldrh	r2, [r7, #2]
 80099da:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	887a      	ldrh	r2, [r7, #2]
 80099e2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	887a      	ldrh	r2, [r7, #2]
 80099f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	887a      	ldrh	r2, [r7, #2]
 80099f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68da      	ldr	r2, [r3, #12]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009a16:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a6c      	ldr	r2, [pc, #432]	@ (8009bd0 <HAL_SPI_TransmitReceive+0x278>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d00e      	beq.n	8009a40 <HAL_SPI_TransmitReceive+0xe8>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a6b      	ldr	r2, [pc, #428]	@ (8009bd4 <HAL_SPI_TransmitReceive+0x27c>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d009      	beq.n	8009a40 <HAL_SPI_TransmitReceive+0xe8>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a69      	ldr	r2, [pc, #420]	@ (8009bd8 <HAL_SPI_TransmitReceive+0x280>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d004      	beq.n	8009a40 <HAL_SPI_TransmitReceive+0xe8>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a68      	ldr	r2, [pc, #416]	@ (8009bdc <HAL_SPI_TransmitReceive+0x284>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d102      	bne.n	8009a46 <HAL_SPI_TransmitReceive+0xee>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8009a40:	2310      	movs	r3, #16
 8009a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a44:	e001      	b.n	8009a4a <HAL_SPI_TransmitReceive+0xf2>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8009a46:	2308      	movs	r3, #8
 8009a48:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	0c1b      	lsrs	r3, r3, #16
 8009a52:	041b      	lsls	r3, r3, #16
 8009a54:	8879      	ldrh	r1, [r7, #2]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	6812      	ldr	r2, [r2, #0]
 8009a5a:	430b      	orrs	r3, r1
 8009a5c:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f042 0201 	orr.w	r2, r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	69db      	ldr	r3, [r3, #28]
 8009a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10c      	bne.n	8009a96 <HAL_SPI_TransmitReceive+0x13e>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a84:	d107      	bne.n	8009a96 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	2b0f      	cmp	r3, #15
 8009a9c:	f240 808e 	bls.w	8009bbc <HAL_SPI_TransmitReceive+0x264>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8009bd0 <HAL_SPI_TransmitReceive+0x278>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d00e      	beq.n	8009ac8 <HAL_SPI_TransmitReceive+0x170>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a49      	ldr	r2, [pc, #292]	@ (8009bd4 <HAL_SPI_TransmitReceive+0x27c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d009      	beq.n	8009ac8 <HAL_SPI_TransmitReceive+0x170>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a47      	ldr	r2, [pc, #284]	@ (8009bd8 <HAL_SPI_TransmitReceive+0x280>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d004      	beq.n	8009ac8 <HAL_SPI_TransmitReceive+0x170>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a46      	ldr	r2, [pc, #280]	@ (8009bdc <HAL_SPI_TransmitReceive+0x284>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d179      	bne.n	8009bbc <HAL_SPI_TransmitReceive+0x264>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	089b      	lsrs	r3, r3, #2
 8009acc:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009ace:	e06e      	b.n	8009bae <HAL_SPI_TransmitReceive+0x256>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	f003 0302 	and.w	r3, r3, #2
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d120      	bne.n	8009b20 <HAL_SPI_TransmitReceive+0x1c8>
 8009ade:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01d      	beq.n	8009b20 <HAL_SPI_TransmitReceive+0x1c8>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009ae4:	8c3a      	ldrh	r2, [r7, #32]
 8009ae6:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aea:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d217      	bcs.n	8009b20 <HAL_SPI_TransmitReceive+0x1c8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6812      	ldr	r2, [r2, #0]
 8009afa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b00:	1d1a      	adds	r2, r3, #4
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b1e:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	695a      	ldr	r2, [r3, #20]
 8009b26:	f248 0308 	movw	r3, #32776	@ 0x8008
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d01a      	beq.n	8009b66 <HAL_SPI_TransmitReceive+0x20e>
 8009b30:	8c3b      	ldrh	r3, [r7, #32]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d017      	beq.n	8009b66 <HAL_SPI_TransmitReceive+0x20e>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b3e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009b40:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b46:	1d1a      	adds	r2, r3, #4
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	3b01      	subs	r3, #1
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009b64:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b66:	f7f9 ffb9 	bl	8003adc <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d803      	bhi.n	8009b7e <HAL_SPI_TransmitReceive+0x226>
 8009b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7c:	d102      	bne.n	8009b84 <HAL_SPI_TransmitReceive+0x22c>
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d114      	bne.n	8009bae <HAL_SPI_TransmitReceive+0x256>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 fe2b 	bl	800a7e0 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009baa:	2303      	movs	r3, #3
 8009bac:	e12a      	b.n	8009e04 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009bae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d18d      	bne.n	8009ad0 <HAL_SPI_TransmitReceive+0x178>
 8009bb4:	8c3b      	ldrh	r3, [r7, #32]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d18a      	bne.n	8009ad0 <HAL_SPI_TransmitReceive+0x178>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009bba:	e0fd      	b.n	8009db8 <HAL_SPI_TransmitReceive+0x460>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	2b07      	cmp	r3, #7
 8009bc2:	f240 80f3 	bls.w	8009dac <HAL_SPI_TransmitReceive+0x454>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc8:	085b      	lsrs	r3, r3, #1
 8009bca:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009bcc:	e075      	b.n	8009cba <HAL_SPI_TransmitReceive+0x362>
 8009bce:	bf00      	nop
 8009bd0:	40013000 	.word	0x40013000
 8009bd4:	50013000 	.word	0x50013000
 8009bd8:	40003800 	.word	0x40003800
 8009bdc:	50003800 	.word	0x50003800
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	f003 0302 	and.w	r3, r3, #2
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d11f      	bne.n	8009c2e <HAL_SPI_TransmitReceive+0x2d6>
 8009bee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d01c      	beq.n	8009c2e <HAL_SPI_TransmitReceive+0x2d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009bf4:	8c3a      	ldrh	r2, [r7, #32]
 8009bf6:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d216      	bcs.n	8009c2e <HAL_SPI_TransmitReceive+0x2d6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c04:	881a      	ldrh	r2, [r3, #0]
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c0e:	1c9a      	adds	r2, r3, #2
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c2c:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	f003 0301 	and.w	r3, r3, #1
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d11a      	bne.n	8009c72 <HAL_SPI_TransmitReceive+0x31a>
 8009c3c:	8c3b      	ldrh	r3, [r7, #32]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d017      	beq.n	8009c72 <HAL_SPI_TransmitReceive+0x31a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c46:	69ba      	ldr	r2, [r7, #24]
 8009c48:	8812      	ldrh	r2, [r2, #0]
 8009c4a:	b292      	uxth	r2, r2
 8009c4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c52:	1c9a      	adds	r2, r3, #2
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	3b01      	subs	r3, #1
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009c70:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c72:	f7f9 ff33 	bl	8003adc <HAL_GetTick>
 8009c76:	4602      	mov	r2, r0
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d803      	bhi.n	8009c8a <HAL_SPI_TransmitReceive+0x332>
 8009c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c88:	d102      	bne.n	8009c90 <HAL_SPI_TransmitReceive+0x338>
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d114      	bne.n	8009cba <HAL_SPI_TransmitReceive+0x362>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f000 fda5 	bl	800a7e0 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e0a4      	b.n	8009e04 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009cba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d18f      	bne.n	8009be0 <HAL_SPI_TransmitReceive+0x288>
 8009cc0:	8c3b      	ldrh	r3, [r7, #32]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d18c      	bne.n	8009be0 <HAL_SPI_TransmitReceive+0x288>
 8009cc6:	e077      	b.n	8009db8 <HAL_SPI_TransmitReceive+0x460>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d121      	bne.n	8009d1a <HAL_SPI_TransmitReceive+0x3c2>
 8009cd6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d01e      	beq.n	8009d1a <HAL_SPI_TransmitReceive+0x3c2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009cdc:	8c3a      	ldrh	r2, [r7, #32]
 8009cde:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d218      	bcs.n	8009d1a <HAL_SPI_TransmitReceive+0x3c2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3320      	adds	r3, #32
 8009cf2:	7812      	ldrb	r2, [r2, #0]
 8009cf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cfa:	1c5a      	adds	r2, r3, #1
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d18:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d11d      	bne.n	8009d64 <HAL_SPI_TransmitReceive+0x40c>
 8009d28:	8c3b      	ldrh	r3, [r7, #32]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d01a      	beq.n	8009d64 <HAL_SPI_TransmitReceive+0x40c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d3a:	7812      	ldrb	r2, [r2, #0]
 8009d3c:	b2d2      	uxtb	r2, r2
 8009d3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	3b01      	subs	r3, #1
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009d62:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d64:	f7f9 feba 	bl	8003adc <HAL_GetTick>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d803      	bhi.n	8009d7c <HAL_SPI_TransmitReceive+0x424>
 8009d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7a:	d102      	bne.n	8009d82 <HAL_SPI_TransmitReceive+0x42a>
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d114      	bne.n	8009dac <HAL_SPI_TransmitReceive+0x454>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f000 fd2c 	bl	800a7e0 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e02b      	b.n	8009e04 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009dac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d18a      	bne.n	8009cc8 <HAL_SPI_TransmitReceive+0x370>
 8009db2:	8c3b      	ldrh	r3, [r7, #32]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d187      	bne.n	8009cc8 <HAL_SPI_TransmitReceive+0x370>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2108      	movs	r1, #8
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f000 fdac 	bl	800a920 <SPI_WaitOnFlagUntilTimeout>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d007      	beq.n	8009dde <HAL_SPI_TransmitReceive+0x486>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dd4:	f043 0220 	orr.w	r2, r3, #32
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f000 fcfe 	bl	800a7e0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <HAL_SPI_TransmitReceive+0x4aa>
  {
    return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e000      	b.n	8009e04 <HAL_SPI_TransmitReceive+0x4ac>
  }
  else
  {
    return HAL_OK;
 8009e02:	2300      	movs	r3, #0
  }
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3728      	adds	r7, #40	@ 0x28
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d001      	beq.n	8009e2a <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 8009e26:	2302      	movs	r3, #2
 8009e28:	e266      	b.n	800a2f8 <HAL_SPI_TransmitReceive_DMA+0x4ec>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d005      	beq.n	8009e3c <HAL_SPI_TransmitReceive_DMA+0x30>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <HAL_SPI_TransmitReceive_DMA+0x30>
 8009e36:	887b      	ldrh	r3, [r7, #2]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d101      	bne.n	8009e40 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e25b      	b.n	800a2f8 <HAL_SPI_TransmitReceive_DMA+0x4ec>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <HAL_SPI_TransmitReceive_DMA+0x42>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	e254      	b.n	800a2f8 <HAL_SPI_TransmitReceive_DMA+0x4ec>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2205      	movs	r2, #5
 8009e5a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	887a      	ldrh	r2, [r7, #2]
 8009e70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	887a      	ldrh	r2, [r7, #2]
 8009e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	887a      	ldrh	r2, [r7, #2]
 8009e86:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	887a      	ldrh	r2, [r7, #2]
 8009e8e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68da      	ldr	r2, [r3, #12]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009eac:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689a      	ldr	r2, [r3, #8]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009ebc:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) && \
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	2b0f      	cmp	r3, #15
 8009ec4:	d91a      	bls.n	8009efc <HAL_SPI_TransmitReceive_DMA+0xf0>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ed2:	d013      	beq.n	8009efc <HAL_SPI_TransmitReceive_DMA+0xf0>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) && \
 8009ed8:	4a9e      	ldr	r2, [pc, #632]	@ (800a154 <HAL_SPI_TransmitReceive_DMA+0x348>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d018      	beq.n	8009f10 <HAL_SPI_TransmitReceive_DMA+0x104>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a9d      	ldr	r2, [pc, #628]	@ (800a158 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d013      	beq.n	8009f10 <HAL_SPI_TransmitReceive_DMA+0x104>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a9b      	ldr	r2, [pc, #620]	@ (800a15c <HAL_SPI_TransmitReceive_DMA+0x350>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d00e      	beq.n	8009f10 <HAL_SPI_TransmitReceive_DMA+0x104>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a9a      	ldr	r2, [pc, #616]	@ (800a160 <HAL_SPI_TransmitReceive_DMA+0x354>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d009      	beq.n	8009f10 <HAL_SPI_TransmitReceive_DMA+0x104>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE)))
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8009f00:	2b07      	cmp	r3, #7
 8009f02:	d90b      	bls.n	8009f1c <HAL_SPI_TransmitReceive_DMA+0x110>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE)))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f0a:	69db      	ldr	r3, [r3, #28]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d105      	bne.n	8009f1c <HAL_SPI_TransmitReceive_DMA+0x110>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e1ed      	b.n	800a2f8 <HAL_SPI_TransmitReceive_DMA+0x4ec>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	2b07      	cmp	r3, #7
 8009f22:	d842      	bhi.n	8009faa <HAL_SPI_TransmitReceive_DMA+0x19e>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d109      	bne.n	8009f44 <HAL_SPI_TransmitReceive_DMA+0x138>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	3301      	adds	r3, #1
 8009f3a:	105b      	asrs	r3, r3, #1
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d109      	bne.n	8009f64 <HAL_SPI_TransmitReceive_DMA+0x158>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	3303      	adds	r3, #3
 8009f5a:	109b      	asrs	r3, r3, #2
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f6a:	69db      	ldr	r3, [r3, #28]
 8009f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f70:	d109      	bne.n	8009f86 <HAL_SPI_TransmitReceive_DMA+0x17a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	105b      	asrs	r3, r3, #1
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f8c:	69db      	ldr	r3, [r3, #28]
 8009f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f92:	d12f      	bne.n	8009ff4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	3303      	adds	r3, #3
 8009f9e:	109b      	asrs	r3, r3, #2
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8009fa8:	e024      	b.n	8009ff4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	2b0f      	cmp	r3, #15
 8009fb0:	d820      	bhi.n	8009ff4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d109      	bne.n	8009fd2 <HAL_SPI_TransmitReceive_DMA+0x1c6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	105b      	asrs	r3, r3, #1
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fde:	d109      	bne.n	8009ff4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	3301      	adds	r3, #1
 8009fea:	105b      	asrs	r3, r3, #1
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ffa:	4a5a      	ldr	r2, [pc, #360]	@ (800a164 <HAL_SPI_TransmitReceive_DMA+0x358>)
 8009ffc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a004:	4a58      	ldr	r2, [pc, #352]	@ (800a168 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 800a006:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a00e:	4a57      	ldr	r2, [pc, #348]	@ (800a16c <HAL_SPI_TransmitReceive_DMA+0x360>)
 800a010:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a018:	2200      	movs	r2, #0
 800a01a:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	2b07      	cmp	r3, #7
 800a022:	d804      	bhi.n	800a02e <HAL_SPI_TransmitReceive_DMA+0x222>
  {
    hspi->RxXferCount = Size;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	887a      	ldrh	r2, [r7, #2]
 800a028:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a02c:	e010      	b.n	800a050 <HAL_SPI_TransmitReceive_DMA+0x244>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	2b0f      	cmp	r3, #15
 800a034:	d806      	bhi.n	800a044 <HAL_SPI_TransmitReceive_DMA+0x238>
  {
    hspi->RxXferCount = Size * 2U;
 800a036:	887b      	ldrh	r3, [r7, #2]
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a042:	e005      	b.n	800a050 <HAL_SPI_TransmitReceive_DMA+0x244>
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 800a044:	887b      	ldrh	r3, [r7, #2]
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	b29a      	uxth	r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  }
  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d02d      	beq.n	800a0bc <HAL_SPI_TransmitReceive_DMA+0x2b0>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d024      	beq.n	800a0b6 <HAL_SPI_TransmitReceive_DMA+0x2aa>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a072:	b29a      	uxth	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a07a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a08e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a09e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fa fd5a 	bl	8004b64 <HAL_DMAEx_List_Start_IT>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	75fb      	strb	r3, [r7, #23]
 800a0b4:	e014      	b.n	800a0e0 <HAL_SPI_TransmitReceive_DMA+0x2d4>
    }
    else
    {
      status = HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	75fb      	strb	r3, [r7, #23]
 800a0ba:	e011      	b.n	800a0e0 <HAL_SPI_TransmitReceive_DMA+0x2d4>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3330      	adds	r3, #48	@ 0x30
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0ce:	461a      	mov	r2, r3
                              hspi->RxXferCount);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a0d6:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a0d8:	f7f9 fff0 	bl	80040bc <HAL_DMA_Start_IT>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d011      	beq.n	800a10a <HAL_SPI_TransmitReceive_DMA+0x2fe>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0ec:	f043 0210 	orr.w	r2, r3, #16
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e0f6      	b.n	800a2f8 <HAL_SPI_TransmitReceive_DMA+0x4ec>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a118:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a120:	2200      	movs	r2, #0
 800a122:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a12a:	2200      	movs	r2, #0
 800a12c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a134:	2200      	movs	r2, #0
 800a136:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a13e:	4a0b      	ldr	r2, [pc, #44]	@ (800a16c <HAL_SPI_TransmitReceive_DMA+0x360>)
 800a140:	669a      	str	r2, [r3, #104]	@ 0x68

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	2b07      	cmp	r3, #7
 800a148:	d812      	bhi.n	800a170 <HAL_SPI_TransmitReceive_DMA+0x364>
  {
    hspi->TxXferCount = Size;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	887a      	ldrh	r2, [r7, #2]
 800a14e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a152:	e01e      	b.n	800a192 <HAL_SPI_TransmitReceive_DMA+0x386>
 800a154:	40013000 	.word	0x40013000
 800a158:	50013000 	.word	0x50013000
 800a15c:	40003800 	.word	0x40003800
 800a160:	50003800 	.word	0x50003800
 800a164:	0800a74b 	.word	0x0800a74b
 800a168:	0800a6f9 	.word	0x0800a6f9
 800a16c:	0800a767 	.word	0x0800a767
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	2b0f      	cmp	r3, #15
 800a176:	d806      	bhi.n	800a186 <HAL_SPI_TransmitReceive_DMA+0x37a>
  {
    hspi->TxXferCount = Size * 2U;
 800a178:	887b      	ldrh	r3, [r7, #2]
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a184:	e005      	b.n	800a192 <HAL_SPI_TransmitReceive_DMA+0x386>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 800a186:	887b      	ldrh	r3, [r7, #2]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel  */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a19a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d02d      	beq.n	800a1fe <HAL_SPI_TransmitReceive_DMA+0x3f2>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d024      	beq.n	800a1f8 <HAL_SPI_TransmitReceive_DMA+0x3ec>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f103 0220 	add.w	r2, r3, #32
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7fa fcb9 	bl	8004b64 <HAL_DMAEx_List_Start_IT>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	75fb      	strb	r3, [r7, #23]
 800a1f6:	e014      	b.n	800a222 <HAL_SPI_TransmitReceive_DMA+0x416>
    }
    else
    {
      status = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	75fb      	strb	r3, [r7, #23]
 800a1fc:	e011      	b.n	800a222 <HAL_SPI_TransmitReceive_DMA+0x416>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a208:	4619      	mov	r1, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3320      	adds	r3, #32
 800a210:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a218:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a21a:	f7f9 ff4f 	bl	80040bc <HAL_DMA_Start_IT>
 800a21e:	4603      	mov	r3, r0
 800a220:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800a222:	7dfb      	ldrb	r3, [r7, #23]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d017      	beq.n	800a258 <HAL_SPI_TransmitReceive_DMA+0x44c>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a22e:	4618      	mov	r0, r3
 800a230:	f7f9 ffa4 	bl	800417c <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a23a:	f043 0210 	orr.w	r2, r3, #16
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e04f      	b.n	800a2f8 <HAL_SPI_TransmitReceive_DMA+0x4ec>
  }

  if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) && (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a25e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a260:	2b81      	cmp	r3, #129	@ 0x81
 800a262:	d10e      	bne.n	800a282 <HAL_SPI_TransmitReceive_DMA+0x476>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a26a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a26c:	2b81      	cmp	r3, #129	@ 0x81
 800a26e:	d108      	bne.n	800a282 <HAL_SPI_TransmitReceive_DMA+0x476>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	6812      	ldr	r2, [r2, #0]
 800a27a:	0c1b      	lsrs	r3, r3, #16
 800a27c:	041b      	lsls	r3, r3, #16
 800a27e:	6053      	str	r3, [r2, #4]
 800a280:	e009      	b.n	800a296 <HAL_SPI_TransmitReceive_DMA+0x48a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	0c1b      	lsrs	r3, r3, #16
 800a28a:	041b      	lsls	r3, r3, #16
 800a28c:	8879      	ldrh	r1, [r7, #2]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	6812      	ldr	r2, [r2, #0]
 800a292:	430b      	orrs	r3, r1
 800a294:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	689a      	ldr	r2, [r3, #8]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2a4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	691a      	ldr	r2, [r3, #16]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800a2b4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f042 0201 	orr.w	r2, r2, #1
 800a2c4:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10c      	bne.n	800a2ee <HAL_SPI_TransmitReceive_DMA+0x4e2>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a2dc:	d107      	bne.n	800a2ee <HAL_SPI_TransmitReceive_DMA+0x4e2>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2ec:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08a      	sub	sp, #40	@ 0x28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a318:	6a3a      	ldr	r2, [r7, #32]
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	4013      	ands	r3, r2
 800a31e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a328:	2300      	movs	r3, #0
 800a32a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a332:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3330      	adds	r3, #48	@ 0x30
 800a33a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a342:	2b00      	cmp	r3, #0
 800a344:	d010      	beq.n	800a368 <HAL_SPI_IRQHandler+0x68>
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	f003 0308 	and.w	r3, r3, #8
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00b      	beq.n	800a368 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699a      	ldr	r2, [r3, #24]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a35e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f9bf 	bl	800a6e4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a366:	e19a      	b.n	800a69e <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d113      	bne.n	800a39a <HAL_SPI_IRQHandler+0x9a>
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	f003 0320 	and.w	r3, r3, #32
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10e      	bne.n	800a39a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a382:	2b00      	cmp	r3, #0
 800a384:	d009      	beq.n	800a39a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	4798      	blx	r3
    handled = 1UL;
 800a396:	2301      	movs	r3, #1
 800a398:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10f      	bne.n	800a3c4 <HAL_SPI_IRQHandler+0xc4>
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00a      	beq.n	800a3c4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d105      	bne.n	800a3c4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
    handled = 1UL;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	f003 0320 	and.w	r3, r3, #32
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10f      	bne.n	800a3ee <HAL_SPI_IRQHandler+0xee>
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	f003 0302 	and.w	r3, r3, #2
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00a      	beq.n	800a3ee <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d105      	bne.n	800a3ee <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	4798      	blx	r3
    handled = 1UL;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f040 814f 	bne.w	800a694 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	f003 0308 	and.w	r3, r3, #8
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f000 808b 	beq.w	800a518 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f042 0208 	orr.w	r2, r2, #8
 800a410:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	699a      	ldr	r2, [r3, #24]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f042 0210 	orr.w	r2, r2, #16
 800a420:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	699a      	ldr	r2, [r3, #24]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a430:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	691a      	ldr	r2, [r3, #16]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f022 0208 	bic.w	r2, r2, #8
 800a440:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d13d      	bne.n	800a4cc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a450:	e036      	b.n	800a4c0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	2b0f      	cmp	r3, #15
 800a458:	d90b      	bls.n	800a472 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a462:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a464:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a46a:	1d1a      	adds	r2, r3, #4
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a470:	e01d      	b.n	800a4ae <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	2b07      	cmp	r3, #7
 800a478:	d90b      	bls.n	800a492 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	8812      	ldrh	r2, [r2, #0]
 800a482:	b292      	uxth	r2, r2
 800a484:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a48a:	1c9a      	adds	r2, r3, #2
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a490:	e00d      	b.n	800a4ae <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a49e:	7812      	ldrb	r2, [r2, #0]
 800a4a0:	b2d2      	uxtb	r2, r2
 800a4a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4a8:	1c5a      	adds	r2, r3, #1
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1c2      	bne.n	800a452 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f987 	bl	800a7e0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d003      	beq.n	800a4ec <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7f7 faf3 	bl	8001ad0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a4ea:	e0d8      	b.n	800a69e <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a4ec:	7cfb      	ldrb	r3, [r7, #19]
 800a4ee:	2b05      	cmp	r3, #5
 800a4f0:	d103      	bne.n	800a4fa <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7f7 fadc 	bl	8001ab0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a4f8:	e0ce      	b.n	800a698 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a4fa:	7cfb      	ldrb	r3, [r7, #19]
 800a4fc:	2b04      	cmp	r3, #4
 800a4fe:	d103      	bne.n	800a508 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f8db 	bl	800a6bc <HAL_SPI_RxCpltCallback>
    return;
 800a506:	e0c7      	b.n	800a698 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a508:	7cfb      	ldrb	r3, [r7, #19]
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	f040 80c4 	bne.w	800a698 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f8c9 	bl	800a6a8 <HAL_SPI_TxCpltCallback>
    return;
 800a516:	e0bf      	b.n	800a698 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f000 80bd 	beq.w	800a69e <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00f      	beq.n	800a54e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a534:	f043 0204 	orr.w	r2, r3, #4
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	699a      	ldr	r2, [r3, #24]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a54c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00f      	beq.n	800a578 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a55e:	f043 0201 	orr.w	r2, r3, #1
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	699a      	ldr	r2, [r3, #24]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a576:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00f      	beq.n	800a5a2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a588:	f043 0208 	orr.w	r2, r3, #8
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	699a      	ldr	r2, [r3, #24]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a5a0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	f003 0320 	and.w	r3, r3, #32
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00f      	beq.n	800a5cc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	699a      	ldr	r2, [r3, #24]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0220 	orr.w	r2, r2, #32
 800a5ca:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d062      	beq.n	800a69c <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f022 0201 	bic.w	r2, r2, #1
 800a5e4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	6812      	ldr	r2, [r2, #0]
 800a5f0:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800a5f4:	f023 0303 	bic.w	r3, r3, #3
 800a5f8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a600:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a604:	d13e      	bne.n	800a684 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a614:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d015      	beq.n	800a64c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a626:	4a1f      	ldr	r2, [pc, #124]	@ (800a6a4 <HAL_SPI_IRQHandler+0x3a4>)
 800a628:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a630:	4618      	mov	r0, r3
 800a632:	f7f9 fe1f 	bl	8004274 <HAL_DMA_Abort_IT>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d007      	beq.n	800a64c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a642:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a652:	2b00      	cmp	r3, #0
 800a654:	d022      	beq.n	800a69c <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a65c:	4a11      	ldr	r2, [pc, #68]	@ (800a6a4 <HAL_SPI_IRQHandler+0x3a4>)
 800a65e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a666:	4618      	mov	r0, r3
 800a668:	f7f9 fe04 	bl	8004274 <HAL_DMA_Abort_IT>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d014      	beq.n	800a69c <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a678:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a682:	e00b      	b.n	800a69c <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7f7 fa1f 	bl	8001ad0 <HAL_SPI_ErrorCallback>
    return;
 800a692:	e003      	b.n	800a69c <HAL_SPI_IRQHandler+0x39c>
    return;
 800a694:	bf00      	nop
 800a696:	e002      	b.n	800a69e <HAL_SPI_IRQHandler+0x39e>
    return;
 800a698:	bf00      	nop
 800a69a:	e000      	b.n	800a69e <HAL_SPI_IRQHandler+0x39e>
    return;
 800a69c:	bf00      	nop
  }
}
 800a69e:	3728      	adds	r7, #40	@ 0x28
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	0800a7ad 	.word	0x0800a7ad

0800a6a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a704:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b07      	cmp	r3, #7
 800a710:	d017      	beq.n	800a742 <SPI_DMATransmitReceiveCplt+0x4a>
  {
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a71a:	2b81      	cmp	r3, #129	@ 0x81
 800a71c:	d109      	bne.n	800a732 <SPI_DMATransmitReceiveCplt+0x3a>
        (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800a726:	2b81      	cmp	r3, #129	@ 0x81
 800a728:	d103      	bne.n	800a732 <SPI_DMATransmitReceiveCplt+0x3a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f7f7 f9c0 	bl	8001ab0 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a730:	e007      	b.n	800a742 <SPI_DMATransmitReceiveCplt+0x4a>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	691a      	ldr	r2, [r3, #16]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f042 0208 	orr.w	r2, r2, #8
 800a740:	611a      	str	r2, [r3, #16]
}
 800a742:	bf00      	nop
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a756:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f7ff ffb9 	bl	800a6d0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a75e:	bf00      	nop
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b084      	sub	sp, #16
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a772:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7f9 ff07 	bl	8004588 <HAL_DMA_GetError>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d011      	beq.n	800a7a4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 f82d 	bl	800a7e0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a78c:	f043 0210 	orr.w	r2, r3, #16
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f7f7 f996 	bl	8001ad0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a7a4:	bf00      	nop
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f7f7 f97c 	bl	8001ad0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7d8:	bf00      	nop
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	699a      	ldr	r2, [r3, #24]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f042 0208 	orr.w	r2, r2, #8
 800a7fe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	699a      	ldr	r2, [r3, #24]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f042 0210 	orr.w	r2, r2, #16
 800a80e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f022 0201 	bic.w	r2, r2, #1
 800a81e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	6812      	ldr	r2, [r2, #0]
 800a82a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800a82e:	f023 0303 	bic.w	r3, r3, #3
 800a832:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	689a      	ldr	r2, [r3, #8]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a842:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	d014      	beq.n	800a87a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f003 0320 	and.w	r3, r3, #32
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00f      	beq.n	800a87a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a860:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	699a      	ldr	r2, [r3, #24]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f042 0220 	orr.w	r2, r2, #32
 800a878:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b03      	cmp	r3, #3
 800a884:	d014      	beq.n	800a8b0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00f      	beq.n	800a8b0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a896:	f043 0204 	orr.w	r2, r3, #4
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	699a      	ldr	r2, [r3, #24]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8ae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00f      	beq.n	800a8da <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8c0:	f043 0201 	orr.w	r2, r3, #1
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	699a      	ldr	r2, [r3, #24]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8d8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00f      	beq.n	800a904 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8ea:	f043 0208 	orr.w	r2, r3, #8
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	699a      	ldr	r2, [r3, #24]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a902:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800a914:	bf00      	nop
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	603b      	str	r3, [r7, #0]
 800a92c:	4613      	mov	r3, r2
 800a92e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a930:	e010      	b.n	800a954 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a932:	f7f9 f8d3 	bl	8003adc <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d803      	bhi.n	800a94a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a948:	d102      	bne.n	800a950 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	e00f      	b.n	800a974 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	695a      	ldr	r2, [r3, #20]
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	4013      	ands	r3, r2
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	429a      	cmp	r2, r3
 800a962:	bf0c      	ite	eq
 800a964:	2301      	moveq	r3, #1
 800a966:	2300      	movne	r3, #0
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	461a      	mov	r2, r3
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d0df      	beq.n	800a932 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a988:	095b      	lsrs	r3, r3, #5
 800a98a:	3301      	adds	r3, #1
 800a98c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	3301      	adds	r3, #1
 800a994:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	3307      	adds	r3, #7
 800a99a:	08db      	lsrs	r3, r3, #3
 800a99c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	fb02 f303 	mul.w	r3, r2, r3
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d12e      	bne.n	800aa26 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d101      	bne.n	800a9d6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e028      	b.n	800aa28 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2202      	movs	r2, #2
 800a9e2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f022 0201 	bic.w	r2, r2, #1
 800a9f4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800aa02:	ea42 0103 	orr.w	r1, r2, r3
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	689a      	ldr	r2, [r3, #8]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	e000      	b.n	800aa28 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
  }
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d001      	beq.n	800aa4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e072      	b.n	800ab32 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68da      	ldr	r2, [r3, #12]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0201 	orr.w	r2, r2, #1
 800aa62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a35      	ldr	r2, [pc, #212]	@ (800ab40 <HAL_TIM_Base_Start_IT+0x10c>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d040      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a34      	ldr	r2, [pc, #208]	@ (800ab44 <HAL_TIM_Base_Start_IT+0x110>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d03b      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa80:	d036      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa8a:	d031      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a2d      	ldr	r2, [pc, #180]	@ (800ab48 <HAL_TIM_Base_Start_IT+0x114>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d02c      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a2c      	ldr	r2, [pc, #176]	@ (800ab4c <HAL_TIM_Base_Start_IT+0x118>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d027      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a2a      	ldr	r2, [pc, #168]	@ (800ab50 <HAL_TIM_Base_Start_IT+0x11c>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d022      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a29      	ldr	r2, [pc, #164]	@ (800ab54 <HAL_TIM_Base_Start_IT+0x120>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d01d      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a27      	ldr	r2, [pc, #156]	@ (800ab58 <HAL_TIM_Base_Start_IT+0x124>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d018      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a26      	ldr	r2, [pc, #152]	@ (800ab5c <HAL_TIM_Base_Start_IT+0x128>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d013      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a24      	ldr	r2, [pc, #144]	@ (800ab60 <HAL_TIM_Base_Start_IT+0x12c>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d00e      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a23      	ldr	r2, [pc, #140]	@ (800ab64 <HAL_TIM_Base_Start_IT+0x130>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d009      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a21      	ldr	r2, [pc, #132]	@ (800ab68 <HAL_TIM_Base_Start_IT+0x134>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d004      	beq.n	800aaf0 <HAL_TIM_Base_Start_IT+0xbc>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a20      	ldr	r2, [pc, #128]	@ (800ab6c <HAL_TIM_Base_Start_IT+0x138>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d115      	bne.n	800ab1c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	689a      	ldr	r2, [r3, #8]
 800aaf6:	4b1e      	ldr	r3, [pc, #120]	@ (800ab70 <HAL_TIM_Base_Start_IT+0x13c>)
 800aaf8:	4013      	ands	r3, r2
 800aafa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b06      	cmp	r3, #6
 800ab00:	d015      	beq.n	800ab2e <HAL_TIM_Base_Start_IT+0xfa>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab08:	d011      	beq.n	800ab2e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f042 0201 	orr.w	r2, r2, #1
 800ab18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab1a:	e008      	b.n	800ab2e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f042 0201 	orr.w	r2, r2, #1
 800ab2a:	601a      	str	r2, [r3, #0]
 800ab2c:	e000      	b.n	800ab30 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	40012c00 	.word	0x40012c00
 800ab44:	50012c00 	.word	0x50012c00
 800ab48:	40000400 	.word	0x40000400
 800ab4c:	50000400 	.word	0x50000400
 800ab50:	40000800 	.word	0x40000800
 800ab54:	50000800 	.word	0x50000800
 800ab58:	40000c00 	.word	0x40000c00
 800ab5c:	50000c00 	.word	0x50000c00
 800ab60:	40013400 	.word	0x40013400
 800ab64:	50013400 	.word	0x50013400
 800ab68:	40014000 	.word	0x40014000
 800ab6c:	50014000 	.word	0x50014000
 800ab70:	00010007 	.word	0x00010007

0800ab74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f022 0201 	bic.w	r2, r2, #1
 800ab8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6a1a      	ldr	r2, [r3, #32]
 800ab92:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ab96:	4013      	ands	r3, r2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10f      	bne.n	800abbc <HAL_TIM_Base_Stop_IT+0x48>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6a1a      	ldr	r2, [r3, #32]
 800aba2:	f244 4344 	movw	r3, #17476	@ 0x4444
 800aba6:	4013      	ands	r3, r2
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d107      	bne.n	800abbc <HAL_TIM_Base_Stop_IT+0x48>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 0201 	bic.w	r2, r2, #1
 800abba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b082      	sub	sp, #8
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d101      	bne.n	800abe4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	e049      	b.n	800ac78 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b00      	cmp	r3, #0
 800abee:	d106      	bne.n	800abfe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7f8 fba9 	bl	8003350 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2202      	movs	r2, #2
 800ac02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4610      	mov	r0, r2
 800ac12:	f000 fa27 	bl	800b064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2201      	movs	r2, #1
 800ac32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	691b      	ldr	r3, [r3, #16]
 800ac96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	f003 0302 	and.w	r3, r3, #2
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d020      	beq.n	800ace4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f003 0302 	and.w	r3, r3, #2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d01b      	beq.n	800ace4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f06f 0202 	mvn.w	r2, #2
 800acb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d003      	beq.n	800acd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f9ac 	bl	800b028 <HAL_TIM_IC_CaptureCallback>
 800acd0:	e005      	b.n	800acde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f99e 	bl	800b014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 f9af 	bl	800b03c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	f003 0304 	and.w	r3, r3, #4
 800acea:	2b00      	cmp	r3, #0
 800acec:	d020      	beq.n	800ad30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f003 0304 	and.w	r3, r3, #4
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d01b      	beq.n	800ad30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f06f 0204 	mvn.w	r2, #4
 800ad00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2202      	movs	r2, #2
 800ad06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f986 	bl	800b028 <HAL_TIM_IC_CaptureCallback>
 800ad1c:	e005      	b.n	800ad2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f978 	bl	800b014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f989 	bl	800b03c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	f003 0308 	and.w	r3, r3, #8
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d020      	beq.n	800ad7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f003 0308 	and.w	r3, r3, #8
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d01b      	beq.n	800ad7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f06f 0208 	mvn.w	r2, #8
 800ad4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2204      	movs	r2, #4
 800ad52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	69db      	ldr	r3, [r3, #28]
 800ad5a:	f003 0303 	and.w	r3, r3, #3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d003      	beq.n	800ad6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 f960 	bl	800b028 <HAL_TIM_IC_CaptureCallback>
 800ad68:	e005      	b.n	800ad76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f952 	bl	800b014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 f963 	bl	800b03c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	f003 0310 	and.w	r3, r3, #16
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d020      	beq.n	800adc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f003 0310 	and.w	r3, r3, #16
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d01b      	beq.n	800adc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f06f 0210 	mvn.w	r2, #16
 800ad98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2208      	movs	r2, #8
 800ad9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	69db      	ldr	r3, [r3, #28]
 800ada6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d003      	beq.n	800adb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 f93a 	bl	800b028 <HAL_TIM_IC_CaptureCallback>
 800adb4:	e005      	b.n	800adc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f92c 	bl	800b014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f93d 	bl	800b03c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00c      	beq.n	800adec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	2b00      	cmp	r3, #0
 800adda:	d007      	beq.n	800adec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f06f 0201 	mvn.w	r2, #1
 800ade4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7f8 fc22 	bl	8003630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d104      	bne.n	800ae00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00c      	beq.n	800ae1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d007      	beq.n	800ae1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ae12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fecd 	bl	800bbb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00c      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d007      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ae36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fec5 	bl	800bbc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00c      	beq.n	800ae62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d007      	beq.n	800ae62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ae5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f8f7 	bl	800b050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	f003 0320 	and.w	r3, r3, #32
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00c      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f003 0320 	and.w	r3, r3, #32
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d007      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f06f 0220 	mvn.w	r2, #32
 800ae7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fe8d 	bl	800bba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00c      	beq.n	800aeaa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d007      	beq.n	800aeaa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800aea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fe99 	bl	800bbdc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00c      	beq.n	800aece <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d007      	beq.n	800aece <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800aec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fe91 	bl	800bbf0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d00c      	beq.n	800aef2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d007      	beq.n	800aef2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800aeea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fe89 	bl	800bc04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00c      	beq.n	800af16 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af02:	2b00      	cmp	r3, #0
 800af04:	d007      	beq.n	800af16 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800af0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fe81 	bl	800bc18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af16:	bf00      	nop
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
	...

0800af20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af36:	2b01      	cmp	r3, #1
 800af38:	d101      	bne.n	800af3e <HAL_TIM_OC_ConfigChannel+0x1e>
 800af3a:	2302      	movs	r3, #2
 800af3c:	e066      	b.n	800b00c <HAL_TIM_OC_ConfigChannel+0xec>
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b14      	cmp	r3, #20
 800af4a:	d857      	bhi.n	800affc <HAL_TIM_OC_ConfigChannel+0xdc>
 800af4c:	a201      	add	r2, pc, #4	@ (adr r2, 800af54 <HAL_TIM_OC_ConfigChannel+0x34>)
 800af4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af52:	bf00      	nop
 800af54:	0800afa9 	.word	0x0800afa9
 800af58:	0800affd 	.word	0x0800affd
 800af5c:	0800affd 	.word	0x0800affd
 800af60:	0800affd 	.word	0x0800affd
 800af64:	0800afb7 	.word	0x0800afb7
 800af68:	0800affd 	.word	0x0800affd
 800af6c:	0800affd 	.word	0x0800affd
 800af70:	0800affd 	.word	0x0800affd
 800af74:	0800afc5 	.word	0x0800afc5
 800af78:	0800affd 	.word	0x0800affd
 800af7c:	0800affd 	.word	0x0800affd
 800af80:	0800affd 	.word	0x0800affd
 800af84:	0800afd3 	.word	0x0800afd3
 800af88:	0800affd 	.word	0x0800affd
 800af8c:	0800affd 	.word	0x0800affd
 800af90:	0800affd 	.word	0x0800affd
 800af94:	0800afe1 	.word	0x0800afe1
 800af98:	0800affd 	.word	0x0800affd
 800af9c:	0800affd 	.word	0x0800affd
 800afa0:	0800affd 	.word	0x0800affd
 800afa4:	0800afef 	.word	0x0800afef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68b9      	ldr	r1, [r7, #8]
 800afae:	4618      	mov	r0, r3
 800afb0:	f000 f95e 	bl	800b270 <TIM_OC1_SetConfig>
      break;
 800afb4:	e025      	b.n	800b002 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 fa19 	bl	800b3f4 <TIM_OC2_SetConfig>
      break;
 800afc2:	e01e      	b.n	800b002 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68b9      	ldr	r1, [r7, #8]
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 fac2 	bl	800b554 <TIM_OC3_SetConfig>
      break;
 800afd0:	e017      	b.n	800b002 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68b9      	ldr	r1, [r7, #8]
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 fb69 	bl	800b6b0 <TIM_OC4_SetConfig>
      break;
 800afde:	e010      	b.n	800b002 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68b9      	ldr	r1, [r7, #8]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 fc12 	bl	800b810 <TIM_OC5_SetConfig>
      break;
 800afec:	e009      	b.n	800b002 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68b9      	ldr	r1, [r7, #8]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 fc8d 	bl	800b914 <TIM_OC6_SetConfig>
      break;
 800affa:	e002      	b.n	800b002 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	75fb      	strb	r3, [r7, #23]
      break;
 800b000:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a6e      	ldr	r2, [pc, #440]	@ (800b230 <TIM_Base_SetConfig+0x1cc>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d02b      	beq.n	800b0d4 <TIM_Base_SetConfig+0x70>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a6d      	ldr	r2, [pc, #436]	@ (800b234 <TIM_Base_SetConfig+0x1d0>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d027      	beq.n	800b0d4 <TIM_Base_SetConfig+0x70>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b08a:	d023      	beq.n	800b0d4 <TIM_Base_SetConfig+0x70>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b092:	d01f      	beq.n	800b0d4 <TIM_Base_SetConfig+0x70>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a68      	ldr	r2, [pc, #416]	@ (800b238 <TIM_Base_SetConfig+0x1d4>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d01b      	beq.n	800b0d4 <TIM_Base_SetConfig+0x70>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a67      	ldr	r2, [pc, #412]	@ (800b23c <TIM_Base_SetConfig+0x1d8>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d017      	beq.n	800b0d4 <TIM_Base_SetConfig+0x70>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a66      	ldr	r2, [pc, #408]	@ (800b240 <TIM_Base_SetConfig+0x1dc>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d013      	beq.n	800b0d4 <TIM_Base_SetConfig+0x70>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a65      	ldr	r2, [pc, #404]	@ (800b244 <TIM_Base_SetConfig+0x1e0>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d00f      	beq.n	800b0d4 <TIM_Base_SetConfig+0x70>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a64      	ldr	r2, [pc, #400]	@ (800b248 <TIM_Base_SetConfig+0x1e4>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d00b      	beq.n	800b0d4 <TIM_Base_SetConfig+0x70>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a63      	ldr	r2, [pc, #396]	@ (800b24c <TIM_Base_SetConfig+0x1e8>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d007      	beq.n	800b0d4 <TIM_Base_SetConfig+0x70>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a62      	ldr	r2, [pc, #392]	@ (800b250 <TIM_Base_SetConfig+0x1ec>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d003      	beq.n	800b0d4 <TIM_Base_SetConfig+0x70>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a61      	ldr	r2, [pc, #388]	@ (800b254 <TIM_Base_SetConfig+0x1f0>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d108      	bne.n	800b0e6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a51      	ldr	r2, [pc, #324]	@ (800b230 <TIM_Base_SetConfig+0x1cc>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d043      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a50      	ldr	r2, [pc, #320]	@ (800b234 <TIM_Base_SetConfig+0x1d0>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d03f      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0fc:	d03b      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b104:	d037      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a4b      	ldr	r2, [pc, #300]	@ (800b238 <TIM_Base_SetConfig+0x1d4>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d033      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a4a      	ldr	r2, [pc, #296]	@ (800b23c <TIM_Base_SetConfig+0x1d8>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d02f      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a49      	ldr	r2, [pc, #292]	@ (800b240 <TIM_Base_SetConfig+0x1dc>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d02b      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a48      	ldr	r2, [pc, #288]	@ (800b244 <TIM_Base_SetConfig+0x1e0>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d027      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a47      	ldr	r2, [pc, #284]	@ (800b248 <TIM_Base_SetConfig+0x1e4>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d023      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a46      	ldr	r2, [pc, #280]	@ (800b24c <TIM_Base_SetConfig+0x1e8>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d01f      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a45      	ldr	r2, [pc, #276]	@ (800b250 <TIM_Base_SetConfig+0x1ec>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d01b      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a44      	ldr	r2, [pc, #272]	@ (800b254 <TIM_Base_SetConfig+0x1f0>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d017      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a43      	ldr	r2, [pc, #268]	@ (800b258 <TIM_Base_SetConfig+0x1f4>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d013      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a42      	ldr	r2, [pc, #264]	@ (800b25c <TIM_Base_SetConfig+0x1f8>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d00f      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a41      	ldr	r2, [pc, #260]	@ (800b260 <TIM_Base_SetConfig+0x1fc>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d00b      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a40      	ldr	r2, [pc, #256]	@ (800b264 <TIM_Base_SetConfig+0x200>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d007      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a3f      	ldr	r2, [pc, #252]	@ (800b268 <TIM_Base_SetConfig+0x204>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d003      	beq.n	800b176 <TIM_Base_SetConfig+0x112>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a3e      	ldr	r2, [pc, #248]	@ (800b26c <TIM_Base_SetConfig+0x208>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d108      	bne.n	800b188 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b17c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	4313      	orrs	r3, r2
 800b186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	4313      	orrs	r3, r2
 800b194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	689a      	ldr	r2, [r3, #8]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a20      	ldr	r2, [pc, #128]	@ (800b230 <TIM_Base_SetConfig+0x1cc>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d023      	beq.n	800b1fc <TIM_Base_SetConfig+0x198>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a1f      	ldr	r2, [pc, #124]	@ (800b234 <TIM_Base_SetConfig+0x1d0>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d01f      	beq.n	800b1fc <TIM_Base_SetConfig+0x198>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a24      	ldr	r2, [pc, #144]	@ (800b250 <TIM_Base_SetConfig+0x1ec>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d01b      	beq.n	800b1fc <TIM_Base_SetConfig+0x198>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a23      	ldr	r2, [pc, #140]	@ (800b254 <TIM_Base_SetConfig+0x1f0>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d017      	beq.n	800b1fc <TIM_Base_SetConfig+0x198>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a22      	ldr	r2, [pc, #136]	@ (800b258 <TIM_Base_SetConfig+0x1f4>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d013      	beq.n	800b1fc <TIM_Base_SetConfig+0x198>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a21      	ldr	r2, [pc, #132]	@ (800b25c <TIM_Base_SetConfig+0x1f8>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d00f      	beq.n	800b1fc <TIM_Base_SetConfig+0x198>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a20      	ldr	r2, [pc, #128]	@ (800b260 <TIM_Base_SetConfig+0x1fc>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d00b      	beq.n	800b1fc <TIM_Base_SetConfig+0x198>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a1f      	ldr	r2, [pc, #124]	@ (800b264 <TIM_Base_SetConfig+0x200>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d007      	beq.n	800b1fc <TIM_Base_SetConfig+0x198>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a1e      	ldr	r2, [pc, #120]	@ (800b268 <TIM_Base_SetConfig+0x204>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d003      	beq.n	800b1fc <TIM_Base_SetConfig+0x198>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a1d      	ldr	r2, [pc, #116]	@ (800b26c <TIM_Base_SetConfig+0x208>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d103      	bne.n	800b204 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	691a      	ldr	r2, [r3, #16]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	f003 0301 	and.w	r3, r3, #1
 800b212:	2b01      	cmp	r3, #1
 800b214:	d105      	bne.n	800b222 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	f023 0201 	bic.w	r2, r3, #1
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	611a      	str	r2, [r3, #16]
  }
}
 800b222:	bf00      	nop
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	40012c00 	.word	0x40012c00
 800b234:	50012c00 	.word	0x50012c00
 800b238:	40000400 	.word	0x40000400
 800b23c:	50000400 	.word	0x50000400
 800b240:	40000800 	.word	0x40000800
 800b244:	50000800 	.word	0x50000800
 800b248:	40000c00 	.word	0x40000c00
 800b24c:	50000c00 	.word	0x50000c00
 800b250:	40013400 	.word	0x40013400
 800b254:	50013400 	.word	0x50013400
 800b258:	40014000 	.word	0x40014000
 800b25c:	50014000 	.word	0x50014000
 800b260:	40014400 	.word	0x40014400
 800b264:	50014400 	.word	0x50014400
 800b268:	40014800 	.word	0x40014800
 800b26c:	50014800 	.word	0x50014800

0800b270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b270:	b480      	push	{r7}
 800b272:	b087      	sub	sp, #28
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a1b      	ldr	r3, [r3, #32]
 800b284:	f023 0201 	bic.w	r2, r3, #1
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b29e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f023 0303 	bic.w	r3, r3, #3
 800b2aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f023 0302 	bic.w	r3, r3, #2
 800b2bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a40      	ldr	r2, [pc, #256]	@ (800b3cc <TIM_OC1_SetConfig+0x15c>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d023      	beq.n	800b318 <TIM_OC1_SetConfig+0xa8>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a3f      	ldr	r2, [pc, #252]	@ (800b3d0 <TIM_OC1_SetConfig+0x160>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d01f      	beq.n	800b318 <TIM_OC1_SetConfig+0xa8>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a3e      	ldr	r2, [pc, #248]	@ (800b3d4 <TIM_OC1_SetConfig+0x164>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d01b      	beq.n	800b318 <TIM_OC1_SetConfig+0xa8>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a3d      	ldr	r2, [pc, #244]	@ (800b3d8 <TIM_OC1_SetConfig+0x168>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d017      	beq.n	800b318 <TIM_OC1_SetConfig+0xa8>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a3c      	ldr	r2, [pc, #240]	@ (800b3dc <TIM_OC1_SetConfig+0x16c>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d013      	beq.n	800b318 <TIM_OC1_SetConfig+0xa8>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a3b      	ldr	r2, [pc, #236]	@ (800b3e0 <TIM_OC1_SetConfig+0x170>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d00f      	beq.n	800b318 <TIM_OC1_SetConfig+0xa8>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a3a      	ldr	r2, [pc, #232]	@ (800b3e4 <TIM_OC1_SetConfig+0x174>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d00b      	beq.n	800b318 <TIM_OC1_SetConfig+0xa8>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a39      	ldr	r2, [pc, #228]	@ (800b3e8 <TIM_OC1_SetConfig+0x178>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d007      	beq.n	800b318 <TIM_OC1_SetConfig+0xa8>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a38      	ldr	r2, [pc, #224]	@ (800b3ec <TIM_OC1_SetConfig+0x17c>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d003      	beq.n	800b318 <TIM_OC1_SetConfig+0xa8>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a37      	ldr	r2, [pc, #220]	@ (800b3f0 <TIM_OC1_SetConfig+0x180>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d10c      	bne.n	800b332 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	f023 0308 	bic.w	r3, r3, #8
 800b31e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	4313      	orrs	r3, r2
 800b328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f023 0304 	bic.w	r3, r3, #4
 800b330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a25      	ldr	r2, [pc, #148]	@ (800b3cc <TIM_OC1_SetConfig+0x15c>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d023      	beq.n	800b382 <TIM_OC1_SetConfig+0x112>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a24      	ldr	r2, [pc, #144]	@ (800b3d0 <TIM_OC1_SetConfig+0x160>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d01f      	beq.n	800b382 <TIM_OC1_SetConfig+0x112>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a23      	ldr	r2, [pc, #140]	@ (800b3d4 <TIM_OC1_SetConfig+0x164>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d01b      	beq.n	800b382 <TIM_OC1_SetConfig+0x112>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a22      	ldr	r2, [pc, #136]	@ (800b3d8 <TIM_OC1_SetConfig+0x168>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d017      	beq.n	800b382 <TIM_OC1_SetConfig+0x112>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a21      	ldr	r2, [pc, #132]	@ (800b3dc <TIM_OC1_SetConfig+0x16c>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d013      	beq.n	800b382 <TIM_OC1_SetConfig+0x112>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a20      	ldr	r2, [pc, #128]	@ (800b3e0 <TIM_OC1_SetConfig+0x170>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d00f      	beq.n	800b382 <TIM_OC1_SetConfig+0x112>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a1f      	ldr	r2, [pc, #124]	@ (800b3e4 <TIM_OC1_SetConfig+0x174>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d00b      	beq.n	800b382 <TIM_OC1_SetConfig+0x112>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a1e      	ldr	r2, [pc, #120]	@ (800b3e8 <TIM_OC1_SetConfig+0x178>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d007      	beq.n	800b382 <TIM_OC1_SetConfig+0x112>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a1d      	ldr	r2, [pc, #116]	@ (800b3ec <TIM_OC1_SetConfig+0x17c>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d003      	beq.n	800b382 <TIM_OC1_SetConfig+0x112>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a1c      	ldr	r2, [pc, #112]	@ (800b3f0 <TIM_OC1_SetConfig+0x180>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d111      	bne.n	800b3a6 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	4313      	orrs	r3, r2
 800b39a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	685a      	ldr	r2, [r3, #4]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	697a      	ldr	r2, [r7, #20]
 800b3be:	621a      	str	r2, [r3, #32]
}
 800b3c0:	bf00      	nop
 800b3c2:	371c      	adds	r7, #28
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	40012c00 	.word	0x40012c00
 800b3d0:	50012c00 	.word	0x50012c00
 800b3d4:	40013400 	.word	0x40013400
 800b3d8:	50013400 	.word	0x50013400
 800b3dc:	40014000 	.word	0x40014000
 800b3e0:	50014000 	.word	0x50014000
 800b3e4:	40014400 	.word	0x40014400
 800b3e8:	50014400 	.word	0x50014400
 800b3ec:	40014800 	.word	0x40014800
 800b3f0:	50014800 	.word	0x50014800

0800b3f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a1b      	ldr	r3, [r3, #32]
 800b408:	f023 0210 	bic.w	r2, r3, #16
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b42e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	021b      	lsls	r3, r3, #8
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4313      	orrs	r3, r2
 800b43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f023 0320 	bic.w	r3, r3, #32
 800b442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	011b      	lsls	r3, r3, #4
 800b44a:	697a      	ldr	r2, [r7, #20]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a36      	ldr	r2, [pc, #216]	@ (800b52c <TIM_OC2_SetConfig+0x138>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d00b      	beq.n	800b470 <TIM_OC2_SetConfig+0x7c>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a35      	ldr	r2, [pc, #212]	@ (800b530 <TIM_OC2_SetConfig+0x13c>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d007      	beq.n	800b470 <TIM_OC2_SetConfig+0x7c>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a34      	ldr	r2, [pc, #208]	@ (800b534 <TIM_OC2_SetConfig+0x140>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d003      	beq.n	800b470 <TIM_OC2_SetConfig+0x7c>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a33      	ldr	r2, [pc, #204]	@ (800b538 <TIM_OC2_SetConfig+0x144>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d10d      	bne.n	800b48c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	011b      	lsls	r3, r3, #4
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	4313      	orrs	r3, r2
 800b482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b48a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a27      	ldr	r2, [pc, #156]	@ (800b52c <TIM_OC2_SetConfig+0x138>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d023      	beq.n	800b4dc <TIM_OC2_SetConfig+0xe8>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a26      	ldr	r2, [pc, #152]	@ (800b530 <TIM_OC2_SetConfig+0x13c>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d01f      	beq.n	800b4dc <TIM_OC2_SetConfig+0xe8>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a25      	ldr	r2, [pc, #148]	@ (800b534 <TIM_OC2_SetConfig+0x140>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d01b      	beq.n	800b4dc <TIM_OC2_SetConfig+0xe8>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a24      	ldr	r2, [pc, #144]	@ (800b538 <TIM_OC2_SetConfig+0x144>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d017      	beq.n	800b4dc <TIM_OC2_SetConfig+0xe8>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a23      	ldr	r2, [pc, #140]	@ (800b53c <TIM_OC2_SetConfig+0x148>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d013      	beq.n	800b4dc <TIM_OC2_SetConfig+0xe8>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a22      	ldr	r2, [pc, #136]	@ (800b540 <TIM_OC2_SetConfig+0x14c>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d00f      	beq.n	800b4dc <TIM_OC2_SetConfig+0xe8>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a21      	ldr	r2, [pc, #132]	@ (800b544 <TIM_OC2_SetConfig+0x150>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d00b      	beq.n	800b4dc <TIM_OC2_SetConfig+0xe8>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a20      	ldr	r2, [pc, #128]	@ (800b548 <TIM_OC2_SetConfig+0x154>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d007      	beq.n	800b4dc <TIM_OC2_SetConfig+0xe8>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a1f      	ldr	r2, [pc, #124]	@ (800b54c <TIM_OC2_SetConfig+0x158>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d003      	beq.n	800b4dc <TIM_OC2_SetConfig+0xe8>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4a1e      	ldr	r2, [pc, #120]	@ (800b550 <TIM_OC2_SetConfig+0x15c>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d113      	bne.n	800b504 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b4e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	695b      	ldr	r3, [r3, #20]
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	4313      	orrs	r3, r2
 800b502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	693a      	ldr	r2, [r7, #16]
 800b508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	685a      	ldr	r2, [r3, #4]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	621a      	str	r2, [r3, #32]
}
 800b51e:	bf00      	nop
 800b520:	371c      	adds	r7, #28
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	40012c00 	.word	0x40012c00
 800b530:	50012c00 	.word	0x50012c00
 800b534:	40013400 	.word	0x40013400
 800b538:	50013400 	.word	0x50013400
 800b53c:	40014000 	.word	0x40014000
 800b540:	50014000 	.word	0x50014000
 800b544:	40014400 	.word	0x40014400
 800b548:	50014400 	.word	0x50014400
 800b54c:	40014800 	.word	0x40014800
 800b550:	50014800 	.word	0x50014800

0800b554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b554:	b480      	push	{r7}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	69db      	ldr	r3, [r3, #28]
 800b57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f023 0303 	bic.w	r3, r3, #3
 800b58e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	4313      	orrs	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b5a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	021b      	lsls	r3, r3, #8
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a35      	ldr	r2, [pc, #212]	@ (800b688 <TIM_OC3_SetConfig+0x134>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d00b      	beq.n	800b5ce <TIM_OC3_SetConfig+0x7a>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4a34      	ldr	r2, [pc, #208]	@ (800b68c <TIM_OC3_SetConfig+0x138>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d007      	beq.n	800b5ce <TIM_OC3_SetConfig+0x7a>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a33      	ldr	r2, [pc, #204]	@ (800b690 <TIM_OC3_SetConfig+0x13c>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d003      	beq.n	800b5ce <TIM_OC3_SetConfig+0x7a>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a32      	ldr	r2, [pc, #200]	@ (800b694 <TIM_OC3_SetConfig+0x140>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d10d      	bne.n	800b5ea <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b5d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	021b      	lsls	r3, r3, #8
 800b5dc:	697a      	ldr	r2, [r7, #20]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b5e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a26      	ldr	r2, [pc, #152]	@ (800b688 <TIM_OC3_SetConfig+0x134>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d023      	beq.n	800b63a <TIM_OC3_SetConfig+0xe6>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a25      	ldr	r2, [pc, #148]	@ (800b68c <TIM_OC3_SetConfig+0x138>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d01f      	beq.n	800b63a <TIM_OC3_SetConfig+0xe6>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a24      	ldr	r2, [pc, #144]	@ (800b690 <TIM_OC3_SetConfig+0x13c>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d01b      	beq.n	800b63a <TIM_OC3_SetConfig+0xe6>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a23      	ldr	r2, [pc, #140]	@ (800b694 <TIM_OC3_SetConfig+0x140>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d017      	beq.n	800b63a <TIM_OC3_SetConfig+0xe6>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a22      	ldr	r2, [pc, #136]	@ (800b698 <TIM_OC3_SetConfig+0x144>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d013      	beq.n	800b63a <TIM_OC3_SetConfig+0xe6>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a21      	ldr	r2, [pc, #132]	@ (800b69c <TIM_OC3_SetConfig+0x148>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d00f      	beq.n	800b63a <TIM_OC3_SetConfig+0xe6>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a20      	ldr	r2, [pc, #128]	@ (800b6a0 <TIM_OC3_SetConfig+0x14c>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d00b      	beq.n	800b63a <TIM_OC3_SetConfig+0xe6>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a1f      	ldr	r2, [pc, #124]	@ (800b6a4 <TIM_OC3_SetConfig+0x150>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d007      	beq.n	800b63a <TIM_OC3_SetConfig+0xe6>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a1e      	ldr	r2, [pc, #120]	@ (800b6a8 <TIM_OC3_SetConfig+0x154>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d003      	beq.n	800b63a <TIM_OC3_SetConfig+0xe6>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a1d      	ldr	r2, [pc, #116]	@ (800b6ac <TIM_OC3_SetConfig+0x158>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d113      	bne.n	800b662 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	011b      	lsls	r3, r3, #4
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	4313      	orrs	r3, r2
 800b654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	699b      	ldr	r3, [r3, #24]
 800b65a:	011b      	lsls	r3, r3, #4
 800b65c:	693a      	ldr	r2, [r7, #16]
 800b65e:	4313      	orrs	r3, r2
 800b660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	693a      	ldr	r2, [r7, #16]
 800b666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	685a      	ldr	r2, [r3, #4]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	697a      	ldr	r2, [r7, #20]
 800b67a:	621a      	str	r2, [r3, #32]
}
 800b67c:	bf00      	nop
 800b67e:	371c      	adds	r7, #28
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	40012c00 	.word	0x40012c00
 800b68c:	50012c00 	.word	0x50012c00
 800b690:	40013400 	.word	0x40013400
 800b694:	50013400 	.word	0x50013400
 800b698:	40014000 	.word	0x40014000
 800b69c:	50014000 	.word	0x50014000
 800b6a0:	40014400 	.word	0x40014400
 800b6a4:	50014400 	.word	0x50014400
 800b6a8:	40014800 	.word	0x40014800
 800b6ac:	50014800 	.word	0x50014800

0800b6b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a1b      	ldr	r3, [r3, #32]
 800b6c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b6de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	021b      	lsls	r3, r3, #8
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b6fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	031b      	lsls	r3, r3, #12
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	4313      	orrs	r3, r2
 800b70a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a36      	ldr	r2, [pc, #216]	@ (800b7e8 <TIM_OC4_SetConfig+0x138>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d00b      	beq.n	800b72c <TIM_OC4_SetConfig+0x7c>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a35      	ldr	r2, [pc, #212]	@ (800b7ec <TIM_OC4_SetConfig+0x13c>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d007      	beq.n	800b72c <TIM_OC4_SetConfig+0x7c>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a34      	ldr	r2, [pc, #208]	@ (800b7f0 <TIM_OC4_SetConfig+0x140>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d003      	beq.n	800b72c <TIM_OC4_SetConfig+0x7c>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a33      	ldr	r2, [pc, #204]	@ (800b7f4 <TIM_OC4_SetConfig+0x144>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d10d      	bne.n	800b748 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	031b      	lsls	r3, r3, #12
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b746:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4a27      	ldr	r2, [pc, #156]	@ (800b7e8 <TIM_OC4_SetConfig+0x138>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d023      	beq.n	800b798 <TIM_OC4_SetConfig+0xe8>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a26      	ldr	r2, [pc, #152]	@ (800b7ec <TIM_OC4_SetConfig+0x13c>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d01f      	beq.n	800b798 <TIM_OC4_SetConfig+0xe8>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a25      	ldr	r2, [pc, #148]	@ (800b7f0 <TIM_OC4_SetConfig+0x140>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d01b      	beq.n	800b798 <TIM_OC4_SetConfig+0xe8>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a24      	ldr	r2, [pc, #144]	@ (800b7f4 <TIM_OC4_SetConfig+0x144>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d017      	beq.n	800b798 <TIM_OC4_SetConfig+0xe8>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a23      	ldr	r2, [pc, #140]	@ (800b7f8 <TIM_OC4_SetConfig+0x148>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d013      	beq.n	800b798 <TIM_OC4_SetConfig+0xe8>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a22      	ldr	r2, [pc, #136]	@ (800b7fc <TIM_OC4_SetConfig+0x14c>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d00f      	beq.n	800b798 <TIM_OC4_SetConfig+0xe8>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a21      	ldr	r2, [pc, #132]	@ (800b800 <TIM_OC4_SetConfig+0x150>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d00b      	beq.n	800b798 <TIM_OC4_SetConfig+0xe8>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a20      	ldr	r2, [pc, #128]	@ (800b804 <TIM_OC4_SetConfig+0x154>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d007      	beq.n	800b798 <TIM_OC4_SetConfig+0xe8>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a1f      	ldr	r2, [pc, #124]	@ (800b808 <TIM_OC4_SetConfig+0x158>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d003      	beq.n	800b798 <TIM_OC4_SetConfig+0xe8>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a1e      	ldr	r2, [pc, #120]	@ (800b80c <TIM_OC4_SetConfig+0x15c>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d113      	bne.n	800b7c0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b79e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b7a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	695b      	ldr	r3, [r3, #20]
 800b7ac:	019b      	lsls	r3, r3, #6
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	699b      	ldr	r3, [r3, #24]
 800b7b8:	019b      	lsls	r3, r3, #6
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	685a      	ldr	r2, [r3, #4]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	621a      	str	r2, [r3, #32]
}
 800b7da:	bf00      	nop
 800b7dc:	371c      	adds	r7, #28
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	40012c00 	.word	0x40012c00
 800b7ec:	50012c00 	.word	0x50012c00
 800b7f0:	40013400 	.word	0x40013400
 800b7f4:	50013400 	.word	0x50013400
 800b7f8:	40014000 	.word	0x40014000
 800b7fc:	50014000 	.word	0x50014000
 800b800:	40014400 	.word	0x40014400
 800b804:	50014400 	.word	0x50014400
 800b808:	40014800 	.word	0x40014800
 800b80c:	50014800 	.word	0x50014800

0800b810 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b810:	b480      	push	{r7}
 800b812:	b087      	sub	sp, #28
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a1b      	ldr	r3, [r3, #32]
 800b824:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b83e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b854:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	041b      	lsls	r3, r3, #16
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	4313      	orrs	r3, r2
 800b860:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a21      	ldr	r2, [pc, #132]	@ (800b8ec <TIM_OC5_SetConfig+0xdc>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d023      	beq.n	800b8b2 <TIM_OC5_SetConfig+0xa2>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a20      	ldr	r2, [pc, #128]	@ (800b8f0 <TIM_OC5_SetConfig+0xe0>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d01f      	beq.n	800b8b2 <TIM_OC5_SetConfig+0xa2>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a1f      	ldr	r2, [pc, #124]	@ (800b8f4 <TIM_OC5_SetConfig+0xe4>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d01b      	beq.n	800b8b2 <TIM_OC5_SetConfig+0xa2>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4a1e      	ldr	r2, [pc, #120]	@ (800b8f8 <TIM_OC5_SetConfig+0xe8>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d017      	beq.n	800b8b2 <TIM_OC5_SetConfig+0xa2>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4a1d      	ldr	r2, [pc, #116]	@ (800b8fc <TIM_OC5_SetConfig+0xec>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d013      	beq.n	800b8b2 <TIM_OC5_SetConfig+0xa2>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4a1c      	ldr	r2, [pc, #112]	@ (800b900 <TIM_OC5_SetConfig+0xf0>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d00f      	beq.n	800b8b2 <TIM_OC5_SetConfig+0xa2>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a1b      	ldr	r2, [pc, #108]	@ (800b904 <TIM_OC5_SetConfig+0xf4>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d00b      	beq.n	800b8b2 <TIM_OC5_SetConfig+0xa2>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4a1a      	ldr	r2, [pc, #104]	@ (800b908 <TIM_OC5_SetConfig+0xf8>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d007      	beq.n	800b8b2 <TIM_OC5_SetConfig+0xa2>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a19      	ldr	r2, [pc, #100]	@ (800b90c <TIM_OC5_SetConfig+0xfc>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d003      	beq.n	800b8b2 <TIM_OC5_SetConfig+0xa2>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a18      	ldr	r2, [pc, #96]	@ (800b910 <TIM_OC5_SetConfig+0x100>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d109      	bne.n	800b8c6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b8b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	695b      	ldr	r3, [r3, #20]
 800b8be:	021b      	lsls	r3, r3, #8
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	621a      	str	r2, [r3, #32]
}
 800b8e0:	bf00      	nop
 800b8e2:	371c      	adds	r7, #28
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr
 800b8ec:	40012c00 	.word	0x40012c00
 800b8f0:	50012c00 	.word	0x50012c00
 800b8f4:	40013400 	.word	0x40013400
 800b8f8:	50013400 	.word	0x50013400
 800b8fc:	40014000 	.word	0x40014000
 800b900:	50014000 	.word	0x50014000
 800b904:	40014400 	.word	0x40014400
 800b908:	50014400 	.word	0x50014400
 800b90c:	40014800 	.word	0x40014800
 800b910:	50014800 	.word	0x50014800

0800b914 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b914:	b480      	push	{r7}
 800b916:	b087      	sub	sp, #28
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a1b      	ldr	r3, [r3, #32]
 800b922:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a1b      	ldr	r3, [r3, #32]
 800b928:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	021b      	lsls	r3, r3, #8
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	4313      	orrs	r3, r2
 800b952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b95a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	051b      	lsls	r3, r3, #20
 800b962:	693a      	ldr	r2, [r7, #16]
 800b964:	4313      	orrs	r3, r2
 800b966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a22      	ldr	r2, [pc, #136]	@ (800b9f4 <TIM_OC6_SetConfig+0xe0>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d023      	beq.n	800b9b8 <TIM_OC6_SetConfig+0xa4>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a21      	ldr	r2, [pc, #132]	@ (800b9f8 <TIM_OC6_SetConfig+0xe4>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d01f      	beq.n	800b9b8 <TIM_OC6_SetConfig+0xa4>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a20      	ldr	r2, [pc, #128]	@ (800b9fc <TIM_OC6_SetConfig+0xe8>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d01b      	beq.n	800b9b8 <TIM_OC6_SetConfig+0xa4>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a1f      	ldr	r2, [pc, #124]	@ (800ba00 <TIM_OC6_SetConfig+0xec>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d017      	beq.n	800b9b8 <TIM_OC6_SetConfig+0xa4>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a1e      	ldr	r2, [pc, #120]	@ (800ba04 <TIM_OC6_SetConfig+0xf0>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d013      	beq.n	800b9b8 <TIM_OC6_SetConfig+0xa4>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a1d      	ldr	r2, [pc, #116]	@ (800ba08 <TIM_OC6_SetConfig+0xf4>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d00f      	beq.n	800b9b8 <TIM_OC6_SetConfig+0xa4>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a1c      	ldr	r2, [pc, #112]	@ (800ba0c <TIM_OC6_SetConfig+0xf8>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d00b      	beq.n	800b9b8 <TIM_OC6_SetConfig+0xa4>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a1b      	ldr	r2, [pc, #108]	@ (800ba10 <TIM_OC6_SetConfig+0xfc>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d007      	beq.n	800b9b8 <TIM_OC6_SetConfig+0xa4>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a1a      	ldr	r2, [pc, #104]	@ (800ba14 <TIM_OC6_SetConfig+0x100>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d003      	beq.n	800b9b8 <TIM_OC6_SetConfig+0xa4>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4a19      	ldr	r2, [pc, #100]	@ (800ba18 <TIM_OC6_SetConfig+0x104>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d109      	bne.n	800b9cc <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b9be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	029b      	lsls	r3, r3, #10
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	693a      	ldr	r2, [r7, #16]
 800b9e4:	621a      	str	r2, [r3, #32]
}
 800b9e6:	bf00      	nop
 800b9e8:	371c      	adds	r7, #28
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	40012c00 	.word	0x40012c00
 800b9f8:	50012c00 	.word	0x50012c00
 800b9fc:	40013400 	.word	0x40013400
 800ba00:	50013400 	.word	0x50013400
 800ba04:	40014000 	.word	0x40014000
 800ba08:	50014000 	.word	0x50014000
 800ba0c:	40014400 	.word	0x40014400
 800ba10:	50014400 	.word	0x50014400
 800ba14:	40014800 	.word	0x40014800
 800ba18:	50014800 	.word	0x50014800

0800ba1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d101      	bne.n	800ba34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e097      	b.n	800bb64 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2202      	movs	r2, #2
 800ba40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a45      	ldr	r2, [pc, #276]	@ (800bb70 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d00e      	beq.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a44      	ldr	r2, [pc, #272]	@ (800bb74 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d009      	beq.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a42      	ldr	r2, [pc, #264]	@ (800bb78 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d004      	beq.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a41      	ldr	r2, [pc, #260]	@ (800bb7c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d108      	bne.n	800ba8e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ba82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ba94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a2f      	ldr	r2, [pc, #188]	@ (800bb70 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d040      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a2e      	ldr	r2, [pc, #184]	@ (800bb74 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d03b      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bac8:	d036      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bad2:	d031      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a29      	ldr	r2, [pc, #164]	@ (800bb80 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d02c      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a28      	ldr	r2, [pc, #160]	@ (800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d027      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a26      	ldr	r2, [pc, #152]	@ (800bb88 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d022      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a25      	ldr	r2, [pc, #148]	@ (800bb8c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d01d      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a23      	ldr	r2, [pc, #140]	@ (800bb90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d018      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a22      	ldr	r2, [pc, #136]	@ (800bb94 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d013      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a18      	ldr	r2, [pc, #96]	@ (800bb78 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d00e      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a17      	ldr	r2, [pc, #92]	@ (800bb7c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d009      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a1b      	ldr	r2, [pc, #108]	@ (800bb98 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d004      	beq.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a1a      	ldr	r2, [pc, #104]	@ (800bb9c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d10c      	bne.n	800bb52 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	68ba      	ldr	r2, [r7, #8]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	40012c00 	.word	0x40012c00
 800bb74:	50012c00 	.word	0x50012c00
 800bb78:	40013400 	.word	0x40013400
 800bb7c:	50013400 	.word	0x50013400
 800bb80:	40000400 	.word	0x40000400
 800bb84:	50000400 	.word	0x50000400
 800bb88:	40000800 	.word	0x40000800
 800bb8c:	50000800 	.word	0x50000800
 800bb90:	40000c00 	.word	0x40000c00
 800bb94:	50000c00 	.word	0x50000c00
 800bb98:	40014000 	.word	0x40014000
 800bb9c:	50014000 	.word	0x50014000

0800bba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bbd0:	bf00      	nop
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bc0c:	bf00      	nop
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bc20:	bf00      	nop
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d101      	bne.n	800bc3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e042      	b.n	800bcc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d106      	bne.n	800bc56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7f7 fba5 	bl	80033a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2224      	movs	r2, #36	@ 0x24
 800bc5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f022 0201 	bic.w	r2, r2, #1
 800bc6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d002      	beq.n	800bc7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 fdca 	bl	800c810 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fc19 	bl	800c4b4 <UART_SetConfig>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d101      	bne.n	800bc8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e01b      	b.n	800bcc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bc9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	689a      	ldr	r2, [r3, #8]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bcaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f042 0201 	orr.w	r2, r2, #1
 800bcba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 fe49 	bl	800c954 <UART_CheckIdleState>
 800bcc2:	4603      	mov	r3, r0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b08c      	sub	sp, #48	@ 0x30
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800bcda:	88fb      	ldrh	r3, [r7, #6]
 800bcdc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bce4:	2b20      	cmp	r3, #32
 800bce6:	f040 80ad 	bne.w	800be44 <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <HAL_UART_Transmit_DMA+0x2a>
 800bcf0:	88fb      	ldrh	r3, [r7, #6]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e0a5      	b.n	800be46 <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	88fa      	ldrh	r2, [r7, #6]
 800bd04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	88fa      	ldrh	r2, [r7, #6]
 800bd0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2221      	movs	r2, #33	@ 0x21
 800bd1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d06d      	beq.n	800be04 <HAL_UART_Transmit_DMA+0x138>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd2c:	4a48      	ldr	r2, [pc, #288]	@ (800be50 <HAL_UART_Transmit_DMA+0x184>)
 800bd2e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd34:	4a47      	ldr	r2, [pc, #284]	@ (800be54 <HAL_UART_Transmit_DMA+0x188>)
 800bd36:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd3c:	4a46      	ldr	r2, [pc, #280]	@ (800be58 <HAL_UART_Transmit_DMA+0x18c>)
 800bd3e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd44:	2200      	movs	r2, #0
 800bd46:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd50:	d106      	bne.n	800bd60 <HAL_UART_Transmit_DMA+0x94>
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d102      	bne.n	800bd60 <HAL_UART_Transmit_DMA+0x94>
      {
        nbByte = Size * 2U;
 800bd5a:	88fb      	ldrh	r3, [r7, #6]
 800bd5c:	005b      	lsls	r3, r3, #1
 800bd5e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d02d      	beq.n	800bdca <HAL_UART_Transmit_DMA+0xfe>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d024      	beq.n	800bdc2 <HAL_UART_Transmit_DMA+0xf6>
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d01e      	beq.n	800bdc2 <HAL_UART_Transmit_DMA+0xf6>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800bd8e:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7f8 fed5 	bl	8004b64 <HAL_DMAEx_List_Start_IT>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bdc0:	e012      	b.n	800bde8 <HAL_UART_Transmit_DMA+0x11c>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bdc8:	e00e      	b.n	800bde8 <HAL_UART_Transmit_DMA+0x11c>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3328      	adds	r3, #40	@ 0x28
 800bdda:	461a      	mov	r2, r3
 800bddc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bdde:	f7f8 f96d 	bl	80040bc <HAL_DMA_Start_IT>
 800bde2:	4603      	mov	r3, r0
 800bde4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }

      if (status != HAL_OK)
 800bde8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d009      	beq.n	800be04 <HAL_UART_Transmit_DMA+0x138>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2210      	movs	r2, #16
 800bdf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2220      	movs	r2, #32
 800bdfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	e020      	b.n	800be46 <HAL_UART_Transmit_DMA+0x17a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2240      	movs	r2, #64	@ 0x40
 800be0a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3308      	adds	r3, #8
 800be12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	e853 3f00 	ldrex	r3, [r3]
 800be1a:	617b      	str	r3, [r7, #20]
   return(result);
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	3308      	adds	r3, #8
 800be2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be2c:	627a      	str	r2, [r7, #36]	@ 0x24
 800be2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be30:	6a39      	ldr	r1, [r7, #32]
 800be32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be34:	e841 2300 	strex	r3, r2, [r1]
 800be38:	61fb      	str	r3, [r7, #28]
   return(result);
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1e5      	bne.n	800be0c <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	e000      	b.n	800be46 <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 800be44:	2302      	movs	r3, #2
  }
}
 800be46:	4618      	mov	r0, r3
 800be48:	3730      	adds	r7, #48	@ 0x30
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	0800ccd1 	.word	0x0800ccd1
 800be54:	0800cd65 	.word	0x0800cd65
 800be58:	0800cd81 	.word	0x0800cd81

0800be5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b0ba      	sub	sp, #232	@ 0xe8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	69db      	ldr	r3, [r3, #28]
 800be6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800be82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800be86:	f640 030f 	movw	r3, #2063	@ 0x80f
 800be8a:	4013      	ands	r3, r2
 800be8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800be90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800be94:	2b00      	cmp	r3, #0
 800be96:	d11b      	bne.n	800bed0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be9c:	f003 0320 	and.w	r3, r3, #32
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d015      	beq.n	800bed0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bea8:	f003 0320 	and.w	r3, r3, #32
 800beac:	2b00      	cmp	r3, #0
 800beae:	d105      	bne.n	800bebc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800beb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800beb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d009      	beq.n	800bed0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f000 82cb 	beq.w	800c45c <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	4798      	blx	r3
      }
      return;
 800bece:	e2c5      	b.n	800c45c <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f000 8123 	beq.w	800c120 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800beda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bede:	4b8d      	ldr	r3, [pc, #564]	@ (800c114 <HAL_UART_IRQHandler+0x2b8>)
 800bee0:	4013      	ands	r3, r2
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d106      	bne.n	800bef4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bee6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800beea:	4b8b      	ldr	r3, [pc, #556]	@ (800c118 <HAL_UART_IRQHandler+0x2bc>)
 800beec:	4013      	ands	r3, r2
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 8116 	beq.w	800c120 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bef8:	f003 0301 	and.w	r3, r3, #1
 800befc:	2b00      	cmp	r3, #0
 800befe:	d011      	beq.n	800bf24 <HAL_UART_IRQHandler+0xc8>
 800bf00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00b      	beq.n	800bf24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2201      	movs	r2, #1
 800bf12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf1a:	f043 0201 	orr.w	r2, r3, #1
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d011      	beq.n	800bf54 <HAL_UART_IRQHandler+0xf8>
 800bf30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf34:	f003 0301 	and.w	r3, r3, #1
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00b      	beq.n	800bf54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2202      	movs	r2, #2
 800bf42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf4a:	f043 0204 	orr.w	r2, r3, #4
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf58:	f003 0304 	and.w	r3, r3, #4
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d011      	beq.n	800bf84 <HAL_UART_IRQHandler+0x128>
 800bf60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf64:	f003 0301 	and.w	r3, r3, #1
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00b      	beq.n	800bf84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2204      	movs	r2, #4
 800bf72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf7a:	f043 0202 	orr.w	r2, r3, #2
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bf84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf88:	f003 0308 	and.w	r3, r3, #8
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d017      	beq.n	800bfc0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf94:	f003 0320 	and.w	r3, r3, #32
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d105      	bne.n	800bfa8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bf9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bfa0:	4b5c      	ldr	r3, [pc, #368]	@ (800c114 <HAL_UART_IRQHandler+0x2b8>)
 800bfa2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00b      	beq.n	800bfc0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2208      	movs	r2, #8
 800bfae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfb6:	f043 0208 	orr.w	r2, r3, #8
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bfc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d012      	beq.n	800bff2 <HAL_UART_IRQHandler+0x196>
 800bfcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00c      	beq.n	800bff2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bfe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfe8:	f043 0220 	orr.w	r2, r3, #32
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f000 8231 	beq.w	800c460 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c002:	f003 0320 	and.w	r3, r3, #32
 800c006:	2b00      	cmp	r3, #0
 800c008:	d013      	beq.n	800c032 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c00a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c00e:	f003 0320 	and.w	r3, r3, #32
 800c012:	2b00      	cmp	r3, #0
 800c014:	d105      	bne.n	800c022 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c01a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d007      	beq.n	800c032 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c026:	2b00      	cmp	r3, #0
 800c028:	d003      	beq.n	800c032 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c038:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c046:	2b40      	cmp	r3, #64	@ 0x40
 800c048:	d005      	beq.n	800c056 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c04a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c04e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c052:	2b00      	cmp	r3, #0
 800c054:	d054      	beq.n	800c100 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fdd4 	bl	800cc04 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c066:	2b40      	cmp	r3, #64	@ 0x40
 800c068:	d146      	bne.n	800c0f8 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3308      	adds	r3, #8
 800c070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c074:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c078:	e853 3f00 	ldrex	r3, [r3]
 800c07c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c080:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3308      	adds	r3, #8
 800c092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c096:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c09a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c0a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c0a6:	e841 2300 	strex	r3, r2, [r1]
 800c0aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c0ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1d9      	bne.n	800c06a <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d017      	beq.n	800c0f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0c6:	4a15      	ldr	r2, [pc, #84]	@ (800c11c <HAL_UART_IRQHandler+0x2c0>)
 800c0c8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7f8 f8cf 	bl	8004274 <HAL_DMA_Abort_IT>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d019      	beq.n	800c110 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c0ea:	4610      	mov	r0, r2
 800c0ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0ee:	e00f      	b.n	800c110 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f9c9 	bl	800c488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0f6:	e00b      	b.n	800c110 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 f9c5 	bl	800c488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0fe:	e007      	b.n	800c110 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f9c1 	bl	800c488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c10e:	e1a7      	b.n	800c460 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c110:	bf00      	nop
    return;
 800c112:	e1a5      	b.n	800c460 <HAL_UART_IRQHandler+0x604>
 800c114:	10000001 	.word	0x10000001
 800c118:	04000120 	.word	0x04000120
 800c11c:	0800ce01 	.word	0x0800ce01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c124:	2b01      	cmp	r3, #1
 800c126:	f040 8150 	bne.w	800c3ca <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c12a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c12e:	f003 0310 	and.w	r3, r3, #16
 800c132:	2b00      	cmp	r3, #0
 800c134:	f000 8149 	beq.w	800c3ca <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c13c:	f003 0310 	and.w	r3, r3, #16
 800c140:	2b00      	cmp	r3, #0
 800c142:	f000 8142 	beq.w	800c3ca <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2210      	movs	r2, #16
 800c14c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c158:	2b40      	cmp	r3, #64	@ 0x40
 800c15a:	f040 80b8 	bne.w	800c2ce <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c168:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c16c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c170:	2b00      	cmp	r3, #0
 800c172:	f000 8177 	beq.w	800c464 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c17c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c180:	429a      	cmp	r2, r3
 800c182:	f080 816f 	bcs.w	800c464 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c18c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c198:	2b81      	cmp	r3, #129	@ 0x81
 800c19a:	f000 8087 	beq.w	800c2ac <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c1aa:	e853 3f00 	ldrex	r3, [r3]
 800c1ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c1b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c1b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c1c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c1cc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c1d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c1d8:	e841 2300 	strex	r3, r2, [r1]
 800c1dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c1e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1da      	bne.n	800c19e <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1f2:	e853 3f00 	ldrex	r3, [r3]
 800c1f6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c1f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1fa:	f023 0301 	bic.w	r3, r3, #1
 800c1fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	3308      	adds	r3, #8
 800c208:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c20c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c210:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c212:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c214:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c218:	e841 2300 	strex	r3, r2, [r1]
 800c21c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c21e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c220:	2b00      	cmp	r3, #0
 800c222:	d1e1      	bne.n	800c1e8 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3308      	adds	r3, #8
 800c22a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c22e:	e853 3f00 	ldrex	r3, [r3]
 800c232:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c23a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	3308      	adds	r3, #8
 800c244:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c248:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c24a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c24e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c250:	e841 2300 	strex	r3, r2, [r1]
 800c254:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c256:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1e3      	bne.n	800c224 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2220      	movs	r2, #32
 800c260:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c272:	e853 3f00 	ldrex	r3, [r3]
 800c276:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c27a:	f023 0310 	bic.w	r3, r3, #16
 800c27e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	461a      	mov	r2, r3
 800c288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c28c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c28e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c290:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c292:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c294:	e841 2300 	strex	r3, r2, [r1]
 800c298:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c29a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1e4      	bne.n	800c26a <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7f7 ff68 	bl	800417c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2202      	movs	r2, #2
 800c2b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f8e8 	bl	800c49c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2cc:	e0ca      	b.n	800c464 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 80bc 	beq.w	800c468 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 800c2f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f000 80b7 	beq.w	800c468 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c302:	e853 3f00 	ldrex	r3, [r3]
 800c306:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c30a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c30e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	461a      	mov	r2, r3
 800c318:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c31c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c31e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c320:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c324:	e841 2300 	strex	r3, r2, [r1]
 800c328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d1e4      	bne.n	800c2fa <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	3308      	adds	r3, #8
 800c336:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33a:	e853 3f00 	ldrex	r3, [r3]
 800c33e:	623b      	str	r3, [r7, #32]
   return(result);
 800c340:	6a3b      	ldr	r3, [r7, #32]
 800c342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c346:	f023 0301 	bic.w	r3, r3, #1
 800c34a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3308      	adds	r3, #8
 800c354:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c358:	633a      	str	r2, [r7, #48]	@ 0x30
 800c35a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c35e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c360:	e841 2300 	strex	r3, r2, [r1]
 800c364:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e1      	bne.n	800c330 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2220      	movs	r2, #32
 800c370:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	e853 3f00 	ldrex	r3, [r3]
 800c38c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f023 0310 	bic.w	r3, r3, #16
 800c394:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	461a      	mov	r2, r3
 800c39e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c3a2:	61fb      	str	r3, [r7, #28]
 800c3a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a6:	69b9      	ldr	r1, [r7, #24]
 800c3a8:	69fa      	ldr	r2, [r7, #28]
 800c3aa:	e841 2300 	strex	r3, r2, [r1]
 800c3ae:	617b      	str	r3, [r7, #20]
   return(result);
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1e4      	bne.n	800c380 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2202      	movs	r2, #2
 800c3ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c3bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 f86a 	bl	800c49c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3c8:	e04e      	b.n	800c468 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c3ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d014      	beq.n	800c400 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c3d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d105      	bne.n	800c3ee <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c3e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d008      	beq.n	800c400 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d03a      	beq.n	800c46c <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	4798      	blx	r3
    }
    return;
 800c3fe:	e035      	b.n	800c46c <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d009      	beq.n	800c420 <HAL_UART_IRQHandler+0x5c4>
 800c40c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c414:	2b00      	cmp	r3, #0
 800c416:	d003      	beq.n	800c420 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fd07 	bl	800ce2c <UART_EndTransmit_IT>
    return;
 800c41e:	e026      	b.n	800c46e <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c424:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d009      	beq.n	800c440 <HAL_UART_IRQHandler+0x5e4>
 800c42c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c430:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c434:	2b00      	cmp	r3, #0
 800c436:	d003      	beq.n	800c440 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fd2c 	bl	800ce96 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c43e:	e016      	b.n	800c46e <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c444:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d010      	beq.n	800c46e <HAL_UART_IRQHandler+0x612>
 800c44c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c450:	2b00      	cmp	r3, #0
 800c452:	da0c      	bge.n	800c46e <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 fd14 	bl	800ce82 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c45a:	e008      	b.n	800c46e <HAL_UART_IRQHandler+0x612>
      return;
 800c45c:	bf00      	nop
 800c45e:	e006      	b.n	800c46e <HAL_UART_IRQHandler+0x612>
    return;
 800c460:	bf00      	nop
 800c462:	e004      	b.n	800c46e <HAL_UART_IRQHandler+0x612>
      return;
 800c464:	bf00      	nop
 800c466:	e002      	b.n	800c46e <HAL_UART_IRQHandler+0x612>
      return;
 800c468:	bf00      	nop
 800c46a:	e000      	b.n	800c46e <HAL_UART_IRQHandler+0x612>
    return;
 800c46c:	bf00      	nop
  }
}
 800c46e:	37e8      	adds	r7, #232	@ 0xe8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c4b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4b8:	b094      	sub	sp, #80	@ 0x50
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	4b83      	ldr	r3, [pc, #524]	@ (800c6d8 <UART_SetConfig+0x224>)
 800c4ca:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ce:	689a      	ldr	r2, [r3, #8]
 800c4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	431a      	orrs	r2, r3
 800c4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d8:	695b      	ldr	r3, [r3, #20]
 800c4da:	431a      	orrs	r2, r3
 800c4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4de:	69db      	ldr	r3, [r3, #28]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	497c      	ldr	r1, [pc, #496]	@ (800c6dc <UART_SetConfig+0x228>)
 800c4ec:	4019      	ands	r1, r3
 800c4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4f4:	430b      	orrs	r3, r1
 800c4f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c504:	68d9      	ldr	r1, [r3, #12]
 800c506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	ea40 0301 	orr.w	r3, r0, r1
 800c50e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c512:	699b      	ldr	r3, [r3, #24]
 800c514:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	4b6f      	ldr	r3, [pc, #444]	@ (800c6d8 <UART_SetConfig+0x224>)
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d009      	beq.n	800c534 <UART_SetConfig+0x80>
 800c520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	4b6e      	ldr	r3, [pc, #440]	@ (800c6e0 <UART_SetConfig+0x22c>)
 800c526:	429a      	cmp	r2, r3
 800c528:	d004      	beq.n	800c534 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52c:	6a1a      	ldr	r2, [r3, #32]
 800c52e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c530:	4313      	orrs	r3, r2
 800c532:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c53e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c548:	430b      	orrs	r3, r1
 800c54a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c552:	f023 000f 	bic.w	r0, r3, #15
 800c556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c558:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	ea40 0301 	orr.w	r3, r0, r1
 800c562:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	4b5e      	ldr	r3, [pc, #376]	@ (800c6e4 <UART_SetConfig+0x230>)
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d102      	bne.n	800c574 <UART_SetConfig+0xc0>
 800c56e:	2301      	movs	r3, #1
 800c570:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c572:	e032      	b.n	800c5da <UART_SetConfig+0x126>
 800c574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	4b5b      	ldr	r3, [pc, #364]	@ (800c6e8 <UART_SetConfig+0x234>)
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d102      	bne.n	800c584 <UART_SetConfig+0xd0>
 800c57e:	2302      	movs	r3, #2
 800c580:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c582:	e02a      	b.n	800c5da <UART_SetConfig+0x126>
 800c584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	4b58      	ldr	r3, [pc, #352]	@ (800c6ec <UART_SetConfig+0x238>)
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d102      	bne.n	800c594 <UART_SetConfig+0xe0>
 800c58e:	2304      	movs	r3, #4
 800c590:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c592:	e022      	b.n	800c5da <UART_SetConfig+0x126>
 800c594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	4b55      	ldr	r3, [pc, #340]	@ (800c6f0 <UART_SetConfig+0x23c>)
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d102      	bne.n	800c5a4 <UART_SetConfig+0xf0>
 800c59e:	2308      	movs	r3, #8
 800c5a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5a2:	e01a      	b.n	800c5da <UART_SetConfig+0x126>
 800c5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	4b52      	ldr	r3, [pc, #328]	@ (800c6f4 <UART_SetConfig+0x240>)
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d102      	bne.n	800c5b4 <UART_SetConfig+0x100>
 800c5ae:	2310      	movs	r3, #16
 800c5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5b2:	e012      	b.n	800c5da <UART_SetConfig+0x126>
 800c5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	4b4f      	ldr	r3, [pc, #316]	@ (800c6f8 <UART_SetConfig+0x244>)
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d103      	bne.n	800c5c6 <UART_SetConfig+0x112>
 800c5be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800c5c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5c4:	e009      	b.n	800c5da <UART_SetConfig+0x126>
 800c5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	4b43      	ldr	r3, [pc, #268]	@ (800c6d8 <UART_SetConfig+0x224>)
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d102      	bne.n	800c5d6 <UART_SetConfig+0x122>
 800c5d0:	2320      	movs	r3, #32
 800c5d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5d4:	e001      	b.n	800c5da <UART_SetConfig+0x126>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	4b3e      	ldr	r3, [pc, #248]	@ (800c6d8 <UART_SetConfig+0x224>)
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d005      	beq.n	800c5f0 <UART_SetConfig+0x13c>
 800c5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	4b3d      	ldr	r3, [pc, #244]	@ (800c6e0 <UART_SetConfig+0x22c>)
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	f040 8088 	bne.w	800c700 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c5f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	623b      	str	r3, [r7, #32]
 800c5f6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c5f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c5fc:	f7fb fc08 	bl	8007e10 <HAL_RCCEx_GetPeriphCLKFreq>
 800c600:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c604:	2b00      	cmp	r3, #0
 800c606:	f000 80eb 	beq.w	800c7e0 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c60e:	4a3b      	ldr	r2, [pc, #236]	@ (800c6fc <UART_SetConfig+0x248>)
 800c610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c614:	461a      	mov	r2, r3
 800c616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c618:	fbb3 f3f2 	udiv	r3, r3, r2
 800c61c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c620:	685a      	ldr	r2, [r3, #4]
 800c622:	4613      	mov	r3, r2
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	4413      	add	r3, r2
 800c628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d305      	bcc.n	800c63a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c634:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c636:	429a      	cmp	r2, r3
 800c638:	d903      	bls.n	800c642 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800c63a:	2301      	movs	r3, #1
 800c63c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c640:	e048      	b.n	800c6d4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c644:	2200      	movs	r2, #0
 800c646:	61bb      	str	r3, [r7, #24]
 800c648:	61fa      	str	r2, [r7, #28]
 800c64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c64e:	4a2b      	ldr	r2, [pc, #172]	@ (800c6fc <UART_SetConfig+0x248>)
 800c650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c654:	b29b      	uxth	r3, r3
 800c656:	2200      	movs	r2, #0
 800c658:	613b      	str	r3, [r7, #16]
 800c65a:	617a      	str	r2, [r7, #20]
 800c65c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c660:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c664:	f7f4 faa0 	bl	8000ba8 <__aeabi_uldivmod>
 800c668:	4602      	mov	r2, r0
 800c66a:	460b      	mov	r3, r1
 800c66c:	4610      	mov	r0, r2
 800c66e:	4619      	mov	r1, r3
 800c670:	f04f 0200 	mov.w	r2, #0
 800c674:	f04f 0300 	mov.w	r3, #0
 800c678:	020b      	lsls	r3, r1, #8
 800c67a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c67e:	0202      	lsls	r2, r0, #8
 800c680:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c682:	6849      	ldr	r1, [r1, #4]
 800c684:	0849      	lsrs	r1, r1, #1
 800c686:	2000      	movs	r0, #0
 800c688:	460c      	mov	r4, r1
 800c68a:	4605      	mov	r5, r0
 800c68c:	eb12 0804 	adds.w	r8, r2, r4
 800c690:	eb43 0905 	adc.w	r9, r3, r5
 800c694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	60bb      	str	r3, [r7, #8]
 800c69c:	60fa      	str	r2, [r7, #12]
 800c69e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c6a2:	4640      	mov	r0, r8
 800c6a4:	4649      	mov	r1, r9
 800c6a6:	f7f4 fa7f 	bl	8000ba8 <__aeabi_uldivmod>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6b8:	d308      	bcc.n	800c6cc <UART_SetConfig+0x218>
 800c6ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6c0:	d204      	bcs.n	800c6cc <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800c6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c6c8:	60da      	str	r2, [r3, #12]
 800c6ca:	e003      	b.n	800c6d4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c6d2:	e085      	b.n	800c7e0 <UART_SetConfig+0x32c>
 800c6d4:	e084      	b.n	800c7e0 <UART_SetConfig+0x32c>
 800c6d6:	bf00      	nop
 800c6d8:	46002400 	.word	0x46002400
 800c6dc:	cfff69f3 	.word	0xcfff69f3
 800c6e0:	56002400 	.word	0x56002400
 800c6e4:	40013800 	.word	0x40013800
 800c6e8:	40004400 	.word	0x40004400
 800c6ec:	40004800 	.word	0x40004800
 800c6f0:	40004c00 	.word	0x40004c00
 800c6f4:	40005000 	.word	0x40005000
 800c6f8:	40006400 	.word	0x40006400
 800c6fc:	0800e8e0 	.word	0x0800e8e0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c702:	69db      	ldr	r3, [r3, #28]
 800c704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c708:	d13c      	bne.n	800c784 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c70a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c70c:	2200      	movs	r2, #0
 800c70e:	603b      	str	r3, [r7, #0]
 800c710:	607a      	str	r2, [r7, #4]
 800c712:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c716:	f7fb fb7b 	bl	8007e10 <HAL_RCCEx_GetPeriphCLKFreq>
 800c71a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c71c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d05e      	beq.n	800c7e0 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c726:	4a39      	ldr	r2, [pc, #228]	@ (800c80c <UART_SetConfig+0x358>)
 800c728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c72c:	461a      	mov	r2, r3
 800c72e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c730:	fbb3 f3f2 	udiv	r3, r3, r2
 800c734:	005a      	lsls	r2, r3, #1
 800c736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	085b      	lsrs	r3, r3, #1
 800c73c:	441a      	add	r2, r3
 800c73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	fbb2 f3f3 	udiv	r3, r2, r3
 800c746:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c74a:	2b0f      	cmp	r3, #15
 800c74c:	d916      	bls.n	800c77c <UART_SetConfig+0x2c8>
 800c74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c754:	d212      	bcs.n	800c77c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c758:	b29b      	uxth	r3, r3
 800c75a:	f023 030f 	bic.w	r3, r3, #15
 800c75e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c762:	085b      	lsrs	r3, r3, #1
 800c764:	b29b      	uxth	r3, r3
 800c766:	f003 0307 	and.w	r3, r3, #7
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c76e:	4313      	orrs	r3, r2
 800c770:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c778:	60da      	str	r2, [r3, #12]
 800c77a:	e031      	b.n	800c7e0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c782:	e02d      	b.n	800c7e0 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c786:	2200      	movs	r2, #0
 800c788:	469a      	mov	sl, r3
 800c78a:	4693      	mov	fp, r2
 800c78c:	4650      	mov	r0, sl
 800c78e:	4659      	mov	r1, fp
 800c790:	f7fb fb3e 	bl	8007e10 <HAL_RCCEx_GetPeriphCLKFreq>
 800c794:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d021      	beq.n	800c7e0 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7a0:	4a1a      	ldr	r2, [pc, #104]	@ (800c80c <UART_SetConfig+0x358>)
 800c7a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800c7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	085b      	lsrs	r3, r3, #1
 800c7b4:	441a      	add	r2, r3
 800c7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c2:	2b0f      	cmp	r3, #15
 800c7c4:	d909      	bls.n	800c7da <UART_SetConfig+0x326>
 800c7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7cc:	d205      	bcs.n	800c7da <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c7ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	60da      	str	r2, [r3, #12]
 800c7d8:	e002      	b.n	800c7e0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c7fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c800:	4618      	mov	r0, r3
 800c802:	3750      	adds	r7, #80	@ 0x50
 800c804:	46bd      	mov	sp, r7
 800c806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c80a:	bf00      	nop
 800c80c:	0800e8e0 	.word	0x0800e8e0

0800c810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c81c:	f003 0308 	and.w	r3, r3, #8
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00a      	beq.n	800c83a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	430a      	orrs	r2, r1
 800c838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c83e:	f003 0301 	and.w	r3, r3, #1
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00a      	beq.n	800c85c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	430a      	orrs	r2, r1
 800c85a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c860:	f003 0302 	and.w	r3, r3, #2
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00a      	beq.n	800c87e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	430a      	orrs	r2, r1
 800c87c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c882:	f003 0304 	and.w	r3, r3, #4
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00a      	beq.n	800c8a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	430a      	orrs	r2, r1
 800c89e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8a4:	f003 0310 	and.w	r3, r3, #16
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00a      	beq.n	800c8c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	430a      	orrs	r2, r1
 800c8c0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8c6:	f003 0320 	and.w	r3, r3, #32
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00a      	beq.n	800c8e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	430a      	orrs	r2, r1
 800c8e2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d01a      	beq.n	800c926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	430a      	orrs	r2, r1
 800c904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c90a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c90e:	d10a      	bne.n	800c926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	430a      	orrs	r2, r1
 800c924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c92a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00a      	beq.n	800c948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	430a      	orrs	r2, r1
 800c946:	605a      	str	r2, [r3, #4]
  }
}
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b098      	sub	sp, #96	@ 0x60
 800c958:	af02      	add	r7, sp, #8
 800c95a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c964:	f7f7 f8ba 	bl	8003adc <HAL_GetTick>
 800c968:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f003 0308 	and.w	r3, r3, #8
 800c974:	2b08      	cmp	r3, #8
 800c976:	d12f      	bne.n	800c9d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c978:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c97c:	9300      	str	r3, [sp, #0]
 800c97e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c980:	2200      	movs	r2, #0
 800c982:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f88e 	bl	800caa8 <UART_WaitOnFlagUntilTimeout>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d022      	beq.n	800c9d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c99a:	e853 3f00 	ldrex	r3, [r3]
 800c99e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9b8:	e841 2300 	strex	r3, r2, [r1]
 800c9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1e6      	bne.n	800c992 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2220      	movs	r2, #32
 800c9c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e063      	b.n	800caa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f003 0304 	and.w	r3, r3, #4
 800c9e2:	2b04      	cmp	r3, #4
 800c9e4:	d149      	bne.n	800ca7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f857 	bl	800caa8 <UART_WaitOnFlagUntilTimeout>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d03c      	beq.n	800ca7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca08:	e853 3f00 	ldrex	r3, [r3]
 800ca0c:	623b      	str	r3, [r7, #32]
   return(result);
 800ca0e:	6a3b      	ldr	r3, [r7, #32]
 800ca10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca1e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca26:	e841 2300 	strex	r3, r2, [r1]
 800ca2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1e6      	bne.n	800ca00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	3308      	adds	r3, #8
 800ca38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	e853 3f00 	ldrex	r3, [r3]
 800ca40:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f023 0301 	bic.w	r3, r3, #1
 800ca48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	3308      	adds	r3, #8
 800ca50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca52:	61fa      	str	r2, [r7, #28]
 800ca54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca56:	69b9      	ldr	r1, [r7, #24]
 800ca58:	69fa      	ldr	r2, [r7, #28]
 800ca5a:	e841 2300 	strex	r3, r2, [r1]
 800ca5e:	617b      	str	r3, [r7, #20]
   return(result);
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e5      	bne.n	800ca32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2220      	movs	r2, #32
 800ca6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca76:	2303      	movs	r3, #3
 800ca78:	e012      	b.n	800caa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2220      	movs	r2, #32
 800ca7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2220      	movs	r2, #32
 800ca86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3758      	adds	r7, #88	@ 0x58
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	603b      	str	r3, [r7, #0]
 800cab4:	4613      	mov	r3, r2
 800cab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cab8:	e04f      	b.n	800cb5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac0:	d04b      	beq.n	800cb5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cac2:	f7f7 f80b 	bl	8003adc <HAL_GetTick>
 800cac6:	4602      	mov	r2, r0
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	1ad3      	subs	r3, r2, r3
 800cacc:	69ba      	ldr	r2, [r7, #24]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d302      	bcc.n	800cad8 <UART_WaitOnFlagUntilTimeout+0x30>
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d101      	bne.n	800cadc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cad8:	2303      	movs	r3, #3
 800cada:	e04e      	b.n	800cb7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f003 0304 	and.w	r3, r3, #4
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d037      	beq.n	800cb5a <UART_WaitOnFlagUntilTimeout+0xb2>
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	2b80      	cmp	r3, #128	@ 0x80
 800caee:	d034      	beq.n	800cb5a <UART_WaitOnFlagUntilTimeout+0xb2>
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	2b40      	cmp	r3, #64	@ 0x40
 800caf4:	d031      	beq.n	800cb5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	69db      	ldr	r3, [r3, #28]
 800cafc:	f003 0308 	and.w	r3, r3, #8
 800cb00:	2b08      	cmp	r3, #8
 800cb02:	d110      	bne.n	800cb26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2208      	movs	r2, #8
 800cb0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f000 f879 	bl	800cc04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2208      	movs	r2, #8
 800cb16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	e029      	b.n	800cb7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	69db      	ldr	r3, [r3, #28]
 800cb2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb34:	d111      	bne.n	800cb5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cb3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f000 f85f 	bl	800cc04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2220      	movs	r2, #32
 800cb4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2200      	movs	r2, #0
 800cb52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cb56:	2303      	movs	r3, #3
 800cb58:	e00f      	b.n	800cb7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	69da      	ldr	r2, [r3, #28]
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	4013      	ands	r3, r2
 800cb64:	68ba      	ldr	r2, [r7, #8]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	bf0c      	ite	eq
 800cb6a:	2301      	moveq	r3, #1
 800cb6c:	2300      	movne	r3, #0
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	461a      	mov	r2, r3
 800cb72:	79fb      	ldrb	r3, [r7, #7]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d0a0      	beq.n	800caba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb78:	2300      	movs	r3, #0
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cb82:	b480      	push	{r7}
 800cb84:	b08f      	sub	sp, #60	@ 0x3c
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb90:	6a3b      	ldr	r3, [r7, #32]
 800cb92:	e853 3f00 	ldrex	r3, [r3]
 800cb96:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cb9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	461a      	mov	r2, r3
 800cba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cbaa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbb0:	e841 2300 	strex	r3, r2, [r1]
 800cbb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1e6      	bne.n	800cb8a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	3308      	adds	r3, #8
 800cbc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	e853 3f00 	ldrex	r3, [r3]
 800cbca:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800cbd2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3308      	adds	r3, #8
 800cbda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbdc:	61ba      	str	r2, [r7, #24]
 800cbde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe0:	6979      	ldr	r1, [r7, #20]
 800cbe2:	69ba      	ldr	r2, [r7, #24]
 800cbe4:	e841 2300 	strex	r3, r2, [r1]
 800cbe8:	613b      	str	r3, [r7, #16]
   return(result);
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1e5      	bne.n	800cbbc <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2220      	movs	r2, #32
 800cbf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800cbf8:	bf00      	nop
 800cbfa:	373c      	adds	r7, #60	@ 0x3c
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b095      	sub	sp, #84	@ 0x54
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc14:	e853 3f00 	ldrex	r3, [r3]
 800cc18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	461a      	mov	r2, r3
 800cc28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc2a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc32:	e841 2300 	strex	r3, r2, [r1]
 800cc36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1e6      	bne.n	800cc0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	3308      	adds	r3, #8
 800cc44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc46:	6a3b      	ldr	r3, [r7, #32]
 800cc48:	e853 3f00 	ldrex	r3, [r3]
 800cc4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cc54:	f023 0301 	bic.w	r3, r3, #1
 800cc58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	3308      	adds	r3, #8
 800cc60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc6a:	e841 2300 	strex	r3, r2, [r1]
 800cc6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1e3      	bne.n	800cc3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d118      	bne.n	800ccb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	e853 3f00 	ldrex	r3, [r3]
 800cc8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	f023 0310 	bic.w	r3, r3, #16
 800cc92:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	461a      	mov	r2, r3
 800cc9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc9c:	61bb      	str	r3, [r7, #24]
 800cc9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca0:	6979      	ldr	r1, [r7, #20]
 800cca2:	69ba      	ldr	r2, [r7, #24]
 800cca4:	e841 2300 	strex	r3, r2, [r1]
 800cca8:	613b      	str	r3, [r7, #16]
   return(result);
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1e6      	bne.n	800cc7e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2220      	movs	r2, #32
 800ccb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ccc4:	bf00      	nop
 800ccc6:	3754      	adds	r7, #84	@ 0x54
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b090      	sub	sp, #64	@ 0x40
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccdc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cce2:	2b81      	cmp	r3, #129	@ 0x81
 800cce4:	d037      	beq.n	800cd56 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800cce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cce8:	2200      	movs	r2, #0
 800ccea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ccee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3308      	adds	r3, #8
 800ccf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf8:	e853 3f00 	ldrex	r3, [r3]
 800ccfc:	623b      	str	r3, [r7, #32]
   return(result);
 800ccfe:	6a3b      	ldr	r3, [r7, #32]
 800cd00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd04:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	3308      	adds	r3, #8
 800cd0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd0e:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd16:	e841 2300 	strex	r3, r2, [r1]
 800cd1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1e5      	bne.n	800ccee <UART_DMATransmitCplt+0x1e>

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	e853 3f00 	ldrex	r3, [r3]
 800cd2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd36:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd40:	61fb      	str	r3, [r7, #28]
 800cd42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd44:	69b9      	ldr	r1, [r7, #24]
 800cd46:	69fa      	ldr	r2, [r7, #28]
 800cd48:	e841 2300 	strex	r3, r2, [r1]
 800cd4c:	617b      	str	r3, [r7, #20]
   return(result);
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d1e6      	bne.n	800cd22 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd54:	e002      	b.n	800cd5c <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800cd56:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cd58:	f7f4 fec4 	bl	8001ae4 <HAL_UART_TxCpltCallback>
}
 800cd5c:	bf00      	nop
 800cd5e:	3740      	adds	r7, #64	@ 0x40
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd70:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	f7ff fb7e 	bl	800c474 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd78:	bf00      	nop
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd8c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cda8:	2b80      	cmp	r3, #128	@ 0x80
 800cdaa:	d109      	bne.n	800cdc0 <UART_DMAError+0x40>
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	2b21      	cmp	r3, #33	@ 0x21
 800cdb0:	d106      	bne.n	800cdc0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800cdba:	6978      	ldr	r0, [r7, #20]
 800cdbc:	f7ff fee1 	bl	800cb82 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdca:	2b40      	cmp	r3, #64	@ 0x40
 800cdcc:	d109      	bne.n	800cde2 <UART_DMAError+0x62>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2b22      	cmp	r3, #34	@ 0x22
 800cdd2:	d106      	bne.n	800cde2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800cddc:	6978      	ldr	r0, [r7, #20]
 800cdde:	f7ff ff11 	bl	800cc04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cde8:	f043 0210 	orr.w	r2, r3, #16
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cdf2:	6978      	ldr	r0, [r7, #20]
 800cdf4:	f7ff fb48 	bl	800c488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdf8:	bf00      	nop
 800cdfa:	3718      	adds	r7, #24
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f7ff fb32 	bl	800c488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce24:	bf00      	nop
 800ce26:	3710      	adds	r7, #16
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b088      	sub	sp, #32
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	e853 3f00 	ldrex	r3, [r3]
 800ce40:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce48:	61fb      	str	r3, [r7, #28]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	461a      	mov	r2, r3
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	61bb      	str	r3, [r7, #24]
 800ce54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce56:	6979      	ldr	r1, [r7, #20]
 800ce58:	69ba      	ldr	r2, [r7, #24]
 800ce5a:	e841 2300 	strex	r3, r2, [r1]
 800ce5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d1e6      	bne.n	800ce34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2220      	movs	r2, #32
 800ce6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7f4 fe35 	bl	8001ae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce7a:	bf00      	nop
 800ce7c:	3720      	adds	r7, #32
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ce82:	b480      	push	{r7}
 800ce84:	b083      	sub	sp, #12
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ce8a:	bf00      	nop
 800ce8c:	370c      	adds	r7, #12
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr

0800ce96 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ce96:	b480      	push	{r7}
 800ce98:	b083      	sub	sp, #12
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ce9e:	bf00      	nop
 800cea0:	370c      	adds	r7, #12
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr

0800ceaa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ceaa:	b480      	push	{r7}
 800ceac:	b085      	sub	sp, #20
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d101      	bne.n	800cec0 <HAL_UARTEx_DisableFifoMode+0x16>
 800cebc:	2302      	movs	r3, #2
 800cebe:	e027      	b.n	800cf10 <HAL_UARTEx_DisableFifoMode+0x66>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2201      	movs	r2, #1
 800cec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2224      	movs	r2, #36	@ 0x24
 800cecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f022 0201 	bic.w	r2, r2, #1
 800cee6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ceee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2220      	movs	r2, #32
 800cf02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d101      	bne.n	800cf34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cf30:	2302      	movs	r3, #2
 800cf32:	e02d      	b.n	800cf90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2201      	movs	r2, #1
 800cf38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2224      	movs	r2, #36	@ 0x24
 800cf40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f022 0201 	bic.w	r2, r2, #1
 800cf5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	683a      	ldr	r2, [r7, #0]
 800cf6c:	430a      	orrs	r2, r1
 800cf6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 f84f 	bl	800d014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	68fa      	ldr	r2, [r7, #12]
 800cf7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2220      	movs	r2, #32
 800cf82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf8e:	2300      	movs	r3, #0
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d101      	bne.n	800cfb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cfac:	2302      	movs	r3, #2
 800cfae:	e02d      	b.n	800d00c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2224      	movs	r2, #36	@ 0x24
 800cfbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f022 0201 	bic.w	r2, r2, #1
 800cfd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	689b      	ldr	r3, [r3, #8]
 800cfde:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	683a      	ldr	r2, [r7, #0]
 800cfe8:	430a      	orrs	r2, r1
 800cfea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 f811 	bl	800d014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2220      	movs	r2, #32
 800cffe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d020:	2b00      	cmp	r3, #0
 800d022:	d108      	bne.n	800d036 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d034:	e031      	b.n	800d09a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d036:	2308      	movs	r3, #8
 800d038:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d03a:	2308      	movs	r3, #8
 800d03c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	0e5b      	lsrs	r3, r3, #25
 800d046:	b2db      	uxtb	r3, r3
 800d048:	f003 0307 	and.w	r3, r3, #7
 800d04c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	0f5b      	lsrs	r3, r3, #29
 800d056:	b2db      	uxtb	r3, r3
 800d058:	f003 0307 	and.w	r3, r3, #7
 800d05c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d05e:	7bbb      	ldrb	r3, [r7, #14]
 800d060:	7b3a      	ldrb	r2, [r7, #12]
 800d062:	4911      	ldr	r1, [pc, #68]	@ (800d0a8 <UARTEx_SetNbDataToProcess+0x94>)
 800d064:	5c8a      	ldrb	r2, [r1, r2]
 800d066:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d06a:	7b3a      	ldrb	r2, [r7, #12]
 800d06c:	490f      	ldr	r1, [pc, #60]	@ (800d0ac <UARTEx_SetNbDataToProcess+0x98>)
 800d06e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d070:	fb93 f3f2 	sdiv	r3, r3, r2
 800d074:	b29a      	uxth	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d07c:	7bfb      	ldrb	r3, [r7, #15]
 800d07e:	7b7a      	ldrb	r2, [r7, #13]
 800d080:	4909      	ldr	r1, [pc, #36]	@ (800d0a8 <UARTEx_SetNbDataToProcess+0x94>)
 800d082:	5c8a      	ldrb	r2, [r1, r2]
 800d084:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d088:	7b7a      	ldrb	r2, [r7, #13]
 800d08a:	4908      	ldr	r1, [pc, #32]	@ (800d0ac <UARTEx_SetNbDataToProcess+0x98>)
 800d08c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d08e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d092:	b29a      	uxth	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d09a:	bf00      	nop
 800d09c:	3714      	adds	r7, #20
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	0800e8f8 	.word	0x0800e8f8
 800d0ac:	0800e900 	.word	0x0800e900

0800d0b0 <malloc>:
 800d0b0:	4b02      	ldr	r3, [pc, #8]	@ (800d0bc <malloc+0xc>)
 800d0b2:	4601      	mov	r1, r0
 800d0b4:	6818      	ldr	r0, [r3, #0]
 800d0b6:	f000 b82d 	b.w	800d114 <_malloc_r>
 800d0ba:	bf00      	nop
 800d0bc:	20000018 	.word	0x20000018

0800d0c0 <free>:
 800d0c0:	4b02      	ldr	r3, [pc, #8]	@ (800d0cc <free+0xc>)
 800d0c2:	4601      	mov	r1, r0
 800d0c4:	6818      	ldr	r0, [r3, #0]
 800d0c6:	f000 b8f5 	b.w	800d2b4 <_free_r>
 800d0ca:	bf00      	nop
 800d0cc:	20000018 	.word	0x20000018

0800d0d0 <sbrk_aligned>:
 800d0d0:	b570      	push	{r4, r5, r6, lr}
 800d0d2:	4e0f      	ldr	r6, [pc, #60]	@ (800d110 <sbrk_aligned+0x40>)
 800d0d4:	460c      	mov	r4, r1
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	6831      	ldr	r1, [r6, #0]
 800d0da:	b911      	cbnz	r1, 800d0e2 <sbrk_aligned+0x12>
 800d0dc:	f000 f8ae 	bl	800d23c <_sbrk_r>
 800d0e0:	6030      	str	r0, [r6, #0]
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	f000 f8a9 	bl	800d23c <_sbrk_r>
 800d0ea:	1c43      	adds	r3, r0, #1
 800d0ec:	d103      	bne.n	800d0f6 <sbrk_aligned+0x26>
 800d0ee:	f04f 34ff 	mov.w	r4, #4294967295
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	bd70      	pop	{r4, r5, r6, pc}
 800d0f6:	1cc4      	adds	r4, r0, #3
 800d0f8:	f024 0403 	bic.w	r4, r4, #3
 800d0fc:	42a0      	cmp	r0, r4
 800d0fe:	d0f8      	beq.n	800d0f2 <sbrk_aligned+0x22>
 800d100:	1a21      	subs	r1, r4, r0
 800d102:	4628      	mov	r0, r5
 800d104:	f000 f89a 	bl	800d23c <_sbrk_r>
 800d108:	3001      	adds	r0, #1
 800d10a:	d1f2      	bne.n	800d0f2 <sbrk_aligned+0x22>
 800d10c:	e7ef      	b.n	800d0ee <sbrk_aligned+0x1e>
 800d10e:	bf00      	nop
 800d110:	20000720 	.word	0x20000720

0800d114 <_malloc_r>:
 800d114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d118:	1ccd      	adds	r5, r1, #3
 800d11a:	4606      	mov	r6, r0
 800d11c:	f025 0503 	bic.w	r5, r5, #3
 800d120:	3508      	adds	r5, #8
 800d122:	2d0c      	cmp	r5, #12
 800d124:	bf38      	it	cc
 800d126:	250c      	movcc	r5, #12
 800d128:	2d00      	cmp	r5, #0
 800d12a:	db01      	blt.n	800d130 <_malloc_r+0x1c>
 800d12c:	42a9      	cmp	r1, r5
 800d12e:	d904      	bls.n	800d13a <_malloc_r+0x26>
 800d130:	230c      	movs	r3, #12
 800d132:	6033      	str	r3, [r6, #0]
 800d134:	2000      	movs	r0, #0
 800d136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d13a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d210 <_malloc_r+0xfc>
 800d13e:	f000 f869 	bl	800d214 <__malloc_lock>
 800d142:	f8d8 3000 	ldr.w	r3, [r8]
 800d146:	461c      	mov	r4, r3
 800d148:	bb44      	cbnz	r4, 800d19c <_malloc_r+0x88>
 800d14a:	4629      	mov	r1, r5
 800d14c:	4630      	mov	r0, r6
 800d14e:	f7ff ffbf 	bl	800d0d0 <sbrk_aligned>
 800d152:	1c43      	adds	r3, r0, #1
 800d154:	4604      	mov	r4, r0
 800d156:	d158      	bne.n	800d20a <_malloc_r+0xf6>
 800d158:	f8d8 4000 	ldr.w	r4, [r8]
 800d15c:	4627      	mov	r7, r4
 800d15e:	2f00      	cmp	r7, #0
 800d160:	d143      	bne.n	800d1ea <_malloc_r+0xd6>
 800d162:	2c00      	cmp	r4, #0
 800d164:	d04b      	beq.n	800d1fe <_malloc_r+0xea>
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	4639      	mov	r1, r7
 800d16a:	4630      	mov	r0, r6
 800d16c:	eb04 0903 	add.w	r9, r4, r3
 800d170:	f000 f864 	bl	800d23c <_sbrk_r>
 800d174:	4581      	cmp	r9, r0
 800d176:	d142      	bne.n	800d1fe <_malloc_r+0xea>
 800d178:	6821      	ldr	r1, [r4, #0]
 800d17a:	4630      	mov	r0, r6
 800d17c:	1a6d      	subs	r5, r5, r1
 800d17e:	4629      	mov	r1, r5
 800d180:	f7ff ffa6 	bl	800d0d0 <sbrk_aligned>
 800d184:	3001      	adds	r0, #1
 800d186:	d03a      	beq.n	800d1fe <_malloc_r+0xea>
 800d188:	6823      	ldr	r3, [r4, #0]
 800d18a:	442b      	add	r3, r5
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	f8d8 3000 	ldr.w	r3, [r8]
 800d192:	685a      	ldr	r2, [r3, #4]
 800d194:	bb62      	cbnz	r2, 800d1f0 <_malloc_r+0xdc>
 800d196:	f8c8 7000 	str.w	r7, [r8]
 800d19a:	e00f      	b.n	800d1bc <_malloc_r+0xa8>
 800d19c:	6822      	ldr	r2, [r4, #0]
 800d19e:	1b52      	subs	r2, r2, r5
 800d1a0:	d420      	bmi.n	800d1e4 <_malloc_r+0xd0>
 800d1a2:	2a0b      	cmp	r2, #11
 800d1a4:	d917      	bls.n	800d1d6 <_malloc_r+0xc2>
 800d1a6:	1961      	adds	r1, r4, r5
 800d1a8:	42a3      	cmp	r3, r4
 800d1aa:	6025      	str	r5, [r4, #0]
 800d1ac:	bf18      	it	ne
 800d1ae:	6059      	strne	r1, [r3, #4]
 800d1b0:	6863      	ldr	r3, [r4, #4]
 800d1b2:	bf08      	it	eq
 800d1b4:	f8c8 1000 	streq.w	r1, [r8]
 800d1b8:	5162      	str	r2, [r4, r5]
 800d1ba:	604b      	str	r3, [r1, #4]
 800d1bc:	4630      	mov	r0, r6
 800d1be:	f000 f82f 	bl	800d220 <__malloc_unlock>
 800d1c2:	f104 000b 	add.w	r0, r4, #11
 800d1c6:	1d23      	adds	r3, r4, #4
 800d1c8:	f020 0007 	bic.w	r0, r0, #7
 800d1cc:	1ac2      	subs	r2, r0, r3
 800d1ce:	bf1c      	itt	ne
 800d1d0:	1a1b      	subne	r3, r3, r0
 800d1d2:	50a3      	strne	r3, [r4, r2]
 800d1d4:	e7af      	b.n	800d136 <_malloc_r+0x22>
 800d1d6:	6862      	ldr	r2, [r4, #4]
 800d1d8:	42a3      	cmp	r3, r4
 800d1da:	bf0c      	ite	eq
 800d1dc:	f8c8 2000 	streq.w	r2, [r8]
 800d1e0:	605a      	strne	r2, [r3, #4]
 800d1e2:	e7eb      	b.n	800d1bc <_malloc_r+0xa8>
 800d1e4:	4623      	mov	r3, r4
 800d1e6:	6864      	ldr	r4, [r4, #4]
 800d1e8:	e7ae      	b.n	800d148 <_malloc_r+0x34>
 800d1ea:	463c      	mov	r4, r7
 800d1ec:	687f      	ldr	r7, [r7, #4]
 800d1ee:	e7b6      	b.n	800d15e <_malloc_r+0x4a>
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	42a3      	cmp	r3, r4
 800d1f6:	d1fb      	bne.n	800d1f0 <_malloc_r+0xdc>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	6053      	str	r3, [r2, #4]
 800d1fc:	e7de      	b.n	800d1bc <_malloc_r+0xa8>
 800d1fe:	230c      	movs	r3, #12
 800d200:	4630      	mov	r0, r6
 800d202:	6033      	str	r3, [r6, #0]
 800d204:	f000 f80c 	bl	800d220 <__malloc_unlock>
 800d208:	e794      	b.n	800d134 <_malloc_r+0x20>
 800d20a:	6005      	str	r5, [r0, #0]
 800d20c:	e7d6      	b.n	800d1bc <_malloc_r+0xa8>
 800d20e:	bf00      	nop
 800d210:	20000724 	.word	0x20000724

0800d214 <__malloc_lock>:
 800d214:	4801      	ldr	r0, [pc, #4]	@ (800d21c <__malloc_lock+0x8>)
 800d216:	f000 b84b 	b.w	800d2b0 <__retarget_lock_acquire_recursive>
 800d21a:	bf00      	nop
 800d21c:	20000864 	.word	0x20000864

0800d220 <__malloc_unlock>:
 800d220:	4801      	ldr	r0, [pc, #4]	@ (800d228 <__malloc_unlock+0x8>)
 800d222:	f000 b846 	b.w	800d2b2 <__retarget_lock_release_recursive>
 800d226:	bf00      	nop
 800d228:	20000864 	.word	0x20000864

0800d22c <memset>:
 800d22c:	4402      	add	r2, r0
 800d22e:	4603      	mov	r3, r0
 800d230:	4293      	cmp	r3, r2
 800d232:	d100      	bne.n	800d236 <memset+0xa>
 800d234:	4770      	bx	lr
 800d236:	f803 1b01 	strb.w	r1, [r3], #1
 800d23a:	e7f9      	b.n	800d230 <memset+0x4>

0800d23c <_sbrk_r>:
 800d23c:	b538      	push	{r3, r4, r5, lr}
 800d23e:	2300      	movs	r3, #0
 800d240:	4d05      	ldr	r5, [pc, #20]	@ (800d258 <_sbrk_r+0x1c>)
 800d242:	4604      	mov	r4, r0
 800d244:	4608      	mov	r0, r1
 800d246:	602b      	str	r3, [r5, #0]
 800d248:	f7f6 f9fc 	bl	8003644 <_sbrk>
 800d24c:	1c43      	adds	r3, r0, #1
 800d24e:	d102      	bne.n	800d256 <_sbrk_r+0x1a>
 800d250:	682b      	ldr	r3, [r5, #0]
 800d252:	b103      	cbz	r3, 800d256 <_sbrk_r+0x1a>
 800d254:	6023      	str	r3, [r4, #0]
 800d256:	bd38      	pop	{r3, r4, r5, pc}
 800d258:	20000860 	.word	0x20000860

0800d25c <__errno>:
 800d25c:	4b01      	ldr	r3, [pc, #4]	@ (800d264 <__errno+0x8>)
 800d25e:	6818      	ldr	r0, [r3, #0]
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	20000018 	.word	0x20000018

0800d268 <__libc_init_array>:
 800d268:	b570      	push	{r4, r5, r6, lr}
 800d26a:	4d0d      	ldr	r5, [pc, #52]	@ (800d2a0 <__libc_init_array+0x38>)
 800d26c:	2600      	movs	r6, #0
 800d26e:	4c0d      	ldr	r4, [pc, #52]	@ (800d2a4 <__libc_init_array+0x3c>)
 800d270:	1b64      	subs	r4, r4, r5
 800d272:	10a4      	asrs	r4, r4, #2
 800d274:	42a6      	cmp	r6, r4
 800d276:	d109      	bne.n	800d28c <__libc_init_array+0x24>
 800d278:	4d0b      	ldr	r5, [pc, #44]	@ (800d2a8 <__libc_init_array+0x40>)
 800d27a:	2600      	movs	r6, #0
 800d27c:	4c0b      	ldr	r4, [pc, #44]	@ (800d2ac <__libc_init_array+0x44>)
 800d27e:	f001 fab7 	bl	800e7f0 <_init>
 800d282:	1b64      	subs	r4, r4, r5
 800d284:	10a4      	asrs	r4, r4, #2
 800d286:	42a6      	cmp	r6, r4
 800d288:	d105      	bne.n	800d296 <__libc_init_array+0x2e>
 800d28a:	bd70      	pop	{r4, r5, r6, pc}
 800d28c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d290:	3601      	adds	r6, #1
 800d292:	4798      	blx	r3
 800d294:	e7ee      	b.n	800d274 <__libc_init_array+0xc>
 800d296:	f855 3b04 	ldr.w	r3, [r5], #4
 800d29a:	3601      	adds	r6, #1
 800d29c:	4798      	blx	r3
 800d29e:	e7f2      	b.n	800d286 <__libc_init_array+0x1e>
 800d2a0:	0800e948 	.word	0x0800e948
 800d2a4:	0800e948 	.word	0x0800e948
 800d2a8:	0800e948 	.word	0x0800e948
 800d2ac:	0800e94c 	.word	0x0800e94c

0800d2b0 <__retarget_lock_acquire_recursive>:
 800d2b0:	4770      	bx	lr

0800d2b2 <__retarget_lock_release_recursive>:
 800d2b2:	4770      	bx	lr

0800d2b4 <_free_r>:
 800d2b4:	b538      	push	{r3, r4, r5, lr}
 800d2b6:	4605      	mov	r5, r0
 800d2b8:	2900      	cmp	r1, #0
 800d2ba:	d041      	beq.n	800d340 <_free_r+0x8c>
 800d2bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2c0:	1f0c      	subs	r4, r1, #4
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	bfb8      	it	lt
 800d2c6:	18e4      	addlt	r4, r4, r3
 800d2c8:	f7ff ffa4 	bl	800d214 <__malloc_lock>
 800d2cc:	4a1d      	ldr	r2, [pc, #116]	@ (800d344 <_free_r+0x90>)
 800d2ce:	6813      	ldr	r3, [r2, #0]
 800d2d0:	b933      	cbnz	r3, 800d2e0 <_free_r+0x2c>
 800d2d2:	6063      	str	r3, [r4, #4]
 800d2d4:	6014      	str	r4, [r2, #0]
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2dc:	f7ff bfa0 	b.w	800d220 <__malloc_unlock>
 800d2e0:	42a3      	cmp	r3, r4
 800d2e2:	d908      	bls.n	800d2f6 <_free_r+0x42>
 800d2e4:	6820      	ldr	r0, [r4, #0]
 800d2e6:	1821      	adds	r1, r4, r0
 800d2e8:	428b      	cmp	r3, r1
 800d2ea:	bf01      	itttt	eq
 800d2ec:	6819      	ldreq	r1, [r3, #0]
 800d2ee:	685b      	ldreq	r3, [r3, #4]
 800d2f0:	1809      	addeq	r1, r1, r0
 800d2f2:	6021      	streq	r1, [r4, #0]
 800d2f4:	e7ed      	b.n	800d2d2 <_free_r+0x1e>
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	b10b      	cbz	r3, 800d300 <_free_r+0x4c>
 800d2fc:	42a3      	cmp	r3, r4
 800d2fe:	d9fa      	bls.n	800d2f6 <_free_r+0x42>
 800d300:	6811      	ldr	r1, [r2, #0]
 800d302:	1850      	adds	r0, r2, r1
 800d304:	42a0      	cmp	r0, r4
 800d306:	d10b      	bne.n	800d320 <_free_r+0x6c>
 800d308:	6820      	ldr	r0, [r4, #0]
 800d30a:	4401      	add	r1, r0
 800d30c:	1850      	adds	r0, r2, r1
 800d30e:	6011      	str	r1, [r2, #0]
 800d310:	4283      	cmp	r3, r0
 800d312:	d1e0      	bne.n	800d2d6 <_free_r+0x22>
 800d314:	6818      	ldr	r0, [r3, #0]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	4408      	add	r0, r1
 800d31a:	6053      	str	r3, [r2, #4]
 800d31c:	6010      	str	r0, [r2, #0]
 800d31e:	e7da      	b.n	800d2d6 <_free_r+0x22>
 800d320:	d902      	bls.n	800d328 <_free_r+0x74>
 800d322:	230c      	movs	r3, #12
 800d324:	602b      	str	r3, [r5, #0]
 800d326:	e7d6      	b.n	800d2d6 <_free_r+0x22>
 800d328:	6820      	ldr	r0, [r4, #0]
 800d32a:	1821      	adds	r1, r4, r0
 800d32c:	428b      	cmp	r3, r1
 800d32e:	bf02      	ittt	eq
 800d330:	6819      	ldreq	r1, [r3, #0]
 800d332:	685b      	ldreq	r3, [r3, #4]
 800d334:	1809      	addeq	r1, r1, r0
 800d336:	6063      	str	r3, [r4, #4]
 800d338:	bf08      	it	eq
 800d33a:	6021      	streq	r1, [r4, #0]
 800d33c:	6054      	str	r4, [r2, #4]
 800d33e:	e7ca      	b.n	800d2d6 <_free_r+0x22>
 800d340:	bd38      	pop	{r3, r4, r5, pc}
 800d342:	bf00      	nop
 800d344:	20000724 	.word	0x20000724

0800d348 <log>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	ec55 4b10 	vmov	r4, r5, d0
 800d34e:	ed2d 8b02 	vpush	{d8}
 800d352:	f000 fa09 	bl	800d768 <__ieee754_log>
 800d356:	4622      	mov	r2, r4
 800d358:	462b      	mov	r3, r5
 800d35a:	4620      	mov	r0, r4
 800d35c:	4629      	mov	r1, r5
 800d35e:	eeb0 8a40 	vmov.f32	s16, s0
 800d362:	eef0 8a60 	vmov.f32	s17, s1
 800d366:	f7f3 fbe9 	bl	8000b3c <__aeabi_dcmpun>
 800d36a:	b998      	cbnz	r0, 800d394 <log+0x4c>
 800d36c:	2200      	movs	r2, #0
 800d36e:	2300      	movs	r3, #0
 800d370:	4620      	mov	r0, r4
 800d372:	4629      	mov	r1, r5
 800d374:	f7f3 fbd8 	bl	8000b28 <__aeabi_dcmpgt>
 800d378:	b960      	cbnz	r0, 800d394 <log+0x4c>
 800d37a:	2200      	movs	r2, #0
 800d37c:	2300      	movs	r3, #0
 800d37e:	4620      	mov	r0, r4
 800d380:	4629      	mov	r1, r5
 800d382:	f7f3 fba9 	bl	8000ad8 <__aeabi_dcmpeq>
 800d386:	b160      	cbz	r0, 800d3a2 <log+0x5a>
 800d388:	f7ff ff68 	bl	800d25c <__errno>
 800d38c:	2322      	movs	r3, #34	@ 0x22
 800d38e:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800d3b8 <log+0x70>
 800d392:	6003      	str	r3, [r0, #0]
 800d394:	eeb0 0a48 	vmov.f32	s0, s16
 800d398:	eef0 0a68 	vmov.f32	s1, s17
 800d39c:	ecbd 8b02 	vpop	{d8}
 800d3a0:	bd38      	pop	{r3, r4, r5, pc}
 800d3a2:	f7ff ff5b 	bl	800d25c <__errno>
 800d3a6:	2321      	movs	r3, #33	@ 0x21
 800d3a8:	ecbd 8b02 	vpop	{d8}
 800d3ac:	6003      	str	r3, [r0, #0]
 800d3ae:	4804      	ldr	r0, [pc, #16]	@ (800d3c0 <log+0x78>)
 800d3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3b4:	f000 b8f0 	b.w	800d598 <nan>
 800d3b8:	00000000 	.word	0x00000000
 800d3bc:	fff00000 	.word	0xfff00000
 800d3c0:	0800e908 	.word	0x0800e908
 800d3c4:	00000000 	.word	0x00000000

0800d3c8 <log10>:
 800d3c8:	b538      	push	{r3, r4, r5, lr}
 800d3ca:	ec55 4b10 	vmov	r4, r5, d0
 800d3ce:	ed2d 8b02 	vpush	{d8}
 800d3d2:	f000 fb7d 	bl	800dad0 <__ieee754_log10>
 800d3d6:	4622      	mov	r2, r4
 800d3d8:	462b      	mov	r3, r5
 800d3da:	4620      	mov	r0, r4
 800d3dc:	4629      	mov	r1, r5
 800d3de:	eeb0 8a40 	vmov.f32	s16, s0
 800d3e2:	eef0 8a60 	vmov.f32	s17, s1
 800d3e6:	f7f3 fba9 	bl	8000b3c <__aeabi_dcmpun>
 800d3ea:	b998      	cbnz	r0, 800d414 <log10+0x4c>
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	4629      	mov	r1, r5
 800d3f4:	f7f3 fb84 	bl	8000b00 <__aeabi_dcmple>
 800d3f8:	b160      	cbz	r0, 800d414 <log10+0x4c>
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	4620      	mov	r0, r4
 800d400:	4629      	mov	r1, r5
 800d402:	f7f3 fb69 	bl	8000ad8 <__aeabi_dcmpeq>
 800d406:	b160      	cbz	r0, 800d422 <log10+0x5a>
 800d408:	f7ff ff28 	bl	800d25c <__errno>
 800d40c:	2322      	movs	r3, #34	@ 0x22
 800d40e:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800d438 <log10+0x70>
 800d412:	6003      	str	r3, [r0, #0]
 800d414:	eeb0 0a48 	vmov.f32	s0, s16
 800d418:	eef0 0a68 	vmov.f32	s1, s17
 800d41c:	ecbd 8b02 	vpop	{d8}
 800d420:	bd38      	pop	{r3, r4, r5, pc}
 800d422:	f7ff ff1b 	bl	800d25c <__errno>
 800d426:	2321      	movs	r3, #33	@ 0x21
 800d428:	ecbd 8b02 	vpop	{d8}
 800d42c:	6003      	str	r3, [r0, #0]
 800d42e:	4804      	ldr	r0, [pc, #16]	@ (800d440 <log10+0x78>)
 800d430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d434:	f000 b8b0 	b.w	800d598 <nan>
 800d438:	00000000 	.word	0x00000000
 800d43c:	fff00000 	.word	0xfff00000
 800d440:	0800e908 	.word	0x0800e908

0800d444 <pow>:
 800d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d446:	ec55 4b11 	vmov	r4, r5, d1
 800d44a:	ed2d 8b02 	vpush	{d8}
 800d44e:	eeb0 8a40 	vmov.f32	s16, s0
 800d452:	eef0 8a60 	vmov.f32	s17, s1
 800d456:	f000 fbc7 	bl	800dbe8 <__ieee754_pow>
 800d45a:	4622      	mov	r2, r4
 800d45c:	462b      	mov	r3, r5
 800d45e:	4620      	mov	r0, r4
 800d460:	4629      	mov	r1, r5
 800d462:	ec57 6b10 	vmov	r6, r7, d0
 800d466:	f7f3 fb69 	bl	8000b3c <__aeabi_dcmpun>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	d13b      	bne.n	800d4e6 <pow+0xa2>
 800d46e:	2200      	movs	r2, #0
 800d470:	2300      	movs	r3, #0
 800d472:	ec51 0b18 	vmov	r0, r1, d8
 800d476:	f7f3 fb2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d47a:	b1b8      	cbz	r0, 800d4ac <pow+0x68>
 800d47c:	2200      	movs	r2, #0
 800d47e:	2300      	movs	r3, #0
 800d480:	4620      	mov	r0, r4
 800d482:	4629      	mov	r1, r5
 800d484:	f7f3 fb28 	bl	8000ad8 <__aeabi_dcmpeq>
 800d488:	2800      	cmp	r0, #0
 800d48a:	d146      	bne.n	800d51a <pow+0xd6>
 800d48c:	ec45 4b10 	vmov	d0, r4, r5
 800d490:	f000 f874 	bl	800d57c <finite>
 800d494:	b338      	cbz	r0, 800d4e6 <pow+0xa2>
 800d496:	2200      	movs	r2, #0
 800d498:	2300      	movs	r3, #0
 800d49a:	4620      	mov	r0, r4
 800d49c:	4629      	mov	r1, r5
 800d49e:	f7f3 fb25 	bl	8000aec <__aeabi_dcmplt>
 800d4a2:	b300      	cbz	r0, 800d4e6 <pow+0xa2>
 800d4a4:	f7ff feda 	bl	800d25c <__errno>
 800d4a8:	2322      	movs	r3, #34	@ 0x22
 800d4aa:	e01b      	b.n	800d4e4 <pow+0xa0>
 800d4ac:	ec47 6b10 	vmov	d0, r6, r7
 800d4b0:	f000 f864 	bl	800d57c <finite>
 800d4b4:	b9e0      	cbnz	r0, 800d4f0 <pow+0xac>
 800d4b6:	eeb0 0a48 	vmov.f32	s0, s16
 800d4ba:	eef0 0a68 	vmov.f32	s1, s17
 800d4be:	f000 f85d 	bl	800d57c <finite>
 800d4c2:	b1a8      	cbz	r0, 800d4f0 <pow+0xac>
 800d4c4:	ec45 4b10 	vmov	d0, r4, r5
 800d4c8:	f000 f858 	bl	800d57c <finite>
 800d4cc:	b180      	cbz	r0, 800d4f0 <pow+0xac>
 800d4ce:	4632      	mov	r2, r6
 800d4d0:	463b      	mov	r3, r7
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	4639      	mov	r1, r7
 800d4d6:	f7f3 fb31 	bl	8000b3c <__aeabi_dcmpun>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d0e2      	beq.n	800d4a4 <pow+0x60>
 800d4de:	f7ff febd 	bl	800d25c <__errno>
 800d4e2:	2321      	movs	r3, #33	@ 0x21
 800d4e4:	6003      	str	r3, [r0, #0]
 800d4e6:	ecbd 8b02 	vpop	{d8}
 800d4ea:	ec47 6b10 	vmov	d0, r6, r7
 800d4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	4639      	mov	r1, r7
 800d4f8:	f7f3 faee 	bl	8000ad8 <__aeabi_dcmpeq>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	d0f2      	beq.n	800d4e6 <pow+0xa2>
 800d500:	eeb0 0a48 	vmov.f32	s0, s16
 800d504:	eef0 0a68 	vmov.f32	s1, s17
 800d508:	f000 f838 	bl	800d57c <finite>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d0ea      	beq.n	800d4e6 <pow+0xa2>
 800d510:	ec45 4b10 	vmov	d0, r4, r5
 800d514:	f000 f832 	bl	800d57c <finite>
 800d518:	e7c3      	b.n	800d4a2 <pow+0x5e>
 800d51a:	2600      	movs	r6, #0
 800d51c:	4f00      	ldr	r7, [pc, #0]	@ (800d520 <pow+0xdc>)
 800d51e:	e7e2      	b.n	800d4e6 <pow+0xa2>
 800d520:	3ff00000 	.word	0x3ff00000

0800d524 <sqrt>:
 800d524:	b538      	push	{r3, r4, r5, lr}
 800d526:	ec55 4b10 	vmov	r4, r5, d0
 800d52a:	ed2d 8b02 	vpush	{d8}
 800d52e:	f000 f83b 	bl	800d5a8 <__ieee754_sqrt>
 800d532:	4622      	mov	r2, r4
 800d534:	462b      	mov	r3, r5
 800d536:	4620      	mov	r0, r4
 800d538:	4629      	mov	r1, r5
 800d53a:	eeb0 8a40 	vmov.f32	s16, s0
 800d53e:	eef0 8a60 	vmov.f32	s17, s1
 800d542:	f7f3 fafb 	bl	8000b3c <__aeabi_dcmpun>
 800d546:	b990      	cbnz	r0, 800d56e <sqrt+0x4a>
 800d548:	2200      	movs	r2, #0
 800d54a:	2300      	movs	r3, #0
 800d54c:	4620      	mov	r0, r4
 800d54e:	4629      	mov	r1, r5
 800d550:	f7f3 facc 	bl	8000aec <__aeabi_dcmplt>
 800d554:	b158      	cbz	r0, 800d56e <sqrt+0x4a>
 800d556:	f7ff fe81 	bl	800d25c <__errno>
 800d55a:	2321      	movs	r3, #33	@ 0x21
 800d55c:	2200      	movs	r2, #0
 800d55e:	6003      	str	r3, [r0, #0]
 800d560:	2300      	movs	r3, #0
 800d562:	4610      	mov	r0, r2
 800d564:	4619      	mov	r1, r3
 800d566:	f7f3 f979 	bl	800085c <__aeabi_ddiv>
 800d56a:	ec41 0b18 	vmov	d8, r0, r1
 800d56e:	eeb0 0a48 	vmov.f32	s0, s16
 800d572:	eef0 0a68 	vmov.f32	s1, s17
 800d576:	ecbd 8b02 	vpop	{d8}
 800d57a:	bd38      	pop	{r3, r4, r5, pc}

0800d57c <finite>:
 800d57c:	b082      	sub	sp, #8
 800d57e:	ed8d 0b00 	vstr	d0, [sp]
 800d582:	9801      	ldr	r0, [sp, #4]
 800d584:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d588:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d58c:	0fc0      	lsrs	r0, r0, #31
 800d58e:	b002      	add	sp, #8
 800d590:	4770      	bx	lr
 800d592:	0000      	movs	r0, r0
 800d594:	0000      	movs	r0, r0
	...

0800d598 <nan>:
 800d598:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d5a0 <nan+0x8>
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop
 800d5a0:	00000000 	.word	0x00000000
 800d5a4:	7ff80000 	.word	0x7ff80000

0800d5a8 <__ieee754_sqrt>:
 800d5a8:	4a6b      	ldr	r2, [pc, #428]	@ (800d758 <__ieee754_sqrt+0x1b0>)
 800d5aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ae:	ec55 4b10 	vmov	r4, r5, d0
 800d5b2:	43aa      	bics	r2, r5
 800d5b4:	462b      	mov	r3, r5
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	d110      	bne.n	800d5dc <__ieee754_sqrt+0x34>
 800d5ba:	4622      	mov	r2, r4
 800d5bc:	4620      	mov	r0, r4
 800d5be:	4629      	mov	r1, r5
 800d5c0:	f7f3 f822 	bl	8000608 <__aeabi_dmul>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	f7f2 fe66 	bl	800029c <__adddf3>
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	460d      	mov	r5, r1
 800d5d4:	ec45 4b10 	vmov	d0, r4, r5
 800d5d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5dc:	2d00      	cmp	r5, #0
 800d5de:	dc0e      	bgt.n	800d5fe <__ieee754_sqrt+0x56>
 800d5e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d5e4:	4322      	orrs	r2, r4
 800d5e6:	d0f5      	beq.n	800d5d4 <__ieee754_sqrt+0x2c>
 800d5e8:	b19d      	cbz	r5, 800d612 <__ieee754_sqrt+0x6a>
 800d5ea:	4622      	mov	r2, r4
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	f7f2 fe52 	bl	8000298 <__aeabi_dsub>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	f7f3 f930 	bl	800085c <__aeabi_ddiv>
 800d5fc:	e7e8      	b.n	800d5d0 <__ieee754_sqrt+0x28>
 800d5fe:	152a      	asrs	r2, r5, #20
 800d600:	d115      	bne.n	800d62e <__ieee754_sqrt+0x86>
 800d602:	2000      	movs	r0, #0
 800d604:	e009      	b.n	800d61a <__ieee754_sqrt+0x72>
 800d606:	0acb      	lsrs	r3, r1, #11
 800d608:	3a15      	subs	r2, #21
 800d60a:	0549      	lsls	r1, r1, #21
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d0fa      	beq.n	800d606 <__ieee754_sqrt+0x5e>
 800d610:	e7f7      	b.n	800d602 <__ieee754_sqrt+0x5a>
 800d612:	462a      	mov	r2, r5
 800d614:	e7fa      	b.n	800d60c <__ieee754_sqrt+0x64>
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	3001      	adds	r0, #1
 800d61a:	02dc      	lsls	r4, r3, #11
 800d61c:	d5fb      	bpl.n	800d616 <__ieee754_sqrt+0x6e>
 800d61e:	1e44      	subs	r4, r0, #1
 800d620:	1b12      	subs	r2, r2, r4
 800d622:	f1c0 0420 	rsb	r4, r0, #32
 800d626:	fa21 f404 	lsr.w	r4, r1, r4
 800d62a:	4081      	lsls	r1, r0
 800d62c:	4323      	orrs	r3, r4
 800d62e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d632:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d636:	07d2      	lsls	r2, r2, #31
 800d638:	f04f 0600 	mov.w	r6, #0
 800d63c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d640:	ea4f 0565 	mov.w	r5, r5, asr #1
 800d644:	f04f 0016 	mov.w	r0, #22
 800d648:	4632      	mov	r2, r6
 800d64a:	bf58      	it	pl
 800d64c:	005b      	lslpl	r3, r3, #1
 800d64e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d652:	bf5c      	itt	pl
 800d654:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d658:	0049      	lslpl	r1, r1, #1
 800d65a:	005b      	lsls	r3, r3, #1
 800d65c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d660:	0049      	lsls	r1, r1, #1
 800d662:	1917      	adds	r7, r2, r4
 800d664:	429f      	cmp	r7, r3
 800d666:	bfde      	ittt	le
 800d668:	193a      	addle	r2, r7, r4
 800d66a:	1bdb      	suble	r3, r3, r7
 800d66c:	1936      	addle	r6, r6, r4
 800d66e:	0fcf      	lsrs	r7, r1, #31
 800d670:	3801      	subs	r0, #1
 800d672:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d676:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d67a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d67e:	d1f0      	bne.n	800d662 <__ieee754_sqrt+0xba>
 800d680:	4604      	mov	r4, r0
 800d682:	2720      	movs	r7, #32
 800d684:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d688:	429a      	cmp	r2, r3
 800d68a:	eb00 0e0c 	add.w	lr, r0, ip
 800d68e:	db02      	blt.n	800d696 <__ieee754_sqrt+0xee>
 800d690:	d113      	bne.n	800d6ba <__ieee754_sqrt+0x112>
 800d692:	458e      	cmp	lr, r1
 800d694:	d811      	bhi.n	800d6ba <__ieee754_sqrt+0x112>
 800d696:	f1be 0f00 	cmp.w	lr, #0
 800d69a:	eb0e 000c 	add.w	r0, lr, ip
 800d69e:	da43      	bge.n	800d728 <__ieee754_sqrt+0x180>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	db41      	blt.n	800d728 <__ieee754_sqrt+0x180>
 800d6a4:	f102 0801 	add.w	r8, r2, #1
 800d6a8:	1a9b      	subs	r3, r3, r2
 800d6aa:	458e      	cmp	lr, r1
 800d6ac:	4464      	add	r4, ip
 800d6ae:	eba1 010e 	sub.w	r1, r1, lr
 800d6b2:	bf88      	it	hi
 800d6b4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d6b8:	4642      	mov	r2, r8
 800d6ba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d6be:	3f01      	subs	r7, #1
 800d6c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d6c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d6c8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d6cc:	d1dc      	bne.n	800d688 <__ieee754_sqrt+0xe0>
 800d6ce:	4319      	orrs	r1, r3
 800d6d0:	d01b      	beq.n	800d70a <__ieee754_sqrt+0x162>
 800d6d2:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800d75c <__ieee754_sqrt+0x1b4>
 800d6d6:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800d760 <__ieee754_sqrt+0x1b8>
 800d6da:	e9da 0100 	ldrd	r0, r1, [sl]
 800d6de:	e9db 2300 	ldrd	r2, r3, [fp]
 800d6e2:	e9da 8900 	ldrd	r8, r9, [sl]
 800d6e6:	f7f2 fdd7 	bl	8000298 <__aeabi_dsub>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	4640      	mov	r0, r8
 800d6f0:	4649      	mov	r1, r9
 800d6f2:	f7f3 fa05 	bl	8000b00 <__aeabi_dcmple>
 800d6f6:	b140      	cbz	r0, 800d70a <__ieee754_sqrt+0x162>
 800d6f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d6fc:	e9da 0100 	ldrd	r0, r1, [sl]
 800d700:	e9db 2300 	ldrd	r2, r3, [fp]
 800d704:	d112      	bne.n	800d72c <__ieee754_sqrt+0x184>
 800d706:	3601      	adds	r6, #1
 800d708:	463c      	mov	r4, r7
 800d70a:	1072      	asrs	r2, r6, #1
 800d70c:	07f1      	lsls	r1, r6, #31
 800d70e:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800d712:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d716:	bf48      	it	mi
 800d718:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d71c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d720:	4618      	mov	r0, r3
 800d722:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d726:	e753      	b.n	800d5d0 <__ieee754_sqrt+0x28>
 800d728:	4690      	mov	r8, r2
 800d72a:	e7bd      	b.n	800d6a8 <__ieee754_sqrt+0x100>
 800d72c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d730:	f7f2 fdb4 	bl	800029c <__adddf3>
 800d734:	4602      	mov	r2, r0
 800d736:	460b      	mov	r3, r1
 800d738:	4640      	mov	r0, r8
 800d73a:	4649      	mov	r1, r9
 800d73c:	f7f3 f9d6 	bl	8000aec <__aeabi_dcmplt>
 800d740:	b128      	cbz	r0, 800d74e <__ieee754_sqrt+0x1a6>
 800d742:	1ca0      	adds	r0, r4, #2
 800d744:	f104 0402 	add.w	r4, r4, #2
 800d748:	bf08      	it	eq
 800d74a:	3601      	addeq	r6, #1
 800d74c:	e7dd      	b.n	800d70a <__ieee754_sqrt+0x162>
 800d74e:	1c63      	adds	r3, r4, #1
 800d750:	f023 0401 	bic.w	r4, r3, #1
 800d754:	e7d9      	b.n	800d70a <__ieee754_sqrt+0x162>
 800d756:	bf00      	nop
 800d758:	7ff00000 	.word	0x7ff00000
 800d75c:	20000070 	.word	0x20000070
 800d760:	20000068 	.word	0x20000068
 800d764:	00000000 	.word	0x00000000

0800d768 <__ieee754_log>:
 800d768:	ec51 0b10 	vmov	r0, r1, d0
 800d76c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800d770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d774:	460d      	mov	r5, r1
 800d776:	b087      	sub	sp, #28
 800d778:	da26      	bge.n	800d7c8 <__ieee754_log+0x60>
 800d77a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d77e:	4602      	mov	r2, r0
 800d780:	4303      	orrs	r3, r0
 800d782:	d10a      	bne.n	800d79a <__ieee754_log+0x32>
 800d784:	2200      	movs	r2, #0
 800d786:	2300      	movs	r3, #0
 800d788:	2000      	movs	r0, #0
 800d78a:	49cb      	ldr	r1, [pc, #812]	@ (800dab8 <__ieee754_log+0x350>)
 800d78c:	f7f3 f866 	bl	800085c <__aeabi_ddiv>
 800d790:	ec41 0b10 	vmov	d0, r0, r1
 800d794:	b007      	add	sp, #28
 800d796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d79a:	2900      	cmp	r1, #0
 800d79c:	da05      	bge.n	800d7aa <__ieee754_log+0x42>
 800d79e:	460b      	mov	r3, r1
 800d7a0:	f7f2 fd7a 	bl	8000298 <__aeabi_dsub>
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	e7f0      	b.n	800d78c <__ieee754_log+0x24>
 800d7aa:	4bc4      	ldr	r3, [pc, #784]	@ (800dabc <__ieee754_log+0x354>)
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f7f2 ff2b 	bl	8000608 <__aeabi_dmul>
 800d7b2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800d7b6:	460d      	mov	r5, r1
 800d7b8:	4ac1      	ldr	r2, [pc, #772]	@ (800dac0 <__ieee754_log+0x358>)
 800d7ba:	4295      	cmp	r5, r2
 800d7bc:	dd06      	ble.n	800d7cc <__ieee754_log+0x64>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	f7f2 fd6b 	bl	800029c <__adddf3>
 800d7c6:	e7e3      	b.n	800d790 <__ieee754_log+0x28>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	e7f5      	b.n	800d7b8 <__ieee754_log+0x50>
 800d7cc:	152c      	asrs	r4, r5, #20
 800d7ce:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d7d2:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800d7d6:	441c      	add	r4, r3
 800d7d8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800d7dc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800d7e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d7e4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800d7e8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800d7ec:	4bb5      	ldr	r3, [pc, #724]	@ (800dac4 <__ieee754_log+0x35c>)
 800d7ee:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800d7f2:	ea42 0105 	orr.w	r1, r2, r5
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f7f2 fd4e 	bl	8000298 <__aeabi_dsub>
 800d7fc:	1cab      	adds	r3, r5, #2
 800d7fe:	4682      	mov	sl, r0
 800d800:	468b      	mov	fp, r1
 800d802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d806:	2200      	movs	r2, #0
 800d808:	2b02      	cmp	r3, #2
 800d80a:	dc53      	bgt.n	800d8b4 <__ieee754_log+0x14c>
 800d80c:	2300      	movs	r3, #0
 800d80e:	f7f3 f963 	bl	8000ad8 <__aeabi_dcmpeq>
 800d812:	b1d0      	cbz	r0, 800d84a <__ieee754_log+0xe2>
 800d814:	2c00      	cmp	r4, #0
 800d816:	f000 8120 	beq.w	800da5a <__ieee754_log+0x2f2>
 800d81a:	4620      	mov	r0, r4
 800d81c:	f7f2 fe8a 	bl	8000534 <__aeabi_i2d>
 800d820:	4606      	mov	r6, r0
 800d822:	460f      	mov	r7, r1
 800d824:	a38e      	add	r3, pc, #568	@ (adr r3, 800da60 <__ieee754_log+0x2f8>)
 800d826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82a:	f7f2 feed 	bl	8000608 <__aeabi_dmul>
 800d82e:	4604      	mov	r4, r0
 800d830:	460d      	mov	r5, r1
 800d832:	4630      	mov	r0, r6
 800d834:	4639      	mov	r1, r7
 800d836:	a38c      	add	r3, pc, #560	@ (adr r3, 800da68 <__ieee754_log+0x300>)
 800d838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83c:	f7f2 fee4 	bl	8000608 <__aeabi_dmul>
 800d840:	4602      	mov	r2, r0
 800d842:	460b      	mov	r3, r1
 800d844:	4620      	mov	r0, r4
 800d846:	4629      	mov	r1, r5
 800d848:	e7bb      	b.n	800d7c2 <__ieee754_log+0x5a>
 800d84a:	a389      	add	r3, pc, #548	@ (adr r3, 800da70 <__ieee754_log+0x308>)
 800d84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d850:	4650      	mov	r0, sl
 800d852:	4659      	mov	r1, fp
 800d854:	f7f2 fed8 	bl	8000608 <__aeabi_dmul>
 800d858:	4602      	mov	r2, r0
 800d85a:	460b      	mov	r3, r1
 800d85c:	2000      	movs	r0, #0
 800d85e:	499a      	ldr	r1, [pc, #616]	@ (800dac8 <__ieee754_log+0x360>)
 800d860:	f7f2 fd1a 	bl	8000298 <__aeabi_dsub>
 800d864:	4606      	mov	r6, r0
 800d866:	460f      	mov	r7, r1
 800d868:	4652      	mov	r2, sl
 800d86a:	465b      	mov	r3, fp
 800d86c:	4650      	mov	r0, sl
 800d86e:	4659      	mov	r1, fp
 800d870:	f7f2 feca 	bl	8000608 <__aeabi_dmul>
 800d874:	4602      	mov	r2, r0
 800d876:	460b      	mov	r3, r1
 800d878:	4630      	mov	r0, r6
 800d87a:	4639      	mov	r1, r7
 800d87c:	f7f2 fec4 	bl	8000608 <__aeabi_dmul>
 800d880:	4606      	mov	r6, r0
 800d882:	460f      	mov	r7, r1
 800d884:	b914      	cbnz	r4, 800d88c <__ieee754_log+0x124>
 800d886:	4632      	mov	r2, r6
 800d888:	463b      	mov	r3, r7
 800d88a:	e0a0      	b.n	800d9ce <__ieee754_log+0x266>
 800d88c:	4620      	mov	r0, r4
 800d88e:	f7f2 fe51 	bl	8000534 <__aeabi_i2d>
 800d892:	4680      	mov	r8, r0
 800d894:	4689      	mov	r9, r1
 800d896:	a372      	add	r3, pc, #456	@ (adr r3, 800da60 <__ieee754_log+0x2f8>)
 800d898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89c:	f7f2 feb4 	bl	8000608 <__aeabi_dmul>
 800d8a0:	4604      	mov	r4, r0
 800d8a2:	460d      	mov	r5, r1
 800d8a4:	4640      	mov	r0, r8
 800d8a6:	4649      	mov	r1, r9
 800d8a8:	a36f      	add	r3, pc, #444	@ (adr r3, 800da68 <__ieee754_log+0x300>)
 800d8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ae:	f7f2 feab 	bl	8000608 <__aeabi_dmul>
 800d8b2:	e0a5      	b.n	800da00 <__ieee754_log+0x298>
 800d8b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d8b8:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800d8bc:	f7f2 fcee 	bl	800029c <__adddf3>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	4650      	mov	r0, sl
 800d8c6:	4659      	mov	r1, fp
 800d8c8:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800d8cc:	f7f2 ffc6 	bl	800085c <__aeabi_ddiv>
 800d8d0:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800d8d4:	3551      	adds	r5, #81	@ 0x51
 800d8d6:	e9cd 0100 	strd	r0, r1, [sp]
 800d8da:	4620      	mov	r0, r4
 800d8dc:	4335      	orrs	r5, r6
 800d8de:	f7f2 fe29 	bl	8000534 <__aeabi_i2d>
 800d8e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	f7f2 fe8b 	bl	8000608 <__aeabi_dmul>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d8fa:	f7f2 fe85 	bl	8000608 <__aeabi_dmul>
 800d8fe:	4680      	mov	r8, r0
 800d900:	4689      	mov	r9, r1
 800d902:	a35d      	add	r3, pc, #372	@ (adr r3, 800da78 <__ieee754_log+0x310>)
 800d904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d908:	f7f2 fe7e 	bl	8000608 <__aeabi_dmul>
 800d90c:	a35c      	add	r3, pc, #368	@ (adr r3, 800da80 <__ieee754_log+0x318>)
 800d90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d912:	f7f2 fcc3 	bl	800029c <__adddf3>
 800d916:	4642      	mov	r2, r8
 800d918:	464b      	mov	r3, r9
 800d91a:	f7f2 fe75 	bl	8000608 <__aeabi_dmul>
 800d91e:	a35a      	add	r3, pc, #360	@ (adr r3, 800da88 <__ieee754_log+0x320>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	f7f2 fcba 	bl	800029c <__adddf3>
 800d928:	4642      	mov	r2, r8
 800d92a:	464b      	mov	r3, r9
 800d92c:	f7f2 fe6c 	bl	8000608 <__aeabi_dmul>
 800d930:	a357      	add	r3, pc, #348	@ (adr r3, 800da90 <__ieee754_log+0x328>)
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	f7f2 fcb1 	bl	800029c <__adddf3>
 800d93a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d93e:	f7f2 fe63 	bl	8000608 <__aeabi_dmul>
 800d942:	a355      	add	r3, pc, #340	@ (adr r3, 800da98 <__ieee754_log+0x330>)
 800d944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d94c:	4640      	mov	r0, r8
 800d94e:	4649      	mov	r1, r9
 800d950:	f7f2 fe5a 	bl	8000608 <__aeabi_dmul>
 800d954:	a352      	add	r3, pc, #328	@ (adr r3, 800daa0 <__ieee754_log+0x338>)
 800d956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95a:	f7f2 fc9f 	bl	800029c <__adddf3>
 800d95e:	4642      	mov	r2, r8
 800d960:	464b      	mov	r3, r9
 800d962:	f7f2 fe51 	bl	8000608 <__aeabi_dmul>
 800d966:	a350      	add	r3, pc, #320	@ (adr r3, 800daa8 <__ieee754_log+0x340>)
 800d968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96c:	f7f2 fc96 	bl	800029c <__adddf3>
 800d970:	4642      	mov	r2, r8
 800d972:	464b      	mov	r3, r9
 800d974:	f7f2 fe48 	bl	8000608 <__aeabi_dmul>
 800d978:	4602      	mov	r2, r0
 800d97a:	460b      	mov	r3, r1
 800d97c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d980:	f7f2 fc8c 	bl	800029c <__adddf3>
 800d984:	2d00      	cmp	r5, #0
 800d986:	4680      	mov	r8, r0
 800d988:	4689      	mov	r9, r1
 800d98a:	dd48      	ble.n	800da1e <__ieee754_log+0x2b6>
 800d98c:	2200      	movs	r2, #0
 800d98e:	4b4e      	ldr	r3, [pc, #312]	@ (800dac8 <__ieee754_log+0x360>)
 800d990:	4650      	mov	r0, sl
 800d992:	4659      	mov	r1, fp
 800d994:	f7f2 fe38 	bl	8000608 <__aeabi_dmul>
 800d998:	4652      	mov	r2, sl
 800d99a:	465b      	mov	r3, fp
 800d99c:	f7f2 fe34 	bl	8000608 <__aeabi_dmul>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	4606      	mov	r6, r0
 800d9a6:	460f      	mov	r7, r1
 800d9a8:	4640      	mov	r0, r8
 800d9aa:	4649      	mov	r1, r9
 800d9ac:	f7f2 fc76 	bl	800029c <__adddf3>
 800d9b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9b4:	f7f2 fe28 	bl	8000608 <__aeabi_dmul>
 800d9b8:	4680      	mov	r8, r0
 800d9ba:	4689      	mov	r9, r1
 800d9bc:	b964      	cbnz	r4, 800d9d8 <__ieee754_log+0x270>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	4639      	mov	r1, r7
 800d9c6:	f7f2 fc67 	bl	8000298 <__aeabi_dsub>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	4650      	mov	r0, sl
 800d9d0:	4659      	mov	r1, fp
 800d9d2:	f7f2 fc61 	bl	8000298 <__aeabi_dsub>
 800d9d6:	e6db      	b.n	800d790 <__ieee754_log+0x28>
 800d9d8:	a321      	add	r3, pc, #132	@ (adr r3, 800da60 <__ieee754_log+0x2f8>)
 800d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9e2:	f7f2 fe11 	bl	8000608 <__aeabi_dmul>
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	460d      	mov	r5, r1
 800d9ea:	a31f      	add	r3, pc, #124	@ (adr r3, 800da68 <__ieee754_log+0x300>)
 800d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9f4:	f7f2 fe08 	bl	8000608 <__aeabi_dmul>
 800d9f8:	4642      	mov	r2, r8
 800d9fa:	464b      	mov	r3, r9
 800d9fc:	f7f2 fc4e 	bl	800029c <__adddf3>
 800da00:	4602      	mov	r2, r0
 800da02:	460b      	mov	r3, r1
 800da04:	4630      	mov	r0, r6
 800da06:	4639      	mov	r1, r7
 800da08:	f7f2 fc46 	bl	8000298 <__aeabi_dsub>
 800da0c:	4652      	mov	r2, sl
 800da0e:	465b      	mov	r3, fp
 800da10:	f7f2 fc42 	bl	8000298 <__aeabi_dsub>
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	4620      	mov	r0, r4
 800da1a:	4629      	mov	r1, r5
 800da1c:	e7d9      	b.n	800d9d2 <__ieee754_log+0x26a>
 800da1e:	4602      	mov	r2, r0
 800da20:	460b      	mov	r3, r1
 800da22:	4650      	mov	r0, sl
 800da24:	4659      	mov	r1, fp
 800da26:	f7f2 fc37 	bl	8000298 <__aeabi_dsub>
 800da2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da2e:	f7f2 fdeb 	bl	8000608 <__aeabi_dmul>
 800da32:	4606      	mov	r6, r0
 800da34:	460f      	mov	r7, r1
 800da36:	2c00      	cmp	r4, #0
 800da38:	f43f af25 	beq.w	800d886 <__ieee754_log+0x11e>
 800da3c:	a308      	add	r3, pc, #32	@ (adr r3, 800da60 <__ieee754_log+0x2f8>)
 800da3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da46:	f7f2 fddf 	bl	8000608 <__aeabi_dmul>
 800da4a:	4604      	mov	r4, r0
 800da4c:	460d      	mov	r5, r1
 800da4e:	a306      	add	r3, pc, #24	@ (adr r3, 800da68 <__ieee754_log+0x300>)
 800da50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da58:	e729      	b.n	800d8ae <__ieee754_log+0x146>
 800da5a:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 800dab0 <__ieee754_log+0x348>
 800da5e:	e699      	b.n	800d794 <__ieee754_log+0x2c>
 800da60:	fee00000 	.word	0xfee00000
 800da64:	3fe62e42 	.word	0x3fe62e42
 800da68:	35793c76 	.word	0x35793c76
 800da6c:	3dea39ef 	.word	0x3dea39ef
 800da70:	55555555 	.word	0x55555555
 800da74:	3fd55555 	.word	0x3fd55555
 800da78:	df3e5244 	.word	0xdf3e5244
 800da7c:	3fc2f112 	.word	0x3fc2f112
 800da80:	96cb03de 	.word	0x96cb03de
 800da84:	3fc74664 	.word	0x3fc74664
 800da88:	94229359 	.word	0x94229359
 800da8c:	3fd24924 	.word	0x3fd24924
 800da90:	55555593 	.word	0x55555593
 800da94:	3fe55555 	.word	0x3fe55555
 800da98:	d078c69f 	.word	0xd078c69f
 800da9c:	3fc39a09 	.word	0x3fc39a09
 800daa0:	1d8e78af 	.word	0x1d8e78af
 800daa4:	3fcc71c5 	.word	0x3fcc71c5
 800daa8:	9997fa04 	.word	0x9997fa04
 800daac:	3fd99999 	.word	0x3fd99999
	...
 800dab8:	c3500000 	.word	0xc3500000
 800dabc:	43500000 	.word	0x43500000
 800dac0:	7fefffff 	.word	0x7fefffff
 800dac4:	3ff00000 	.word	0x3ff00000
 800dac8:	3fe00000 	.word	0x3fe00000
 800dacc:	00000000 	.word	0x00000000

0800dad0 <__ieee754_log10>:
 800dad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dad4:	ec55 4b10 	vmov	r4, r5, d0
 800dad8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800dadc:	462b      	mov	r3, r5
 800dade:	ed2d 8b02 	vpush	{d8}
 800dae2:	da2e      	bge.n	800db42 <__ieee754_log10+0x72>
 800dae4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800dae8:	4322      	orrs	r2, r4
 800daea:	d10b      	bne.n	800db04 <__ieee754_log10+0x34>
 800daec:	2200      	movs	r2, #0
 800daee:	2300      	movs	r3, #0
 800daf0:	2000      	movs	r0, #0
 800daf2:	4939      	ldr	r1, [pc, #228]	@ (800dbd8 <__ieee754_log10+0x108>)
 800daf4:	f7f2 feb2 	bl	800085c <__aeabi_ddiv>
 800daf8:	ecbd 8b02 	vpop	{d8}
 800dafc:	ec41 0b10 	vmov	d0, r0, r1
 800db00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db04:	2d00      	cmp	r5, #0
 800db06:	da07      	bge.n	800db18 <__ieee754_log10+0x48>
 800db08:	4622      	mov	r2, r4
 800db0a:	4620      	mov	r0, r4
 800db0c:	4629      	mov	r1, r5
 800db0e:	f7f2 fbc3 	bl	8000298 <__aeabi_dsub>
 800db12:	2200      	movs	r2, #0
 800db14:	2300      	movs	r3, #0
 800db16:	e7ed      	b.n	800daf4 <__ieee754_log10+0x24>
 800db18:	2200      	movs	r2, #0
 800db1a:	4b30      	ldr	r3, [pc, #192]	@ (800dbdc <__ieee754_log10+0x10c>)
 800db1c:	4620      	mov	r0, r4
 800db1e:	4629      	mov	r1, r5
 800db20:	f7f2 fd72 	bl	8000608 <__aeabi_dmul>
 800db24:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800db28:	4604      	mov	r4, r0
 800db2a:	460d      	mov	r5, r1
 800db2c:	460b      	mov	r3, r1
 800db2e:	492c      	ldr	r1, [pc, #176]	@ (800dbe0 <__ieee754_log10+0x110>)
 800db30:	428b      	cmp	r3, r1
 800db32:	dd08      	ble.n	800db46 <__ieee754_log10+0x76>
 800db34:	4622      	mov	r2, r4
 800db36:	462b      	mov	r3, r5
 800db38:	4620      	mov	r0, r4
 800db3a:	4629      	mov	r1, r5
 800db3c:	f7f2 fbae 	bl	800029c <__adddf3>
 800db40:	e7da      	b.n	800daf8 <__ieee754_log10+0x28>
 800db42:	2200      	movs	r2, #0
 800db44:	e7f3      	b.n	800db2e <__ieee754_log10+0x5e>
 800db46:	1518      	asrs	r0, r3, #20
 800db48:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800db4c:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800db50:	4410      	add	r0, r2
 800db52:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800db56:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800db5a:	f7f2 fceb 	bl	8000534 <__aeabi_i2d>
 800db5e:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 800db62:	4606      	mov	r6, r0
 800db64:	460f      	mov	r7, r1
 800db66:	3303      	adds	r3, #3
 800db68:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800db6c:	a314      	add	r3, pc, #80	@ (adr r3, 800dbc0 <__ieee754_log10+0xf0>)
 800db6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db72:	ec45 4b18 	vmov	d8, r4, r5
 800db76:	f7f2 fd47 	bl	8000608 <__aeabi_dmul>
 800db7a:	eeb0 0a48 	vmov.f32	s0, s16
 800db7e:	eef0 0a68 	vmov.f32	s1, s17
 800db82:	4604      	mov	r4, r0
 800db84:	460d      	mov	r5, r1
 800db86:	f7ff fdef 	bl	800d768 <__ieee754_log>
 800db8a:	a30f      	add	r3, pc, #60	@ (adr r3, 800dbc8 <__ieee754_log10+0xf8>)
 800db8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db90:	ec51 0b10 	vmov	r0, r1, d0
 800db94:	f7f2 fd38 	bl	8000608 <__aeabi_dmul>
 800db98:	4622      	mov	r2, r4
 800db9a:	462b      	mov	r3, r5
 800db9c:	f7f2 fb7e 	bl	800029c <__adddf3>
 800dba0:	4604      	mov	r4, r0
 800dba2:	460d      	mov	r5, r1
 800dba4:	4630      	mov	r0, r6
 800dba6:	4639      	mov	r1, r7
 800dba8:	a309      	add	r3, pc, #36	@ (adr r3, 800dbd0 <__ieee754_log10+0x100>)
 800dbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbae:	f7f2 fd2b 	bl	8000608 <__aeabi_dmul>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	4629      	mov	r1, r5
 800dbba:	e7bf      	b.n	800db3c <__ieee754_log10+0x6c>
 800dbbc:	f3af 8000 	nop.w
 800dbc0:	11f12b36 	.word	0x11f12b36
 800dbc4:	3d59fef3 	.word	0x3d59fef3
 800dbc8:	1526e50e 	.word	0x1526e50e
 800dbcc:	3fdbcb7b 	.word	0x3fdbcb7b
 800dbd0:	509f6000 	.word	0x509f6000
 800dbd4:	3fd34413 	.word	0x3fd34413
 800dbd8:	c3500000 	.word	0xc3500000
 800dbdc:	43500000 	.word	0x43500000
 800dbe0:	7fefffff 	.word	0x7fefffff
 800dbe4:	00000000 	.word	0x00000000

0800dbe8 <__ieee754_pow>:
 800dbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbec:	b091      	sub	sp, #68	@ 0x44
 800dbee:	ed8d 1b00 	vstr	d1, [sp]
 800dbf2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800dbf6:	ec57 6b10 	vmov	r6, r7, d0
 800dbfa:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800dbfe:	ea5a 0001 	orrs.w	r0, sl, r1
 800dc02:	d113      	bne.n	800dc2c <__ieee754_pow+0x44>
 800dc04:	19b3      	adds	r3, r6, r6
 800dc06:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800dc0a:	4152      	adcs	r2, r2
 800dc0c:	4298      	cmp	r0, r3
 800dc0e:	4b96      	ldr	r3, [pc, #600]	@ (800de68 <__ieee754_pow+0x280>)
 800dc10:	4193      	sbcs	r3, r2
 800dc12:	f080 84e7 	bcs.w	800e5e4 <__ieee754_pow+0x9fc>
 800dc16:	4630      	mov	r0, r6
 800dc18:	4639      	mov	r1, r7
 800dc1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc1e:	f7f2 fb3d 	bl	800029c <__adddf3>
 800dc22:	ec41 0b10 	vmov	d0, r0, r1
 800dc26:	b011      	add	sp, #68	@ 0x44
 800dc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800dc30:	4a8e      	ldr	r2, [pc, #568]	@ (800de6c <__ieee754_pow+0x284>)
 800dc32:	463d      	mov	r5, r7
 800dc34:	4633      	mov	r3, r6
 800dc36:	4590      	cmp	r8, r2
 800dc38:	d806      	bhi.n	800dc48 <__ieee754_pow+0x60>
 800dc3a:	d101      	bne.n	800dc40 <__ieee754_pow+0x58>
 800dc3c:	2e00      	cmp	r6, #0
 800dc3e:	d1ea      	bne.n	800dc16 <__ieee754_pow+0x2e>
 800dc40:	4592      	cmp	sl, r2
 800dc42:	d801      	bhi.n	800dc48 <__ieee754_pow+0x60>
 800dc44:	d10e      	bne.n	800dc64 <__ieee754_pow+0x7c>
 800dc46:	b169      	cbz	r1, 800dc64 <__ieee754_pow+0x7c>
 800dc48:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800dc4c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800dc50:	431d      	orrs	r5, r3
 800dc52:	d1e0      	bne.n	800dc16 <__ieee754_pow+0x2e>
 800dc54:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dc58:	18db      	adds	r3, r3, r3
 800dc5a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800dc5e:	4152      	adcs	r2, r2
 800dc60:	429d      	cmp	r5, r3
 800dc62:	e7d4      	b.n	800dc0e <__ieee754_pow+0x26>
 800dc64:	2d00      	cmp	r5, #0
 800dc66:	46c3      	mov	fp, r8
 800dc68:	da3a      	bge.n	800dce0 <__ieee754_pow+0xf8>
 800dc6a:	4a81      	ldr	r2, [pc, #516]	@ (800de70 <__ieee754_pow+0x288>)
 800dc6c:	4592      	cmp	sl, r2
 800dc6e:	d84d      	bhi.n	800dd0c <__ieee754_pow+0x124>
 800dc70:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800dc74:	4592      	cmp	sl, r2
 800dc76:	f240 84c4 	bls.w	800e602 <__ieee754_pow+0xa1a>
 800dc7a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800dc7e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800dc82:	2a14      	cmp	r2, #20
 800dc84:	dd0f      	ble.n	800dca6 <__ieee754_pow+0xbe>
 800dc86:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800dc8a:	fa21 f402 	lsr.w	r4, r1, r2
 800dc8e:	fa04 f202 	lsl.w	r2, r4, r2
 800dc92:	428a      	cmp	r2, r1
 800dc94:	f040 84b5 	bne.w	800e602 <__ieee754_pow+0xa1a>
 800dc98:	f004 0401 	and.w	r4, r4, #1
 800dc9c:	f1c4 0402 	rsb	r4, r4, #2
 800dca0:	2900      	cmp	r1, #0
 800dca2:	d158      	bne.n	800dd56 <__ieee754_pow+0x16e>
 800dca4:	e00e      	b.n	800dcc4 <__ieee754_pow+0xdc>
 800dca6:	2900      	cmp	r1, #0
 800dca8:	d154      	bne.n	800dd54 <__ieee754_pow+0x16c>
 800dcaa:	f1c2 0214 	rsb	r2, r2, #20
 800dcae:	fa4a f402 	asr.w	r4, sl, r2
 800dcb2:	fa04 f202 	lsl.w	r2, r4, r2
 800dcb6:	4552      	cmp	r2, sl
 800dcb8:	f040 84a0 	bne.w	800e5fc <__ieee754_pow+0xa14>
 800dcbc:	f004 0401 	and.w	r4, r4, #1
 800dcc0:	f1c4 0402 	rsb	r4, r4, #2
 800dcc4:	4a6b      	ldr	r2, [pc, #428]	@ (800de74 <__ieee754_pow+0x28c>)
 800dcc6:	4592      	cmp	sl, r2
 800dcc8:	d12e      	bne.n	800dd28 <__ieee754_pow+0x140>
 800dcca:	f1b9 0f00 	cmp.w	r9, #0
 800dcce:	f280 8491 	bge.w	800e5f4 <__ieee754_pow+0xa0c>
 800dcd2:	4632      	mov	r2, r6
 800dcd4:	463b      	mov	r3, r7
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	4966      	ldr	r1, [pc, #408]	@ (800de74 <__ieee754_pow+0x28c>)
 800dcda:	f7f2 fdbf 	bl	800085c <__aeabi_ddiv>
 800dcde:	e7a0      	b.n	800dc22 <__ieee754_pow+0x3a>
 800dce0:	2400      	movs	r4, #0
 800dce2:	bbc1      	cbnz	r1, 800dd56 <__ieee754_pow+0x16e>
 800dce4:	4a61      	ldr	r2, [pc, #388]	@ (800de6c <__ieee754_pow+0x284>)
 800dce6:	4592      	cmp	sl, r2
 800dce8:	d1ec      	bne.n	800dcc4 <__ieee754_pow+0xdc>
 800dcea:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800dcee:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800dcf2:	431a      	orrs	r2, r3
 800dcf4:	f000 8476 	beq.w	800e5e4 <__ieee754_pow+0x9fc>
 800dcf8:	4b5f      	ldr	r3, [pc, #380]	@ (800de78 <__ieee754_pow+0x290>)
 800dcfa:	4598      	cmp	r8, r3
 800dcfc:	d908      	bls.n	800dd10 <__ieee754_pow+0x128>
 800dcfe:	f1b9 0f00 	cmp.w	r9, #0
 800dd02:	f2c0 8473 	blt.w	800e5ec <__ieee754_pow+0xa04>
 800dd06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd0a:	e78a      	b.n	800dc22 <__ieee754_pow+0x3a>
 800dd0c:	2402      	movs	r4, #2
 800dd0e:	e7e8      	b.n	800dce2 <__ieee754_pow+0xfa>
 800dd10:	f1b9 0f00 	cmp.w	r9, #0
 800dd14:	f04f 0000 	mov.w	r0, #0
 800dd18:	f04f 0100 	mov.w	r1, #0
 800dd1c:	da81      	bge.n	800dc22 <__ieee754_pow+0x3a>
 800dd1e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dd22:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800dd26:	e77c      	b.n	800dc22 <__ieee754_pow+0x3a>
 800dd28:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800dd2c:	d106      	bne.n	800dd3c <__ieee754_pow+0x154>
 800dd2e:	4632      	mov	r2, r6
 800dd30:	463b      	mov	r3, r7
 800dd32:	4630      	mov	r0, r6
 800dd34:	4639      	mov	r1, r7
 800dd36:	f7f2 fc67 	bl	8000608 <__aeabi_dmul>
 800dd3a:	e772      	b.n	800dc22 <__ieee754_pow+0x3a>
 800dd3c:	4a4f      	ldr	r2, [pc, #316]	@ (800de7c <__ieee754_pow+0x294>)
 800dd3e:	4591      	cmp	r9, r2
 800dd40:	d109      	bne.n	800dd56 <__ieee754_pow+0x16e>
 800dd42:	2d00      	cmp	r5, #0
 800dd44:	db07      	blt.n	800dd56 <__ieee754_pow+0x16e>
 800dd46:	ec47 6b10 	vmov	d0, r6, r7
 800dd4a:	b011      	add	sp, #68	@ 0x44
 800dd4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd50:	f7ff bc2a 	b.w	800d5a8 <__ieee754_sqrt>
 800dd54:	2400      	movs	r4, #0
 800dd56:	9302      	str	r3, [sp, #8]
 800dd58:	ec47 6b10 	vmov	d0, r6, r7
 800dd5c:	f000 fc84 	bl	800e668 <fabs>
 800dd60:	9b02      	ldr	r3, [sp, #8]
 800dd62:	ec51 0b10 	vmov	r0, r1, d0
 800dd66:	bb53      	cbnz	r3, 800ddbe <__ieee754_pow+0x1d6>
 800dd68:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800dd6c:	4b41      	ldr	r3, [pc, #260]	@ (800de74 <__ieee754_pow+0x28c>)
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d002      	beq.n	800dd78 <__ieee754_pow+0x190>
 800dd72:	f1b8 0f00 	cmp.w	r8, #0
 800dd76:	d122      	bne.n	800ddbe <__ieee754_pow+0x1d6>
 800dd78:	f1b9 0f00 	cmp.w	r9, #0
 800dd7c:	da05      	bge.n	800dd8a <__ieee754_pow+0x1a2>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	460b      	mov	r3, r1
 800dd82:	2000      	movs	r0, #0
 800dd84:	493b      	ldr	r1, [pc, #236]	@ (800de74 <__ieee754_pow+0x28c>)
 800dd86:	f7f2 fd69 	bl	800085c <__aeabi_ddiv>
 800dd8a:	2d00      	cmp	r5, #0
 800dd8c:	f6bf af49 	bge.w	800dc22 <__ieee754_pow+0x3a>
 800dd90:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800dd94:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800dd98:	ea58 0804 	orrs.w	r8, r8, r4
 800dd9c:	d108      	bne.n	800ddb0 <__ieee754_pow+0x1c8>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	460b      	mov	r3, r1
 800dda2:	4610      	mov	r0, r2
 800dda4:	4619      	mov	r1, r3
 800dda6:	f7f2 fa77 	bl	8000298 <__aeabi_dsub>
 800ddaa:	4602      	mov	r2, r0
 800ddac:	460b      	mov	r3, r1
 800ddae:	e794      	b.n	800dcda <__ieee754_pow+0xf2>
 800ddb0:	2c01      	cmp	r4, #1
 800ddb2:	f47f af36 	bne.w	800dc22 <__ieee754_pow+0x3a>
 800ddb6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ddba:	4619      	mov	r1, r3
 800ddbc:	e731      	b.n	800dc22 <__ieee754_pow+0x3a>
 800ddbe:	0feb      	lsrs	r3, r5, #31
 800ddc0:	3b01      	subs	r3, #1
 800ddc2:	ea53 0204 	orrs.w	r2, r3, r4
 800ddc6:	d102      	bne.n	800ddce <__ieee754_pow+0x1e6>
 800ddc8:	4632      	mov	r2, r6
 800ddca:	463b      	mov	r3, r7
 800ddcc:	e7e9      	b.n	800dda2 <__ieee754_pow+0x1ba>
 800ddce:	3c01      	subs	r4, #1
 800ddd0:	431c      	orrs	r4, r3
 800ddd2:	d016      	beq.n	800de02 <__ieee754_pow+0x21a>
 800ddd4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800de58 <__ieee754_pow+0x270>
 800ddd8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800dddc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dde0:	f240 810e 	bls.w	800e000 <__ieee754_pow+0x418>
 800dde4:	4b26      	ldr	r3, [pc, #152]	@ (800de80 <__ieee754_pow+0x298>)
 800dde6:	459a      	cmp	sl, r3
 800dde8:	4b23      	ldr	r3, [pc, #140]	@ (800de78 <__ieee754_pow+0x290>)
 800ddea:	d916      	bls.n	800de1a <__ieee754_pow+0x232>
 800ddec:	4598      	cmp	r8, r3
 800ddee:	d80b      	bhi.n	800de08 <__ieee754_pow+0x220>
 800ddf0:	f1b9 0f00 	cmp.w	r9, #0
 800ddf4:	da0b      	bge.n	800de0e <__ieee754_pow+0x226>
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	b011      	add	sp, #68	@ 0x44
 800ddfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddfe:	f000 bcef 	b.w	800e7e0 <__math_oflow>
 800de02:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 800de60 <__ieee754_pow+0x278>
 800de06:	e7e7      	b.n	800ddd8 <__ieee754_pow+0x1f0>
 800de08:	f1b9 0f00 	cmp.w	r9, #0
 800de0c:	dcf3      	bgt.n	800ddf6 <__ieee754_pow+0x20e>
 800de0e:	2000      	movs	r0, #0
 800de10:	b011      	add	sp, #68	@ 0x44
 800de12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de16:	f000 bcdb 	b.w	800e7d0 <__math_uflow>
 800de1a:	4598      	cmp	r8, r3
 800de1c:	d20c      	bcs.n	800de38 <__ieee754_pow+0x250>
 800de1e:	2200      	movs	r2, #0
 800de20:	2300      	movs	r3, #0
 800de22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de26:	f7f2 fe61 	bl	8000aec <__aeabi_dcmplt>
 800de2a:	3800      	subs	r0, #0
 800de2c:	bf18      	it	ne
 800de2e:	2001      	movne	r0, #1
 800de30:	f1b9 0f00 	cmp.w	r9, #0
 800de34:	daec      	bge.n	800de10 <__ieee754_pow+0x228>
 800de36:	e7df      	b.n	800ddf8 <__ieee754_pow+0x210>
 800de38:	4b0e      	ldr	r3, [pc, #56]	@ (800de74 <__ieee754_pow+0x28c>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	4598      	cmp	r8, r3
 800de3e:	d921      	bls.n	800de84 <__ieee754_pow+0x29c>
 800de40:	2300      	movs	r3, #0
 800de42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de46:	f7f2 fe51 	bl	8000aec <__aeabi_dcmplt>
 800de4a:	3800      	subs	r0, #0
 800de4c:	bf18      	it	ne
 800de4e:	2001      	movne	r0, #1
 800de50:	f1b9 0f00 	cmp.w	r9, #0
 800de54:	dcd0      	bgt.n	800ddf8 <__ieee754_pow+0x210>
 800de56:	e7db      	b.n	800de10 <__ieee754_pow+0x228>
 800de58:	00000000 	.word	0x00000000
 800de5c:	3ff00000 	.word	0x3ff00000
 800de60:	00000000 	.word	0x00000000
 800de64:	bff00000 	.word	0xbff00000
 800de68:	fff00000 	.word	0xfff00000
 800de6c:	7ff00000 	.word	0x7ff00000
 800de70:	433fffff 	.word	0x433fffff
 800de74:	3ff00000 	.word	0x3ff00000
 800de78:	3fefffff 	.word	0x3fefffff
 800de7c:	3fe00000 	.word	0x3fe00000
 800de80:	43f00000 	.word	0x43f00000
 800de84:	4b5a      	ldr	r3, [pc, #360]	@ (800dff0 <__ieee754_pow+0x408>)
 800de86:	f7f2 fa07 	bl	8000298 <__aeabi_dsub>
 800de8a:	4604      	mov	r4, r0
 800de8c:	460d      	mov	r5, r1
 800de8e:	a350      	add	r3, pc, #320	@ (adr r3, 800dfd0 <__ieee754_pow+0x3e8>)
 800de90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de94:	f7f2 fbb8 	bl	8000608 <__aeabi_dmul>
 800de98:	4606      	mov	r6, r0
 800de9a:	460f      	mov	r7, r1
 800de9c:	4620      	mov	r0, r4
 800de9e:	4629      	mov	r1, r5
 800dea0:	a34d      	add	r3, pc, #308	@ (adr r3, 800dfd8 <__ieee754_pow+0x3f0>)
 800dea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea6:	f7f2 fbaf 	bl	8000608 <__aeabi_dmul>
 800deaa:	2200      	movs	r2, #0
 800deac:	4682      	mov	sl, r0
 800deae:	468b      	mov	fp, r1
 800deb0:	4b50      	ldr	r3, [pc, #320]	@ (800dff4 <__ieee754_pow+0x40c>)
 800deb2:	4620      	mov	r0, r4
 800deb4:	4629      	mov	r1, r5
 800deb6:	f7f2 fba7 	bl	8000608 <__aeabi_dmul>
 800deba:	4602      	mov	r2, r0
 800debc:	460b      	mov	r3, r1
 800debe:	a148      	add	r1, pc, #288	@ (adr r1, 800dfe0 <__ieee754_pow+0x3f8>)
 800dec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dec4:	f7f2 f9e8 	bl	8000298 <__aeabi_dsub>
 800dec8:	4622      	mov	r2, r4
 800deca:	462b      	mov	r3, r5
 800decc:	f7f2 fb9c 	bl	8000608 <__aeabi_dmul>
 800ded0:	4602      	mov	r2, r0
 800ded2:	460b      	mov	r3, r1
 800ded4:	2000      	movs	r0, #0
 800ded6:	4948      	ldr	r1, [pc, #288]	@ (800dff8 <__ieee754_pow+0x410>)
 800ded8:	f7f2 f9de 	bl	8000298 <__aeabi_dsub>
 800dedc:	4680      	mov	r8, r0
 800dede:	4689      	mov	r9, r1
 800dee0:	4622      	mov	r2, r4
 800dee2:	462b      	mov	r3, r5
 800dee4:	4620      	mov	r0, r4
 800dee6:	4629      	mov	r1, r5
 800dee8:	2400      	movs	r4, #0
 800deea:	f7f2 fb8d 	bl	8000608 <__aeabi_dmul>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	4640      	mov	r0, r8
 800def4:	4649      	mov	r1, r9
 800def6:	f7f2 fb87 	bl	8000608 <__aeabi_dmul>
 800defa:	a33b      	add	r3, pc, #236	@ (adr r3, 800dfe8 <__ieee754_pow+0x400>)
 800defc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df00:	f7f2 fb82 	bl	8000608 <__aeabi_dmul>
 800df04:	4602      	mov	r2, r0
 800df06:	460b      	mov	r3, r1
 800df08:	4650      	mov	r0, sl
 800df0a:	4659      	mov	r1, fp
 800df0c:	f7f2 f9c4 	bl	8000298 <__aeabi_dsub>
 800df10:	4602      	mov	r2, r0
 800df12:	460b      	mov	r3, r1
 800df14:	4680      	mov	r8, r0
 800df16:	4689      	mov	r9, r1
 800df18:	4630      	mov	r0, r6
 800df1a:	4639      	mov	r1, r7
 800df1c:	f7f2 f9be 	bl	800029c <__adddf3>
 800df20:	4632      	mov	r2, r6
 800df22:	463b      	mov	r3, r7
 800df24:	4620      	mov	r0, r4
 800df26:	460d      	mov	r5, r1
 800df28:	f7f2 f9b6 	bl	8000298 <__aeabi_dsub>
 800df2c:	4602      	mov	r2, r0
 800df2e:	460b      	mov	r3, r1
 800df30:	4640      	mov	r0, r8
 800df32:	4649      	mov	r1, r9
 800df34:	f7f2 f9b0 	bl	8000298 <__aeabi_dsub>
 800df38:	4606      	mov	r6, r0
 800df3a:	460f      	mov	r7, r1
 800df3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800df48:	2300      	movs	r3, #0
 800df4a:	9304      	str	r3, [sp, #16]
 800df4c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800df50:	4652      	mov	r2, sl
 800df52:	465b      	mov	r3, fp
 800df54:	f7f2 f9a0 	bl	8000298 <__aeabi_dsub>
 800df58:	4622      	mov	r2, r4
 800df5a:	462b      	mov	r3, r5
 800df5c:	f7f2 fb54 	bl	8000608 <__aeabi_dmul>
 800df60:	4680      	mov	r8, r0
 800df62:	4689      	mov	r9, r1
 800df64:	4630      	mov	r0, r6
 800df66:	4639      	mov	r1, r7
 800df68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df6c:	f7f2 fb4c 	bl	8000608 <__aeabi_dmul>
 800df70:	4602      	mov	r2, r0
 800df72:	460b      	mov	r3, r1
 800df74:	4640      	mov	r0, r8
 800df76:	4649      	mov	r1, r9
 800df78:	f7f2 f990 	bl	800029c <__adddf3>
 800df7c:	4606      	mov	r6, r0
 800df7e:	460f      	mov	r7, r1
 800df80:	4652      	mov	r2, sl
 800df82:	465b      	mov	r3, fp
 800df84:	4620      	mov	r0, r4
 800df86:	4629      	mov	r1, r5
 800df88:	f7f2 fb3e 	bl	8000608 <__aeabi_dmul>
 800df8c:	460b      	mov	r3, r1
 800df8e:	4602      	mov	r2, r0
 800df90:	4680      	mov	r8, r0
 800df92:	4689      	mov	r9, r1
 800df94:	4630      	mov	r0, r6
 800df96:	4639      	mov	r1, r7
 800df98:	f7f2 f980 	bl	800029c <__adddf3>
 800df9c:	4b17      	ldr	r3, [pc, #92]	@ (800dffc <__ieee754_pow+0x414>)
 800df9e:	4604      	mov	r4, r0
 800dfa0:	460d      	mov	r5, r1
 800dfa2:	4299      	cmp	r1, r3
 800dfa4:	468a      	mov	sl, r1
 800dfa6:	468b      	mov	fp, r1
 800dfa8:	f340 82f0 	ble.w	800e58c <__ieee754_pow+0x9a4>
 800dfac:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800dfb0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800dfb4:	4303      	orrs	r3, r0
 800dfb6:	f000 81e8 	beq.w	800e38a <__ieee754_pow+0x7a2>
 800dfba:	2200      	movs	r2, #0
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfc2:	f7f2 fd93 	bl	8000aec <__aeabi_dcmplt>
 800dfc6:	3800      	subs	r0, #0
 800dfc8:	bf18      	it	ne
 800dfca:	2001      	movne	r0, #1
 800dfcc:	e714      	b.n	800ddf8 <__ieee754_pow+0x210>
 800dfce:	bf00      	nop
 800dfd0:	60000000 	.word	0x60000000
 800dfd4:	3ff71547 	.word	0x3ff71547
 800dfd8:	f85ddf44 	.word	0xf85ddf44
 800dfdc:	3e54ae0b 	.word	0x3e54ae0b
 800dfe0:	55555555 	.word	0x55555555
 800dfe4:	3fd55555 	.word	0x3fd55555
 800dfe8:	652b82fe 	.word	0x652b82fe
 800dfec:	3ff71547 	.word	0x3ff71547
 800dff0:	3ff00000 	.word	0x3ff00000
 800dff4:	3fd00000 	.word	0x3fd00000
 800dff8:	3fe00000 	.word	0x3fe00000
 800dffc:	408fffff 	.word	0x408fffff
 800e000:	4bd5      	ldr	r3, [pc, #852]	@ (800e358 <__ieee754_pow+0x770>)
 800e002:	2200      	movs	r2, #0
 800e004:	402b      	ands	r3, r5
 800e006:	b92b      	cbnz	r3, 800e014 <__ieee754_pow+0x42c>
 800e008:	4bd4      	ldr	r3, [pc, #848]	@ (800e35c <__ieee754_pow+0x774>)
 800e00a:	f7f2 fafd 	bl	8000608 <__aeabi_dmul>
 800e00e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800e012:	468b      	mov	fp, r1
 800e014:	ea4f 532b 	mov.w	r3, fp, asr #20
 800e018:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800e01c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e020:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800e024:	4413      	add	r3, r2
 800e026:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e02a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e02c:	4bcc      	ldr	r3, [pc, #816]	@ (800e360 <__ieee754_pow+0x778>)
 800e02e:	459b      	cmp	fp, r3
 800e030:	dd08      	ble.n	800e044 <__ieee754_pow+0x45c>
 800e032:	4bcc      	ldr	r3, [pc, #816]	@ (800e364 <__ieee754_pow+0x77c>)
 800e034:	459b      	cmp	fp, r3
 800e036:	f340 81a5 	ble.w	800e384 <__ieee754_pow+0x79c>
 800e03a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e03c:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e040:	3301      	adds	r3, #1
 800e042:	930a      	str	r3, [sp, #40]	@ 0x28
 800e044:	f04f 0a00 	mov.w	sl, #0
 800e048:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e04c:	4629      	mov	r1, r5
 800e04e:	106d      	asrs	r5, r5, #1
 800e050:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e052:	4bc5      	ldr	r3, [pc, #788]	@ (800e368 <__ieee754_pow+0x780>)
 800e054:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e058:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e05c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e060:	ed93 7b00 	vldr	d7, [r3]
 800e064:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e068:	ec53 2b17 	vmov	r2, r3, d7
 800e06c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e070:	f7f2 f912 	bl	8000298 <__aeabi_dsub>
 800e074:	4606      	mov	r6, r0
 800e076:	460f      	mov	r7, r1
 800e078:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e07c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e080:	f7f2 f90c 	bl	800029c <__adddf3>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	2000      	movs	r0, #0
 800e08a:	49b8      	ldr	r1, [pc, #736]	@ (800e36c <__ieee754_pow+0x784>)
 800e08c:	f7f2 fbe6 	bl	800085c <__aeabi_ddiv>
 800e090:	4602      	mov	r2, r0
 800e092:	460b      	mov	r3, r1
 800e094:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e098:	4630      	mov	r0, r6
 800e09a:	4639      	mov	r1, r7
 800e09c:	f7f2 fab4 	bl	8000608 <__aeabi_dmul>
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e0a6:	4614      	mov	r4, r2
 800e0a8:	461d      	mov	r5, r3
 800e0aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0ae:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e0b2:	f04f 0b00 	mov.w	fp, #0
 800e0b6:	4661      	mov	r1, ip
 800e0b8:	46e1      	mov	r9, ip
 800e0ba:	4658      	mov	r0, fp
 800e0bc:	46d8      	mov	r8, fp
 800e0be:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e0c2:	f7f2 faa1 	bl	8000608 <__aeabi_dmul>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	4639      	mov	r1, r7
 800e0ce:	f7f2 f8e3 	bl	8000298 <__aeabi_dsub>
 800e0d2:	4606      	mov	r6, r0
 800e0d4:	460f      	mov	r7, r1
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	4629      	mov	r1, r5
 800e0da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e0de:	f7f2 f8db 	bl	8000298 <__aeabi_dsub>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e0ea:	f7f2 f8d5 	bl	8000298 <__aeabi_dsub>
 800e0ee:	465a      	mov	r2, fp
 800e0f0:	464b      	mov	r3, r9
 800e0f2:	f7f2 fa89 	bl	8000608 <__aeabi_dmul>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	4639      	mov	r1, r7
 800e0fe:	f7f2 f8cb 	bl	8000298 <__aeabi_dsub>
 800e102:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e106:	f7f2 fa7f 	bl	8000608 <__aeabi_dmul>
 800e10a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e10e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e112:	4610      	mov	r0, r2
 800e114:	4619      	mov	r1, r3
 800e116:	f7f2 fa77 	bl	8000608 <__aeabi_dmul>
 800e11a:	4604      	mov	r4, r0
 800e11c:	460d      	mov	r5, r1
 800e11e:	a37c      	add	r3, pc, #496	@ (adr r3, 800e310 <__ieee754_pow+0x728>)
 800e120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e124:	f7f2 fa70 	bl	8000608 <__aeabi_dmul>
 800e128:	a37b      	add	r3, pc, #492	@ (adr r3, 800e318 <__ieee754_pow+0x730>)
 800e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12e:	f7f2 f8b5 	bl	800029c <__adddf3>
 800e132:	4622      	mov	r2, r4
 800e134:	462b      	mov	r3, r5
 800e136:	f7f2 fa67 	bl	8000608 <__aeabi_dmul>
 800e13a:	a379      	add	r3, pc, #484	@ (adr r3, 800e320 <__ieee754_pow+0x738>)
 800e13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e140:	f7f2 f8ac 	bl	800029c <__adddf3>
 800e144:	4622      	mov	r2, r4
 800e146:	462b      	mov	r3, r5
 800e148:	f7f2 fa5e 	bl	8000608 <__aeabi_dmul>
 800e14c:	a376      	add	r3, pc, #472	@ (adr r3, 800e328 <__ieee754_pow+0x740>)
 800e14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e152:	f7f2 f8a3 	bl	800029c <__adddf3>
 800e156:	4622      	mov	r2, r4
 800e158:	462b      	mov	r3, r5
 800e15a:	f7f2 fa55 	bl	8000608 <__aeabi_dmul>
 800e15e:	a374      	add	r3, pc, #464	@ (adr r3, 800e330 <__ieee754_pow+0x748>)
 800e160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e164:	f7f2 f89a 	bl	800029c <__adddf3>
 800e168:	4622      	mov	r2, r4
 800e16a:	462b      	mov	r3, r5
 800e16c:	f7f2 fa4c 	bl	8000608 <__aeabi_dmul>
 800e170:	a371      	add	r3, pc, #452	@ (adr r3, 800e338 <__ieee754_pow+0x750>)
 800e172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e176:	f7f2 f891 	bl	800029c <__adddf3>
 800e17a:	4606      	mov	r6, r0
 800e17c:	460f      	mov	r7, r1
 800e17e:	4622      	mov	r2, r4
 800e180:	462b      	mov	r3, r5
 800e182:	4620      	mov	r0, r4
 800e184:	4629      	mov	r1, r5
 800e186:	f7f2 fa3f 	bl	8000608 <__aeabi_dmul>
 800e18a:	4602      	mov	r2, r0
 800e18c:	460b      	mov	r3, r1
 800e18e:	4630      	mov	r0, r6
 800e190:	4639      	mov	r1, r7
 800e192:	f7f2 fa39 	bl	8000608 <__aeabi_dmul>
 800e196:	465a      	mov	r2, fp
 800e198:	4604      	mov	r4, r0
 800e19a:	460d      	mov	r5, r1
 800e19c:	464b      	mov	r3, r9
 800e19e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1a2:	f7f2 f87b 	bl	800029c <__adddf3>
 800e1a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1aa:	f7f2 fa2d 	bl	8000608 <__aeabi_dmul>
 800e1ae:	4622      	mov	r2, r4
 800e1b0:	462b      	mov	r3, r5
 800e1b2:	f7f2 f873 	bl	800029c <__adddf3>
 800e1b6:	465a      	mov	r2, fp
 800e1b8:	464b      	mov	r3, r9
 800e1ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e1be:	4658      	mov	r0, fp
 800e1c0:	4649      	mov	r1, r9
 800e1c2:	f7f2 fa21 	bl	8000608 <__aeabi_dmul>
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	4b69      	ldr	r3, [pc, #420]	@ (800e370 <__ieee754_pow+0x788>)
 800e1ca:	4606      	mov	r6, r0
 800e1cc:	460f      	mov	r7, r1
 800e1ce:	f7f2 f865 	bl	800029c <__adddf3>
 800e1d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e1d6:	f7f2 f861 	bl	800029c <__adddf3>
 800e1da:	460d      	mov	r5, r1
 800e1dc:	460b      	mov	r3, r1
 800e1de:	4640      	mov	r0, r8
 800e1e0:	4649      	mov	r1, r9
 800e1e2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e1e6:	465c      	mov	r4, fp
 800e1e8:	465a      	mov	r2, fp
 800e1ea:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e1ee:	f7f2 fa0b 	bl	8000608 <__aeabi_dmul>
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	4680      	mov	r8, r0
 800e1f6:	4689      	mov	r9, r1
 800e1f8:	4b5d      	ldr	r3, [pc, #372]	@ (800e370 <__ieee754_pow+0x788>)
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	4629      	mov	r1, r5
 800e1fe:	f7f2 f84b 	bl	8000298 <__aeabi_dsub>
 800e202:	4632      	mov	r2, r6
 800e204:	463b      	mov	r3, r7
 800e206:	f7f2 f847 	bl	8000298 <__aeabi_dsub>
 800e20a:	4602      	mov	r2, r0
 800e20c:	460b      	mov	r3, r1
 800e20e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e212:	f7f2 f841 	bl	8000298 <__aeabi_dsub>
 800e216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e21a:	f7f2 f9f5 	bl	8000608 <__aeabi_dmul>
 800e21e:	4606      	mov	r6, r0
 800e220:	460f      	mov	r7, r1
 800e222:	4622      	mov	r2, r4
 800e224:	462b      	mov	r3, r5
 800e226:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e22a:	f7f2 f9ed 	bl	8000608 <__aeabi_dmul>
 800e22e:	4602      	mov	r2, r0
 800e230:	460b      	mov	r3, r1
 800e232:	4630      	mov	r0, r6
 800e234:	4639      	mov	r1, r7
 800e236:	f7f2 f831 	bl	800029c <__adddf3>
 800e23a:	4606      	mov	r6, r0
 800e23c:	460f      	mov	r7, r1
 800e23e:	4602      	mov	r2, r0
 800e240:	460b      	mov	r3, r1
 800e242:	4640      	mov	r0, r8
 800e244:	4649      	mov	r1, r9
 800e246:	f7f2 f829 	bl	800029c <__adddf3>
 800e24a:	460d      	mov	r5, r1
 800e24c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e250:	a33b      	add	r3, pc, #236	@ (adr r3, 800e340 <__ieee754_pow+0x758>)
 800e252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e256:	465c      	mov	r4, fp
 800e258:	4658      	mov	r0, fp
 800e25a:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e25e:	f7f2 f9d3 	bl	8000608 <__aeabi_dmul>
 800e262:	4642      	mov	r2, r8
 800e264:	464b      	mov	r3, r9
 800e266:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e26a:	4620      	mov	r0, r4
 800e26c:	4629      	mov	r1, r5
 800e26e:	f7f2 f813 	bl	8000298 <__aeabi_dsub>
 800e272:	4602      	mov	r2, r0
 800e274:	460b      	mov	r3, r1
 800e276:	4630      	mov	r0, r6
 800e278:	4639      	mov	r1, r7
 800e27a:	f7f2 f80d 	bl	8000298 <__aeabi_dsub>
 800e27e:	a332      	add	r3, pc, #200	@ (adr r3, 800e348 <__ieee754_pow+0x760>)
 800e280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e284:	f7f2 f9c0 	bl	8000608 <__aeabi_dmul>
 800e288:	4606      	mov	r6, r0
 800e28a:	460f      	mov	r7, r1
 800e28c:	4620      	mov	r0, r4
 800e28e:	4629      	mov	r1, r5
 800e290:	a32f      	add	r3, pc, #188	@ (adr r3, 800e350 <__ieee754_pow+0x768>)
 800e292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e296:	f7f2 f9b7 	bl	8000608 <__aeabi_dmul>
 800e29a:	4602      	mov	r2, r0
 800e29c:	460b      	mov	r3, r1
 800e29e:	4630      	mov	r0, r6
 800e2a0:	4639      	mov	r1, r7
 800e2a2:	f7f1 fffb 	bl	800029c <__adddf3>
 800e2a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e2a8:	4b32      	ldr	r3, [pc, #200]	@ (800e374 <__ieee754_pow+0x78c>)
 800e2aa:	4413      	add	r3, r2
 800e2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b0:	f7f1 fff4 	bl	800029c <__adddf3>
 800e2b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e2b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e2ba:	f7f2 f93b 	bl	8000534 <__aeabi_i2d>
 800e2be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e2c0:	4b2d      	ldr	r3, [pc, #180]	@ (800e378 <__ieee754_pow+0x790>)
 800e2c2:	4606      	mov	r6, r0
 800e2c4:	460f      	mov	r7, r1
 800e2c6:	4413      	add	r3, r2
 800e2c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e2d4:	f7f1 ffe2 	bl	800029c <__adddf3>
 800e2d8:	4642      	mov	r2, r8
 800e2da:	464b      	mov	r3, r9
 800e2dc:	f7f1 ffde 	bl	800029c <__adddf3>
 800e2e0:	4632      	mov	r2, r6
 800e2e2:	463b      	mov	r3, r7
 800e2e4:	f7f1 ffda 	bl	800029c <__adddf3>
 800e2e8:	4632      	mov	r2, r6
 800e2ea:	463b      	mov	r3, r7
 800e2ec:	460d      	mov	r5, r1
 800e2ee:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800e2f2:	4658      	mov	r0, fp
 800e2f4:	465c      	mov	r4, fp
 800e2f6:	f7f1 ffcf 	bl	8000298 <__aeabi_dsub>
 800e2fa:	4642      	mov	r2, r8
 800e2fc:	464b      	mov	r3, r9
 800e2fe:	f7f1 ffcb 	bl	8000298 <__aeabi_dsub>
 800e302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e306:	f7f1 ffc7 	bl	8000298 <__aeabi_dsub>
 800e30a:	4602      	mov	r2, r0
 800e30c:	e036      	b.n	800e37c <__ieee754_pow+0x794>
 800e30e:	bf00      	nop
 800e310:	4a454eef 	.word	0x4a454eef
 800e314:	3fca7e28 	.word	0x3fca7e28
 800e318:	93c9db65 	.word	0x93c9db65
 800e31c:	3fcd864a 	.word	0x3fcd864a
 800e320:	a91d4101 	.word	0xa91d4101
 800e324:	3fd17460 	.word	0x3fd17460
 800e328:	518f264d 	.word	0x518f264d
 800e32c:	3fd55555 	.word	0x3fd55555
 800e330:	db6fabff 	.word	0xdb6fabff
 800e334:	3fdb6db6 	.word	0x3fdb6db6
 800e338:	33333303 	.word	0x33333303
 800e33c:	3fe33333 	.word	0x3fe33333
 800e340:	e0000000 	.word	0xe0000000
 800e344:	3feec709 	.word	0x3feec709
 800e348:	dc3a03fd 	.word	0xdc3a03fd
 800e34c:	3feec709 	.word	0x3feec709
 800e350:	145b01f5 	.word	0x145b01f5
 800e354:	be3e2fe0 	.word	0xbe3e2fe0
 800e358:	7ff00000 	.word	0x7ff00000
 800e35c:	43400000 	.word	0x43400000
 800e360:	0003988e 	.word	0x0003988e
 800e364:	000bb679 	.word	0x000bb679
 800e368:	0800e930 	.word	0x0800e930
 800e36c:	3ff00000 	.word	0x3ff00000
 800e370:	40080000 	.word	0x40080000
 800e374:	0800e910 	.word	0x0800e910
 800e378:	0800e920 	.word	0x0800e920
 800e37c:	460b      	mov	r3, r1
 800e37e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e382:	e5d7      	b.n	800df34 <__ieee754_pow+0x34c>
 800e384:	f04f 0a01 	mov.w	sl, #1
 800e388:	e65e      	b.n	800e048 <__ieee754_pow+0x460>
 800e38a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800e65c <__ieee754_pow+0xa74>)
 800e38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e390:	4630      	mov	r0, r6
 800e392:	4639      	mov	r1, r7
 800e394:	f7f1 ff82 	bl	800029c <__adddf3>
 800e398:	4642      	mov	r2, r8
 800e39a:	464b      	mov	r3, r9
 800e39c:	e9cd 0100 	strd	r0, r1, [sp]
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	f7f1 ff78 	bl	8000298 <__aeabi_dsub>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3b0:	f7f2 fbba 	bl	8000b28 <__aeabi_dcmpgt>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	f47f ae00 	bne.w	800dfba <__ieee754_pow+0x3d2>
 800e3ba:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800e3be:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e3c2:	48a1      	ldr	r0, [pc, #644]	@ (800e648 <__ieee754_pow+0xa60>)
 800e3c4:	f1bb 0f00 	cmp.w	fp, #0
 800e3c8:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800e3cc:	f04f 0200 	mov.w	r2, #0
 800e3d0:	fa43 fa0a 	asr.w	sl, r3, sl
 800e3d4:	44da      	add	sl, fp
 800e3d6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e3da:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e3de:	fa40 f001 	asr.w	r0, r0, r1
 800e3e2:	f1c1 0114 	rsb	r1, r1, #20
 800e3e6:	ea00 030a 	and.w	r3, r0, sl
 800e3ea:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e3ee:	4640      	mov	r0, r8
 800e3f0:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e3f4:	fa4a fa01 	asr.w	sl, sl, r1
 800e3f8:	4649      	mov	r1, r9
 800e3fa:	bfb8      	it	lt
 800e3fc:	f1ca 0a00 	rsblt	sl, sl, #0
 800e400:	f7f1 ff4a 	bl	8000298 <__aeabi_dsub>
 800e404:	4680      	mov	r8, r0
 800e406:	4689      	mov	r9, r1
 800e408:	2400      	movs	r4, #0
 800e40a:	4632      	mov	r2, r6
 800e40c:	463b      	mov	r3, r7
 800e40e:	4640      	mov	r0, r8
 800e410:	4649      	mov	r1, r9
 800e412:	f7f1 ff43 	bl	800029c <__adddf3>
 800e416:	460d      	mov	r5, r1
 800e418:	4620      	mov	r0, r4
 800e41a:	a37b      	add	r3, pc, #492	@ (adr r3, 800e608 <__ieee754_pow+0xa20>)
 800e41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e420:	f7f2 f8f2 	bl	8000608 <__aeabi_dmul>
 800e424:	4642      	mov	r2, r8
 800e426:	464b      	mov	r3, r9
 800e428:	e9cd 0100 	strd	r0, r1, [sp]
 800e42c:	4620      	mov	r0, r4
 800e42e:	4629      	mov	r1, r5
 800e430:	f7f1 ff32 	bl	8000298 <__aeabi_dsub>
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	4630      	mov	r0, r6
 800e43a:	4639      	mov	r1, r7
 800e43c:	f7f1 ff2c 	bl	8000298 <__aeabi_dsub>
 800e440:	a373      	add	r3, pc, #460	@ (adr r3, 800e610 <__ieee754_pow+0xa28>)
 800e442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e446:	f7f2 f8df 	bl	8000608 <__aeabi_dmul>
 800e44a:	4680      	mov	r8, r0
 800e44c:	4689      	mov	r9, r1
 800e44e:	4620      	mov	r0, r4
 800e450:	4629      	mov	r1, r5
 800e452:	a371      	add	r3, pc, #452	@ (adr r3, 800e618 <__ieee754_pow+0xa30>)
 800e454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e458:	f7f2 f8d6 	bl	8000608 <__aeabi_dmul>
 800e45c:	4602      	mov	r2, r0
 800e45e:	460b      	mov	r3, r1
 800e460:	4640      	mov	r0, r8
 800e462:	4649      	mov	r1, r9
 800e464:	f7f1 ff1a 	bl	800029c <__adddf3>
 800e468:	4604      	mov	r4, r0
 800e46a:	460d      	mov	r5, r1
 800e46c:	4602      	mov	r2, r0
 800e46e:	460b      	mov	r3, r1
 800e470:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e474:	f7f1 ff12 	bl	800029c <__adddf3>
 800e478:	4680      	mov	r8, r0
 800e47a:	4689      	mov	r9, r1
 800e47c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e480:	f7f1 ff0a 	bl	8000298 <__aeabi_dsub>
 800e484:	4602      	mov	r2, r0
 800e486:	460b      	mov	r3, r1
 800e488:	4620      	mov	r0, r4
 800e48a:	4629      	mov	r1, r5
 800e48c:	f7f1 ff04 	bl	8000298 <__aeabi_dsub>
 800e490:	4642      	mov	r2, r8
 800e492:	4606      	mov	r6, r0
 800e494:	460f      	mov	r7, r1
 800e496:	464b      	mov	r3, r9
 800e498:	4640      	mov	r0, r8
 800e49a:	4649      	mov	r1, r9
 800e49c:	f7f2 f8b4 	bl	8000608 <__aeabi_dmul>
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800e620 <__ieee754_pow+0xa38>)
 800e4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4aa:	f7f2 f8ad 	bl	8000608 <__aeabi_dmul>
 800e4ae:	a35e      	add	r3, pc, #376	@ (adr r3, 800e628 <__ieee754_pow+0xa40>)
 800e4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b4:	f7f1 fef0 	bl	8000298 <__aeabi_dsub>
 800e4b8:	4622      	mov	r2, r4
 800e4ba:	462b      	mov	r3, r5
 800e4bc:	f7f2 f8a4 	bl	8000608 <__aeabi_dmul>
 800e4c0:	a35b      	add	r3, pc, #364	@ (adr r3, 800e630 <__ieee754_pow+0xa48>)
 800e4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c6:	f7f1 fee9 	bl	800029c <__adddf3>
 800e4ca:	4622      	mov	r2, r4
 800e4cc:	462b      	mov	r3, r5
 800e4ce:	f7f2 f89b 	bl	8000608 <__aeabi_dmul>
 800e4d2:	a359      	add	r3, pc, #356	@ (adr r3, 800e638 <__ieee754_pow+0xa50>)
 800e4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d8:	f7f1 fede 	bl	8000298 <__aeabi_dsub>
 800e4dc:	4622      	mov	r2, r4
 800e4de:	462b      	mov	r3, r5
 800e4e0:	f7f2 f892 	bl	8000608 <__aeabi_dmul>
 800e4e4:	a356      	add	r3, pc, #344	@ (adr r3, 800e640 <__ieee754_pow+0xa58>)
 800e4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ea:	f7f1 fed7 	bl	800029c <__adddf3>
 800e4ee:	4622      	mov	r2, r4
 800e4f0:	462b      	mov	r3, r5
 800e4f2:	f7f2 f889 	bl	8000608 <__aeabi_dmul>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	4640      	mov	r0, r8
 800e4fc:	4649      	mov	r1, r9
 800e4fe:	f7f1 fecb 	bl	8000298 <__aeabi_dsub>
 800e502:	4604      	mov	r4, r0
 800e504:	460d      	mov	r5, r1
 800e506:	4602      	mov	r2, r0
 800e508:	460b      	mov	r3, r1
 800e50a:	4640      	mov	r0, r8
 800e50c:	4649      	mov	r1, r9
 800e50e:	f7f2 f87b 	bl	8000608 <__aeabi_dmul>
 800e512:	2200      	movs	r2, #0
 800e514:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e518:	e9cd 0100 	strd	r0, r1, [sp]
 800e51c:	4620      	mov	r0, r4
 800e51e:	4629      	mov	r1, r5
 800e520:	f7f1 feba 	bl	8000298 <__aeabi_dsub>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e52c:	f7f2 f996 	bl	800085c <__aeabi_ddiv>
 800e530:	4632      	mov	r2, r6
 800e532:	4604      	mov	r4, r0
 800e534:	460d      	mov	r5, r1
 800e536:	463b      	mov	r3, r7
 800e538:	4640      	mov	r0, r8
 800e53a:	4649      	mov	r1, r9
 800e53c:	f7f2 f864 	bl	8000608 <__aeabi_dmul>
 800e540:	4632      	mov	r2, r6
 800e542:	463b      	mov	r3, r7
 800e544:	f7f1 feaa 	bl	800029c <__adddf3>
 800e548:	4602      	mov	r2, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	4620      	mov	r0, r4
 800e54e:	4629      	mov	r1, r5
 800e550:	f7f1 fea2 	bl	8000298 <__aeabi_dsub>
 800e554:	4642      	mov	r2, r8
 800e556:	464b      	mov	r3, r9
 800e558:	f7f1 fe9e 	bl	8000298 <__aeabi_dsub>
 800e55c:	460b      	mov	r3, r1
 800e55e:	4602      	mov	r2, r0
 800e560:	493a      	ldr	r1, [pc, #232]	@ (800e64c <__ieee754_pow+0xa64>)
 800e562:	2000      	movs	r0, #0
 800e564:	f7f1 fe98 	bl	8000298 <__aeabi_dsub>
 800e568:	ec41 0b10 	vmov	d0, r0, r1
 800e56c:	ee10 3a90 	vmov	r3, s1
 800e570:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e574:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e578:	da30      	bge.n	800e5dc <__ieee754_pow+0x9f4>
 800e57a:	4650      	mov	r0, sl
 800e57c:	f000 f87c 	bl	800e678 <scalbn>
 800e580:	ec51 0b10 	vmov	r0, r1, d0
 800e584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e588:	f7ff bbd5 	b.w	800dd36 <__ieee754_pow+0x14e>
 800e58c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e590:	4c2f      	ldr	r4, [pc, #188]	@ (800e650 <__ieee754_pow+0xa68>)
 800e592:	42a3      	cmp	r3, r4
 800e594:	d91a      	bls.n	800e5cc <__ieee754_pow+0x9e4>
 800e596:	4b2f      	ldr	r3, [pc, #188]	@ (800e654 <__ieee754_pow+0xa6c>)
 800e598:	440b      	add	r3, r1
 800e59a:	4303      	orrs	r3, r0
 800e59c:	d009      	beq.n	800e5b2 <__ieee754_pow+0x9ca>
 800e59e:	2200      	movs	r2, #0
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5a6:	f7f2 faa1 	bl	8000aec <__aeabi_dcmplt>
 800e5aa:	3800      	subs	r0, #0
 800e5ac:	bf18      	it	ne
 800e5ae:	2001      	movne	r0, #1
 800e5b0:	e42e      	b.n	800de10 <__ieee754_pow+0x228>
 800e5b2:	4642      	mov	r2, r8
 800e5b4:	464b      	mov	r3, r9
 800e5b6:	f7f1 fe6f 	bl	8000298 <__aeabi_dsub>
 800e5ba:	4632      	mov	r2, r6
 800e5bc:	463b      	mov	r3, r7
 800e5be:	f7f2 faa9 	bl	8000b14 <__aeabi_dcmpge>
 800e5c2:	2800      	cmp	r0, #0
 800e5c4:	d1eb      	bne.n	800e59e <__ieee754_pow+0x9b6>
 800e5c6:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800e664 <__ieee754_pow+0xa7c>
 800e5ca:	e6f6      	b.n	800e3ba <__ieee754_pow+0x7d2>
 800e5cc:	469a      	mov	sl, r3
 800e5ce:	4b22      	ldr	r3, [pc, #136]	@ (800e658 <__ieee754_pow+0xa70>)
 800e5d0:	459a      	cmp	sl, r3
 800e5d2:	f63f aef2 	bhi.w	800e3ba <__ieee754_pow+0x7d2>
 800e5d6:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e5da:	e715      	b.n	800e408 <__ieee754_pow+0x820>
 800e5dc:	ec51 0b10 	vmov	r0, r1, d0
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	e7cf      	b.n	800e584 <__ieee754_pow+0x99c>
 800e5e4:	2000      	movs	r0, #0
 800e5e6:	4919      	ldr	r1, [pc, #100]	@ (800e64c <__ieee754_pow+0xa64>)
 800e5e8:	f7ff bb1b 	b.w	800dc22 <__ieee754_pow+0x3a>
 800e5ec:	2000      	movs	r0, #0
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	f7ff bb17 	b.w	800dc22 <__ieee754_pow+0x3a>
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	4639      	mov	r1, r7
 800e5f8:	f7ff bb13 	b.w	800dc22 <__ieee754_pow+0x3a>
 800e5fc:	460c      	mov	r4, r1
 800e5fe:	f7ff bb61 	b.w	800dcc4 <__ieee754_pow+0xdc>
 800e602:	2400      	movs	r4, #0
 800e604:	f7ff bb4c 	b.w	800dca0 <__ieee754_pow+0xb8>
 800e608:	00000000 	.word	0x00000000
 800e60c:	3fe62e43 	.word	0x3fe62e43
 800e610:	fefa39ef 	.word	0xfefa39ef
 800e614:	3fe62e42 	.word	0x3fe62e42
 800e618:	0ca86c39 	.word	0x0ca86c39
 800e61c:	be205c61 	.word	0xbe205c61
 800e620:	72bea4d0 	.word	0x72bea4d0
 800e624:	3e663769 	.word	0x3e663769
 800e628:	c5d26bf1 	.word	0xc5d26bf1
 800e62c:	3ebbbd41 	.word	0x3ebbbd41
 800e630:	af25de2c 	.word	0xaf25de2c
 800e634:	3f11566a 	.word	0x3f11566a
 800e638:	16bebd93 	.word	0x16bebd93
 800e63c:	3f66c16c 	.word	0x3f66c16c
 800e640:	5555553e 	.word	0x5555553e
 800e644:	3fc55555 	.word	0x3fc55555
 800e648:	fff00000 	.word	0xfff00000
 800e64c:	3ff00000 	.word	0x3ff00000
 800e650:	4090cbff 	.word	0x4090cbff
 800e654:	3f6f3400 	.word	0x3f6f3400
 800e658:	3fe00000 	.word	0x3fe00000
 800e65c:	652b82fe 	.word	0x652b82fe
 800e660:	3c971547 	.word	0x3c971547
 800e664:	4090cc00 	.word	0x4090cc00

0800e668 <fabs>:
 800e668:	ec51 0b10 	vmov	r0, r1, d0
 800e66c:	4602      	mov	r2, r0
 800e66e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e672:	ec43 2b10 	vmov	d0, r2, r3
 800e676:	4770      	bx	lr

0800e678 <scalbn>:
 800e678:	b570      	push	{r4, r5, r6, lr}
 800e67a:	ec55 4b10 	vmov	r4, r5, d0
 800e67e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e682:	4606      	mov	r6, r0
 800e684:	462b      	mov	r3, r5
 800e686:	b991      	cbnz	r1, 800e6ae <scalbn+0x36>
 800e688:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e68c:	4323      	orrs	r3, r4
 800e68e:	d03d      	beq.n	800e70c <scalbn+0x94>
 800e690:	4b35      	ldr	r3, [pc, #212]	@ (800e768 <scalbn+0xf0>)
 800e692:	4620      	mov	r0, r4
 800e694:	4629      	mov	r1, r5
 800e696:	2200      	movs	r2, #0
 800e698:	f7f1 ffb6 	bl	8000608 <__aeabi_dmul>
 800e69c:	4b33      	ldr	r3, [pc, #204]	@ (800e76c <scalbn+0xf4>)
 800e69e:	4604      	mov	r4, r0
 800e6a0:	460d      	mov	r5, r1
 800e6a2:	429e      	cmp	r6, r3
 800e6a4:	da0f      	bge.n	800e6c6 <scalbn+0x4e>
 800e6a6:	a328      	add	r3, pc, #160	@ (adr r3, 800e748 <scalbn+0xd0>)
 800e6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ac:	e01e      	b.n	800e6ec <scalbn+0x74>
 800e6ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e6b2:	4291      	cmp	r1, r2
 800e6b4:	d10b      	bne.n	800e6ce <scalbn+0x56>
 800e6b6:	4622      	mov	r2, r4
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	f7f1 fdee 	bl	800029c <__adddf3>
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	460d      	mov	r5, r1
 800e6c4:	e022      	b.n	800e70c <scalbn+0x94>
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e6cc:	3936      	subs	r1, #54	@ 0x36
 800e6ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e6d2:	4296      	cmp	r6, r2
 800e6d4:	dd0d      	ble.n	800e6f2 <scalbn+0x7a>
 800e6d6:	2d00      	cmp	r5, #0
 800e6d8:	a11d      	add	r1, pc, #116	@ (adr r1, 800e750 <scalbn+0xd8>)
 800e6da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6de:	da02      	bge.n	800e6e6 <scalbn+0x6e>
 800e6e0:	a11d      	add	r1, pc, #116	@ (adr r1, 800e758 <scalbn+0xe0>)
 800e6e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6e6:	a31a      	add	r3, pc, #104	@ (adr r3, 800e750 <scalbn+0xd8>)
 800e6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ec:	f7f1 ff8c 	bl	8000608 <__aeabi_dmul>
 800e6f0:	e7e6      	b.n	800e6c0 <scalbn+0x48>
 800e6f2:	1872      	adds	r2, r6, r1
 800e6f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e6f8:	428a      	cmp	r2, r1
 800e6fa:	dcec      	bgt.n	800e6d6 <scalbn+0x5e>
 800e6fc:	2a00      	cmp	r2, #0
 800e6fe:	dd08      	ble.n	800e712 <scalbn+0x9a>
 800e700:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e704:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e708:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e70c:	ec45 4b10 	vmov	d0, r4, r5
 800e710:	bd70      	pop	{r4, r5, r6, pc}
 800e712:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e716:	da08      	bge.n	800e72a <scalbn+0xb2>
 800e718:	2d00      	cmp	r5, #0
 800e71a:	a10b      	add	r1, pc, #44	@ (adr r1, 800e748 <scalbn+0xd0>)
 800e71c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e720:	dac1      	bge.n	800e6a6 <scalbn+0x2e>
 800e722:	a10f      	add	r1, pc, #60	@ (adr r1, 800e760 <scalbn+0xe8>)
 800e724:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e728:	e7bd      	b.n	800e6a6 <scalbn+0x2e>
 800e72a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e72e:	3236      	adds	r2, #54	@ 0x36
 800e730:	4620      	mov	r0, r4
 800e732:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e736:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e73a:	2200      	movs	r2, #0
 800e73c:	4b0c      	ldr	r3, [pc, #48]	@ (800e770 <scalbn+0xf8>)
 800e73e:	4629      	mov	r1, r5
 800e740:	e7d4      	b.n	800e6ec <scalbn+0x74>
 800e742:	bf00      	nop
 800e744:	f3af 8000 	nop.w
 800e748:	c2f8f359 	.word	0xc2f8f359
 800e74c:	01a56e1f 	.word	0x01a56e1f
 800e750:	8800759c 	.word	0x8800759c
 800e754:	7e37e43c 	.word	0x7e37e43c
 800e758:	8800759c 	.word	0x8800759c
 800e75c:	fe37e43c 	.word	0xfe37e43c
 800e760:	c2f8f359 	.word	0xc2f8f359
 800e764:	81a56e1f 	.word	0x81a56e1f
 800e768:	43500000 	.word	0x43500000
 800e76c:	ffff3cb0 	.word	0xffff3cb0
 800e770:	3c900000 	.word	0x3c900000

0800e774 <with_errno>:
 800e774:	b510      	push	{r4, lr}
 800e776:	ed2d 8b02 	vpush	{d8}
 800e77a:	eeb0 8a40 	vmov.f32	s16, s0
 800e77e:	eef0 8a60 	vmov.f32	s17, s1
 800e782:	4604      	mov	r4, r0
 800e784:	f7fe fd6a 	bl	800d25c <__errno>
 800e788:	6004      	str	r4, [r0, #0]
 800e78a:	eeb0 0a48 	vmov.f32	s0, s16
 800e78e:	eef0 0a68 	vmov.f32	s1, s17
 800e792:	ecbd 8b02 	vpop	{d8}
 800e796:	bd10      	pop	{r4, pc}

0800e798 <xflow>:
 800e798:	4603      	mov	r3, r0
 800e79a:	b507      	push	{r0, r1, r2, lr}
 800e79c:	ec51 0b10 	vmov	r0, r1, d0
 800e7a0:	b183      	cbz	r3, 800e7c4 <xflow+0x2c>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e7a8:	e9cd 2300 	strd	r2, r3, [sp]
 800e7ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7b0:	f7f1 ff2a 	bl	8000608 <__aeabi_dmul>
 800e7b4:	ec41 0b10 	vmov	d0, r0, r1
 800e7b8:	2022      	movs	r0, #34	@ 0x22
 800e7ba:	b003      	add	sp, #12
 800e7bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7c0:	f7ff bfd8 	b.w	800e774 <with_errno>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	e7ee      	b.n	800e7a8 <xflow+0x10>
 800e7ca:	0000      	movs	r0, r0
 800e7cc:	0000      	movs	r0, r0
	...

0800e7d0 <__math_uflow>:
 800e7d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e7d8 <__math_uflow+0x8>
 800e7d4:	f7ff bfe0 	b.w	800e798 <xflow>
 800e7d8:	00000000 	.word	0x00000000
 800e7dc:	10000000 	.word	0x10000000

0800e7e0 <__math_oflow>:
 800e7e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e7e8 <__math_oflow+0x8>
 800e7e4:	f7ff bfd8 	b.w	800e798 <xflow>
 800e7e8:	00000000 	.word	0x00000000
 800e7ec:	70000000 	.word	0x70000000

0800e7f0 <_init>:
 800e7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7f2:	bf00      	nop
 800e7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7f6:	bc08      	pop	{r3}
 800e7f8:	469e      	mov	lr, r3
 800e7fa:	4770      	bx	lr

0800e7fc <_fini>:
 800e7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fe:	bf00      	nop
 800e800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e802:	bc08      	pop	{r3}
 800e804:	469e      	mov	lr, r3
 800e806:	4770      	bx	lr
