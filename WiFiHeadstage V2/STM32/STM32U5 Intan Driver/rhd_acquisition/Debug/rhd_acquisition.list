
rhd_acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efb8  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800f208  0800f208  00010208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f350  0800f350  00010350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f358  0800f358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f35c  0800f35c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  0800f360  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000087a  20000088  0800f3e8  00011088  2**3
                  ALLOC
  8 ._user_heap_stack 00000606  20000902  0800f3e8  00011902  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00011088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f7a7  00000000  00000000  000110be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b6d  00000000  00000000  00030865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a60  00000000  00000000  000343d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000148a  00000000  00000000  00035e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038d1e  00000000  00000000  000372c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000211ed  00000000  00000000  0006ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001642ba  00000000  00000000  000911cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f5487  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007dec  00000000  00000000  001f54cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000091  00000000  00000000  001fd2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000088 	.word	0x20000088
 800026c:	00000000 	.word	0x00000000
 8000270:	0800f1f0 	.word	0x0800f1f0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000008c 	.word	0x2000008c
 800028c:	0800f1f0 	.word	0x0800f1f0

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b97e 	b.w	8000ebc <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bdc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14d      	bne.n	8000c80 <__udivmoddi4+0xa8>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	460f      	mov	r7, r1
 8000be8:	4684      	mov	ip, r0
 8000bea:	4696      	mov	lr, r2
 8000bec:	fab2 f382 	clz	r3, r2
 8000bf0:	d960      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bf2:	b14b      	cbz	r3, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c0c:	fa1f f48e 	uxth.w	r4, lr
 8000c10:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c14:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c18:	fb06 7711 	mls	r7, r6, r1, r7
 8000c1c:	fb01 f004 	mul.w	r0, r1, r4
 8000c20:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c28:	eb1e 0202 	adds.w	r2, lr, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x60>
 8000c32:	4290      	cmp	r0, r2
 8000c34:	f200 812d 	bhi.w	8000e92 <__udivmoddi4+0x2ba>
 8000c38:	4639      	mov	r1, r7
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	fa1f fc8c 	uxth.w	ip, ip
 8000c40:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c44:	fb06 2210 	mls	r2, r6, r0, r2
 8000c48:	fb00 f404 	mul.w	r4, r0, r4
 8000c4c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c50:	4564      	cmp	r4, ip
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c54:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5c:	d202      	bcs.n	8000c64 <__udivmoddi4+0x8c>
 8000c5e:	4564      	cmp	r4, ip
 8000c60:	f200 811a 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000c64:	4610      	mov	r0, r2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	ebac 0c04 	sub.w	ip, ip, r4
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b125      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c72:	fa2c f303 	lsr.w	r3, ip, r3
 8000c76:	2200      	movs	r2, #0
 8000c78:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d905      	bls.n	8000c90 <__udivmoddi4+0xb8>
 8000c84:	b10d      	cbz	r5, 8000c8a <__udivmoddi4+0xb2>
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	e7f5      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d14d      	bne.n	8000d34 <__udivmoddi4+0x15c>
 8000c98:	42a3      	cmp	r3, r4
 8000c9a:	f0c0 80f2 	bcc.w	8000e82 <__udivmoddi4+0x2aa>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f080 80ef 	bcs.w	8000e82 <__udivmoddi4+0x2aa>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	4608      	mov	r0, r1
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e6      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cae:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb2:	e7e3      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 80a2 	bne.w	8000dfe <__udivmoddi4+0x226>
 8000cba:	1a8a      	subs	r2, r1, r2
 8000cbc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cc0:	fa1f f68e 	uxth.w	r6, lr
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cca:	fb07 2014 	mls	r0, r7, r4, r2
 8000cce:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb06 f004 	mul.w	r0, r6, r4
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d90f      	bls.n	8000cfe <__udivmoddi4+0x126>
 8000cde:	eb1e 0202 	adds.w	r2, lr, r2
 8000ce2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000ce6:	bf2c      	ite	cs
 8000ce8:	f04f 0901 	movcs.w	r9, #1
 8000cec:	f04f 0900 	movcc.w	r9, #0
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d903      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cf4:	f1b9 0f00 	cmp.w	r9, #0
 8000cf8:	f000 80c8 	beq.w	8000e8c <__udivmoddi4+0x2b4>
 8000cfc:	4644      	mov	r4, r8
 8000cfe:	1a12      	subs	r2, r2, r0
 8000d00:	fa1f fc8c 	uxth.w	ip, ip
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	fb00 f606 	mul.w	r6, r0, r6
 8000d10:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d14:	4566      	cmp	r6, ip
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x152>
 8000d18:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x150>
 8000d22:	4566      	cmp	r6, ip
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	ebac 0c06 	sub.w	ip, ip, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	e79d      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d46:	40f4      	lsrs	r4, r6
 8000d48:	408a      	lsls	r2, r1
 8000d4a:	431f      	orrs	r7, r3
 8000d4c:	ea4e 030c 	orr.w	r3, lr, ip
 8000d50:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d54:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d64:	fb08 4410 	mls	r4, r8, r0, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb00 f90c 	mul.w	r9, r0, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	d90e      	bls.n	8000d92 <__udivmoddi4+0x1ba>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	bf2c      	ite	cs
 8000d7c:	f04f 0b01 	movcs.w	fp, #1
 8000d80:	f04f 0b00 	movcc.w	fp, #0
 8000d84:	45a1      	cmp	r9, r4
 8000d86:	d903      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d88:	f1bb 0f00 	cmp.w	fp, #0
 8000d8c:	f000 8093 	beq.w	8000eb6 <__udivmoddi4+0x2de>
 8000d90:	4650      	mov	r0, sl
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d9e:	fb08 4413 	mls	r4, r8, r3, r4
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d906      	bls.n	8000dbc <__udivmoddi4+0x1e4>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 38ff 	add.w	r8, r3, #4294967295
 8000db4:	d201      	bcs.n	8000dba <__udivmoddi4+0x1e2>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d87a      	bhi.n	8000eb0 <__udivmoddi4+0x2d8>
 8000dba:	4643      	mov	r3, r8
 8000dbc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc0:	eba4 040c 	sub.w	r4, r4, ip
 8000dc4:	fba0 9802 	umull	r9, r8, r0, r2
 8000dc8:	4544      	cmp	r4, r8
 8000dca:	46cc      	mov	ip, r9
 8000dcc:	4643      	mov	r3, r8
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0x1fe>
 8000dd0:	d106      	bne.n	8000de0 <__udivmoddi4+0x208>
 8000dd2:	45ce      	cmp	lr, r9
 8000dd4:	d204      	bcs.n	8000de0 <__udivmoddi4+0x208>
 8000dd6:	3801      	subs	r0, #1
 8000dd8:	ebb9 0c02 	subs.w	ip, r9, r2
 8000ddc:	eb68 0307 	sbc.w	r3, r8, r7
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x222>
 8000de2:	ebbe 020c 	subs.w	r2, lr, ip
 8000de6:	eb64 0403 	sbc.w	r4, r4, r3
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	fa22 f301 	lsr.w	r3, r2, r1
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	431e      	orrs	r6, r3
 8000df6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	e73e      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000dfe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e02:	f1c3 0120 	rsb	r1, r3, #32
 8000e06:	fa04 f203 	lsl.w	r2, r4, r3
 8000e0a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e0e:	40cc      	lsrs	r4, r1
 8000e10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e14:	fa20 f101 	lsr.w	r1, r0, r1
 8000e18:	fa1f f68e 	uxth.w	r6, lr
 8000e1c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fb07 4410 	mls	r4, r7, r0, r4
 8000e26:	0c11      	lsrs	r1, r2, #16
 8000e28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e2c:	fb00 f406 	mul.w	r4, r0, r6
 8000e30:	428c      	cmp	r4, r1
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x27a>
 8000e34:	eb1e 0101 	adds.w	r1, lr, r1
 8000e38:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3c:	bf2c      	ite	cs
 8000e3e:	f04f 0901 	movcs.w	r9, #1
 8000e42:	f04f 0900 	movcc.w	r9, #0
 8000e46:	428c      	cmp	r4, r1
 8000e48:	d902      	bls.n	8000e50 <__udivmoddi4+0x278>
 8000e4a:	f1b9 0f00 	cmp.w	r9, #0
 8000e4e:	d02c      	beq.n	8000eaa <__udivmoddi4+0x2d2>
 8000e50:	4640      	mov	r0, r8
 8000e52:	1b09      	subs	r1, r1, r4
 8000e54:	b292      	uxth	r2, r2
 8000e56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x2a2>
 8000e6a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e6e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e72:	d201      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d815      	bhi.n	8000ea4 <__udivmoddi4+0x2cc>
 8000e78:	4644      	mov	r4, r8
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e80:	e721      	b.n	8000cc6 <__udivmoddi4+0xee>
 8000e82:	1a86      	subs	r6, r0, r2
 8000e84:	eb64 0303 	sbc.w	r3, r4, r3
 8000e88:	2001      	movs	r0, #1
 8000e8a:	e70e      	b.n	8000caa <__udivmoddi4+0xd2>
 8000e8c:	3c02      	subs	r4, #2
 8000e8e:	4472      	add	r2, lr
 8000e90:	e735      	b.n	8000cfe <__udivmoddi4+0x126>
 8000e92:	3902      	subs	r1, #2
 8000e94:	4472      	add	r2, lr
 8000e96:	e6d0      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e98:	44f4      	add	ip, lr
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	e6e3      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e9e:	44f4      	add	ip, lr
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x152>
 8000ea4:	3c02      	subs	r4, #2
 8000ea6:	4472      	add	r2, lr
 8000ea8:	e7e7      	b.n	8000e7a <__udivmoddi4+0x2a2>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	4471      	add	r1, lr
 8000eae:	e7d0      	b.n	8000e52 <__udivmoddi4+0x27a>
 8000eb0:	3b02      	subs	r3, #2
 8000eb2:	443c      	add	r4, r7
 8000eb4:	e782      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	e76a      	b.n	8000d92 <__udivmoddi4+0x1ba>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <write_pin>:
void uart_interrupt_routine();
#endif

// Write specified pin on specified port either high (1) or low (0).
static inline void write_pin(GPIO_TypeDef * gpio_port, uint32_t gpio_pin, int level)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
#ifdef USE_HAL
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f004 fc46 	bl	8005768 <HAL_GPIO_WritePin>
#else
	level ? LL_GPIO_SetOutputPin(gpio_port, gpio_pin) : LL_GPIO_ResetOutputPin(gpio_port, gpio_pin);
#endif
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <wait_ms>:
 * helpful for repeated function calls within interrupt routine.
 */

// Wait for 'duration' ms. Recommended to never call from within an interrupt function.
static inline void wait_ms(int duration)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	HAL_Delay(duration);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 f966 	bl	80041c0 <HAL_Delay>
#else
	SysTick_Config(SystemCoreClock/1000); // Set up SysTick so that getSysTick() returns ms since program started.
	while (get_SysTick() < duration) {}
#endif
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <enable_interrupt_timer>:

// Enable/disable timer interrupts.
static inline void enable_interrupt_timer(int enable)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <enable_interrupt_timer+0x16>
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <enable_interrupt_timer+0x24>)
 8000f0c:	f009 fe84 	bl	800ac18 <HAL_TIM_Base_Start_IT>
	} else {
		LL_TIM_DisableCounter(INTERRUPT_TIM);
		LL_TIM_DisableIT_UPDATE(INTERRUPT_TIM);
	}
#endif
}
 8000f10:	e002      	b.n	8000f18 <enable_interrupt_timer+0x1c>
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000f12:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <enable_interrupt_timer+0x24>)
 8000f14:	f009 ff20 	bl	800ad58 <HAL_TIM_Base_Stop_IT>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000224 	.word	0x20000224

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0ca      	sub	sp, #296	@ 0x128
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2a:	f003 f883 	bl	8004034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000f2e:	f000 f8bb 	bl	80010a8 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 f861 	bl	8000ff8 <SystemClock_Config>
  // reset, for example pushing the RESET button on a NUCLEO board, or when downloading/running using
  // STM32CubeProgrammer. For these cases, this delay can be removed.
  // When this bug does occur, we recommend including a delay of ~500 ms so that this brief running of the previously
  // loaded program doesn't have any interaction with any peripherals and this re-run program does nothing important.
  // In practice, 50 ms is likely enough of a pause from our testing, but 500 ms is even safer.
  wait_ms(500);
 8000f36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f3a:	f7ff ffd3 	bl	8000ee4 <wait_ms>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fa75 	bl	800142c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000f42:	f000 f8c1 	bl	80010c8 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8000f46:	f000 f9cd 	bl	80012e4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000f4a:	f000 f973 	bl	8001234 <MX_TIM3_Init>
  MX_SPI3_Init();
 8000f4e:	f000 f8ff 	bl	8001150 <MX_SPI3_Init>
  MX_ICACHE_Init();
 8000f52:	f000 f8e9 	bl	8001128 <MX_ICACHE_Init>
  MX_USART2_UART_Init();
 8000f56:	f000 fa1d 	bl	8001394 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Doing Stuff \r\n");
 8000f5a:	4822      	ldr	r0, [pc, #136]	@ (8000fe4 <main+0xc0>)
 8000f5c:	f00c fc0e 	bl	800d77c <puts>

  // Write register value to pause all used timers when execution pauses during debug
  SET_BIT(DBGMCU->APB1FZR1, 0b10); // enable pausing TIM3 during debug
 8000f60:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <main+0xc4>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	4a20      	ldr	r2, [pc, #128]	@ (8000fe8 <main+0xc4>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	6093      	str	r3, [r2, #8]

  // Alocate sample_memory array which will be used to store acquired data.
  allocate_sample_memory();
 8000f6c:	f000 fc40 	bl	80017f0 <allocate_sample_memory>

  // Set up SPI DMA configuration for when SPI transfers begin.
  initialize_spi_with_dma();
 8000f70:	f000 fc6e 	bl	8001850 <initialize_spi_with_dma>

  // Initialize Intan chip registers with suitable settings for this application.
  // This not only determines the initial registers, but actually writes them via SPI.
  RHDConfigParameters parameters;
  configure_registers(&parameters);
 8000f74:	463b      	mov	r3, r7
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 ffe2 	bl	8003f40 <configure_registers>

  // Populate first CONVERT_COMMANDS_PER_SEQUENCE that will repeatedly
  // convert for each sample interrupt.
  // Note that AUX_COMMANDS_PER_SEQUENCE remain unpopulated in command_sequence_MOSI after this.
  configure_convert_commands();
 8000f7c:	f002 ffeb 	bl	8003f56 <configure_convert_commands>

  // Populate the AUX_COMMANDS_PER_SEQUENCE command lists (default 3) with auxiliary commands.
  configure_aux_commands(&parameters);
 8000f80:	463b      	mov	r3, r7
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 ffee 	bl	8003f64 <configure_aux_commands>

  // Turn on LED to indicate acquisition is about to start.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2180      	movs	r1, #128	@ 0x80
 8000f8c:	4817      	ldr	r0, [pc, #92]	@ (8000fec <main+0xc8>)
 8000f8e:	f7ff ff97 	bl	8000ec0 <write_pin>

  // Start timer so that at every period defined by INTERRUPT_TIM, an interrupt occurs, starting an SPI command sequence.
  sample_counter = 0;
 8000f92:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <main+0xcc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	801a      	strh	r2, [r3, #0]
  enable_interrupt_timer(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f7ff ffaf 	bl	8000efc <enable_interrupt_timer>
  main_loop_active = 1;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <main+0xd0>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]

  // Keep looping, doing nothing (other than handling interrupts) until enough data has been gathered
  while (1) {

	  // Break infinite loop when loop_escape() condition have been met.
	  if (loop_escape()) break;
 8000fa4:	f002 ff08 	bl	8003db8 <loop_escape>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d106      	bne.n	8000fbc <main+0x98>

	  // During infinite loop, write this pin High to indicate this main loop is currently processing.
	  write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <main+0xc8>)
 8000fb6:	f7ff ff83 	bl	8000ec0 <write_pin>
	  if (loop_escape()) break;
 8000fba:	e7f3      	b.n	8000fa4 <main+0x80>
 8000fbc:	bf00      	nop
    /* USER CODE BEGIN 3 */

  }

  // Disable TIM to stop sample interrupts.
  enable_interrupt_timer(0);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff ff9c 	bl	8000efc <enable_interrupt_timer>
  main_loop_active = 0;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <main+0xd0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]

  // Disable SPI DMA.
  end_spi_with_dma();
 8000fca:	f000 fc48 	bl	800185e <end_spi_with_dma>

  // Transmit accumulated data.
  transmit_data_offline();
 8000fce:	f002 ff43 	bl	8003e58 <transmit_data_offline>

  // Free previously allocated sample memory.
  free_sample_memory();
 8000fd2:	f000 fc31 	bl	8001838 <free_sample_memory>

  // Indicate acquisition and data transfer have completed.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2180      	movs	r1, #128	@ 0x80
 8000fda:	4804      	ldr	r0, [pc, #16]	@ (8000fec <main+0xc8>)
 8000fdc:	f7ff ff70 	bl	8000ec0 <write_pin>

  // Infinite loop for remainder of program life.
  while (1);
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <main+0xbc>
 8000fe4:	0800f208 	.word	0x0800f208
 8000fe8:	e0044000 	.word	0xe0044000
 8000fec:	42020800 	.word	0x42020800
 8000ff0:	2000049e 	.word	0x2000049e
 8000ff4:	200007a6 	.word	0x200007a6

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b09e      	sub	sp, #120	@ 0x78
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	2260      	movs	r2, #96	@ 0x60
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f00c fc98 	bl	800d93c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800101c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001020:	f004 fbea 	bl	80057f8 <HAL_PWREx_ControlVoltageScaling>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800102a:	f000 fb4d 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001032:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001036:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001038:	2302      	movs	r3, #2
 800103a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103c:	2303      	movs	r3, #3
 800103e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001044:	2301      	movs	r3, #1
 8001046:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001048:	2314      	movs	r3, #20
 800104a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 800104c:	2308      	movs	r3, #8
 800104e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001054:	2302      	movs	r3, #2
 8001056:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001058:	230c      	movs	r3, #12
 800105a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	4618      	mov	r0, r3
 8001066:	f004 fcc3 	bl	80059f0 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001070:	f000 fb2a 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	231f      	movs	r3, #31
 8001076:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	2303      	movs	r3, #3
 800107a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	2104      	movs	r1, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f005 fb89 	bl	80067a8 <HAL_RCC_ClockConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800109c:	f000 fb14 	bl	80016c8 <Error_Handler>
  }
}
 80010a0:	bf00      	nop
 80010a2:	3778      	adds	r7, #120	@ 0x78
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80010ac:	f004 fc80 	bl	80059b0 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010b0:	f004 fc8e 	bl	80059d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80010b4:	2002      	movs	r0, #2
 80010b6:	f004 fc2b 	bl	8005910 <HAL_PWREx_ConfigSupply>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 80010c0:	f000 fb02 	bl	80016c8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <MX_GPDMA1_Init+0x5c>)
 80010d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d4:	4a13      	ldr	r2, [pc, #76]	@ (8001124 <MX_GPDMA1_Init+0x5c>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_GPDMA1_Init+0x5c>)
 80010e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	201d      	movs	r0, #29
 80010f2:	f003 f941 	bl	8004378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80010f6:	201d      	movs	r0, #29
 80010f8:	f003 f958 	bl	80043ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2054      	movs	r0, #84	@ 0x54
 8001102:	f003 f939 	bl	8004378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8001106:	2054      	movs	r0, #84	@ 0x54
 8001108:	f003 f950 	bl	80043ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2055      	movs	r0, #85	@ 0x55
 8001112:	f003 f931 	bl	8004378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 8001116:	2055      	movs	r0, #85	@ 0x55
 8001118:	f003 f948 	bl	80043ac <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	46020c00 	.word	0x46020c00

08001128 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800112c:	2000      	movs	r0, #0
 800112e:	f004 fb33 	bl	8005798 <HAL_ICACHE_ConfigAssociativityMode>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001138:	f000 fac6 	bl	80016c8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800113c:	f004 fb4c 	bl	80057d8 <HAL_ICACHE_Enable>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001146:	f000 fabf 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001160:	4b32      	ldr	r3, [pc, #200]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001162:	4a33      	ldr	r2, [pc, #204]	@ (8001230 <MX_SPI3_Init+0xe0>)
 8001164:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001166:	4b31      	ldr	r3, [pc, #196]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001168:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800116c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800116e:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001174:	4b2d      	ldr	r3, [pc, #180]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001176:	220f      	movs	r2, #15
 8001178:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117a:	4b2c      	ldr	r3, [pc, #176]	@ (800122c <MX_SPI3_Init+0xdc>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001180:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001186:	4b29      	ldr	r3, [pc, #164]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001188:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800118c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800118e:	4b27      	ldr	r3, [pc, #156]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001190:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001194:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001196:	4b25      	ldr	r3, [pc, #148]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800119c:	4b23      	ldr	r3, [pc, #140]	@ (800122c <MX_SPI3_Init+0xdc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a2:	4b22      	ldr	r3, [pc, #136]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011aa:	2207      	movs	r2, #7
 80011ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_04CYCLE;
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011ca:	2240      	movs	r2, #64	@ 0x40
 80011cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_ENABLE;
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011d8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80011dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011f0:	480e      	ldr	r0, [pc, #56]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011f2:	f008 fe01 	bl	8009df8 <HAL_SPI_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_SPI3_Init+0xb0>
  {
    Error_Handler();
 80011fc:	f000 fa64 	bl	80016c8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 8001204:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001208:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001214:	f009 fcbf 	bl	800ab96 <HAL_SPIEx_SetConfigAutonomousMode>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_SPI3_Init+0xd2>
  {
    Error_Handler();
 800121e:	f000 fa53 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200000a4 	.word	0x200000a4
 8001230:	46002000 	.word	0x46002000

08001234 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001258:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <MX_TIM3_Init+0xa8>)
 800125a:	4a21      	ldr	r2, [pc, #132]	@ (80012e0 <MX_TIM3_Init+0xac>)
 800125c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800125e:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <MX_TIM3_Init+0xa8>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <MX_TIM3_Init+0xa8>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 800126a:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <MX_TIM3_Init+0xa8>)
 800126c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001270:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <MX_TIM3_Init+0xa8>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_TIM3_Init+0xa8>)
 800127a:	2280      	movs	r2, #128	@ 0x80
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800127e:	4817      	ldr	r0, [pc, #92]	@ (80012dc <MX_TIM3_Init+0xa8>)
 8001280:	f009 fd99 	bl	800adb6 <HAL_TIM_OC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800128a:	f000 fa1d 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	480f      	ldr	r0, [pc, #60]	@ (80012dc <MX_TIM3_Init+0xa8>)
 800129e:	f00a fca9 	bl	800bbf4 <HAL_TIMEx_MasterConfigSynchronization>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80012a8:	f000 fa0e 	bl	80016c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	@ (80012dc <MX_TIM3_Init+0xa8>)
 80012c4:	f009 ff1e 	bl	800b104 <HAL_TIM_OC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012ce:	f000 f9fb 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	@ 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000224 	.word	0x20000224
 80012e0:	40000400 	.word	0x40000400

080012e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 80012ea:	4a28      	ldr	r2, [pc, #160]	@ (800138c <MX_USART1_UART_Init+0xa8>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 10000000;
 80012ee:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 80012f0:	4a27      	ldr	r2, [pc, #156]	@ (8001390 <MX_USART1_UART_Init+0xac>)
 80012f2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f4:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012fa:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001300:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001308:	2208      	movs	r2, #8
 800130a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130c:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001312:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001314:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 800131c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001320:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001322:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 800132a:	2230      	movs	r2, #48	@ 0x30
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001330:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001334:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001338:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800133c:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133e:	4812      	ldr	r0, [pc, #72]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001340:	f00a fd60 	bl	800be04 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800134a:	f000 f9bd 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134e:	2100      	movs	r1, #0
 8001350:	480d      	ldr	r0, [pc, #52]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001352:	f00b ff73 	bl	800d23c <HAL_UARTEx_SetTxFifoThreshold>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800135c:	f000 f9b4 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001360:	2100      	movs	r1, #0
 8001362:	4809      	ldr	r0, [pc, #36]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001364:	f00b ffa8 	bl	800d2b8 <HAL_UARTEx_SetRxFifoThreshold>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800136e:	f000 f9ab 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001374:	f00b ff29 	bl	800d1ca <HAL_UARTEx_DisableFifoMode>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART1_UART_Init+0x9e>
  {
    Error_Handler();
 800137e:	f000 f9a3 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000270 	.word	0x20000270
 800138c:	40013800 	.word	0x40013800
 8001390:	00989680 	.word	0x00989680

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 800139a:	4a23      	ldr	r2, [pc, #140]	@ (8001428 <MX_USART2_UART_Init+0x94>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013a0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d0:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013dc:	4811      	ldr	r0, [pc, #68]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013de:	f00a fd11 	bl	800be04 <HAL_UART_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013e8:	f000 f96e 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ec:	2100      	movs	r1, #0
 80013ee:	480d      	ldr	r0, [pc, #52]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013f0:	f00b ff24 	bl	800d23c <HAL_UARTEx_SetTxFifoThreshold>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013fa:	f000 f965 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fe:	2100      	movs	r1, #0
 8001400:	4808      	ldr	r0, [pc, #32]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 8001402:	f00b ff59 	bl	800d2b8 <HAL_UARTEx_SetRxFifoThreshold>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800140c:	f000 f95c 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 8001412:	f00b feda 	bl	800d1ca <HAL_UARTEx_DisableFifoMode>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800141c:	f000 f954 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000304 	.word	0x20000304
 8001428:	40004400 	.word	0x40004400

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	@ 0x30
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	4b91      	ldr	r3, [pc, #580]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001448:	4a8f      	ldr	r2, [pc, #572]	@ (8001688 <MX_GPIO_Init+0x25c>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001452:	4b8d      	ldr	r3, [pc, #564]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001460:	4b89      	ldr	r3, [pc, #548]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001466:	4a88      	ldr	r2, [pc, #544]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800146c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001470:	4b85      	ldr	r3, [pc, #532]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b82      	ldr	r3, [pc, #520]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001484:	4a80      	ldr	r2, [pc, #512]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800148e:	4b7e      	ldr	r3, [pc, #504]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	4b7a      	ldr	r3, [pc, #488]	@ (8001688 <MX_GPIO_Init+0x25c>)
 800149e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a2:	4a79      	ldr	r2, [pc, #484]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ac:	4b76      	ldr	r3, [pc, #472]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	4b73      	ldr	r3, [pc, #460]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c0:	4a71      	ldr	r2, [pc, #452]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014de:	4a6a      	ldr	r2, [pc, #424]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014e8:	4b67      	ldr	r3, [pc, #412]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f6:	4b64      	ldr	r3, [pc, #400]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014fc:	4a62      	ldr	r2, [pc, #392]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001506:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800151a:	485c      	ldr	r0, [pc, #368]	@ (800168c <MX_GPIO_Init+0x260>)
 800151c:	f004 f924 	bl	8005768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_RED_Pin|ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 8001526:	485a      	ldr	r0, [pc, #360]	@ (8001690 <MX_GPIO_Init+0x264>)
 8001528:	f004 f91e 	bl	8005768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|Main_Monitor_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8001532:	4858      	ldr	r0, [pc, #352]	@ (8001694 <MX_GPIO_Init+0x268>)
 8001534:	f004 f918 	bl	8005768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	21a0      	movs	r1, #160	@ 0xa0
 800153c:	4856      	ldr	r0, [pc, #344]	@ (8001698 <MX_GPIO_Init+0x26c>)
 800153e:	f004 f913 	bl	8005768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ErrorCode_Bit_3_GPIO_Port, ErrorCode_Bit_3_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2101      	movs	r1, #1
 8001546:	4855      	ldr	r0, [pc, #340]	@ (800169c <MX_GPIO_Init+0x270>)
 8001548:	f004 f90e 	bl	8005768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800154c:	2304      	movs	r3, #4
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001550:	2303      	movs	r3, #3
 8001552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	484d      	ldr	r0, [pc, #308]	@ (8001694 <MX_GPIO_Init+0x268>)
 8001560:	f003 ff2a 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001564:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4847      	ldr	r0, [pc, #284]	@ (8001698 <MX_GPIO_Init+0x26c>)
 800157a:	f003 ff1d 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800157e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	4841      	ldr	r0, [pc, #260]	@ (8001698 <MX_GPIO_Init+0x26c>)
 8001594:	f003 ff10 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Monitor_Pin */
  GPIO_InitStruct.Pin = Interrupt_Monitor_Pin;
 8001598:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Interrupt_Monitor_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4836      	ldr	r0, [pc, #216]	@ (800168c <MX_GPIO_Init+0x260>)
 80015b2:	f003 ff01 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin ErrorCode_Bit_1_Pin ErrorCode_Bit_0_Pin ErrorCode_Bit_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin;
 80015b6:	f44f 73b2 	mov.w	r3, #356	@ 0x164
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4830      	ldr	r0, [pc, #192]	@ (8001690 <MX_GPIO_Init+0x264>)
 80015d0:	f003 fef2 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	482a      	ldr	r0, [pc, #168]	@ (8001694 <MX_GPIO_Init+0x268>)
 80015ec:	f003 fee4 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Main_Monitor_Pin */
  GPIO_InitStruct.Pin = Main_Monitor_Pin;
 80015f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Main_Monitor_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4822      	ldr	r0, [pc, #136]	@ (8001694 <MX_GPIO_Init+0x268>)
 800160a:	f003 fed5 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800160e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	481e      	ldr	r0, [pc, #120]	@ (80016a0 <MX_GPIO_Init+0x274>)
 8001628:	f003 fec6 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800162c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4817      	ldr	r0, [pc, #92]	@ (80016a0 <MX_GPIO_Init+0x274>)
 8001642:	f003 feb9 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 8001646:	23a0      	movs	r3, #160	@ 0xa0
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	480e      	ldr	r0, [pc, #56]	@ (8001698 <MX_GPIO_Init+0x26c>)
 800165e:	f003 feab 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ErrorCode_Bit_3_Pin */
  GPIO_InitStruct.Pin = ErrorCode_Bit_3_Pin;
 8001662:	2301      	movs	r3, #1
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ErrorCode_Bit_3_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	4808      	ldr	r0, [pc, #32]	@ (800169c <MX_GPIO_Init+0x270>)
 800167a:	f003 fe9d 	bl	80053b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800167e:	bf00      	nop
 8001680:	3730      	adds	r7, #48	@ 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	46020c00 	.word	0x46020c00
 800168c:	42020c00 	.word	0x42020c00
 8001690:	42021800 	.word	0x42021800
 8001694:	42020800 	.word	0x42020800
 8001698:	42020400 	.word	0x42020400
 800169c:	42021000 	.word	0x42021000
 80016a0:	42020000 	.word	0x42020000

080016a4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80016ac:	1d39      	adds	r1, r7, #4
 80016ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016b2:	2201      	movs	r2, #1
 80016b4:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <__io_putchar+0x20>)
 80016b6:	f00a fbf5 	bl	800bea4 <HAL_UART_Transmit>

  return ch;
 80016ba:	687b      	ldr	r3, [r7, #4]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000304 	.word	0x20000304

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <Error_Handler+0x8>

080016d4 <write_pin>:
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f004 f83c 	bl	8005768 <HAL_GPIO_WritePin>
}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <sample_interrupt_routine>:
// Due to use of DMA in this example (which is very efficient for large data transfers), processing is not
// the likely bottleneck, but rather the rate of SPI communication itself. Shorter SPI command sequences
// (default is 32 CONVERT commands + 3 AUX commands) and/or faster Baud rate will allow SPI communication to
// finish faster.
void sample_interrupt_routine()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	// Check if condition specified in loop_escape (e.g. target number of samples have been acquired) is true.
	// If so, keep from continuing interrupt execution and return to main loop so it can be escaped.
	if (loop_escape()) return;
 80016fc:	f002 fb5c 	bl	8003db8 <loop_escape>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d120      	bne.n	8001748 <sample_interrupt_routine+0x50>

	// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
	// Main loop will write Main_Monitor_Pin when processing returns to main, so the duty cycle of this pin
	// can be measured to estimate what percentage of clock cycles are available for main processing.
	write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800170c:	480f      	ldr	r0, [pc, #60]	@ (800174c <sample_interrupt_routine+0x54>)
 800170e:	f7ff ffe1 	bl	80016d4 <write_pin>

	// Write aux commands to command_sequence_MOSI, advancing one sample through aux_command_list.
	cycle_aux_commands();
 8001712:	f000 f821 	bl	8001758 <cycle_aux_commands>

	// If previous DMA transfer has not completed, SPI communication from previous sample has not finished.
	// This is a critical error that will halt execution. To avoid this, all processing from previous interrupt
	// must conclude sooner (most likely, this would be waiting on SPI transfer completion, in which case
	// fewer channels can be included in the command sequence, or the SPI communication itself must be sped up).
	if (command_transfer_state == TRANSFER_WAIT) {
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <sample_interrupt_routine+0x58>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <sample_interrupt_routine+0x2c>
		handle_comm_error(ITClip);
 800171e:	2005      	movs	r0, #5
 8001720:	f000 f8a4 	bl	800186c <handle_comm_error>

	// Indicate start of timer interrupt by writing Interrupt_Monitor_Pin High.
	// At the end of this function, Interrupt_Monitor_Pin will be written Low (though, keep in mind that
	// this only indicates that the DMA transfer has been initiated - DMA will continue running either until
	// its SPI command sequence concludes, or the next interrupt occurs, causing an ITClip error).
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 1);
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800172a:	480a      	ldr	r0, [pc, #40]	@ (8001754 <sample_interrupt_routine+0x5c>)
 800172c:	f7ff ffd2 	bl	80016d4 <write_pin>

	// Update variable indicate to wait until SPI DMA transfer completes.
	command_transfer_state = TRANSFER_WAIT;
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <sample_interrupt_routine+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]

	transfer_sequence_spi_dma();
 8001736:	f000 f845 	bl	80017c4 <transfer_sequence_spi_dma>

	// SPI DMA transfer has begun, so write Interrupt_Monitor_Pin Low and exit interrupt function,
	// returning to processing main loop.
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001740:	4804      	ldr	r0, [pc, #16]	@ (8001754 <sample_interrupt_routine+0x5c>)
 8001742:	f7ff ffc7 	bl	80016d4 <write_pin>
 8001746:	e000      	b.n	800174a <sample_interrupt_routine+0x52>
	if (loop_escape()) return;
 8001748:	bf00      	nop
}
 800174a:	bd80      	pop	{r7, pc}
 800174c:	42020800 	.word	0x42020800
 8001750:	20000004 	.word	0x20000004
 8001754:	42020c00 	.word	0x42020c00

08001758 <cycle_aux_commands>:


// Every sample period, cycle circularly through aux_command_list, adding this sample's AUX commands to the end of
// command_sequence_MOSI array which will be transmitted via SPI.
void cycle_aux_commands()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
	for (int i = 0; i < AUX_COMMANDS_PER_SEQUENCE; i++) {
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	e012      	b.n	800178a <cycle_aux_commands+0x32>
		command_sequence_MOSI[CONVERT_COMMANDS_PER_SEQUENCE + i] = aux_command_list[i][aux_command_index];
 8001764:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <cycle_aux_commands+0x60>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3320      	adds	r3, #32
 8001770:	4912      	ldr	r1, [pc, #72]	@ (80017bc <cycle_aux_commands+0x64>)
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	01d2      	lsls	r2, r2, #7
 8001776:	4402      	add	r2, r0
 8001778:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800177c:	b291      	uxth	r1, r2
 800177e:	4a10      	ldr	r2, [pc, #64]	@ (80017c0 <cycle_aux_commands+0x68>)
 8001780:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < AUX_COMMANDS_PER_SEQUENCE; i++) {
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3301      	adds	r3, #1
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b02      	cmp	r3, #2
 800178e:	dde9      	ble.n	8001764 <cycle_aux_commands+0xc>
	}
	if (++aux_command_index >= AUX_COMMAND_LIST_LENGTH) {
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <cycle_aux_commands+0x60>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3301      	adds	r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <cycle_aux_commands+0x60>)
 800179c:	4611      	mov	r1, r2
 800179e:	7019      	strb	r1, [r3, #0]
 80017a0:	b253      	sxtb	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da02      	bge.n	80017ac <cycle_aux_commands+0x54>
		aux_command_index = 0;
 80017a6:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <cycle_aux_commands+0x60>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
	// Note that if any command(s) are to be used with a command list different from AUX_COMMAND_LIST_LENGTH,
	// the above code should be commented out, and the last AUX_COMMANDS_PER_SEQUENCE of command_sequence_MOSI
	// should be written here. For example, if impedance check DAC control is used, zcheck_DAC_command_list_length
	// should replace AUX_COMMAND_LIST_LENGTH and zcheck_DAC_command_slot_position should be used to correctly index
	// commands from the proper aux_command_list slot.
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	200007a4 	.word	0x200007a4
 80017bc:	200004a4 	.word	0x200004a4
 80017c0:	20000410 	.word	0x20000410

080017c4 <transfer_sequence_spi_dma>:


// Begin receiving MISO data (RHD -> SPI -> DMA -> memory) and transmitting MOSI data (memory -> DMA -> SPI -> RHD).
void transfer_sequence_spi_dma()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	// HAL handles all of SPI DMA transfer with this single function call.

	// Note: this HAL function call seems to not be consistent in how long it takes, causing some jitter between Interrupt_Monitor_Pin (GPIO) and SPI signals.
	// However, SPI/DMA signals seem to be consistent with each other, so this shouldn't affect functionality.

	if (HAL_SPI_TransmitReceive_DMA(&SPI, (uint8_t*)command_sequence_MOSI, (uint8_t*)command_sequence_MISO,
 80017c8:	2323      	movs	r3, #35	@ 0x23
 80017ca:	4a06      	ldr	r2, [pc, #24]	@ (80017e4 <transfer_sequence_spi_dma+0x20>)
 80017cc:	4906      	ldr	r1, [pc, #24]	@ (80017e8 <transfer_sequence_spi_dma+0x24>)
 80017ce:	4807      	ldr	r0, [pc, #28]	@ (80017ec <transfer_sequence_spi_dma+0x28>)
 80017d0:	f008 fc28 	bl	800a024 <HAL_SPI_TransmitReceive_DMA>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <transfer_sequence_spi_dma+0x1a>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) != HAL_OK)
	{
		Error_Handler();
 80017da:	f7ff ff75 	bl	80016c8 <Error_Handler>

#else
	begin_spi_rx(LL_DMA_DEST_INCREMENT, (uint32_t) command_sequence_MISO, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
	begin_spi_tx(LL_DMA_SRC_INCREMENT, (uint32_t) command_sequence_MOSI, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
#endif
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000458 	.word	0x20000458
 80017e8:	20000410 	.word	0x20000410
 80017ec:	200000a4 	.word	0x200000a4

080017f0 <allocate_sample_memory>:


// Calculate suitable size for sample_memory array and allocate memory.
// Note, free_sample_memory() should be called after this function and when memory allocation is no longer needed.
void allocate_sample_memory()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	per_channel_sample_memory_capacity = calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 80017f6:	f000 f91f 	bl	8001a38 <calculate_sample_rate>
 80017fa:	ec53 2b10 	vmov	r2, r3, d0
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9b1 	bl	8000b68 <__aeabi_d2uiz>
 8001806:	4603      	mov	r3, r0
 8001808:	4a09      	ldr	r2, [pc, #36]	@ (8001830 <allocate_sample_memory+0x40>)
 800180a:	6013      	str	r3, [r2, #0]
	uint32_t total_sample_memory_capacity = NUM_SAMPLED_CHANNELS * per_channel_sample_memory_capacity;
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <allocate_sample_memory+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	607b      	str	r3, [r7, #4]
	sample_memory = (uint16_t *)malloc(total_sample_memory_capacity * sizeof(uint16_t));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4618      	mov	r0, r3
 800181a:	f00b fdd9 	bl	800d3d0 <malloc>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <allocate_sample_memory+0x44>)
 8001824:	601a      	str	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000000 	.word	0x20000000
 8001834:	200004a0 	.word	0x200004a0

08001838 <free_sample_memory>:


// Free memory previously allocated for sample_memory array.
// Note, this should be called after allocate_sample_memory() and when memory allocation is no longer needed.
void free_sample_memory()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	free(sample_memory);
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <free_sample_memory+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f00b fdcd 	bl	800d3e0 <free>
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200004a0 	.word	0x200004a0

08001850 <initialize_spi_with_dma>:
// so this function only has an LL implementation.
// Some of these settings (data length, memory location, and memory increment state)
// will be overwritten on a transfer-by-transfer basis, but the general configurations
// like transfer directions, peripheral addresses, and DMAMUX request ID can be permanently set here.
void initialize_spi_with_dma()
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	return;
 8001854:	bf00      	nop
	LL_DMA_SetDestIncMode(DMA, DMA_RX_CHANNEL, LL_DMA_DEST_INCREMENT);

	// Default to data length of full command sequence - may be overwritten for individual transfers
	LL_DMA_SetBlkDataLength(DMA, DMA_RX_CHANNEL, (CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) * 2);
#endif
}
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <end_spi_with_dma>:

// Write SPI/DMA registers to cleanly disable once DMA transfer ends.
// HAL automatically does this for each Send/Receive with SPI/DMA,
// so this function only has an LL implementation.
void end_spi_with_dma()
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
#ifdef USE_HAL
#else
	end_spi_rx();
	end_spi_tx();
#endif
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <handle_comm_error>:
// Handle communication error.
// Write ERROR_DETECTED_PIN (by default, red LED) High.
// Write each bit of a 4-bit error code to a pin so that by measuring pins, user can determine the error code.
// Enter an infinite loop, halting execution and allowing user to measure error pins.
void handle_comm_error(CommErrorStatus error_code)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	// No error, just return.
	if (error_code == 0) return;
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d03e      	beq.n	80018fa <handle_comm_error+0x8e>

	// Write ERROR_DETECTED_PIN (by default red LED) to communicate that an error occurred.
	write_pin(ERROR_DETECTED_PORT, ERROR_DETECTED_PIN, 1);
 800187c:	2201      	movs	r2, #1
 800187e:	2104      	movs	r1, #4
 8001880:	4820      	ldr	r0, [pc, #128]	@ (8001904 <handle_comm_error+0x98>)
 8001882:	f7ff ff27 	bl	80016d4 <write_pin>

	// Write 4 bits of error code to 4 pins.
	uint8_t error_code_bit_0 = (error_code & 0b0001) >> 0;
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]
	uint8_t error_code_bit_1 = (error_code & 0b0010) >> 1;
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	105b      	asrs	r3, r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	73bb      	strb	r3, [r7, #14]
	uint8_t error_code_bit_2 = (error_code & 0b0100) >> 2;
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	109b      	asrs	r3, r3, #2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	737b      	strb	r3, [r7, #13]
	uint8_t error_code_bit_3 = (error_code & 0b1000) >> 3;
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	10db      	asrs	r3, r3, #3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	733b      	strb	r3, [r7, #12]
	if (error_code_bit_0) write_pin(ErrorCode_Bit_0_GPIO_Port, ErrorCode_Bit_0_Pin, 1);
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <handle_comm_error+0x56>
 80018b8:	2201      	movs	r2, #1
 80018ba:	2140      	movs	r1, #64	@ 0x40
 80018bc:	4811      	ldr	r0, [pc, #68]	@ (8001904 <handle_comm_error+0x98>)
 80018be:	f7ff ff09 	bl	80016d4 <write_pin>
	if (error_code_bit_1) write_pin(ErrorCode_Bit_1_GPIO_Port, ErrorCode_Bit_1_Pin, 1);
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <handle_comm_error+0x66>
 80018c8:	2201      	movs	r2, #1
 80018ca:	2120      	movs	r1, #32
 80018cc:	480d      	ldr	r0, [pc, #52]	@ (8001904 <handle_comm_error+0x98>)
 80018ce:	f7ff ff01 	bl	80016d4 <write_pin>
	if (error_code_bit_2) write_pin(ErrorCode_Bit_2_GPIO_Port, ErrorCode_Bit_2_Pin, 1);
 80018d2:	7b7b      	ldrb	r3, [r7, #13]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <handle_comm_error+0x78>
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018de:	4809      	ldr	r0, [pc, #36]	@ (8001904 <handle_comm_error+0x98>)
 80018e0:	f7ff fef8 	bl	80016d4 <write_pin>
	if (error_code_bit_3) write_pin(ErrorCode_Bit_3_GPIO_Port, ErrorCode_Bit_3_Pin, 1);
 80018e4:	7b3b      	ldrb	r3, [r7, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <handle_comm_error+0x8a>
 80018ea:	2201      	movs	r2, #1
 80018ec:	2101      	movs	r1, #1
 80018ee:	4806      	ldr	r0, [pc, #24]	@ (8001908 <handle_comm_error+0x9c>)
 80018f0:	f7ff fef0 	bl	80016d4 <write_pin>

	// Enter infinite loop.
	while(1);
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	e7fd      	b.n	80018f6 <handle_comm_error+0x8a>
	if (error_code == 0) return;
 80018fa:	bf00      	nop
}
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	42021800 	.word	0x42021800
 8001908:	42021000 	.word	0x42021000

0800190c <spi_txrx_cplt_callback>:


// Callback function that executes when both Transmission and Reception of SPI have completed.
void spi_txrx_cplt_callback()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	// If main loop is active, drive Main_Monitor_Pin low, write data to memory, transmit data in realtime, and update command_transfer_state
	if (main_loop_active) {
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <spi_txrx_cplt_callback+0x34>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00d      	beq.n	8001936 <spi_txrx_cplt_callback+0x2a>
		// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
		write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001920:	4808      	ldr	r0, [pc, #32]	@ (8001944 <spi_txrx_cplt_callback+0x38>)
 8001922:	f7ff fed7 	bl	80016d4 <write_pin>

		// User-specified function - here is where specified channel(s) can be written to memory.
		write_data_to_memory();
 8001926:	f002 fa5d 	bl	8003de4 <write_data_to_memory>

		// User-specified function - here is where user can transmit data in real time every sample period.
		transmit_data_realtime();
 800192a:	f002 fa8d 	bl	8003e48 <transmit_data_realtime>

		// Update state variable to show that transfer has completed.
		command_transfer_state = TRANSFER_COMPLETE;
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <spi_txrx_cplt_callback+0x3c>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]
#else
		end_spi_rx();
#endif
		reception_in_progress = 0;
	}
}
 8001934:	e002      	b.n	800193c <spi_txrx_cplt_callback+0x30>
		reception_in_progress = 0;
 8001936:	4b05      	ldr	r3, [pc, #20]	@ (800194c <spi_txrx_cplt_callback+0x40>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200007a6 	.word	0x200007a6
 8001944:	42020800 	.word	0x42020800
 8001948:	20000004 	.word	0x20000004
 800194c:	200007a5 	.word	0x200007a5

08001950 <spi_error_callback>:


// Callback function to show that an SPI error occurred.
void spi_error_callback()
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
	command_transfer_state = TRANSFER_ERROR;
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <spi_error_callback+0x14>)
 8001956:	2202      	movs	r2, #2
 8001958:	601a      	str	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	20000004 	.word	0x20000004

08001968 <write_initial_reg_values>:
// Determine suitable values to be written to registers
// (based on default acquisition values from RHX software).
// These suitable default values are saved to RHDConfigParameters argument.
// Write these values to registers, and calibrate and run for 9 commands to fully initialize chip.
void write_initial_reg_values(RHDConfigParameters *p)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	@ 0x38
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	// Determine suitable values to be written for each of the registers.
	p->sample_rate = calculate_sample_rate();
 8001970:	f000 f862 	bl	8001a38 <calculate_sample_rate>
 8001974:	eeb0 7a40 	vmov.f32	s14, s0
 8001978:	eef0 7a60 	vmov.f32	s15, s1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	ed83 7b00 	vstr	d7, [r3]
	set_default_rhd_settings(p);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f001 fad0 	bl	8002f28 <set_default_rhd_settings>

	uint16_t registers[18];
	for (int i = 0; i < 18; i++) {
 8001988:	2300      	movs	r3, #0
 800198a:	637b      	str	r3, [r7, #52]	@ 0x34
 800198c:	e00e      	b.n	80019ac <write_initial_reg_values+0x44>
		registers[i] = get_register_value(p, i);
 800198e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f001 fc19 	bl	80031c8 <get_register_value>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	3338      	adds	r3, #56	@ 0x38
 80019a0:	443b      	add	r3, r7
 80019a2:	f823 2c30 	strh.w	r2, [r3, #-48]
	for (int i = 0; i < 18; i++) {
 80019a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019a8:	3301      	adds	r3, #1
 80019aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ae:	2b11      	cmp	r3, #17
 80019b0:	dded      	ble.n	800198e <write_initial_reg_values+0x26>
	}

	// Send a few dummy commands in case chip is still powering up.
	send_spi_command(read_command(63));
 80019b2:	203f      	movs	r0, #63	@ 0x3f
 80019b4:	f001 fdcf 	bl	8003556 <read_command>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 fa99 	bl	8001ef2 <send_spi_command>
	send_spi_command(read_command(63));
 80019c0:	203f      	movs	r0, #63	@ 0x3f
 80019c2:	f001 fdc8 	bl	8003556 <read_command>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fa92 	bl	8001ef2 <send_spi_command>


	// Write suitable default values for RHD registers.
	for (int i = 0; i < 18; i++) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019d2:	e013      	b.n	80019fc <write_initial_reg_values+0x94>
		send_spi_command(write_command(i, registers[i]));
 80019d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	3338      	adds	r3, #56	@ 0x38
 80019de:	443b      	add	r3, r7
 80019e0:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4619      	mov	r1, r3
 80019e8:	4610      	mov	r0, r2
 80019ea:	f001 fd97 	bl	800351c <write_command>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fa7e 	bl	8001ef2 <send_spi_command>
	for (int i = 0; i < 18; i++) {
 80019f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f8:	3301      	adds	r3, #1
 80019fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80019fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019fe:	2b11      	cmp	r3, #17
 8001a00:	dde8      	ble.n	80019d4 <write_initial_reg_values+0x6c>
	}

	// Calibrate and run for 9 commands.
	send_spi_command(calibrate_command());
 8001a02:	f001 fd82 	bl	800350a <calibrate_command>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fa72 	bl	8001ef2 <send_spi_command>
	for (int i = 0; i < 9; i++) {
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a12:	e009      	b.n	8001a28 <write_initial_reg_values+0xc0>
		send_spi_command(read_command(40));
 8001a14:	2028      	movs	r0, #40	@ 0x28
 8001a16:	f001 fd9e 	bl	8003556 <read_command>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fa68 	bl	8001ef2 <send_spi_command>
	for (int i = 0; i < 9; i++) {
 8001a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a24:	3301      	adds	r3, #1
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	ddf2      	ble.n	8001a14 <write_initial_reg_values+0xac>
	}
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	3738      	adds	r7, #56	@ 0x38
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <calculate_sample_rate>:
// Check timer clock input, clock division, prescaling, and counter period
// to determine the rate at which INTERRUPT_TIM interrupts occur (sample rate).
// Note that this reads clock and timer configuration register values during runtime,
// so this function should adapt to any changes made to the .ioc.
double calculate_sample_rate()
{
 8001a38:	b5b0      	push	{r4, r5, r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
	uint32_t apb1_timer_freq, ckd_value, psc_value, counter_period;

#ifdef USE_HAL
	apb1_timer_freq = HAL_RCC_GetPCLK1Freq();
 8001a3e:	f005 f9c1 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 8001a42:	61f8      	str	r0, [r7, #28]
	ckd_value = INTERRUPT_TIM.Init.ClockDivision;
 8001a44:	4b28      	ldr	r3, [pc, #160]	@ (8001ae8 <calculate_sample_rate+0xb0>)
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	61bb      	str	r3, [r7, #24]
	psc_value = INTERRUPT_TIM.Init.Prescaler;
 8001a4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <calculate_sample_rate+0xb0>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	617b      	str	r3, [r7, #20]
	counter_period = INTERRUPT_TIM.Init.Period;
 8001a50:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <calculate_sample_rate+0xb0>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	613b      	str	r3, [r7, #16]
	ckd_value = LL_TIM_GetClockDivision(INTERRUPT_TIM);
	psc_value = LL_TIM_GetPrescaler(INTERRUPT_TIM);
	counter_period = LL_TIM_GetAutoReload(INTERRUPT_TIM);
#endif

	double ckd_factor = 1.0;
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b24      	ldr	r3, [pc, #144]	@ (8001aec <calculate_sample_rate+0xb4>)
 8001a5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (ckd_value == 0b01) {
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d106      	bne.n	8001a74 <calculate_sample_rate+0x3c>
		ckd_factor = 2;
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001a72:	e007      	b.n	8001a84 <calculate_sample_rate+0x4c>
	} else if (ckd_value == 0b10) {
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d104      	bne.n	8001a84 <calculate_sample_rate+0x4c>
		ckd_factor = 4;
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001af0 <calculate_sample_rate+0xb8>)
 8001a80:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	double psc_factor = psc_value + 1;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd43 	bl	8000514 <__aeabi_ui2d>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double input_frequency = apb1_timer_freq / (ckd_factor * psc_factor);
 8001a96:	69f8      	ldr	r0, [r7, #28]
 8001a98:	f7fe fd3c 	bl	8000514 <__aeabi_ui2d>
 8001a9c:	4604      	mov	r4, r0
 8001a9e:	460d      	mov	r5, r1
 8001aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001aa4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001aa8:	f7fe fdae 	bl	8000608 <__aeabi_dmul>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	f7fe fed2 	bl	800085c <__aeabi_ddiv>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	e9c7 2300 	strd	r2, r3, [r7]
	return input_frequency / counter_period;
 8001ac0:	6938      	ldr	r0, [r7, #16]
 8001ac2:	f7fe fd27 	bl	8000514 <__aeabi_ui2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ace:	f7fe fec5 	bl	800085c <__aeabi_ddiv>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ada:	eeb0 0a47 	vmov.f32	s0, s14
 8001ade:	eef0 0a67 	vmov.f32	s1, s15
 8001ae2:	3728      	adds	r7, #40	@ 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae8:	20000224 	.word	0x20000224
 8001aec:	3ff00000 	.word	0x3ff00000
 8001af0:	40100000 	.word	0x40100000

08001af4 <create_convert_sequence>:
// and load them into command_sequence_MOSI.
// If the channel_numbers_to_convert parameter is NULL,
// create CONVERT_COMMANDS_PER_SEQUENCE commands from channel 0 (default 0 - 31).
// Otherwise, populate the CONVERT commands in the order specified by channel_numbers_to_convert.
void create_convert_sequence(uint8_t* channel_numbers_to_convert)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	// If no list of channel numbers is provided,
	// then assume CONVERT should occur for channels 0 - CONVERT_COMMANDS_PER_SEQUENCE.
	if (channel_numbers_to_convert == NULL) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d115      	bne.n	8001b2e <create_convert_sequence+0x3a>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e00e      	b.n	8001b26 <create_convert_sequence+0x32>
			command_sequence_MOSI[i] = convert_command(i, 0);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f001 fcde 	bl	80034d0 <convert_command>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4619      	mov	r1, r3
 8001b18:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <create_convert_sequence+0x70>)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b1f      	cmp	r3, #31
 8001b2a:	dded      	ble.n	8001b08 <create_convert_sequence+0x14>
	else {
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
		}
	}
}
 8001b2c:	e016      	b.n	8001b5c <create_convert_sequence+0x68>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	e010      	b.n	8001b56 <create_convert_sequence+0x62>
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f001 fcc6 	bl	80034d0 <convert_command>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4619      	mov	r1, r3
 8001b48:	4a06      	ldr	r2, [pc, #24]	@ (8001b64 <create_convert_sequence+0x70>)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	3301      	adds	r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b1f      	cmp	r3, #31
 8001b5a:	ddeb      	ble.n	8001b34 <create_convert_sequence+0x40>
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000410 	.word	0x20000410

08001b68 <create_command_list_RHD_register_config>:

// Create a list of num_commands commands to program most RAM registers on an RHD2000 chip, read those values
// back to confirm programming, read ROM registers, and (if calibrate == true) run ADC calibration.
// Return the number of populated commands. num_commands must be 60 or greater.
int create_command_list_RHD_register_config(RHDConfigParameters *p, uint16_t *command_list, uint8_t calibrate, int num_commands)
{
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71fb      	strb	r3, [r7, #7]
	int command_index = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
	// Start with a few dummy commands in case chip is still powering up.
	command_list[command_index++] = read_command(63);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	61fa      	str	r2, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	18d4      	adds	r4, r2, r3
 8001b88:	203f      	movs	r0, #63	@ 0x3f
 8001b8a:	f001 fce4 	bl	8003556 <read_command>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(63);
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	61fa      	str	r2, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	18d4      	adds	r4, r2, r3
 8001b9e:	203f      	movs	r0, #63	@ 0x3f
 8001ba0:	f001 fcd9 	bl	8003556 <read_command>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	8023      	strh	r3, [r4, #0]


	// Program RAM registers.
	for (int reg = 0; reg < 18; ++reg) {
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	e01d      	b.n	8001bea <create_command_list_RHD_register_config+0x82>
		// Don't program Register 3 (MUX Load, Temperature Sensor, and Auxiliary Digital Output)
		// or 6 (Impedance Check DAC) here;
		// control temperature sensor and DAC waveforms in other command streams.
		if (reg == 3 || reg == 6) continue;
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d016      	beq.n	8001be2 <create_command_list_RHD_register_config+0x7a>
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d013      	beq.n	8001be2 <create_command_list_RHD_register_config+0x7a>
		command_list[command_index++] = write_command(reg, get_register_value(p, reg));
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	b2dd      	uxtb	r5, r3
 8001bbe:	69b9      	ldr	r1, [r7, #24]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f001 fb01 	bl	80031c8 <get_register_value>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b2d9      	uxtb	r1, r3
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	61fa      	str	r2, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	18d4      	adds	r4, r2, r3
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	f001 fca0 	bl	800351c <write_command>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	8023      	strh	r3, [r4, #0]
 8001be0:	e000      	b.n	8001be4 <create_command_list_RHD_register_config+0x7c>
		if (reg == 3 || reg == 6) continue;
 8001be2:	bf00      	nop
	for (int reg = 0; reg < 18; ++reg) {
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	3301      	adds	r3, #1
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b11      	cmp	r3, #17
 8001bee:	ddde      	ble.n	8001bae <create_command_list_RHD_register_config+0x46>
	}


	// Read ROM registers.
	command_list[command_index++] = read_command(63);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	61fa      	str	r2, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	18d4      	adds	r4, r2, r3
 8001bfc:	203f      	movs	r0, #63	@ 0x3f
 8001bfe:	f001 fcaa 	bl	8003556 <read_command>
 8001c02:	4603      	mov	r3, r0
 8001c04:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(62);
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	61fa      	str	r2, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	18d4      	adds	r4, r2, r3
 8001c12:	203e      	movs	r0, #62	@ 0x3e
 8001c14:	f001 fc9f 	bl	8003556 <read_command>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(61);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	61fa      	str	r2, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	18d4      	adds	r4, r2, r3
 8001c28:	203d      	movs	r0, #61	@ 0x3d
 8001c2a:	f001 fc94 	bl	8003556 <read_command>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(60);
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	61fa      	str	r2, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	18d4      	adds	r4, r2, r3
 8001c3e:	203c      	movs	r0, #60	@ 0x3c
 8001c40:	f001 fc89 	bl	8003556 <read_command>
 8001c44:	4603      	mov	r3, r0
 8001c46:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(59);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	61fa      	str	r2, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	18d4      	adds	r4, r2, r3
 8001c54:	203b      	movs	r0, #59	@ 0x3b
 8001c56:	f001 fc7e 	bl	8003556 <read_command>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	8023      	strh	r3, [r4, #0]

	// Read chip name from ROM.
	command_list[command_index++] = read_command(48);
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	61fa      	str	r2, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	18d4      	adds	r4, r2, r3
 8001c6a:	2030      	movs	r0, #48	@ 0x30
 8001c6c:	f001 fc73 	bl	8003556 <read_command>
 8001c70:	4603      	mov	r3, r0
 8001c72:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(49);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	61fa      	str	r2, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	18d4      	adds	r4, r2, r3
 8001c80:	2031      	movs	r0, #49	@ 0x31
 8001c82:	f001 fc68 	bl	8003556 <read_command>
 8001c86:	4603      	mov	r3, r0
 8001c88:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(50);
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	61fa      	str	r2, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	18d4      	adds	r4, r2, r3
 8001c96:	2032      	movs	r0, #50	@ 0x32
 8001c98:	f001 fc5d 	bl	8003556 <read_command>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(51);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	61fa      	str	r2, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	18d4      	adds	r4, r2, r3
 8001cac:	2033      	movs	r0, #51	@ 0x33
 8001cae:	f001 fc52 	bl	8003556 <read_command>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(52);
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	61fa      	str	r2, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	18d4      	adds	r4, r2, r3
 8001cc2:	2034      	movs	r0, #52	@ 0x34
 8001cc4:	f001 fc47 	bl	8003556 <read_command>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(53);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	61fa      	str	r2, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	18d4      	adds	r4, r2, r3
 8001cd8:	2035      	movs	r0, #53	@ 0x35
 8001cda:	f001 fc3c 	bl	8003556 <read_command>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(54);
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	61fa      	str	r2, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	18d4      	adds	r4, r2, r3
 8001cee:	2036      	movs	r0, #54	@ 0x36
 8001cf0:	f001 fc31 	bl	8003556 <read_command>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(55);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	61fa      	str	r2, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	18d4      	adds	r4, r2, r3
 8001d04:	2037      	movs	r0, #55	@ 0x37
 8001d06:	f001 fc26 	bl	8003556 <read_command>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	8023      	strh	r3, [r4, #0]

	// Read Intan name from ROM.
	command_list[command_index++] = read_command(40);
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	61fa      	str	r2, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	18d4      	adds	r4, r2, r3
 8001d1a:	2028      	movs	r0, #40	@ 0x28
 8001d1c:	f001 fc1b 	bl	8003556 <read_command>
 8001d20:	4603      	mov	r3, r0
 8001d22:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(41);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	61fa      	str	r2, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	18d4      	adds	r4, r2, r3
 8001d30:	2029      	movs	r0, #41	@ 0x29
 8001d32:	f001 fc10 	bl	8003556 <read_command>
 8001d36:	4603      	mov	r3, r0
 8001d38:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(42);
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	61fa      	str	r2, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	18d4      	adds	r4, r2, r3
 8001d46:	202a      	movs	r0, #42	@ 0x2a
 8001d48:	f001 fc05 	bl	8003556 <read_command>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(43);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	61fa      	str	r2, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	18d4      	adds	r4, r2, r3
 8001d5c:	202b      	movs	r0, #43	@ 0x2b
 8001d5e:	f001 fbfa 	bl	8003556 <read_command>
 8001d62:	4603      	mov	r3, r0
 8001d64:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(44);
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	61fa      	str	r2, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	18d4      	adds	r4, r2, r3
 8001d72:	202c      	movs	r0, #44	@ 0x2c
 8001d74:	f001 fbef 	bl	8003556 <read_command>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	8023      	strh	r3, [r4, #0]

	// Read back RAM registers to confirm programming.
	for (int reg = 0; reg < 18; ++reg) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e00f      	b.n	8001da2 <create_command_list_RHD_register_config+0x23a>
		command_list[command_index++] = read_command(reg);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	b2d9      	uxtb	r1, r3
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	61fa      	str	r2, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	18d4      	adds	r4, r2, r3
 8001d92:	4608      	mov	r0, r1
 8001d94:	f001 fbdf 	bl	8003556 <read_command>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	8023      	strh	r3, [r4, #0]
	for (int reg = 0; reg < 18; ++reg) {
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b11      	cmp	r3, #17
 8001da6:	ddec      	ble.n	8001d82 <create_command_list_RHD_register_config+0x21a>
	}

	// Optionally, run ADC calibration (should only be run once after board is plugged in).
	if (calibrate) {
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00a      	beq.n	8001dc4 <create_command_list_RHD_register_config+0x25c>
		command_list[command_index++] = calibrate_command();
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	61fa      	str	r2, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	18d4      	adds	r4, r2, r3
 8001dba:	f001 fba6 	bl	800350a <calibrate_command>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	8023      	strh	r3, [r4, #0]
 8001dc2:	e00a      	b.n	8001dda <create_command_list_RHD_register_config+0x272>
	} else {
		command_list[command_index++] = read_command(63);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	61fa      	str	r2, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	18d4      	adds	r4, r2, r3
 8001dd0:	203f      	movs	r0, #63	@ 0x3f
 8001dd2:	f001 fbc0 	bl	8003556 <read_command>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	8023      	strh	r3, [r4, #0]
	}

	// Program amplifier 31-63 power up/down registers in case a RHD2164 is connected.
	// Note: We don't read these registers back, since they are only 'visible' on MISO B.
	command_list[command_index++] = write_command(18, get_register_value(p, 18));
 8001dda:	2112      	movs	r1, #18
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f001 f9f3 	bl	80031c8 <get_register_value>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b2d9      	uxtb	r1, r3
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	61fa      	str	r2, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	18d4      	adds	r4, r2, r3
 8001df2:	2012      	movs	r0, #18
 8001df4:	f001 fb92 	bl	800351c <write_command>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = write_command(19, get_register_value(p, 19));
 8001dfc:	2113      	movs	r1, #19
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f001 f9e2 	bl	80031c8 <get_register_value>
 8001e04:	4603      	mov	r3, r0
 8001e06:	b2d9      	uxtb	r1, r3
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	61fa      	str	r2, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	18d4      	adds	r4, r2, r3
 8001e14:	2013      	movs	r0, #19
 8001e16:	f001 fb81 	bl	800351c <write_command>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = write_command(20, get_register_value(p, 20));
 8001e1e:	2114      	movs	r1, #20
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f001 f9d1 	bl	80031c8 <get_register_value>
 8001e26:	4603      	mov	r3, r0
 8001e28:	b2d9      	uxtb	r1, r3
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	61fa      	str	r2, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	18d4      	adds	r4, r2, r3
 8001e36:	2014      	movs	r0, #20
 8001e38:	f001 fb70 	bl	800351c <write_command>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = write_command(21, get_register_value(p, 21));
 8001e40:	2115      	movs	r1, #21
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f001 f9c0 	bl	80031c8 <get_register_value>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	b2d9      	uxtb	r1, r3
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	61fa      	str	r2, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	18d4      	adds	r4, r2, r3
 8001e58:	2015      	movs	r0, #21
 8001e5a:	f001 fb5f 	bl	800351c <write_command>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	8023      	strh	r3, [r4, #0]

	// End with a dummy command.
	command_list[command_index++] = read_command(63);
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	61fa      	str	r2, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	18d4      	adds	r4, r2, r3
 8001e6e:	203f      	movs	r0, #63	@ 0x3f
 8001e70:	f001 fb71 	bl	8003556 <read_command>
 8001e74:	4603      	mov	r3, r0
 8001e76:	8023      	strh	r3, [r4, #0]

	for (int i = 0; i < (num_commands - 60); ++i) {
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e00d      	b.n	8001e9a <create_command_list_RHD_register_config+0x332>
		command_list[command_index++] = read_command(63);
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	61fa      	str	r2, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	18d4      	adds	r4, r2, r3
 8001e8a:	203f      	movs	r0, #63	@ 0x3f
 8001e8c:	f001 fb63 	bl	8003556 <read_command>
 8001e90:	4603      	mov	r3, r0
 8001e92:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < (num_commands - 60); ++i) {
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	3301      	adds	r3, #1
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	3b3c      	subs	r3, #60	@ 0x3c
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	dbec      	blt.n	8001e7e <create_command_list_RHD_register_config+0x316>
	}
	return command_index;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bdb0      	pop	{r4, r5, r7, pc}

08001eae <create_command_list_dummy>:


// Create a list of dummy commands with a specific command.
// Return the length of the command list (which should be n).
int create_command_list_dummy(RHDConfigParameters *p, uint16_t *command_list, int n, uint16_t cmd)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b087      	sub	sp, #28
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	807b      	strh	r3, [r7, #2]
	int command_index = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < n; i++) {
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e00a      	b.n	8001edc <create_command_list_dummy+0x2e>
		command_list[command_index++] = cmd;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	617a      	str	r2, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < n; i++) {
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbf0      	blt.n	8001ec6 <create_command_list_dummy+0x18>
	}

	return command_index;
 8001ee4:	697b      	ldr	r3, [r7, #20]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <send_spi_command>:
}


// Send provided 16-bit word 'tx_data' over SPI, ignoring resultant 16-bit received word.
void send_spi_command(uint16_t tx_data)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	80fb      	strh	r3, [r7, #6]
	uint16_t dummy_data = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	81fb      	strh	r3, [r7, #14]
	send_receive_spi_command(tx_data, &dummy_data);
 8001f00:	f107 020e 	add.w	r2, r7, #14
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f805 	bl	8001f18 <send_receive_spi_command>
}
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <send_receive_spi_command>:

// Send provided 16-bit word 'tx_data' over SPI, and pass resultant 16-bit received work by reference.
// Note that the pipelined nature of the SPI communication has a 2-command delay,
// so the obtained result corresponds to the command from 2 transactions earlier.
void send_receive_spi_command(uint16_t tx_data, uint16_t *rx_data)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	80fb      	strh	r3, [r7, #6]
	reception_in_progress = 1;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <send_receive_spi_command+0x40>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
#ifdef USE_HAL

	if (HAL_SPI_TransmitReceive_DMA(&SPI, (uint8_t*) &tx_data, (uint8_t*)rx_data, 1) != HAL_OK)
 8001f2a:	1db9      	adds	r1, r7, #6
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	480a      	ldr	r0, [pc, #40]	@ (8001f5c <send_receive_spi_command+0x44>)
 8001f32:	f008 f877 	bl	800a024 <HAL_SPI_TransmitReceive_DMA>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <send_receive_spi_command+0x28>
	{
		Error_Handler();
 8001f3c:	f7ff fbc4 	bl	80016c8 <Error_Handler>

#else
	begin_spi_rx(LL_DMA_DEST_FIXED, (uint32_t) rx_data, 1);
	begin_spi_tx(LL_DMA_SRC_FIXED, (uint32_t) &tx_data, 1);
#endif
	while (reception_in_progress == 1) {}
 8001f40:	bf00      	nop
 8001f42:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <send_receive_spi_command+0x40>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d0fa      	beq.n	8001f42 <send_receive_spi_command+0x2a>
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200007a5 	.word	0x200007a5
 8001f5c:	200000a4 	.word	0x200000a4

08001f60 <HAL_SPI_TxRxCpltCallback>:


#ifdef USE_HAL
// HAL calls this function when both Tx and Rx have completed.
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	if (hspi == &SPI) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <HAL_SPI_TxRxCpltCallback+0x1c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <HAL_SPI_TxRxCpltCallback+0x14>
		spi_txrx_cplt_callback();
 8001f70:	f7ff fccc 	bl	800190c <spi_txrx_cplt_callback>
	}
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	200000a4 	.word	0x200000a4

08001f80 <HAL_SPI_ErrorCallback>:


// HAL calls this function when an error in the SPI communication has been detected.
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	spi_error_callback();
 8001f88:	f7ff fce2 	bl	8001950 <spi_error_callback>
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_UART_TxCpltCallback>:


// HAL calls this function when UART Tx has completed.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	uart_ready = 1;
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <HAL_UART_TxCpltCallback+0x1c>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000008 	.word	0x20000008

08001fb4 <set_DigOut_hiZ>:
}


// Set auxiliary digital output to high-impedance (HiZ) state.
void set_DigOut_hiZ(RHDConfigParameters *p)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	p->digOut = 0;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	635a      	str	r2, [r3, #52]	@ 0x34
	p->digOut_hiZ = 1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	0000      	movs	r0, r0
	...

08001fd8 <set_DSP_cutoff_freq>:


// Set the DSP offset removal filter cutoff frequency as closely to the requested
// newDspCutoffFreq (in Hz) as possible; returns the actual cutoff frequency (in Hz).
double set_DSP_cutoff_freq(RHDConfigParameters *p, double new_DSP_cutoff_freq)
{
 8001fd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fdc:	b0b0      	sub	sp, #192	@ 0xc0
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	ed87 0b00 	vstr	d0, [r7]
	double f_cutoff[16] = {0};
 8001fe6:	f107 0310 	add.w	r3, r7, #16
 8001fea:	2280      	movs	r2, #128	@ 0x80
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f00b fca4 	bl	800d93c <memset>
	// Note: f_cutoff[0] = 0.0 here, but this index should not be used.
	for (int n = 1; n < 16; ++n) {
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001ffa:	e045      	b.n	8002088 <set_DSP_cutoff_freq+0xb0>
		double x = pow(2.0, (double) n);
 8001ffc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002000:	f7fe fa98 	bl	8000534 <__aeabi_i2d>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	ec43 2b11 	vmov	d1, r2, r3
 800200c:	ed9f 0b5e 	vldr	d0, [pc, #376]	@ 8002188 <set_DSP_cutoff_freq+0x1b0>
 8002010:	f00b ff18 	bl	800de44 <pow>
 8002014:	ed87 0b24 	vstr	d0, [r7, #144]	@ 0x90
		f_cutoff[n] = p->sample_rate * log(x / (x - 1.0)) / (2.0 * M_PI);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	4b5f      	ldr	r3, [pc, #380]	@ (80021a0 <set_DSP_cutoff_freq+0x1c8>)
 8002024:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002028:	f7fe f936 	bl	8000298 <__aeabi_dsub>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002034:	f7fe fc12 	bl	800085c <__aeabi_ddiv>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	ec43 2b17 	vmov	d7, r2, r3
 8002040:	eeb0 0a47 	vmov.f32	s0, s14
 8002044:	eef0 0a67 	vmov.f32	s1, s15
 8002048:	f00b fe7e 	bl	800dd48 <log>
 800204c:	ec53 2b10 	vmov	r2, r3, d0
 8002050:	4640      	mov	r0, r8
 8002052:	4649      	mov	r1, r9
 8002054:	f7fe fad8 	bl	8000608 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	a34b      	add	r3, pc, #300	@ (adr r3, 8002190 <set_DSP_cutoff_freq+0x1b8>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe fbf9 	bl	800085c <__aeabi_ddiv>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002072:	00c9      	lsls	r1, r1, #3
 8002074:	31c0      	adds	r1, #192	@ 0xc0
 8002076:	4439      	add	r1, r7
 8002078:	39b0      	subs	r1, #176	@ 0xb0
 800207a:	e9c1 2300 	strd	r2, r3, [r1]
	for (int n = 1; n < 16; ++n) {
 800207e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002082:	3301      	adds	r3, #1
 8002084:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002088:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800208c:	2b0f      	cmp	r3, #15
 800208e:	ddb5      	ble.n	8001ffc <set_DSP_cutoff_freq+0x24>
	}
	double log_new_DSP_cutoff_freq = log10(new_DSP_cutoff_freq);
 8002090:	ed97 0b00 	vldr	d0, [r7]
 8002094:	f00b fe98 	bl	800ddc8 <log10>
 8002098:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

	// Find the closest value to the requested cutoff frequency (on a logarithmic scale).
	if (new_DSP_cutoff_freq > f_cutoff[1]) {
 800209c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020a4:	f7fe fd40 	bl	8000b28 <__aeabi_dcmpgt>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <set_DSP_cutoff_freq+0xde>
		p->DSP_cutoff_freq = 1;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80020b4:	e055      	b.n	8002162 <set_DSP_cutoff_freq+0x18a>
	} else if (new_DSP_cutoff_freq < f_cutoff[15]) {
 80020b6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80020ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020be:	f7fe fd15 	bl	8000aec <__aeabi_dcmplt>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <set_DSP_cutoff_freq+0xf8>
		p->DSP_cutoff_freq = 15;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	220f      	movs	r2, #15
 80020cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80020ce:	e048      	b.n	8002162 <set_DSP_cutoff_freq+0x18a>
	} else {
		double min_log_diff = 10000000.0;
 80020d0:	a331      	add	r3, pc, #196	@ (adr r3, 8002198 <set_DSP_cutoff_freq+0x1c0>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		for (int n = 1; n < 16; n++) {
 80020da:	2301      	movs	r3, #1
 80020dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80020e0:	e03b      	b.n	800215a <set_DSP_cutoff_freq+0x182>
			double log_f_cutoff = log10(f_cutoff[n]);
 80020e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	33c0      	adds	r3, #192	@ 0xc0
 80020ea:	443b      	add	r3, r7
 80020ec:	3bb0      	subs	r3, #176	@ 0xb0
 80020ee:	ed93 7b00 	vldr	d7, [r3]
 80020f2:	eeb0 0a47 	vmov.f32	s0, s14
 80020f6:	eef0 0a67 	vmov.f32	s1, s15
 80020fa:	f00b fe65 	bl	800ddc8 <log10>
 80020fe:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
			if (fabs(log_new_DSP_cutoff_freq - log_f_cutoff) < min_log_diff) {
 8002102:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002106:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800210a:	f7fe f8c5 	bl	8000298 <__aeabi_dsub>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4614      	mov	r4, r2
 8002114:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002118:	4622      	mov	r2, r4
 800211a:	462b      	mov	r3, r5
 800211c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002120:	f7fe fd02 	bl	8000b28 <__aeabi_dcmpgt>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d012      	beq.n	8002150 <set_DSP_cutoff_freq+0x178>
				min_log_diff = fabs(log_new_DSP_cutoff_freq - log_f_cutoff);
 800212a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800212e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002132:	f7fe f8b1 	bl	8000298 <__aeabi_dsub>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4611      	mov	r1, r2
 800213c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8002140:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
				p->DSP_cutoff_freq = n;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800214e:	64da      	str	r2, [r3, #76]	@ 0x4c
		for (int n = 1; n < 16; n++) {
 8002150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002154:	3301      	adds	r3, #1
 8002156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800215a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800215e:	2b0f      	cmp	r3, #15
 8002160:	ddbf      	ble.n	80020e2 <set_DSP_cutoff_freq+0x10a>
			}
		}
	}
	return f_cutoff[p->DSP_cutoff_freq];
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	33c0      	adds	r3, #192	@ 0xc0
 800216a:	443b      	add	r3, r7
 800216c:	3bb0      	subs	r3, #176	@ 0xb0
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	ec43 2b17 	vmov	d7, r2, r3
}
 8002176:	eeb0 0a47 	vmov.f32	s0, s14
 800217a:	eef0 0a67 	vmov.f32	s1, s15
 800217e:	37c0      	adds	r7, #192	@ 0xc0
 8002180:	46bd      	mov	sp, r7
 8002182:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002186:	bf00      	nop
 8002188:	00000000 	.word	0x00000000
 800218c:	40000000 	.word	0x40000000
 8002190:	54442d18 	.word	0x54442d18
 8002194:	401921fb 	.word	0x401921fb
 8002198:	00000000 	.word	0x00000000
 800219c:	416312d0 	.word	0x416312d0
 80021a0:	3ff00000 	.word	0x3ff00000

080021a4 <set_zcheck_scale>:


// Select the series capacitor used to convert the voltage waveform generated by the on-chip DAC into an AC
// current waveform that stimulates a selected electrode for impedance testing (ZcheckCs100fF, ZcheckCs1pF, or Zcheck10pF).
void set_zcheck_scale(RHDConfigParameters *p, ZcheckCs scale)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	70fb      	strb	r3, [r7, #3]
	switch (scale) {
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d00e      	beq.n	80021d4 <set_zcheck_scale+0x30>
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	dc10      	bgt.n	80021dc <set_zcheck_scale+0x38>
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <set_zcheck_scale+0x20>
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d004      	beq.n	80021cc <set_zcheck_scale+0x28>
		break;
	case ZcheckCs10pF:
		p->zcheck_scale = 0x03;
		break;
	}
}
 80021c2:	e00b      	b.n	80021dc <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x00;		// Cs = 0.1 pF
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 80021ca:	e007      	b.n	80021dc <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x01;		// Cs = 1.0 pF
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 80021d2:	e003      	b.n	80021dc <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x03;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2203      	movs	r2, #3
 80021d8:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 80021da:	bf00      	nop
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <set_zcheck_polarity>:


// Select impedance testing of positive or negative amplifier inputs (RHD2216 only), based on
// the variable polarity (ZcheckPositiveInput or ZcheckNegativeInput).
void set_zcheck_polarity(RHDConfigParameters *p, ZcheckPolarity polarity)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70fb      	strb	r3, [r7, #3]
	p->zcheck_sel_pol = polarity == ZcheckNegativeInput; // Negative: 1, Positive: 0
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <set_zcheck_channel>:


// Select the amplifier channel for impedance testing.
int set_zcheck_channel(RHDConfigParameters *p, int channel)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
	if (channel < 0 || channel > max_num_channels_per_chip() - 1) {
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db05      	blt.n	800222e <set_zcheck_channel+0x1c>
 8002222:	f000 fe77 	bl	8002f14 <max_num_channels_per_chip>
 8002226:	4602      	mov	r2, r0
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	4293      	cmp	r3, r2
 800222c:	db02      	blt.n	8002234 <set_zcheck_channel+0x22>
		return -1;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
 8002232:	e004      	b.n	800223e <set_zcheck_channel+0x2c>
	} else {
		p->zcheck_select = channel;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	669a      	str	r2, [r3, #104]	@ 0x68
		return p->zcheck_select;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
	}
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <power_up_all_amps>:
}


// Power up all amplifiers on chip.
void power_up_all_amps(RHDConfigParameters *p)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	e008      	b.n	8002266 <power_up_all_amps+0x20>
		p->amp_pwr[channel] = 1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	3228      	adds	r2, #40	@ 0x28
 800225a:	2101      	movs	r1, #1
 800225c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3301      	adds	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	f000 fe55 	bl	8002f14 <max_num_channels_per_chip>
 800226a:	4602      	mov	r2, r0
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4293      	cmp	r3, r2
 8002270:	dbf0      	blt.n	8002254 <power_up_all_amps+0xe>
	}
}
 8002272:	bf00      	nop
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	0000      	movs	r0, r0
	...

08002280 <set_upper_bandwidth>:


// Set the on-chip RH1 and RH2 DAC values appropriately to set a particular amplifier
// upper bandwidth (in Hz).  Return an estimate of the actual upper bandwidth achieved.
double set_upper_bandwidth(RHDConfigParameters *p, double upper_bandwidth)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b0a6      	sub	sp, #152	@ 0x98
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	ed87 0b00 	vstr	d0, [r7]
	const double RH1Base = 2200.0;
 800228c:	a3b7      	add	r3, pc, #732	@ (adr r3, 800256c <set_upper_bandwidth+0x2ec>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	const double RH1Dac1Unit = 600.0;
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	4bb1      	ldr	r3, [pc, #708]	@ (8002560 <set_upper_bandwidth+0x2e0>)
 800229c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	const double RH1Dac2Unit = 29400.0;
 80022a0:	a3a9      	add	r3, pc, #676	@ (adr r3, 8002548 <set_upper_bandwidth+0x2c8>)
 80022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	const int RH1Dac1Steps = 63;
 80022aa:	233f      	movs	r3, #63	@ 0x3f
 80022ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const int RH1Dac2Steps = 31;
 80022ae:	231f      	movs	r3, #31
 80022b0:	65bb      	str	r3, [r7, #88]	@ 0x58

	const double RH2Base = 8700.0;
 80022b2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8002550 <set_upper_bandwidth+0x2d0>)
 80022b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	const double RH2Dac1Unit = 763.0;
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	4ba8      	ldr	r3, [pc, #672]	@ (8002564 <set_upper_bandwidth+0x2e4>)
 80022c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	const double RH2Dac2Unit = 38400.0;
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	4ba7      	ldr	r3, [pc, #668]	@ (8002568 <set_upper_bandwidth+0x2e8>)
 80022cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	const int RH2Dac1Steps = 63;
 80022d0:	233f      	movs	r3, #63	@ 0x3f
 80022d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const int RH2Dac2Steps = 31;
 80022d4:	231f      	movs	r3, #31
 80022d6:	63bb      	str	r3, [r7, #56]	@ 0x38

	// No upper bandwidths higher than 30 kHz.
	if (upper_bandwidth > 30000.0) {
 80022d8:	a39f      	add	r3, pc, #636	@ (adr r3, 8002558 <set_upper_bandwidth+0x2d8>)
 80022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022e2:	f7fe fc21 	bl	8000b28 <__aeabi_dcmpgt>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <set_upper_bandwidth+0x76>
		upper_bandwidth = 30000.0;
 80022ec:	a39a      	add	r3, pc, #616	@ (adr r3, 8002558 <set_upper_bandwidth+0x2d8>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	e9c7 2300 	strd	r2, r3, [r7]
	}

	double rH1_target = rH1_from_upper_bandwidth(upper_bandwidth);
 80022f6:	ed97 0b00 	vldr	d0, [r7]
 80022fa:	f000 fa31 	bl	8002760 <rH1_from_upper_bandwidth>
 80022fe:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

	p->rH1_DAC1 = 0;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	p->rH1_DAC2 = 0;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	double rH1_actual = RH1Base;
 8002312:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002316:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

	for (int i = 0; i < RH1Dac2Steps; ++i) {
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002320:	e032      	b.n	8002388 <set_upper_bandwidth+0x108>
		if (rH1_actual < rH1_target - (RH1Dac2Unit - RH1Dac1Unit / 2)) {
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800232a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800232e:	f7fe fa95 	bl	800085c <__aeabi_ddiv>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800233a:	f7fd ffad 	bl	8000298 <__aeabi_dsub>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002346:	f7fd ffa7 	bl	8000298 <__aeabi_dsub>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002352:	f7fe fbcb 	bl	8000aec <__aeabi_dcmplt>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d010      	beq.n	800237e <set_upper_bandwidth+0xfe>
			rH1_actual += RH1Dac2Unit;
 800235c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002360:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002364:	f7fd ff9a 	bl	800029c <__adddf3>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			++p->rH1_DAC2;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < RH1Dac2Steps; ++i) {
 800237e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002382:	3301      	adds	r3, #1
 8002384:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002388:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800238c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800238e:	429a      	cmp	r2, r3
 8002390:	dbc7      	blt.n	8002322 <set_upper_bandwidth+0xa2>
		}
	}

	for (int i = 0; i < RH1Dac1Steps; ++i) {
 8002392:	2300      	movs	r3, #0
 8002394:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002398:	e02c      	b.n	80023f4 <set_upper_bandwidth+0x174>
		if (rH1_actual < rH1_target - (RH1Dac1Unit / 2)) {
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80023a6:	f7fe fa59 	bl	800085c <__aeabi_ddiv>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80023b2:	f7fd ff71 	bl	8000298 <__aeabi_dsub>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80023be:	f7fe fb95 	bl	8000aec <__aeabi_dcmplt>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d010      	beq.n	80023ea <set_upper_bandwidth+0x16a>
			rH1_actual += RH1Dac1Unit;
 80023c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80023cc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80023d0:	f7fd ff64 	bl	800029c <__adddf3>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			++p->rH1_DAC1;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	for (int i = 0; i < RH1Dac1Steps; ++i) {
 80023ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023ee:	3301      	adds	r3, #1
 80023f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80023f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023fa:	429a      	cmp	r2, r3
 80023fc:	dbcd      	blt.n	800239a <set_upper_bandwidth+0x11a>
		}
	}

	double rH2_target = rH2_from_upper_bandwidth(upper_bandwidth);
 80023fe:	ed97 0b00 	vldr	d0, [r7]
 8002402:	f000 fa11 	bl	8002828 <rH2_from_upper_bandwidth>
 8002406:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	p->rH2_DAC1 = 0;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	p->rH2_DAC2 = 0;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	double rH2_actual = RH2Base;
 800241a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800241e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	for (int i = 0; i < RH2Dac2Steps; ++i) {
 8002422:	2300      	movs	r3, #0
 8002424:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002426:	e030      	b.n	800248a <set_upper_bandwidth+0x20a>
		if (rH2_actual < rH2_target - (RH2Dac2Unit - RH2Dac1Unit / 2)) {
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002430:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002434:	f7fe fa12 	bl	800085c <__aeabi_ddiv>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002440:	f7fd ff2a 	bl	8000298 <__aeabi_dsub>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800244c:	f7fd ff24 	bl	8000298 <__aeabi_dsub>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002458:	f7fe fb48 	bl	8000aec <__aeabi_dcmplt>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d010      	beq.n	8002484 <set_upper_bandwidth+0x204>
			rH2_actual += RH2Dac2Unit;
 8002462:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002466:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800246a:	f7fd ff17 	bl	800029c <__adddf3>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			++p->rH2_DAC2;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	for (int i = 0; i < RH2Dac2Steps; ++i) {
 8002484:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002486:	3301      	adds	r3, #1
 8002488:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800248a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800248c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248e:	429a      	cmp	r2, r3
 8002490:	dbca      	blt.n	8002428 <set_upper_bandwidth+0x1a8>
		}
	}

	for (int i = 0; i < RH2Dac1Steps; ++i) {
 8002492:	2300      	movs	r3, #0
 8002494:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002496:	e02a      	b.n	80024ee <set_upper_bandwidth+0x26e>
		if (rH2_actual < rH2_target - (RH2Dac1Unit / 2)) {
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024a0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80024a4:	f7fe f9da 	bl	800085c <__aeabi_ddiv>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024b0:	f7fd fef2 	bl	8000298 <__aeabi_dsub>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80024bc:	f7fe fb16 	bl	8000aec <__aeabi_dcmplt>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d010      	beq.n	80024e8 <set_upper_bandwidth+0x268>
			rH2_actual += RH2Dac1Unit;
 80024c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80024ce:	f7fd fee5 	bl	800029c <__adddf3>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			++p->rH2_DAC1;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < RH2Dac1Steps; ++i) {
 80024e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024ea:	3301      	adds	r3, #1
 80024ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024ee:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80024f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f2:	429a      	cmp	r2, r3
 80024f4:	dbd0      	blt.n	8002498 <set_upper_bandwidth+0x218>
		}
	}

	double actual_upper_bandwidth1 = upper_bandwidth_from_rH1(rH1_actual);
 80024f6:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 80024fa:	f000 fad9 	bl	8002ab0 <upper_bandwidth_from_rH1>
 80024fe:	ed87 0b08 	vstr	d0, [r7, #32]
	double actual_upper_bandwidth2 = upper_bandwidth_from_rH2(rH2_actual);
 8002502:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8002506:	f000 fb73 	bl	8002bf0 <upper_bandwidth_from_rH2>
 800250a:	ed87 0b06 	vstr	d0, [r7, #24]

	// Upper bandwidth estimates calculated from actual RH1 value and actual RH2 value
	// should be very close; we will take their geometric means to get a single number.
	double actual_upper_bandwidth = sqrt(actual_upper_bandwidth1 * actual_upper_bandwidth2);
 800250e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002512:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002516:	f7fe f877 	bl	8000608 <__aeabi_dmul>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	ec43 2b17 	vmov	d7, r2, r3
 8002522:	eeb0 0a47 	vmov.f32	s0, s14
 8002526:	eef0 0a67 	vmov.f32	s1, s15
 800252a:	f00b fcfb 	bl	800df24 <sqrt>
 800252e:	ed87 0b04 	vstr	d0, [r7, #16]

	return actual_upper_bandwidth;
 8002532:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002536:	ec43 2b17 	vmov	d7, r2, r3
}
 800253a:	eeb0 0a47 	vmov.f32	s0, s14
 800253e:	eef0 0a67 	vmov.f32	s1, s15
 8002542:	3798      	adds	r7, #152	@ 0x98
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	00000000 	.word	0x00000000
 800254c:	40dcb600 	.word	0x40dcb600
 8002550:	00000000 	.word	0x00000000
 8002554:	40c0fe00 	.word	0x40c0fe00
 8002558:	00000000 	.word	0x00000000
 800255c:	40dd4c00 	.word	0x40dd4c00
 8002560:	4082c000 	.word	0x4082c000
 8002564:	4087d800 	.word	0x4087d800
 8002568:	40e2c000 	.word	0x40e2c000
 800256c:	00000000 	.word	0x00000000
 8002570:	40a13000 	.word	0x40a13000
 8002574:	00000000 	.word	0x00000000

08002578 <set_lower_bandwidth>:


// Set the on-chip RL DAC values appropriately to set a particular amplifier lower bandwidth (in Hz).
// Return an estimate of the actual lower bandwidth achieved.
double set_lower_bandwidth(RHDConfigParameters *p, double lower_bandwidth)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b096      	sub	sp, #88	@ 0x58
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	ed87 0b00 	vstr	d0, [r7]
    const double RLBase = 3500.0;
 8002584:	a36a      	add	r3, pc, #424	@ (adr r3, 8002730 <set_lower_bandwidth+0x1b8>)
 8002586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    const double RLDac1Unit = 175.0;
 800258e:	a36a      	add	r3, pc, #424	@ (adr r3, 8002738 <set_lower_bandwidth+0x1c0>)
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    const double RLDac2Unit = 12700.0;
 8002598:	a369      	add	r3, pc, #420	@ (adr r3, 8002740 <set_lower_bandwidth+0x1c8>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    const double RLDac3Unit = 3000000.0;
 80025a2:	a369      	add	r3, pc, #420	@ (adr r3, 8002748 <set_lower_bandwidth+0x1d0>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    const int RLDac1Steps = 127;
 80025ac:	237f      	movs	r3, #127	@ 0x7f
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
    const int RLDac2Steps = 63;
 80025b0:	233f      	movs	r3, #63	@ 0x3f
 80025b2:	623b      	str	r3, [r7, #32]

    // No lower bandwidths higher than 1.5 kHz.
    if (lower_bandwidth > 1500.0) {
 80025b4:	a366      	add	r3, pc, #408	@ (adr r3, 8002750 <set_lower_bandwidth+0x1d8>)
 80025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025be:	f7fe fab3 	bl	8000b28 <__aeabi_dcmpgt>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <set_lower_bandwidth+0x5a>
    	lower_bandwidth = 1500.0;
 80025c8:	a361      	add	r3, pc, #388	@ (adr r3, 8002750 <set_lower_bandwidth+0x1d8>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	e9c7 2300 	strd	r2, r3, [r7]
    }

    double rL_target = rL_from_lower_bandwidth(lower_bandwidth);
 80025d2:	ed97 0b00 	vldr	d0, [r7]
 80025d6:	f000 f98b 	bl	80028f0 <rL_from_lower_bandwidth>
 80025da:	ed87 0b06 	vstr	d0, [r7, #24]

    p->rL_DAC1 = 0;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    p->rL_DAC2 = 0;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    p->rL_DAC3 = 0;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    double rL_actual = RLBase;
 80025f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    if (lower_bandwidth < 0.15) {
 80025fe:	a356      	add	r3, pc, #344	@ (adr r3, 8002758 <set_lower_bandwidth+0x1e0>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002608:	f7fe fa70 	bl	8000aec <__aeabi_dcmplt>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d010      	beq.n	8002634 <set_lower_bandwidth+0xbc>
    	rL_actual += RLDac3Unit;
 8002612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002616:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800261a:	f7fd fe3f 	bl	800029c <__adddf3>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    	++p->rL_DAC3;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    for (int i = 0; i < RLDac2Steps; ++i) {
 8002634:	2300      	movs	r3, #0
 8002636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002638:	e030      	b.n	800269c <set_lower_bandwidth+0x124>
    	if (rL_actual < rL_target - (RLDac2Unit - RLDac1Unit / 2)) {
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002642:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002646:	f7fe f909 	bl	800085c <__aeabi_ddiv>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002652:	f7fd fe21 	bl	8000298 <__aeabi_dsub>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800265e:	f7fd fe1b 	bl	8000298 <__aeabi_dsub>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800266a:	f7fe fa3f 	bl	8000aec <__aeabi_dcmplt>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d010      	beq.n	8002696 <set_lower_bandwidth+0x11e>
    		rL_actual += RLDac2Unit;
 8002674:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002678:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800267c:	f7fd fe0e 	bl	800029c <__adddf3>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    		++p->rL_DAC2;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    for (int i = 0; i < RLDac2Steps; ++i) {
 8002696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002698:	3301      	adds	r3, #1
 800269a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800269c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	dbca      	blt.n	800263a <set_lower_bandwidth+0xc2>
    	}
    }

    for (int i = 0; i < RLDac1Steps; ++i) {
 80026a4:	2300      	movs	r3, #0
 80026a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026a8:	e02a      	b.n	8002700 <set_lower_bandwidth+0x188>
    	if (rL_actual < rL_target - (RLDac1Unit / 2)) {
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80026b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80026b6:	f7fe f8d1 	bl	800085c <__aeabi_ddiv>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026c2:	f7fd fde9 	bl	8000298 <__aeabi_dsub>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80026ce:	f7fe fa0d 	bl	8000aec <__aeabi_dcmplt>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d010      	beq.n	80026fa <set_lower_bandwidth+0x182>
    		rL_actual += RLDac1Unit;
 80026d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026dc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80026e0:	f7fd fddc 	bl	800029c <__adddf3>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    		++p->rL_DAC1;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    for (int i = 0; i < RLDac1Steps; ++i) {
 80026fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026fc:	3301      	adds	r3, #1
 80026fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	429a      	cmp	r2, r3
 8002706:	dbd0      	blt.n	80026aa <set_lower_bandwidth+0x132>
    	}
    }

    double actual_lower_bandwidth = lower_bandwidth_from_rL(rL_actual);
 8002708:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 800270c:	f000 fb10 	bl	8002d30 <lower_bandwidth_from_rL>
 8002710:	ed87 0b04 	vstr	d0, [r7, #16]

    return actual_lower_bandwidth;
 8002714:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002718:	ec43 2b17 	vmov	d7, r2, r3
}
 800271c:	eeb0 0a47 	vmov.f32	s0, s14
 8002720:	eef0 0a67 	vmov.f32	s1, s15
 8002724:	3758      	adds	r7, #88	@ 0x58
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	f3af 8000 	nop.w
 8002730:	00000000 	.word	0x00000000
 8002734:	40ab5800 	.word	0x40ab5800
 8002738:	00000000 	.word	0x00000000
 800273c:	4065e000 	.word	0x4065e000
 8002740:	00000000 	.word	0x00000000
 8002744:	40c8ce00 	.word	0x40c8ce00
 8002748:	00000000 	.word	0x00000000
 800274c:	4146e360 	.word	0x4146e360
 8002750:	00000000 	.word	0x00000000
 8002754:	40977000 	.word	0x40977000
 8002758:	33333333 	.word	0x33333333
 800275c:	3fc33333 	.word	0x3fc33333

08002760 <rH1_from_upper_bandwidth>:


// Return the value of the RH1 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH1_from_upper_bandwidth(double upper_bandwidth)
{
 8002760:	b5b0      	push	{r4, r5, r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	ed87 0b00 	vstr	d0, [r7]
	double log10f = log10(upper_bandwidth);
 800276a:	ed97 0b00 	vldr	d0, [r7]
 800276e:	f00b fb2b 	bl	800ddc8 <log10>
 8002772:	ed87 0b02 	vstr	d0, [r7, #8]

    return 0.9730 * pow(10.0, (8.0968 - 1.1892 * log10f + 0.04767 * log10f * log10f));
 8002776:	a324      	add	r3, pc, #144	@ (adr r3, 8002808 <rH1_from_upper_bandwidth+0xa8>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002780:	f7fd ff42 	bl	8000608 <__aeabi_dmul>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	a121      	add	r1, pc, #132	@ (adr r1, 8002810 <rH1_from_upper_bandwidth+0xb0>)
 800278a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800278e:	f7fd fd83 	bl	8000298 <__aeabi_dsub>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4614      	mov	r4, r2
 8002798:	461d      	mov	r5, r3
 800279a:	a31f      	add	r3, pc, #124	@ (adr r3, 8002818 <rH1_from_upper_bandwidth+0xb8>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027a4:	f7fd ff30 	bl	8000608 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027b4:	f7fd ff28 	bl	8000608 <__aeabi_dmul>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4620      	mov	r0, r4
 80027be:	4629      	mov	r1, r5
 80027c0:	f7fd fd6c 	bl	800029c <__adddf3>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	ec43 2b17 	vmov	d7, r2, r3
 80027cc:	eeb0 1a47 	vmov.f32	s2, s14
 80027d0:	eef0 1a67 	vmov.f32	s3, s15
 80027d4:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8002800 <rH1_from_upper_bandwidth+0xa0>
 80027d8:	f00b fb34 	bl	800de44 <pow>
 80027dc:	ec51 0b10 	vmov	r0, r1, d0
 80027e0:	a30f      	add	r3, pc, #60	@ (adr r3, 8002820 <rH1_from_upper_bandwidth+0xc0>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fd ff0f 	bl	8000608 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80027f2:	eeb0 0a47 	vmov.f32	s0, s14
 80027f6:	eef0 0a67 	vmov.f32	s1, s15
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002800:	00000000 	.word	0x00000000
 8002804:	40240000 	.word	0x40240000
 8002808:	94467382 	.word	0x94467382
 800280c:	3ff306f6 	.word	0x3ff306f6
 8002810:	c504816f 	.word	0xc504816f
 8002814:	4020318f 	.word	0x4020318f
 8002818:	c60029f1 	.word	0xc60029f1
 800281c:	3fa86833 	.word	0x3fa86833
 8002820:	e5604189 	.word	0xe5604189
 8002824:	3fef22d0 	.word	0x3fef22d0

08002828 <rH2_from_upper_bandwidth>:


// Return the value of the RH2 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH2_from_upper_bandwidth(double upper_bandwidth)
{
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(upper_bandwidth);
 8002832:	ed97 0b00 	vldr	d0, [r7]
 8002836:	f00b fac7 	bl	800ddc8 <log10>
 800283a:	ed87 0b02 	vstr	d0, [r7, #8]

    return 1.0191 * pow(10.0, (8.1009 - 1.0821 * log10f + 0.03383 * log10f * log10f));
 800283e:	a324      	add	r3, pc, #144	@ (adr r3, 80028d0 <rH2_from_upper_bandwidth+0xa8>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002848:	f7fd fede 	bl	8000608 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	a121      	add	r1, pc, #132	@ (adr r1, 80028d8 <rH2_from_upper_bandwidth+0xb0>)
 8002852:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002856:	f7fd fd1f 	bl	8000298 <__aeabi_dsub>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4614      	mov	r4, r2
 8002860:	461d      	mov	r5, r3
 8002862:	a31f      	add	r3, pc, #124	@ (adr r3, 80028e0 <rH2_from_upper_bandwidth+0xb8>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800286c:	f7fd fecc 	bl	8000608 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800287c:	f7fd fec4 	bl	8000608 <__aeabi_dmul>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4620      	mov	r0, r4
 8002886:	4629      	mov	r1, r5
 8002888:	f7fd fd08 	bl	800029c <__adddf3>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	ec43 2b17 	vmov	d7, r2, r3
 8002894:	eeb0 1a47 	vmov.f32	s2, s14
 8002898:	eef0 1a67 	vmov.f32	s3, s15
 800289c:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 80028c8 <rH2_from_upper_bandwidth+0xa0>
 80028a0:	f00b fad0 	bl	800de44 <pow>
 80028a4:	ec51 0b10 	vmov	r0, r1, d0
 80028a8:	a30f      	add	r3, pc, #60	@ (adr r3, 80028e8 <rH2_from_upper_bandwidth+0xc0>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd feab 	bl	8000608 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80028ba:	eeb0 0a47 	vmov.f32	s0, s14
 80028be:	eef0 0a67 	vmov.f32	s1, s15
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bdb0      	pop	{r4, r5, r7, pc}
 80028c8:	00000000 	.word	0x00000000
 80028cc:	40240000 	.word	0x40240000
 80028d0:	16f0068e 	.word	0x16f0068e
 80028d4:	3ff15048 	.word	0x3ff15048
 80028d8:	2a305532 	.word	0x2a305532
 80028dc:	402033a9 	.word	0x402033a9
 80028e0:	6f3f52fc 	.word	0x6f3f52fc
 80028e4:	3fa1522a 	.word	0x3fa1522a
 80028e8:	cd35a858 	.word	0xcd35a858
 80028ec:	3ff04e3b 	.word	0x3ff04e3b

080028f0 <rL_from_lower_bandwidth>:


// Return the value of the RL resistor (in ohms) corresponding to a particular lower bandwidth value (in Hz).
double rL_from_lower_bandwidth(double lower_bandwidth)
{
 80028f0:	b5b0      	push	{r4, r5, r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(lower_bandwidth);
 80028fa:	ed97 0b00 	vldr	d0, [r7]
 80028fe:	f00b fa63 	bl	800ddc8 <log10>
 8002902:	ed87 0b02 	vstr	d0, [r7, #8]

    if (lower_bandwidth < 4.0) {
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	4b67      	ldr	r3, [pc, #412]	@ (8002aa8 <rL_from_lower_bandwidth+0x1b8>)
 800290c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002910:	f7fe f8ec 	bl	8000aec <__aeabi_dcmplt>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d05d      	beq.n	80029d6 <rL_from_lower_bandwidth+0xe6>
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 800291a:	a351      	add	r3, pc, #324	@ (adr r3, 8002a60 <rL_from_lower_bandwidth+0x170>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002924:	f7fd fe70 	bl	8000608 <__aeabi_dmul>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	a14e      	add	r1, pc, #312	@ (adr r1, 8002a68 <rL_from_lower_bandwidth+0x178>)
 800292e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002932:	f7fd fcb1 	bl	8000298 <__aeabi_dsub>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4614      	mov	r4, r2
 800293c:	461d      	mov	r5, r3
 800293e:	a34c      	add	r3, pc, #304	@ (adr r3, 8002a70 <rL_from_lower_bandwidth+0x180>)
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002948:	f7fd fe5e 	bl	8000608 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002958:	f7fd fe56 	bl	8000608 <__aeabi_dmul>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4620      	mov	r0, r4
 8002962:	4629      	mov	r1, r5
 8002964:	f7fd fc9a 	bl	800029c <__adddf3>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4614      	mov	r4, r2
 800296e:	461d      	mov	r5, r3
            0.1442 * log10f * log10f * log10f));
 8002970:	a341      	add	r3, pc, #260	@ (adr r3, 8002a78 <rL_from_lower_bandwidth+0x188>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800297a:	f7fd fe45 	bl	8000608 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800298a:	f7fd fe3d 	bl	8000608 <__aeabi_dmul>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800299a:	f7fd fe35 	bl	8000608 <__aeabi_dmul>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 80029a2:	4620      	mov	r0, r4
 80029a4:	4629      	mov	r1, r5
 80029a6:	f7fd fc79 	bl	800029c <__adddf3>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	ec43 2b17 	vmov	d7, r2, r3
 80029b2:	eeb0 1a47 	vmov.f32	s2, s14
 80029b6:	eef0 1a67 	vmov.f32	s3, s15
 80029ba:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8002a80 <rL_from_lower_bandwidth+0x190>
 80029be:	f00b fa41 	bl	800de44 <pow>
 80029c2:	ec51 0b10 	vmov	r0, r1, d0
 80029c6:	a330      	add	r3, pc, #192	@ (adr r3, 8002a88 <rL_from_lower_bandwidth+0x198>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fe1c 	bl	8000608 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	e03b      	b.n	8002a4e <rL_from_lower_bandwidth+0x15e>
    } else {
        return 1.0061 * pow(10.0, (4.7351 - 0.5916 * log10f + 0.08482 * log10f * log10f));
 80029d6:	a32e      	add	r3, pc, #184	@ (adr r3, 8002a90 <rL_from_lower_bandwidth+0x1a0>)
 80029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029e0:	f7fd fe12 	bl	8000608 <__aeabi_dmul>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	a12b      	add	r1, pc, #172	@ (adr r1, 8002a98 <rL_from_lower_bandwidth+0x1a8>)
 80029ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029ee:	f7fd fc53 	bl	8000298 <__aeabi_dsub>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4614      	mov	r4, r2
 80029f8:	461d      	mov	r5, r3
 80029fa:	a329      	add	r3, pc, #164	@ (adr r3, 8002aa0 <rL_from_lower_bandwidth+0x1b0>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a04:	f7fd fe00 	bl	8000608 <__aeabi_dmul>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a14:	f7fd fdf8 	bl	8000608 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f7fd fc3c 	bl	800029c <__adddf3>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	ec43 2b17 	vmov	d7, r2, r3
 8002a2c:	eeb0 1a47 	vmov.f32	s2, s14
 8002a30:	eef0 1a67 	vmov.f32	s3, s15
 8002a34:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8002a80 <rL_from_lower_bandwidth+0x190>
 8002a38:	f00b fa04 	bl	800de44 <pow>
 8002a3c:	ec51 0b10 	vmov	r0, r1, d0
 8002a40:	a311      	add	r3, pc, #68	@ (adr r3, 8002a88 <rL_from_lower_bandwidth+0x198>)
 8002a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a46:	f7fd fddf 	bl	8000608 <__aeabi_dmul>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
    }
}
 8002a4e:	ec43 2b17 	vmov	d7, r2, r3
 8002a52:	eeb0 0a47 	vmov.f32	s0, s14
 8002a56:	eef0 0a67 	vmov.f32	s1, s15
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a60:	ab367a10 	.word	0xab367a10
 8002a64:	3ff3573e 	.word	0x3ff3573e
 8002a68:	6e2eb1c4 	.word	0x6e2eb1c4
 8002a6c:	4013c1a3 	.word	0x4013c1a3
 8002a70:	35a85879 	.word	0x35a85879
 8002a74:	3fe23bcd 	.word	0x3fe23bcd
 8002a78:	460aa64c 	.word	0x460aa64c
 8002a7c:	3fc27525 	.word	0x3fc27525
 8002a80:	00000000 	.word	0x00000000
 8002a84:	40240000 	.word	0x40240000
 8002a88:	504816f0 	.word	0x504816f0
 8002a8c:	3ff018fc 	.word	0x3ff018fc
 8002a90:	1f8a0903 	.word	0x1f8a0903
 8002a94:	3fe2ee63 	.word	0x3fe2ee63
 8002a98:	0ded288d 	.word	0x0ded288d
 8002a9c:	4012f0be 	.word	0x4012f0be
 8002aa0:	760bf5d8 	.word	0x760bf5d8
 8002aa4:	3fb5b6c3 	.word	0x3fb5b6c3
 8002aa8:	40100000 	.word	0x40100000
 8002aac:	00000000 	.word	0x00000000

08002ab0 <upper_bandwidth_from_rH1>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH1 (in Ohms).
double upper_bandwidth_from_rH1(double rH1)
{
 8002ab0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ab4:	b088      	sub	sp, #32
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.04767;
 8002abc:	a343      	add	r3, pc, #268	@ (adr r3, 8002bcc <upper_bandwidth_from_rH1+0x11c>)
 8002abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.1892;
 8002ac6:	a343      	add	r3, pc, #268	@ (adr r3, 8002bd4 <upper_bandwidth_from_rH1+0x124>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.0968 - log10(rH1 / 0.9730);
 8002ad0:	a342      	add	r3, pc, #264	@ (adr r3, 8002bdc <upper_bandwidth_from_rH1+0x12c>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ada:	f7fd febf 	bl	800085c <__aeabi_ddiv>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	ec43 2b17 	vmov	d7, r2, r3
 8002ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8002aea:	eef0 0a67 	vmov.f32	s1, s15
 8002aee:	f00b f96b 	bl	800ddc8 <log10>
 8002af2:	ec53 2b10 	vmov	r2, r3, d0
 8002af6:	a13b      	add	r1, pc, #236	@ (adr r1, 8002be4 <upper_bandwidth_from_rH1+0x134>)
 8002af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002afc:	f7fd fbcc 	bl	8000298 <__aeabi_dsub>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002b08:	693c      	ldr	r4, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002b10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b18:	f7fd fd76 	bl	8000608 <__aeabi_dmul>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4690      	mov	r8, r2
 8002b22:	4699      	mov	r9, r3
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	4b27      	ldr	r3, [pc, #156]	@ (8002bc8 <upper_bandwidth_from_rH1+0x118>)
 8002b2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b2e:	f7fd fd6b 	bl	8000608 <__aeabi_dmul>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b3e:	f7fd fd63 	bl	8000608 <__aeabi_dmul>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4640      	mov	r0, r8
 8002b48:	4649      	mov	r1, r9
 8002b4a:	f7fd fba5 	bl	8000298 <__aeabi_dsub>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	ec43 2b17 	vmov	d7, r2, r3
 8002b56:	eeb0 0a47 	vmov.f32	s0, s14
 8002b5a:	eef0 0a67 	vmov.f32	s1, s15
 8002b5e:	f00b f9e1 	bl	800df24 <sqrt>
 8002b62:	ec53 2b10 	vmov	r2, r3, d0
 8002b66:	4620      	mov	r0, r4
 8002b68:	4629      	mov	r1, r5
 8002b6a:	f7fd fb95 	bl	8000298 <__aeabi_dsub>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4614      	mov	r4, r2
 8002b74:	461d      	mov	r5, r3
 8002b76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	f7fd fb8d 	bl	800029c <__adddf3>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4620      	mov	r0, r4
 8002b88:	4629      	mov	r1, r5
 8002b8a:	f7fd fe67 	bl	800085c <__aeabi_ddiv>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	ec43 2b17 	vmov	d7, r2, r3
 8002b96:	eeb0 1a47 	vmov.f32	s2, s14
 8002b9a:	eef0 1a67 	vmov.f32	s3, s15
 8002b9e:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8002bc0 <upper_bandwidth_from_rH1+0x110>
 8002ba2:	f00b f94f 	bl	800de44 <pow>
 8002ba6:	eeb0 7a40 	vmov.f32	s14, s0
 8002baa:	eef0 7a60 	vmov.f32	s15, s1
}
 8002bae:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb2:	eef0 0a67 	vmov.f32	s1, s15
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bbe:	bf00      	nop
 8002bc0:	00000000 	.word	0x00000000
 8002bc4:	40240000 	.word	0x40240000
 8002bc8:	40100000 	.word	0x40100000
 8002bcc:	c60029f1 	.word	0xc60029f1
 8002bd0:	3fa86833 	.word	0x3fa86833
 8002bd4:	94467382 	.word	0x94467382
 8002bd8:	bff306f6 	.word	0xbff306f6
 8002bdc:	e5604189 	.word	0xe5604189
 8002be0:	3fef22d0 	.word	0x3fef22d0
 8002be4:	c504816f 	.word	0xc504816f
 8002be8:	4020318f 	.word	0x4020318f
 8002bec:	00000000 	.word	0x00000000

08002bf0 <upper_bandwidth_from_rH2>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH2 (in Ohms).
double upper_bandwidth_from_rH2(double rH2)
{
 8002bf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bf4:	b088      	sub	sp, #32
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.03383;
 8002bfc:	a343      	add	r3, pc, #268	@ (adr r3, 8002d0c <upper_bandwidth_from_rH2+0x11c>)
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.0821;
 8002c06:	a343      	add	r3, pc, #268	@ (adr r3, 8002d14 <upper_bandwidth_from_rH2+0x124>)
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.1009 - log10(rH2 / 1.0191);
 8002c10:	a342      	add	r3, pc, #264	@ (adr r3, 8002d1c <upper_bandwidth_from_rH2+0x12c>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c1a:	f7fd fe1f 	bl	800085c <__aeabi_ddiv>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	ec43 2b17 	vmov	d7, r2, r3
 8002c26:	eeb0 0a47 	vmov.f32	s0, s14
 8002c2a:	eef0 0a67 	vmov.f32	s1, s15
 8002c2e:	f00b f8cb 	bl	800ddc8 <log10>
 8002c32:	ec53 2b10 	vmov	r2, r3, d0
 8002c36:	a13b      	add	r1, pc, #236	@ (adr r1, 8002d24 <upper_bandwidth_from_rH2+0x134>)
 8002c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c3c:	f7fd fb2c 	bl	8000298 <__aeabi_dsub>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002c48:	693c      	ldr	r4, [r7, #16]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002c50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c58:	f7fd fcd6 	bl	8000608 <__aeabi_dmul>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4690      	mov	r8, r2
 8002c62:	4699      	mov	r9, r3
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <upper_bandwidth_from_rH2+0x118>)
 8002c6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c6e:	f7fd fccb 	bl	8000608 <__aeabi_dmul>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c7e:	f7fd fcc3 	bl	8000608 <__aeabi_dmul>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4640      	mov	r0, r8
 8002c88:	4649      	mov	r1, r9
 8002c8a:	f7fd fb05 	bl	8000298 <__aeabi_dsub>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	ec43 2b17 	vmov	d7, r2, r3
 8002c96:	eeb0 0a47 	vmov.f32	s0, s14
 8002c9a:	eef0 0a67 	vmov.f32	s1, s15
 8002c9e:	f00b f941 	bl	800df24 <sqrt>
 8002ca2:	ec53 2b10 	vmov	r2, r3, d0
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	4629      	mov	r1, r5
 8002caa:	f7fd faf5 	bl	8000298 <__aeabi_dsub>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4614      	mov	r4, r2
 8002cb4:	461d      	mov	r5, r3
 8002cb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	f7fd faed 	bl	800029c <__adddf3>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	4629      	mov	r1, r5
 8002cca:	f7fd fdc7 	bl	800085c <__aeabi_ddiv>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	ec43 2b17 	vmov	d7, r2, r3
 8002cd6:	eeb0 1a47 	vmov.f32	s2, s14
 8002cda:	eef0 1a67 	vmov.f32	s3, s15
 8002cde:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8002d00 <upper_bandwidth_from_rH2+0x110>
 8002ce2:	f00b f8af 	bl	800de44 <pow>
 8002ce6:	eeb0 7a40 	vmov.f32	s14, s0
 8002cea:	eef0 7a60 	vmov.f32	s15, s1
}
 8002cee:	eeb0 0a47 	vmov.f32	s0, s14
 8002cf2:	eef0 0a67 	vmov.f32	s1, s15
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cfe:	bf00      	nop
 8002d00:	00000000 	.word	0x00000000
 8002d04:	40240000 	.word	0x40240000
 8002d08:	40100000 	.word	0x40100000
 8002d0c:	6f3f52fc 	.word	0x6f3f52fc
 8002d10:	3fa1522a 	.word	0x3fa1522a
 8002d14:	16f0068e 	.word	0x16f0068e
 8002d18:	bff15048 	.word	0xbff15048
 8002d1c:	cd35a858 	.word	0xcd35a858
 8002d20:	3ff04e3b 	.word	0x3ff04e3b
 8002d24:	2a305532 	.word	0x2a305532
 8002d28:	402033a9 	.word	0x402033a9
 8002d2c:	00000000 	.word	0x00000000

08002d30 <lower_bandwidth_from_rL>:


// Return the amplifier lower bandwidth (in Hz) corresponding to a particular value of the resistor RL (in Ohms).
double lower_bandwidth_from_rL(double rL)
{
 8002d30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d34:	b088      	sub	sp, #32
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    // Quadratic fit below is invalid for values of RL less than 5.1 kOhm.
    if (rL < 5100.0) {
 8002d3c:	a363      	add	r3, pc, #396	@ (adr r3, 8002ecc <lower_bandwidth_from_rL+0x19c>)
 8002d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d46:	f7fd fed1 	bl	8000aec <__aeabi_dcmplt>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d004      	beq.n	8002d5a <lower_bandwidth_from_rL+0x2a>
        rL = 5100.0;
 8002d50:	a35e      	add	r3, pc, #376	@ (adr r3, 8002ecc <lower_bandwidth_from_rL+0x19c>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	e9c7 2300 	strd	r2, r3, [r7]
    }

    if (rL < 30000.0) {
 8002d5a:	a35e      	add	r3, pc, #376	@ (adr r3, 8002ed4 <lower_bandwidth_from_rL+0x1a4>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d64:	f7fd fec2 	bl	8000aec <__aeabi_dcmplt>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d026      	beq.n	8002dbc <lower_bandwidth_from_rL+0x8c>
        a = 0.08482;
 8002d6e:	a35b      	add	r3, pc, #364	@ (adr r3, 8002edc <lower_bandwidth_from_rL+0x1ac>)
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -0.5916;
 8002d78:	a35a      	add	r3, pc, #360	@ (adr r3, 8002ee4 <lower_bandwidth_from_rL+0x1b4>)
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.7351 - log10(rL / 1.0061);
 8002d82:	a35a      	add	r3, pc, #360	@ (adr r3, 8002eec <lower_bandwidth_from_rL+0x1bc>)
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d8c:	f7fd fd66 	bl	800085c <__aeabi_ddiv>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	ec43 2b17 	vmov	d7, r2, r3
 8002d98:	eeb0 0a47 	vmov.f32	s0, s14
 8002d9c:	eef0 0a67 	vmov.f32	s1, s15
 8002da0:	f00b f812 	bl	800ddc8 <log10>
 8002da4:	ec53 2b10 	vmov	r2, r3, d0
 8002da8:	a152      	add	r1, pc, #328	@ (adr r1, 8002ef4 <lower_bandwidth_from_rL+0x1c4>)
 8002daa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dae:	f7fd fa73 	bl	8000298 <__aeabi_dsub>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002dba:	e025      	b.n	8002e08 <lower_bandwidth_from_rL+0xd8>
    } else {
        a = 0.3303;
 8002dbc:	a34f      	add	r3, pc, #316	@ (adr r3, 8002efc <lower_bandwidth_from_rL+0x1cc>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -1.2100;
 8002dc6:	a34f      	add	r3, pc, #316	@ (adr r3, 8002f04 <lower_bandwidth_from_rL+0x1d4>)
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.9873 - log10(rL / 1.0061);
 8002dd0:	a346      	add	r3, pc, #280	@ (adr r3, 8002eec <lower_bandwidth_from_rL+0x1bc>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dda:	f7fd fd3f 	bl	800085c <__aeabi_ddiv>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	ec43 2b17 	vmov	d7, r2, r3
 8002de6:	eeb0 0a47 	vmov.f32	s0, s14
 8002dea:	eef0 0a67 	vmov.f32	s1, s15
 8002dee:	f00a ffeb 	bl	800ddc8 <log10>
 8002df2:	ec53 2b10 	vmov	r2, r3, d0
 8002df6:	a145      	add	r1, pc, #276	@ (adr r1, 8002f0c <lower_bandwidth_from_rL+0x1dc>)
 8002df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dfc:	f7fd fa4c 	bl	8000298 <__aeabi_dsub>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002e08:	693c      	ldr	r4, [r7, #16]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002e10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e18:	f7fd fbf6 	bl	8000608 <__aeabi_dmul>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4690      	mov	r8, r2
 8002e22:	4699      	mov	r9, r3
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	4b27      	ldr	r3, [pc, #156]	@ (8002ec8 <lower_bandwidth_from_rL+0x198>)
 8002e2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e2e:	f7fd fbeb 	bl	8000608 <__aeabi_dmul>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e3e:	f7fd fbe3 	bl	8000608 <__aeabi_dmul>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4640      	mov	r0, r8
 8002e48:	4649      	mov	r1, r9
 8002e4a:	f7fd fa25 	bl	8000298 <__aeabi_dsub>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	ec43 2b17 	vmov	d7, r2, r3
 8002e56:	eeb0 0a47 	vmov.f32	s0, s14
 8002e5a:	eef0 0a67 	vmov.f32	s1, s15
 8002e5e:	f00b f861 	bl	800df24 <sqrt>
 8002e62:	ec53 2b10 	vmov	r2, r3, d0
 8002e66:	4620      	mov	r0, r4
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f7fd fa15 	bl	8000298 <__aeabi_dsub>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4614      	mov	r4, r2
 8002e74:	461d      	mov	r5, r3
 8002e76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	f7fd fa0d 	bl	800029c <__adddf3>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4620      	mov	r0, r4
 8002e88:	4629      	mov	r1, r5
 8002e8a:	f7fd fce7 	bl	800085c <__aeabi_ddiv>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	ec43 2b17 	vmov	d7, r2, r3
 8002e96:	eeb0 1a47 	vmov.f32	s2, s14
 8002e9a:	eef0 1a67 	vmov.f32	s3, s15
 8002e9e:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8002ec0 <lower_bandwidth_from_rL+0x190>
 8002ea2:	f00a ffcf 	bl	800de44 <pow>
 8002ea6:	eeb0 7a40 	vmov.f32	s14, s0
 8002eaa:	eef0 7a60 	vmov.f32	s15, s1
}
 8002eae:	eeb0 0a47 	vmov.f32	s0, s14
 8002eb2:	eef0 0a67 	vmov.f32	s1, s15
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ebe:	bf00      	nop
 8002ec0:	00000000 	.word	0x00000000
 8002ec4:	40240000 	.word	0x40240000
 8002ec8:	40100000 	.word	0x40100000
 8002ecc:	00000000 	.word	0x00000000
 8002ed0:	40b3ec00 	.word	0x40b3ec00
 8002ed4:	00000000 	.word	0x00000000
 8002ed8:	40dd4c00 	.word	0x40dd4c00
 8002edc:	760bf5d8 	.word	0x760bf5d8
 8002ee0:	3fb5b6c3 	.word	0x3fb5b6c3
 8002ee4:	1f8a0903 	.word	0x1f8a0903
 8002ee8:	bfe2ee63 	.word	0xbfe2ee63
 8002eec:	504816f0 	.word	0x504816f0
 8002ef0:	3ff018fc 	.word	0x3ff018fc
 8002ef4:	0ded288d 	.word	0x0ded288d
 8002ef8:	4012f0be 	.word	0x4012f0be
 8002efc:	9c779a6b 	.word	0x9c779a6b
 8002f00:	3fd523a2 	.word	0x3fd523a2
 8002f04:	f5c28f5c 	.word	0xf5c28f5c
 8002f08:	bff35c28 	.word	0xbff35c28
 8002f0c:	c56d5cfb 	.word	0xc56d5cfb
 8002f10:	4013f2fe 	.word	0x4013f2fe

08002f14 <max_num_channels_per_chip>:


// Maximum number of amplifier channels per chip.
int max_num_channels_per_chip()
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
	return 32;
 8002f18:	2320      	movs	r3, #32
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	0000      	movs	r0, r0
	...

08002f28 <set_default_rhd_settings>:


// Set default values for parameters used to configure RAM registers on RHD2000 chip.
void set_default_rhd_settings(RHDConfigParameters *p)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	// D[7:6]: ADC reference BW
	// D[5]: amp fast settle
	// D[4]: amp Vref enable
	// D[3:2]: ADC comparator bias
	// D[1:0]: ADC comparator select
	p->adc_reference_bw = 3;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2203      	movs	r2, #3
 8002f34:	609a      	str	r2, [r3, #8]
	p->amp_fast_settle = 0;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
	p->amp_vref_enable = 1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	60da      	str	r2, [r3, #12]
	p->adc_comparator_bias = 3;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2203      	movs	r2, #3
 8002f48:	611a      	str	r2, [r3, #16]
	p->adc_comparator_select = 2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	615a      	str	r2, [r3, #20]

	// Register 1: Supply Sensor and ADC Buffer Bias Current
	// D[7]: X (No Function)
	// D[6]: VDD sense enable
	// D[5:0]: ADC buffer bias (set below in set_biases_based_on_sample_rate)
	p->vdd_sense_enable = 1;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	619a      	str	r2, [r3, #24]

	// Register 2: MUX Bias Current
	// D[7:6]: X (No Function)
	// D[5:0]: MUX bias (set below in set_biases_based_on_sample_rate)
	set_biases_based_on_sample_rate(&p->adc_buffer_bias, &p->mux_bias, p->sample_rate);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f103 021c 	add.w	r2, r3, #28
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f103 0120 	add.w	r1, r3, #32
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	ed93 7b00 	vldr	d7, [r3]
 8002f68:	eeb0 0a47 	vmov.f32	s0, s14
 8002f6c:	eef0 0a67 	vmov.f32	s1, s15
 8002f70:	4610      	mov	r0, r2
 8002f72:	f000 f865 	bl	8003040 <set_biases_based_on_sample_rate>
	// D[4]: tempS2
	// D[3]: tempS1
	// D[2]: tempen
	// D[1]: digout HiZ
	// D[0]: digout
	p->mux_load = 0;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24
	p->temp_S1 = 0;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	@ 0x28
	p->temp_S2 = 0;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	62da      	str	r2, [r3, #44]	@ 0x2c
	p->temp_en = 0;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	@ 0x30
	set_DigOut_hiZ(p);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff f810 	bl	8001fb4 <set_DigOut_hiZ>
	// D[7]: weak MISO
	// D[6]: twoscomp
	// D[5]: absmode
	// D[4]: DSPen
	// D[3:0]: DSP cutoff freq
	p->weak_miso = 1;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	p->twos_comp = 0;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	641a      	str	r2, [r3, #64]	@ 0x40
	p->abs_mode = 0;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	645a      	str	r2, [r3, #68]	@ 0x44
	p->DSP_en = 1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	649a      	str	r2, [r3, #72]	@ 0x48
	set_DSP_cutoff_freq(p, 1.0);
 8002fac:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8003030 <set_default_rhd_settings+0x108>
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff f811 	bl	8001fd8 <set_DSP_cutoff_freq>
	// D[5]: Zcheck load
	// D[4:3]: Zcheck scale
	// D[2]: Zcheck conn all
	// D[1]: Zcheck sel pol
	// D[0]: Zcheck en
	p->zcheck_DAC_power = 1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	651a      	str	r2, [r3, #80]	@ 0x50
	p->zcheck_load = 0;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	655a      	str	r2, [r3, #84]	@ 0x54
	set_zcheck_scale(p, ZcheckCs100fF);
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff f8ed 	bl	80021a4 <set_zcheck_scale>
	p->zcheck_conn_all = 0;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	65da      	str	r2, [r3, #92]	@ 0x5c
	set_zcheck_polarity(p, ZcheckPositiveInput);
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff f908 	bl	80021e8 <set_zcheck_polarity>
	p->zcheck_en = 0;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	665a      	str	r2, [r3, #100]	@ 0x64
	// D[7:0]: Zcheck DAC

	// Register 7: Impedance Check Amplifier Select
	// D[7:6]: X (No Function)
	// D[5:0]: Zcheck select
	set_zcheck_channel(p, 0);
 8002fde:	2100      	movs	r1, #0
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff f916 	bl	8002212 <set_zcheck_channel>

	// Registers 8-13: On-Chip Amplifier Bandwidth Select
	// R[8]D[7]: offchip RH1
	// R[8]D[6]: X (No Function)
	// R[8]D[5:0]: RH1 DAC1
	p->off_chip_RH1 = 0;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	66da      	str	r2, [r3, #108]	@ 0x6c

	// R[9]D[7]: ADC aux1 en
	// R[9]D[6:5]: X (No Function)
	// R[9]D[4:0] RH1 DAC2
	p->adc_Aux1_en = 1;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	679a      	str	r2, [r3, #120]	@ 0x78

	// R[10]D[7]: offchip RH2
	// R[10]D[6]: X (No Function)
	// R[10]D[5:0]: RH2 DAC1
	p->off_chip_RH2 = 0;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	671a      	str	r2, [r3, #112]	@ 0x70

	// R[11]D[7]: ADC2 aux2 en
	// R[11]D[6:5]: X (No Function)
	// R[11]D[4:0]: RH2 DAC2
	p->adc_Aux2_en = 1;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	67da      	str	r2, [r3, #124]	@ 0x7c

	// R[12]D[7]: offchip RL
	// R[12]D[6:0]: RL DAC1
	p->off_chip_RL = 0;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	675a      	str	r2, [r3, #116]	@ 0x74

	// R[13]D[7]: ADC3 aux3 en
	// R[13]D[6]: RL DAC3
	// R[13]D[5:0]: RL DAC2
	p->adc_Aux3_en = 1;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	set_upper_bandwidth(p, 7500.0);
 800300c:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8003038 <set_default_rhd_settings+0x110>
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff f935 	bl	8002280 <set_upper_bandwidth>
	set_lower_bandwidth(p, 1.0);
 8003016:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 8003030 <set_default_rhd_settings+0x108>
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff faac 	bl	8002578 <set_lower_bandwidth>
	// Register 14-17: Individual Amplifier Power
	// R[14]D[7:0]: apwr[7:0]
	// R[15]D[7:0]: apwr[15:8]
	// R[16]D[7:0]: apwr[23:16]
	// R[17]D[7:0]: apwr[31:0]
	power_up_all_amps(p);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff f910 	bl	8002246 <power_up_all_amps>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	00000000 	.word	0x00000000
 8003034:	3ff00000 	.word	0x3ff00000
 8003038:	00000000 	.word	0x00000000
 800303c:	40bd4c00 	.word	0x40bd4c00

08003040 <set_biases_based_on_sample_rate>:


// Determine suitable ADC buffer bias and mux bias values based on provided sample rate.
void set_biases_based_on_sample_rate(int *adc_buffer_bias, int *mux_bias, const double sample_rate)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	ed87 0b00 	vstr	d0, [r7]
	double adc_sampling_rate = (CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) * sample_rate;
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	4b5b      	ldr	r3, [pc, #364]	@ (80031c0 <set_biases_based_on_sample_rate+0x180>)
 8003054:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003058:	f7fd fad6 	bl	8000608 <__aeabi_dmul>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (adc_sampling_rate <= 120000.0) {
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	4b56      	ldr	r3, [pc, #344]	@ (80031c4 <set_biases_based_on_sample_rate+0x184>)
 800306a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800306e:	f7fd fd47 	bl	8000b00 <__aeabi_dcmple>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d006      	beq.n	8003086 <set_biases_based_on_sample_rate+0x46>
		*adc_buffer_bias = 32;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2228      	movs	r2, #40	@ 0x28
 8003082:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
	} else {
		*adc_buffer_bias = 2;
		*mux_bias = 4;
	}
}
 8003084:	e07c      	b.n	8003180 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 140000.0) {
 8003086:	a340      	add	r3, pc, #256	@ (adr r3, 8003188 <set_biases_based_on_sample_rate+0x148>)
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003090:	f7fd fd36 	bl	8000b00 <__aeabi_dcmple>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <set_biases_based_on_sample_rate+0x68>
		*adc_buffer_bias = 16;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2210      	movs	r2, #16
 800309e:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2228      	movs	r2, #40	@ 0x28
 80030a4:	601a      	str	r2, [r3, #0]
}
 80030a6:	e06b      	b.n	8003180 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 175000.0) {
 80030a8:	a339      	add	r3, pc, #228	@ (adr r3, 8003190 <set_biases_based_on_sample_rate+0x150>)
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030b2:	f7fd fd25 	bl	8000b00 <__aeabi_dcmple>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <set_biases_based_on_sample_rate+0x8a>
		*adc_buffer_bias = 8;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2208      	movs	r2, #8
 80030c0:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2228      	movs	r2, #40	@ 0x28
 80030c6:	601a      	str	r2, [r3, #0]
}
 80030c8:	e05a      	b.n	8003180 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 220000.0) {
 80030ca:	a333      	add	r3, pc, #204	@ (adr r3, 8003198 <set_biases_based_on_sample_rate+0x158>)
 80030cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030d4:	f7fd fd14 	bl	8000b00 <__aeabi_dcmple>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d006      	beq.n	80030ec <set_biases_based_on_sample_rate+0xac>
		*adc_buffer_bias = 8;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2208      	movs	r2, #8
 80030e2:	601a      	str	r2, [r3, #0]
		*mux_bias = 32;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2220      	movs	r2, #32
 80030e8:	601a      	str	r2, [r3, #0]
}
 80030ea:	e049      	b.n	8003180 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 280000.0) {
 80030ec:	a32c      	add	r3, pc, #176	@ (adr r3, 80031a0 <set_biases_based_on_sample_rate+0x160>)
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030f6:	f7fd fd03 	bl	8000b00 <__aeabi_dcmple>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <set_biases_based_on_sample_rate+0xce>
		*adc_buffer_bias = 8;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2208      	movs	r2, #8
 8003104:	601a      	str	r2, [r3, #0]
		*mux_bias = 26;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	221a      	movs	r2, #26
 800310a:	601a      	str	r2, [r3, #0]
}
 800310c:	e038      	b.n	8003180 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 350000.0) {
 800310e:	a326      	add	r3, pc, #152	@ (adr r3, 80031a8 <set_biases_based_on_sample_rate+0x168>)
 8003110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003114:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003118:	f7fd fcf2 	bl	8000b00 <__aeabi_dcmple>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <set_biases_based_on_sample_rate+0xf0>
		*adc_buffer_bias = 4;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2204      	movs	r2, #4
 8003126:	601a      	str	r2, [r3, #0]
		*mux_bias = 18;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2212      	movs	r2, #18
 800312c:	601a      	str	r2, [r3, #0]
}
 800312e:	e027      	b.n	8003180 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 440000.0) {
 8003130:	a31f      	add	r3, pc, #124	@ (adr r3, 80031b0 <set_biases_based_on_sample_rate+0x170>)
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800313a:	f7fd fce1 	bl	8000b00 <__aeabi_dcmple>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d006      	beq.n	8003152 <set_biases_based_on_sample_rate+0x112>
		*adc_buffer_bias = 3;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2203      	movs	r2, #3
 8003148:	601a      	str	r2, [r3, #0]
		*mux_bias = 16;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2210      	movs	r2, #16
 800314e:	601a      	str	r2, [r3, #0]
}
 8003150:	e016      	b.n	8003180 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 525000.0) {
 8003152:	a319      	add	r3, pc, #100	@ (adr r3, 80031b8 <set_biases_based_on_sample_rate+0x178>)
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800315c:	f7fd fcd0 	bl	8000b00 <__aeabi_dcmple>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d006      	beq.n	8003174 <set_biases_based_on_sample_rate+0x134>
		*adc_buffer_bias = 3;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2203      	movs	r2, #3
 800316a:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2207      	movs	r2, #7
 8003170:	601a      	str	r2, [r3, #0]
}
 8003172:	e005      	b.n	8003180 <set_biases_based_on_sample_rate+0x140>
		*adc_buffer_bias = 2;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2202      	movs	r2, #2
 8003178:	601a      	str	r2, [r3, #0]
		*mux_bias = 4;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2204      	movs	r2, #4
 800317e:	601a      	str	r2, [r3, #0]
}
 8003180:	bf00      	nop
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	00000000 	.word	0x00000000
 800318c:	41011700 	.word	0x41011700
 8003190:	00000000 	.word	0x00000000
 8003194:	41055cc0 	.word	0x41055cc0
 8003198:	00000000 	.word	0x00000000
 800319c:	410adb00 	.word	0x410adb00
 80031a0:	00000000 	.word	0x00000000
 80031a4:	41111700 	.word	0x41111700
 80031a8:	00000000 	.word	0x00000000
 80031ac:	41155cc0 	.word	0x41155cc0
 80031b0:	00000000 	.word	0x00000000
 80031b4:	411adb00 	.word	0x411adb00
 80031b8:	00000000 	.word	0x00000000
 80031bc:	41200590 	.word	0x41200590
 80031c0:	40418000 	.word	0x40418000
 80031c4:	40fd4c00 	.word	0x40fd4c00

080031c8 <get_register_value>:


// Return the value of a selected RAM register (0-17) on the RHD2000 chip,
// based on the current register variables in RHDConfigParameters.
uint16_t get_register_value(RHDConfigParameters *p, int reg)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
	int regout;
	const int ZcheckDac = 128;  // midrange
 80031d2:	2380      	movs	r3, #128	@ 0x80
 80031d4:	60bb      	str	r3, [r7, #8]

	switch (reg) {
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b11      	cmp	r3, #17
 80031da:	f200 816f 	bhi.w	80034bc <get_register_value+0x2f4>
 80031de:	a201      	add	r2, pc, #4	@ (adr r2, 80031e4 <get_register_value+0x1c>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	0800322d 	.word	0x0800322d
 80031e8:	08003257 	.word	0x08003257
 80031ec:	08003267 	.word	0x08003267
 80031f0:	0800326f 	.word	0x0800326f
 80031f4:	0800329f 	.word	0x0800329f
 80031f8:	080032c7 	.word	0x080032c7
 80031fc:	080032f7 	.word	0x080032f7
 8003200:	080032fd 	.word	0x080032fd
 8003204:	08003305 	.word	0x08003305
 8003208:	08003317 	.word	0x08003317
 800320c:	08003329 	.word	0x08003329
 8003210:	0800333b 	.word	0x0800333b
 8003214:	0800334d 	.word	0x0800334d
 8003218:	0800335f 	.word	0x0800335f
 800321c:	0800337d 	.word	0x0800337d
 8003220:	080033cd 	.word	0x080033cd
 8003224:	0800341d 	.word	0x0800341d
 8003228:	0800346d 	.word	0x0800346d
	case 0:
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	019a      	lsls	r2, r3, #6
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8003238:	015b      	lsls	r3, r3, #5
 800323a:	441a      	add	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	009b      	lsls	r3, r3, #2
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 800324a:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8003250:	4413      	add	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
		break;
 8003254:	e134      	b.n	80034c0 <get_register_value+0x2f8>

	case 1:
		regout = (p->vdd_sense_enable << 6) + p->adc_buffer_bias;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	019a      	lsls	r2, r3, #6
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	4413      	add	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
		break;
 8003264:	e12c      	b.n	80034c0 <get_register_value+0x2f8>

	case 2:
		regout = p->mux_bias;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	60fb      	str	r3, [r7, #12]
		break;
 800326c:	e128      	b.n	80034c0 <get_register_value+0x2f8>

	case 3:
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	441a      	add	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	441a      	add	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003290:	005b      	lsls	r3, r3, #1
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8003292:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8003298:	4413      	add	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
		break;
 800329c:	e110      	b.n	80034c0 <get_register_value+0x2f8>

	case 4:
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a2:	01da      	lsls	r2, r3, #7
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	019b      	lsls	r3, r3, #6
 80032aa:	441a      	add	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b0:	015b      	lsls	r3, r3, #5
 80032b2:	441a      	add	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	441a      	add	r2, r3
			(p->DSP_cutoff_freq);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 80032c0:	4413      	add	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
		break;
 80032c4:	e0fc      	b.n	80034c0 <get_register_value+0x2f8>

	case 5:
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ca:	019a      	lsls	r2, r3, #6
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d0:	015b      	lsls	r3, r3, #5
 80032d2:	441a      	add	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e0:	009b      	lsls	r3, r3, #2
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 80032e2:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	441a      	add	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 80032f0:	4413      	add	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
		break;
 80032f4:	e0e4      	b.n	80034c0 <get_register_value+0x2f8>

	case 6:
		regout = ZcheckDac;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	60fb      	str	r3, [r7, #12]
		break;
 80032fa:	e0e1      	b.n	80034c0 <get_register_value+0x2f8>

	case 7:
		regout = p->zcheck_select;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003300:	60fb      	str	r3, [r7, #12]
		break;
 8003302:	e0dd      	b.n	80034c0 <get_register_value+0x2f8>

	case 8:
		regout = (p->off_chip_RH1 << 7) + p->rH1_DAC1;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003308:	01da      	lsls	r2, r3, #7
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003310:	4413      	add	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
		break;
 8003314:	e0d4      	b.n	80034c0 <get_register_value+0x2f8>

	case 9:
		regout = (p->adc_Aux1_en << 7) + p->rH1_DAC2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800331a:	01da      	lsls	r2, r3, #7
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003322:	4413      	add	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
		break;
 8003326:	e0cb      	b.n	80034c0 <get_register_value+0x2f8>

	case 10:
		regout = (p->off_chip_RH2 << 7) + p->rH2_DAC1;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332c:	01da      	lsls	r2, r3, #7
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003334:	4413      	add	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
		break;
 8003338:	e0c2      	b.n	80034c0 <get_register_value+0x2f8>

	case 11:
		regout = (p->adc_Aux2_en << 7) + p->rH2_DAC2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800333e:	01da      	lsls	r2, r3, #7
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003346:	4413      	add	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
		break;
 800334a:	e0b9      	b.n	80034c0 <get_register_value+0x2f8>

	case 12:
		regout = (p->off_chip_RL << 7) + p->rL_DAC1;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003350:	01da      	lsls	r2, r3, #7
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003358:	4413      	add	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
		break;
 800335c:	e0b0      	b.n	80034c0 <get_register_value+0x2f8>

	case 13:
		regout = (p->adc_Aux3_en << 7) + (p->rL_DAC3 << 6) + p->rL_DAC2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003364:	01da      	lsls	r2, r3, #7
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	441a      	add	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003376:	4413      	add	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
		break;
 800337a:	e0a1      	b.n	80034c0 <get_register_value+0x2f8>

	case 14:
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003382:	01da      	lsls	r2, r3, #7
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800338a:	019b      	lsls	r3, r3, #6
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003394:	015b      	lsls	r3, r3, #5
 8003396:	441a      	add	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80033a8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 80033aa:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	441a      	add	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	441a      	add	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 80033c6:	4413      	add	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
		break;
 80033ca:	e079      	b.n	80034c0 <get_register_value+0x2f8>

	case 15:
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80033d2:	01da      	lsls	r2, r3, #7
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033da:	019b      	lsls	r3, r3, #6
 80033dc:	441a      	add	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80033e4:	015b      	lsls	r3, r3, #5
 80033e6:	441a      	add	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80033f8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 80033fa:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	441a      	add	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8003416:	4413      	add	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
		break;
 800341a:	e051      	b.n	80034c0 <get_register_value+0x2f8>

	case 16:
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8003422:	01da      	lsls	r2, r3, #7
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800342a:	019b      	lsls	r3, r3, #6
 800342c:	441a      	add	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003434:	015b      	lsls	r3, r3, #5
 8003436:	441a      	add	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003448:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 800344a:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	441a      	add	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	441a      	add	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8003466:	4413      	add	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
		break;
 800346a:	e029      	b.n	80034c0 <get_register_value+0x2f8>

	case 17:
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003472:	01da      	lsls	r2, r3, #7
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800347a:	019b      	lsls	r3, r3, #6
 800347c:	441a      	add	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003484:	015b      	lsls	r3, r3, #5
 8003486:	441a      	add	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003498:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 800349a:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	441a      	add	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 80034b6:	4413      	add	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
		break;
 80034ba:	e001      	b.n	80034c0 <get_register_value+0x2f8>

	default:
		regout = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
	}
	return regout;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	b29b      	uxth	r3, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <convert_command>:
// A special case with channel = 63 can be used to cycle through successive amplifier channels,
// so long as at least one defined-channel convert command is called first.
// Once sent, SPI returns (2 commands later) the 16-bit result of this conversion.
// Command: 00_C[5]-C[0]_0000000H for channel C and hBit H
// Result:  A[15]-A[0] for ADC conversion output A
uint16_t convert_command(uint8_t channel, uint8_t h_bit) {
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	460a      	mov	r2, r1
 80034da:	71fb      	strb	r3, [r7, #7]
 80034dc:	4613      	mov	r3, r2
 80034de:	71bb      	strb	r3, [r7, #6]
	const uint16_t convert_mask = 0b0000000000000000;
 80034e0:	2300      	movs	r3, #0
 80034e2:	81fb      	strh	r3, [r7, #14]
	const uint16_t channel_mask = channel << 8;
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	81bb      	strh	r3, [r7, #12]
	const uint16_t h_bit_mask = (uint16_t) h_bit;
 80034ec:	79bb      	ldrb	r3, [r7, #6]
 80034ee:	817b      	strh	r3, [r7, #10]
	return convert_mask | channel_mask | h_bit_mask;
 80034f0:	89fa      	ldrh	r2, [r7, #14]
 80034f2:	89bb      	ldrh	r3, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	897b      	ldrh	r3, [r7, #10]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	b29b      	uxth	r3, r3
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <calibrate_command>:
// These dummy commands are not executed (unless another calibration command is sent, which resets the process).
// During the entire 9-command process, the results are all 0s except the for the MSB.
// The MSB will be 0 if 2's complement mode is enabled (see Register 4), otherwise it will be 1.
// Command: 01010101_00000000
// Result:  *0000000_00000000 where * depends on 2's complement mode
uint16_t calibrate_command() {
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0
	return 0b0101010100000000;
 800350e:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
}
 8003512:	4618      	mov	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <write_command>:
// echoed data that was written (to verify reception of correct data).
// Any attempt to write to a read-only register (or non-existent register) will produce this same result,
// but data will not be written to that register.
// Command: 10_R[5]-R[0]_D[7]-D[0]
// Result:  11111111_D[7]-D[0]
uint16_t write_command(uint8_t reg_addr, uint8_t data) {
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	460a      	mov	r2, r1
 8003526:	71fb      	strb	r3, [r7, #7]
 8003528:	4613      	mov	r3, r2
 800352a:	71bb      	strb	r3, [r7, #6]
	const uint16_t read_mask = 0b1000000000000000;
 800352c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003530:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	b29b      	uxth	r3, r3
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask | (uint16_t) data;
 800353a:	89fa      	ldrh	r2, [r7, #14]
 800353c:	89bb      	ldrh	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	b29a      	uxth	r2, r3
 8003542:	79bb      	ldrb	r3, [r7, #6]
 8003544:	b29b      	uxth	r3, r3
 8003546:	4313      	orrs	r3, r2
 8003548:	b29b      	uxth	r3, r3
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <read_command>:

// Read contents of register.
// Once sent, SPI returns (2 commands later) 8 MSBs of 0s, and 8 LSBs of the read data.
// Command: 11_R[5]-R[0]_00000000
// Result:  00000000_D[7]-D[0]
uint16_t read_command(uint8_t reg_addr) {
 8003556:	b480      	push	{r7}
 8003558:	b085      	sub	sp, #20
 800355a:	af00      	add	r7, sp, #0
 800355c:	4603      	mov	r3, r0
 800355e:	71fb      	strb	r3, [r7, #7]
	const uint16_t read_mask = 0b1100000000000000;
 8003560:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003564:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	b29b      	uxth	r3, r3
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask;
 800356e:	89fa      	ldrh	r2, [r7, #14]
 8003570:	89bb      	ldrh	r3, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	b29b      	uxth	r3, r3
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <HAL_MspInit+0x30>)
 800358c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003590:	4a08      	ldr	r2, [pc, #32]	@ (80035b4 <HAL_MspInit+0x30>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800359a:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <HAL_MspInit+0x30>)
 800359c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80035a8:	f002 fa02 	bl	80059b0 <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	46020c00 	.word	0x46020c00

080035b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b0c2      	sub	sp, #264	@ 0x108
 80035bc:	af00      	add	r7, sp, #0
 80035be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80035c6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035d8:	f107 0318 	add.w	r3, r7, #24
 80035dc:	22d8      	movs	r2, #216	@ 0xd8
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f00a f9ab 	bl	800d93c <memset>
  if(hspi->Instance==SPI3)
 80035e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a8a      	ldr	r2, [pc, #552]	@ (800381c <HAL_SPI_MspInit+0x264>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	f040 810b 	bne.w	8003810 <HAL_SPI_MspInit+0x258>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80035fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PCLK3;
 8003606:	2300      	movs	r3, #0
 8003608:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800360c:	f107 0318 	add.w	r3, r7, #24
 8003610:	4618      	mov	r0, r3
 8003612:	f003 fc99 	bl	8006f48 <HAL_RCCEx_PeriphCLKConfig>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 800361c:	f7fe f854 	bl	80016c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003620:	4b7f      	ldr	r3, [pc, #508]	@ (8003820 <HAL_SPI_MspInit+0x268>)
 8003622:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003626:	4a7e      	ldr	r2, [pc, #504]	@ (8003820 <HAL_SPI_MspInit+0x268>)
 8003628:	f043 0320 	orr.w	r3, r3, #32
 800362c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003630:	4b7b      	ldr	r3, [pc, #492]	@ (8003820 <HAL_SPI_MspInit+0x268>)
 8003632:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	4b78      	ldr	r3, [pc, #480]	@ (8003820 <HAL_SPI_MspInit+0x268>)
 8003640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003644:	4a76      	ldr	r2, [pc, #472]	@ (8003820 <HAL_SPI_MspInit+0x268>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800364e:	4b74      	ldr	r3, [pc, #464]	@ (8003820 <HAL_SPI_MspInit+0x268>)
 8003650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800365c:	4b70      	ldr	r3, [pc, #448]	@ (8003820 <HAL_SPI_MspInit+0x268>)
 800365e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003662:	4a6f      	ldr	r2, [pc, #444]	@ (8003820 <HAL_SPI_MspInit+0x268>)
 8003664:	f043 0304 	orr.w	r3, r3, #4
 8003668:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800366c:	4b6c      	ldr	r3, [pc, #432]	@ (8003820 <HAL_SPI_MspInit+0x268>)
 800366e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800367a:	2310      	movs	r3, #16
 800367c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003680:	2302      	movs	r3, #2
 8003682:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368c:	2303      	movs	r3, #3
 800368e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003692:	2306      	movs	r3, #6
 8003694:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003698:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800369c:	4619      	mov	r1, r3
 800369e:	4861      	ldr	r0, [pc, #388]	@ (8003824 <HAL_SPI_MspInit+0x26c>)
 80036a0:	f001 fe8a 	bl	80053b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80036a4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80036a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ac:	2302      	movs	r3, #2
 80036ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b8:	2303      	movs	r3, #3
 80036ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036be:	2306      	movs	r3, #6
 80036c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4857      	ldr	r0, [pc, #348]	@ (8003828 <HAL_SPI_MspInit+0x270>)
 80036cc:	f001 fe74 	bl	80053b8 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* GPDMA1_REQUEST_SPI3_RX Init */
    handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 80036d0:	4b56      	ldr	r3, [pc, #344]	@ (800382c <HAL_SPI_MspInit+0x274>)
 80036d2:	4a57      	ldr	r2, [pc, #348]	@ (8003830 <HAL_SPI_MspInit+0x278>)
 80036d4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel13.Init.Request = GPDMA1_REQUEST_SPI3_RX;
 80036d6:	4b55      	ldr	r3, [pc, #340]	@ (800382c <HAL_SPI_MspInit+0x274>)
 80036d8:	220a      	movs	r2, #10
 80036da:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel13.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80036dc:	4b53      	ldr	r3, [pc, #332]	@ (800382c <HAL_SPI_MspInit+0x274>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel13.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036e2:	4b52      	ldr	r3, [pc, #328]	@ (800382c <HAL_SPI_MspInit+0x274>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel13.Init.SrcInc = DMA_SINC_FIXED;
 80036e8:	4b50      	ldr	r3, [pc, #320]	@ (800382c <HAL_SPI_MspInit+0x274>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel13.Init.DestInc = DMA_DINC_INCREMENTED;
 80036ee:	4b4f      	ldr	r3, [pc, #316]	@ (800382c <HAL_SPI_MspInit+0x274>)
 80036f0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80036f4:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel13.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80036f6:	4b4d      	ldr	r3, [pc, #308]	@ (800382c <HAL_SPI_MspInit+0x274>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel13.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80036fc:	4b4b      	ldr	r3, [pc, #300]	@ (800382c <HAL_SPI_MspInit+0x274>)
 80036fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003702:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel13.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8003704:	4b49      	ldr	r3, [pc, #292]	@ (800382c <HAL_SPI_MspInit+0x274>)
 8003706:	2200      	movs	r2, #0
 8003708:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel13.Init.SrcBurstLength = 1;
 800370a:	4b48      	ldr	r3, [pc, #288]	@ (800382c <HAL_SPI_MspInit+0x274>)
 800370c:	2201      	movs	r2, #1
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel13.Init.DestBurstLength = 1;
 8003710:	4b46      	ldr	r3, [pc, #280]	@ (800382c <HAL_SPI_MspInit+0x274>)
 8003712:	2201      	movs	r2, #1
 8003714:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel13.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8003716:	4b45      	ldr	r3, [pc, #276]	@ (800382c <HAL_SPI_MspInit+0x274>)
 8003718:	2200      	movs	r2, #0
 800371a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel13.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800371c:	4b43      	ldr	r3, [pc, #268]	@ (800382c <HAL_SPI_MspInit+0x274>)
 800371e:	2200      	movs	r2, #0
 8003720:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel13.Init.Mode = DMA_NORMAL;
 8003722:	4b42      	ldr	r3, [pc, #264]	@ (800382c <HAL_SPI_MspInit+0x274>)
 8003724:	2200      	movs	r2, #0
 8003726:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 8003728:	4840      	ldr	r0, [pc, #256]	@ (800382c <HAL_SPI_MspInit+0x274>)
 800372a:	f000 ff01 	bl	8004530 <HAL_DMA_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_SPI_MspInit+0x180>
    {
      Error_Handler();
 8003734:	f7fd ffc8 	bl	80016c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel13);
 8003738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800373c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a3a      	ldr	r2, [pc, #232]	@ (800382c <HAL_SPI_MspInit+0x274>)
 8003744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003748:	4a38      	ldr	r2, [pc, #224]	@ (800382c <HAL_SPI_MspInit+0x274>)
 800374a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800374e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003756:	2110      	movs	r1, #16
 8003758:	4834      	ldr	r0, [pc, #208]	@ (800382c <HAL_SPI_MspInit+0x274>)
 800375a:	f001 fa87 	bl	8004c6c <HAL_DMA_ConfigChannelAttributes>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_SPI_MspInit+0x1b0>
    {
      Error_Handler();
 8003764:	f7fd ffb0 	bl	80016c8 <Error_Handler>
    }

    /* GPDMA1_REQUEST_SPI3_TX Init */
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8003768:	4b32      	ldr	r3, [pc, #200]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 800376a:	4a33      	ldr	r2, [pc, #204]	@ (8003838 <HAL_SPI_MspInit+0x280>)
 800376c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_SPI3_TX;
 800376e:	4b31      	ldr	r3, [pc, #196]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 8003770:	220b      	movs	r2, #11
 8003772:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003774:	4b2f      	ldr	r3, [pc, #188]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800377a:	4b2e      	ldr	r3, [pc, #184]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 800377c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003780:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_INCREMENTED;
 8003782:	4b2c      	ldr	r3, [pc, #176]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 8003784:	2208      	movs	r2, #8
 8003786:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_FIXED;
 8003788:	4b2a      	ldr	r3, [pc, #168]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 800378a:	2200      	movs	r2, #0
 800378c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800378e:	4b29      	ldr	r3, [pc, #164]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 8003790:	2201      	movs	r2, #1
 8003792:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8003794:	4b27      	ldr	r3, [pc, #156]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 8003796:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800379a:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800379c:	4b25      	ldr	r3, [pc, #148]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 800379e:	2200      	movs	r2, #0
 80037a0:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 80037a2:	4b24      	ldr	r3, [pc, #144]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 80037a8:	4b22      	ldr	r3, [pc, #136]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80037ae:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80037b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 80037ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 80037c0:	481c      	ldr	r0, [pc, #112]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 80037c2:	f000 feb5 	bl	8004530 <HAL_DMA_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_SPI_MspInit+0x218>
    {
      Error_Handler();
 80037cc:	f7fd ff7c 	bl	80016c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel12);
 80037d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a16      	ldr	r2, [pc, #88]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 80037dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80037e0:	4a14      	ldr	r2, [pc, #80]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 80037e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 80037ee:	2110      	movs	r1, #16
 80037f0:	4810      	ldr	r0, [pc, #64]	@ (8003834 <HAL_SPI_MspInit+0x27c>)
 80037f2:	f001 fa3b 	bl	8004c6c <HAL_DMA_ConfigChannelAttributes>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_SPI_MspInit+0x248>
    {
      Error_Handler();
 80037fc:	f7fd ff64 	bl	80016c8 <Error_Handler>
    }

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003800:	2200      	movs	r2, #0
 8003802:	2100      	movs	r1, #0
 8003804:	2063      	movs	r0, #99	@ 0x63
 8003806:	f000 fdb7 	bl	8004378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800380a:	2063      	movs	r0, #99	@ 0x63
 800380c:	f000 fdce 	bl	80043ac <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003810:	bf00      	nop
 8003812:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	46002000 	.word	0x46002000
 8003820:	46020c00 	.word	0x46020c00
 8003824:	42020000 	.word	0x42020000
 8003828:	42020800 	.word	0x42020800
 800382c:	20000134 	.word	0x20000134
 8003830:	400206d0 	.word	0x400206d0
 8003834:	200001ac 	.word	0x200001ac
 8003838:	40020650 	.word	0x40020650

0800383c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a0e      	ldr	r2, [pc, #56]	@ (8003884 <HAL_TIM_OC_MspInit+0x48>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d116      	bne.n	800387c <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800384e:	4b0e      	ldr	r3, [pc, #56]	@ (8003888 <HAL_TIM_OC_MspInit+0x4c>)
 8003850:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003854:	4a0c      	ldr	r2, [pc, #48]	@ (8003888 <HAL_TIM_OC_MspInit+0x4c>)
 8003856:	f043 0302 	orr.w	r3, r3, #2
 800385a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800385e:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <HAL_TIM_OC_MspInit+0x4c>)
 8003860:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800386c:	2200      	movs	r2, #0
 800386e:	2100      	movs	r1, #0
 8003870:	202e      	movs	r0, #46	@ 0x2e
 8003872:	f000 fd81 	bl	8004378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003876:	202e      	movs	r0, #46	@ 0x2e
 8003878:	f000 fd98 	bl	80043ac <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40000400 	.word	0x40000400
 8003888:	46020c00 	.word	0x46020c00

0800388c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b0c2      	sub	sp, #264	@ 0x108
 8003890:	af00      	add	r7, sp, #0
 8003892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800389a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	60da      	str	r2, [r3, #12]
 80038aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038ac:	f107 0318 	add.w	r3, r7, #24
 80038b0:	22d8      	movs	r2, #216	@ 0xd8
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f00a f841 	bl	800d93c <memset>
  if(huart->Instance==USART1)
 80038ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a87      	ldr	r2, [pc, #540]	@ (8003ae4 <HAL_UART_MspInit+0x258>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	f040 80b0 	bne.w	8003a2e <HAL_UART_MspInit+0x1a2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038ce:	f04f 0201 	mov.w	r2, #1
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038da:	2300      	movs	r3, #0
 80038dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038de:	f107 0318 	add.w	r3, r7, #24
 80038e2:	4618      	mov	r0, r3
 80038e4:	f003 fb30 	bl	8006f48 <HAL_RCCEx_PeriphCLKConfig>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80038ee:	f7fd feeb 	bl	80016c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038f2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ae8 <HAL_UART_MspInit+0x25c>)
 80038f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038f8:	4a7b      	ldr	r2, [pc, #492]	@ (8003ae8 <HAL_UART_MspInit+0x25c>)
 80038fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038fe:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003902:	4b79      	ldr	r3, [pc, #484]	@ (8003ae8 <HAL_UART_MspInit+0x25c>)
 8003904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003910:	4b75      	ldr	r3, [pc, #468]	@ (8003ae8 <HAL_UART_MspInit+0x25c>)
 8003912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003916:	4a74      	ldr	r2, [pc, #464]	@ (8003ae8 <HAL_UART_MspInit+0x25c>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003920:	4b71      	ldr	r3, [pc, #452]	@ (8003ae8 <HAL_UART_MspInit+0x25c>)
 8003922:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin;
 800392e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003932:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003936:	2302      	movs	r3, #2
 8003938:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003942:	2303      	movs	r3, #3
 8003944:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003948:	2307      	movs	r3, #7
 800394a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(T_VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800394e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003952:	4619      	mov	r1, r3
 8003954:	4865      	ldr	r0, [pc, #404]	@ (8003aec <HAL_UART_MspInit+0x260>)
 8003956:	f001 fd2f 	bl	80053b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800395a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800395e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003962:	2302      	movs	r3, #2
 8003964:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003968:	2300      	movs	r3, #0
 800396a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003974:	2307      	movs	r3, #7
 8003976:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800397e:	4619      	mov	r1, r3
 8003980:	485a      	ldr	r0, [pc, #360]	@ (8003aec <HAL_UART_MspInit+0x260>)
 8003982:	f001 fd19 	bl	80053b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8003986:	4b5a      	ldr	r3, [pc, #360]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 8003988:	4a5a      	ldr	r2, [pc, #360]	@ (8003af4 <HAL_UART_MspInit+0x268>)
 800398a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_TX;
 800398c:	4b58      	ldr	r3, [pc, #352]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 800398e:	2219      	movs	r2, #25
 8003990:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003992:	4b57      	ldr	r3, [pc, #348]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003998:	4b55      	ldr	r3, [pc, #340]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 800399a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800399e:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 80039a0:	4b53      	ldr	r3, [pc, #332]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039a2:	2208      	movs	r2, #8
 80039a4:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 80039a6:	4b52      	ldr	r3, [pc, #328]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80039ac:	4b50      	ldr	r3, [pc, #320]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80039b2:	4b4f      	ldr	r3, [pc, #316]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_HIGH_PRIORITY;
 80039b8:	4b4d      	ldr	r3, [pc, #308]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039ba:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80039be:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80039c0:	4b4b      	ldr	r3, [pc, #300]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80039c6:	4b4a      	ldr	r3, [pc, #296]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80039cc:	4b48      	ldr	r3, [pc, #288]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80039d2:	4b47      	ldr	r3, [pc, #284]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80039d8:	4b45      	ldr	r3, [pc, #276]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039da:	2200      	movs	r2, #0
 80039dc:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80039de:	4844      	ldr	r0, [pc, #272]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039e0:	f000 fda6 	bl	8004530 <HAL_DMA_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80039ea:	f7fd fe6d 	bl	80016c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel0);
 80039ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a3d      	ldr	r2, [pc, #244]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039fa:	67da      	str	r2, [r3, #124]	@ 0x7c
 80039fc:	4a3c      	ldr	r2, [pc, #240]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 80039fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	4838      	ldr	r0, [pc, #224]	@ (8003af0 <HAL_UART_MspInit+0x264>)
 8003a0e:	f001 f92d 	bl	8004c6c <HAL_DMA_ConfigChannelAttributes>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_UART_MspInit+0x190>
    {
      Error_Handler();
 8003a18:	f7fd fe56 	bl	80016c8 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2100      	movs	r1, #0
 8003a20:	203d      	movs	r0, #61	@ 0x3d
 8003a22:	f000 fca9 	bl	8004378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a26:	203d      	movs	r0, #61	@ 0x3d
 8003a28:	f000 fcc0 	bl	80043ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a2c:	e055      	b.n	8003ada <HAL_UART_MspInit+0x24e>
  else if(huart->Instance==USART2)
 8003a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003af8 <HAL_UART_MspInit+0x26c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d14c      	bne.n	8003ada <HAL_UART_MspInit+0x24e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a40:	f04f 0202 	mov.w	r2, #2
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a50:	f107 0318 	add.w	r3, r7, #24
 8003a54:	4618      	mov	r0, r3
 8003a56:	f003 fa77 	bl	8006f48 <HAL_RCCEx_PeriphCLKConfig>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 8003a60:	f7fd fe32 	bl	80016c8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a64:	4b20      	ldr	r3, [pc, #128]	@ (8003ae8 <HAL_UART_MspInit+0x25c>)
 8003a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae8 <HAL_UART_MspInit+0x25c>)
 8003a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a70:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003a74:	4b1c      	ldr	r3, [pc, #112]	@ (8003ae8 <HAL_UART_MspInit+0x25c>)
 8003a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a82:	4b19      	ldr	r3, [pc, #100]	@ (8003ae8 <HAL_UART_MspInit+0x25c>)
 8003a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a88:	4a17      	ldr	r2, [pc, #92]	@ (8003ae8 <HAL_UART_MspInit+0x25c>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a92:	4b15      	ldr	r3, [pc, #84]	@ (8003ae8 <HAL_UART_MspInit+0x25c>)
 8003a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a98:	f003 0201 	and.w	r2, r3, #1
 8003a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003aa0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003aaa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003aae:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ac8:	2307      	movs	r3, #7
 8003aca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ace:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4805      	ldr	r0, [pc, #20]	@ (8003aec <HAL_UART_MspInit+0x260>)
 8003ad6:	f001 fc6f 	bl	80053b8 <HAL_GPIO_Init>
}
 8003ada:	bf00      	nop
 8003adc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40013800 	.word	0x40013800
 8003ae8:	46020c00 	.word	0x46020c00
 8003aec:	42020000 	.word	0x42020000
 8003af0:	20000398 	.word	0x20000398
 8003af4:	40020050 	.word	0x40020050
 8003af8:	40004400 	.word	0x40004400

08003afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b00:	bf00      	nop
 8003b02:	e7fd      	b.n	8003b00 <NMI_Handler+0x4>

08003b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <HardFault_Handler+0x4>

08003b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <MemManage_Handler+0x4>

08003b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <BusFault_Handler+0x4>

08003b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b20:	bf00      	nop
 8003b22:	e7fd      	b.n	8003b20 <UsageFault_Handler+0x4>

08003b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SysTick_counter++;
 8003b54:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <SysTick_Handler+0x20>)
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	1c50      	adds	r0, r2, #1
 8003b5c:	f143 0100 	adc.w	r1, r3, #0
 8003b60:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <SysTick_Handler+0x20>)
 8003b62:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b66:	f000 fb0b 	bl	8004180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200007a8 	.word	0x200007a8

08003b74 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_usart_tx();
#endif
  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8003b78:	4802      	ldr	r0, [pc, #8]	@ (8003b84 <GPDMA1_Channel0_IRQHandler+0x10>)
 8003b7a:	f000 ff0a 	bl	8004992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000398 	.word	0x20000398

08003b88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	if (!LL_TIM_IsActiveFlag_UPDATE(INTERRUPT_TIM)) return; // Ignore any non-UPDATE events that may  have generated this interrupt
	LL_TIM_ClearFlag_UPDATE(INTERRUPT_TIM); // If this was an UPDATE event, clear the flag and proceed with interrupt routine
	sample_interrupt_routine();
#endif
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b8c:	4802      	ldr	r0, [pc, #8]	@ (8003b98 <TIM3_IRQHandler+0x10>)
 8003b8e:	f007 f969 	bl	800ae64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000224 	.word	0x20000224

08003b9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
#ifndef USE_HAL
	uart_interrupt_routine();
#endif
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ba0:	4802      	ldr	r0, [pc, #8]	@ (8003bac <USART1_IRQHandler+0x10>)
 8003ba2:	f008 fad5 	bl	800c150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000270 	.word	0x20000270

08003bb0 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_tx();
#endif
  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8003bb4:	4802      	ldr	r0, [pc, #8]	@ (8003bc0 <GPDMA1_Channel12_IRQHandler+0x10>)
 8003bb6:	f000 feec 	bl	8004992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200001ac 	.word	0x200001ac

08003bc4 <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_rx();
#endif
  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 8003bc8:	4802      	ldr	r0, [pc, #8]	@ (8003bd4 <GPDMA1_Channel13_IRQHandler+0x10>)
 8003bca:	f000 fee2 	bl	8004992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000134 	.word	0x20000134

08003bd8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine();
#endif
  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003bdc:	4802      	ldr	r0, [pc, #8]	@ (8003be8 <SPI3_IRQHandler+0x10>)
 8003bde:	f006 fcaf 	bl	800a540 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	200000a4 	.word	0x200000a4

08003bec <HAL_TIM_PeriodElapsedCallback>:

#ifdef USE_HAL

// This HAL function is called when the timer reaches its counter target - execute interrupt routine when this happens
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	sample_interrupt_routine();
 8003bf4:	f7fd fd80 	bl	80016f8 <sample_interrupt_routine>
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	e00a      	b.n	8003c28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c12:	f3af 8000 	nop.w
 8003c16:	4601      	mov	r1, r0
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	60ba      	str	r2, [r7, #8]
 8003c1e:	b2ca      	uxtb	r2, r1
 8003c20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	3301      	adds	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	dbf0      	blt.n	8003c12 <_read+0x12>
  }

  return len;
 8003c30:	687b      	ldr	r3, [r7, #4]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b086      	sub	sp, #24
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e009      	b.n	8003c60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	60ba      	str	r2, [r7, #8]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fd fd25 	bl	80016a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	dbf1      	blt.n	8003c4c <_write+0x12>
  }
  return len;
 8003c68:	687b      	ldr	r3, [r7, #4]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <_close>:

int _close(int file)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c9a:	605a      	str	r2, [r3, #4]
  return 0;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <_isatty>:

int _isatty(int file)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cb2:	2301      	movs	r3, #1
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ce4:	4a14      	ldr	r2, [pc, #80]	@ (8003d38 <_sbrk+0x5c>)
 8003ce6:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <_sbrk+0x60>)
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <_sbrk+0x64>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <_sbrk+0x64>)
 8003cfa:	4a12      	ldr	r2, [pc, #72]	@ (8003d44 <_sbrk+0x68>)
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cfe:	4b10      	ldr	r3, [pc, #64]	@ (8003d40 <_sbrk+0x64>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d207      	bcs.n	8003d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d0c:	f009 fe74 	bl	800d9f8 <__errno>
 8003d10:	4603      	mov	r3, r0
 8003d12:	220c      	movs	r2, #12
 8003d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d16:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1a:	e009      	b.n	8003d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d1c:	4b08      	ldr	r3, [pc, #32]	@ (8003d40 <_sbrk+0x64>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d22:	4b07      	ldr	r3, [pc, #28]	@ (8003d40 <_sbrk+0x64>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	4a05      	ldr	r2, [pc, #20]	@ (8003d40 <_sbrk+0x64>)
 8003d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20270000 	.word	0x20270000
 8003d3c:	00000400 	.word	0x00000400
 8003d40:	200007b0 	.word	0x200007b0
 8003d44:	20000908 	.word	0x20000908

08003d48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d4c:	4b18      	ldr	r3, [pc, #96]	@ (8003db0 <SystemInit+0x68>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d52:	4a17      	ldr	r2, [pc, #92]	@ (8003db0 <SystemInit+0x68>)
 8003d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003d5c:	4b15      	ldr	r3, [pc, #84]	@ (8003db4 <SystemInit+0x6c>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003d62:	4b14      	ldr	r3, [pc, #80]	@ (8003db4 <SystemInit+0x6c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003d68:	4b12      	ldr	r3, [pc, #72]	@ (8003db4 <SystemInit+0x6c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8003d6e:	4b11      	ldr	r3, [pc, #68]	@ (8003db4 <SystemInit+0x6c>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003d74:	4b0f      	ldr	r3, [pc, #60]	@ (8003db4 <SystemInit+0x6c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a0e      	ldr	r2, [pc, #56]	@ (8003db4 <SystemInit+0x6c>)
 8003d7a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8003d7e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8003d82:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <SystemInit+0x6c>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <SystemInit+0x6c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a09      	ldr	r2, [pc, #36]	@ (8003db4 <SystemInit+0x6c>)
 8003d90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003d96:	4b07      	ldr	r3, [pc, #28]	@ (8003db4 <SystemInit+0x6c>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d9c:	4b04      	ldr	r3, [pc, #16]	@ (8003db0 <SystemInit+0x68>)
 8003d9e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003da2:	609a      	str	r2, [r3, #8]
  #endif
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	e000ed00 	.word	0xe000ed00
 8003db4:	46020c00 	.word	0x46020c00

08003db8 <loop_escape>:
#include <math.h>

// Specify condition that should result in the main while loop ending.
// By default, escape once 1 second of data has been gathered.
int loop_escape()
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
	// Escape once sample memory capacity (default 1 second of data) has been reached.
#ifdef OFFLINE_TRANSFER
	return sample_counter > per_channel_sample_memory_capacity;
 8003dbc:	4b07      	ldr	r3, [pc, #28]	@ (8003ddc <loop_escape+0x24>)
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4b06      	ldr	r3, [pc, #24]	@ (8003de0 <loop_escape+0x28>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	bf8c      	ite	hi
 8003dcc:	2301      	movhi	r3, #1
 8003dce:	2300      	movls	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
#else
	return 0;
#endif
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	2000049e 	.word	0x2000049e
 8003de0:	20000000 	.word	0x20000000

08003de4 <write_data_to_memory>:


// Write any desired data from this sequence to memory.
// By default, only the result corresponding to a CONVERT on FIRST_SAMPLED_CHANNEL is saved per sequence.
void write_data_to_memory()
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
#ifdef OFFLINE_TRANSFER
	// Save single sample to sample_memory array.
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 8003dea:	2300      	movs	r3, #0
 8003dec:	607b      	str	r3, [r7, #4]
 8003dee:	e014      	b.n	8003e1a <write_data_to_memory+0x36>
		sample_memory[(sample_counter * NUM_SAMPLED_CHANNELS) + i] = command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2];
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f103 020a 	add.w	r2, r3, #10
 8003df6:	4b11      	ldr	r3, [pc, #68]	@ (8003e3c <write_data_to_memory+0x58>)
 8003df8:	6819      	ldr	r1, [r3, #0]
 8003dfa:	4b11      	ldr	r3, [pc, #68]	@ (8003e40 <write_data_to_memory+0x5c>)
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	0098      	lsls	r0, r3, #2
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4403      	add	r3, r0
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	440b      	add	r3, r1
 8003e0a:	490e      	ldr	r1, [pc, #56]	@ (8003e44 <write_data_to_memory+0x60>)
 8003e0c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003e10:	b292      	uxth	r2, r2
 8003e12:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3301      	adds	r3, #1
 8003e18:	607b      	str	r3, [r7, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	dde7      	ble.n	8003df0 <write_data_to_memory+0xc>
	}
	sample_counter++;
 8003e20:	4b07      	ldr	r3, [pc, #28]	@ (8003e40 <write_data_to_memory+0x5c>)
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3301      	adds	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <write_data_to_memory+0x5c>)
 8003e2c:	801a      	strh	r2, [r3, #0]
//	// For more advanced programs that require reading of aux command results, those would be read and saved here.
//	uint16_t aux0_result = command_sequence_MISO[34]; // Result of AUX SLOT 1 from this command sequence
//	uint16_t aux1_result = command_sequence_MISO[0];  // Result of AUX SLOT 2 from the previous command sequence
//	uint16_t aux2_result = command_sequence_MISO[1];  // Result of AUX SLOT 3 from the previous command sequence
#endif
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	200004a0 	.word	0x200004a0
 8003e40:	2000049e 	.word	0x2000049e
 8003e44:	20000458 	.word	0x20000458

08003e48 <transmit_data_realtime>:


// Determine if data is ready to be transmitted, and if so, transmit (for example via USART).
void transmit_data_realtime()
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE; i++) {
//		command_sequence_MISO[i] = i;
//	}
	transmit_dma_to_usart(&command_sequence_MISO[FIRST_SAMPLED_CHANNEL + 2], NUM_SAMPLED_CHANNELS * sizeof(uint16_t));
#endif
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <transmit_data_offline>:


// Transmit accumulated data after acquisition has finished (for example via USART).
void transmit_data_offline()
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
	// into very small chunks seems to be the most reliable at high Baud rates.

	// We do the same thing for LL, for consistency - optimized performance is not critical for offline transfers, so there is likely
	// no significant downside to chunking data into many smaller transfers.

	uint16_t samples_per_chunk = 1;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	827b      	strh	r3, [r7, #18]
	uint32_t total_samples_in_memory = NUM_SAMPLED_CHANNELS * calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 8003e62:	f7fd fde9 	bl	8001a38 <calculate_sample_rate>
 8003e66:	ec51 0b10 	vmov	r0, r1, d0
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	4b31      	ldr	r3, [pc, #196]	@ (8003f34 <transmit_data_offline+0xdc>)
 8003e70:	f7fc fbca 	bl	8000608 <__aeabi_dmul>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f7fc fe74 	bl	8000b68 <__aeabi_d2uiz>
 8003e80:	4603      	mov	r3, r0
 8003e82:	60fb      	str	r3, [r7, #12]
	uint32_t num_chunks = floor(total_samples_in_memory / samples_per_chunk);
 8003e84:	8a7b      	ldrh	r3, [r7, #18]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fc fb41 	bl	8000514 <__aeabi_ui2d>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f7fc fe65 	bl	8000b68 <__aeabi_d2uiz>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	60bb      	str	r3, [r7, #8]
	uint16_t remaining_samples = total_samples_in_memory % samples_per_chunk;
 8003ea2:	8a7a      	ldrh	r2, [r7, #18]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003eaa:	fb01 f202 	mul.w	r2, r1, r2
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]

	// Transmit multiple complete chunks of data
	for (int i = 0; i < num_chunks; i++) {
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	e01a      	b.n	8003eee <transmit_data_offline+0x96>
		uart_ready = 0;
 8003eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f38 <transmit_data_offline+0xe0>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * i], samples_per_chunk * sizeof(uint16_t));
 8003ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8003f3c <transmit_data_offline+0xe4>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	8a7b      	ldrh	r3, [r7, #18]
 8003ec4:	6979      	ldr	r1, [r7, #20]
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	441a      	add	r2, r3
 8003ece:	8a7b      	ldrh	r3, [r7, #18]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f000 f86a 	bl	8003fb0 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 8003edc:	bf00      	nop
 8003ede:	4b16      	ldr	r3, [pc, #88]	@ (8003f38 <transmit_data_offline+0xe0>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d1fa      	bne.n	8003ede <transmit_data_offline+0x86>
	for (int i = 0; i < num_chunks; i++) {
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3301      	adds	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d8e0      	bhi.n	8003eb8 <transmit_data_offline+0x60>
	}

	// Transmit any remaining data too small to fit in a complete chunk
	if (remaining_samples > 0) {
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d017      	beq.n	8003f2c <transmit_data_offline+0xd4>
		uart_ready = 0;
 8003efc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <transmit_data_offline+0xe0>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * num_chunks], remaining_samples * sizeof(uint16_t));
 8003f02:	4b0e      	ldr	r3, [pc, #56]	@ (8003f3c <transmit_data_offline+0xe4>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	8a7b      	ldrh	r3, [r7, #18]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	441a      	add	r2, r3
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f000 f848 	bl	8003fb0 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 8003f20:	bf00      	nop
 8003f22:	4b05      	ldr	r3, [pc, #20]	@ (8003f38 <transmit_data_offline+0xe0>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d1fa      	bne.n	8003f22 <transmit_data_offline+0xca>
	}
}
 8003f2c:	bf00      	nop
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40100000 	.word	0x40100000
 8003f38:	20000008 	.word	0x20000008
 8003f3c:	200004a0 	.word	0x200004a0

08003f40 <configure_registers>:

// Configure and transmit register values.
// Initial register values default to the same default settings in the RHX software.
// Any desired changes to these values added after the 'write_initial_reg_values()' function call.
void configure_registers(RHDConfigParameters *parameters)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	write_initial_reg_values(parameters);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7fd fd0d 	bl	8001968 <write_initial_reg_values>
//	// Reg 6: (Actual DAC value which changes over time - instead of setting once here, this should be written sample-by-sample in an aux command list).
//
//	// Reg 7: Set zcheck_select
//	set_zcheck_channel(parameters, FIRST_SAMPLED_CHANNEL);
//	write_command(7, get_register_value(parameters, 7));
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <configure_convert_commands>:


// Configure the CONVERT commands that are loaded at the beginning of command_sequence_MOSI.
// By default, channels from 0 to CONVERT_COMMANDS_PER_SEQUENCE - 1 (0 to 31) are loaded consecutively (0, 1, 2, 3, ... 31).
void configure_convert_commands()
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	af00      	add	r7, sp, #0
	// If default ordering of channel CONVERT commands (0, 1, 2, 3, ... 31) is desired, pass a NULL 2nd parameter to create_convert_sequence().
	create_convert_sequence(NULL);
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	f7fd fdca 	bl	8001af4 <create_convert_sequence>
	//	uint8_t channel_numbers[CONVERT_COMMANDS_PER_SEQUENCE] = {0};
	//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
	//		channel_numbers[i] = (CONVERT_COMMANDS_PER_SEQUENCE - 1) - i;
	//	}
	//	create_convert_sequence(channel_numbers);
}
 8003f60:	bf00      	nop
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <configure_aux_commands>:


// Configure the AUX commands that are loaded at the end of command_sequence_MOSI.
// By defaults, command lists from 0 to AUX_COMMANDS_PER_SEQUENCE - 1 (0 to 2) are loaded consecutively (32, 33, 34).
void configure_aux_commands(RHDConfigParameters *parameters)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	  // desired frequency, so if using this command list it's important to set zcheck_DAC_command_slot_position to 0, 1, or
	  // 2 (one of the 3 command slots) to indicate its position, and set zcheck_DAC_command_list_length so that during
	  // execution of this list, after the length has been reached it can begin at 0 again.

	// Slot 0: Write RHD register loading to aux_command_list[0], so that the register values saved in software (parameters) are continually re-written.
	create_command_list_RHD_register_config(parameters, (uint16_t*) aux_command_list[0], 0, AUX_COMMAND_LIST_LENGTH);
 8003f6c:	2380      	movs	r3, #128	@ 0x80
 8003f6e:	2200      	movs	r2, #0
 8003f70:	490c      	ldr	r1, [pc, #48]	@ (8003fa4 <configure_aux_commands+0x40>)
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fd fdf8 	bl	8001b68 <create_command_list_RHD_register_config>

	// Slot 1: Write dummy reads to aux_command_list[1], so that register 40 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[1], AUX_COMMAND_LIST_LENGTH, read_command(40));
 8003f78:	2028      	movs	r0, #40	@ 0x28
 8003f7a:	f7ff faec 	bl	8003556 <read_command>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2280      	movs	r2, #128	@ 0x80
 8003f82:	4909      	ldr	r1, [pc, #36]	@ (8003fa8 <configure_aux_commands+0x44>)
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7fd ff92 	bl	8001eae <create_command_list_dummy>

	// Slot 2: Write dummy reads to aux_command_list[2], so that register 41 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[2], AUX_COMMAND_LIST_LENGTH, read_command(41));
 8003f8a:	2029      	movs	r0, #41	@ 0x29
 8003f8c:	f7ff fae3 	bl	8003556 <read_command>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2280      	movs	r2, #128	@ 0x80
 8003f94:	4905      	ldr	r1, [pc, #20]	@ (8003fac <configure_aux_commands+0x48>)
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd ff89 	bl	8001eae <create_command_list_dummy>
	// zcheck_DAC commands can have different lengths depending on desired frequency. To handle this, be sure to:
	// a) assign create_command_list_zcheck_DAC()'s return value to zcheck_DAC_command_list_length, and
	// b) assign which command slot the zcheck_DAC command list is in to zcheck_DAC_command_slot_position.
//	zcheck_DAC_command_list_length = create_command_list_zcheck_DAC(parameters, (uint16_t*) aux_command_list[2], 1000.0, 100);
//	zcheck_DAC_command_slot_position = 2;
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200004a4 	.word	0x200004a4
 8003fa8:	200005a4 	.word	0x200005a4
 8003fac:	200006a4 	.word	0x200006a4

08003fb0 <transmit_dma_to_usart>:

// Use DMA to transmit num_bytes of data from memory pointer tx_data directly to USART.
// Non-blocking, so it may be helpful to set the 'uart_ready' variable to 0 prior to this function call,
// monitor it, and hold off on further transmissions until the USART Tx complete callback sets it to 1.
void transmit_dma_to_usart(volatile uint16_t *tx_data, uint16_t num_bytes)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
#ifdef USE_HAL
	if (HAL_UART_Transmit_DMA(&USART, (uint8_t*) tx_data, num_bytes) != HAL_OK)
 8003fbc:	887b      	ldrh	r3, [r7, #2]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4806      	ldr	r0, [pc, #24]	@ (8003fdc <transmit_dma_to_usart+0x2c>)
 8003fc4:	f007 fffc 	bl	800bfc0 <HAL_UART_Transmit_DMA>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <transmit_dma_to_usart+0x22>
	{
		Error_Handler();
 8003fce:	f7fd fb7b 	bl	80016c8 <Error_Handler>
	LL_DMA_EnableChannel(DMA, DMA_USART_CHANNEL);

	// Enable DMA transfer for transmit request by setting DMAT bit in UART CR3 register
	LL_USART_EnableDMAReq_TX(USART);
#endif
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000270 	.word	0x20000270

08003fe0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004018 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fe4:	f7ff feb0 	bl	8003d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fe8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003fea:	e003      	b.n	8003ff4 <LoopCopyDataInit>

08003fec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003fec:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003fee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003ff0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003ff2:	3104      	adds	r1, #4

08003ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ff4:	480a      	ldr	r0, [pc, #40]	@ (8004020 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003ff8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003ffa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ffc:	d3f6      	bcc.n	8003fec <CopyDataInit>
	ldr	r2, =_sbss
 8003ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8004028 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004000:	e002      	b.n	8004008 <LoopFillZerobss>

08004002 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004002:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004004:	f842 3b04 	str.w	r3, [r2], #4

08004008 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004008:	4b08      	ldr	r3, [pc, #32]	@ (800402c <LoopForever+0x16>)
	cmp	r2, r3
 800400a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800400c:	d3f9      	bcc.n	8004002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800400e:	f009 fcf9 	bl	800da04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004012:	f7fc ff87 	bl	8000f24 <main>

08004016 <LoopForever>:

LoopForever:
    b LoopForever
 8004016:	e7fe      	b.n	8004016 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004018:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 800401c:	0800f360 	.word	0x0800f360
	ldr	r0, =_sdata
 8004020:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004024:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8004028:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 800402c:	20000902 	.word	0x20000902

08004030 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004030:	e7fe      	b.n	8004030 <ADC1_2_IRQHandler>
	...

08004034 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004038:	4b12      	ldr	r3, [pc, #72]	@ (8004084 <HAL_Init+0x50>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a11      	ldr	r2, [pc, #68]	@ (8004084 <HAL_Init+0x50>)
 800403e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004044:	2003      	movs	r0, #3
 8004046:	f000 f98c 	bl	8004362 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800404a:	f002 fd9f 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 800404e:	4602      	mov	r2, r0
 8004050:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <HAL_Init+0x54>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	490c      	ldr	r1, [pc, #48]	@ (800408c <HAL_Init+0x58>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
 8004060:	4a0b      	ldr	r2, [pc, #44]	@ (8004090 <HAL_Init+0x5c>)
 8004062:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004064:	2004      	movs	r0, #4
 8004066:	f000 f9d1 	bl	800440c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800406a:	200f      	movs	r0, #15
 800406c:	f000 f812 	bl	8004094 <HAL_InitTick>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e002      	b.n	8004080 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800407a:	f7ff fa83 	bl	8003584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40022000 	.word	0x40022000
 8004088:	46020c00 	.word	0x46020c00
 800408c:	0800f218 	.word	0x0800f218
 8004090:	2000000c 	.word	0x2000000c

08004094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80040a0:	4b33      	ldr	r3, [pc, #204]	@ (8004170 <HAL_InitTick+0xdc>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e05c      	b.n	8004166 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80040ac:	4b31      	ldr	r3, [pc, #196]	@ (8004174 <HAL_InitTick+0xe0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d10c      	bne.n	80040d2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80040b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004178 <HAL_InitTick+0xe4>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004170 <HAL_InitTick+0xdc>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	4619      	mov	r1, r3
 80040c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e037      	b.n	8004142 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80040d2:	f000 f9f3 	bl	80044bc <HAL_SYSTICK_GetCLKSourceConfig>
 80040d6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d023      	beq.n	8004126 <HAL_InitTick+0x92>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d82d      	bhi.n	8004140 <HAL_InitTick+0xac>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_InitTick+0x5e>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d00d      	beq.n	800410c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80040f0:	e026      	b.n	8004140 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80040f2:	4b21      	ldr	r3, [pc, #132]	@ (8004178 <HAL_InitTick+0xe4>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004170 <HAL_InitTick+0xdc>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	4619      	mov	r1, r3
 80040fc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8004100:	fbb3 f3f1 	udiv	r3, r3, r1
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	60fb      	str	r3, [r7, #12]
        break;
 800410a:	e01a      	b.n	8004142 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800410c:	4b18      	ldr	r3, [pc, #96]	@ (8004170 <HAL_InitTick+0xdc>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004116:	fbb3 f3f2 	udiv	r3, r3, r2
 800411a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800411e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004122:	60fb      	str	r3, [r7, #12]
        break;
 8004124:	e00d      	b.n	8004142 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8004126:	4b12      	ldr	r3, [pc, #72]	@ (8004170 <HAL_InitTick+0xdc>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004130:	fbb3 f3f2 	udiv	r3, r3, r2
 8004134:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	60fb      	str	r3, [r7, #12]
        break;
 800413e:	e000      	b.n	8004142 <HAL_InitTick+0xae>
        break;
 8004140:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f940 	bl	80043c8 <HAL_SYSTICK_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e009      	b.n	8004166 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004152:	2200      	movs	r2, #0
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	f04f 30ff 	mov.w	r0, #4294967295
 800415a:	f000 f90d 	bl	8004378 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800415e:	4a07      	ldr	r2, [pc, #28]	@ (800417c <HAL_InitTick+0xe8>)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000014 	.word	0x20000014
 8004174:	e000e010 	.word	0xe000e010
 8004178:	2000000c 	.word	0x2000000c
 800417c:	20000010 	.word	0x20000010

08004180 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004184:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <HAL_IncTick+0x20>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	4b06      	ldr	r3, [pc, #24]	@ (80041a4 <HAL_IncTick+0x24>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4413      	add	r3, r2
 8004190:	4a04      	ldr	r2, [pc, #16]	@ (80041a4 <HAL_IncTick+0x24>)
 8004192:	6013      	str	r3, [r2, #0]
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000014 	.word	0x20000014
 80041a4:	200007b4 	.word	0x200007b4

080041a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return uwTick;
 80041ac:	4b03      	ldr	r3, [pc, #12]	@ (80041bc <HAL_GetTick+0x14>)
 80041ae:	681b      	ldr	r3, [r3, #0]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	200007b4 	.word	0x200007b4

080041c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041c8:	f7ff ffee 	bl	80041a8 <HAL_GetTick>
 80041cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d005      	beq.n	80041e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041da:	4b0a      	ldr	r3, [pc, #40]	@ (8004204 <HAL_Delay+0x44>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041e6:	bf00      	nop
 80041e8:	f7ff ffde 	bl	80041a8 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d8f7      	bhi.n	80041e8 <HAL_Delay+0x28>
  {
  }
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000014 	.word	0x20000014

08004208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004218:	4b0c      	ldr	r3, [pc, #48]	@ (800424c <__NVIC_SetPriorityGrouping+0x44>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004224:	4013      	ands	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800423a:	4a04      	ldr	r2, [pc, #16]	@ (800424c <__NVIC_SetPriorityGrouping+0x44>)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	60d3      	str	r3, [r2, #12]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004254:	4b04      	ldr	r3, [pc, #16]	@ (8004268 <__NVIC_GetPriorityGrouping+0x18>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	0a1b      	lsrs	r3, r3, #8
 800425a:	f003 0307 	and.w	r3, r3, #7
}
 800425e:	4618      	mov	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800427a:	2b00      	cmp	r3, #0
 800427c:	db0b      	blt.n	8004296 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	f003 021f 	and.w	r2, r3, #31
 8004284:	4907      	ldr	r1, [pc, #28]	@ (80042a4 <__NVIC_EnableIRQ+0x38>)
 8004286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	2001      	movs	r0, #1
 800428e:	fa00 f202 	lsl.w	r2, r0, r2
 8004292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	e000e100 	.word	0xe000e100

080042a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	6039      	str	r1, [r7, #0]
 80042b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	db0a      	blt.n	80042d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	490c      	ldr	r1, [pc, #48]	@ (80042f4 <__NVIC_SetPriority+0x4c>)
 80042c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042c6:	0112      	lsls	r2, r2, #4
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	440b      	add	r3, r1
 80042cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042d0:	e00a      	b.n	80042e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4908      	ldr	r1, [pc, #32]	@ (80042f8 <__NVIC_SetPriority+0x50>)
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	3b04      	subs	r3, #4
 80042e0:	0112      	lsls	r2, r2, #4
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	440b      	add	r3, r1
 80042e6:	761a      	strb	r2, [r3, #24]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000e100 	.word	0xe000e100
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	@ 0x24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f1c3 0307 	rsb	r3, r3, #7
 8004316:	2b04      	cmp	r3, #4
 8004318:	bf28      	it	cs
 800431a:	2304      	movcs	r3, #4
 800431c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3304      	adds	r3, #4
 8004322:	2b06      	cmp	r3, #6
 8004324:	d902      	bls.n	800432c <NVIC_EncodePriority+0x30>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3b03      	subs	r3, #3
 800432a:	e000      	b.n	800432e <NVIC_EncodePriority+0x32>
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004330:	f04f 32ff 	mov.w	r2, #4294967295
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43da      	mvns	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	401a      	ands	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004344:	f04f 31ff 	mov.w	r1, #4294967295
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	43d9      	mvns	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	4313      	orrs	r3, r2
         );
}
 8004356:	4618      	mov	r0, r3
 8004358:	3724      	adds	r7, #36	@ 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff ff4c 	bl	8004208 <__NVIC_SetPriorityGrouping>
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004386:	f7ff ff63 	bl	8004250 <__NVIC_GetPriorityGrouping>
 800438a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	6978      	ldr	r0, [r7, #20]
 8004392:	f7ff ffb3 	bl	80042fc <NVIC_EncodePriority>
 8004396:	4602      	mov	r2, r0
 8004398:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff ff82 	bl	80042a8 <__NVIC_SetPriority>
}
 80043a4:	bf00      	nop
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff56 	bl	800426c <__NVIC_EnableIRQ>
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043d8:	d301      	bcc.n	80043de <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80043da:	2301      	movs	r3, #1
 80043dc:	e00d      	b.n	80043fa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80043de:	4a0a      	ldr	r2, [pc, #40]	@ (8004408 <HAL_SYSTICK_Config+0x40>)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80043e6:	4b08      	ldr	r3, [pc, #32]	@ (8004408 <HAL_SYSTICK_Config+0x40>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80043ec:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <HAL_SYSTICK_Config+0x40>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a05      	ldr	r2, [pc, #20]	@ (8004408 <HAL_SYSTICK_Config+0x40>)
 80043f2:	f043 0303 	orr.w	r3, r3, #3
 80043f6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000e010 	.word	0xe000e010

0800440c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b04      	cmp	r3, #4
 8004418:	d844      	bhi.n	80044a4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800441a:	a201      	add	r2, pc, #4	@ (adr r2, 8004420 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	08004443 	.word	0x08004443
 8004424:	08004461 	.word	0x08004461
 8004428:	08004483 	.word	0x08004483
 800442c:	080044a5 	.word	0x080044a5
 8004430:	08004435 	.word	0x08004435
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004434:	4b1f      	ldr	r3, [pc, #124]	@ (80044b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1e      	ldr	r2, [pc, #120]	@ (80044b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	6013      	str	r3, [r2, #0]
      break;
 8004440:	e031      	b.n	80044a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004442:	4b1c      	ldr	r3, [pc, #112]	@ (80044b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1b      	ldr	r2, [pc, #108]	@ (80044b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004448:	f023 0304 	bic.w	r3, r3, #4
 800444c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800444e:	4b1a      	ldr	r3, [pc, #104]	@ (80044b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004454:	4a18      	ldr	r2, [pc, #96]	@ (80044b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004456:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800445a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800445e:	e022      	b.n	80044a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004460:	4b14      	ldr	r3, [pc, #80]	@ (80044b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a13      	ldr	r2, [pc, #76]	@ (80044b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004466:	f023 0304 	bic.w	r3, r3, #4
 800446a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800446c:	4b12      	ldr	r3, [pc, #72]	@ (80044b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800446e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004472:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004476:	4a10      	ldr	r2, [pc, #64]	@ (80044b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004478:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800447c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004480:	e011      	b.n	80044a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004482:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a0b      	ldr	r2, [pc, #44]	@ (80044b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004488:	f023 0304 	bic.w	r3, r3, #4
 800448c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800448e:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004494:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004498:	4a07      	ldr	r2, [pc, #28]	@ (80044b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800449a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800449e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80044a2:	e000      	b.n	80044a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80044a4:	bf00      	nop
  }
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	e000e010 	.word	0xe000e010
 80044b8:	46020c00 	.word	0x46020c00

080044bc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80044c2:	4b19      	ldr	r3, [pc, #100]	@ (8004528 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80044ce:	2304      	movs	r3, #4
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	e021      	b.n	8004518 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80044d4:	4b15      	ldr	r3, [pc, #84]	@ (800452c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80044d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044da:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80044de:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044e6:	d011      	beq.n	800450c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044ee:	d810      	bhi.n	8004512 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d004      	beq.n	8004500 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044fc:	d003      	beq.n	8004506 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80044fe:	e008      	b.n	8004512 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004500:	2300      	movs	r3, #0
 8004502:	607b      	str	r3, [r7, #4]
        break;
 8004504:	e008      	b.n	8004518 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8004506:	2301      	movs	r3, #1
 8004508:	607b      	str	r3, [r7, #4]
        break;
 800450a:	e005      	b.n	8004518 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800450c:	2302      	movs	r3, #2
 800450e:	607b      	str	r3, [r7, #4]
        break;
 8004510:	e002      	b.n	8004518 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004512:	2300      	movs	r3, #0
 8004514:	607b      	str	r3, [r7, #4]
        break;
 8004516:	bf00      	nop
    }
  }
  return systick_source;
 8004518:	687b      	ldr	r3, [r7, #4]
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000e010 	.word	0xe000e010
 800452c:	46020c00 	.word	0x46020c00

08004530 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8004538:	f7ff fe36 	bl	80041a8 <HAL_GetTick>
 800453c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0db      	b.n	8004700 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a6e      	ldr	r2, [pc, #440]	@ (8004708 <HAL_DMA_Init+0x1d8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	f000 809f 	beq.w	8004692 <HAL_DMA_Init+0x162>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a6c      	ldr	r2, [pc, #432]	@ (800470c <HAL_DMA_Init+0x1dc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	f000 8099 	beq.w	8004692 <HAL_DMA_Init+0x162>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a6a      	ldr	r2, [pc, #424]	@ (8004710 <HAL_DMA_Init+0x1e0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	f000 8093 	beq.w	8004692 <HAL_DMA_Init+0x162>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a68      	ldr	r2, [pc, #416]	@ (8004714 <HAL_DMA_Init+0x1e4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	f000 808d 	beq.w	8004692 <HAL_DMA_Init+0x162>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a66      	ldr	r2, [pc, #408]	@ (8004718 <HAL_DMA_Init+0x1e8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	f000 8087 	beq.w	8004692 <HAL_DMA_Init+0x162>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a64      	ldr	r2, [pc, #400]	@ (800471c <HAL_DMA_Init+0x1ec>)
 800458a:	4293      	cmp	r3, r2
 800458c:	f000 8081 	beq.w	8004692 <HAL_DMA_Init+0x162>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a62      	ldr	r2, [pc, #392]	@ (8004720 <HAL_DMA_Init+0x1f0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d07b      	beq.n	8004692 <HAL_DMA_Init+0x162>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a61      	ldr	r2, [pc, #388]	@ (8004724 <HAL_DMA_Init+0x1f4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d076      	beq.n	8004692 <HAL_DMA_Init+0x162>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a5f      	ldr	r2, [pc, #380]	@ (8004728 <HAL_DMA_Init+0x1f8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d071      	beq.n	8004692 <HAL_DMA_Init+0x162>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a5e      	ldr	r2, [pc, #376]	@ (800472c <HAL_DMA_Init+0x1fc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d06c      	beq.n	8004692 <HAL_DMA_Init+0x162>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a5c      	ldr	r2, [pc, #368]	@ (8004730 <HAL_DMA_Init+0x200>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d067      	beq.n	8004692 <HAL_DMA_Init+0x162>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004734 <HAL_DMA_Init+0x204>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d062      	beq.n	8004692 <HAL_DMA_Init+0x162>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a59      	ldr	r2, [pc, #356]	@ (8004738 <HAL_DMA_Init+0x208>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d05d      	beq.n	8004692 <HAL_DMA_Init+0x162>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a58      	ldr	r2, [pc, #352]	@ (800473c <HAL_DMA_Init+0x20c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d058      	beq.n	8004692 <HAL_DMA_Init+0x162>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a56      	ldr	r2, [pc, #344]	@ (8004740 <HAL_DMA_Init+0x210>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d053      	beq.n	8004692 <HAL_DMA_Init+0x162>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a55      	ldr	r2, [pc, #340]	@ (8004744 <HAL_DMA_Init+0x214>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d04e      	beq.n	8004692 <HAL_DMA_Init+0x162>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a53      	ldr	r2, [pc, #332]	@ (8004748 <HAL_DMA_Init+0x218>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d049      	beq.n	8004692 <HAL_DMA_Init+0x162>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a52      	ldr	r2, [pc, #328]	@ (800474c <HAL_DMA_Init+0x21c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d044      	beq.n	8004692 <HAL_DMA_Init+0x162>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a50      	ldr	r2, [pc, #320]	@ (8004750 <HAL_DMA_Init+0x220>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d03f      	beq.n	8004692 <HAL_DMA_Init+0x162>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a4f      	ldr	r2, [pc, #316]	@ (8004754 <HAL_DMA_Init+0x224>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d03a      	beq.n	8004692 <HAL_DMA_Init+0x162>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a4d      	ldr	r2, [pc, #308]	@ (8004758 <HAL_DMA_Init+0x228>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d035      	beq.n	8004692 <HAL_DMA_Init+0x162>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a4c      	ldr	r2, [pc, #304]	@ (800475c <HAL_DMA_Init+0x22c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d030      	beq.n	8004692 <HAL_DMA_Init+0x162>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a4a      	ldr	r2, [pc, #296]	@ (8004760 <HAL_DMA_Init+0x230>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d02b      	beq.n	8004692 <HAL_DMA_Init+0x162>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a49      	ldr	r2, [pc, #292]	@ (8004764 <HAL_DMA_Init+0x234>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d026      	beq.n	8004692 <HAL_DMA_Init+0x162>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a47      	ldr	r2, [pc, #284]	@ (8004768 <HAL_DMA_Init+0x238>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d021      	beq.n	8004692 <HAL_DMA_Init+0x162>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a46      	ldr	r2, [pc, #280]	@ (800476c <HAL_DMA_Init+0x23c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d01c      	beq.n	8004692 <HAL_DMA_Init+0x162>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a44      	ldr	r2, [pc, #272]	@ (8004770 <HAL_DMA_Init+0x240>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d017      	beq.n	8004692 <HAL_DMA_Init+0x162>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a43      	ldr	r2, [pc, #268]	@ (8004774 <HAL_DMA_Init+0x244>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d012      	beq.n	8004692 <HAL_DMA_Init+0x162>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a41      	ldr	r2, [pc, #260]	@ (8004778 <HAL_DMA_Init+0x248>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00d      	beq.n	8004692 <HAL_DMA_Init+0x162>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a40      	ldr	r2, [pc, #256]	@ (800477c <HAL_DMA_Init+0x24c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d008      	beq.n	8004692 <HAL_DMA_Init+0x162>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a3e      	ldr	r2, [pc, #248]	@ (8004780 <HAL_DMA_Init+0x250>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d003      	beq.n	8004692 <HAL_DMA_Init+0x162>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a3d      	ldr	r2, [pc, #244]	@ (8004784 <HAL_DMA_Init+0x254>)
 8004690:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2202      	movs	r2, #2
 800469e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0206 	orr.w	r2, r2, #6
 80046b0:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80046b2:	e00f      	b.n	80046d4 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80046b4:	f7ff fd78 	bl	80041a8 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d908      	bls.n	80046d4 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2210      	movs	r2, #16
 80046c6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2203      	movs	r2, #3
 80046cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e015      	b.n	8004700 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1e8      	bne.n	80046b4 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fb24 	bl	8004d30 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40020050 	.word	0x40020050
 800470c:	50020050 	.word	0x50020050
 8004710:	400200d0 	.word	0x400200d0
 8004714:	500200d0 	.word	0x500200d0
 8004718:	40020150 	.word	0x40020150
 800471c:	50020150 	.word	0x50020150
 8004720:	400201d0 	.word	0x400201d0
 8004724:	500201d0 	.word	0x500201d0
 8004728:	40020250 	.word	0x40020250
 800472c:	50020250 	.word	0x50020250
 8004730:	400202d0 	.word	0x400202d0
 8004734:	500202d0 	.word	0x500202d0
 8004738:	40020350 	.word	0x40020350
 800473c:	50020350 	.word	0x50020350
 8004740:	400203d0 	.word	0x400203d0
 8004744:	500203d0 	.word	0x500203d0
 8004748:	40020450 	.word	0x40020450
 800474c:	50020450 	.word	0x50020450
 8004750:	400204d0 	.word	0x400204d0
 8004754:	500204d0 	.word	0x500204d0
 8004758:	40020550 	.word	0x40020550
 800475c:	50020550 	.word	0x50020550
 8004760:	400205d0 	.word	0x400205d0
 8004764:	500205d0 	.word	0x500205d0
 8004768:	40020650 	.word	0x40020650
 800476c:	50020650 	.word	0x50020650
 8004770:	400206d0 	.word	0x400206d0
 8004774:	500206d0 	.word	0x500206d0
 8004778:	40020750 	.word	0x40020750
 800477c:	50020750 	.word	0x50020750
 8004780:	400207d0 	.word	0x400207d0
 8004784:	500207d0 	.word	0x500207d0

08004788 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e04f      	b.n	8004840 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_DMA_Start_IT+0x26>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e048      	b.n	8004840 <HAL_DMA_Start_IT+0xb8>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d136      	bne.n	8004830 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fa84 	bl	8004ce4 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80047ea:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004802:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800481a:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	e007      	b.n	8004840 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2240      	movs	r2, #64	@ 0x40
 8004834:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004850:	f7ff fcaa 	bl	80041a8 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e06b      	b.n	8004938 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d008      	beq.n	800487e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e05c      	b.n	8004938 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0204 	orr.w	r2, r2, #4
 800488c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2205      	movs	r2, #5
 8004892:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004896:	e020      	b.n	80048da <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004898:	f7ff fc86 	bl	80041a8 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b05      	cmp	r3, #5
 80048a4:	d919      	bls.n	80048da <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048aa:	f043 0210 	orr.w	r2, r3, #16
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2203      	movs	r2, #3
 80048b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ca:	2201      	movs	r2, #1
 80048cc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e02e      	b.n	8004938 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0d7      	beq.n	8004898 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0202 	orr.w	r2, r2, #2
 80048f6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2204      	movs	r2, #4
 80048fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004908:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004922:	2201      	movs	r2, #1
 8004924:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e019      	b.n	8004986 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d004      	beq.n	8004968 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e00e      	b.n	8004986 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2204      	movs	r2, #4
 800496c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b086      	sub	sp, #24
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80049a2:	f023 030f 	bic.w	r3, r3, #15
 80049a6:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b0:	3b50      	subs	r3, #80	@ 0x50
 80049b2:	09db      	lsrs	r3, r3, #7
 80049b4:	f003 031f 	and.w	r3, r3, #31
 80049b8:	2201      	movs	r2, #1
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4013      	ands	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 813b 	beq.w	8004c48 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d011      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049f6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fc:	f043 0201 	orr.w	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d011      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a28:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	f043 0202 	orr.w	r2, r3, #2
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d011      	beq.n	8004a68 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004a5a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a60:	f043 0204 	orr.w	r2, r3, #4
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d011      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004a8c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a92:	f043 0208 	orr.w	r2, r3, #8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d013      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00c      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004abe:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d04c      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d045      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004af4:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d12e      	bne.n	8004b60 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b10:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0202 	orr.w	r2, r2, #2
 8004b20:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d07a      	beq.n	8004c4c <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	4798      	blx	r3
        }

        return;
 8004b5e:	e075      	b.n	8004c4c <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2205      	movs	r2, #5
 8004b64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d039      	beq.n	8004bfa <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d032      	beq.n	8004bfa <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d012      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d116      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d111      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	731a      	strb	r2, [r3, #12]
 8004bc4:	e008      	b.n	8004bd8 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d103      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004be0:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d025      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0202 	orr.w	r2, r2, #2
 8004c10:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	4798      	blx	r3
 8004c46:	e002      	b.n	8004c4e <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004c48:	bf00      	nop
 8004c4a:	e000      	b.n	8004c4e <HAL_DMA_IRQHandler+0x2bc>
        return;
 8004c4c:	bf00      	nop
    }
  }
}
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e02b      	b.n	8004cd8 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004c88:	f023 030f 	bic.w	r3, r3, #15
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c96:	3b50      	subs	r3, #80	@ 0x50
 8004c98:	09db      	lsrs	r3, r3, #7
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d012      	beq.n	8004cd6 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f003 0311 	and.w	r3, r3, #17
 8004cb6:	2b11      	cmp	r3, #17
 8004cb8:	d106      	bne.n	8004cc8 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	e006      	b.n	8004cd6 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	401a      	ands	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf8:	0c1b      	lsrs	r3, r3, #16
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	b291      	uxth	r1, r2
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004d10:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695a      	ldr	r2, [r3, #20]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a53      	ldr	r2, [pc, #332]	@ (8004ebc <DMA_Init+0x18c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	f000 80a0 	beq.w	8004eb6 <DMA_Init+0x186>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a51      	ldr	r2, [pc, #324]	@ (8004ec0 <DMA_Init+0x190>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	f000 809a 	beq.w	8004eb6 <DMA_Init+0x186>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a4f      	ldr	r2, [pc, #316]	@ (8004ec4 <DMA_Init+0x194>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	f000 8094 	beq.w	8004eb6 <DMA_Init+0x186>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a4d      	ldr	r2, [pc, #308]	@ (8004ec8 <DMA_Init+0x198>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	f000 808e 	beq.w	8004eb6 <DMA_Init+0x186>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4b      	ldr	r2, [pc, #300]	@ (8004ecc <DMA_Init+0x19c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	f000 8088 	beq.w	8004eb6 <DMA_Init+0x186>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a49      	ldr	r2, [pc, #292]	@ (8004ed0 <DMA_Init+0x1a0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	f000 8082 	beq.w	8004eb6 <DMA_Init+0x186>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a47      	ldr	r2, [pc, #284]	@ (8004ed4 <DMA_Init+0x1a4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d07c      	beq.n	8004eb6 <DMA_Init+0x186>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a45      	ldr	r2, [pc, #276]	@ (8004ed8 <DMA_Init+0x1a8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d077      	beq.n	8004eb6 <DMA_Init+0x186>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a44      	ldr	r2, [pc, #272]	@ (8004edc <DMA_Init+0x1ac>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d072      	beq.n	8004eb6 <DMA_Init+0x186>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a42      	ldr	r2, [pc, #264]	@ (8004ee0 <DMA_Init+0x1b0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d06d      	beq.n	8004eb6 <DMA_Init+0x186>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a41      	ldr	r2, [pc, #260]	@ (8004ee4 <DMA_Init+0x1b4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d068      	beq.n	8004eb6 <DMA_Init+0x186>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a3f      	ldr	r2, [pc, #252]	@ (8004ee8 <DMA_Init+0x1b8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d063      	beq.n	8004eb6 <DMA_Init+0x186>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a3e      	ldr	r2, [pc, #248]	@ (8004eec <DMA_Init+0x1bc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d05e      	beq.n	8004eb6 <DMA_Init+0x186>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a3c      	ldr	r2, [pc, #240]	@ (8004ef0 <DMA_Init+0x1c0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d059      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a3b      	ldr	r2, [pc, #236]	@ (8004ef4 <DMA_Init+0x1c4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d054      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a39      	ldr	r2, [pc, #228]	@ (8004ef8 <DMA_Init+0x1c8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d04f      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a38      	ldr	r2, [pc, #224]	@ (8004efc <DMA_Init+0x1cc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d04a      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a36      	ldr	r2, [pc, #216]	@ (8004f00 <DMA_Init+0x1d0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d045      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a35      	ldr	r2, [pc, #212]	@ (8004f04 <DMA_Init+0x1d4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d040      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a33      	ldr	r2, [pc, #204]	@ (8004f08 <DMA_Init+0x1d8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d03b      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a32      	ldr	r2, [pc, #200]	@ (8004f0c <DMA_Init+0x1dc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d036      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a30      	ldr	r2, [pc, #192]	@ (8004f10 <DMA_Init+0x1e0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d031      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2f      	ldr	r2, [pc, #188]	@ (8004f14 <DMA_Init+0x1e4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d02c      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2d      	ldr	r2, [pc, #180]	@ (8004f18 <DMA_Init+0x1e8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d027      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f1c <DMA_Init+0x1ec>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d022      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2a      	ldr	r2, [pc, #168]	@ (8004f20 <DMA_Init+0x1f0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01d      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a29      	ldr	r2, [pc, #164]	@ (8004f24 <DMA_Init+0x1f4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d018      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a27      	ldr	r2, [pc, #156]	@ (8004f28 <DMA_Init+0x1f8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a26      	ldr	r2, [pc, #152]	@ (8004f2c <DMA_Init+0x1fc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00e      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a24      	ldr	r2, [pc, #144]	@ (8004f30 <DMA_Init+0x200>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d009      	beq.n	8004eb6 <DMA_Init+0x186>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a23      	ldr	r2, [pc, #140]	@ (8004f34 <DMA_Init+0x204>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d004      	beq.n	8004eb6 <DMA_Init+0x186>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a21      	ldr	r2, [pc, #132]	@ (8004f38 <DMA_Init+0x208>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d142      	bne.n	8004f3c <DMA_Init+0x20c>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e041      	b.n	8004f3e <DMA_Init+0x20e>
 8004eba:	bf00      	nop
 8004ebc:	40020050 	.word	0x40020050
 8004ec0:	50020050 	.word	0x50020050
 8004ec4:	400200d0 	.word	0x400200d0
 8004ec8:	500200d0 	.word	0x500200d0
 8004ecc:	40020150 	.word	0x40020150
 8004ed0:	50020150 	.word	0x50020150
 8004ed4:	400201d0 	.word	0x400201d0
 8004ed8:	500201d0 	.word	0x500201d0
 8004edc:	40020250 	.word	0x40020250
 8004ee0:	50020250 	.word	0x50020250
 8004ee4:	400202d0 	.word	0x400202d0
 8004ee8:	500202d0 	.word	0x500202d0
 8004eec:	40020350 	.word	0x40020350
 8004ef0:	50020350 	.word	0x50020350
 8004ef4:	400203d0 	.word	0x400203d0
 8004ef8:	500203d0 	.word	0x500203d0
 8004efc:	40020450 	.word	0x40020450
 8004f00:	50020450 	.word	0x50020450
 8004f04:	400204d0 	.word	0x400204d0
 8004f08:	500204d0 	.word	0x500204d0
 8004f0c:	40020550 	.word	0x40020550
 8004f10:	50020550 	.word	0x50020550
 8004f14:	400205d0 	.word	0x400205d0
 8004f18:	500205d0 	.word	0x500205d0
 8004f1c:	40020650 	.word	0x40020650
 8004f20:	50020650 	.word	0x50020650
 8004f24:	400206d0 	.word	0x400206d0
 8004f28:	500206d0 	.word	0x500206d0
 8004f2c:	40020750 	.word	0x40020750
 8004f30:	50020750 	.word	0x50020750
 8004f34:	400207d0 	.word	0x400207d0
 8004f38:	500207d0 	.word	0x500207d0
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d012      	beq.n	8004f68 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	051b      	lsls	r3, r3, #20
 8004f4e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004f52:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004f60:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f9a:	f040 80b0 	bne.w	80050fe <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a82      	ldr	r2, [pc, #520]	@ (80051ac <DMA_Init+0x47c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	f000 80a0 	beq.w	80050ea <DMA_Init+0x3ba>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a80      	ldr	r2, [pc, #512]	@ (80051b0 <DMA_Init+0x480>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	f000 809a 	beq.w	80050ea <DMA_Init+0x3ba>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a7e      	ldr	r2, [pc, #504]	@ (80051b4 <DMA_Init+0x484>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	f000 8094 	beq.w	80050ea <DMA_Init+0x3ba>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a7c      	ldr	r2, [pc, #496]	@ (80051b8 <DMA_Init+0x488>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	f000 808e 	beq.w	80050ea <DMA_Init+0x3ba>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a7a      	ldr	r2, [pc, #488]	@ (80051bc <DMA_Init+0x48c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	f000 8088 	beq.w	80050ea <DMA_Init+0x3ba>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a78      	ldr	r2, [pc, #480]	@ (80051c0 <DMA_Init+0x490>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	f000 8082 	beq.w	80050ea <DMA_Init+0x3ba>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a76      	ldr	r2, [pc, #472]	@ (80051c4 <DMA_Init+0x494>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d07c      	beq.n	80050ea <DMA_Init+0x3ba>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a74      	ldr	r2, [pc, #464]	@ (80051c8 <DMA_Init+0x498>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d077      	beq.n	80050ea <DMA_Init+0x3ba>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a73      	ldr	r2, [pc, #460]	@ (80051cc <DMA_Init+0x49c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d072      	beq.n	80050ea <DMA_Init+0x3ba>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a71      	ldr	r2, [pc, #452]	@ (80051d0 <DMA_Init+0x4a0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d06d      	beq.n	80050ea <DMA_Init+0x3ba>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a70      	ldr	r2, [pc, #448]	@ (80051d4 <DMA_Init+0x4a4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d068      	beq.n	80050ea <DMA_Init+0x3ba>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a6e      	ldr	r2, [pc, #440]	@ (80051d8 <DMA_Init+0x4a8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d063      	beq.n	80050ea <DMA_Init+0x3ba>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a6d      	ldr	r2, [pc, #436]	@ (80051dc <DMA_Init+0x4ac>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d05e      	beq.n	80050ea <DMA_Init+0x3ba>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a6b      	ldr	r2, [pc, #428]	@ (80051e0 <DMA_Init+0x4b0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d059      	beq.n	80050ea <DMA_Init+0x3ba>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a6a      	ldr	r2, [pc, #424]	@ (80051e4 <DMA_Init+0x4b4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d054      	beq.n	80050ea <DMA_Init+0x3ba>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a68      	ldr	r2, [pc, #416]	@ (80051e8 <DMA_Init+0x4b8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d04f      	beq.n	80050ea <DMA_Init+0x3ba>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a67      	ldr	r2, [pc, #412]	@ (80051ec <DMA_Init+0x4bc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d04a      	beq.n	80050ea <DMA_Init+0x3ba>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a65      	ldr	r2, [pc, #404]	@ (80051f0 <DMA_Init+0x4c0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d045      	beq.n	80050ea <DMA_Init+0x3ba>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a64      	ldr	r2, [pc, #400]	@ (80051f4 <DMA_Init+0x4c4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d040      	beq.n	80050ea <DMA_Init+0x3ba>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a62      	ldr	r2, [pc, #392]	@ (80051f8 <DMA_Init+0x4c8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d03b      	beq.n	80050ea <DMA_Init+0x3ba>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a61      	ldr	r2, [pc, #388]	@ (80051fc <DMA_Init+0x4cc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d036      	beq.n	80050ea <DMA_Init+0x3ba>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a5f      	ldr	r2, [pc, #380]	@ (8005200 <DMA_Init+0x4d0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d031      	beq.n	80050ea <DMA_Init+0x3ba>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a5e      	ldr	r2, [pc, #376]	@ (8005204 <DMA_Init+0x4d4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d02c      	beq.n	80050ea <DMA_Init+0x3ba>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a5c      	ldr	r2, [pc, #368]	@ (8005208 <DMA_Init+0x4d8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d027      	beq.n	80050ea <DMA_Init+0x3ba>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a5b      	ldr	r2, [pc, #364]	@ (800520c <DMA_Init+0x4dc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d022      	beq.n	80050ea <DMA_Init+0x3ba>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a59      	ldr	r2, [pc, #356]	@ (8005210 <DMA_Init+0x4e0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01d      	beq.n	80050ea <DMA_Init+0x3ba>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a58      	ldr	r2, [pc, #352]	@ (8005214 <DMA_Init+0x4e4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d018      	beq.n	80050ea <DMA_Init+0x3ba>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a56      	ldr	r2, [pc, #344]	@ (8005218 <DMA_Init+0x4e8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <DMA_Init+0x3ba>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a55      	ldr	r2, [pc, #340]	@ (800521c <DMA_Init+0x4ec>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00e      	beq.n	80050ea <DMA_Init+0x3ba>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a53      	ldr	r2, [pc, #332]	@ (8005220 <DMA_Init+0x4f0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d009      	beq.n	80050ea <DMA_Init+0x3ba>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a52      	ldr	r2, [pc, #328]	@ (8005224 <DMA_Init+0x4f4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d004      	beq.n	80050ea <DMA_Init+0x3ba>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a50      	ldr	r2, [pc, #320]	@ (8005228 <DMA_Init+0x4f8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d101      	bne.n	80050ee <DMA_Init+0x3be>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <DMA_Init+0x3c0>
 80050ee:	2300      	movs	r3, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00d      	beq.n	8005110 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e008      	b.n	8005110 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005106:	d103      	bne.n	8005110 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800510e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005116:	4b45      	ldr	r3, [pc, #276]	@ (800522c <DMA_Init+0x4fc>)
 8005118:	4013      	ands	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	430b      	orrs	r3, r1
 8005122:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2200      	movs	r2, #0
 800512a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a36      	ldr	r2, [pc, #216]	@ (800520c <DMA_Init+0x4dc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d022      	beq.n	800517c <DMA_Init+0x44c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a35      	ldr	r2, [pc, #212]	@ (8005210 <DMA_Init+0x4e0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d01d      	beq.n	800517c <DMA_Init+0x44c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a33      	ldr	r2, [pc, #204]	@ (8005214 <DMA_Init+0x4e4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d018      	beq.n	800517c <DMA_Init+0x44c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a32      	ldr	r2, [pc, #200]	@ (8005218 <DMA_Init+0x4e8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <DMA_Init+0x44c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a30      	ldr	r2, [pc, #192]	@ (800521c <DMA_Init+0x4ec>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00e      	beq.n	800517c <DMA_Init+0x44c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2f      	ldr	r2, [pc, #188]	@ (8005220 <DMA_Init+0x4f0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d009      	beq.n	800517c <DMA_Init+0x44c>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2d      	ldr	r2, [pc, #180]	@ (8005224 <DMA_Init+0x4f4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <DMA_Init+0x44c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a2c      	ldr	r2, [pc, #176]	@ (8005228 <DMA_Init+0x4f8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d101      	bne.n	8005180 <DMA_Init+0x450>
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <DMA_Init+0x452>
 8005180:	2300      	movs	r3, #0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2200      	movs	r2, #0
 800518c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2200      	movs	r2, #0
 8005194:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40020050 	.word	0x40020050
 80051b0:	50020050 	.word	0x50020050
 80051b4:	400200d0 	.word	0x400200d0
 80051b8:	500200d0 	.word	0x500200d0
 80051bc:	40020150 	.word	0x40020150
 80051c0:	50020150 	.word	0x50020150
 80051c4:	400201d0 	.word	0x400201d0
 80051c8:	500201d0 	.word	0x500201d0
 80051cc:	40020250 	.word	0x40020250
 80051d0:	50020250 	.word	0x50020250
 80051d4:	400202d0 	.word	0x400202d0
 80051d8:	500202d0 	.word	0x500202d0
 80051dc:	40020350 	.word	0x40020350
 80051e0:	50020350 	.word	0x50020350
 80051e4:	400203d0 	.word	0x400203d0
 80051e8:	500203d0 	.word	0x500203d0
 80051ec:	40020450 	.word	0x40020450
 80051f0:	50020450 	.word	0x50020450
 80051f4:	400204d0 	.word	0x400204d0
 80051f8:	500204d0 	.word	0x500204d0
 80051fc:	40020550 	.word	0x40020550
 8005200:	50020550 	.word	0x50020550
 8005204:	400205d0 	.word	0x400205d0
 8005208:	500205d0 	.word	0x500205d0
 800520c:	40020650 	.word	0x40020650
 8005210:	50020650 	.word	0x50020650
 8005214:	400206d0 	.word	0x400206d0
 8005218:	500206d0 	.word	0x500206d0
 800521c:	40020750 	.word	0x40020750
 8005220:	50020750 	.word	0x50020750
 8005224:	400207d0 	.word	0x400207d0
 8005228:	500207d0 	.word	0x500207d0
 800522c:	3cc03180 	.word	0x3cc03180

08005230 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_DMAEx_List_Start_IT+0x16>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e082      	b.n	8005350 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005250:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800525c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d005      	beq.n	8005270 <HAL_DMAEx_List_Start_IT+0x40>
 8005264:	7dfb      	ldrb	r3, [r7, #23]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d16a      	bne.n	8005340 <HAL_DMAEx_List_Start_IT+0x110>
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d067      	beq.n	8005340 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d157      	bne.n	800532c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_DMAEx_List_Start_IT+0x5a>
 8005286:	2302      	movs	r3, #2
 8005288:	e062      	b.n	8005350 <HAL_DMAEx_List_Start_IT+0x120>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800529e:	2202      	movs	r2, #2
 80052a0:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ac:	2200      	movs	r2, #0
 80052ae:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80052be:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052d6:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052ee:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f107 010c 	add.w	r1, r7, #12
 80052fa:	2200      	movs	r2, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f82b 	bl	8005358 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4619      	mov	r1, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	0c0b      	lsrs	r3, r1, #16
 8005310:	041b      	lsls	r3, r3, #16
 8005312:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005320:	4013      	ands	r3, r2
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	430b      	orrs	r3, r1
 800532a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	e007      	b.n	8005350 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2240      	movs	r2, #64	@ 0x40
 8005344:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00c      	beq.n	800538a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4a0d      	ldr	r2, [pc, #52]	@ (80053b0 <DMA_List_GetCLLRNodeInfo+0x58>)
 800537a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00f      	beq.n	80053a2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2207      	movs	r2, #7
 8005386:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8005388:	e00b      	b.n	80053a2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4a08      	ldr	r2, [pc, #32]	@ (80053b4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8005394:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2205      	movs	r2, #5
 80053a0:	601a      	str	r2, [r3, #0]
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	fe010000 	.word	0xfe010000
 80053b4:	f8010000 	.word	0xf8010000

080053b8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b089      	sub	sp, #36	@ 0x24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80053ca:	e1ba      	b.n	8005742 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	2101      	movs	r1, #1
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	4013      	ands	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 81aa 	beq.w	800573c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a55      	ldr	r2, [pc, #340]	@ (8005540 <HAL_GPIO_Init+0x188>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d15d      	bne.n	80054ac <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80053f6:	2201      	movs	r2, #1
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43db      	mvns	r3, r3
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	4013      	ands	r3, r2
 8005404:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f003 0201 	and.w	r2, r3, #1
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	4313      	orrs	r3, r2
 8005418:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005420:	4a48      	ldr	r2, [pc, #288]	@ (8005544 <HAL_GPIO_Init+0x18c>)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005428:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800542a:	4a46      	ldr	r2, [pc, #280]	@ (8005544 <HAL_GPIO_Init+0x18c>)
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	4413      	add	r3, r2
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	08da      	lsrs	r2, r3, #3
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	3208      	adds	r2, #8
 800543e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005442:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	220f      	movs	r2, #15
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	43db      	mvns	r3, r3
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	4013      	ands	r3, r2
 8005458:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	220b      	movs	r2, #11
 8005464:	fa02 f303 	lsl.w	r3, r2, r3
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	4313      	orrs	r3, r2
 800546c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	08da      	lsrs	r2, r3, #3
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	3208      	adds	r2, #8
 8005476:	69f9      	ldr	r1, [r7, #28]
 8005478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	2203      	movs	r2, #3
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	43db      	mvns	r3, r3
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	4013      	ands	r3, r2
 8005492:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	2202      	movs	r2, #2
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e067      	b.n	800557c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d003      	beq.n	80054bc <HAL_GPIO_Init+0x104>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b12      	cmp	r3, #18
 80054ba:	d145      	bne.n	8005548 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	08da      	lsrs	r2, r3, #3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3208      	adds	r2, #8
 80054c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	220f      	movs	r2, #15
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	43db      	mvns	r3, r3
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	4013      	ands	r3, r2
 80054de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 020f 	and.w	r2, r3, #15
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	08da      	lsrs	r2, r3, #3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3208      	adds	r2, #8
 8005502:	69f9      	ldr	r1, [r7, #28]
 8005504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	2203      	movs	r2, #3
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	4013      	ands	r3, r2
 800551e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f003 0203 	and.w	r2, r3, #3
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	4313      	orrs	r3, r2
 8005534:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e01e      	b.n	800557c <HAL_GPIO_Init+0x1c4>
 800553e:	bf00      	nop
 8005540:	46020000 	.word	0x46020000
 8005544:	0800f270 	.word	0x0800f270
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	2203      	movs	r2, #3
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	43db      	mvns	r3, r3
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	4013      	ands	r3, r2
 800555e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 0203 	and.w	r2, r3, #3
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	4313      	orrs	r3, r2
 8005574:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d00b      	beq.n	800559c <HAL_GPIO_Init+0x1e4>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d007      	beq.n	800559c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005590:	2b11      	cmp	r3, #17
 8005592:	d003      	beq.n	800559c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b12      	cmp	r3, #18
 800559a:	d130      	bne.n	80055fe <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	2203      	movs	r2, #3
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	43db      	mvns	r3, r3
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	4013      	ands	r3, r2
 80055b2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80055d2:	2201      	movs	r2, #1
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	4013      	ands	r3, r2
 80055e0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	091b      	lsrs	r3, r3, #4
 80055e8:	f003 0201 	and.w	r2, r3, #1
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b03      	cmp	r3, #3
 8005604:	d017      	beq.n	8005636 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	2203      	movs	r2, #3
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	4013      	ands	r3, r2
 800561c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	4313      	orrs	r3, r2
 800562e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d07c      	beq.n	800573c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005642:	4a47      	ldr	r2, [pc, #284]	@ (8005760 <HAL_GPIO_Init+0x3a8>)
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	3318      	adds	r3, #24
 800564a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	220f      	movs	r2, #15
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	4013      	ands	r3, r2
 8005664:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	0a9a      	lsrs	r2, r3, #10
 800566a:	4b3e      	ldr	r3, [pc, #248]	@ (8005764 <HAL_GPIO_Init+0x3ac>)
 800566c:	4013      	ands	r3, r2
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	f002 0203 	and.w	r2, r2, #3
 8005674:	00d2      	lsls	r2, r2, #3
 8005676:	4093      	lsls	r3, r2
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	4313      	orrs	r3, r2
 800567c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800567e:	4938      	ldr	r1, [pc, #224]	@ (8005760 <HAL_GPIO_Init+0x3a8>)
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	089b      	lsrs	r3, r3, #2
 8005684:	3318      	adds	r3, #24
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800568c:	4b34      	ldr	r3, [pc, #208]	@ (8005760 <HAL_GPIO_Init+0x3a8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	43db      	mvns	r3, r3
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	4013      	ands	r3, r2
 800569a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80056b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005760 <HAL_GPIO_Init+0x3a8>)
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80056b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005760 <HAL_GPIO_Init+0x3a8>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	43db      	mvns	r3, r3
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	4013      	ands	r3, r2
 80056c4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80056da:	4a21      	ldr	r2, [pc, #132]	@ (8005760 <HAL_GPIO_Init+0x3a8>)
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80056e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005760 <HAL_GPIO_Init+0x3a8>)
 80056e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005706:	4a16      	ldr	r2, [pc, #88]	@ (8005760 <HAL_GPIO_Init+0x3a8>)
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800570e:	4b14      	ldr	r3, [pc, #80]	@ (8005760 <HAL_GPIO_Init+0x3a8>)
 8005710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005714:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	43db      	mvns	r3, r3
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	4013      	ands	r3, r2
 800571e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005734:	4a0a      	ldr	r2, [pc, #40]	@ (8005760 <HAL_GPIO_Init+0x3a8>)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	3301      	adds	r3, #1
 8005740:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	f47f ae3d 	bne.w	80053cc <HAL_GPIO_Init+0x14>
  }
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	3724      	adds	r7, #36	@ 0x24
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	46022000 	.word	0x46022000
 8005764:	002f7f7f 	.word	0x002f7f7f

08005768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	807b      	strh	r3, [r7, #2]
 8005774:	4613      	mov	r3, r2
 8005776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005778:	787b      	ldrb	r3, [r7, #1]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800577e:	887a      	ldrh	r2, [r7, #2]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8005784:	e002      	b.n	800578c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8005786:	887a      	ldrh	r2, [r7, #2]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80057a4:	4b0b      	ldr	r3, [pc, #44]	@ (80057d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]
 80057b4:	e007      	b.n	80057c6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80057b6:	4b07      	ldr	r3, [pc, #28]	@ (80057d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f023 0204 	bic.w	r2, r3, #4
 80057be:	4905      	ldr	r1, [pc, #20]	@ (80057d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	40030400 	.word	0x40030400

080057d8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80057dc:	4b05      	ldr	r3, [pc, #20]	@ (80057f4 <HAL_ICACHE_Enable+0x1c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a04      	ldr	r2, [pc, #16]	@ (80057f4 <HAL_ICACHE_Enable+0x1c>)
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40030400 	.word	0x40030400

080057f8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005800:	4b39      	ldr	r3, [pc, #228]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005804:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005808:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	429a      	cmp	r2, r3
 8005810:	d10b      	bne.n	800582a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005818:	d905      	bls.n	8005826 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800581a:	4b33      	ldr	r3, [pc, #204]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	4a32      	ldr	r2, [pc, #200]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005824:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e057      	b.n	80058da <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005830:	d90a      	bls.n	8005848 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005832:	4b2d      	ldr	r3, [pc, #180]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4313      	orrs	r3, r2
 800583e:	4a2a      	ldr	r2, [pc, #168]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005844:	60d3      	str	r3, [r2, #12]
 8005846:	e007      	b.n	8005858 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005848:	4b27      	ldr	r3, [pc, #156]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005850:	4925      	ldr	r1, [pc, #148]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4313      	orrs	r3, r2
 8005856:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005858:	4b24      	ldr	r3, [pc, #144]	@ (80058ec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a24      	ldr	r2, [pc, #144]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800585e:	fba2 2303 	umull	r2, r3, r2, r3
 8005862:	099b      	lsrs	r3, r3, #6
 8005864:	2232      	movs	r2, #50	@ 0x32
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	4a21      	ldr	r2, [pc, #132]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	099b      	lsrs	r3, r3, #6
 8005872:	3301      	adds	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005876:	e002      	b.n	800587e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3b01      	subs	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800587e:	4b1a      	ldr	r3, [pc, #104]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <HAL_PWREx_ControlVoltageScaling+0x98>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f3      	bne.n	8005878 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01b      	beq.n	80058ce <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005896:	4b15      	ldr	r3, [pc, #84]	@ (80058ec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a15      	ldr	r2, [pc, #84]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	099b      	lsrs	r3, r3, #6
 80058a2:	2232      	movs	r2, #50	@ 0x32
 80058a4:	fb02 f303 	mul.w	r3, r2, r3
 80058a8:	4a11      	ldr	r2, [pc, #68]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80058aa:	fba2 2303 	umull	r2, r3, r2, r3
 80058ae:	099b      	lsrs	r3, r3, #6
 80058b0:	3301      	adds	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80058b4:	e002      	b.n	80058bc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80058bc:	4b0a      	ldr	r3, [pc, #40]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80058be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <HAL_PWREx_ControlVoltageScaling+0xd6>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f3      	bne.n	80058b6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e000      	b.n	80058da <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	46020800 	.word	0x46020800
 80058ec:	2000000c 	.word	0x2000000c
 80058f0:	10624dd3 	.word	0x10624dd3

080058f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80058f8:	4b04      	ldr	r3, [pc, #16]	@ (800590c <HAL_PWREx_GetVoltageRange+0x18>)
 80058fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005900:	4618      	mov	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	46020800 	.word	0x46020800

08005910 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005918:	4b22      	ldr	r3, [pc, #136]	@ (80059a4 <HAL_PWREx_ConfigSupply+0x94>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a22      	ldr	r2, [pc, #136]	@ (80059a8 <HAL_PWREx_ConfigSupply+0x98>)
 800591e:	fba2 2303 	umull	r2, r3, r2, r3
 8005922:	099b      	lsrs	r3, r3, #6
 8005924:	2232      	movs	r2, #50	@ 0x32
 8005926:	fb02 f303 	mul.w	r3, r2, r3
 800592a:	4a1f      	ldr	r2, [pc, #124]	@ (80059a8 <HAL_PWREx_ConfigSupply+0x98>)
 800592c:	fba2 2303 	umull	r2, r3, r2, r3
 8005930:	099b      	lsrs	r3, r3, #6
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d113      	bne.n	8005964 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800593c:	4b1b      	ldr	r3, [pc, #108]	@ (80059ac <HAL_PWREx_ConfigSupply+0x9c>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	4a1a      	ldr	r2, [pc, #104]	@ (80059ac <HAL_PWREx_ConfigSupply+0x9c>)
 8005942:	f023 0302 	bic.w	r3, r3, #2
 8005946:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005948:	e002      	b.n	8005950 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3b01      	subs	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005950:	4b16      	ldr	r3, [pc, #88]	@ (80059ac <HAL_PWREx_ConfigSupply+0x9c>)
 8005952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b02      	cmp	r3, #2
 800595a:	d116      	bne.n	800598a <HAL_PWREx_ConfigSupply+0x7a>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f3      	bne.n	800594a <HAL_PWREx_ConfigSupply+0x3a>
 8005962:	e012      	b.n	800598a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005964:	4b11      	ldr	r3, [pc, #68]	@ (80059ac <HAL_PWREx_ConfigSupply+0x9c>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	4a10      	ldr	r2, [pc, #64]	@ (80059ac <HAL_PWREx_ConfigSupply+0x9c>)
 800596a:	f043 0302 	orr.w	r3, r3, #2
 800596e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005970:	e002      	b.n	8005978 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3b01      	subs	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005978:	4b0c      	ldr	r3, [pc, #48]	@ (80059ac <HAL_PWREx_ConfigSupply+0x9c>)
 800597a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <HAL_PWREx_ConfigSupply+0x7a>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f3      	bne.n	8005972 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e000      	b.n	8005996 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	2000000c 	.word	0x2000000c
 80059a8:	10624dd3 	.word	0x10624dd3
 80059ac:	46020800 	.word	0x46020800

080059b0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80059b4:	4b05      	ldr	r3, [pc, #20]	@ (80059cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	4a04      	ldr	r2, [pc, #16]	@ (80059cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80059ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059be:	6113      	str	r3, [r2, #16]
}
 80059c0:	bf00      	nop
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	46020800 	.word	0x46020800

080059d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80059d4:	4b05      	ldr	r3, [pc, #20]	@ (80059ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	4a04      	ldr	r2, [pc, #16]	@ (80059ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80059e0:	bf00      	nop
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	46020800 	.word	0x46020800

080059f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08e      	sub	sp, #56	@ 0x38
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d102      	bne.n	8005a0a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f000 bec8 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a0a:	4b99      	ldr	r3, [pc, #612]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
 8005a12:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a14:	4b96      	ldr	r3, [pc, #600]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 816c 	beq.w	8005d04 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <HAL_RCC_OscConfig+0x52>
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	2b0c      	cmp	r3, #12
 8005a36:	f040 80de 	bne.w	8005bf6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	f040 80da 	bne.w	8005bf6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f000 bea5 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a54:	4b86      	ldr	r3, [pc, #536]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <HAL_RCC_OscConfig+0x7a>
 8005a60:	4b83      	ldr	r3, [pc, #524]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005a68:	e005      	b.n	8005a76 <HAL_RCC_OscConfig+0x86>
 8005a6a:	4b81      	ldr	r3, [pc, #516]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d255      	bcs.n	8005b26 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 f9d9 	bl	8006e3c <RCC_SetFlashLatencyFromMSIRange>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f000 be82 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005a96:	4b76      	ldr	r3, [pc, #472]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	4a75      	ldr	r2, [pc, #468]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005aa0:	6093      	str	r3, [r2, #8]
 8005aa2:	4b73      	ldr	r3, [pc, #460]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aae:	4970      	ldr	r1, [pc, #448]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005abc:	d309      	bcc.n	8005ad2 <HAL_RCC_OscConfig+0xe2>
 8005abe:	4b6c      	ldr	r3, [pc, #432]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f023 021f 	bic.w	r2, r3, #31
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	4969      	ldr	r1, [pc, #420]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60cb      	str	r3, [r1, #12]
 8005ad0:	e07e      	b.n	8005bd0 <HAL_RCC_OscConfig+0x1e0>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da0a      	bge.n	8005af0 <HAL_RCC_OscConfig+0x100>
 8005ada:	4b65      	ldr	r3, [pc, #404]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	015b      	lsls	r3, r3, #5
 8005ae8:	4961      	ldr	r1, [pc, #388]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60cb      	str	r3, [r1, #12]
 8005aee:	e06f      	b.n	8005bd0 <HAL_RCC_OscConfig+0x1e0>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af8:	d30a      	bcc.n	8005b10 <HAL_RCC_OscConfig+0x120>
 8005afa:	4b5d      	ldr	r3, [pc, #372]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	029b      	lsls	r3, r3, #10
 8005b08:	4959      	ldr	r1, [pc, #356]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60cb      	str	r3, [r1, #12]
 8005b0e:	e05f      	b.n	8005bd0 <HAL_RCC_OscConfig+0x1e0>
 8005b10:	4b57      	ldr	r3, [pc, #348]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	03db      	lsls	r3, r3, #15
 8005b1e:	4954      	ldr	r1, [pc, #336]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60cb      	str	r3, [r1, #12]
 8005b24:	e054      	b.n	8005bd0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005b26:	4b52      	ldr	r3, [pc, #328]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	4a51      	ldr	r2, [pc, #324]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b30:	6093      	str	r3, [r2, #8]
 8005b32:	4b4f      	ldr	r3, [pc, #316]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	494c      	ldr	r1, [pc, #304]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b48:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005b4c:	d309      	bcc.n	8005b62 <HAL_RCC_OscConfig+0x172>
 8005b4e:	4b48      	ldr	r3, [pc, #288]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f023 021f 	bic.w	r2, r3, #31
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	4945      	ldr	r1, [pc, #276]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60cb      	str	r3, [r1, #12]
 8005b60:	e028      	b.n	8005bb4 <HAL_RCC_OscConfig+0x1c4>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	da0a      	bge.n	8005b80 <HAL_RCC_OscConfig+0x190>
 8005b6a:	4b41      	ldr	r3, [pc, #260]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	015b      	lsls	r3, r3, #5
 8005b78:	493d      	ldr	r1, [pc, #244]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60cb      	str	r3, [r1, #12]
 8005b7e:	e019      	b.n	8005bb4 <HAL_RCC_OscConfig+0x1c4>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b88:	d30a      	bcc.n	8005ba0 <HAL_RCC_OscConfig+0x1b0>
 8005b8a:	4b39      	ldr	r3, [pc, #228]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	029b      	lsls	r3, r3, #10
 8005b98:	4935      	ldr	r1, [pc, #212]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60cb      	str	r3, [r1, #12]
 8005b9e:	e009      	b.n	8005bb4 <HAL_RCC_OscConfig+0x1c4>
 8005ba0:	4b33      	ldr	r3, [pc, #204]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	03db      	lsls	r3, r3, #15
 8005bae:	4930      	ldr	r1, [pc, #192]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 f93c 	bl	8006e3c <RCC_SetFlashLatencyFromMSIRange>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f000 bde5 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005bd0:	f001 f8de 	bl	8006d90 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005bd4:	4b27      	ldr	r3, [pc, #156]	@ (8005c74 <HAL_RCC_OscConfig+0x284>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fe fa5b 	bl	8004094 <HAL_InitTick>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 808a 	beq.w	8005d02 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005bee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bf2:	f000 bdd2 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d066      	beq.n	8005ccc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1b      	ldr	r2, [pc, #108]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005c0a:	f7fe facd 	bl	80041a8 <HAL_GetTick>
 8005c0e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005c10:	e009      	b.n	8005c26 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c12:	f7fe fac9 	bl	80041a8 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d902      	bls.n	8005c26 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	f000 bdba 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005c26:	4b12      	ldr	r3, [pc, #72]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0ef      	beq.n	8005c12 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005c32:	4b0f      	ldr	r3, [pc, #60]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	4a0e      	ldr	r2, [pc, #56]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c3c:	6093      	str	r3, [r2, #8]
 8005c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	4909      	ldr	r1, [pc, #36]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005c58:	d30e      	bcc.n	8005c78 <HAL_RCC_OscConfig+0x288>
 8005c5a:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f023 021f 	bic.w	r2, r3, #31
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	4902      	ldr	r1, [pc, #8]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60cb      	str	r3, [r1, #12]
 8005c6c:	e04a      	b.n	8005d04 <HAL_RCC_OscConfig+0x314>
 8005c6e:	bf00      	nop
 8005c70:	46020c00 	.word	0x46020c00
 8005c74:	20000010 	.word	0x20000010
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da0a      	bge.n	8005c96 <HAL_RCC_OscConfig+0x2a6>
 8005c80:	4b98      	ldr	r3, [pc, #608]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	015b      	lsls	r3, r3, #5
 8005c8e:	4995      	ldr	r1, [pc, #596]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60cb      	str	r3, [r1, #12]
 8005c94:	e036      	b.n	8005d04 <HAL_RCC_OscConfig+0x314>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c9e:	d30a      	bcc.n	8005cb6 <HAL_RCC_OscConfig+0x2c6>
 8005ca0:	4b90      	ldr	r3, [pc, #576]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	029b      	lsls	r3, r3, #10
 8005cae:	498d      	ldr	r1, [pc, #564]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60cb      	str	r3, [r1, #12]
 8005cb4:	e026      	b.n	8005d04 <HAL_RCC_OscConfig+0x314>
 8005cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	03db      	lsls	r3, r3, #15
 8005cc4:	4987      	ldr	r1, [pc, #540]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60cb      	str	r3, [r1, #12]
 8005cca:	e01b      	b.n	8005d04 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005ccc:	4b85      	ldr	r3, [pc, #532]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a84      	ldr	r2, [pc, #528]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005cd8:	f7fe fa66 	bl	80041a8 <HAL_GetTick>
 8005cdc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005cde:	e009      	b.n	8005cf4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ce0:	f7fe fa62 	bl	80041a8 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d902      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	f000 bd53 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005cf4:	4b7b      	ldr	r3, [pc, #492]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1ef      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x2f0>
 8005d00:	e000      	b.n	8005d04 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005d02:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 808b 	beq.w	8005e28 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_OscConfig+0x334>
 8005d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1a:	2b0c      	cmp	r3, #12
 8005d1c:	d109      	bne.n	8005d32 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d106      	bne.n	8005d32 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d17d      	bne.n	8005e28 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f000 bd34 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d3a:	d106      	bne.n	8005d4a <HAL_RCC_OscConfig+0x35a>
 8005d3c:	4b69      	ldr	r3, [pc, #420]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a68      	ldr	r2, [pc, #416]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e041      	b.n	8005dce <HAL_RCC_OscConfig+0x3de>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d52:	d112      	bne.n	8005d7a <HAL_RCC_OscConfig+0x38a>
 8005d54:	4b63      	ldr	r3, [pc, #396]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a62      	ldr	r2, [pc, #392]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	4b60      	ldr	r3, [pc, #384]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a5f      	ldr	r2, [pc, #380]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d66:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	4b5d      	ldr	r3, [pc, #372]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a5c      	ldr	r2, [pc, #368]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	e029      	b.n	8005dce <HAL_RCC_OscConfig+0x3de>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005d82:	d112      	bne.n	8005daa <HAL_RCC_OscConfig+0x3ba>
 8005d84:	4b57      	ldr	r3, [pc, #348]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a56      	ldr	r2, [pc, #344]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	4b54      	ldr	r3, [pc, #336]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a53      	ldr	r2, [pc, #332]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	4b51      	ldr	r3, [pc, #324]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a50      	ldr	r2, [pc, #320]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	e011      	b.n	8005dce <HAL_RCC_OscConfig+0x3de>
 8005daa:	4b4e      	ldr	r3, [pc, #312]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a4d      	ldr	r2, [pc, #308]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a4a      	ldr	r2, [pc, #296]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005dbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	4b48      	ldr	r3, [pc, #288]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a47      	ldr	r2, [pc, #284]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005dc8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005dcc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d014      	beq.n	8005e00 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005dd6:	f7fe f9e7 	bl	80041a8 <HAL_GetTick>
 8005dda:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ddc:	e009      	b.n	8005df2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dde:	f7fe f9e3 	bl	80041a8 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b64      	cmp	r3, #100	@ 0x64
 8005dea:	d902      	bls.n	8005df2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	f000 bcd4 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005df2:	4b3c      	ldr	r3, [pc, #240]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0ef      	beq.n	8005dde <HAL_RCC_OscConfig+0x3ee>
 8005dfe:	e013      	b.n	8005e28 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005e00:	f7fe f9d2 	bl	80041a8 <HAL_GetTick>
 8005e04:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e06:	e009      	b.n	8005e1c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e08:	f7fe f9ce 	bl	80041a8 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b64      	cmp	r3, #100	@ 0x64
 8005e14:	d902      	bls.n	8005e1c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	f000 bcbf 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e1c:	4b31      	ldr	r3, [pc, #196]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1ef      	bne.n	8005e08 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d05f      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d005      	beq.n	8005e46 <HAL_RCC_OscConfig+0x456>
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3c:	2b0c      	cmp	r3, #12
 8005e3e:	d114      	bne.n	8005e6a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d111      	bne.n	8005e6a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d102      	bne.n	8005e54 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f000 bca3 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005e54:	4b23      	ldr	r3, [pc, #140]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	041b      	lsls	r3, r3, #16
 8005e62:	4920      	ldr	r1, [pc, #128]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e68:	e044      	b.n	8005ef4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d024      	beq.n	8005ebc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005e72:	4b1c      	ldr	r3, [pc, #112]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e7c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005e7e:	f7fe f993 	bl	80041a8 <HAL_GetTick>
 8005e82:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e84:	e009      	b.n	8005e9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e86:	f7fe f98f 	bl	80041a8 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d902      	bls.n	8005e9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	f000 bc80 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0ef      	beq.n	8005e86 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	041b      	lsls	r3, r3, #16
 8005eb4:	490b      	ldr	r1, [pc, #44]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	610b      	str	r3, [r1, #16]
 8005eba:	e01b      	b.n	8005ef4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005ebc:	4b09      	ldr	r3, [pc, #36]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a08      	ldr	r2, [pc, #32]	@ (8005ee4 <HAL_RCC_OscConfig+0x4f4>)
 8005ec2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ec6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005ec8:	f7fe f96e 	bl	80041a8 <HAL_GetTick>
 8005ecc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ece:	e00b      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ed0:	f7fe f96a 	bl	80041a8 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d904      	bls.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	f000 bc5b 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
 8005ee4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ee8:	4baf      	ldr	r3, [pc, #700]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1ed      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80c8 	beq.w	8006092 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005f02:	2300      	movs	r3, #0
 8005f04:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f08:	4ba7      	ldr	r3, [pc, #668]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8005f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d111      	bne.n	8005f3a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f16:	4ba4      	ldr	r3, [pc, #656]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8005f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f1c:	4aa2      	ldr	r2, [pc, #648]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8005f1e:	f043 0304 	orr.w	r3, r3, #4
 8005f22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005f26:	4ba0      	ldr	r3, [pc, #640]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8005f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005f3a:	4b9c      	ldr	r3, [pc, #624]	@ (80061ac <HAL_RCC_OscConfig+0x7bc>)
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d119      	bne.n	8005f7a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005f46:	4b99      	ldr	r3, [pc, #612]	@ (80061ac <HAL_RCC_OscConfig+0x7bc>)
 8005f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4a:	4a98      	ldr	r2, [pc, #608]	@ (80061ac <HAL_RCC_OscConfig+0x7bc>)
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f52:	f7fe f929 	bl	80041a8 <HAL_GetTick>
 8005f56:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005f58:	e009      	b.n	8005f6e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f5a:	f7fe f925 	bl	80041a8 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d902      	bls.n	8005f6e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	f000 bc16 	b.w	800679a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005f6e:	4b8f      	ldr	r3, [pc, #572]	@ (80061ac <HAL_RCC_OscConfig+0x7bc>)
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0ef      	beq.n	8005f5a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d05f      	beq.n	8006042 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005f82:	4b89      	ldr	r3, [pc, #548]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8005f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f88:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d037      	beq.n	8006008 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d006      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e3f4      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d01b      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005fba:	4b7b      	ldr	r3, [pc, #492]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8005fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fc0:	4a79      	ldr	r2, [pc, #484]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8005fc2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005fc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8005fca:	f7fe f8ed 	bl	80041a8 <HAL_GetTick>
 8005fce:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fd2:	f7fe f8e9 	bl	80041a8 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b05      	cmp	r3, #5
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e3da      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005fe4:	4b70      	ldr	r3, [pc, #448]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8005fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1ef      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8005ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ff8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	4969      	ldr	r1, [pc, #420]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006008:	4b67      	ldr	r3, [pc, #412]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 800600a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800600e:	4a66      	ldr	r2, [pc, #408]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006010:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006014:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006018:	f7fe f8c6 	bl	80041a8 <HAL_GetTick>
 800601c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006020:	f7fe f8c2 	bl	80041a8 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b05      	cmp	r3, #5
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e3b3      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006032:	4b5d      	ldr	r3, [pc, #372]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0ef      	beq.n	8006020 <HAL_RCC_OscConfig+0x630>
 8006040:	e01b      	b.n	800607a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006042:	4b59      	ldr	r3, [pc, #356]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006048:	4a57      	ldr	r2, [pc, #348]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 800604a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800604e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006052:	f7fe f8a9 	bl	80041a8 <HAL_GetTick>
 8006056:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800605a:	f7fe f8a5 	bl	80041a8 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b05      	cmp	r3, #5
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e396      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800606c:	4b4e      	ldr	r3, [pc, #312]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 800606e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006072:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1ef      	bne.n	800605a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800607a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800607e:	2b01      	cmp	r3, #1
 8006080:	d107      	bne.n	8006092 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006082:	4b49      	ldr	r3, [pc, #292]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006088:	4a47      	ldr	r2, [pc, #284]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 800608a:	f023 0304 	bic.w	r3, r3, #4
 800608e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8111 	beq.w	80062c2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80060a0:	2300      	movs	r3, #0
 80060a2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060a6:	4b40      	ldr	r3, [pc, #256]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 80060a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d111      	bne.n	80060d8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060b4:	4b3c      	ldr	r3, [pc, #240]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 80060b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ba:	4a3b      	ldr	r2, [pc, #236]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 80060bc:	f043 0304 	orr.w	r3, r3, #4
 80060c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80060c4:	4b38      	ldr	r3, [pc, #224]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 80060c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80060d8:	4b34      	ldr	r3, [pc, #208]	@ (80061ac <HAL_RCC_OscConfig+0x7bc>)
 80060da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d118      	bne.n	8006116 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80060e4:	4b31      	ldr	r3, [pc, #196]	@ (80061ac <HAL_RCC_OscConfig+0x7bc>)
 80060e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e8:	4a30      	ldr	r2, [pc, #192]	@ (80061ac <HAL_RCC_OscConfig+0x7bc>)
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060f0:	f7fe f85a 	bl	80041a8 <HAL_GetTick>
 80060f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060f8:	f7fe f856 	bl	80041a8 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e347      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800610a:	4b28      	ldr	r3, [pc, #160]	@ (80061ac <HAL_RCC_OscConfig+0x7bc>)
 800610c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0f0      	beq.n	80060f8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d01f      	beq.n	8006162 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d010      	beq.n	8006150 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800612e:	4b1e      	ldr	r3, [pc, #120]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006134:	4a1c      	ldr	r2, [pc, #112]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006136:	f043 0304 	orr.w	r3, r3, #4
 800613a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800613e:	4b1a      	ldr	r3, [pc, #104]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006144:	4a18      	ldr	r2, [pc, #96]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006146:	f043 0301 	orr.w	r3, r3, #1
 800614a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800614e:	e018      	b.n	8006182 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006150:	4b15      	ldr	r3, [pc, #84]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006156:	4a14      	ldr	r2, [pc, #80]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006158:	f043 0301 	orr.w	r3, r3, #1
 800615c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006160:	e00f      	b.n	8006182 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006162:	4b11      	ldr	r3, [pc, #68]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006168:	4a0f      	ldr	r2, [pc, #60]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 800616a:	f023 0301 	bic.w	r3, r3, #1
 800616e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006172:	4b0d      	ldr	r3, [pc, #52]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 8006174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006178:	4a0b      	ldr	r2, [pc, #44]	@ (80061a8 <HAL_RCC_OscConfig+0x7b8>)
 800617a:	f023 0304 	bic.w	r3, r3, #4
 800617e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d057      	beq.n	800623a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800618a:	f7fe f80d 	bl	80041a8 <HAL_GetTick>
 800618e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006190:	e00e      	b.n	80061b0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006192:	f7fe f809 	bl	80041a8 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d905      	bls.n	80061b0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e2f8      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
 80061a8:	46020c00 	.word	0x46020c00
 80061ac:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061b0:	4b9c      	ldr	r3, [pc, #624]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80061b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0e9      	beq.n	8006192 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d01b      	beq.n	8006202 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061ca:	4b96      	ldr	r3, [pc, #600]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80061cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061d0:	4a94      	ldr	r2, [pc, #592]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80061d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80061da:	e00a      	b.n	80061f2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061dc:	f7fd ffe4 	bl	80041a8 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e2d3      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80061f2:	4b8c      	ldr	r3, [pc, #560]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80061f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0ed      	beq.n	80061dc <HAL_RCC_OscConfig+0x7ec>
 8006200:	e053      	b.n	80062aa <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006202:	4b88      	ldr	r3, [pc, #544]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 8006204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006208:	4a86      	ldr	r2, [pc, #536]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 800620a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800620e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006212:	e00a      	b.n	800622a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006214:	f7fd ffc8 	bl	80041a8 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006222:	4293      	cmp	r3, r2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e2b7      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800622a:	4b7e      	ldr	r3, [pc, #504]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 800622c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1ed      	bne.n	8006214 <HAL_RCC_OscConfig+0x824>
 8006238:	e037      	b.n	80062aa <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800623a:	f7fd ffb5 	bl	80041a8 <HAL_GetTick>
 800623e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006240:	e00a      	b.n	8006258 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006242:	f7fd ffb1 	bl	80041a8 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006250:	4293      	cmp	r3, r2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e2a0      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006258:	4b72      	ldr	r3, [pc, #456]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 800625a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1ed      	bne.n	8006242 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006266:	4b6f      	ldr	r3, [pc, #444]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 8006268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800626c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006270:	2b00      	cmp	r3, #0
 8006272:	d01a      	beq.n	80062aa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006274:	4b6b      	ldr	r3, [pc, #428]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 8006276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800627a:	4a6a      	ldr	r2, [pc, #424]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 800627c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006280:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006284:	e00a      	b.n	800629c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006286:	f7fd ff8f 	bl	80041a8 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006294:	4293      	cmp	r3, r2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e27e      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800629c:	4b61      	ldr	r3, [pc, #388]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 800629e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1ed      	bne.n	8006286 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062aa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d107      	bne.n	80062c2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b2:	4b5c      	ldr	r3, [pc, #368]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80062b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062b8:	4a5a      	ldr	r2, [pc, #360]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80062ba:	f023 0304 	bic.w	r3, r3, #4
 80062be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d036      	beq.n	800633c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d019      	beq.n	800630a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80062d6:	4b53      	ldr	r3, [pc, #332]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a52      	ldr	r2, [pc, #328]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80062dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062e0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80062e2:	f7fd ff61 	bl	80041a8 <HAL_GetTick>
 80062e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80062e8:	e008      	b.n	80062fc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062ea:	f7fd ff5d 	bl	80041a8 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e24e      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80062fc:	4b49      	ldr	r3, [pc, #292]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0f0      	beq.n	80062ea <HAL_RCC_OscConfig+0x8fa>
 8006308:	e018      	b.n	800633c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800630a:	4b46      	ldr	r3, [pc, #280]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a45      	ldr	r2, [pc, #276]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 8006310:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006314:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006316:	f7fd ff47 	bl	80041a8 <HAL_GetTick>
 800631a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800631e:	f7fd ff43 	bl	80041a8 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e234      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006330:	4b3c      	ldr	r3, [pc, #240]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f0      	bne.n	800631e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006344:	2b00      	cmp	r3, #0
 8006346:	d036      	beq.n	80063b6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800634c:	2b00      	cmp	r3, #0
 800634e:	d019      	beq.n	8006384 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006350:	4b34      	ldr	r3, [pc, #208]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a33      	ldr	r2, [pc, #204]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 8006356:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800635a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800635c:	f7fd ff24 	bl	80041a8 <HAL_GetTick>
 8006360:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006364:	f7fd ff20 	bl	80041a8 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e211      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006376:	4b2b      	ldr	r3, [pc, #172]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f0      	beq.n	8006364 <HAL_RCC_OscConfig+0x974>
 8006382:	e018      	b.n	80063b6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006384:	4b27      	ldr	r3, [pc, #156]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a26      	ldr	r2, [pc, #152]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 800638a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800638e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006390:	f7fd ff0a 	bl	80041a8 <HAL_GetTick>
 8006394:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006398:	f7fd ff06 	bl	80041a8 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e1f7      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80063aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1f0      	bne.n	8006398 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d07f      	beq.n	80064c2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d062      	beq.n	8006490 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80063ca:	4b16      	ldr	r3, [pc, #88]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	4a15      	ldr	r2, [pc, #84]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80063d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063d4:	6093      	str	r3, [r2, #8]
 80063d6:	4b13      	ldr	r3, [pc, #76]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e2:	4910      	ldr	r1, [pc, #64]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80063f0:	d309      	bcc.n	8006406 <HAL_RCC_OscConfig+0xa16>
 80063f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f023 021f 	bic.w	r2, r3, #31
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	4909      	ldr	r1, [pc, #36]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 8006400:	4313      	orrs	r3, r2
 8006402:	60cb      	str	r3, [r1, #12]
 8006404:	e02a      	b.n	800645c <HAL_RCC_OscConfig+0xa6c>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	2b00      	cmp	r3, #0
 800640c:	da0c      	bge.n	8006428 <HAL_RCC_OscConfig+0xa38>
 800640e:	4b05      	ldr	r3, [pc, #20]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	015b      	lsls	r3, r3, #5
 800641c:	4901      	ldr	r1, [pc, #4]	@ (8006424 <HAL_RCC_OscConfig+0xa34>)
 800641e:	4313      	orrs	r3, r2
 8006420:	60cb      	str	r3, [r1, #12]
 8006422:	e01b      	b.n	800645c <HAL_RCC_OscConfig+0xa6c>
 8006424:	46020c00 	.word	0x46020c00
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006430:	d30a      	bcc.n	8006448 <HAL_RCC_OscConfig+0xa58>
 8006432:	4ba1      	ldr	r3, [pc, #644]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	029b      	lsls	r3, r3, #10
 8006440:	499d      	ldr	r1, [pc, #628]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006442:	4313      	orrs	r3, r2
 8006444:	60cb      	str	r3, [r1, #12]
 8006446:	e009      	b.n	800645c <HAL_RCC_OscConfig+0xa6c>
 8006448:	4b9b      	ldr	r3, [pc, #620]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	03db      	lsls	r3, r3, #15
 8006456:	4998      	ldr	r1, [pc, #608]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006458:	4313      	orrs	r3, r2
 800645a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800645c:	4b96      	ldr	r3, [pc, #600]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a95      	ldr	r2, [pc, #596]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006462:	f043 0310 	orr.w	r3, r3, #16
 8006466:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006468:	f7fd fe9e 	bl	80041a8 <HAL_GetTick>
 800646c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006470:	f7fd fe9a 	bl	80041a8 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e18b      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006482:	4b8d      	ldr	r3, [pc, #564]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0f0      	beq.n	8006470 <HAL_RCC_OscConfig+0xa80>
 800648e:	e018      	b.n	80064c2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006490:	4b89      	ldr	r3, [pc, #548]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a88      	ldr	r2, [pc, #544]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006496:	f023 0310 	bic.w	r3, r3, #16
 800649a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800649c:	f7fd fe84 	bl	80041a8 <HAL_GetTick>
 80064a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80064a4:	f7fd fe80 	bl	80041a8 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e171      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80064b6:	4b80      	ldr	r3, [pc, #512]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 8166 	beq.w	8006798 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80064cc:	2300      	movs	r3, #0
 80064ce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064d2:	4b79      	ldr	r3, [pc, #484]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f003 030c 	and.w	r3, r3, #12
 80064da:	2b0c      	cmp	r3, #12
 80064dc:	f000 80f2 	beq.w	80066c4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	f040 80c5 	bne.w	8006674 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80064ea:	4b73      	ldr	r3, [pc, #460]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a72      	ldr	r2, [pc, #456]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80064f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80064f6:	f7fd fe57 	bl	80041a8 <HAL_GetTick>
 80064fa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80064fc:	e008      	b.n	8006510 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064fe:	f7fd fe53 	bl	80041a8 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e144      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006510:	4b69      	ldr	r3, [pc, #420]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1f0      	bne.n	80064fe <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800651c:	4b66      	ldr	r3, [pc, #408]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 800651e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d111      	bne.n	800654e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800652a:	4b63      	ldr	r3, [pc, #396]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 800652c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006530:	4a61      	ldr	r2, [pc, #388]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006532:	f043 0304 	orr.w	r3, r3, #4
 8006536:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800653a:	4b5f      	ldr	r3, [pc, #380]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 800653c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006548:	2301      	movs	r3, #1
 800654a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800654e:	4b5b      	ldr	r3, [pc, #364]	@ (80066bc <HAL_RCC_OscConfig+0xccc>)
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006556:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800655a:	d102      	bne.n	8006562 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006562:	4b56      	ldr	r3, [pc, #344]	@ (80066bc <HAL_RCC_OscConfig+0xccc>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	4a55      	ldr	r2, [pc, #340]	@ (80066bc <HAL_RCC_OscConfig+0xccc>)
 8006568:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800656c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800656e:	4b52      	ldr	r3, [pc, #328]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006582:	3a01      	subs	r2, #1
 8006584:	0212      	lsls	r2, r2, #8
 8006586:	4311      	orrs	r1, r2
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800658c:	430a      	orrs	r2, r1
 800658e:	494a      	ldr	r1, [pc, #296]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006590:	4313      	orrs	r3, r2
 8006592:	628b      	str	r3, [r1, #40]	@ 0x28
 8006594:	4b48      	ldr	r3, [pc, #288]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006598:	4b49      	ldr	r3, [pc, #292]	@ (80066c0 <HAL_RCC_OscConfig+0xcd0>)
 800659a:	4013      	ands	r3, r2
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065a0:	3a01      	subs	r2, #1
 80065a2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80065aa:	3a01      	subs	r2, #1
 80065ac:	0252      	lsls	r2, r2, #9
 80065ae:	b292      	uxth	r2, r2
 80065b0:	4311      	orrs	r1, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80065b6:	3a01      	subs	r2, #1
 80065b8:	0412      	lsls	r2, r2, #16
 80065ba:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80065be:	4311      	orrs	r1, r2
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80065c4:	3a01      	subs	r2, #1
 80065c6:	0612      	lsls	r2, r2, #24
 80065c8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80065cc:	430a      	orrs	r2, r1
 80065ce:	493a      	ldr	r1, [pc, #232]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80065d4:	4b38      	ldr	r3, [pc, #224]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80065d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d8:	4a37      	ldr	r2, [pc, #220]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80065da:	f023 0310 	bic.w	r3, r3, #16
 80065de:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e4:	4a34      	ldr	r2, [pc, #208]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80065ea:	4b33      	ldr	r3, [pc, #204]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80065ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ee:	4a32      	ldr	r2, [pc, #200]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80065f0:	f043 0310 	orr.w	r3, r3, #16
 80065f4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80065f6:	4b30      	ldr	r3, [pc, #192]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80065f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fa:	f023 020c 	bic.w	r2, r3, #12
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006602:	492d      	ldr	r1, [pc, #180]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006604:	4313      	orrs	r3, r2
 8006606:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006608:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800660c:	2b01      	cmp	r3, #1
 800660e:	d105      	bne.n	800661c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006610:	4b2a      	ldr	r3, [pc, #168]	@ (80066bc <HAL_RCC_OscConfig+0xccc>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4a29      	ldr	r2, [pc, #164]	@ (80066bc <HAL_RCC_OscConfig+0xccc>)
 8006616:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800661a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800661c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006620:	2b01      	cmp	r3, #1
 8006622:	d107      	bne.n	8006634 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006624:	4b24      	ldr	r3, [pc, #144]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800662a:	4a23      	ldr	r2, [pc, #140]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 800662c:	f023 0304 	bic.w	r3, r3, #4
 8006630:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006634:	4b20      	ldr	r3, [pc, #128]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1f      	ldr	r2, [pc, #124]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 800663a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800663e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006640:	f7fd fdb2 	bl	80041a8 <HAL_GetTick>
 8006644:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006648:	f7fd fdae 	bl	80041a8 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e09f      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800665a:	4b17      	ldr	r3, [pc, #92]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0f0      	beq.n	8006648 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006666:	4b14      	ldr	r3, [pc, #80]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666a:	4a13      	ldr	r2, [pc, #76]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 800666c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006670:	6293      	str	r3, [r2, #40]	@ 0x28
 8006672:	e091      	b.n	8006798 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006674:	4b10      	ldr	r3, [pc, #64]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a0f      	ldr	r2, [pc, #60]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 800667a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800667e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006680:	f7fd fd92 	bl	80041a8 <HAL_GetTick>
 8006684:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006686:	e008      	b.n	800669a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006688:	f7fd fd8e 	bl	80041a8 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e07f      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800669a:	4b07      	ldr	r3, [pc, #28]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f0      	bne.n	8006688 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80066a6:	4b04      	ldr	r3, [pc, #16]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80066a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066aa:	4a03      	ldr	r2, [pc, #12]	@ (80066b8 <HAL_RCC_OscConfig+0xcc8>)
 80066ac:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80066b0:	f023 0303 	bic.w	r3, r3, #3
 80066b4:	6293      	str	r3, [r2, #40]	@ 0x28
 80066b6:	e06f      	b.n	8006798 <HAL_RCC_OscConfig+0xda8>
 80066b8:	46020c00 	.word	0x46020c00
 80066bc:	46020800 	.word	0x46020800
 80066c0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80066c4:	4b37      	ldr	r3, [pc, #220]	@ (80067a4 <HAL_RCC_OscConfig+0xdb4>)
 80066c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066ca:	4b36      	ldr	r3, [pc, #216]	@ (80067a4 <HAL_RCC_OscConfig+0xdb4>)
 80066cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ce:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d039      	beq.n	800674c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f003 0203 	and.w	r2, r3, #3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d132      	bne.n	800674c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	0a1b      	lsrs	r3, r3, #8
 80066ea:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d129      	bne.n	800674c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006702:	429a      	cmp	r2, r3
 8006704:	d122      	bne.n	800674c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006710:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006712:	429a      	cmp	r2, r3
 8006714:	d11a      	bne.n	800674c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	0a5b      	lsrs	r3, r3, #9
 800671a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006722:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006724:	429a      	cmp	r2, r3
 8006726:	d111      	bne.n	800674c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	0c1b      	lsrs	r3, r3, #16
 800672c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006734:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006736:	429a      	cmp	r2, r3
 8006738:	d108      	bne.n	800674c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	0e1b      	lsrs	r3, r3, #24
 800673e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006746:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006748:	429a      	cmp	r2, r3
 800674a:	d001      	beq.n	8006750 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e024      	b.n	800679a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006750:	4b14      	ldr	r3, [pc, #80]	@ (80067a4 <HAL_RCC_OscConfig+0xdb4>)
 8006752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006754:	08db      	lsrs	r3, r3, #3
 8006756:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800675e:	429a      	cmp	r2, r3
 8006760:	d01a      	beq.n	8006798 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006762:	4b10      	ldr	r3, [pc, #64]	@ (80067a4 <HAL_RCC_OscConfig+0xdb4>)
 8006764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006766:	4a0f      	ldr	r2, [pc, #60]	@ (80067a4 <HAL_RCC_OscConfig+0xdb4>)
 8006768:	f023 0310 	bic.w	r3, r3, #16
 800676c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676e:	f7fd fd1b 	bl	80041a8 <HAL_GetTick>
 8006772:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006774:	bf00      	nop
 8006776:	f7fd fd17 	bl	80041a8 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677e:	4293      	cmp	r3, r2
 8006780:	d0f9      	beq.n	8006776 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006786:	4a07      	ldr	r2, [pc, #28]	@ (80067a4 <HAL_RCC_OscConfig+0xdb4>)
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800678c:	4b05      	ldr	r3, [pc, #20]	@ (80067a4 <HAL_RCC_OscConfig+0xdb4>)
 800678e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006790:	4a04      	ldr	r2, [pc, #16]	@ (80067a4 <HAL_RCC_OscConfig+0xdb4>)
 8006792:	f043 0310 	orr.w	r3, r3, #16
 8006796:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3738      	adds	r7, #56	@ 0x38
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	46020c00 	.word	0x46020c00

080067a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e1d9      	b.n	8006b70 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067bc:	4b9b      	ldr	r3, [pc, #620]	@ (8006a2c <HAL_RCC_ClockConfig+0x284>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d910      	bls.n	80067ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ca:	4b98      	ldr	r3, [pc, #608]	@ (8006a2c <HAL_RCC_ClockConfig+0x284>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f023 020f 	bic.w	r2, r3, #15
 80067d2:	4996      	ldr	r1, [pc, #600]	@ (8006a2c <HAL_RCC_ClockConfig+0x284>)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067da:	4b94      	ldr	r3, [pc, #592]	@ (8006a2c <HAL_RCC_ClockConfig+0x284>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d001      	beq.n	80067ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e1c1      	b.n	8006b70 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d010      	beq.n	800681a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695a      	ldr	r2, [r3, #20]
 80067fc:	4b8c      	ldr	r3, [pc, #560]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006804:	429a      	cmp	r2, r3
 8006806:	d908      	bls.n	800681a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006808:	4b89      	ldr	r3, [pc, #548]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	4986      	ldr	r1, [pc, #536]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 8006816:	4313      	orrs	r3, r2
 8006818:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d012      	beq.n	800684c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691a      	ldr	r2, [r3, #16]
 800682a:	4b81      	ldr	r3, [pc, #516]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	091b      	lsrs	r3, r3, #4
 8006830:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006834:	429a      	cmp	r2, r3
 8006836:	d909      	bls.n	800684c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006838:	4b7d      	ldr	r3, [pc, #500]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	497a      	ldr	r1, [pc, #488]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 8006848:	4313      	orrs	r3, r2
 800684a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	d010      	beq.n	800687a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	4b74      	ldr	r3, [pc, #464]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006864:	429a      	cmp	r2, r3
 8006866:	d908      	bls.n	800687a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006868:	4b71      	ldr	r3, [pc, #452]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	496e      	ldr	r1, [pc, #440]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 8006876:	4313      	orrs	r3, r2
 8006878:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d010      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	4b69      	ldr	r3, [pc, #420]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	429a      	cmp	r2, r3
 8006894:	d908      	bls.n	80068a8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006896:	4b66      	ldr	r3, [pc, #408]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	f023 020f 	bic.w	r2, r3, #15
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	4963      	ldr	r1, [pc, #396]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 80d2 	beq.w	8006a5a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80068b6:	2300      	movs	r3, #0
 80068b8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d143      	bne.n	800694a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068c2:	4b5b      	ldr	r3, [pc, #364]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 80068c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d110      	bne.n	80068f2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80068d0:	4b57      	ldr	r3, [pc, #348]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 80068d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068d6:	4a56      	ldr	r2, [pc, #344]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 80068d8:	f043 0304 	orr.w	r3, r3, #4
 80068dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80068e0:	4b53      	ldr	r3, [pc, #332]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 80068e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	60bb      	str	r3, [r7, #8]
 80068ec:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80068ee:	2301      	movs	r3, #1
 80068f0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80068f2:	f7fd fc59 	bl	80041a8 <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80068f8:	4b4e      	ldr	r3, [pc, #312]	@ (8006a34 <HAL_RCC_ClockConfig+0x28c>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00f      	beq.n	8006924 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006904:	e008      	b.n	8006918 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006906:	f7fd fc4f 	bl	80041a8 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e12b      	b.n	8006b70 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006918:	4b46      	ldr	r3, [pc, #280]	@ (8006a34 <HAL_RCC_ClockConfig+0x28c>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0f0      	beq.n	8006906 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d107      	bne.n	800693a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800692a:	4b41      	ldr	r3, [pc, #260]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 800692c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006930:	4a3f      	ldr	r2, [pc, #252]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 8006932:	f023 0304 	bic.w	r3, r3, #4
 8006936:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800693a:	4b3d      	ldr	r3, [pc, #244]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d121      	bne.n	800698a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e112      	b.n	8006b70 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d107      	bne.n	8006962 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006952:	4b37      	ldr	r3, [pc, #220]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d115      	bne.n	800698a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e106      	b.n	8006b70 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d107      	bne.n	800697a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800696a:	4b31      	ldr	r3, [pc, #196]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0304 	and.w	r3, r3, #4
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e0fa      	b.n	8006b70 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800697a:	4b2d      	ldr	r3, [pc, #180]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e0f2      	b.n	8006b70 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800698a:	4b29      	ldr	r3, [pc, #164]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	f023 0203 	bic.w	r2, r3, #3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	4926      	ldr	r1, [pc, #152]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 8006998:	4313      	orrs	r3, r2
 800699a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800699c:	f7fd fc04 	bl	80041a8 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d112      	bne.n	80069d0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069aa:	e00a      	b.n	80069c2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069ac:	f7fd fbfc 	bl	80041a8 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e0d6      	b.n	8006b70 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f003 030c 	and.w	r3, r3, #12
 80069ca:	2b0c      	cmp	r3, #12
 80069cc:	d1ee      	bne.n	80069ac <HAL_RCC_ClockConfig+0x204>
 80069ce:	e044      	b.n	8006a5a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d112      	bne.n	80069fe <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80069d8:	e00a      	b.n	80069f0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069da:	f7fd fbe5 	bl	80041a8 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e0bf      	b.n	8006b70 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80069f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	f003 030c 	and.w	r3, r3, #12
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d1ee      	bne.n	80069da <HAL_RCC_ClockConfig+0x232>
 80069fc:	e02d      	b.n	8006a5a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d123      	bne.n	8006a4e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a06:	e00a      	b.n	8006a1e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a08:	f7fd fbce 	bl	80041a8 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e0a8      	b.n	8006b70 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a1e:	4b04      	ldr	r3, [pc, #16]	@ (8006a30 <HAL_RCC_ClockConfig+0x288>)
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	f003 030c 	and.w	r3, r3, #12
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1ee      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x260>
 8006a2a:	e016      	b.n	8006a5a <HAL_RCC_ClockConfig+0x2b2>
 8006a2c:	40022000 	.word	0x40022000
 8006a30:	46020c00 	.word	0x46020c00
 8006a34:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a38:	f7fd fbb6 	bl	80041a8 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e090      	b.n	8006b70 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	f003 030c 	and.w	r3, r3, #12
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d1ee      	bne.n	8006a38 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d010      	beq.n	8006a88 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	4b43      	ldr	r3, [pc, #268]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d208      	bcs.n	8006a88 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006a76:	4b40      	ldr	r3, [pc, #256]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f023 020f 	bic.w	r2, r3, #15
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	493d      	ldr	r1, [pc, #244]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a88:	4b3c      	ldr	r3, [pc, #240]	@ (8006b7c <HAL_RCC_ClockConfig+0x3d4>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d210      	bcs.n	8006ab8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a96:	4b39      	ldr	r3, [pc, #228]	@ (8006b7c <HAL_RCC_ClockConfig+0x3d4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f023 020f 	bic.w	r2, r3, #15
 8006a9e:	4937      	ldr	r1, [pc, #220]	@ (8006b7c <HAL_RCC_ClockConfig+0x3d4>)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	4b35      	ldr	r3, [pc, #212]	@ (8006b7c <HAL_RCC_ClockConfig+0x3d4>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e05b      	b.n	8006b70 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d010      	beq.n	8006ae6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d208      	bcs.n	8006ae6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006ad4:	4b28      	ldr	r3, [pc, #160]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	4925      	ldr	r1, [pc, #148]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d012      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	4b20      	ldr	r3, [pc, #128]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	091b      	lsrs	r3, r3, #4
 8006afc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d209      	bcs.n	8006b18 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006b04:	4b1c      	ldr	r3, [pc, #112]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	4919      	ldr	r1, [pc, #100]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d010      	beq.n	8006b46 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	695a      	ldr	r2, [r3, #20]
 8006b28:	4b13      	ldr	r3, [pc, #76]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d208      	bcs.n	8006b46 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006b34:	4b10      	ldr	r3, [pc, #64]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	490d      	ldr	r1, [pc, #52]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006b46:	f000 f821 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b78 <HAL_RCC_ClockConfig+0x3d0>)
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	490a      	ldr	r1, [pc, #40]	@ (8006b80 <HAL_RCC_ClockConfig+0x3d8>)
 8006b56:	5ccb      	ldrb	r3, [r1, r3]
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5c:	4a09      	ldr	r2, [pc, #36]	@ (8006b84 <HAL_RCC_ClockConfig+0x3dc>)
 8006b5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006b60:	4b09      	ldr	r3, [pc, #36]	@ (8006b88 <HAL_RCC_ClockConfig+0x3e0>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fd fa95 	bl	8004094 <HAL_InitTick>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73fb      	strb	r3, [r7, #15]

  return status;
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	46020c00 	.word	0x46020c00
 8006b7c:	40022000 	.word	0x40022000
 8006b80:	0800f218 	.word	0x0800f218
 8006b84:	2000000c 	.word	0x2000000c
 8006b88:	20000010 	.word	0x20000010

08006b8c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b08b      	sub	sp, #44	@ 0x2c
 8006b90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b9a:	4b78      	ldr	r3, [pc, #480]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	f003 030c 	and.w	r3, r3, #12
 8006ba2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ba4:	4b75      	ldr	r3, [pc, #468]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	2b0c      	cmp	r3, #12
 8006bb8:	d121      	bne.n	8006bfe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d11e      	bne.n	8006bfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006bc0:	4b6e      	ldr	r3, [pc, #440]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d107      	bne.n	8006bdc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006bcc:	4b6b      	ldr	r3, [pc, #428]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bd2:	0b1b      	lsrs	r3, r3, #12
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bda:	e005      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006bdc:	4b67      	ldr	r3, [pc, #412]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	0f1b      	lsrs	r3, r3, #28
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006be8:	4a65      	ldr	r2, [pc, #404]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d110      	bne.n	8006c1a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006bfc:	e00d      	b.n	8006c1a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	f003 030c 	and.w	r3, r3, #12
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d102      	bne.n	8006c10 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c0a:	4b5e      	ldr	r3, [pc, #376]	@ (8006d84 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006c0c:	623b      	str	r3, [r7, #32]
 8006c0e:	e004      	b.n	8006c1a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d101      	bne.n	8006c1a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c16:	4b5b      	ldr	r3, [pc, #364]	@ (8006d84 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006c18:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b0c      	cmp	r3, #12
 8006c1e:	f040 80a5 	bne.w	8006d6c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006c22:	4b56      	ldr	r3, [pc, #344]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c26:	f003 0303 	and.w	r3, r3, #3
 8006c2a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006c2c:	4b53      	ldr	r3, [pc, #332]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c30:	0a1b      	lsrs	r3, r3, #8
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	3301      	adds	r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006c3a:	4b50      	ldr	r3, [pc, #320]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3e:	091b      	lsrs	r3, r3, #4
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006c46:	4b4d      	ldr	r3, [pc, #308]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4a:	08db      	lsrs	r3, r3, #3
 8006c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	fb02 f303 	mul.w	r3, r2, r3
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d003      	beq.n	8006c70 <HAL_RCC_GetSysClockFreq+0xe4>
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d022      	beq.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x128>
 8006c6e:	e043      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006d88 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	4b3e      	ldr	r3, [pc, #248]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006c92:	ed97 6a01 	vldr	s12, [r7, #4]
 8006c96:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006d8c <HAL_RCC_GetSysClockFreq+0x200>
 8006c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb2:	e046      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbe:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8006d88 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006cd6:	ed97 6a01 	vldr	s12, [r7, #4]
 8006cda:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006d8c <HAL_RCC_GetSysClockFreq+0x200>
 8006cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cf6:	e024      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	ee07 3a90 	vmov	s15, r3
 8006d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d10:	4b1a      	ldr	r3, [pc, #104]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d18:	ee07 3a90 	vmov	s15, r3
 8006d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006d20:	ed97 6a01 	vldr	s12, [r7, #4]
 8006d24:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8006d8c <HAL_RCC_GetSysClockFreq+0x200>
 8006d28:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006d30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d40:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006d42:	4b0e      	ldr	r3, [pc, #56]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d46:	0e1b      	lsrs	r3, r3, #24
 8006d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d66:	ee17 3a90 	vmov	r3, s15
 8006d6a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	372c      	adds	r7, #44	@ 0x2c
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	46020c00 	.word	0x46020c00
 8006d80:	0800f230 	.word	0x0800f230
 8006d84:	00f42400 	.word	0x00f42400
 8006d88:	4b742400 	.word	0x4b742400
 8006d8c:	46000000 	.word	0x46000000

08006d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006d94:	f7ff fefa 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <HAL_RCC_GetHCLKFreq+0x28>)
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	4906      	ldr	r1, [pc, #24]	@ (8006dbc <HAL_RCC_GetHCLKFreq+0x2c>)
 8006da4:	5ccb      	ldrb	r3, [r1, r3]
 8006da6:	fa22 f303 	lsr.w	r3, r2, r3
 8006daa:	4a05      	ldr	r2, [pc, #20]	@ (8006dc0 <HAL_RCC_GetHCLKFreq+0x30>)
 8006dac:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006dae:	4b04      	ldr	r3, [pc, #16]	@ (8006dc0 <HAL_RCC_GetHCLKFreq+0x30>)
 8006db0:	681b      	ldr	r3, [r3, #0]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	46020c00 	.word	0x46020c00
 8006dbc:	0800f218 	.word	0x0800f218
 8006dc0:	2000000c 	.word	0x2000000c

08006dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006dc8:	f7ff ffe2 	bl	8006d90 <HAL_RCC_GetHCLKFreq>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	091b      	lsrs	r3, r3, #4
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	4903      	ldr	r1, [pc, #12]	@ (8006de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dda:	5ccb      	ldrb	r3, [r1, r3]
 8006ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	46020c00 	.word	0x46020c00
 8006de8:	0800f228 	.word	0x0800f228

08006dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006df0:	f7ff ffce 	bl	8006d90 <HAL_RCC_GetHCLKFreq>
 8006df4:	4602      	mov	r2, r0
 8006df6:	4b05      	ldr	r3, [pc, #20]	@ (8006e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	0a1b      	lsrs	r3, r3, #8
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	4903      	ldr	r1, [pc, #12]	@ (8006e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e02:	5ccb      	ldrb	r3, [r1, r3]
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	46020c00 	.word	0x46020c00
 8006e10:	0800f228 	.word	0x0800f228

08006e14 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006e18:	f7ff ffba 	bl	8006d90 <HAL_RCC_GetHCLKFreq>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <HAL_RCC_GetPCLK3Freq+0x20>)
 8006e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e22:	091b      	lsrs	r3, r3, #4
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	4903      	ldr	r1, [pc, #12]	@ (8006e38 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006e2a:	5ccb      	ldrb	r3, [r1, r3]
 8006e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	46020c00 	.word	0x46020c00
 8006e38:	0800f228 	.word	0x0800f228

08006e3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e44:	4b3e      	ldr	r3, [pc, #248]	@ (8006f40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e4a:	f003 0304 	and.w	r3, r3, #4
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e52:	f7fe fd4f 	bl	80058f4 <HAL_PWREx_GetVoltageRange>
 8006e56:	6178      	str	r0, [r7, #20]
 8006e58:	e019      	b.n	8006e8e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e5a:	4b39      	ldr	r3, [pc, #228]	@ (8006f40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e60:	4a37      	ldr	r2, [pc, #220]	@ (8006f40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e62:	f043 0304 	orr.w	r3, r3, #4
 8006e66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006e6a:	4b35      	ldr	r3, [pc, #212]	@ (8006f40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e78:	f7fe fd3c 	bl	80058f4 <HAL_PWREx_GetVoltageRange>
 8006e7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e7e:	4b30      	ldr	r3, [pc, #192]	@ (8006f40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e84:	4a2e      	ldr	r2, [pc, #184]	@ (8006f40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e86:	f023 0304 	bic.w	r3, r3, #4
 8006e8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e94:	d003      	beq.n	8006e9e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e9c:	d109      	bne.n	8006eb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ea4:	d202      	bcs.n	8006eac <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006eaa:	e033      	b.n	8006f14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006eac:	2300      	movs	r3, #0
 8006eae:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006eb0:	e030      	b.n	8006f14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eb8:	d208      	bcs.n	8006ecc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec0:	d102      	bne.n	8006ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	613b      	str	r3, [r7, #16]
 8006ec6:	e025      	b.n	8006f14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e035      	b.n	8006f38 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ed2:	d90f      	bls.n	8006ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d109      	bne.n	8006eee <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ee0:	d902      	bls.n	8006ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	e015      	b.n	8006f14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006ee8:	2301      	movs	r3, #1
 8006eea:	613b      	str	r3, [r7, #16]
 8006eec:	e012      	b.n	8006f14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006eee:	2300      	movs	r3, #0
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	e00f      	b.n	8006f14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006efa:	d109      	bne.n	8006f10 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f02:	d102      	bne.n	8006f0a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006f04:	2301      	movs	r3, #1
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	e004      	b.n	8006f14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	613b      	str	r3, [r7, #16]
 8006f0e:	e001      	b.n	8006f14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006f10:	2301      	movs	r3, #1
 8006f12:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f14:	4b0b      	ldr	r3, [pc, #44]	@ (8006f44 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f023 020f 	bic.w	r2, r3, #15
 8006f1c:	4909      	ldr	r1, [pc, #36]	@ (8006f44 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006f24:	4b07      	ldr	r3, [pc, #28]	@ (8006f44 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d001      	beq.n	8006f36 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e000      	b.n	8006f38 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	46020c00 	.word	0x46020c00
 8006f44:	40022000 	.word	0x40022000

08006f48 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f4c:	b0c4      	sub	sp, #272	@ 0x110
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f54:	2300      	movs	r3, #0
 8006f56:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f002 0401 	and.w	r4, r2, #1
 8006f6c:	2500      	movs	r5, #0
 8006f6e:	ea54 0305 	orrs.w	r3, r4, r5
 8006f72:	d00b      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006f74:	4bd5      	ldr	r3, [pc, #852]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f7a:	f023 0103 	bic.w	r1, r3, #3
 8006f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f84:	4ad1      	ldr	r2, [pc, #836]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f86:	430b      	orrs	r3, r1
 8006f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	f002 0802 	and.w	r8, r2, #2
 8006f98:	f04f 0900 	mov.w	r9, #0
 8006f9c:	ea58 0309 	orrs.w	r3, r8, r9
 8006fa0:	d00b      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006fa2:	4bca      	ldr	r3, [pc, #808]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fa8:	f023 010c 	bic.w	r1, r3, #12
 8006fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb2:	4ac6      	ldr	r2, [pc, #792]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	f002 0a04 	and.w	sl, r2, #4
 8006fc6:	f04f 0b00 	mov.w	fp, #0
 8006fca:	ea5a 030b 	orrs.w	r3, sl, fp
 8006fce:	d00b      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006fd0:	4bbe      	ldr	r3, [pc, #760]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fd6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe0:	4aba      	ldr	r2, [pc, #744]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006fe2:	430b      	orrs	r3, r1
 8006fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	f002 0308 	and.w	r3, r2, #8
 8006ff4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ffe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007002:	460b      	mov	r3, r1
 8007004:	4313      	orrs	r3, r2
 8007006:	d00b      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007008:	4bb0      	ldr	r3, [pc, #704]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800700a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800700e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007018:	4aac      	ldr	r2, [pc, #688]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800701a:	430b      	orrs	r3, r1
 800701c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f002 0310 	and.w	r3, r2, #16
 800702c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007030:	2300      	movs	r3, #0
 8007032:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007036:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800703a:	460b      	mov	r3, r1
 800703c:	4313      	orrs	r3, r2
 800703e:	d00b      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007040:	4ba2      	ldr	r3, [pc, #648]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007046:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800704a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800704e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007050:	4a9e      	ldr	r2, [pc, #632]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007052:	430b      	orrs	r3, r1
 8007054:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007064:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007068:	2300      	movs	r3, #0
 800706a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800706e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007072:	460b      	mov	r3, r1
 8007074:	4313      	orrs	r3, r2
 8007076:	d00b      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8007078:	4b94      	ldr	r3, [pc, #592]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800707a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800707e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007088:	4a90      	ldr	r2, [pc, #576]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800708a:	430b      	orrs	r3, r1
 800708c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f002 0320 	and.w	r3, r2, #32
 800709c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070a0:	2300      	movs	r3, #0
 80070a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80070a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070aa:	460b      	mov	r3, r1
 80070ac:	4313      	orrs	r3, r2
 80070ae:	d00b      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80070b0:	4b86      	ldr	r3, [pc, #536]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80070b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070b6:	f023 0107 	bic.w	r1, r3, #7
 80070ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070c0:	4a82      	ldr	r2, [pc, #520]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80070c2:	430b      	orrs	r3, r1
 80070c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80070d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070d8:	2300      	movs	r3, #0
 80070da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80070de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80070e2:	460b      	mov	r3, r1
 80070e4:	4313      	orrs	r3, r2
 80070e6:	d00b      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80070e8:	4b78      	ldr	r3, [pc, #480]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80070ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070ee:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80070f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070f8:	4a74      	ldr	r2, [pc, #464]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80070fa:	430b      	orrs	r3, r1
 80070fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800710c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007110:	2300      	movs	r3, #0
 8007112:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007116:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800711a:	460b      	mov	r3, r1
 800711c:	4313      	orrs	r3, r2
 800711e:	d00b      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007120:	4b6a      	ldr	r3, [pc, #424]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007126:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800712a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800712e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007130:	4a66      	ldr	r2, [pc, #408]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007132:	430b      	orrs	r3, r1
 8007134:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007144:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007148:	2300      	movs	r3, #0
 800714a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800714e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007152:	460b      	mov	r3, r1
 8007154:	4313      	orrs	r3, r2
 8007156:	d00b      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007158:	4b5c      	ldr	r3, [pc, #368]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800715a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800715e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007168:	4a58      	ldr	r2, [pc, #352]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800716a:	430b      	orrs	r3, r1
 800716c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800717c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007180:	2300      	movs	r3, #0
 8007182:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007186:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800718a:	460b      	mov	r3, r1
 800718c:	4313      	orrs	r3, r2
 800718e:	d00b      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007190:	4b4e      	ldr	r3, [pc, #312]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007196:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800719a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800719e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071a0:	4a4a      	ldr	r2, [pc, #296]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80071a2:	430b      	orrs	r3, r1
 80071a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80071a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80071b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071b8:	2300      	movs	r3, #0
 80071ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4313      	orrs	r3, r2
 80071c6:	d00b      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80071c8:	4b40      	ldr	r3, [pc, #256]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80071ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071ce:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80071d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071d8:	4a3c      	ldr	r2, [pc, #240]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80071da:	430b      	orrs	r3, r1
 80071dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 80071e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80071ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071f0:	2300      	movs	r3, #0
 80071f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80071fa:	460b      	mov	r3, r1
 80071fc:	4313      	orrs	r3, r2
 80071fe:	d00c      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8007200:	4b32      	ldr	r3, [pc, #200]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007202:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007206:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800720a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800720e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007212:	4a2e      	ldr	r2, [pc, #184]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007214:	430b      	orrs	r3, r1
 8007216:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800721a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007226:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800722a:	2300      	movs	r3, #0
 800722c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007230:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007234:	460b      	mov	r3, r1
 8007236:	4313      	orrs	r3, r2
 8007238:	d00c      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800723a:	4b24      	ldr	r3, [pc, #144]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800723c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007240:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800724c:	4a1f      	ldr	r2, [pc, #124]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800724e:	430b      	orrs	r3, r1
 8007250:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007264:	2300      	movs	r3, #0
 8007266:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800726a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800726e:	460b      	mov	r3, r1
 8007270:	4313      	orrs	r3, r2
 8007272:	d00c      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007274:	4b15      	ldr	r3, [pc, #84]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800727a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800727e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007286:	4a11      	ldr	r2, [pc, #68]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007288:	430b      	orrs	r3, r1
 800728a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800728e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800729a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800729e:	2300      	movs	r3, #0
 80072a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072a4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80072a8:	460b      	mov	r3, r1
 80072aa:	4313      	orrs	r3, r2
 80072ac:	d010      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80072ae:	4b07      	ldr	r3, [pc, #28]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80072b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072c0:	4a02      	ldr	r2, [pc, #8]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80072c2:	430b      	orrs	r3, r1
 80072c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80072c8:	e002      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80072ca:	bf00      	nop
 80072cc:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80072d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80072dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072e0:	2300      	movs	r3, #0
 80072e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80072e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80072ea:	460b      	mov	r3, r1
 80072ec:	4313      	orrs	r3, r2
 80072ee:	d04c      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80072f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072f8:	2b80      	cmp	r3, #128	@ 0x80
 80072fa:	d02d      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80072fc:	2b80      	cmp	r3, #128	@ 0x80
 80072fe:	d827      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007300:	2b60      	cmp	r3, #96	@ 0x60
 8007302:	d02b      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007304:	2b60      	cmp	r3, #96	@ 0x60
 8007306:	d823      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007308:	2b40      	cmp	r3, #64	@ 0x40
 800730a:	d006      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800730c:	2b40      	cmp	r3, #64	@ 0x40
 800730e:	d81f      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d009      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007314:	2b20      	cmp	r3, #32
 8007316:	d011      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007318:	e01a      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800731a:	4bbe      	ldr	r3, [pc, #760]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800731c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731e:	4abd      	ldr	r2, [pc, #756]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007324:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007326:	e01a      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800732c:	3308      	adds	r3, #8
 800732e:	4618      	mov	r0, r3
 8007330:	f002 fc32 	bl	8009b98 <RCCEx_PLL2_Config>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800733a:	e010      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800733c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007340:	332c      	adds	r3, #44	@ 0x2c
 8007342:	4618      	mov	r0, r3
 8007344:	f002 fcc0 	bl	8009cc8 <RCCEx_PLL3_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800734e:	e006      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007356:	e002      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8007358:	bf00      	nop
 800735a:	e000      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800735c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800735e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10d      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007366:	4bab      	ldr	r3, [pc, #684]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007368:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800736c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007374:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007378:	4aa6      	ldr	r2, [pc, #664]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800737a:	430b      	orrs	r3, r1
 800737c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007380:	e003      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007382:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007386:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800738a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007396:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800739a:	2300      	movs	r3, #0
 800739c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073a0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80073a4:	460b      	mov	r3, r1
 80073a6:	4313      	orrs	r3, r2
 80073a8:	d053      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80073aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073b6:	d033      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80073b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073bc:	d82c      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80073be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073c2:	d02f      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80073c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073c8:	d826      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80073ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073ce:	d008      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80073d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073d4:	d820      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80073da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073de:	d011      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80073e0:	e01a      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80073e2:	4b8c      	ldr	r3, [pc, #560]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e6:	4a8b      	ldr	r2, [pc, #556]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80073ee:	e01a      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073f4:	3308      	adds	r3, #8
 80073f6:	4618      	mov	r0, r3
 80073f8:	f002 fbce 	bl	8009b98 <RCCEx_PLL2_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007402:	e010      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007408:	332c      	adds	r3, #44	@ 0x2c
 800740a:	4618      	mov	r0, r3
 800740c:	f002 fc5c 	bl	8009cc8 <RCCEx_PLL3_Config>
 8007410:	4603      	mov	r3, r0
 8007412:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007416:	e006      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800741e:	e002      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8007420:	bf00      	nop
 8007422:	e000      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8007424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007426:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10d      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800742e:	4b79      	ldr	r3, [pc, #484]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007430:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007434:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800743c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007440:	4a74      	ldr	r2, [pc, #464]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007442:	430b      	orrs	r3, r1
 8007444:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007448:	e003      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800744e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800745e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007460:	2300      	movs	r3, #0
 8007462:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007464:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007468:	460b      	mov	r3, r1
 800746a:	4313      	orrs	r3, r2
 800746c:	d046      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800746e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007472:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007476:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800747a:	d028      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x586>
 800747c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007480:	d821      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8007482:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007486:	d022      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007488:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800748c:	d81b      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800748e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007492:	d01c      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007494:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007498:	d815      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800749a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800749e:	d008      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80074a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074a4:	d80f      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d011      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x586>
 80074aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ae:	d00e      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x586>
 80074b0:	e009      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074b6:	3308      	adds	r3, #8
 80074b8:	4618      	mov	r0, r3
 80074ba:	f002 fb6d 	bl	8009b98 <RCCEx_PLL2_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80074c4:	e004      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80074cc:	e000      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 80074ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10d      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80074d8:	4b4e      	ldr	r3, [pc, #312]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074de:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80074e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074ea:	4a4a      	ldr	r2, [pc, #296]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074ec:	430b      	orrs	r3, r1
 80074ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80074f2:	e003      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80074f8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80074fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007508:	673b      	str	r3, [r7, #112]	@ 0x70
 800750a:	2300      	movs	r3, #0
 800750c:	677b      	str	r3, [r7, #116]	@ 0x74
 800750e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007512:	460b      	mov	r3, r1
 8007514:	4313      	orrs	r3, r2
 8007516:	d03f      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800751c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007520:	2b04      	cmp	r3, #4
 8007522:	d81e      	bhi.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8007524:	a201      	add	r2, pc, #4	@ (adr r2, 800752c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752a:	bf00      	nop
 800752c:	0800756b 	.word	0x0800756b
 8007530:	08007541 	.word	0x08007541
 8007534:	0800754f 	.word	0x0800754f
 8007538:	0800756b 	.word	0x0800756b
 800753c:	0800756b 	.word	0x0800756b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007540:	4b34      	ldr	r3, [pc, #208]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007544:	4a33      	ldr	r2, [pc, #204]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800754a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800754c:	e00e      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800754e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007552:	332c      	adds	r3, #44	@ 0x2c
 8007554:	4618      	mov	r0, r3
 8007556:	f002 fbb7 	bl	8009cc8 <RCCEx_PLL3_Config>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007560:	e004      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007568:	e000      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 800756a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800756c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10d      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007574:	4b27      	ldr	r3, [pc, #156]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007576:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800757a:	f023 0107 	bic.w	r1, r3, #7
 800757e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007586:	4a23      	ldr	r2, [pc, #140]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007588:	430b      	orrs	r3, r1
 800758a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800758e:	e003      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007590:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007594:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80075a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075a6:	2300      	movs	r3, #0
 80075a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80075ae:	460b      	mov	r3, r1
 80075b0:	4313      	orrs	r3, r2
 80075b2:	d04c      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80075b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075c0:	d02a      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80075c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075c6:	d821      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80075c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075cc:	d026      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80075ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075d2:	d81b      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80075d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075d8:	d00e      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80075da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075de:	d815      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01d      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80075e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e8:	d110      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ee:	4a09      	ldr	r2, [pc, #36]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075f4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80075f6:	e014      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075fc:	332c      	adds	r3, #44	@ 0x2c
 80075fe:	4618      	mov	r0, r3
 8007600:	f002 fb62 	bl	8009cc8 <RCCEx_PLL3_Config>
 8007604:	4603      	mov	r3, r0
 8007606:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800760a:	e00a      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007612:	e006      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8007614:	46020c00 	.word	0x46020c00
        break;
 8007618:	bf00      	nop
 800761a:	e002      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 800761c:	bf00      	nop
 800761e:	e000      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8007620:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007622:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10d      	bne.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800762a:	4baf      	ldr	r3, [pc, #700]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800762c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007630:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007638:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800763c:	4aaa      	ldr	r2, [pc, #680]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800763e:	430b      	orrs	r3, r1
 8007640:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007644:	e003      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007646:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800764a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800764e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800765a:	663b      	str	r3, [r7, #96]	@ 0x60
 800765c:	2300      	movs	r3, #0
 800765e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007660:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007664:	460b      	mov	r3, r1
 8007666:	4313      	orrs	r3, r2
 8007668:	f000 80b5 	beq.w	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800766c:	2300      	movs	r3, #0
 800766e:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007672:	4b9d      	ldr	r3, [pc, #628]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d113      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007680:	4b99      	ldr	r3, [pc, #612]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007686:	4a98      	ldr	r2, [pc, #608]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007688:	f043 0304 	orr.w	r3, r3, #4
 800768c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007690:	4b95      	ldr	r3, [pc, #596]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007696:	f003 0304 	and.w	r3, r3, #4
 800769a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800769e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80076a8:	4b90      	ldr	r3, [pc, #576]	@ (80078ec <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80076aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ac:	4a8f      	ldr	r2, [pc, #572]	@ (80078ec <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076b4:	f7fc fd78 	bl	80041a8 <HAL_GetTick>
 80076b8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80076bc:	e00b      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076be:	f7fc fd73 	bl	80041a8 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d903      	bls.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80076d4:	e005      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80076d6:	4b85      	ldr	r3, [pc, #532]	@ (80078ec <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80076d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0ed      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 80076e2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d165      	bne.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80076ea:	4b7f      	ldr	r3, [pc, #508]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80076ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80076f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d023      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8007700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007704:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800770c:	4293      	cmp	r3, r2
 800770e:	d01b      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007710:	4b75      	ldr	r3, [pc, #468]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800771a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800771e:	4b72      	ldr	r3, [pc, #456]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007724:	4a70      	ldr	r2, [pc, #448]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800772a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800772e:	4b6e      	ldr	r3, [pc, #440]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007734:	4a6c      	ldr	r2, [pc, #432]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800773a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800773e:	4a6a      	ldr	r2, [pc, #424]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007744:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007748:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d019      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007754:	f7fc fd28 	bl	80041a8 <HAL_GetTick>
 8007758:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800775c:	e00d      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800775e:	f7fc fd23 	bl	80041a8 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007768:	1ad2      	subs	r2, r2, r3
 800776a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800776e:	429a      	cmp	r2, r3
 8007770:	d903      	bls.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8007778:	e006      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800777a:	4b5b      	ldr	r3, [pc, #364]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800777c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0ea      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8007788:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10d      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007790:	4b55      	ldr	r3, [pc, #340]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007796:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800779a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800779e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80077a2:	4a51      	ldr	r2, [pc, #324]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80077a4:	430b      	orrs	r3, r1
 80077a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80077aa:	e008      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077ac:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80077b0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 80077b4:	e003      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80077ba:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077be:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d107      	bne.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077c6:	4b48      	ldr	r3, [pc, #288]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80077c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077cc:	4a46      	ldr	r2, [pc, #280]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80077ce:	f023 0304 	bic.w	r3, r3, #4
 80077d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80077d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077de:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80077e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077e4:	2300      	movs	r3, #0
 80077e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077e8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80077ec:	460b      	mov	r3, r1
 80077ee:	4313      	orrs	r3, r2
 80077f0:	d042      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80077f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80077fa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80077fe:	d022      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007800:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007804:	d81b      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8007806:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800780a:	d011      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 800780c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007810:	d815      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d019      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x902>
 8007816:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800781a:	d110      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800781c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007820:	3308      	adds	r3, #8
 8007822:	4618      	mov	r0, r3
 8007824:	f002 f9b8 	bl	8009b98 <RCCEx_PLL2_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800782e:	e00d      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007830:	4b2d      	ldr	r3, [pc, #180]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007834:	4a2c      	ldr	r2, [pc, #176]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800783a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800783c:	e006      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007844:	e002      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8007846:	bf00      	nop
 8007848:	e000      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800784a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800784c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10d      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007854:	4b24      	ldr	r3, [pc, #144]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800785a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800785e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007862:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007866:	4a20      	ldr	r2, [pc, #128]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007868:	430b      	orrs	r3, r1
 800786a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800786e:	e003      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007870:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007874:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007884:	653b      	str	r3, [r7, #80]	@ 0x50
 8007886:	2300      	movs	r3, #0
 8007888:	657b      	str	r3, [r7, #84]	@ 0x54
 800788a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800788e:	460b      	mov	r3, r1
 8007890:	4313      	orrs	r3, r2
 8007892:	d031      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007898:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800789c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078a0:	d00b      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x972>
 80078a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078a6:	d804      	bhi.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d008      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x976>
 80078ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078b0:	d007      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80078b8:	e004      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80078ba:	bf00      	nop
 80078bc:	e002      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80078be:	bf00      	nop
 80078c0:	e000      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80078c2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80078c4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d111      	bne.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80078cc:	4b06      	ldr	r3, [pc, #24]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80078ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078de:	4a02      	ldr	r2, [pc, #8]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80078e0:	430b      	orrs	r3, r1
 80078e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80078e6:	e007      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 80078e8:	46020c00 	.word	0x46020c00
 80078ec:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80078f4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80078f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007904:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007906:	2300      	movs	r3, #0
 8007908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800790a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800790e:	460b      	mov	r3, r1
 8007910:	4313      	orrs	r3, r2
 8007912:	d00c      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007914:	4bb2      	ldr	r3, [pc, #712]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007916:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800791a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800791e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007926:	4aae      	ldr	r2, [pc, #696]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007928:	430b      	orrs	r3, r1
 800792a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800792e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800793a:	643b      	str	r3, [r7, #64]	@ 0x40
 800793c:	2300      	movs	r3, #0
 800793e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007940:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007944:	460b      	mov	r3, r1
 8007946:	4313      	orrs	r3, r2
 8007948:	d019      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800794a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800794e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007956:	d105      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007958:	4ba1      	ldr	r3, [pc, #644]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800795a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795c:	4aa0      	ldr	r2, [pc, #640]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800795e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007962:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007964:	4b9e      	ldr	r3, [pc, #632]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007966:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800796a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800796e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007972:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007976:	4a9a      	ldr	r2, [pc, #616]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007978:	430b      	orrs	r3, r1
 800797a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800797e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800798a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800798c:	2300      	movs	r3, #0
 800798e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007990:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007994:	460b      	mov	r3, r1
 8007996:	4313      	orrs	r3, r2
 8007998:	d00c      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800799a:	4b91      	ldr	r3, [pc, #580]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800799c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079a0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80079a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80079ac:	4a8c      	ldr	r2, [pc, #560]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80079ae:	430b      	orrs	r3, r1
 80079b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80079b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80079c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80079c2:	2300      	movs	r3, #0
 80079c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80079ca:	460b      	mov	r3, r1
 80079cc:	4313      	orrs	r3, r2
 80079ce:	d00c      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80079d0:	4b83      	ldr	r3, [pc, #524]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80079d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80079da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80079e2:	4a7f      	ldr	r2, [pc, #508]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80079e4:	430b      	orrs	r3, r1
 80079e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80079ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80079f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079f8:	2300      	movs	r3, #0
 80079fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007a00:	460b      	mov	r3, r1
 8007a02:	4313      	orrs	r3, r2
 8007a04:	d00c      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007a06:	4b76      	ldr	r3, [pc, #472]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a0c:	f023 0218 	bic.w	r2, r3, #24
 8007a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a14:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007a18:	4971      	ldr	r1, [pc, #452]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007a2c:	623b      	str	r3, [r7, #32]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a36:	460b      	mov	r3, r1
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	d032      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a48:	d105      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a4a:	4b65      	ldr	r3, [pc, #404]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4e:	4a64      	ldr	r2, [pc, #400]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a54:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a62:	d108      	bne.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a68:	3308      	adds	r3, #8
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f002 f894 	bl	8009b98 <RCCEx_PLL2_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8007a76:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10d      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007a7e:	4b58      	ldr	r3, [pc, #352]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a84:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a90:	4953      	ldr	r1, [pc, #332]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007a98:	e003      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007a9e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8007aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	2100      	movs	r1, #0
 8007aac:	61b9      	str	r1, [r7, #24]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	61fb      	str	r3, [r7, #28]
 8007ab4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4313      	orrs	r3, r2
 8007abc:	d04a      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8007abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ac2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007ac6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007aca:	d01e      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8007acc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007ad0:	d825      	bhi.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8007ad2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ad6:	d00e      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8007ad8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007adc:	d81f      	bhi.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d021      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8007ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ae6:	d11a      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae8:	4b3d      	ldr	r3, [pc, #244]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aec:	4a3c      	ldr	r2, [pc, #240]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007af2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007af4:	e018      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007afa:	3308      	adds	r3, #8
 8007afc:	4618      	mov	r0, r3
 8007afe:	f002 f84b 	bl	8009b98 <RCCEx_PLL2_Config>
 8007b02:	4603      	mov	r3, r0
 8007b04:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007b08:	e00e      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b0e:	332c      	adds	r3, #44	@ 0x2c
 8007b10:	4618      	mov	r0, r3
 8007b12:	f002 f8d9 	bl	8009cc8 <RCCEx_PLL3_Config>
 8007b16:	4603      	mov	r3, r0
 8007b18:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007b1c:	e004      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007b24:	e000      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8007b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b28:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10d      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8007b30:	4b2b      	ldr	r3, [pc, #172]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b42:	4927      	ldr	r1, [pc, #156]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007b4a:	e003      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007b50:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007b60:	613b      	str	r3, [r7, #16]
 8007b62:	2300      	movs	r3, #0
 8007b64:	617b      	str	r3, [r7, #20]
 8007b66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	d03d      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b7c:	d00e      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007b7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b82:	d815      	bhi.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d017      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007b88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b8c:	d110      	bne.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b8e:	4b14      	ldr	r3, [pc, #80]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b92:	4a13      	ldr	r2, [pc, #76]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b98:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007b9a:	e00e      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 fff8 	bl	8009b98 <RCCEx_PLL2_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007bae:	e004      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007bb6:	e000      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8007bb8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007bba:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d110      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007bc2:	4b07      	ldr	r3, [pc, #28]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bc8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd4:	4902      	ldr	r1, [pc, #8]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007bdc:	e006      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8007bde:	bf00      	nop
 8007be0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007be8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007bf8:	60bb      	str	r3, [r7, #8]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007c02:	460b      	mov	r3, r1
 8007c04:	4313      	orrs	r3, r2
 8007c06:	d00c      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007c08:	4b2c      	ldr	r3, [pc, #176]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c0e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007c1a:	4928      	ldr	r1, [pc, #160]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8007c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	6039      	str	r1, [r7, #0]
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	607b      	str	r3, [r7, #4]
 8007c34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	d036      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8007c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007c46:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007c4a:	d00d      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007c4c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007c50:	d811      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8007c52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c56:	d012      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007c58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c5c:	d80b      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00d      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c66:	d106      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c68:	4b14      	ldr	r3, [pc, #80]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6c:	4a13      	ldr	r2, [pc, #76]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c72:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8007c74:	e004      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007c7c:	e000      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8007c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c80:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10d      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8007c88:	4b0c      	ldr	r3, [pc, #48]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007c8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c8e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007c9a:	4908      	ldr	r1, [pc, #32]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007ca2:	e003      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007ca8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007cac:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cbc:	46020c00 	.word	0x46020c00

08007cc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b089      	sub	sp, #36	@ 0x24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007cc8:	4ba6      	ldr	r3, [pc, #664]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007cd2:	4ba4      	ldr	r3, [pc, #656]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007cdc:	4ba1      	ldr	r3, [pc, #644]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce0:	0a1b      	lsrs	r3, r3, #8
 8007ce2:	f003 030f 	and.w	r3, r3, #15
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007cea:	4b9e      	ldr	r3, [pc, #632]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cee:	091b      	lsrs	r3, r3, #4
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007cf6:	4b9b      	ldr	r3, [pc, #620]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfa:	08db      	lsrs	r3, r3, #3
 8007cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	fb02 f303 	mul.w	r3, r2, r3
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d062      	beq.n	8007dde <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	f200 8081 	bhi.w	8007e22 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d024      	beq.n	8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d17a      	bne.n	8007e22 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d36:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3e:	4b89      	ldr	r3, [pc, #548]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d52:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d6e:	e08f      	b.n	8007e90 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007d70:	4b7c      	ldr	r3, [pc, #496]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007d7c:	4b79      	ldr	r3, [pc, #484]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	0f1b      	lsrs	r3, r3, #28
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	e006      	b.n	8007d96 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007d88:	4b76      	ldr	r3, [pc, #472]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d8e:	041b      	lsls	r3, r3, #16
 8007d90:	0f1b      	lsrs	r3, r3, #28
 8007d92:	f003 030f 	and.w	r3, r3, #15
 8007d96:	4a76      	ldr	r2, [pc, #472]	@ (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d9c:	ee07 3a90 	vmov	s15, r3
 8007da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	ee07 3a90 	vmov	s15, r3
 8007db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dc0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007dc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ddc:	e058      	b.n	8007e90 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	ee07 3a90 	vmov	s15, r3
 8007de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007dec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df0:	4b5c      	ldr	r3, [pc, #368]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df8:	ee07 3a90 	vmov	s15, r3
 8007dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e00:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e04:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007e08:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e14:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e20:	e036      	b.n	8007e90 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007e22:	4b50      	ldr	r3, [pc, #320]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8007e2e:	4b4d      	ldr	r3, [pc, #308]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	0f1b      	lsrs	r3, r3, #28
 8007e34:	f003 030f 	and.w	r3, r3, #15
 8007e38:	e006      	b.n	8007e48 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8007e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	0f1b      	lsrs	r3, r3, #28
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	4a49      	ldr	r2, [pc, #292]	@ (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	ee07 3a90 	vmov	s15, r3
 8007e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	ee07 3a90 	vmov	s15, r3
 8007e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e72:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e8e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007e90:	4b34      	ldr	r3, [pc, #208]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d017      	beq.n	8007ecc <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007e9c:	4b31      	ldr	r3, [pc, #196]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea0:	0a5b      	lsrs	r3, r3, #9
 8007ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007eae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ec2:	ee17 2a90 	vmov	r2, s15
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	e002      	b.n	8007ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007ed2:	4b24      	ldr	r3, [pc, #144]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d017      	beq.n	8007f0e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007ede:	4b21      	ldr	r3, [pc, #132]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee2:	0c1b      	lsrs	r3, r3, #16
 8007ee4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ee8:	ee07 3a90 	vmov	s15, r3
 8007eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007ef0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ef4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007ef8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f04:	ee17 2a90 	vmov	r2, s15
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	605a      	str	r2, [r3, #4]
 8007f0c:	e002      	b.n	8007f14 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007f14:	4b13      	ldr	r3, [pc, #76]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d017      	beq.n	8007f50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007f20:	4b10      	ldr	r3, [pc, #64]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f24:	0e1b      	lsrs	r3, r3, #24
 8007f26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f2a:	ee07 3a90 	vmov	s15, r3
 8007f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8007f32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f36:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f46:	ee17 2a90 	vmov	r2, s15
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f4e:	e002      	b.n	8007f56 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	609a      	str	r2, [r3, #8]
}
 8007f56:	bf00      	nop
 8007f58:	3724      	adds	r7, #36	@ 0x24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	46020c00 	.word	0x46020c00
 8007f68:	4b742400 	.word	0x4b742400
 8007f6c:	46000000 	.word	0x46000000
 8007f70:	0800f230 	.word	0x0800f230

08007f74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b089      	sub	sp, #36	@ 0x24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007f7c:	4ba6      	ldr	r3, [pc, #664]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f84:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007f86:	4ba4      	ldr	r3, [pc, #656]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007f90:	4ba1      	ldr	r3, [pc, #644]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f94:	0a1b      	lsrs	r3, r3, #8
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007f9e:	4b9e      	ldr	r3, [pc, #632]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa2:	091b      	lsrs	r3, r3, #4
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007faa:	4b9b      	ldr	r3, [pc, #620]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fae:	08db      	lsrs	r3, r3, #3
 8007fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	fb02 f303 	mul.w	r3, r2, r3
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b03      	cmp	r3, #3
 8007fca:	d062      	beq.n	8008092 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	f200 8081 	bhi.w	80080d6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d024      	beq.n	8008024 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d17a      	bne.n	80080d6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fea:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800821c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff2:	4b89      	ldr	r3, [pc, #548]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffa:	ee07 3a90 	vmov	s15, r3
 8007ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008002:	ed97 6a02 	vldr	s12, [r7, #8]
 8008006:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800800a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800800e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008016:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800801a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008022:	e08f      	b.n	8008144 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008024:	4b7c      	ldr	r3, [pc, #496]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008030:	4b79      	ldr	r3, [pc, #484]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	0f1b      	lsrs	r3, r3, #28
 8008036:	f003 030f 	and.w	r3, r3, #15
 800803a:	e006      	b.n	800804a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800803c:	4b76      	ldr	r3, [pc, #472]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800803e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008042:	041b      	lsls	r3, r3, #16
 8008044:	0f1b      	lsrs	r3, r3, #28
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	4a76      	ldr	r2, [pc, #472]	@ (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800804c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	ee07 3a90 	vmov	s15, r3
 800806c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008070:	ed97 6a02 	vldr	s12, [r7, #8]
 8008074:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800807c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008080:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008084:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008090:	e058      	b.n	8008144 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	ee07 3a90 	vmov	s15, r3
 8008098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800821c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80080a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a4:	4b5c      	ldr	r3, [pc, #368]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80080a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ac:	ee07 3a90 	vmov	s15, r3
 80080b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80080b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80080b8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80080bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80080c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80080c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80080cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080d4:	e036      	b.n	8008144 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80080d6:	4b50      	ldr	r3, [pc, #320]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80080e2:	4b4d      	ldr	r3, [pc, #308]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	0f1b      	lsrs	r3, r3, #28
 80080e8:	f003 030f 	and.w	r3, r3, #15
 80080ec:	e006      	b.n	80080fc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80080ee:	4b4a      	ldr	r3, [pc, #296]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80080f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080f4:	041b      	lsls	r3, r3, #16
 80080f6:	0f1b      	lsrs	r3, r3, #28
 80080f8:	f003 030f 	and.w	r3, r3, #15
 80080fc:	4a49      	ldr	r2, [pc, #292]	@ (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80080fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008102:	ee07 3a90 	vmov	s15, r3
 8008106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	ee07 3a90 	vmov	s15, r3
 8008110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008122:	ed97 6a02 	vldr	s12, [r7, #8]
 8008126:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800812a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008136:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800813a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008142:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008144:	4b34      	ldr	r3, [pc, #208]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d017      	beq.n	8008180 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008150:	4b31      	ldr	r3, [pc, #196]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008154:	0a5b      	lsrs	r3, r3, #9
 8008156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008166:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800816a:	edd7 6a07 	vldr	s13, [r7, #28]
 800816e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008176:	ee17 2a90 	vmov	r2, s15
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	e002      	b.n	8008186 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008186:	4b24      	ldr	r3, [pc, #144]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d017      	beq.n	80081c2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008192:	4b21      	ldr	r3, [pc, #132]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008196:	0c1b      	lsrs	r3, r3, #16
 8008198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800819c:	ee07 3a90 	vmov	s15, r3
 80081a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80081a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081a8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80081ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80081b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081b8:	ee17 2a90 	vmov	r2, s15
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	e002      	b.n	80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80081c8:	4b13      	ldr	r3, [pc, #76]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d017      	beq.n	8008204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80081d4:	4b10      	ldr	r3, [pc, #64]	@ (8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d8:	0e1b      	lsrs	r3, r3, #24
 80081da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80081e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80081ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80081f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081fa:	ee17 2a90 	vmov	r2, s15
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008202:	e002      	b.n	800820a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	609a      	str	r2, [r3, #8]
}
 800820a:	bf00      	nop
 800820c:	3724      	adds	r7, #36	@ 0x24
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	46020c00 	.word	0x46020c00
 800821c:	4b742400 	.word	0x4b742400
 8008220:	46000000 	.word	0x46000000
 8008224:	0800f230 	.word	0x0800f230

08008228 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008228:	b480      	push	{r7}
 800822a:	b089      	sub	sp, #36	@ 0x24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008230:	4ba6      	ldr	r3, [pc, #664]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008238:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800823a:	4ba4      	ldr	r3, [pc, #656]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823e:	f003 0303 	and.w	r3, r3, #3
 8008242:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008244:	4ba1      	ldr	r3, [pc, #644]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008248:	0a1b      	lsrs	r3, r3, #8
 800824a:	f003 030f 	and.w	r3, r3, #15
 800824e:	3301      	adds	r3, #1
 8008250:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008252:	4b9e      	ldr	r3, [pc, #632]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008256:	091b      	lsrs	r3, r3, #4
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800825e:	4b9b      	ldr	r3, [pc, #620]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008262:	08db      	lsrs	r3, r3, #3
 8008264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	fb02 f303 	mul.w	r3, r2, r3
 800826e:	ee07 3a90 	vmov	s15, r3
 8008272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008276:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2b03      	cmp	r3, #3
 800827e:	d062      	beq.n	8008346 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2b03      	cmp	r3, #3
 8008284:	f200 8081 	bhi.w	800838a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d024      	beq.n	80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d17a      	bne.n	800838a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80084d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80082a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a6:	4b89      	ldr	r3, [pc, #548]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ae:	ee07 3a90 	vmov	s15, r3
 80082b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80082b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80082ba:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80082be:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80082c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80082c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80082ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80082d6:	e08f      	b.n	80083f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80082d8:	4b7c      	ldr	r3, [pc, #496]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80082e4:	4b79      	ldr	r3, [pc, #484]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	0f1b      	lsrs	r3, r3, #28
 80082ea:	f003 030f 	and.w	r3, r3, #15
 80082ee:	e006      	b.n	80082fe <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80082f0:	4b76      	ldr	r3, [pc, #472]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	0f1b      	lsrs	r3, r3, #28
 80082fa:	f003 030f 	and.w	r3, r3, #15
 80082fe:	4a76      	ldr	r2, [pc, #472]	@ (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008304:	ee07 3a90 	vmov	s15, r3
 8008308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	ee07 3a90 	vmov	s15, r3
 8008320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008324:	ed97 6a02 	vldr	s12, [r7, #8]
 8008328:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800832c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008334:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008338:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800833c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008340:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008344:	e058      	b.n	80083f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	ee07 3a90 	vmov	s15, r3
 800834c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008350:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80084d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008358:	4b5c      	ldr	r3, [pc, #368]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800835a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800835c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008360:	ee07 3a90 	vmov	s15, r3
 8008364:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008368:	ed97 6a02 	vldr	s12, [r7, #8]
 800836c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008370:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008374:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008378:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800837c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008384:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008388:	e036      	b.n	80083f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800838a:	4b50      	ldr	r3, [pc, #320]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d005      	beq.n	80083a2 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008396:	4b4d      	ldr	r3, [pc, #308]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	0f1b      	lsrs	r3, r3, #28
 800839c:	f003 030f 	and.w	r3, r3, #15
 80083a0:	e006      	b.n	80083b0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80083a2:	4b4a      	ldr	r3, [pc, #296]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80083a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80083a8:	041b      	lsls	r3, r3, #16
 80083aa:	0f1b      	lsrs	r3, r3, #28
 80083ac:	f003 030f 	and.w	r3, r3, #15
 80083b0:	4a49      	ldr	r2, [pc, #292]	@ (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80083b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	ee07 3a90 	vmov	s15, r3
 80083c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80083da:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80083de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80083ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083f6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80083f8:	4b34      	ldr	r3, [pc, #208]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80083fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d017      	beq.n	8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008404:	4b31      	ldr	r3, [pc, #196]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008408:	0a5b      	lsrs	r3, r3, #9
 800840a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008416:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800841a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800841e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800842a:	ee17 2a90 	vmov	r2, s15
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	e002      	b.n	800843a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800843a:	4b24      	ldr	r3, [pc, #144]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800843c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800843e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d017      	beq.n	8008476 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008446:	4b21      	ldr	r3, [pc, #132]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844a:	0c1b      	lsrs	r3, r3, #16
 800844c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008450:	ee07 3a90 	vmov	s15, r3
 8008454:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008458:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800845c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008460:	edd7 6a07 	vldr	s13, [r7, #28]
 8008464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800846c:	ee17 2a90 	vmov	r2, s15
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	605a      	str	r2, [r3, #4]
 8008474:	e002      	b.n	800847c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800847c:	4b13      	ldr	r3, [pc, #76]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800847e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008480:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d017      	beq.n	80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008488:	4b10      	ldr	r3, [pc, #64]	@ (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800848a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800848c:	0e1b      	lsrs	r3, r3, #24
 800848e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800849a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800849e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80084a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ae:	ee17 2a90 	vmov	r2, s15
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80084b6:	e002      	b.n	80084be <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	609a      	str	r2, [r3, #8]
}
 80084be:	bf00      	nop
 80084c0:	3724      	adds	r7, #36	@ 0x24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	46020c00 	.word	0x46020c00
 80084d0:	4b742400 	.word	0x4b742400
 80084d4:	46000000 	.word	0x46000000
 80084d8:	0800f230 	.word	0x0800f230

080084dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08e      	sub	sp, #56	@ 0x38
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80084e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ea:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80084ee:	430b      	orrs	r3, r1
 80084f0:	d145      	bne.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80084f2:	4ba7      	ldr	r3, [pc, #668]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084fc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80084fe:	4ba4      	ldr	r3, [pc, #656]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008504:	f003 0302 	and.w	r3, r3, #2
 8008508:	2b02      	cmp	r3, #2
 800850a:	d108      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800850c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008512:	d104      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008514:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008518:	637b      	str	r3, [r7, #52]	@ 0x34
 800851a:	f001 bb31 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800851e:	4b9c      	ldr	r3, [pc, #624]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008528:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800852c:	d114      	bne.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008534:	d110      	bne.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008536:	4b96      	ldr	r3, [pc, #600]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800853c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008544:	d103      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008546:	23fa      	movs	r3, #250	@ 0xfa
 8008548:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800854a:	f001 bb19 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800854e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008552:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008554:	f001 bb14 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008558:	4b8d      	ldr	r3, [pc, #564]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008560:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008564:	d107      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008568:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800856c:	d103      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800856e:	4b89      	ldr	r3, [pc, #548]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008570:	637b      	str	r3, [r7, #52]	@ 0x34
 8008572:	f001 bb05 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	637b      	str	r3, [r7, #52]	@ 0x34
 800857a:	f001 bb01 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800857e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008582:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008586:	430b      	orrs	r3, r1
 8008588:	d151      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800858a:	4b81      	ldr	r3, [pc, #516]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800858c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008590:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008594:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008598:	2b80      	cmp	r3, #128	@ 0x80
 800859a:	d035      	beq.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800859c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859e:	2b80      	cmp	r3, #128	@ 0x80
 80085a0:	d841      	bhi.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	2b60      	cmp	r3, #96	@ 0x60
 80085a6:	d02a      	beq.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80085a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085aa:	2b60      	cmp	r3, #96	@ 0x60
 80085ac:	d83b      	bhi.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	2b40      	cmp	r3, #64	@ 0x40
 80085b2:	d009      	beq.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	2b40      	cmp	r3, #64	@ 0x40
 80085b8:	d835      	bhi.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80085ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00c      	beq.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80085c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c2:	2b20      	cmp	r3, #32
 80085c4:	d012      	beq.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80085c6:	e02e      	b.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7ff fb77 	bl	8007cc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80085d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085d6:	f001 bad3 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085da:	f107 0318 	add.w	r3, r7, #24
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff fcc8 	bl	8007f74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085e8:	f001 baca 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ec:	f107 030c 	add.w	r3, r7, #12
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7ff fe19 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085fa:	f001 bac1 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80085fe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008602:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008604:	f001 babc 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008608:	4b61      	ldr	r3, [pc, #388]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008614:	d103      	bne.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008616:	4b60      	ldr	r3, [pc, #384]	@ (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008618:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800861a:	f001 bab1 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008622:	f001 baad 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800862a:	f001 baa9 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800862e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008632:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008636:	430b      	orrs	r3, r1
 8008638:	d158      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800863a:	4b55      	ldr	r3, [pc, #340]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800863c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008640:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008644:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800864c:	d03b      	beq.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008654:	d846      	bhi.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800865c:	d02e      	beq.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800865e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008660:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008664:	d83e      	bhi.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800866c:	d00b      	beq.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008674:	d836      	bhi.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00d      	beq.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008682:	d012      	beq.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008684:	e02e      	b.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fb18 	bl	8007cc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008692:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008694:	f001 ba74 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008698:	f107 0318 	add.w	r3, r7, #24
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff fc69 	bl	8007f74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086a6:	f001 ba6b 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086aa:	f107 030c 	add.w	r3, r7, #12
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7ff fdba 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086b8:	f001 ba62 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80086bc:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80086c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086c2:	f001 ba5d 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086c6:	4b32      	ldr	r3, [pc, #200]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086d2:	d103      	bne.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80086d4:	4b30      	ldr	r3, [pc, #192]	@ (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086d8:	f001 ba52 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086e0:	f001 ba4e 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 80086e4:	2300      	movs	r3, #0
 80086e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086e8:	f001 ba4a 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80086ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086f0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80086f4:	430b      	orrs	r3, r1
 80086f6:	d126      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80086f8:	4b25      	ldr	r3, [pc, #148]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80086fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008702:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008704:	4b22      	ldr	r3, [pc, #136]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800870c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008710:	d106      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008714:	2b00      	cmp	r3, #0
 8008716:	d103      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8008718:	4b1f      	ldr	r3, [pc, #124]	@ (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800871a:	637b      	str	r3, [r7, #52]	@ 0x34
 800871c:	f001 ba30 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008720:	4b1b      	ldr	r3, [pc, #108]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800872c:	d107      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008734:	d103      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8008736:	4b19      	ldr	r3, [pc, #100]	@ (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008738:	637b      	str	r3, [r7, #52]	@ 0x34
 800873a:	f001 ba21 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	637b      	str	r3, [r7, #52]	@ 0x34
 8008742:	f001 ba1d 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800874a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800874e:	430b      	orrs	r3, r1
 8008750:	d16e      	bne.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008752:	4b0f      	ldr	r3, [pc, #60]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008758:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800875c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800875e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008760:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008764:	d03d      	beq.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008768:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800876c:	d85c      	bhi.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008774:	d014      	beq.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800877c:	d854      	bhi.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01f      	beq.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008786:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800878a:	d012      	beq.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800878c:	e04c      	b.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800878e:	bf00      	nop
 8008790:	46020c00 	.word	0x46020c00
 8008794:	0007a120 	.word	0x0007a120
 8008798:	00f42400 	.word	0x00f42400
 800879c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff fa8b 	bl	8007cc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80087aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087ae:	f001 b9e7 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087b2:	f107 0318 	add.w	r3, r7, #24
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff fbdc 	bl	8007f74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087c0:	f001 b9de 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80087c4:	4ba7      	ldr	r3, [pc, #668]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087d0:	d103      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80087d2:	4ba5      	ldr	r3, [pc, #660]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087d6:	f001 b9d3 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80087da:	2300      	movs	r3, #0
 80087dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087de:	f001 b9cf 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80087e2:	4ba0      	ldr	r3, [pc, #640]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b20      	cmp	r3, #32
 80087ec:	d118      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80087ee:	4b9d      	ldr	r3, [pc, #628]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80087fa:	4b9a      	ldr	r3, [pc, #616]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	0e1b      	lsrs	r3, r3, #24
 8008800:	f003 030f 	and.w	r3, r3, #15
 8008804:	e006      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008806:	4b97      	ldr	r3, [pc, #604]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800880c:	041b      	lsls	r3, r3, #16
 800880e:	0e1b      	lsrs	r3, r3, #24
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	4a95      	ldr	r2, [pc, #596]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800881a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800881c:	f001 b9b0 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008824:	f001 b9ac 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8008828:	2300      	movs	r3, #0
 800882a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800882c:	f001 b9a8 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008834:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008838:	430b      	orrs	r3, r1
 800883a:	d17f      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800883c:	4b89      	ldr	r3, [pc, #548]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800883e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008846:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	2b00      	cmp	r3, #0
 800884c:	d165      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800884e:	4b85      	ldr	r3, [pc, #532]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008854:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008858:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800885a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008860:	d034      	beq.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8008862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008864:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008868:	d853      	bhi.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008870:	d00b      	beq.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008878:	d84b      	bhi.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	2b00      	cmp	r3, #0
 800887e:	d016      	beq.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008882:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008886:	d009      	beq.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008888:	e043      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800888a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800888e:	4618      	mov	r0, r3
 8008890:	f7ff fa16 	bl	8007cc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008896:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008898:	f001 b972 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800889c:	f107 0318 	add.w	r3, r7, #24
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff fb67 	bl	8007f74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80088aa:	f001 b969 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80088ae:	4b6d      	ldr	r3, [pc, #436]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ba:	d103      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80088bc:	4b6a      	ldr	r3, [pc, #424]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80088be:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80088c0:	f001 b95e 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80088c8:	f001 b95a 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80088cc:	4b65      	ldr	r3, [pc, #404]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0320 	and.w	r3, r3, #32
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	d118      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088d8:	4b62      	ldr	r3, [pc, #392]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d005      	beq.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80088e4:	4b5f      	ldr	r3, [pc, #380]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	0e1b      	lsrs	r3, r3, #24
 80088ea:	f003 030f 	and.w	r3, r3, #15
 80088ee:	e006      	b.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80088f0:	4b5c      	ldr	r3, [pc, #368]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	0e1b      	lsrs	r3, r3, #24
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	4a5b      	ldr	r2, [pc, #364]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008904:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008906:	f001 b93b 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800890e:	f001 b937 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008916:	f001 b933 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008920:	d108      	bne.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff f9ca 	bl	8007cc0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800892c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008930:	f001 b926 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8008934:	2300      	movs	r3, #0
 8008936:	637b      	str	r3, [r7, #52]	@ 0x34
 8008938:	f001 b922 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800893c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008940:	1e51      	subs	r1, r2, #1
 8008942:	430b      	orrs	r3, r1
 8008944:	d136      	bne.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008946:	4b47      	ldr	r3, [pc, #284]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800894c:	f003 0303 	and.w	r3, r3, #3
 8008950:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008954:	2b00      	cmp	r3, #0
 8008956:	d104      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008958:	f7fe fa48 	bl	8006dec <HAL_RCC_GetPCLK2Freq>
 800895c:	6378      	str	r0, [r7, #52]	@ 0x34
 800895e:	f001 b90f 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008964:	2b01      	cmp	r3, #1
 8008966:	d104      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008968:	f7fe f910 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 800896c:	6378      	str	r0, [r7, #52]	@ 0x34
 800896e:	f001 b907 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008972:	4b3c      	ldr	r3, [pc, #240]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800897a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800897e:	d106      	bne.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008982:	2b02      	cmp	r3, #2
 8008984:	d103      	bne.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8008986:	4b3a      	ldr	r3, [pc, #232]	@ (8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008988:	637b      	str	r3, [r7, #52]	@ 0x34
 800898a:	f001 b8f9 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800898e:	4b35      	ldr	r3, [pc, #212]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008994:	f003 0302 	and.w	r3, r3, #2
 8008998:	2b02      	cmp	r3, #2
 800899a:	d107      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800899c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d104      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80089a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80089a8:	f001 b8ea 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b0:	f001 b8e6 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80089b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b8:	1e91      	subs	r1, r2, #2
 80089ba:	430b      	orrs	r3, r1
 80089bc:	d136      	bne.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80089be:	4b29      	ldr	r3, [pc, #164]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80089c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089c4:	f003 030c 	and.w	r3, r3, #12
 80089c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d104      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80089d0:	f7fe f9f8 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 80089d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80089d6:	f001 b8d3 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80089da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d104      	bne.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80089e0:	f7fe f8d4 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 80089e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80089e6:	f001 b8cb 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80089ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089f6:	d106      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80089f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fa:	2b08      	cmp	r3, #8
 80089fc:	d103      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80089fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a02:	f001 b8bd 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008a06:	4b17      	ldr	r3, [pc, #92]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d107      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	2b0c      	cmp	r3, #12
 8008a18:	d104      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8008a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a20:	f001 b8ae 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a28:	f001 b8aa 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a30:	1f11      	subs	r1, r2, #4
 8008a32:	430b      	orrs	r3, r1
 8008a34:	d13f      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008a36:	4b0b      	ldr	r3, [pc, #44]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008a40:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d104      	bne.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008a48:	f7fe f9bc 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 8008a4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a4e:	f001 b897 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a54:	2b10      	cmp	r3, #16
 8008a56:	d10d      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008a58:	f7fe f898 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8008a5c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a5e:	f001 b88f 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8008a62:	bf00      	nop
 8008a64:	46020c00 	.word	0x46020c00
 8008a68:	02dc6c00 	.word	0x02dc6c00
 8008a6c:	0800f230 	.word	0x0800f230
 8008a70:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008a74:	4ba8      	ldr	r3, [pc, #672]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a80:	d106      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	2b20      	cmp	r3, #32
 8008a86:	d103      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8008a88:	4ba4      	ldr	r3, [pc, #656]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a8c:	f001 b878 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008a90:	4ba1      	ldr	r3, [pc, #644]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d107      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	2b30      	cmp	r3, #48	@ 0x30
 8008aa2:	d104      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8008aa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aaa:	f001 b869 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab2:	f001 b865 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aba:	f1a2 0108 	sub.w	r1, r2, #8
 8008abe:	430b      	orrs	r3, r1
 8008ac0:	d136      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008ac2:	4b95      	ldr	r3, [pc, #596]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ac8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008acc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d104      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008ad4:	f7fe f976 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 8008ad8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ada:	f001 b851 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae0:	2b40      	cmp	r3, #64	@ 0x40
 8008ae2:	d104      	bne.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ae4:	f7fe f852 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8008ae8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008aea:	f001 b849 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008aee:	4b8a      	ldr	r3, [pc, #552]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008afa:	d106      	bne.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	2b80      	cmp	r3, #128	@ 0x80
 8008b00:	d103      	bne.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8008b02:	4b86      	ldr	r3, [pc, #536]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b06:	f001 b83b 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008b0a:	4b83      	ldr	r3, [pc, #524]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d107      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b1c:	d104      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8008b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b24:	f001 b82c 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b2c:	f001 b828 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b34:	f1a2 0110 	sub.w	r1, r2, #16
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	d139      	bne.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008b3c:	4b76      	ldr	r3, [pc, #472]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b46:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d104      	bne.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008b4e:	f7fe f939 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 8008b52:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b54:	f001 b814 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b5e:	d104      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008b60:	f7fe f814 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8008b64:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b66:	f001 b80b 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008b6a:	4b6b      	ldr	r3, [pc, #428]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b76:	d107      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8008b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b7e:	d103      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8008b80:	4b66      	ldr	r3, [pc, #408]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b84:	f000 bffc 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008b88:	4b63      	ldr	r3, [pc, #396]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d108      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b9c:	d104      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ba4:	f000 bfec 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bac:	f000 bfe8 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8008bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bb4:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8008bb8:	430b      	orrs	r3, r1
 8008bba:	d139      	bne.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008bbc:	4b56      	ldr	r3, [pc, #344]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008bbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008bc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008bc6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d104      	bne.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008bce:	f7fe f8f9 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 8008bd2:	6378      	str	r0, [r7, #52]	@ 0x34
 8008bd4:	f000 bfd4 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bde:	d104      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008be0:	f7fd ffd4 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8008be4:	6378      	str	r0, [r7, #52]	@ 0x34
 8008be6:	f000 bfcb 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008bea:	4b4b      	ldr	r3, [pc, #300]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bf6:	d107      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bfe:	d103      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8008c00:	4b46      	ldr	r3, [pc, #280]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c04:	f000 bfbc 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008c08:	4b43      	ldr	r3, [pc, #268]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d108      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c1c:	d104      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8008c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c24:	f000 bfac 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c2c:	f000 bfa8 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c34:	f1a2 0120 	sub.w	r1, r2, #32
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	d158      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008c3c:	4b36      	ldr	r3, [pc, #216]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c42:	f003 0307 	and.w	r3, r3, #7
 8008c46:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d104      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008c4e:	f7fe f8e1 	bl	8006e14 <HAL_RCC_GetPCLK3Freq>
 8008c52:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c54:	f000 bf94 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d104      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c5e:	f7fd ff95 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8008c62:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c64:	f000 bf8c 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008c68:	4b2b      	ldr	r3, [pc, #172]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c74:	d106      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8008c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d103      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8008c7c:	4b27      	ldr	r3, [pc, #156]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c80:	f000 bf7e 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008c84:	4b24      	ldr	r3, [pc, #144]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c8a:	f003 0302 	and.w	r3, r3, #2
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d107      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8008c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d104      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8008c98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c9e:	f000 bf6f 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0320 	and.w	r3, r3, #32
 8008caa:	2b20      	cmp	r3, #32
 8008cac:	d11b      	bne.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d118      	bne.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008cb4:	4b18      	ldr	r3, [pc, #96]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d005      	beq.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8008cc0:	4b15      	ldr	r3, [pc, #84]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	0e1b      	lsrs	r3, r3, #24
 8008cc6:	f003 030f 	and.w	r3, r3, #15
 8008cca:	e006      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8008ccc:	4b12      	ldr	r3, [pc, #72]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008cd2:	041b      	lsls	r3, r3, #16
 8008cd4:	0e1b      	lsrs	r3, r3, #24
 8008cd6:	f003 030f 	and.w	r3, r3, #15
 8008cda:	4a11      	ldr	r2, [pc, #68]	@ (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ce2:	f000 bf4d 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cea:	f000 bf49 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf2:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	d172      	bne.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008cfa:	4b07      	ldr	r3, [pc, #28]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d00:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008d04:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d0c:	d10a      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008d0e:	f7fd ff3d 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8008d12:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d14:	f000 bf34 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8008d18:	46020c00 	.word	0x46020c00
 8008d1c:	00f42400 	.word	0x00f42400
 8008d20:	0800f230 	.word	0x0800f230
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d2a:	d108      	bne.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d2c:	f107 0318 	add.w	r3, r7, #24
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff f91f 	bl	8007f74 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008d36:	6a3b      	ldr	r3, [r7, #32]
 8008d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d3a:	f000 bf21 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d104      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008d44:	f7fe f824 	bl	8006d90 <HAL_RCC_GetHCLKFreq>
 8008d48:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d4a:	f000 bf19 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008d54:	d122      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008d56:	4bb0      	ldr	r3, [pc, #704]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0320 	and.w	r3, r3, #32
 8008d5e:	2b20      	cmp	r3, #32
 8008d60:	d118      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d62:	4bad      	ldr	r3, [pc, #692]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d005      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8008d6e:	4baa      	ldr	r3, [pc, #680]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	0e1b      	lsrs	r3, r3, #24
 8008d74:	f003 030f 	and.w	r3, r3, #15
 8008d78:	e006      	b.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8008d7a:	4ba7      	ldr	r3, [pc, #668]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d80:	041b      	lsls	r3, r3, #16
 8008d82:	0e1b      	lsrs	r3, r3, #24
 8008d84:	f003 030f 	and.w	r3, r3, #15
 8008d88:	4aa4      	ldr	r2, [pc, #656]	@ (800901c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d90:	f000 bef6 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8008d94:	2300      	movs	r3, #0
 8008d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d98:	f000 bef2 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008d9c:	4b9e      	ldr	r3, [pc, #632]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008da8:	d107      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008db0:	d103      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8008db2:	4b9b      	ldr	r3, [pc, #620]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008db6:	f000 bee3 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008dba:	4b97      	ldr	r3, [pc, #604]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dc6:	d107      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dce:	d103      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8008dd0:	4b93      	ldr	r3, [pc, #588]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dd4:	f000 bed4 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ddc:	f000 bed0 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008de8:	430b      	orrs	r3, r1
 8008dea:	d158      	bne.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008dec:	4b8a      	ldr	r3, [pc, #552]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008dee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d84b      	bhi.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8008dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8008e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e04:	08008e3d 	.word	0x08008e3d
 8008e08:	08008e19 	.word	0x08008e19
 8008e0c:	08008e2b 	.word	0x08008e2b
 8008e10:	08008e47 	.word	0x08008e47
 8008e14:	08008e51 	.word	0x08008e51
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe ff4f 	bl	8007cc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e26:	f000 beab 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e2a:	f107 030c 	add.w	r3, r7, #12
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff f9fa 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e38:	f000 bea2 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008e3c:	f7fd ffa8 	bl	8006d90 <HAL_RCC_GetHCLKFreq>
 8008e40:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008e42:	f000 be9d 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008e46:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008e4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e4c:	f000 be98 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008e50:	4b71      	ldr	r3, [pc, #452]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0320 	and.w	r3, r3, #32
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	d118      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008e5c:	4b6e      	ldr	r3, [pc, #440]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d005      	beq.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8008e68:	4b6b      	ldr	r3, [pc, #428]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	0e1b      	lsrs	r3, r3, #24
 8008e6e:	f003 030f 	and.w	r3, r3, #15
 8008e72:	e006      	b.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8008e74:	4b68      	ldr	r3, [pc, #416]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e7a:	041b      	lsls	r3, r3, #16
 8008e7c:	0e1b      	lsrs	r3, r3, #24
 8008e7e:	f003 030f 	and.w	r3, r3, #15
 8008e82:	4a66      	ldr	r2, [pc, #408]	@ (800901c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e88:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008e8a:	f000 be79 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e92:	f000 be75 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e9a:	f000 be71 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ea2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008ea6:	430b      	orrs	r3, r1
 8008ea8:	d167      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8008eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008eb0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008eb4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ebc:	d036      	beq.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ec4:	d855      	bhi.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ecc:	d029      	beq.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ed4:	d84d      	bhi.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008edc:	d013      	beq.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ee4:	d845      	bhi.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d015      	beq.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8008eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ef2:	d13e      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe fee1 	bl	8007cc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f02:	f000 be3d 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f06:	f107 030c 	add.w	r3, r7, #12
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff f98c 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f14:	f000 be34 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008f18:	f7fd ff3a 	bl	8006d90 <HAL_RCC_GetHCLKFreq>
 8008f1c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008f1e:	f000 be2f 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008f22:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008f26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f28:	f000 be2a 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d118      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008f38:	4b37      	ldr	r3, [pc, #220]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d005      	beq.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8008f44:	4b34      	ldr	r3, [pc, #208]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	0e1b      	lsrs	r3, r3, #24
 8008f4a:	f003 030f 	and.w	r3, r3, #15
 8008f4e:	e006      	b.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008f50:	4b31      	ldr	r3, [pc, #196]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f56:	041b      	lsls	r3, r3, #16
 8008f58:	0e1b      	lsrs	r3, r3, #24
 8008f5a:	f003 030f 	and.w	r3, r3, #15
 8008f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800901c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f64:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f66:	f000 be0b 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f6e:	f000 be07 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f76:	f000 be03 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8008f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f7e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008f82:	430b      	orrs	r3, r1
 8008f84:	d152      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008f86:	4b24      	ldr	r3, [pc, #144]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f90:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008f98:	f7fd ff14 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 8008f9c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f9e:	f000 bdef 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fa8:	d104      	bne.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008faa:	f7fd fdef 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8008fae:	6378      	str	r0, [r7, #52]	@ 0x34
 8008fb0:	f000 bde6 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008fb4:	4b18      	ldr	r3, [pc, #96]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fc0:	d107      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fc8:	d103      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8008fca:	4b15      	ldr	r3, [pc, #84]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fce:	f000 bdd7 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008fd2:	4b11      	ldr	r3, [pc, #68]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0320 	and.w	r3, r3, #32
 8008fda:	2b20      	cmp	r3, #32
 8008fdc:	d122      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8008fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fe4:	d11e      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8008ff2:	4b09      	ldr	r3, [pc, #36]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	0e1b      	lsrs	r3, r3, #24
 8008ff8:	f003 030f 	and.w	r3, r3, #15
 8008ffc:	e006      	b.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8008ffe:	4b06      	ldr	r3, [pc, #24]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009004:	041b      	lsls	r3, r3, #16
 8009006:	0e1b      	lsrs	r3, r3, #24
 8009008:	f003 030f 	and.w	r3, r3, #15
 800900c:	4a03      	ldr	r2, [pc, #12]	@ (800901c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800900e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009012:	637b      	str	r3, [r7, #52]	@ 0x34
 8009014:	f000 bdb4 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8009018:	46020c00 	.word	0x46020c00
 800901c:	0800f230 	.word	0x0800f230
 8009020:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009024:	2300      	movs	r3, #0
 8009026:	637b      	str	r3, [r7, #52]	@ 0x34
 8009028:	f000 bdaa 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800902c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009030:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009034:	430b      	orrs	r3, r1
 8009036:	d14c      	bne.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009038:	4ba8      	ldr	r3, [pc, #672]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800903a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800903e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009042:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800904a:	f7fd febb 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 800904e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009050:	f000 bd96 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800905a:	d104      	bne.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800905c:	f7fd fd96 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8009060:	6378      	str	r0, [r7, #52]	@ 0x34
 8009062:	f000 bd8d 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009066:	4b9d      	ldr	r3, [pc, #628]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800906e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009072:	d107      	bne.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8009074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800907a:	d103      	bne.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800907c:	4b98      	ldr	r3, [pc, #608]	@ (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800907e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009080:	f000 bd7e 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009084:	4b95      	ldr	r3, [pc, #596]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0320 	and.w	r3, r3, #32
 800908c:	2b20      	cmp	r3, #32
 800908e:	d11c      	bne.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8009090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009092:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009096:	d118      	bne.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009098:	4b90      	ldr	r3, [pc, #576]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80090a4:	4b8d      	ldr	r3, [pc, #564]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	0e1b      	lsrs	r3, r3, #24
 80090aa:	f003 030f 	and.w	r3, r3, #15
 80090ae:	e006      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 80090b0:	4b8a      	ldr	r3, [pc, #552]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80090b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80090b6:	041b      	lsls	r3, r3, #16
 80090b8:	0e1b      	lsrs	r3, r3, #24
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	4a89      	ldr	r2, [pc, #548]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80090c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090c6:	f000 bd5b 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ce:	f000 bd57 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80090d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80090da:	430b      	orrs	r3, r1
 80090dc:	d158      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80090de:	4b7f      	ldr	r3, [pc, #508]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80090e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80090e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80090ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80090ee:	d028      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 80090f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80090f4:	d848      	bhi.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80090f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f8:	2b80      	cmp	r3, #128	@ 0x80
 80090fa:	d00e      	beq.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80090fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fe:	2b80      	cmp	r3, #128	@ 0x80
 8009100:	d842      	bhi.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8009108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910a:	2b40      	cmp	r3, #64	@ 0x40
 800910c:	d014      	beq.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800910e:	e03b      	b.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009110:	f7fd fe80 	bl	8006e14 <HAL_RCC_GetPCLK3Freq>
 8009114:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009116:	f000 bd33 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800911a:	4b70      	ldr	r3, [pc, #448]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009126:	d103      	bne.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8009128:	4b6d      	ldr	r3, [pc, #436]	@ (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800912a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800912c:	f000 bd28 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009134:	f000 bd24 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009138:	f7fd fd28 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 800913c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800913e:	f000 bd1f 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009142:	4b66      	ldr	r3, [pc, #408]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0320 	and.w	r3, r3, #32
 800914a:	2b20      	cmp	r3, #32
 800914c:	d118      	bne.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800914e:	4b63      	ldr	r3, [pc, #396]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800915a:	4b60      	ldr	r3, [pc, #384]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	0e1b      	lsrs	r3, r3, #24
 8009160:	f003 030f 	and.w	r3, r3, #15
 8009164:	e006      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8009166:	4b5d      	ldr	r3, [pc, #372]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800916c:	041b      	lsls	r3, r3, #16
 800916e:	0e1b      	lsrs	r3, r3, #24
 8009170:	f003 030f 	and.w	r3, r3, #15
 8009174:	4a5b      	ldr	r2, [pc, #364]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8009176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800917a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800917c:	f000 bd00 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009184:	f000 bcfc 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800918c:	f000 bcf8 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009194:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009198:	430b      	orrs	r3, r1
 800919a:	d14c      	bne.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800919c:	4b4f      	ldr	r3, [pc, #316]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800919e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80091a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80091a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d104      	bne.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80091ae:	f7fd fe09 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 80091b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80091b4:	f000 bce4 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80091b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091be:	d104      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80091c0:	f7fd fce4 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 80091c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80091c6:	f000 bcdb 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80091ca:	4b44      	ldr	r3, [pc, #272]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091d6:	d107      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 80091d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091de:	d103      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 80091e0:	4b3f      	ldr	r3, [pc, #252]	@ (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80091e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e4:	f000 bccc 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80091e8:	4b3c      	ldr	r3, [pc, #240]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0320 	and.w	r3, r3, #32
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	d11c      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80091f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80091fa:	d118      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80091fc:	4b37      	ldr	r3, [pc, #220]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d005      	beq.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8009208:	4b34      	ldr	r3, [pc, #208]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	0e1b      	lsrs	r3, r3, #24
 800920e:	f003 030f 	and.w	r3, r3, #15
 8009212:	e006      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8009214:	4b31      	ldr	r3, [pc, #196]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009216:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800921a:	041b      	lsls	r3, r3, #16
 800921c:	0e1b      	lsrs	r3, r3, #24
 800921e:	f003 030f 	and.w	r3, r3, #15
 8009222:	4a30      	ldr	r2, [pc, #192]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8009224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009228:	637b      	str	r3, [r7, #52]	@ 0x34
 800922a:	f000 bca9 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800922e:	2300      	movs	r3, #0
 8009230:	637b      	str	r3, [r7, #52]	@ 0x34
 8009232:	f000 bca5 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8009236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800923a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800923e:	430b      	orrs	r3, r1
 8009240:	d152      	bne.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8009242:	4b26      	ldr	r3, [pc, #152]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009244:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009248:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800924c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	2b00      	cmp	r3, #0
 8009252:	d104      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009254:	f7fd fdb6 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 8009258:	6378      	str	r0, [r7, #52]	@ 0x34
 800925a:	f000 bc91 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009264:	d104      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009266:	f7fd fc91 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 800926a:	6378      	str	r0, [r7, #52]	@ 0x34
 800926c:	f000 bc88 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8009270:	4b1a      	ldr	r3, [pc, #104]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800927c:	d107      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800927e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009280:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009284:	d103      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8009286:	4b16      	ldr	r3, [pc, #88]	@ (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009288:	637b      	str	r3, [r7, #52]	@ 0x34
 800928a:	f000 bc79 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800928e:	4b13      	ldr	r3, [pc, #76]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b20      	cmp	r3, #32
 8009298:	d11c      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800929a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80092a0:	d118      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80092a2:	4b0e      	ldr	r3, [pc, #56]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 80092ae:	4b0b      	ldr	r3, [pc, #44]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	0e1b      	lsrs	r3, r3, #24
 80092b4:	f003 030f 	and.w	r3, r3, #15
 80092b8:	e006      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 80092ba:	4b08      	ldr	r3, [pc, #32]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80092bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092c0:	041b      	lsls	r3, r3, #16
 80092c2:	0e1b      	lsrs	r3, r3, #24
 80092c4:	f003 030f 	and.w	r3, r3, #15
 80092c8:	4a06      	ldr	r2, [pc, #24]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80092ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d0:	f000 bc56 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d8:	f000 bc52 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80092dc:	46020c00 	.word	0x46020c00
 80092e0:	00f42400 	.word	0x00f42400
 80092e4:	0800f230 	.word	0x0800f230
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80092e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ec:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80092f0:	430b      	orrs	r3, r1
 80092f2:	d14a      	bne.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80092f4:	4ba5      	ldr	r3, [pc, #660]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80092f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092fa:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80092fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8009300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009302:	2b00      	cmp	r3, #0
 8009304:	d104      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009306:	f7fd fd5d 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 800930a:	6378      	str	r0, [r7, #52]	@ 0x34
 800930c:	f000 bc38 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8009310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009312:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009316:	d104      	bne.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009318:	f7fd fc38 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 800931c:	6378      	str	r0, [r7, #52]	@ 0x34
 800931e:	f000 bc2f 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8009322:	4b9a      	ldr	r3, [pc, #616]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800932a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800932e:	d107      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009336:	d103      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8009338:	4b95      	ldr	r3, [pc, #596]	@ (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800933a:	637b      	str	r3, [r7, #52]	@ 0x34
 800933c:	f000 bc20 	b.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8009340:	4b92      	ldr	r3, [pc, #584]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0320 	and.w	r3, r3, #32
 8009348:	2b20      	cmp	r3, #32
 800934a:	d11b      	bne.n	8009384 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 800934c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009352:	d117      	bne.n	8009384 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009354:	4b8d      	ldr	r3, [pc, #564]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d005      	beq.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8009360:	4b8a      	ldr	r3, [pc, #552]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	0e1b      	lsrs	r3, r3, #24
 8009366:	f003 030f 	and.w	r3, r3, #15
 800936a:	e006      	b.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800936c:	4b87      	ldr	r3, [pc, #540]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800936e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009372:	041b      	lsls	r3, r3, #16
 8009374:	0e1b      	lsrs	r3, r3, #24
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	4a86      	ldr	r2, [pc, #536]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800937c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009380:	637b      	str	r3, [r7, #52]	@ 0x34
 8009382:	e3fd      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	637b      	str	r3, [r7, #52]	@ 0x34
 8009388:	e3fa      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800938a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800938e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009392:	430b      	orrs	r3, r1
 8009394:	d164      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009396:	4b7d      	ldr	r3, [pc, #500]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800939c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d120      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80093a8:	4b78      	ldr	r3, [pc, #480]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0320 	and.w	r3, r3, #32
 80093b0:	2b20      	cmp	r3, #32
 80093b2:	d117      	bne.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80093b4:	4b75      	ldr	r3, [pc, #468]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 80093c0:	4b72      	ldr	r3, [pc, #456]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	0e1b      	lsrs	r3, r3, #24
 80093c6:	f003 030f 	and.w	r3, r3, #15
 80093ca:	e006      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 80093cc:	4b6f      	ldr	r3, [pc, #444]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80093ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093d2:	041b      	lsls	r3, r3, #16
 80093d4:	0e1b      	lsrs	r3, r3, #24
 80093d6:	f003 030f 	and.w	r3, r3, #15
 80093da:	4a6e      	ldr	r2, [pc, #440]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80093dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e2:	e3cd      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e8:	e3ca      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80093ea:	4b68      	ldr	r3, [pc, #416]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80093ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093f8:	d112      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 80093fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009400:	d10e      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009402:	4b62      	ldr	r3, [pc, #392]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800940c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009410:	d102      	bne.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 8009412:	23fa      	movs	r3, #250	@ 0xfa
 8009414:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009416:	e3b3      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8009418:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800941c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800941e:	e3af      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009420:	4b5a      	ldr	r3, [pc, #360]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800942c:	d106      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800942e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009434:	d102      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 8009436:	4b56      	ldr	r3, [pc, #344]	@ (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009438:	637b      	str	r3, [r7, #52]	@ 0x34
 800943a:	e3a1      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800943c:	4b53      	ldr	r3, [pc, #332]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800943e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009442:	f003 0302 	and.w	r3, r3, #2
 8009446:	2b02      	cmp	r3, #2
 8009448:	d107      	bne.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 800944a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009450:	d103      	bne.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 8009452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009456:	637b      	str	r3, [r7, #52]	@ 0x34
 8009458:	e392      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800945a:	2300      	movs	r3, #0
 800945c:	637b      	str	r3, [r7, #52]	@ 0x34
 800945e:	e38f      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009464:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009468:	430b      	orrs	r3, r1
 800946a:	d164      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800946c:	4b47      	ldr	r3, [pc, #284]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800946e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009472:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009476:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947a:	2b00      	cmp	r3, #0
 800947c:	d120      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800947e:	4b43      	ldr	r3, [pc, #268]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 0320 	and.w	r3, r3, #32
 8009486:	2b20      	cmp	r3, #32
 8009488:	d117      	bne.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800948a:	4b40      	ldr	r3, [pc, #256]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d005      	beq.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 8009496:	4b3d      	ldr	r3, [pc, #244]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	0e1b      	lsrs	r3, r3, #24
 800949c:	f003 030f 	and.w	r3, r3, #15
 80094a0:	e006      	b.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80094a2:	4b3a      	ldr	r3, [pc, #232]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80094a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80094a8:	041b      	lsls	r3, r3, #16
 80094aa:	0e1b      	lsrs	r3, r3, #24
 80094ac:	f003 030f 	and.w	r3, r3, #15
 80094b0:	4a38      	ldr	r2, [pc, #224]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80094b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b8:	e362      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094be:	e35f      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80094c0:	4b32      	ldr	r3, [pc, #200]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80094c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094ce:	d112      	bne.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 80094d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094d6:	d10e      	bne.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80094d8:	4b2c      	ldr	r3, [pc, #176]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80094da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094e6:	d102      	bne.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 80094e8:	23fa      	movs	r3, #250	@ 0xfa
 80094ea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80094ec:	e348      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80094ee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80094f2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80094f4:	e344      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80094f6:	4b25      	ldr	r3, [pc, #148]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009502:	d106      	bne.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8009504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009506:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800950a:	d102      	bne.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 800950c:	4b20      	ldr	r3, [pc, #128]	@ (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800950e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009510:	e336      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009512:	4b1e      	ldr	r3, [pc, #120]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009518:	f003 0302 	and.w	r3, r3, #2
 800951c:	2b02      	cmp	r3, #2
 800951e:	d107      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8009520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009522:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009526:	d103      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8009528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800952c:	637b      	str	r3, [r7, #52]	@ 0x34
 800952e:	e327      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009530:	2300      	movs	r3, #0
 8009532:	637b      	str	r3, [r7, #52]	@ 0x34
 8009534:	e324      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800953a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800953e:	430b      	orrs	r3, r1
 8009540:	d14e      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009542:	4b12      	ldr	r3, [pc, #72]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009548:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800954c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800954e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009550:	2b00      	cmp	r3, #0
 8009552:	d103      	bne.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009554:	f7fd fc36 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 8009558:	6378      	str	r0, [r7, #52]	@ 0x34
 800955a:	e311      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800955c:	4b0b      	ldr	r3, [pc, #44]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800955e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009562:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800956a:	d119      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800956c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009572:	d115      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009574:	4b05      	ldr	r3, [pc, #20]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800957a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800957e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009582:	d109      	bne.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 8009584:	23fa      	movs	r3, #250	@ 0xfa
 8009586:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009588:	e2fa      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800958a:	bf00      	nop
 800958c:	46020c00 	.word	0x46020c00
 8009590:	00f42400 	.word	0x00f42400
 8009594:	0800f230 	.word	0x0800f230
      }
      else
      {
        frequency = LSI_VALUE;
 8009598:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800959c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800959e:	e2ef      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80095a0:	4ba8      	ldr	r3, [pc, #672]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095ac:	d106      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80095b4:	d102      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 80095b6:	4ba4      	ldr	r3, [pc, #656]	@ (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80095b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ba:	e2e1      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80095bc:	4ba1      	ldr	r3, [pc, #644]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80095be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d107      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 80095ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80095d0:	d103      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 80095d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095d8:	e2d2      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80095de:	e2cf      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80095e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095e4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80095e8:	430b      	orrs	r3, r1
 80095ea:	d12d      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80095ec:	4b95      	ldr	r3, [pc, #596]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80095ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095f2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80095f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80095f8:	4b92      	ldr	r3, [pc, #584]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009604:	d105      	bne.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8009606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009608:	2b00      	cmp	r3, #0
 800960a:	d102      	bne.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 800960c:	4b8e      	ldr	r3, [pc, #568]	@ (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800960e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009610:	e2b6      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009618:	d107      	bne.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800961a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fb4e 	bl	8007cc0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009626:	637b      	str	r3, [r7, #52]	@ 0x34
 8009628:	e2aa      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800962a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009630:	d107      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009632:	f107 0318 	add.w	r3, r7, #24
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe fc9c 	bl	8007f74 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009640:	e29e      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	637b      	str	r3, [r7, #52]	@ 0x34
 8009646:	e29b      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800964c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009650:	430b      	orrs	r3, r1
 8009652:	d156      	bne.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009654:	4b7b      	ldr	r3, [pc, #492]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800965a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800965e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009662:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009666:	d028      	beq.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8009668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800966e:	d845      	bhi.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8009670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009676:	d013      	beq.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8009678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800967e:	d83d      	bhi.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8009680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009682:	2b00      	cmp	r3, #0
 8009684:	d004      	beq.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 8009686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009688:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800968c:	d004      	beq.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 800968e:	e035      	b.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009690:	f7fd fbac 	bl	8006dec <HAL_RCC_GetPCLK2Freq>
 8009694:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009696:	e273      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009698:	f7fd fa78 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 800969c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800969e:	e26f      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096a0:	4b68      	ldr	r3, [pc, #416]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096ac:	d102      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 80096ae:	4b66      	ldr	r3, [pc, #408]	@ (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80096b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80096b2:	e265      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096b8:	e262      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80096ba:	4b62      	ldr	r3, [pc, #392]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0320 	and.w	r3, r3, #32
 80096c2:	2b20      	cmp	r3, #32
 80096c4:	d117      	bne.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096c6:	4b5f      	ldr	r3, [pc, #380]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d005      	beq.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 80096d2:	4b5c      	ldr	r3, [pc, #368]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	0e1b      	lsrs	r3, r3, #24
 80096d8:	f003 030f 	and.w	r3, r3, #15
 80096dc:	e006      	b.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 80096de:	4b59      	ldr	r3, [pc, #356]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80096e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096e4:	041b      	lsls	r3, r3, #16
 80096e6:	0e1b      	lsrs	r3, r3, #24
 80096e8:	f003 030f 	and.w	r3, r3, #15
 80096ec:	4a57      	ldr	r2, [pc, #348]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80096ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80096f4:	e244      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096fa:	e241      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80096fc:	2300      	movs	r3, #0
 80096fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009700:	e23e      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009706:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800970a:	430b      	orrs	r3, r1
 800970c:	d156      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800970e:	4b4d      	ldr	r3, [pc, #308]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009718:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800971a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009720:	d028      	beq.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8009722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009724:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009728:	d845      	bhi.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009730:	d013      	beq.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8009732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009738:	d83d      	bhi.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800973a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973c:	2b00      	cmp	r3, #0
 800973e:	d004      	beq.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8009740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009746:	d004      	beq.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8009748:	e035      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800974a:	f7fd fb3b 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 800974e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009750:	e216      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009752:	f7fd fa1b 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8009756:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009758:	e212      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800975a:	4b3a      	ldr	r3, [pc, #232]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009766:	d102      	bne.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8009768:	4b37      	ldr	r3, [pc, #220]	@ (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800976a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800976c:	e208      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009772:	e205      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009774:	4b33      	ldr	r3, [pc, #204]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0320 	and.w	r3, r3, #32
 800977c:	2b20      	cmp	r3, #32
 800977e:	d117      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009780:	4b30      	ldr	r3, [pc, #192]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d005      	beq.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 800978c:	4b2d      	ldr	r3, [pc, #180]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	0e1b      	lsrs	r3, r3, #24
 8009792:	f003 030f 	and.w	r3, r3, #15
 8009796:	e006      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8009798:	4b2a      	ldr	r3, [pc, #168]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800979a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800979e:	041b      	lsls	r3, r3, #16
 80097a0:	0e1b      	lsrs	r3, r3, #24
 80097a2:	f003 030f 	and.w	r3, r3, #15
 80097a6:	4a29      	ldr	r2, [pc, #164]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80097a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80097ae:	e1e7      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097b4:	e1e4      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097ba:	e1e1      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80097bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097c0:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80097c4:	430b      	orrs	r3, r1
 80097c6:	d17c      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80097c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80097ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097ce:	f003 0318 	and.w	r3, r3, #24
 80097d2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80097d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d6:	2b18      	cmp	r3, #24
 80097d8:	d870      	bhi.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 80097da:	a201      	add	r2, pc, #4	@ (adr r2, 80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 80097dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e0:	08009851 	.word	0x08009851
 80097e4:	080098bd 	.word	0x080098bd
 80097e8:	080098bd 	.word	0x080098bd
 80097ec:	080098bd 	.word	0x080098bd
 80097f0:	080098bd 	.word	0x080098bd
 80097f4:	080098bd 	.word	0x080098bd
 80097f8:	080098bd 	.word	0x080098bd
 80097fc:	080098bd 	.word	0x080098bd
 8009800:	08009859 	.word	0x08009859
 8009804:	080098bd 	.word	0x080098bd
 8009808:	080098bd 	.word	0x080098bd
 800980c:	080098bd 	.word	0x080098bd
 8009810:	080098bd 	.word	0x080098bd
 8009814:	080098bd 	.word	0x080098bd
 8009818:	080098bd 	.word	0x080098bd
 800981c:	080098bd 	.word	0x080098bd
 8009820:	08009861 	.word	0x08009861
 8009824:	080098bd 	.word	0x080098bd
 8009828:	080098bd 	.word	0x080098bd
 800982c:	080098bd 	.word	0x080098bd
 8009830:	080098bd 	.word	0x080098bd
 8009834:	080098bd 	.word	0x080098bd
 8009838:	080098bd 	.word	0x080098bd
 800983c:	080098bd 	.word	0x080098bd
 8009840:	0800987b 	.word	0x0800987b
 8009844:	46020c00 	.word	0x46020c00
 8009848:	00f42400 	.word	0x00f42400
 800984c:	0800f230 	.word	0x0800f230
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009850:	f7fd fae0 	bl	8006e14 <HAL_RCC_GetPCLK3Freq>
 8009854:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009856:	e193      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009858:	f7fd f998 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 800985c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800985e:	e18f      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009860:	4b9f      	ldr	r3, [pc, #636]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800986c:	d102      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 800986e:	4b9d      	ldr	r3, [pc, #628]	@ (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009870:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009872:	e185      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009874:	2300      	movs	r3, #0
 8009876:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009878:	e182      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800987a:	4b99      	ldr	r3, [pc, #612]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b20      	cmp	r3, #32
 8009884:	d117      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009886:	4b96      	ldr	r3, [pc, #600]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d005      	beq.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 8009892:	4b93      	ldr	r3, [pc, #588]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	0e1b      	lsrs	r3, r3, #24
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	e006      	b.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 800989e:	4b90      	ldr	r3, [pc, #576]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80098a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098a4:	041b      	lsls	r3, r3, #16
 80098a6:	0e1b      	lsrs	r3, r3, #24
 80098a8:	f003 030f 	and.w	r3, r3, #15
 80098ac:	4a8e      	ldr	r2, [pc, #568]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80098ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80098b4:	e164      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098ba:	e161      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80098bc:	2300      	movs	r3, #0
 80098be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098c0:	e15e      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80098c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098c6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80098ca:	430b      	orrs	r3, r1
 80098cc:	d155      	bne.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80098ce:	4b84      	ldr	r3, [pc, #528]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80098d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098d4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80098d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80098da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098e0:	d013      	beq.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 80098e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098e8:	d844      	bhi.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80098ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098f0:	d013      	beq.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 80098f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098f8:	d83c      	bhi.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80098fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d014      	beq.n	800992a <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 8009900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009906:	d014      	beq.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8009908:	e034      	b.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990a:	f107 0318 	add.w	r3, r7, #24
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe fb30 	bl	8007f74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009918:	e132      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800991a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800991e:	4618      	mov	r0, r3
 8009920:	f7fe f9ce 	bl	8007cc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009926:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009928:	e12a      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800992a:	f7fd f92f 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 800992e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009930:	e126      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009932:	4b6b      	ldr	r3, [pc, #428]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0320 	and.w	r3, r3, #32
 800993a:	2b20      	cmp	r3, #32
 800993c:	d117      	bne.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800993e:	4b68      	ldr	r3, [pc, #416]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009946:	2b00      	cmp	r3, #0
 8009948:	d005      	beq.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 800994a:	4b65      	ldr	r3, [pc, #404]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	0e1b      	lsrs	r3, r3, #24
 8009950:	f003 030f 	and.w	r3, r3, #15
 8009954:	e006      	b.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8009956:	4b62      	ldr	r3, [pc, #392]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800995c:	041b      	lsls	r3, r3, #16
 800995e:	0e1b      	lsrs	r3, r3, #24
 8009960:	f003 030f 	and.w	r3, r3, #15
 8009964:	4a60      	ldr	r2, [pc, #384]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800996a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800996c:	e108      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009972:	e105      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8009974:	2300      	movs	r3, #0
 8009976:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009978:	e102      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800997a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800997e:	1e59      	subs	r1, r3, #1
 8009980:	ea52 0301 	orrs.w	r3, r2, r1
 8009984:	d13c      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8009986:	4b56      	ldr	r3, [pc, #344]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009988:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800998c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009990:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009998:	d027      	beq.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800999a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80099a0:	d82b      	bhi.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80099a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80099a8:	d017      	beq.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80099b0:	d823      	bhi.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80099b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d004      	beq.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 80099b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099be:	d004      	beq.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 80099c0:	e01b      	b.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80099c2:	f7fd f8e3 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 80099c6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80099c8:	e0da      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe f976 	bl	8007cc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80099d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099d8:	e0d2      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099da:	f107 0318 	add.w	r3, r7, #24
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe fac8 	bl	8007f74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099e8:	e0ca      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099ea:	f107 030c 	add.w	r3, r7, #12
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe fc1a 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099f8:	e0c2      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099fe:	e0bf      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a04:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009a08:	430b      	orrs	r3, r1
 8009a0a:	d131      	bne.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009a0c:	4b34      	ldr	r3, [pc, #208]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a16:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009a18:	4b31      	ldr	r3, [pc, #196]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a1e:	f003 0302 	and.w	r3, r3, #2
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d106      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d103      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8009a2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a32:	e0a5      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009a34:	4b2a      	ldr	r3, [pc, #168]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a42:	d112      	bne.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8009a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a4a:	d10e      	bne.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a4c:	4b24      	ldr	r3, [pc, #144]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a5a:	d102      	bne.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8009a5c:	23fa      	movs	r3, #250	@ 0xfa
 8009a5e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a60:	e08e      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8009a62:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009a66:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a68:	e08a      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a6e:	e087      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a74:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	d13b      	bne.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009a7c:	4b18      	ldr	r3, [pc, #96]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009a7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a82:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009a86:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009a88:	4b15      	ldr	r3, [pc, #84]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a94:	d105      	bne.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8009a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d102      	bne.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 8009a9c:	4b13      	ldr	r3, [pc, #76]	@ (8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8009a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aa0:	e06e      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009aaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009aae:	d106      	bne.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ab6:	d102      	bne.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8009aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009abc:	e060      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009abe:	4b08      	ldr	r3, [pc, #32]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aca:	d106      	bne.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8009acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ad2:	d102      	bne.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 8009ad4:	4b03      	ldr	r3, [pc, #12]	@ (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ad8:	e052      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009ada:	2300      	movs	r3, #0
 8009adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ade:	e04f      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8009ae0:	46020c00 	.word	0x46020c00
 8009ae4:	00f42400 	.word	0x00f42400
 8009ae8:	0800f230 	.word	0x0800f230
 8009aec:	02dc6c00 	.word	0x02dc6c00
 8009af0:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8009af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009af8:	f1a3 0108 	sub.w	r1, r3, #8
 8009afc:	ea52 0301 	orrs.w	r3, r2, r1
 8009b00:	d13c      	bne.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8009b02:	4b22      	ldr	r3, [pc, #136]	@ (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8009b04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b08:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009b0c:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8009b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b1a:	d105      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d102      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 8009b22:	4b1b      	ldr	r3, [pc, #108]	@ (8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8009b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b26:	e02b      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8009b28:	4b18      	ldr	r3, [pc, #96]	@ (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b34:	d106      	bne.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 8009b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b3c:	d102      	bne.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8009b3e:	4b15      	ldr	r3, [pc, #84]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8009b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b42:	e01d      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8009b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b4a:	d107      	bne.n	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fe f8b5 	bl	8007cc0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b5a:	e011      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009b62:	d108      	bne.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe f8a9 	bl	8007cc0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b70:	085b      	lsrs	r3, r3, #1
 8009b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b74:	e004      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b7a:	e001      	b.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3738      	adds	r7, #56	@ 0x38
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	46020c00 	.word	0x46020c00
 8009b90:	00f42400 	.word	0x00f42400
 8009b94:	007a1200 	.word	0x007a1200

08009b98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009ba0:	4b47      	ldr	r3, [pc, #284]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a46      	ldr	r2, [pc, #280]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009ba6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009baa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009bac:	f7fa fafc 	bl	80041a8 <HAL_GetTick>
 8009bb0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bb2:	e008      	b.n	8009bc6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009bb4:	f7fa faf8 	bl	80041a8 <HAL_GetTick>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d901      	bls.n	8009bc6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e077      	b.n	8009cb6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1f0      	bne.n	8009bb4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009bda:	f023 0303 	bic.w	r3, r3, #3
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	6811      	ldr	r1, [r2, #0]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	6852      	ldr	r2, [r2, #4]
 8009be6:	3a01      	subs	r2, #1
 8009be8:	0212      	lsls	r2, r2, #8
 8009bea:	430a      	orrs	r2, r1
 8009bec:	4934      	ldr	r1, [pc, #208]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009bf2:	4b33      	ldr	r3, [pc, #204]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bf6:	4b33      	ldr	r3, [pc, #204]	@ (8009cc4 <RCCEx_PLL2_Config+0x12c>)
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	6892      	ldr	r2, [r2, #8]
 8009bfe:	3a01      	subs	r2, #1
 8009c00:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	68d2      	ldr	r2, [r2, #12]
 8009c08:	3a01      	subs	r2, #1
 8009c0a:	0252      	lsls	r2, r2, #9
 8009c0c:	b292      	uxth	r2, r2
 8009c0e:	4311      	orrs	r1, r2
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	6912      	ldr	r2, [r2, #16]
 8009c14:	3a01      	subs	r2, #1
 8009c16:	0412      	lsls	r2, r2, #16
 8009c18:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009c1c:	4311      	orrs	r1, r2
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	6952      	ldr	r2, [r2, #20]
 8009c22:	3a01      	subs	r2, #1
 8009c24:	0612      	lsls	r2, r2, #24
 8009c26:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	4924      	ldr	r1, [pc, #144]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009c32:	4b23      	ldr	r3, [pc, #140]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c36:	f023 020c 	bic.w	r2, r3, #12
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	4920      	ldr	r1, [pc, #128]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009c44:	4b1e      	ldr	r3, [pc, #120]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a1b      	ldr	r3, [r3, #32]
 8009c4c:	491c      	ldr	r1, [pc, #112]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009c52:	4b1b      	ldr	r3, [pc, #108]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c56:	4a1a      	ldr	r2, [pc, #104]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c58:	f023 0310 	bic.w	r3, r3, #16
 8009c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c5e:	4b18      	ldr	r3, [pc, #96]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c66:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	69d2      	ldr	r2, [r2, #28]
 8009c6e:	00d2      	lsls	r2, r2, #3
 8009c70:	4913      	ldr	r1, [pc, #76]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009c76:	4b12      	ldr	r3, [pc, #72]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7a:	4a11      	ldr	r2, [pc, #68]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c7c:	f043 0310 	orr.w	r3, r3, #16
 8009c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009c82:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a0e      	ldr	r2, [pc, #56]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009c88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009c8c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009c8e:	f7fa fa8b 	bl	80041a8 <HAL_GetTick>
 8009c92:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c94:	e008      	b.n	8009ca8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c96:	f7fa fa87 	bl	80041a8 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d901      	bls.n	8009ca8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e006      	b.n	8009cb6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ca8:	4b05      	ldr	r3, [pc, #20]	@ (8009cc0 <RCCEx_PLL2_Config+0x128>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0f0      	beq.n	8009c96 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0

}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	46020c00 	.word	0x46020c00
 8009cc4:	80800000 	.word	0x80800000

08009cc8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009cd0:	4b47      	ldr	r3, [pc, #284]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a46      	ldr	r2, [pc, #280]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cda:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009cdc:	f7fa fa64 	bl	80041a8 <HAL_GetTick>
 8009ce0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ce2:	e008      	b.n	8009cf6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ce4:	f7fa fa60 	bl	80041a8 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d901      	bls.n	8009cf6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e077      	b.n	8009de6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1f0      	bne.n	8009ce4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009d02:	4b3b      	ldr	r3, [pc, #236]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009d0a:	f023 0303 	bic.w	r3, r3, #3
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	6811      	ldr	r1, [r2, #0]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	6852      	ldr	r2, [r2, #4]
 8009d16:	3a01      	subs	r2, #1
 8009d18:	0212      	lsls	r2, r2, #8
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	4934      	ldr	r1, [pc, #208]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	630b      	str	r3, [r1, #48]	@ 0x30
 8009d22:	4b33      	ldr	r3, [pc, #204]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d26:	4b33      	ldr	r3, [pc, #204]	@ (8009df4 <RCCEx_PLL3_Config+0x12c>)
 8009d28:	4013      	ands	r3, r2
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	6892      	ldr	r2, [r2, #8]
 8009d2e:	3a01      	subs	r2, #1
 8009d30:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	68d2      	ldr	r2, [r2, #12]
 8009d38:	3a01      	subs	r2, #1
 8009d3a:	0252      	lsls	r2, r2, #9
 8009d3c:	b292      	uxth	r2, r2
 8009d3e:	4311      	orrs	r1, r2
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	6912      	ldr	r2, [r2, #16]
 8009d44:	3a01      	subs	r2, #1
 8009d46:	0412      	lsls	r2, r2, #16
 8009d48:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009d4c:	4311      	orrs	r1, r2
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	6952      	ldr	r2, [r2, #20]
 8009d52:	3a01      	subs	r2, #1
 8009d54:	0612      	lsls	r2, r2, #24
 8009d56:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	4924      	ldr	r1, [pc, #144]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009d62:	4b23      	ldr	r3, [pc, #140]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d66:	f023 020c 	bic.w	r2, r3, #12
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	4920      	ldr	r1, [pc, #128]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009d70:	4313      	orrs	r3, r2
 8009d72:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009d74:	4b1e      	ldr	r3, [pc, #120]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009d76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	491c      	ldr	r1, [pc, #112]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009d82:	4b1b      	ldr	r3, [pc, #108]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d86:	4a1a      	ldr	r2, [pc, #104]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009d88:	f023 0310 	bic.w	r3, r3, #16
 8009d8c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d8e:	4b18      	ldr	r3, [pc, #96]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d96:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	69d2      	ldr	r2, [r2, #28]
 8009d9e:	00d2      	lsls	r2, r2, #3
 8009da0:	4913      	ldr	r1, [pc, #76]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009da2:	4313      	orrs	r3, r2
 8009da4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009da6:	4b12      	ldr	r3, [pc, #72]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009daa:	4a11      	ldr	r2, [pc, #68]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009dac:	f043 0310 	orr.w	r3, r3, #16
 8009db0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009db2:	4b0f      	ldr	r3, [pc, #60]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a0e      	ldr	r2, [pc, #56]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dbc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009dbe:	f7fa f9f3 	bl	80041a8 <HAL_GetTick>
 8009dc2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009dc4:	e008      	b.n	8009dd8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009dc6:	f7fa f9ef 	bl	80041a8 <HAL_GetTick>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d901      	bls.n	8009dd8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	e006      	b.n	8009de6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009dd8:	4b05      	ldr	r3, [pc, #20]	@ (8009df0 <RCCEx_PLL3_Config+0x128>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d0f0      	beq.n	8009dc6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	46020c00 	.word	0x46020c00
 8009df4:	80800000 	.word	0x80800000

08009df8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e0fb      	b.n	800a002 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a7f      	ldr	r2, [pc, #508]	@ (800a00c <HAL_SPI_Init+0x214>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d004      	beq.n	8009e1e <HAL_SPI_Init+0x26>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a7d      	ldr	r2, [pc, #500]	@ (800a010 <HAL_SPI_Init+0x218>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	e000      	b.n	8009e20 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009e1e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a78      	ldr	r2, [pc, #480]	@ (800a00c <HAL_SPI_Init+0x214>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d004      	beq.n	8009e3a <HAL_SPI_Init+0x42>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a76      	ldr	r2, [pc, #472]	@ (800a010 <HAL_SPI_Init+0x218>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d105      	bne.n	8009e46 <HAL_SPI_Init+0x4e>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	2b0f      	cmp	r3, #15
 8009e40:	d901      	bls.n	8009e46 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e0dd      	b.n	800a002 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fe8a 	bl	800ab60 <SPI_GetPacketSize>
 8009e4c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a6e      	ldr	r2, [pc, #440]	@ (800a00c <HAL_SPI_Init+0x214>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d004      	beq.n	8009e62 <HAL_SPI_Init+0x6a>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a6c      	ldr	r2, [pc, #432]	@ (800a010 <HAL_SPI_Init+0x218>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d102      	bne.n	8009e68 <HAL_SPI_Init+0x70>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b08      	cmp	r3, #8
 8009e66:	d816      	bhi.n	8009e96 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e6c:	4a69      	ldr	r2, [pc, #420]	@ (800a014 <HAL_SPI_Init+0x21c>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d00e      	beq.n	8009e90 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a68      	ldr	r2, [pc, #416]	@ (800a018 <HAL_SPI_Init+0x220>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d009      	beq.n	8009e90 <HAL_SPI_Init+0x98>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a66      	ldr	r2, [pc, #408]	@ (800a01c <HAL_SPI_Init+0x224>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d004      	beq.n	8009e90 <HAL_SPI_Init+0x98>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a65      	ldr	r2, [pc, #404]	@ (800a020 <HAL_SPI_Init+0x228>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d104      	bne.n	8009e9a <HAL_SPI_Init+0xa2>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b10      	cmp	r3, #16
 8009e94:	d901      	bls.n	8009e9a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e0b3      	b.n	800a002 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d106      	bne.n	8009eb4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7f9 fb82 	bl	80035b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f022 0201 	bic.w	r2, r2, #1
 8009eca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009ed6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ee0:	d119      	bne.n	8009f16 <HAL_SPI_Init+0x11e>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009eea:	d103      	bne.n	8009ef4 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d008      	beq.n	8009f06 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10c      	bne.n	8009f16 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f04:	d107      	bne.n	8009f16 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00f      	beq.n	8009f42 <HAL_SPI_Init+0x14a>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	2b06      	cmp	r3, #6
 8009f28:	d90b      	bls.n	8009f42 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	430a      	orrs	r2, r1
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	e007      	b.n	8009f52 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009f50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	69da      	ldr	r2, [r3, #28]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f64:	ea42 0103 	orr.w	r1, r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7c:	431a      	orrs	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f82:	431a      	orrs	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	431a      	orrs	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	431a      	orrs	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	431a      	orrs	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fbe:	ea42 0103 	orr.w	r1, r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	430a      	orrs	r2, r1
 8009fcc:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00a      	beq.n	8009ff0 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	430a      	orrs	r2, r1
 8009fee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	46002000 	.word	0x46002000
 800a010:	56002000 	.word	0x56002000
 800a014:	40013000 	.word	0x40013000
 800a018:	50013000 	.word	0x50013000
 800a01c:	40003800 	.word	0x40003800
 800a020:	50003800 	.word	0x50003800

0800a024 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
 800a030:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a91      	ldr	r2, [pc, #580]	@ (800a27c <HAL_SPI_TransmitReceive_DMA+0x258>)
 800a038:	4293      	cmp	r3, r2
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b01      	cmp	r3, #1
 800a044:	d001      	beq.n	800a04a <HAL_SPI_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 800a046:	2302      	movs	r3, #2
 800a048:	e274      	b.n	800a534 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d005      	beq.n	800a05c <HAL_SPI_TransmitReceive_DMA+0x38>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <HAL_SPI_TransmitReceive_DMA+0x38>
 800a056:	887b      	ldrh	r3, [r7, #2]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e269      	b.n	800a534 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a066:	2b01      	cmp	r3, #1
 800a068:	d101      	bne.n	800a06e <HAL_SPI_TransmitReceive_DMA+0x4a>
 800a06a:	2302      	movs	r3, #2
 800a06c:	e262      	b.n	800a534 <HAL_SPI_TransmitReceive_DMA+0x510>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2205      	movs	r2, #5
 800a07a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	887a      	ldrh	r2, [r7, #2]
 800a090:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	887a      	ldrh	r2, [r7, #2]
 800a098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	887a      	ldrh	r2, [r7, #2]
 800a0a6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	887a      	ldrh	r2, [r7, #2]
 800a0ae:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68da      	ldr	r2, [r3, #12]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a0cc:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689a      	ldr	r2, [r3, #8]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a0dc:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	2b0f      	cmp	r3, #15
 800a0e4:	d920      	bls.n	800a128 <HAL_SPI_TransmitReceive_DMA+0x104>
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0ec:	69db      	ldr	r3, [r3, #28]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800a0ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0f2:	d105      	bne.n	800a100 <HAL_SPI_TransmitReceive_DMA+0xdc>
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0fa:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d013      	beq.n	800a128 <HAL_SPI_TransmitReceive_DMA+0x104>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 800a104:	4a5e      	ldr	r2, [pc, #376]	@ (800a280 <HAL_SPI_TransmitReceive_DMA+0x25c>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d01e      	beq.n	800a148 <HAL_SPI_TransmitReceive_DMA+0x124>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a5d      	ldr	r2, [pc, #372]	@ (800a284 <HAL_SPI_TransmitReceive_DMA+0x260>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d019      	beq.n	800a148 <HAL_SPI_TransmitReceive_DMA+0x124>
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a5b      	ldr	r2, [pc, #364]	@ (800a288 <HAL_SPI_TransmitReceive_DMA+0x264>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d014      	beq.n	800a148 <HAL_SPI_TransmitReceive_DMA+0x124>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a5a      	ldr	r2, [pc, #360]	@ (800a28c <HAL_SPI_TransmitReceive_DMA+0x268>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d00f      	beq.n	800a148 <HAL_SPI_TransmitReceive_DMA+0x124>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800a12c:	2b07      	cmp	r3, #7
 800a12e:	d911      	bls.n	800a154 <HAL_SPI_TransmitReceive_DMA+0x130>
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a136:	69db      	ldr	r3, [r3, #28]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d005      	beq.n	800a148 <HAL_SPI_TransmitReceive_DMA+0x124>
        (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_BYTE))))
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a142:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 800a144:	2b00      	cmp	r3, #0
 800a146:	d105      	bne.n	800a154 <HAL_SPI_TransmitReceive_DMA+0x130>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e1ef      	b.n	800a534 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	2b07      	cmp	r3, #7
 800a15a:	d842      	bhi.n	800a1e2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d109      	bne.n	800a17c <HAL_SPI_TransmitReceive_DMA+0x158>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a16e:	b29b      	uxth	r3, r3
 800a170:	3301      	adds	r3, #1
 800a172:	105b      	asrs	r3, r3, #1
 800a174:	b29a      	uxth	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	2b02      	cmp	r3, #2
 800a186:	d109      	bne.n	800a19c <HAL_SPI_TransmitReceive_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a18e:	b29b      	uxth	r3, r3
 800a190:	3303      	adds	r3, #3
 800a192:	109b      	asrs	r3, r3, #2
 800a194:	b29a      	uxth	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1a8:	d109      	bne.n	800a1be <HAL_SPI_TransmitReceive_DMA+0x19a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	105b      	asrs	r3, r3, #1
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1c4:	69db      	ldr	r3, [r3, #28]
 800a1c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1ca:	d12f      	bne.n	800a22c <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	3303      	adds	r3, #3
 800a1d6:	109b      	asrs	r3, r3, #2
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a1e0:	e024      	b.n	800a22c <HAL_SPI_TransmitReceive_DMA+0x208>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	2b0f      	cmp	r3, #15
 800a1e8:	d820      	bhi.n	800a22c <HAL_SPI_TransmitReceive_DMA+0x208>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1f0:	699b      	ldr	r3, [r3, #24]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d109      	bne.n	800a20a <HAL_SPI_TransmitReceive_DMA+0x1e6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	3301      	adds	r3, #1
 800a200:	105b      	asrs	r3, r3, #1
 800a202:	b29a      	uxth	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a216:	d109      	bne.n	800a22c <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a21e:	b29b      	uxth	r3, r3
 800a220:	3301      	adds	r3, #1
 800a222:	105b      	asrs	r3, r3, #1
 800a224:	b29a      	uxth	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a232:	4a17      	ldr	r2, [pc, #92]	@ (800a290 <HAL_SPI_TransmitReceive_DMA+0x26c>)
 800a234:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a23c:	4a15      	ldr	r2, [pc, #84]	@ (800a294 <HAL_SPI_TransmitReceive_DMA+0x270>)
 800a23e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a246:	4a14      	ldr	r2, [pc, #80]	@ (800a298 <HAL_SPI_TransmitReceive_DMA+0x274>)
 800a248:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a250:	2200      	movs	r2, #0
 800a252:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	2b07      	cmp	r3, #7
 800a25a:	d804      	bhi.n	800a266 <HAL_SPI_TransmitReceive_DMA+0x242>
  {
    hspi->RxXferCount = Size;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	887a      	ldrh	r2, [r7, #2]
 800a260:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a264:	e020      	b.n	800a2a8 <HAL_SPI_TransmitReceive_DMA+0x284>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	2b0f      	cmp	r3, #15
 800a26c:	d816      	bhi.n	800a29c <HAL_SPI_TransmitReceive_DMA+0x278>
  {
    hspi->RxXferCount = Size * 2U;
 800a26e:	887b      	ldrh	r3, [r7, #2]
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	b29a      	uxth	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a27a:	e015      	b.n	800a2a8 <HAL_SPI_TransmitReceive_DMA+0x284>
 800a27c:	46002000 	.word	0x46002000
 800a280:	40013000 	.word	0x40013000
 800a284:	50013000 	.word	0x50013000
 800a288:	40003800 	.word	0x40003800
 800a28c:	50003800 	.word	0x50003800
 800a290:	0800a98b 	.word	0x0800a98b
 800a294:	0800a939 	.word	0x0800a939
 800a298:	0800a9a7 	.word	0x0800a9a7
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 800a29c:	887b      	ldrh	r3, [r7, #2]
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  }
  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d02d      	beq.n	800a314 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d024      	beq.n	800a30e <HAL_SPI_TransmitReceive_DMA+0x2ea>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a302:	4618      	mov	r0, r3
 800a304:	f7fa ff94 	bl	8005230 <HAL_DMAEx_List_Start_IT>
 800a308:	4603      	mov	r3, r0
 800a30a:	75fb      	strb	r3, [r7, #23]
 800a30c:	e014      	b.n	800a338 <HAL_SPI_TransmitReceive_DMA+0x314>
    }
    else
    {
      status = HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	75fb      	strb	r3, [r7, #23]
 800a312:	e011      	b.n	800a338 <HAL_SPI_TransmitReceive_DMA+0x314>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3330      	adds	r3, #48	@ 0x30
 800a320:	4619      	mov	r1, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a326:	461a      	mov	r2, r3
                              hspi->RxXferCount);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a32e:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a330:	f7fa fa2a 	bl	8004788 <HAL_DMA_Start_IT>
 800a334:	4603      	mov	r3, r0
 800a336:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800a338:	7dfb      	ldrb	r3, [r7, #23]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d011      	beq.n	800a362 <HAL_SPI_TransmitReceive_DMA+0x33e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a344:	f043 0210 	orr.w	r2, r3, #16
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e0e8      	b.n	800a534 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a370:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a378:	2200      	movs	r2, #0
 800a37a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a382:	2200      	movs	r2, #0
 800a384:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a38c:	2200      	movs	r2, #0
 800a38e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a396:	4a69      	ldr	r2, [pc, #420]	@ (800a53c <HAL_SPI_TransmitReceive_DMA+0x518>)
 800a398:	669a      	str	r2, [r3, #104]	@ 0x68

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	2b07      	cmp	r3, #7
 800a3a0:	d804      	bhi.n	800a3ac <HAL_SPI_TransmitReceive_DMA+0x388>
  {
    hspi->TxXferCount = Size;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	887a      	ldrh	r2, [r7, #2]
 800a3a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a3aa:	e010      	b.n	800a3ce <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	2b0f      	cmp	r3, #15
 800a3b2:	d806      	bhi.n	800a3c2 <HAL_SPI_TransmitReceive_DMA+0x39e>
  {
    hspi->TxXferCount = Size * 2U;
 800a3b4:	887b      	ldrh	r3, [r7, #2]
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a3c0:	e005      	b.n	800a3ce <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 800a3c2:	887b      	ldrh	r3, [r7, #2]
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel  */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d02d      	beq.n	800a43a <HAL_SPI_TransmitReceive_DMA+0x416>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d024      	beq.n	800a434 <HAL_SPI_TransmitReceive_DMA+0x410>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f103 0220 	add.w	r2, r3, #32
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a41c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fa ff01 	bl	8005230 <HAL_DMAEx_List_Start_IT>
 800a42e:	4603      	mov	r3, r0
 800a430:	75fb      	strb	r3, [r7, #23]
 800a432:	e014      	b.n	800a45e <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
    else
    {
      status = HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	75fb      	strb	r3, [r7, #23]
 800a438:	e011      	b.n	800a45e <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a444:	4619      	mov	r1, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3320      	adds	r3, #32
 800a44c:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a454:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a456:	f7fa f997 	bl	8004788 <HAL_DMA_Start_IT>
 800a45a:	4603      	mov	r3, r0
 800a45c:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d017      	beq.n	800a494 <HAL_SPI_TransmitReceive_DMA+0x470>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fa f9ec 	bl	8004848 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a476:	f043 0210 	orr.w	r2, r3, #16
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e04f      	b.n	800a534 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) && (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a49a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a49c:	2b81      	cmp	r3, #129	@ 0x81
 800a49e:	d10e      	bne.n	800a4be <HAL_SPI_TransmitReceive_DMA+0x49a>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4a8:	2b81      	cmp	r3, #129	@ 0x81
 800a4aa:	d108      	bne.n	800a4be <HAL_SPI_TransmitReceive_DMA+0x49a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	6812      	ldr	r2, [r2, #0]
 800a4b6:	0c1b      	lsrs	r3, r3, #16
 800a4b8:	041b      	lsls	r3, r3, #16
 800a4ba:	6053      	str	r3, [r2, #4]
 800a4bc:	e009      	b.n	800a4d2 <HAL_SPI_TransmitReceive_DMA+0x4ae>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	0c1b      	lsrs	r3, r3, #16
 800a4c6:	041b      	lsls	r3, r3, #16
 800a4c8:	8879      	ldrh	r1, [r7, #2]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	6812      	ldr	r2, [r2, #0]
 800a4ce:	430b      	orrs	r3, r1
 800a4d0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	689a      	ldr	r2, [r3, #8]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4e0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	691a      	ldr	r2, [r3, #16]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800a4f0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f042 0201 	orr.w	r2, r2, #1
 800a500:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	69db      	ldr	r3, [r3, #28]
 800a508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10c      	bne.n	800a52a <HAL_SPI_TransmitReceive_DMA+0x506>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a518:	d107      	bne.n	800a52a <HAL_SPI_TransmitReceive_DMA+0x506>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a528:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3718      	adds	r7, #24
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	0800a9a7 	.word	0x0800a9a7

0800a540 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08a      	sub	sp, #40	@ 0x28
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a558:	6a3a      	ldr	r2, [r7, #32]
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	4013      	ands	r3, r2
 800a55e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a568:	2300      	movs	r3, #0
 800a56a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a572:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3330      	adds	r3, #48	@ 0x30
 800a57a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a582:	2b00      	cmp	r3, #0
 800a584:	d010      	beq.n	800a5a8 <HAL_SPI_IRQHandler+0x68>
 800a586:	6a3b      	ldr	r3, [r7, #32]
 800a588:	f003 0308 	and.w	r3, r3, #8
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00b      	beq.n	800a5a8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	699a      	ldr	r2, [r3, #24]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a59e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 f9bf 	bl	800a924 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a5a6:	e19a      	b.n	800a8de <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d113      	bne.n	800a5da <HAL_SPI_IRQHandler+0x9a>
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	f003 0320 	and.w	r3, r3, #32
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10e      	bne.n	800a5da <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d009      	beq.n	800a5da <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	4798      	blx	r3
    handled = 1UL;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10f      	bne.n	800a604 <HAL_SPI_IRQHandler+0xc4>
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d105      	bne.n	800a604 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	4798      	blx	r3
    handled = 1UL;
 800a600:	2301      	movs	r3, #1
 800a602:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	f003 0320 	and.w	r3, r3, #32
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10f      	bne.n	800a62e <HAL_SPI_IRQHandler+0xee>
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	f003 0302 	and.w	r3, r3, #2
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00a      	beq.n	800a62e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d105      	bne.n	800a62e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	4798      	blx	r3
    handled = 1UL;
 800a62a:	2301      	movs	r3, #1
 800a62c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800a62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a630:	2b00      	cmp	r3, #0
 800a632:	f040 814f 	bne.w	800a8d4 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	f003 0308 	and.w	r3, r3, #8
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 808b 	beq.w	800a758 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	699a      	ldr	r2, [r3, #24]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f042 0208 	orr.w	r2, r2, #8
 800a650:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	699a      	ldr	r2, [r3, #24]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f042 0210 	orr.w	r2, r2, #16
 800a660:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	699a      	ldr	r2, [r3, #24]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a670:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	691a      	ldr	r2, [r3, #16]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f022 0208 	bic.w	r2, r2, #8
 800a680:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d13d      	bne.n	800a70c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a690:	e036      	b.n	800a700 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	2b0f      	cmp	r3, #15
 800a698:	d90b      	bls.n	800a6b2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a6a4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6aa:	1d1a      	adds	r2, r3, #4
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a6b0:	e01d      	b.n	800a6ee <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	2b07      	cmp	r3, #7
 800a6b8:	d90b      	bls.n	800a6d2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	8812      	ldrh	r2, [r2, #0]
 800a6c2:	b292      	uxth	r2, r2
 800a6c4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ca:	1c9a      	adds	r2, r3, #2
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a6d0:	e00d      	b.n	800a6ee <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6de:	7812      	ldrb	r2, [r2, #0]
 800a6e0:	b2d2      	uxtb	r2, r2
 800a6e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a706:	b29b      	uxth	r3, r3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1c2      	bne.n	800a692 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f987 	bl	800aa20 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7f7 fc2b 	bl	8001f80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a72a:	e0d8      	b.n	800a8de <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a72c:	7cfb      	ldrb	r3, [r7, #19]
 800a72e:	2b05      	cmp	r3, #5
 800a730:	d103      	bne.n	800a73a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7f7 fc14 	bl	8001f60 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a738:	e0ce      	b.n	800a8d8 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a73a:	7cfb      	ldrb	r3, [r7, #19]
 800a73c:	2b04      	cmp	r3, #4
 800a73e:	d103      	bne.n	800a748 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f8db 	bl	800a8fc <HAL_SPI_RxCpltCallback>
    return;
 800a746:	e0c7      	b.n	800a8d8 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a748:	7cfb      	ldrb	r3, [r7, #19]
 800a74a:	2b03      	cmp	r3, #3
 800a74c:	f040 80c4 	bne.w	800a8d8 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f8c9 	bl	800a8e8 <HAL_SPI_TxCpltCallback>
    return;
 800a756:	e0bf      	b.n	800a8d8 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a75e:	2b00      	cmp	r3, #0
 800a760:	f000 80bd 	beq.w	800a8de <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00f      	beq.n	800a78e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a774:	f043 0204 	orr.w	r2, r3, #4
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	699a      	ldr	r2, [r3, #24]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a78c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00f      	beq.n	800a7b8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a79e:	f043 0201 	orr.w	r2, r3, #1
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7b6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00f      	beq.n	800a7e2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7c8:	f043 0208 	orr.w	r2, r3, #8
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	699a      	ldr	r2, [r3, #24]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7e0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	f003 0320 	and.w	r3, r3, #32
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00f      	beq.n	800a80c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	699a      	ldr	r2, [r3, #24]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f042 0220 	orr.w	r2, r2, #32
 800a80a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a812:	2b00      	cmp	r3, #0
 800a814:	d062      	beq.n	800a8dc <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f022 0201 	bic.w	r2, r2, #1
 800a824:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	6812      	ldr	r2, [r2, #0]
 800a830:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800a834:	f023 0303 	bic.w	r3, r3, #3
 800a838:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a840:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a844:	d13e      	bne.n	800a8c4 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	689a      	ldr	r2, [r3, #8]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a854:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d015      	beq.n	800a88c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a866:	4a1f      	ldr	r2, [pc, #124]	@ (800a8e4 <HAL_SPI_IRQHandler+0x3a4>)
 800a868:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a870:	4618      	mov	r0, r3
 800a872:	f7fa f865 	bl	8004940 <HAL_DMA_Abort_IT>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d007      	beq.n	800a88c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a882:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a892:	2b00      	cmp	r3, #0
 800a894:	d022      	beq.n	800a8dc <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a89c:	4a11      	ldr	r2, [pc, #68]	@ (800a8e4 <HAL_SPI_IRQHandler+0x3a4>)
 800a89e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fa f84a 	bl	8004940 <HAL_DMA_Abort_IT>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d014      	beq.n	800a8dc <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a8c2:	e00b      	b.n	800a8dc <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7f7 fb57 	bl	8001f80 <HAL_SPI_ErrorCallback>
    return;
 800a8d2:	e003      	b.n	800a8dc <HAL_SPI_IRQHandler+0x39c>
    return;
 800a8d4:	bf00      	nop
 800a8d6:	e002      	b.n	800a8de <HAL_SPI_IRQHandler+0x39e>
    return;
 800a8d8:	bf00      	nop
 800a8da:	e000      	b.n	800a8de <HAL_SPI_IRQHandler+0x39e>
    return;
 800a8dc:	bf00      	nop
  }
}
 800a8de:	3728      	adds	r7, #40	@ 0x28
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	0800a9ed 	.word	0x0800a9ed

0800a8e8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a904:	bf00      	nop
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a944:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b07      	cmp	r3, #7
 800a950:	d017      	beq.n	800a982 <SPI_DMATransmitReceiveCplt+0x4a>
  {
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a95a:	2b81      	cmp	r3, #129	@ 0x81
 800a95c:	d109      	bne.n	800a972 <SPI_DMATransmitReceiveCplt+0x3a>
        (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800a966:	2b81      	cmp	r3, #129	@ 0x81
 800a968:	d103      	bne.n	800a972 <SPI_DMATransmitReceiveCplt+0x3a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f7f7 faf8 	bl	8001f60 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a970:	e007      	b.n	800a982 <SPI_DMATransmitReceiveCplt+0x4a>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	691a      	ldr	r2, [r3, #16]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f042 0208 	orr.w	r2, r2, #8
 800a980:	611a      	str	r2, [r3, #16]
}
 800a982:	bf00      	nop
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b084      	sub	sp, #16
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a996:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7ff ffb9 	bl	800a910 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a99e:	bf00      	nop
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b084      	sub	sp, #16
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9b2:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7fa f94d 	bl	8004c54 <HAL_DMA_GetError>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d011      	beq.n	800a9e4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 f82d 	bl	800aa20 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9cc:	f043 0210 	orr.w	r2, r3, #16
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f7f7 face 	bl	8001f80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a9e4:	bf00      	nop
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7f7 fab4 	bl	8001f80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa18:	bf00      	nop
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	699a      	ldr	r2, [r3, #24]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f042 0208 	orr.w	r2, r2, #8
 800aa3e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	699a      	ldr	r2, [r3, #24]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f042 0210 	orr.w	r2, r2, #16
 800aa4e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f022 0201 	bic.w	r2, r2, #1
 800aa5e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	6812      	ldr	r2, [r2, #0]
 800aa6a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800aa6e:	f023 0303 	bic.w	r3, r3, #3
 800aa72:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	689a      	ldr	r2, [r3, #8]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800aa82:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	d014      	beq.n	800aaba <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f003 0320 	and.w	r3, r3, #32
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00f      	beq.n	800aaba <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaa0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	699a      	ldr	r2, [r3, #24]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f042 0220 	orr.w	r2, r2, #32
 800aab8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d014      	beq.n	800aaf0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00f      	beq.n	800aaf0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aad6:	f043 0204 	orr.w	r2, r3, #4
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	699a      	ldr	r2, [r3, #24]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aaee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00f      	beq.n	800ab1a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab00:	f043 0201 	orr.w	r2, r3, #1
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	699a      	ldr	r2, [r3, #24]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab18:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00f      	beq.n	800ab44 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab2a:	f043 0208 	orr.w	r2, r3, #8
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	699a      	ldr	r2, [r3, #24]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab42:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800ab54:	bf00      	nop
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab6c:	095b      	lsrs	r3, r3, #5
 800ab6e:	3301      	adds	r3, #1
 800ab70:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	3301      	adds	r3, #1
 800ab78:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	3307      	adds	r3, #7
 800ab7e:	08db      	lsrs	r3, r3, #3
 800ab80:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	fb02 f303 	mul.w	r3, r2, r3
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b083      	sub	sp, #12
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d12e      	bne.n	800ac0a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d101      	bne.n	800abba <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800abb6:	2302      	movs	r3, #2
 800abb8:	e028      	b.n	800ac0c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2201      	movs	r2, #1
 800abbe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2202      	movs	r2, #2
 800abc6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f022 0201 	bic.w	r2, r2, #1
 800abd8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800abe6:	ea42 0103 	orr.w	r1, r2, r3
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	689a      	ldr	r2, [r3, #8]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	430a      	orrs	r2, r1
 800abf4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ac06:	2300      	movs	r3, #0
 800ac08:	e000      	b.n	800ac0c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
  }
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d001      	beq.n	800ac30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e072      	b.n	800ad16 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2202      	movs	r2, #2
 800ac34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68da      	ldr	r2, [r3, #12]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f042 0201 	orr.w	r2, r2, #1
 800ac46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a35      	ldr	r2, [pc, #212]	@ (800ad24 <HAL_TIM_Base_Start_IT+0x10c>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d040      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a34      	ldr	r2, [pc, #208]	@ (800ad28 <HAL_TIM_Base_Start_IT+0x110>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d03b      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac64:	d036      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac6e:	d031      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a2d      	ldr	r2, [pc, #180]	@ (800ad2c <HAL_TIM_Base_Start_IT+0x114>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d02c      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a2c      	ldr	r2, [pc, #176]	@ (800ad30 <HAL_TIM_Base_Start_IT+0x118>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d027      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a2a      	ldr	r2, [pc, #168]	@ (800ad34 <HAL_TIM_Base_Start_IT+0x11c>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d022      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a29      	ldr	r2, [pc, #164]	@ (800ad38 <HAL_TIM_Base_Start_IT+0x120>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d01d      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a27      	ldr	r2, [pc, #156]	@ (800ad3c <HAL_TIM_Base_Start_IT+0x124>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d018      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a26      	ldr	r2, [pc, #152]	@ (800ad40 <HAL_TIM_Base_Start_IT+0x128>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d013      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a24      	ldr	r2, [pc, #144]	@ (800ad44 <HAL_TIM_Base_Start_IT+0x12c>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d00e      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a23      	ldr	r2, [pc, #140]	@ (800ad48 <HAL_TIM_Base_Start_IT+0x130>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d009      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a21      	ldr	r2, [pc, #132]	@ (800ad4c <HAL_TIM_Base_Start_IT+0x134>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d004      	beq.n	800acd4 <HAL_TIM_Base_Start_IT+0xbc>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a20      	ldr	r2, [pc, #128]	@ (800ad50 <HAL_TIM_Base_Start_IT+0x138>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d115      	bne.n	800ad00 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	689a      	ldr	r2, [r3, #8]
 800acda:	4b1e      	ldr	r3, [pc, #120]	@ (800ad54 <HAL_TIM_Base_Start_IT+0x13c>)
 800acdc:	4013      	ands	r3, r2
 800acde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2b06      	cmp	r3, #6
 800ace4:	d015      	beq.n	800ad12 <HAL_TIM_Base_Start_IT+0xfa>
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acec:	d011      	beq.n	800ad12 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f042 0201 	orr.w	r2, r2, #1
 800acfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acfe:	e008      	b.n	800ad12 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f042 0201 	orr.w	r2, r2, #1
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	e000      	b.n	800ad14 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3714      	adds	r7, #20
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	40012c00 	.word	0x40012c00
 800ad28:	50012c00 	.word	0x50012c00
 800ad2c:	40000400 	.word	0x40000400
 800ad30:	50000400 	.word	0x50000400
 800ad34:	40000800 	.word	0x40000800
 800ad38:	50000800 	.word	0x50000800
 800ad3c:	40000c00 	.word	0x40000c00
 800ad40:	50000c00 	.word	0x50000c00
 800ad44:	40013400 	.word	0x40013400
 800ad48:	50013400 	.word	0x50013400
 800ad4c:	40014000 	.word	0x40014000
 800ad50:	50014000 	.word	0x50014000
 800ad54:	00010007 	.word	0x00010007

0800ad58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68da      	ldr	r2, [r3, #12]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f022 0201 	bic.w	r2, r2, #1
 800ad6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	6a1a      	ldr	r2, [r3, #32]
 800ad76:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10f      	bne.n	800ada0 <HAL_TIM_Base_Stop_IT+0x48>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6a1a      	ldr	r2, [r3, #32]
 800ad86:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d107      	bne.n	800ada0 <HAL_TIM_Base_Stop_IT+0x48>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f022 0201 	bic.w	r2, r2, #1
 800ad9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b082      	sub	sp, #8
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d101      	bne.n	800adc8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	e049      	b.n	800ae5c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b00      	cmp	r3, #0
 800add2:	d106      	bne.n	800ade2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7f8 fd2d 	bl	800383c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2202      	movs	r2, #2
 800ade6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	3304      	adds	r3, #4
 800adf2:	4619      	mov	r1, r3
 800adf4:	4610      	mov	r0, r2
 800adf6:	f000 fa27 	bl	800b248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2201      	movs	r2, #1
 800ae46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	f003 0302 	and.w	r3, r3, #2
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d020      	beq.n	800aec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f003 0302 	and.w	r3, r3, #2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01b      	beq.n	800aec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f06f 0202 	mvn.w	r2, #2
 800ae98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	f003 0303 	and.w	r3, r3, #3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f9ac 	bl	800b20c <HAL_TIM_IC_CaptureCallback>
 800aeb4:	e005      	b.n	800aec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f99e 	bl	800b1f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f9af 	bl	800b220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	f003 0304 	and.w	r3, r3, #4
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d020      	beq.n	800af14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f003 0304 	and.w	r3, r3, #4
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d01b      	beq.n	800af14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f06f 0204 	mvn.w	r2, #4
 800aee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2202      	movs	r2, #2
 800aeea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f986 	bl	800b20c <HAL_TIM_IC_CaptureCallback>
 800af00:	e005      	b.n	800af0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f978 	bl	800b1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f989 	bl	800b220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	f003 0308 	and.w	r3, r3, #8
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d020      	beq.n	800af60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f003 0308 	and.w	r3, r3, #8
 800af24:	2b00      	cmp	r3, #0
 800af26:	d01b      	beq.n	800af60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f06f 0208 	mvn.w	r2, #8
 800af30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2204      	movs	r2, #4
 800af36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	f003 0303 	and.w	r3, r3, #3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f960 	bl	800b20c <HAL_TIM_IC_CaptureCallback>
 800af4c:	e005      	b.n	800af5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f952 	bl	800b1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f963 	bl	800b220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	f003 0310 	and.w	r3, r3, #16
 800af66:	2b00      	cmp	r3, #0
 800af68:	d020      	beq.n	800afac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f003 0310 	and.w	r3, r3, #16
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01b      	beq.n	800afac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f06f 0210 	mvn.w	r2, #16
 800af7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2208      	movs	r2, #8
 800af82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	69db      	ldr	r3, [r3, #28]
 800af8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d003      	beq.n	800af9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 f93a 	bl	800b20c <HAL_TIM_IC_CaptureCallback>
 800af98:	e005      	b.n	800afa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f92c 	bl	800b1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f93d 	bl	800b220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00c      	beq.n	800afd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f003 0301 	and.w	r3, r3, #1
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d007      	beq.n	800afd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f06f 0201 	mvn.w	r2, #1
 800afc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7f8 fe0e 	bl	8003bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d104      	bne.n	800afe4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00c      	beq.n	800affe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afea:	2b00      	cmp	r3, #0
 800afec:	d007      	beq.n	800affe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fec7 	bl	800bd8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00c      	beq.n	800b022 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d007      	beq.n	800b022 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b01a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 febf 	bl	800bda0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00c      	beq.n	800b046 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b032:	2b00      	cmp	r3, #0
 800b034:	d007      	beq.n	800b046 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b03e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 f8f7 	bl	800b234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	f003 0320 	and.w	r3, r3, #32
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00c      	beq.n	800b06a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f003 0320 	and.w	r3, r3, #32
 800b056:	2b00      	cmp	r3, #0
 800b058:	d007      	beq.n	800b06a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f06f 0220 	mvn.w	r2, #32
 800b062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 fe87 	bl	800bd78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00c      	beq.n	800b08e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d007      	beq.n	800b08e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 fe93 	bl	800bdb4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00c      	beq.n	800b0b2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d007      	beq.n	800b0b2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b0aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fe8b 	bl	800bdc8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00c      	beq.n	800b0d6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d007      	beq.n	800b0d6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b0ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fe83 	bl	800bddc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00c      	beq.n	800b0fa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d007      	beq.n	800b0fa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b0f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fe7b 	bl	800bdf0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d101      	bne.n	800b122 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b11e:	2302      	movs	r3, #2
 800b120:	e066      	b.n	800b1f0 <HAL_TIM_OC_ConfigChannel+0xec>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2201      	movs	r2, #1
 800b126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b14      	cmp	r3, #20
 800b12e:	d857      	bhi.n	800b1e0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b130:	a201      	add	r2, pc, #4	@ (adr r2, 800b138 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b136:	bf00      	nop
 800b138:	0800b18d 	.word	0x0800b18d
 800b13c:	0800b1e1 	.word	0x0800b1e1
 800b140:	0800b1e1 	.word	0x0800b1e1
 800b144:	0800b1e1 	.word	0x0800b1e1
 800b148:	0800b19b 	.word	0x0800b19b
 800b14c:	0800b1e1 	.word	0x0800b1e1
 800b150:	0800b1e1 	.word	0x0800b1e1
 800b154:	0800b1e1 	.word	0x0800b1e1
 800b158:	0800b1a9 	.word	0x0800b1a9
 800b15c:	0800b1e1 	.word	0x0800b1e1
 800b160:	0800b1e1 	.word	0x0800b1e1
 800b164:	0800b1e1 	.word	0x0800b1e1
 800b168:	0800b1b7 	.word	0x0800b1b7
 800b16c:	0800b1e1 	.word	0x0800b1e1
 800b170:	0800b1e1 	.word	0x0800b1e1
 800b174:	0800b1e1 	.word	0x0800b1e1
 800b178:	0800b1c5 	.word	0x0800b1c5
 800b17c:	0800b1e1 	.word	0x0800b1e1
 800b180:	0800b1e1 	.word	0x0800b1e1
 800b184:	0800b1e1 	.word	0x0800b1e1
 800b188:	0800b1d3 	.word	0x0800b1d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68b9      	ldr	r1, [r7, #8]
 800b192:	4618      	mov	r0, r3
 800b194:	f000 f958 	bl	800b448 <TIM_OC1_SetConfig>
      break;
 800b198:	e025      	b.n	800b1e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	68b9      	ldr	r1, [r7, #8]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 fa13 	bl	800b5cc <TIM_OC2_SetConfig>
      break;
 800b1a6:	e01e      	b.n	800b1e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68b9      	ldr	r1, [r7, #8]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 fabc 	bl	800b72c <TIM_OC3_SetConfig>
      break;
 800b1b4:	e017      	b.n	800b1e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	68b9      	ldr	r1, [r7, #8]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f000 fb63 	bl	800b888 <TIM_OC4_SetConfig>
      break;
 800b1c2:	e010      	b.n	800b1e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68b9      	ldr	r1, [r7, #8]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 fc0c 	bl	800b9e8 <TIM_OC5_SetConfig>
      break;
 800b1d0:	e009      	b.n	800b1e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68b9      	ldr	r1, [r7, #8]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 fc87 	bl	800baec <TIM_OC6_SetConfig>
      break;
 800b1de:	e002      	b.n	800b1e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b1e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b214:	bf00      	nop
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b228:	bf00      	nop
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a6b      	ldr	r2, [pc, #428]	@ (800b408 <TIM_Base_SetConfig+0x1c0>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d02b      	beq.n	800b2b8 <TIM_Base_SetConfig+0x70>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a6a      	ldr	r2, [pc, #424]	@ (800b40c <TIM_Base_SetConfig+0x1c4>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d027      	beq.n	800b2b8 <TIM_Base_SetConfig+0x70>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b26e:	d023      	beq.n	800b2b8 <TIM_Base_SetConfig+0x70>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b276:	d01f      	beq.n	800b2b8 <TIM_Base_SetConfig+0x70>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a65      	ldr	r2, [pc, #404]	@ (800b410 <TIM_Base_SetConfig+0x1c8>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d01b      	beq.n	800b2b8 <TIM_Base_SetConfig+0x70>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a64      	ldr	r2, [pc, #400]	@ (800b414 <TIM_Base_SetConfig+0x1cc>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d017      	beq.n	800b2b8 <TIM_Base_SetConfig+0x70>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a63      	ldr	r2, [pc, #396]	@ (800b418 <TIM_Base_SetConfig+0x1d0>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d013      	beq.n	800b2b8 <TIM_Base_SetConfig+0x70>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a62      	ldr	r2, [pc, #392]	@ (800b41c <TIM_Base_SetConfig+0x1d4>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d00f      	beq.n	800b2b8 <TIM_Base_SetConfig+0x70>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a61      	ldr	r2, [pc, #388]	@ (800b420 <TIM_Base_SetConfig+0x1d8>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d00b      	beq.n	800b2b8 <TIM_Base_SetConfig+0x70>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a60      	ldr	r2, [pc, #384]	@ (800b424 <TIM_Base_SetConfig+0x1dc>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d007      	beq.n	800b2b8 <TIM_Base_SetConfig+0x70>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a5f      	ldr	r2, [pc, #380]	@ (800b428 <TIM_Base_SetConfig+0x1e0>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d003      	beq.n	800b2b8 <TIM_Base_SetConfig+0x70>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a5e      	ldr	r2, [pc, #376]	@ (800b42c <TIM_Base_SetConfig+0x1e4>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d108      	bne.n	800b2ca <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a4e      	ldr	r2, [pc, #312]	@ (800b408 <TIM_Base_SetConfig+0x1c0>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d043      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a4d      	ldr	r2, [pc, #308]	@ (800b40c <TIM_Base_SetConfig+0x1c4>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d03f      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2e0:	d03b      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2e8:	d037      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a48      	ldr	r2, [pc, #288]	@ (800b410 <TIM_Base_SetConfig+0x1c8>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d033      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a47      	ldr	r2, [pc, #284]	@ (800b414 <TIM_Base_SetConfig+0x1cc>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d02f      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a46      	ldr	r2, [pc, #280]	@ (800b418 <TIM_Base_SetConfig+0x1d0>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d02b      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a45      	ldr	r2, [pc, #276]	@ (800b41c <TIM_Base_SetConfig+0x1d4>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d027      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a44      	ldr	r2, [pc, #272]	@ (800b420 <TIM_Base_SetConfig+0x1d8>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d023      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a43      	ldr	r2, [pc, #268]	@ (800b424 <TIM_Base_SetConfig+0x1dc>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d01f      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a42      	ldr	r2, [pc, #264]	@ (800b428 <TIM_Base_SetConfig+0x1e0>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d01b      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a41      	ldr	r2, [pc, #260]	@ (800b42c <TIM_Base_SetConfig+0x1e4>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d017      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a40      	ldr	r2, [pc, #256]	@ (800b430 <TIM_Base_SetConfig+0x1e8>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d013      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a3f      	ldr	r2, [pc, #252]	@ (800b434 <TIM_Base_SetConfig+0x1ec>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d00f      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a3e      	ldr	r2, [pc, #248]	@ (800b438 <TIM_Base_SetConfig+0x1f0>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d00b      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a3d      	ldr	r2, [pc, #244]	@ (800b43c <TIM_Base_SetConfig+0x1f4>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d007      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a3c      	ldr	r2, [pc, #240]	@ (800b440 <TIM_Base_SetConfig+0x1f8>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d003      	beq.n	800b35a <TIM_Base_SetConfig+0x112>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a3b      	ldr	r2, [pc, #236]	@ (800b444 <TIM_Base_SetConfig+0x1fc>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d108      	bne.n	800b36c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	4313      	orrs	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	4313      	orrs	r3, r2
 800b378:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	689a      	ldr	r2, [r3, #8]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a1e      	ldr	r2, [pc, #120]	@ (800b408 <TIM_Base_SetConfig+0x1c0>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d023      	beq.n	800b3da <TIM_Base_SetConfig+0x192>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a1d      	ldr	r2, [pc, #116]	@ (800b40c <TIM_Base_SetConfig+0x1c4>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d01f      	beq.n	800b3da <TIM_Base_SetConfig+0x192>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a22      	ldr	r2, [pc, #136]	@ (800b428 <TIM_Base_SetConfig+0x1e0>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d01b      	beq.n	800b3da <TIM_Base_SetConfig+0x192>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4a21      	ldr	r2, [pc, #132]	@ (800b42c <TIM_Base_SetConfig+0x1e4>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d017      	beq.n	800b3da <TIM_Base_SetConfig+0x192>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a20      	ldr	r2, [pc, #128]	@ (800b430 <TIM_Base_SetConfig+0x1e8>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d013      	beq.n	800b3da <TIM_Base_SetConfig+0x192>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4a1f      	ldr	r2, [pc, #124]	@ (800b434 <TIM_Base_SetConfig+0x1ec>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d00f      	beq.n	800b3da <TIM_Base_SetConfig+0x192>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a1e      	ldr	r2, [pc, #120]	@ (800b438 <TIM_Base_SetConfig+0x1f0>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d00b      	beq.n	800b3da <TIM_Base_SetConfig+0x192>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a1d      	ldr	r2, [pc, #116]	@ (800b43c <TIM_Base_SetConfig+0x1f4>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d007      	beq.n	800b3da <TIM_Base_SetConfig+0x192>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a1c      	ldr	r2, [pc, #112]	@ (800b440 <TIM_Base_SetConfig+0x1f8>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d003      	beq.n	800b3da <TIM_Base_SetConfig+0x192>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a1b      	ldr	r2, [pc, #108]	@ (800b444 <TIM_Base_SetConfig+0x1fc>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d103      	bne.n	800b3e2 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	691a      	ldr	r2, [r3, #16]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f043 0204 	orr.w	r2, r3, #4
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	601a      	str	r2, [r3, #0]
}
 800b3fa:	bf00      	nop
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	40012c00 	.word	0x40012c00
 800b40c:	50012c00 	.word	0x50012c00
 800b410:	40000400 	.word	0x40000400
 800b414:	50000400 	.word	0x50000400
 800b418:	40000800 	.word	0x40000800
 800b41c:	50000800 	.word	0x50000800
 800b420:	40000c00 	.word	0x40000c00
 800b424:	50000c00 	.word	0x50000c00
 800b428:	40013400 	.word	0x40013400
 800b42c:	50013400 	.word	0x50013400
 800b430:	40014000 	.word	0x40014000
 800b434:	50014000 	.word	0x50014000
 800b438:	40014400 	.word	0x40014400
 800b43c:	50014400 	.word	0x50014400
 800b440:	40014800 	.word	0x40014800
 800b444:	50014800 	.word	0x50014800

0800b448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a1b      	ldr	r3, [r3, #32]
 800b45c:	f023 0201 	bic.w	r2, r3, #1
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	699b      	ldr	r3, [r3, #24]
 800b46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b47a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f023 0303 	bic.w	r3, r3, #3
 800b482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f023 0302 	bic.w	r3, r3, #2
 800b494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a40      	ldr	r2, [pc, #256]	@ (800b5a4 <TIM_OC1_SetConfig+0x15c>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d023      	beq.n	800b4f0 <TIM_OC1_SetConfig+0xa8>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a3f      	ldr	r2, [pc, #252]	@ (800b5a8 <TIM_OC1_SetConfig+0x160>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d01f      	beq.n	800b4f0 <TIM_OC1_SetConfig+0xa8>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a3e      	ldr	r2, [pc, #248]	@ (800b5ac <TIM_OC1_SetConfig+0x164>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d01b      	beq.n	800b4f0 <TIM_OC1_SetConfig+0xa8>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a3d      	ldr	r2, [pc, #244]	@ (800b5b0 <TIM_OC1_SetConfig+0x168>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d017      	beq.n	800b4f0 <TIM_OC1_SetConfig+0xa8>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a3c      	ldr	r2, [pc, #240]	@ (800b5b4 <TIM_OC1_SetConfig+0x16c>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d013      	beq.n	800b4f0 <TIM_OC1_SetConfig+0xa8>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a3b      	ldr	r2, [pc, #236]	@ (800b5b8 <TIM_OC1_SetConfig+0x170>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d00f      	beq.n	800b4f0 <TIM_OC1_SetConfig+0xa8>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4a3a      	ldr	r2, [pc, #232]	@ (800b5bc <TIM_OC1_SetConfig+0x174>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d00b      	beq.n	800b4f0 <TIM_OC1_SetConfig+0xa8>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a39      	ldr	r2, [pc, #228]	@ (800b5c0 <TIM_OC1_SetConfig+0x178>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d007      	beq.n	800b4f0 <TIM_OC1_SetConfig+0xa8>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4a38      	ldr	r2, [pc, #224]	@ (800b5c4 <TIM_OC1_SetConfig+0x17c>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d003      	beq.n	800b4f0 <TIM_OC1_SetConfig+0xa8>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a37      	ldr	r2, [pc, #220]	@ (800b5c8 <TIM_OC1_SetConfig+0x180>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d10c      	bne.n	800b50a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	f023 0308 	bic.w	r3, r3, #8
 800b4f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	697a      	ldr	r2, [r7, #20]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	f023 0304 	bic.w	r3, r3, #4
 800b508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a25      	ldr	r2, [pc, #148]	@ (800b5a4 <TIM_OC1_SetConfig+0x15c>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d023      	beq.n	800b55a <TIM_OC1_SetConfig+0x112>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4a24      	ldr	r2, [pc, #144]	@ (800b5a8 <TIM_OC1_SetConfig+0x160>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d01f      	beq.n	800b55a <TIM_OC1_SetConfig+0x112>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4a23      	ldr	r2, [pc, #140]	@ (800b5ac <TIM_OC1_SetConfig+0x164>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d01b      	beq.n	800b55a <TIM_OC1_SetConfig+0x112>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a22      	ldr	r2, [pc, #136]	@ (800b5b0 <TIM_OC1_SetConfig+0x168>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d017      	beq.n	800b55a <TIM_OC1_SetConfig+0x112>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4a21      	ldr	r2, [pc, #132]	@ (800b5b4 <TIM_OC1_SetConfig+0x16c>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d013      	beq.n	800b55a <TIM_OC1_SetConfig+0x112>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4a20      	ldr	r2, [pc, #128]	@ (800b5b8 <TIM_OC1_SetConfig+0x170>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d00f      	beq.n	800b55a <TIM_OC1_SetConfig+0x112>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4a1f      	ldr	r2, [pc, #124]	@ (800b5bc <TIM_OC1_SetConfig+0x174>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d00b      	beq.n	800b55a <TIM_OC1_SetConfig+0x112>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4a1e      	ldr	r2, [pc, #120]	@ (800b5c0 <TIM_OC1_SetConfig+0x178>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d007      	beq.n	800b55a <TIM_OC1_SetConfig+0x112>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4a1d      	ldr	r2, [pc, #116]	@ (800b5c4 <TIM_OC1_SetConfig+0x17c>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d003      	beq.n	800b55a <TIM_OC1_SetConfig+0x112>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4a1c      	ldr	r2, [pc, #112]	@ (800b5c8 <TIM_OC1_SetConfig+0x180>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d111      	bne.n	800b57e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	4313      	orrs	r3, r2
 800b572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	693a      	ldr	r2, [r7, #16]
 800b582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	697a      	ldr	r2, [r7, #20]
 800b596:	621a      	str	r2, [r3, #32]
}
 800b598:	bf00      	nop
 800b59a:	371c      	adds	r7, #28
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	40012c00 	.word	0x40012c00
 800b5a8:	50012c00 	.word	0x50012c00
 800b5ac:	40013400 	.word	0x40013400
 800b5b0:	50013400 	.word	0x50013400
 800b5b4:	40014000 	.word	0x40014000
 800b5b8:	50014000 	.word	0x50014000
 800b5bc:	40014400 	.word	0x40014400
 800b5c0:	50014400 	.word	0x50014400
 800b5c4:	40014800 	.word	0x40014800
 800b5c8:	50014800 	.word	0x50014800

0800b5cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a1b      	ldr	r3, [r3, #32]
 800b5e0:	f023 0210 	bic.w	r2, r3, #16
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	699b      	ldr	r3, [r3, #24]
 800b5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b5fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	021b      	lsls	r3, r3, #8
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	4313      	orrs	r3, r2
 800b612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	f023 0320 	bic.w	r3, r3, #32
 800b61a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	011b      	lsls	r3, r3, #4
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	4313      	orrs	r3, r2
 800b626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a36      	ldr	r2, [pc, #216]	@ (800b704 <TIM_OC2_SetConfig+0x138>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d00b      	beq.n	800b648 <TIM_OC2_SetConfig+0x7c>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a35      	ldr	r2, [pc, #212]	@ (800b708 <TIM_OC2_SetConfig+0x13c>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d007      	beq.n	800b648 <TIM_OC2_SetConfig+0x7c>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a34      	ldr	r2, [pc, #208]	@ (800b70c <TIM_OC2_SetConfig+0x140>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d003      	beq.n	800b648 <TIM_OC2_SetConfig+0x7c>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a33      	ldr	r2, [pc, #204]	@ (800b710 <TIM_OC2_SetConfig+0x144>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d10d      	bne.n	800b664 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b64e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	011b      	lsls	r3, r3, #4
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	4313      	orrs	r3, r2
 800b65a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b662:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a27      	ldr	r2, [pc, #156]	@ (800b704 <TIM_OC2_SetConfig+0x138>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d023      	beq.n	800b6b4 <TIM_OC2_SetConfig+0xe8>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a26      	ldr	r2, [pc, #152]	@ (800b708 <TIM_OC2_SetConfig+0x13c>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d01f      	beq.n	800b6b4 <TIM_OC2_SetConfig+0xe8>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a25      	ldr	r2, [pc, #148]	@ (800b70c <TIM_OC2_SetConfig+0x140>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d01b      	beq.n	800b6b4 <TIM_OC2_SetConfig+0xe8>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a24      	ldr	r2, [pc, #144]	@ (800b710 <TIM_OC2_SetConfig+0x144>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d017      	beq.n	800b6b4 <TIM_OC2_SetConfig+0xe8>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a23      	ldr	r2, [pc, #140]	@ (800b714 <TIM_OC2_SetConfig+0x148>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d013      	beq.n	800b6b4 <TIM_OC2_SetConfig+0xe8>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a22      	ldr	r2, [pc, #136]	@ (800b718 <TIM_OC2_SetConfig+0x14c>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d00f      	beq.n	800b6b4 <TIM_OC2_SetConfig+0xe8>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a21      	ldr	r2, [pc, #132]	@ (800b71c <TIM_OC2_SetConfig+0x150>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d00b      	beq.n	800b6b4 <TIM_OC2_SetConfig+0xe8>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a20      	ldr	r2, [pc, #128]	@ (800b720 <TIM_OC2_SetConfig+0x154>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d007      	beq.n	800b6b4 <TIM_OC2_SetConfig+0xe8>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a1f      	ldr	r2, [pc, #124]	@ (800b724 <TIM_OC2_SetConfig+0x158>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d003      	beq.n	800b6b4 <TIM_OC2_SetConfig+0xe8>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a1e      	ldr	r2, [pc, #120]	@ (800b728 <TIM_OC2_SetConfig+0x15c>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d113      	bne.n	800b6dc <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b6ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b6c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	621a      	str	r2, [r3, #32]
}
 800b6f6:	bf00      	nop
 800b6f8:	371c      	adds	r7, #28
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	40012c00 	.word	0x40012c00
 800b708:	50012c00 	.word	0x50012c00
 800b70c:	40013400 	.word	0x40013400
 800b710:	50013400 	.word	0x50013400
 800b714:	40014000 	.word	0x40014000
 800b718:	50014000 	.word	0x50014000
 800b71c:	40014400 	.word	0x40014400
 800b720:	50014400 	.word	0x50014400
 800b724:	40014800 	.word	0x40014800
 800b728:	50014800 	.word	0x50014800

0800b72c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b087      	sub	sp, #28
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6a1b      	ldr	r3, [r3, #32]
 800b740:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	69db      	ldr	r3, [r3, #28]
 800b752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b75a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b75e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 0303 	bic.w	r3, r3, #3
 800b766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	4313      	orrs	r3, r2
 800b770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	021b      	lsls	r3, r3, #8
 800b780:	697a      	ldr	r2, [r7, #20]
 800b782:	4313      	orrs	r3, r2
 800b784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a35      	ldr	r2, [pc, #212]	@ (800b860 <TIM_OC3_SetConfig+0x134>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d00b      	beq.n	800b7a6 <TIM_OC3_SetConfig+0x7a>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a34      	ldr	r2, [pc, #208]	@ (800b864 <TIM_OC3_SetConfig+0x138>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d007      	beq.n	800b7a6 <TIM_OC3_SetConfig+0x7a>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a33      	ldr	r2, [pc, #204]	@ (800b868 <TIM_OC3_SetConfig+0x13c>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d003      	beq.n	800b7a6 <TIM_OC3_SetConfig+0x7a>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a32      	ldr	r2, [pc, #200]	@ (800b86c <TIM_OC3_SetConfig+0x140>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d10d      	bne.n	800b7c2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b7ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	021b      	lsls	r3, r3, #8
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b7c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a26      	ldr	r2, [pc, #152]	@ (800b860 <TIM_OC3_SetConfig+0x134>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d023      	beq.n	800b812 <TIM_OC3_SetConfig+0xe6>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a25      	ldr	r2, [pc, #148]	@ (800b864 <TIM_OC3_SetConfig+0x138>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d01f      	beq.n	800b812 <TIM_OC3_SetConfig+0xe6>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a24      	ldr	r2, [pc, #144]	@ (800b868 <TIM_OC3_SetConfig+0x13c>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d01b      	beq.n	800b812 <TIM_OC3_SetConfig+0xe6>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a23      	ldr	r2, [pc, #140]	@ (800b86c <TIM_OC3_SetConfig+0x140>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d017      	beq.n	800b812 <TIM_OC3_SetConfig+0xe6>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a22      	ldr	r2, [pc, #136]	@ (800b870 <TIM_OC3_SetConfig+0x144>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d013      	beq.n	800b812 <TIM_OC3_SetConfig+0xe6>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a21      	ldr	r2, [pc, #132]	@ (800b874 <TIM_OC3_SetConfig+0x148>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d00f      	beq.n	800b812 <TIM_OC3_SetConfig+0xe6>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a20      	ldr	r2, [pc, #128]	@ (800b878 <TIM_OC3_SetConfig+0x14c>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d00b      	beq.n	800b812 <TIM_OC3_SetConfig+0xe6>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a1f      	ldr	r2, [pc, #124]	@ (800b87c <TIM_OC3_SetConfig+0x150>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d007      	beq.n	800b812 <TIM_OC3_SetConfig+0xe6>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a1e      	ldr	r2, [pc, #120]	@ (800b880 <TIM_OC3_SetConfig+0x154>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d003      	beq.n	800b812 <TIM_OC3_SetConfig+0xe6>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a1d      	ldr	r2, [pc, #116]	@ (800b884 <TIM_OC3_SetConfig+0x158>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d113      	bne.n	800b83a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	011b      	lsls	r3, r3, #4
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	011b      	lsls	r3, r3, #4
 800b834:	693a      	ldr	r2, [r7, #16]
 800b836:	4313      	orrs	r3, r2
 800b838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	685a      	ldr	r2, [r3, #4]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	621a      	str	r2, [r3, #32]
}
 800b854:	bf00      	nop
 800b856:	371c      	adds	r7, #28
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr
 800b860:	40012c00 	.word	0x40012c00
 800b864:	50012c00 	.word	0x50012c00
 800b868:	40013400 	.word	0x40013400
 800b86c:	50013400 	.word	0x50013400
 800b870:	40014000 	.word	0x40014000
 800b874:	50014000 	.word	0x50014000
 800b878:	40014400 	.word	0x40014400
 800b87c:	50014400 	.word	0x50014400
 800b880:	40014800 	.word	0x40014800
 800b884:	50014800 	.word	0x50014800

0800b888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b888:	b480      	push	{r7}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6a1b      	ldr	r3, [r3, #32]
 800b896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a1b      	ldr	r3, [r3, #32]
 800b89c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	69db      	ldr	r3, [r3, #28]
 800b8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b8b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	021b      	lsls	r3, r3, #8
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b8d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	031b      	lsls	r3, r3, #12
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a36      	ldr	r2, [pc, #216]	@ (800b9c0 <TIM_OC4_SetConfig+0x138>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d00b      	beq.n	800b904 <TIM_OC4_SetConfig+0x7c>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a35      	ldr	r2, [pc, #212]	@ (800b9c4 <TIM_OC4_SetConfig+0x13c>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d007      	beq.n	800b904 <TIM_OC4_SetConfig+0x7c>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a34      	ldr	r2, [pc, #208]	@ (800b9c8 <TIM_OC4_SetConfig+0x140>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d003      	beq.n	800b904 <TIM_OC4_SetConfig+0x7c>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a33      	ldr	r2, [pc, #204]	@ (800b9cc <TIM_OC4_SetConfig+0x144>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d10d      	bne.n	800b920 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b90a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	031b      	lsls	r3, r3, #12
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	4313      	orrs	r3, r2
 800b916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b91e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a27      	ldr	r2, [pc, #156]	@ (800b9c0 <TIM_OC4_SetConfig+0x138>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d023      	beq.n	800b970 <TIM_OC4_SetConfig+0xe8>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a26      	ldr	r2, [pc, #152]	@ (800b9c4 <TIM_OC4_SetConfig+0x13c>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d01f      	beq.n	800b970 <TIM_OC4_SetConfig+0xe8>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a25      	ldr	r2, [pc, #148]	@ (800b9c8 <TIM_OC4_SetConfig+0x140>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d01b      	beq.n	800b970 <TIM_OC4_SetConfig+0xe8>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a24      	ldr	r2, [pc, #144]	@ (800b9cc <TIM_OC4_SetConfig+0x144>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d017      	beq.n	800b970 <TIM_OC4_SetConfig+0xe8>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a23      	ldr	r2, [pc, #140]	@ (800b9d0 <TIM_OC4_SetConfig+0x148>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d013      	beq.n	800b970 <TIM_OC4_SetConfig+0xe8>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a22      	ldr	r2, [pc, #136]	@ (800b9d4 <TIM_OC4_SetConfig+0x14c>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d00f      	beq.n	800b970 <TIM_OC4_SetConfig+0xe8>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a21      	ldr	r2, [pc, #132]	@ (800b9d8 <TIM_OC4_SetConfig+0x150>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d00b      	beq.n	800b970 <TIM_OC4_SetConfig+0xe8>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a20      	ldr	r2, [pc, #128]	@ (800b9dc <TIM_OC4_SetConfig+0x154>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d007      	beq.n	800b970 <TIM_OC4_SetConfig+0xe8>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a1f      	ldr	r2, [pc, #124]	@ (800b9e0 <TIM_OC4_SetConfig+0x158>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d003      	beq.n	800b970 <TIM_OC4_SetConfig+0xe8>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a1e      	ldr	r2, [pc, #120]	@ (800b9e4 <TIM_OC4_SetConfig+0x15c>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d113      	bne.n	800b998 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b976:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b97e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	695b      	ldr	r3, [r3, #20]
 800b984:	019b      	lsls	r3, r3, #6
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	4313      	orrs	r3, r2
 800b98a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	019b      	lsls	r3, r3, #6
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	4313      	orrs	r3, r2
 800b996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	693a      	ldr	r2, [r7, #16]
 800b99c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	685a      	ldr	r2, [r3, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	621a      	str	r2, [r3, #32]
}
 800b9b2:	bf00      	nop
 800b9b4:	371c      	adds	r7, #28
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	40012c00 	.word	0x40012c00
 800b9c4:	50012c00 	.word	0x50012c00
 800b9c8:	40013400 	.word	0x40013400
 800b9cc:	50013400 	.word	0x50013400
 800b9d0:	40014000 	.word	0x40014000
 800b9d4:	50014000 	.word	0x50014000
 800b9d8:	40014400 	.word	0x40014400
 800b9dc:	50014400 	.word	0x50014400
 800b9e0:	40014800 	.word	0x40014800
 800b9e4:	50014800 	.word	0x50014800

0800b9e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6a1b      	ldr	r3, [r3, #32]
 800b9fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ba2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	041b      	lsls	r3, r3, #16
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a21      	ldr	r2, [pc, #132]	@ (800bac4 <TIM_OC5_SetConfig+0xdc>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d023      	beq.n	800ba8a <TIM_OC5_SetConfig+0xa2>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a20      	ldr	r2, [pc, #128]	@ (800bac8 <TIM_OC5_SetConfig+0xe0>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d01f      	beq.n	800ba8a <TIM_OC5_SetConfig+0xa2>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a1f      	ldr	r2, [pc, #124]	@ (800bacc <TIM_OC5_SetConfig+0xe4>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d01b      	beq.n	800ba8a <TIM_OC5_SetConfig+0xa2>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a1e      	ldr	r2, [pc, #120]	@ (800bad0 <TIM_OC5_SetConfig+0xe8>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d017      	beq.n	800ba8a <TIM_OC5_SetConfig+0xa2>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a1d      	ldr	r2, [pc, #116]	@ (800bad4 <TIM_OC5_SetConfig+0xec>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d013      	beq.n	800ba8a <TIM_OC5_SetConfig+0xa2>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4a1c      	ldr	r2, [pc, #112]	@ (800bad8 <TIM_OC5_SetConfig+0xf0>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d00f      	beq.n	800ba8a <TIM_OC5_SetConfig+0xa2>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a1b      	ldr	r2, [pc, #108]	@ (800badc <TIM_OC5_SetConfig+0xf4>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d00b      	beq.n	800ba8a <TIM_OC5_SetConfig+0xa2>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4a1a      	ldr	r2, [pc, #104]	@ (800bae0 <TIM_OC5_SetConfig+0xf8>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d007      	beq.n	800ba8a <TIM_OC5_SetConfig+0xa2>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a19      	ldr	r2, [pc, #100]	@ (800bae4 <TIM_OC5_SetConfig+0xfc>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d003      	beq.n	800ba8a <TIM_OC5_SetConfig+0xa2>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4a18      	ldr	r2, [pc, #96]	@ (800bae8 <TIM_OC5_SetConfig+0x100>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d109      	bne.n	800ba9e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	695b      	ldr	r3, [r3, #20]
 800ba96:	021b      	lsls	r3, r3, #8
 800ba98:	697a      	ldr	r2, [r7, #20]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	621a      	str	r2, [r3, #32]
}
 800bab8:	bf00      	nop
 800baba:	371c      	adds	r7, #28
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	40012c00 	.word	0x40012c00
 800bac8:	50012c00 	.word	0x50012c00
 800bacc:	40013400 	.word	0x40013400
 800bad0:	50013400 	.word	0x50013400
 800bad4:	40014000 	.word	0x40014000
 800bad8:	50014000 	.word	0x50014000
 800badc:	40014400 	.word	0x40014400
 800bae0:	50014400 	.word	0x50014400
 800bae4:	40014800 	.word	0x40014800
 800bae8:	50014800 	.word	0x50014800

0800baec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800baec:	b480      	push	{r7}
 800baee:	b087      	sub	sp, #28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	021b      	lsls	r3, r3, #8
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	051b      	lsls	r3, r3, #20
 800bb3a:	693a      	ldr	r2, [r7, #16]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a22      	ldr	r2, [pc, #136]	@ (800bbcc <TIM_OC6_SetConfig+0xe0>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d023      	beq.n	800bb90 <TIM_OC6_SetConfig+0xa4>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a21      	ldr	r2, [pc, #132]	@ (800bbd0 <TIM_OC6_SetConfig+0xe4>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d01f      	beq.n	800bb90 <TIM_OC6_SetConfig+0xa4>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a20      	ldr	r2, [pc, #128]	@ (800bbd4 <TIM_OC6_SetConfig+0xe8>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d01b      	beq.n	800bb90 <TIM_OC6_SetConfig+0xa4>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a1f      	ldr	r2, [pc, #124]	@ (800bbd8 <TIM_OC6_SetConfig+0xec>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d017      	beq.n	800bb90 <TIM_OC6_SetConfig+0xa4>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a1e      	ldr	r2, [pc, #120]	@ (800bbdc <TIM_OC6_SetConfig+0xf0>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d013      	beq.n	800bb90 <TIM_OC6_SetConfig+0xa4>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a1d      	ldr	r2, [pc, #116]	@ (800bbe0 <TIM_OC6_SetConfig+0xf4>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d00f      	beq.n	800bb90 <TIM_OC6_SetConfig+0xa4>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a1c      	ldr	r2, [pc, #112]	@ (800bbe4 <TIM_OC6_SetConfig+0xf8>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d00b      	beq.n	800bb90 <TIM_OC6_SetConfig+0xa4>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a1b      	ldr	r2, [pc, #108]	@ (800bbe8 <TIM_OC6_SetConfig+0xfc>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d007      	beq.n	800bb90 <TIM_OC6_SetConfig+0xa4>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a1a      	ldr	r2, [pc, #104]	@ (800bbec <TIM_OC6_SetConfig+0x100>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d003      	beq.n	800bb90 <TIM_OC6_SetConfig+0xa4>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a19      	ldr	r2, [pc, #100]	@ (800bbf0 <TIM_OC6_SetConfig+0x104>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d109      	bne.n	800bba4 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	029b      	lsls	r3, r3, #10
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	621a      	str	r2, [r3, #32]
}
 800bbbe:	bf00      	nop
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	40012c00 	.word	0x40012c00
 800bbd0:	50012c00 	.word	0x50012c00
 800bbd4:	40013400 	.word	0x40013400
 800bbd8:	50013400 	.word	0x50013400
 800bbdc:	40014000 	.word	0x40014000
 800bbe0:	50014000 	.word	0x50014000
 800bbe4:	40014400 	.word	0x40014400
 800bbe8:	50014400 	.word	0x50014400
 800bbec:	40014800 	.word	0x40014800
 800bbf0:	50014800 	.word	0x50014800

0800bbf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d101      	bne.n	800bc0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e097      	b.n	800bd3c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2202      	movs	r2, #2
 800bc18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a45      	ldr	r2, [pc, #276]	@ (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d00e      	beq.n	800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a44      	ldr	r2, [pc, #272]	@ (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d009      	beq.n	800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a42      	ldr	r2, [pc, #264]	@ (800bd50 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d004      	beq.n	800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a41      	ldr	r2, [pc, #260]	@ (800bd54 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d108      	bne.n	800bc66 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bc5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bc6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a2f      	ldr	r2, [pc, #188]	@ (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d040      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a2e      	ldr	r2, [pc, #184]	@ (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d03b      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bca0:	d036      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bcaa:	d031      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a29      	ldr	r2, [pc, #164]	@ (800bd58 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d02c      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a28      	ldr	r2, [pc, #160]	@ (800bd5c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d027      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a26      	ldr	r2, [pc, #152]	@ (800bd60 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d022      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a25      	ldr	r2, [pc, #148]	@ (800bd64 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d01d      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a23      	ldr	r2, [pc, #140]	@ (800bd68 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d018      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a22      	ldr	r2, [pc, #136]	@ (800bd6c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d013      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a18      	ldr	r2, [pc, #96]	@ (800bd50 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d00e      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a17      	ldr	r2, [pc, #92]	@ (800bd54 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d009      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a1b      	ldr	r2, [pc, #108]	@ (800bd70 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d004      	beq.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a1a      	ldr	r2, [pc, #104]	@ (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d10c      	bne.n	800bd2a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr
 800bd48:	40012c00 	.word	0x40012c00
 800bd4c:	50012c00 	.word	0x50012c00
 800bd50:	40013400 	.word	0x40013400
 800bd54:	50013400 	.word	0x50013400
 800bd58:	40000400 	.word	0x40000400
 800bd5c:	50000400 	.word	0x50000400
 800bd60:	40000800 	.word	0x40000800
 800bd64:	50000800 	.word	0x50000800
 800bd68:	40000c00 	.word	0x40000c00
 800bd6c:	50000c00 	.word	0x50000c00
 800bd70:	40014000 	.word	0x40014000
 800bd74:	50014000 	.word	0x50014000

0800bd78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd80:	bf00      	nop
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bdbc:	bf00      	nop
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bde4:	bf00      	nop
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bdf8:	bf00      	nop
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d101      	bne.n	800be16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e042      	b.n	800be9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d106      	bne.n	800be2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7f7 fd2f 	bl	800388c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2224      	movs	r2, #36	@ 0x24
 800be32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f022 0201 	bic.w	r2, r2, #1
 800be44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d002      	beq.n	800be54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fe72 	bl	800cb38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fcc1 	bl	800c7dc <UART_SetConfig>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d101      	bne.n	800be64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	e01b      	b.n	800be9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	685a      	ldr	r2, [r3, #4]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	689a      	ldr	r2, [r3, #8]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f042 0201 	orr.w	r2, r2, #1
 800be92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 fef1 	bl	800cc7c <UART_CheckIdleState>
 800be9a:	4603      	mov	r3, r0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b08a      	sub	sp, #40	@ 0x28
 800bea8:	af02      	add	r7, sp, #8
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	603b      	str	r3, [r7, #0]
 800beb0:	4613      	mov	r3, r2
 800beb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beba:	2b20      	cmp	r3, #32
 800bebc:	d17b      	bne.n	800bfb6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d002      	beq.n	800beca <HAL_UART_Transmit+0x26>
 800bec4:	88fb      	ldrh	r3, [r7, #6]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d101      	bne.n	800bece <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800beca:	2301      	movs	r3, #1
 800becc:	e074      	b.n	800bfb8 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2221      	movs	r2, #33	@ 0x21
 800beda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bede:	f7f8 f963 	bl	80041a8 <HAL_GetTick>
 800bee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	88fa      	ldrh	r2, [r7, #6]
 800bee8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	88fa      	ldrh	r2, [r7, #6]
 800bef0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800befc:	d108      	bne.n	800bf10 <HAL_UART_Transmit+0x6c>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d104      	bne.n	800bf10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bf06:	2300      	movs	r3, #0
 800bf08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	61bb      	str	r3, [r7, #24]
 800bf0e:	e003      	b.n	800bf18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf14:	2300      	movs	r3, #0
 800bf16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bf18:	e030      	b.n	800bf7c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	9300      	str	r3, [sp, #0]
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	2200      	movs	r2, #0
 800bf22:	2180      	movs	r1, #128	@ 0x80
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f000 ff53 	bl	800cdd0 <UART_WaitOnFlagUntilTimeout>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d005      	beq.n	800bf3c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2220      	movs	r2, #32
 800bf34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	e03d      	b.n	800bfb8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10b      	bne.n	800bf5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	881b      	ldrh	r3, [r3, #0]
 800bf46:	461a      	mov	r2, r3
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf50:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	3302      	adds	r3, #2
 800bf56:	61bb      	str	r3, [r7, #24]
 800bf58:	e007      	b.n	800bf6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	781a      	ldrb	r2, [r3, #0]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	3301      	adds	r3, #1
 800bf68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	3b01      	subs	r3, #1
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1c8      	bne.n	800bf1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	2140      	movs	r1, #64	@ 0x40
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f000 ff1c 	bl	800cdd0 <UART_WaitOnFlagUntilTimeout>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d005      	beq.n	800bfaa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2220      	movs	r2, #32
 800bfa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	e006      	b.n	800bfb8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2220      	movs	r2, #32
 800bfae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	e000      	b.n	800bfb8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bfb6:	2302      	movs	r3, #2
  }
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3720      	adds	r7, #32
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b08c      	sub	sp, #48	@ 0x30
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	4613      	mov	r3, r2
 800bfcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800bfce:	88fb      	ldrh	r3, [r7, #6]
 800bfd0:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfd8:	2b20      	cmp	r3, #32
 800bfda:	f040 80ad 	bne.w	800c138 <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <HAL_UART_Transmit_DMA+0x2a>
 800bfe4:	88fb      	ldrh	r3, [r7, #6]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e0a5      	b.n	800c13a <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	88fa      	ldrh	r2, [r7, #6]
 800bff8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	88fa      	ldrh	r2, [r7, #6]
 800c000:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2221      	movs	r2, #33	@ 0x21
 800c010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if defined(USART_DMAREQUESTS_SW_WA)
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);

#endif /* USART_DMAREQUESTS_SW_WA */
    if (huart->hdmatx != NULL)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d06d      	beq.n	800c0f8 <HAL_UART_Transmit_DMA+0x138>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c020:	4a48      	ldr	r2, [pc, #288]	@ (800c144 <HAL_UART_Transmit_DMA+0x184>)
 800c022:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c028:	4a47      	ldr	r2, [pc, #284]	@ (800c148 <HAL_UART_Transmit_DMA+0x188>)
 800c02a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c030:	4a46      	ldr	r2, [pc, #280]	@ (800c14c <HAL_UART_Transmit_DMA+0x18c>)
 800c032:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c038:	2200      	movs	r2, #0
 800c03a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c044:	d106      	bne.n	800c054 <HAL_UART_Transmit_DMA+0x94>
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d102      	bne.n	800c054 <HAL_UART_Transmit_DMA+0x94>
      {
        nbByte = Size * 2U;
 800c04e:	88fb      	ldrh	r3, [r7, #6]
 800c050:	005b      	lsls	r3, r3, #1
 800c052:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c05a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d02d      	beq.n	800c0be <HAL_UART_Transmit_DMA+0xfe>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d024      	beq.n	800c0b6 <HAL_UART_Transmit_DMA+0xf6>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d01e      	beq.n	800c0b6 <HAL_UART_Transmit_DMA+0xf6>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c07c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800c082:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c08c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f103 0228 	add.w	r2, r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c09e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7f9 f8c1 	bl	8005230 <HAL_DMAEx_List_Start_IT>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c0b4:	e012      	b.n	800c0dc <HAL_UART_Transmit_DMA+0x11c>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c0bc:	e00e      	b.n	800c0dc <HAL_UART_Transmit_DMA+0x11c>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3328      	adds	r3, #40	@ 0x28
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c0d2:	f7f8 fb59 	bl	8004788 <HAL_DMA_Start_IT>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }

      if (status != HAL_OK)
 800c0dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d009      	beq.n	800c0f8 <HAL_UART_Transmit_DMA+0x138>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2210      	movs	r2, #16
 800c0e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2220      	movs	r2, #32
 800c0f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	e020      	b.n	800c13a <HAL_UART_Transmit_DMA+0x17a>
      }
    }
#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2240      	movs	r2, #64	@ 0x40
 800c0fe:	621a      	str	r2, [r3, #32]

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3308      	adds	r3, #8
 800c106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	e853 3f00 	ldrex	r3, [r3]
 800c10e:	617b      	str	r3, [r7, #20]
   return(result);
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c116:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	3308      	adds	r3, #8
 800c11e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c120:	627a      	str	r2, [r7, #36]	@ 0x24
 800c122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c124:	6a39      	ldr	r1, [r7, #32]
 800c126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c128:	e841 2300 	strex	r3, r2, [r1]
 800c12c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1e5      	bne.n	800c100 <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	e000      	b.n	800c13a <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 800c138:	2302      	movs	r3, #2
  }
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3730      	adds	r7, #48	@ 0x30
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	0800cff9 	.word	0x0800cff9
 800c148:	0800d08d 	.word	0x0800d08d
 800c14c:	0800d0a9 	.word	0x0800d0a9

0800c150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b0ba      	sub	sp, #232	@ 0xe8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	69db      	ldr	r3, [r3, #28]
 800c15e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c176:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c17a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c17e:	4013      	ands	r3, r2
 800c180:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d11b      	bne.n	800c1c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c190:	f003 0320 	and.w	r3, r3, #32
 800c194:	2b00      	cmp	r3, #0
 800c196:	d015      	beq.n	800c1c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c19c:	f003 0320 	and.w	r3, r3, #32
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d105      	bne.n	800c1b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d009      	beq.n	800c1c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 82e5 	beq.w	800c784 <HAL_UART_IRQHandler+0x634>
      {
        huart->RxISR(huart);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	4798      	blx	r3
      }
      return;
 800c1c2:	e2df      	b.n	800c784 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c1c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f000 8123 	beq.w	800c414 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c1ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c1d2:	4b8d      	ldr	r3, [pc, #564]	@ (800c408 <HAL_UART_IRQHandler+0x2b8>)
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d106      	bne.n	800c1e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c1da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c1de:	4b8b      	ldr	r3, [pc, #556]	@ (800c40c <HAL_UART_IRQHandler+0x2bc>)
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 8116 	beq.w	800c414 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d011      	beq.n	800c218 <HAL_UART_IRQHandler+0xc8>
 800c1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00b      	beq.n	800c218 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2201      	movs	r2, #1
 800c206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c20e:	f043 0201 	orr.w	r2, r3, #1
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c21c:	f003 0302 	and.w	r3, r3, #2
 800c220:	2b00      	cmp	r3, #0
 800c222:	d011      	beq.n	800c248 <HAL_UART_IRQHandler+0xf8>
 800c224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c228:	f003 0301 	and.w	r3, r3, #1
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00b      	beq.n	800c248 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2202      	movs	r2, #2
 800c236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c23e:	f043 0204 	orr.w	r2, r3, #4
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c24c:	f003 0304 	and.w	r3, r3, #4
 800c250:	2b00      	cmp	r3, #0
 800c252:	d011      	beq.n	800c278 <HAL_UART_IRQHandler+0x128>
 800c254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c258:	f003 0301 	and.w	r3, r3, #1
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00b      	beq.n	800c278 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2204      	movs	r2, #4
 800c266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c26e:	f043 0202 	orr.w	r2, r3, #2
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c27c:	f003 0308 	and.w	r3, r3, #8
 800c280:	2b00      	cmp	r3, #0
 800c282:	d017      	beq.n	800c2b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c288:	f003 0320 	and.w	r3, r3, #32
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d105      	bne.n	800c29c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c290:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c294:	4b5c      	ldr	r3, [pc, #368]	@ (800c408 <HAL_UART_IRQHandler+0x2b8>)
 800c296:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00b      	beq.n	800c2b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2208      	movs	r2, #8
 800c2a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2aa:	f043 0208 	orr.w	r2, r3, #8
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d012      	beq.n	800c2e6 <HAL_UART_IRQHandler+0x196>
 800c2c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00c      	beq.n	800c2e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2dc:	f043 0220 	orr.w	r2, r3, #32
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f000 824b 	beq.w	800c788 <HAL_UART_IRQHandler+0x638>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c2f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2f6:	f003 0320 	and.w	r3, r3, #32
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d013      	beq.n	800c326 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c2fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c302:	f003 0320 	and.w	r3, r3, #32
 800c306:	2b00      	cmp	r3, #0
 800c308:	d105      	bne.n	800c316 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c30a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c30e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c312:	2b00      	cmp	r3, #0
 800c314:	d007      	beq.n	800c326 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d003      	beq.n	800c326 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c32c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c33a:	2b40      	cmp	r3, #64	@ 0x40
 800c33c:	d005      	beq.n	800c34a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c33e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c342:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c346:	2b00      	cmp	r3, #0
 800c348:	d054      	beq.n	800c3f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fdee 	bl	800cf2c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c35a:	2b40      	cmp	r3, #64	@ 0x40
 800c35c:	d146      	bne.n	800c3ec <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3308      	adds	r3, #8
 800c364:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c368:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c36c:	e853 3f00 	ldrex	r3, [r3]
 800c370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c374:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c37c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	3308      	adds	r3, #8
 800c386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c38a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c38e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c39a:	e841 2300 	strex	r3, r2, [r1]
 800c39e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c3a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1d9      	bne.n	800c35e <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d017      	beq.n	800c3e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3ba:	4a15      	ldr	r2, [pc, #84]	@ (800c410 <HAL_UART_IRQHandler+0x2c0>)
 800c3bc:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7f8 fabb 	bl	8004940 <HAL_DMA_Abort_IT>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d019      	beq.n	800c404 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c3de:	4610      	mov	r0, r2
 800c3e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3e2:	e00f      	b.n	800c404 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 f9e3 	bl	800c7b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3ea:	e00b      	b.n	800c404 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f9df 	bl	800c7b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3f2:	e007      	b.n	800c404 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 f9db 	bl	800c7b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c402:	e1c1      	b.n	800c788 <HAL_UART_IRQHandler+0x638>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c404:	bf00      	nop
    return;
 800c406:	e1bf      	b.n	800c788 <HAL_UART_IRQHandler+0x638>
 800c408:	10000001 	.word	0x10000001
 800c40c:	04000120 	.word	0x04000120
 800c410:	0800d129 	.word	0x0800d129

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c418:	2b01      	cmp	r3, #1
 800c41a:	f040 816a 	bne.w	800c6f2 <HAL_UART_IRQHandler+0x5a2>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c422:	f003 0310 	and.w	r3, r3, #16
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 8163 	beq.w	800c6f2 <HAL_UART_IRQHandler+0x5a2>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c42c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c430:	f003 0310 	and.w	r3, r3, #16
 800c434:	2b00      	cmp	r3, #0
 800c436:	f000 815c 	beq.w	800c6f2 <HAL_UART_IRQHandler+0x5a2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2210      	movs	r2, #16
 800c440:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c44c:	2b40      	cmp	r3, #64	@ 0x40
 800c44e:	f040 80d2 	bne.w	800c5f6 <HAL_UART_IRQHandler+0x4a6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c45c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c460:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c464:	2b00      	cmp	r3, #0
 800c466:	f000 80ac 	beq.w	800c5c2 <HAL_UART_IRQHandler+0x472>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c470:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c474:	429a      	cmp	r2, r3
 800c476:	f080 80a4 	bcs.w	800c5c2 <HAL_UART_IRQHandler+0x472>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c480:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c48a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c48c:	2b81      	cmp	r3, #129	@ 0x81
 800c48e:	f000 8087 	beq.w	800c5a0 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c49e:	e853 3f00 	ldrex	r3, [r3]
 800c4a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c4a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c4aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c4bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c4c0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c4c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c4cc:	e841 2300 	strex	r3, r2, [r1]
 800c4d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c4d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1da      	bne.n	800c492 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	3308      	adds	r3, #8
 800c4e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4e6:	e853 3f00 	ldrex	r3, [r3]
 800c4ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c4ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c4ee:	f023 0301 	bic.w	r3, r3, #1
 800c4f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	3308      	adds	r3, #8
 800c4fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c500:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c504:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c506:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c508:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c50c:	e841 2300 	strex	r3, r2, [r1]
 800c510:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c512:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1e1      	bne.n	800c4dc <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	3308      	adds	r3, #8
 800c51e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c520:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c522:	e853 3f00 	ldrex	r3, [r3]
 800c526:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c528:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c52a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c52e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3308      	adds	r3, #8
 800c538:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c53c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c53e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c540:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c542:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c544:	e841 2300 	strex	r3, r2, [r1]
 800c548:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c54a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1e3      	bne.n	800c518 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2220      	movs	r2, #32
 800c554:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c566:	e853 3f00 	ldrex	r3, [r3]
 800c56a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c56c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c56e:	f023 0310 	bic.w	r3, r3, #16
 800c572:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	461a      	mov	r2, r3
 800c57c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c580:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c582:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c584:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c586:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c588:	e841 2300 	strex	r3, r2, [r1]
 800c58c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c58e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1e4      	bne.n	800c55e <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7f8 f954 	bl	8004848 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2202      	movs	r2, #2
 800c5a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f902 	bl	800c7c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c5c0:	e0e4      	b.n	800c78c <HAL_UART_IRQHandler+0x63c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c5c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	f040 80dd 	bne.w	800c78c <HAL_UART_IRQHandler+0x63c>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5da:	2b81      	cmp	r3, #129	@ 0x81
 800c5dc:	f040 80d6 	bne.w	800c78c <HAL_UART_IRQHandler+0x63c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2202      	movs	r2, #2
 800c5e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f8e8 	bl	800c7c4 <HAL_UARTEx_RxEventCallback>
      return;
 800c5f4:	e0ca      	b.n	800c78c <HAL_UART_IRQHandler+0x63c>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c602:	b29b      	uxth	r3, r3
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c610:	b29b      	uxth	r3, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 80bc 	beq.w	800c790 <HAL_UART_IRQHandler+0x640>
          && (nb_rx_data > 0U))
 800c618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 80b7 	beq.w	800c790 <HAL_UART_IRQHandler+0x640>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62a:	e853 3f00 	ldrex	r3, [r3]
 800c62e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c632:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c636:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c644:	647b      	str	r3, [r7, #68]	@ 0x44
 800c646:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c648:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c64a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c64c:	e841 2300 	strex	r3, r2, [r1]
 800c650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1e4      	bne.n	800c622 <HAL_UART_IRQHandler+0x4d2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3308      	adds	r3, #8
 800c65e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c662:	e853 3f00 	ldrex	r3, [r3]
 800c666:	623b      	str	r3, [r7, #32]
   return(result);
 800c668:	6a3b      	ldr	r3, [r7, #32]
 800c66a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c66e:	f023 0301 	bic.w	r3, r3, #1
 800c672:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3308      	adds	r3, #8
 800c67c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c680:	633a      	str	r2, [r7, #48]	@ 0x30
 800c682:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c684:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c688:	e841 2300 	strex	r3, r2, [r1]
 800c68c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1e1      	bne.n	800c658 <HAL_UART_IRQHandler+0x508>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2220      	movs	r2, #32
 800c698:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	e853 3f00 	ldrex	r3, [r3]
 800c6b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f023 0310 	bic.w	r3, r3, #16
 800c6bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c6ca:	61fb      	str	r3, [r7, #28]
 800c6cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ce:	69b9      	ldr	r1, [r7, #24]
 800c6d0:	69fa      	ldr	r2, [r7, #28]
 800c6d2:	e841 2300 	strex	r3, r2, [r1]
 800c6d6:	617b      	str	r3, [r7, #20]
   return(result);
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1e4      	bne.n	800c6a8 <HAL_UART_IRQHandler+0x558>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c6e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f86a 	bl	800c7c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6f0:	e04e      	b.n	800c790 <HAL_UART_IRQHandler+0x640>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d014      	beq.n	800c728 <HAL_UART_IRQHandler+0x5d8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c6fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c706:	2b00      	cmp	r3, #0
 800c708:	d105      	bne.n	800c716 <HAL_UART_IRQHandler+0x5c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c70a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c70e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c712:	2b00      	cmp	r3, #0
 800c714:	d008      	beq.n	800c728 <HAL_UART_IRQHandler+0x5d8>
  {
    if (huart->TxISR != NULL)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d03a      	beq.n	800c794 <HAL_UART_IRQHandler+0x644>
    {
      huart->TxISR(huart);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	4798      	blx	r3
    }
    return;
 800c726:	e035      	b.n	800c794 <HAL_UART_IRQHandler+0x644>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c72c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c730:	2b00      	cmp	r3, #0
 800c732:	d009      	beq.n	800c748 <HAL_UART_IRQHandler+0x5f8>
 800c734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d003      	beq.n	800c748 <HAL_UART_IRQHandler+0x5f8>
  {
    UART_EndTransmit_IT(huart);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fd03 	bl	800d14c <UART_EndTransmit_IT>
    return;
 800c746:	e026      	b.n	800c796 <HAL_UART_IRQHandler+0x646>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c74c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d009      	beq.n	800c768 <HAL_UART_IRQHandler+0x618>
 800c754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c758:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d003      	beq.n	800c768 <HAL_UART_IRQHandler+0x618>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 fd28 	bl	800d1b6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c766:	e016      	b.n	800c796 <HAL_UART_IRQHandler+0x646>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c76c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d010      	beq.n	800c796 <HAL_UART_IRQHandler+0x646>
 800c774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	da0c      	bge.n	800c796 <HAL_UART_IRQHandler+0x646>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 fd10 	bl	800d1a2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c782:	e008      	b.n	800c796 <HAL_UART_IRQHandler+0x646>
      return;
 800c784:	bf00      	nop
 800c786:	e006      	b.n	800c796 <HAL_UART_IRQHandler+0x646>
    return;
 800c788:	bf00      	nop
 800c78a:	e004      	b.n	800c796 <HAL_UART_IRQHandler+0x646>
      return;
 800c78c:	bf00      	nop
 800c78e:	e002      	b.n	800c796 <HAL_UART_IRQHandler+0x646>
      return;
 800c790:	bf00      	nop
 800c792:	e000      	b.n	800c796 <HAL_UART_IRQHandler+0x646>
    return;
 800c794:	bf00      	nop
  }
}
 800c796:	37e8      	adds	r7, #232	@ 0xe8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c7b8:	bf00      	nop
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c7d0:	bf00      	nop
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7e0:	b094      	sub	sp, #80	@ 0x50
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	4b83      	ldr	r3, [pc, #524]	@ (800ca00 <UART_SetConfig+0x224>)
 800c7f2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f6:	689a      	ldr	r2, [r3, #8]
 800c7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	431a      	orrs	r2, r3
 800c7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c800:	695b      	ldr	r3, [r3, #20]
 800c802:	431a      	orrs	r2, r3
 800c804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c806:	69db      	ldr	r3, [r3, #28]
 800c808:	4313      	orrs	r3, r2
 800c80a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	497c      	ldr	r1, [pc, #496]	@ (800ca04 <UART_SetConfig+0x228>)
 800c814:	4019      	ands	r1, r3
 800c816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c81c:	430b      	orrs	r3, r1
 800c81e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82c:	68d9      	ldr	r1, [r3, #12]
 800c82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	ea40 0301 	orr.w	r3, r0, r1
 800c836:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c83a:	699b      	ldr	r3, [r3, #24]
 800c83c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	4b6f      	ldr	r3, [pc, #444]	@ (800ca00 <UART_SetConfig+0x224>)
 800c844:	429a      	cmp	r2, r3
 800c846:	d009      	beq.n	800c85c <UART_SetConfig+0x80>
 800c848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	4b6e      	ldr	r3, [pc, #440]	@ (800ca08 <UART_SetConfig+0x22c>)
 800c84e:	429a      	cmp	r2, r3
 800c850:	d004      	beq.n	800c85c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c854:	6a1a      	ldr	r2, [r3, #32]
 800c856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c858:	4313      	orrs	r3, r2
 800c85a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c866:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c870:	430b      	orrs	r3, r1
 800c872:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c87a:	f023 000f 	bic.w	r0, r3, #15
 800c87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c880:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	ea40 0301 	orr.w	r3, r0, r1
 800c88a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	4b5e      	ldr	r3, [pc, #376]	@ (800ca0c <UART_SetConfig+0x230>)
 800c892:	429a      	cmp	r2, r3
 800c894:	d102      	bne.n	800c89c <UART_SetConfig+0xc0>
 800c896:	2301      	movs	r3, #1
 800c898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c89a:	e032      	b.n	800c902 <UART_SetConfig+0x126>
 800c89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	4b5b      	ldr	r3, [pc, #364]	@ (800ca10 <UART_SetConfig+0x234>)
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d102      	bne.n	800c8ac <UART_SetConfig+0xd0>
 800c8a6:	2302      	movs	r3, #2
 800c8a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8aa:	e02a      	b.n	800c902 <UART_SetConfig+0x126>
 800c8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	4b58      	ldr	r3, [pc, #352]	@ (800ca14 <UART_SetConfig+0x238>)
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d102      	bne.n	800c8bc <UART_SetConfig+0xe0>
 800c8b6:	2304      	movs	r3, #4
 800c8b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8ba:	e022      	b.n	800c902 <UART_SetConfig+0x126>
 800c8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	4b55      	ldr	r3, [pc, #340]	@ (800ca18 <UART_SetConfig+0x23c>)
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d102      	bne.n	800c8cc <UART_SetConfig+0xf0>
 800c8c6:	2308      	movs	r3, #8
 800c8c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8ca:	e01a      	b.n	800c902 <UART_SetConfig+0x126>
 800c8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	4b52      	ldr	r3, [pc, #328]	@ (800ca1c <UART_SetConfig+0x240>)
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d102      	bne.n	800c8dc <UART_SetConfig+0x100>
 800c8d6:	2310      	movs	r3, #16
 800c8d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8da:	e012      	b.n	800c902 <UART_SetConfig+0x126>
 800c8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	4b4f      	ldr	r3, [pc, #316]	@ (800ca20 <UART_SetConfig+0x244>)
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d103      	bne.n	800c8ee <UART_SetConfig+0x112>
 800c8e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800c8ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8ec:	e009      	b.n	800c902 <UART_SetConfig+0x126>
 800c8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	4b43      	ldr	r3, [pc, #268]	@ (800ca00 <UART_SetConfig+0x224>)
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d102      	bne.n	800c8fe <UART_SetConfig+0x122>
 800c8f8:	2320      	movs	r3, #32
 800c8fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8fc:	e001      	b.n	800c902 <UART_SetConfig+0x126>
 800c8fe:	2300      	movs	r3, #0
 800c900:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	4b3e      	ldr	r3, [pc, #248]	@ (800ca00 <UART_SetConfig+0x224>)
 800c908:	429a      	cmp	r2, r3
 800c90a:	d005      	beq.n	800c918 <UART_SetConfig+0x13c>
 800c90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	4b3d      	ldr	r3, [pc, #244]	@ (800ca08 <UART_SetConfig+0x22c>)
 800c912:	429a      	cmp	r2, r3
 800c914:	f040 8088 	bne.w	800ca28 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c91a:	2200      	movs	r2, #0
 800c91c:	623b      	str	r3, [r7, #32]
 800c91e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c920:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c924:	f7fb fdda 	bl	80084dc <HAL_RCCEx_GetPeriphCLKFreq>
 800c928:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c92a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	f000 80eb 	beq.w	800cb08 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c936:	4a3b      	ldr	r2, [pc, #236]	@ (800ca24 <UART_SetConfig+0x248>)
 800c938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c93c:	461a      	mov	r2, r3
 800c93e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c940:	fbb3 f3f2 	udiv	r3, r3, r2
 800c944:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c948:	685a      	ldr	r2, [r3, #4]
 800c94a:	4613      	mov	r3, r2
 800c94c:	005b      	lsls	r3, r3, #1
 800c94e:	4413      	add	r3, r2
 800c950:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c952:	429a      	cmp	r2, r3
 800c954:	d305      	bcc.n	800c962 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c95c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c95e:	429a      	cmp	r2, r3
 800c960:	d903      	bls.n	800c96a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800c962:	2301      	movs	r3, #1
 800c964:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c968:	e048      	b.n	800c9fc <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c96a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c96c:	2200      	movs	r2, #0
 800c96e:	61bb      	str	r3, [r7, #24]
 800c970:	61fa      	str	r2, [r7, #28]
 800c972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c976:	4a2b      	ldr	r2, [pc, #172]	@ (800ca24 <UART_SetConfig+0x248>)
 800c978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	2200      	movs	r2, #0
 800c980:	613b      	str	r3, [r7, #16]
 800c982:	617a      	str	r2, [r7, #20]
 800c984:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c988:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c98c:	f7f4 f90c 	bl	8000ba8 <__aeabi_uldivmod>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4610      	mov	r0, r2
 800c996:	4619      	mov	r1, r3
 800c998:	f04f 0200 	mov.w	r2, #0
 800c99c:	f04f 0300 	mov.w	r3, #0
 800c9a0:	020b      	lsls	r3, r1, #8
 800c9a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c9a6:	0202      	lsls	r2, r0, #8
 800c9a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c9aa:	6849      	ldr	r1, [r1, #4]
 800c9ac:	0849      	lsrs	r1, r1, #1
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	4605      	mov	r5, r0
 800c9b4:	eb12 0804 	adds.w	r8, r2, r4
 800c9b8:	eb43 0905 	adc.w	r9, r3, r5
 800c9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	60bb      	str	r3, [r7, #8]
 800c9c4:	60fa      	str	r2, [r7, #12]
 800c9c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c9ca:	4640      	mov	r0, r8
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	f7f4 f8eb 	bl	8000ba8 <__aeabi_uldivmod>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c9e0:	d308      	bcc.n	800c9f4 <UART_SetConfig+0x218>
 800c9e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9e8:	d204      	bcs.n	800c9f4 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800c9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c9f0:	60da      	str	r2, [r3, #12]
 800c9f2:	e003      	b.n	800c9fc <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c9fa:	e085      	b.n	800cb08 <UART_SetConfig+0x32c>
 800c9fc:	e084      	b.n	800cb08 <UART_SetConfig+0x32c>
 800c9fe:	bf00      	nop
 800ca00:	46002400 	.word	0x46002400
 800ca04:	cfff69f3 	.word	0xcfff69f3
 800ca08:	56002400 	.word	0x56002400
 800ca0c:	40013800 	.word	0x40013800
 800ca10:	40004400 	.word	0x40004400
 800ca14:	40004800 	.word	0x40004800
 800ca18:	40004c00 	.word	0x40004c00
 800ca1c:	40005000 	.word	0x40005000
 800ca20:	40006400 	.word	0x40006400
 800ca24:	0800f2f0 	.word	0x0800f2f0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2a:	69db      	ldr	r3, [r3, #28]
 800ca2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca30:	d13c      	bne.n	800caac <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ca32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca34:	2200      	movs	r2, #0
 800ca36:	603b      	str	r3, [r7, #0]
 800ca38:	607a      	str	r2, [r7, #4]
 800ca3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca3e:	f7fb fd4d 	bl	80084dc <HAL_RCCEx_GetPeriphCLKFreq>
 800ca42:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d05e      	beq.n	800cb08 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca4e:	4a39      	ldr	r2, [pc, #228]	@ (800cb34 <UART_SetConfig+0x358>)
 800ca50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca54:	461a      	mov	r2, r3
 800ca56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca5c:	005a      	lsls	r2, r3, #1
 800ca5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	085b      	lsrs	r3, r3, #1
 800ca64:	441a      	add	r2, r3
 800ca66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca72:	2b0f      	cmp	r3, #15
 800ca74:	d916      	bls.n	800caa4 <UART_SetConfig+0x2c8>
 800ca76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca7c:	d212      	bcs.n	800caa4 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	f023 030f 	bic.w	r3, r3, #15
 800ca86:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca8a:	085b      	lsrs	r3, r3, #1
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	f003 0307 	and.w	r3, r3, #7
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ca96:	4313      	orrs	r3, r2
 800ca98:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800ca9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800caa0:	60da      	str	r2, [r3, #12]
 800caa2:	e031      	b.n	800cb08 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800caaa:	e02d      	b.n	800cb08 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800caac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800caae:	2200      	movs	r2, #0
 800cab0:	469a      	mov	sl, r3
 800cab2:	4693      	mov	fp, r2
 800cab4:	4650      	mov	r0, sl
 800cab6:	4659      	mov	r1, fp
 800cab8:	f7fb fd10 	bl	80084dc <HAL_RCCEx_GetPeriphCLKFreq>
 800cabc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800cabe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d021      	beq.n	800cb08 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cac8:	4a1a      	ldr	r2, [pc, #104]	@ (800cb34 <UART_SetConfig+0x358>)
 800caca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cace:	461a      	mov	r2, r3
 800cad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cad2:	fbb3 f2f2 	udiv	r2, r3, r2
 800cad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	085b      	lsrs	r3, r3, #1
 800cadc:	441a      	add	r2, r3
 800cade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caea:	2b0f      	cmp	r3, #15
 800caec:	d909      	bls.n	800cb02 <UART_SetConfig+0x326>
 800caee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caf4:	d205      	bcs.n	800cb02 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800caf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	60da      	str	r2, [r3, #12]
 800cb00:	e002      	b.n	800cb08 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb12:	2201      	movs	r2, #1
 800cb14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb20:	2200      	movs	r2, #0
 800cb22:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cb24:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3750      	adds	r7, #80	@ 0x50
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb32:	bf00      	nop
 800cb34:	0800f2f0 	.word	0x0800f2f0

0800cb38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb44:	f003 0308 	and.w	r3, r3, #8
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00a      	beq.n	800cb62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	430a      	orrs	r2, r1
 800cb60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb66:	f003 0301 	and.w	r3, r3, #1
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00a      	beq.n	800cb84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	430a      	orrs	r2, r1
 800cb82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb88:	f003 0302 	and.w	r3, r3, #2
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00a      	beq.n	800cba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	430a      	orrs	r2, r1
 800cba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbaa:	f003 0304 	and.w	r3, r3, #4
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00a      	beq.n	800cbc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	430a      	orrs	r2, r1
 800cbc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbcc:	f003 0310 	and.w	r3, r3, #16
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00a      	beq.n	800cbea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	430a      	orrs	r2, r1
 800cbe8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbee:	f003 0320 	and.w	r3, r3, #32
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00a      	beq.n	800cc0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	430a      	orrs	r2, r1
 800cc0a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01a      	beq.n	800cc4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	430a      	orrs	r2, r1
 800cc2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc36:	d10a      	bne.n	800cc4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	430a      	orrs	r2, r1
 800cc4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00a      	beq.n	800cc70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	430a      	orrs	r2, r1
 800cc6e:	605a      	str	r2, [r3, #4]
  }
}
 800cc70:	bf00      	nop
 800cc72:	370c      	adds	r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b098      	sub	sp, #96	@ 0x60
 800cc80:	af02      	add	r7, sp, #8
 800cc82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc8c:	f7f7 fa8c 	bl	80041a8 <HAL_GetTick>
 800cc90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f003 0308 	and.w	r3, r3, #8
 800cc9c:	2b08      	cmp	r3, #8
 800cc9e:	d12f      	bne.n	800cd00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 f88e 	bl	800cdd0 <UART_WaitOnFlagUntilTimeout>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d022      	beq.n	800cd00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc2:	e853 3f00 	ldrex	r3, [r3]
 800ccc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ccc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ccce:	653b      	str	r3, [r7, #80]	@ 0x50
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccd8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ccda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cce0:	e841 2300 	strex	r3, r2, [r1]
 800cce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1e6      	bne.n	800ccba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2220      	movs	r2, #32
 800ccf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccfc:	2303      	movs	r3, #3
 800ccfe:	e063      	b.n	800cdc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f003 0304 	and.w	r3, r3, #4
 800cd0a:	2b04      	cmp	r3, #4
 800cd0c:	d149      	bne.n	800cda2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd16:	2200      	movs	r2, #0
 800cd18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 f857 	bl	800cdd0 <UART_WaitOnFlagUntilTimeout>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d03c      	beq.n	800cda2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd30:	e853 3f00 	ldrex	r3, [r3]
 800cd34:	623b      	str	r3, [r7, #32]
   return(result);
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	461a      	mov	r2, r3
 800cd44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd46:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd4e:	e841 2300 	strex	r3, r2, [r1]
 800cd52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1e6      	bne.n	800cd28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	3308      	adds	r3, #8
 800cd60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	e853 3f00 	ldrex	r3, [r3]
 800cd68:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f023 0301 	bic.w	r3, r3, #1
 800cd70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3308      	adds	r3, #8
 800cd78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd7a:	61fa      	str	r2, [r7, #28]
 800cd7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7e:	69b9      	ldr	r1, [r7, #24]
 800cd80:	69fa      	ldr	r2, [r7, #28]
 800cd82:	e841 2300 	strex	r3, r2, [r1]
 800cd86:	617b      	str	r3, [r7, #20]
   return(result);
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1e5      	bne.n	800cd5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2220      	movs	r2, #32
 800cd92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd9e:	2303      	movs	r3, #3
 800cda0:	e012      	b.n	800cdc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2220      	movs	r2, #32
 800cda6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2220      	movs	r2, #32
 800cdae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdc6:	2300      	movs	r3, #0
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3758      	adds	r7, #88	@ 0x58
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	603b      	str	r3, [r7, #0]
 800cddc:	4613      	mov	r3, r2
 800cdde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cde0:	e04f      	b.n	800ce82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde8:	d04b      	beq.n	800ce82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdea:	f7f7 f9dd 	bl	80041a8 <HAL_GetTick>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	1ad3      	subs	r3, r2, r3
 800cdf4:	69ba      	ldr	r2, [r7, #24]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d302      	bcc.n	800ce00 <UART_WaitOnFlagUntilTimeout+0x30>
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d101      	bne.n	800ce04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ce00:	2303      	movs	r3, #3
 800ce02:	e04e      	b.n	800cea2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f003 0304 	and.w	r3, r3, #4
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d037      	beq.n	800ce82 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	2b80      	cmp	r3, #128	@ 0x80
 800ce16:	d034      	beq.n	800ce82 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	2b40      	cmp	r3, #64	@ 0x40
 800ce1c:	d031      	beq.n	800ce82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	69db      	ldr	r3, [r3, #28]
 800ce24:	f003 0308 	and.w	r3, r3, #8
 800ce28:	2b08      	cmp	r3, #8
 800ce2a:	d110      	bne.n	800ce4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2208      	movs	r2, #8
 800ce32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f000 f879 	bl	800cf2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2208      	movs	r2, #8
 800ce3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e029      	b.n	800cea2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	69db      	ldr	r3, [r3, #28]
 800ce54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce5c:	d111      	bne.n	800ce82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ce66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f000 f85f 	bl	800cf2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2220      	movs	r2, #32
 800ce72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e00f      	b.n	800cea2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	69da      	ldr	r2, [r3, #28]
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	4013      	ands	r3, r2
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	bf0c      	ite	eq
 800ce92:	2301      	moveq	r3, #1
 800ce94:	2300      	movne	r3, #0
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	461a      	mov	r2, r3
 800ce9a:	79fb      	ldrb	r3, [r7, #7]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d0a0      	beq.n	800cde2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ceaa:	b480      	push	{r7}
 800ceac:	b08f      	sub	sp, #60	@ 0x3c
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb8:	6a3b      	ldr	r3, [r7, #32]
 800ceba:	e853 3f00 	ldrex	r3, [r3]
 800cebe:	61fb      	str	r3, [r7, #28]
   return(result);
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cec6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	461a      	mov	r2, r3
 800cece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ced0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ced2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ced6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ced8:	e841 2300 	strex	r3, r2, [r1]
 800cedc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d1e6      	bne.n	800ceb2 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	3308      	adds	r3, #8
 800ceea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	e853 3f00 	ldrex	r3, [r3]
 800cef2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800cefa:	633b      	str	r3, [r7, #48]	@ 0x30
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	3308      	adds	r3, #8
 800cf02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf04:	61ba      	str	r2, [r7, #24]
 800cf06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf08:	6979      	ldr	r1, [r7, #20]
 800cf0a:	69ba      	ldr	r2, [r7, #24]
 800cf0c:	e841 2300 	strex	r3, r2, [r1]
 800cf10:	613b      	str	r3, [r7, #16]
   return(result);
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d1e5      	bne.n	800cee4 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2220      	movs	r2, #32
 800cf1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800cf20:	bf00      	nop
 800cf22:	373c      	adds	r7, #60	@ 0x3c
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b095      	sub	sp, #84	@ 0x54
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf3c:	e853 3f00 	ldrex	r3, [r3]
 800cf40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	461a      	mov	r2, r3
 800cf50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf52:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf5a:	e841 2300 	strex	r3, r2, [r1]
 800cf5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cf60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1e6      	bne.n	800cf34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	3308      	adds	r3, #8
 800cf6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf6e:	6a3b      	ldr	r3, [r7, #32]
 800cf70:	e853 3f00 	ldrex	r3, [r3]
 800cf74:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf7c:	f023 0301 	bic.w	r3, r3, #1
 800cf80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	3308      	adds	r3, #8
 800cf88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cf8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf92:	e841 2300 	strex	r3, r2, [r1]
 800cf96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d1e3      	bne.n	800cf66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d118      	bne.n	800cfd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	e853 3f00 	ldrex	r3, [r3]
 800cfb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	f023 0310 	bic.w	r3, r3, #16
 800cfba:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfc4:	61bb      	str	r3, [r7, #24]
 800cfc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc8:	6979      	ldr	r1, [r7, #20]
 800cfca:	69ba      	ldr	r2, [r7, #24]
 800cfcc:	e841 2300 	strex	r3, r2, [r1]
 800cfd0:	613b      	str	r3, [r7, #16]
   return(result);
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d1e6      	bne.n	800cfa6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2220      	movs	r2, #32
 800cfdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cfec:	bf00      	nop
 800cfee:	3754      	adds	r7, #84	@ 0x54
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b090      	sub	sp, #64	@ 0x40
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d004:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d00a:	2b81      	cmp	r3, #129	@ 0x81
 800d00c:	d037      	beq.n	800d07e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800d00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d010:	2200      	movs	r2, #0
 800d012:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	3308      	adds	r3, #8
 800d01c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d020:	e853 3f00 	ldrex	r3, [r3]
 800d024:	623b      	str	r3, [r7, #32]
   return(result);
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d02c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d02e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	3308      	adds	r3, #8
 800d034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d036:	633a      	str	r2, [r7, #48]	@ 0x30
 800d038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d03c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d03e:	e841 2300 	strex	r3, r2, [r1]
 800d042:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1e5      	bne.n	800d016 <UART_DMATransmitCplt+0x1e>

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	e853 3f00 	ldrex	r3, [r3]
 800d056:	60fb      	str	r3, [r7, #12]
   return(result);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d05e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	461a      	mov	r2, r3
 800d066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d068:	61fb      	str	r3, [r7, #28]
 800d06a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06c:	69b9      	ldr	r1, [r7, #24]
 800d06e:	69fa      	ldr	r2, [r7, #28]
 800d070:	e841 2300 	strex	r3, r2, [r1]
 800d074:	617b      	str	r3, [r7, #20]
   return(result);
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1e6      	bne.n	800d04a <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d07c:	e002      	b.n	800d084 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800d07e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d080:	f7f4 ff88 	bl	8001f94 <HAL_UART_TxCpltCallback>
}
 800d084:	bf00      	nop
 800d086:	3740      	adds	r7, #64	@ 0x40
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d098:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d09a:	68f8      	ldr	r0, [r7, #12]
 800d09c:	f7ff fb7e 	bl	800c79c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0a0:	bf00      	nop
 800d0a2:	3710      	adds	r7, #16
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b086      	sub	sp, #24
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0d0:	2b80      	cmp	r3, #128	@ 0x80
 800d0d2:	d109      	bne.n	800d0e8 <UART_DMAError+0x40>
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	2b21      	cmp	r3, #33	@ 0x21
 800d0d8:	d106      	bne.n	800d0e8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800d0e2:	6978      	ldr	r0, [r7, #20]
 800d0e4:	f7ff fee1 	bl	800ceaa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0f2:	2b40      	cmp	r3, #64	@ 0x40
 800d0f4:	d109      	bne.n	800d10a <UART_DMAError+0x62>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2b22      	cmp	r3, #34	@ 0x22
 800d0fa:	d106      	bne.n	800d10a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800d104:	6978      	ldr	r0, [r7, #20]
 800d106:	f7ff ff11 	bl	800cf2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d110:	f043 0210 	orr.w	r2, r3, #16
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d11a:	6978      	ldr	r0, [r7, #20]
 800d11c:	f7ff fb48 	bl	800c7b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d120:	bf00      	nop
 800d122:	3718      	adds	r7, #24
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2200      	movs	r2, #0
 800d13a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f7ff fb36 	bl	800c7b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d144:	bf00      	nop
 800d146:	3710      	adds	r7, #16
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b088      	sub	sp, #32
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	e853 3f00 	ldrex	r3, [r3]
 800d160:	60bb      	str	r3, [r7, #8]
   return(result);
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d168:	61fb      	str	r3, [r7, #28]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	461a      	mov	r2, r3
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	61bb      	str	r3, [r7, #24]
 800d174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d176:	6979      	ldr	r1, [r7, #20]
 800d178:	69ba      	ldr	r2, [r7, #24]
 800d17a:	e841 2300 	strex	r3, r2, [r1]
 800d17e:	613b      	str	r3, [r7, #16]
   return(result);
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d1e6      	bne.n	800d154 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2220      	movs	r2, #32
 800d18a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7f4 fefd 	bl	8001f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d19a:	bf00      	nop
 800d19c:	3720      	adds	r7, #32
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d1a2:	b480      	push	{r7}
 800d1a4:	b083      	sub	sp, #12
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d1aa:	bf00      	nop
 800d1ac:	370c      	adds	r7, #12
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr

0800d1b6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d1b6:	b480      	push	{r7}
 800d1b8:	b083      	sub	sp, #12
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d1be:	bf00      	nop
 800d1c0:	370c      	adds	r7, #12
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr

0800d1ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d1ca:	b480      	push	{r7}
 800d1cc:	b085      	sub	sp, #20
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d101      	bne.n	800d1e0 <HAL_UARTEx_DisableFifoMode+0x16>
 800d1dc:	2302      	movs	r3, #2
 800d1de:	e027      	b.n	800d230 <HAL_UARTEx_DisableFifoMode+0x66>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2224      	movs	r2, #36	@ 0x24
 800d1ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f022 0201 	bic.w	r2, r2, #1
 800d206:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d20e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2220      	movs	r2, #32
 800d222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	3714      	adds	r7, #20
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d101      	bne.n	800d254 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d250:	2302      	movs	r3, #2
 800d252:	e02d      	b.n	800d2b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2201      	movs	r2, #1
 800d258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2224      	movs	r2, #36	@ 0x24
 800d260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f022 0201 	bic.w	r2, r2, #1
 800d27a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	683a      	ldr	r2, [r7, #0]
 800d28c:	430a      	orrs	r2, r1
 800d28e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 f84f 	bl	800d334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68fa      	ldr	r2, [r7, #12]
 800d29c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2220      	movs	r2, #32
 800d2a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d2ae:	2300      	movs	r3, #0
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3710      	adds	r7, #16
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d101      	bne.n	800d2d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	e02d      	b.n	800d32c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2224      	movs	r2, #36	@ 0x24
 800d2dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	681a      	ldr	r2, [r3, #0]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f022 0201 	bic.w	r2, r2, #1
 800d2f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	430a      	orrs	r2, r1
 800d30a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 f811 	bl	800d334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2220      	movs	r2, #32
 800d31e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d32a:	2300      	movs	r3, #0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d340:	2b00      	cmp	r3, #0
 800d342:	d108      	bne.n	800d356 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d354:	e031      	b.n	800d3ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d356:	2308      	movs	r3, #8
 800d358:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d35a:	2308      	movs	r3, #8
 800d35c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	0e5b      	lsrs	r3, r3, #25
 800d366:	b2db      	uxtb	r3, r3
 800d368:	f003 0307 	and.w	r3, r3, #7
 800d36c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	0f5b      	lsrs	r3, r3, #29
 800d376:	b2db      	uxtb	r3, r3
 800d378:	f003 0307 	and.w	r3, r3, #7
 800d37c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d37e:	7bbb      	ldrb	r3, [r7, #14]
 800d380:	7b3a      	ldrb	r2, [r7, #12]
 800d382:	4911      	ldr	r1, [pc, #68]	@ (800d3c8 <UARTEx_SetNbDataToProcess+0x94>)
 800d384:	5c8a      	ldrb	r2, [r1, r2]
 800d386:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d38a:	7b3a      	ldrb	r2, [r7, #12]
 800d38c:	490f      	ldr	r1, [pc, #60]	@ (800d3cc <UARTEx_SetNbDataToProcess+0x98>)
 800d38e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d390:	fb93 f3f2 	sdiv	r3, r3, r2
 800d394:	b29a      	uxth	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d39c:	7bfb      	ldrb	r3, [r7, #15]
 800d39e:	7b7a      	ldrb	r2, [r7, #13]
 800d3a0:	4909      	ldr	r1, [pc, #36]	@ (800d3c8 <UARTEx_SetNbDataToProcess+0x94>)
 800d3a2:	5c8a      	ldrb	r2, [r1, r2]
 800d3a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d3a8:	7b7a      	ldrb	r2, [r7, #13]
 800d3aa:	4908      	ldr	r1, [pc, #32]	@ (800d3cc <UARTEx_SetNbDataToProcess+0x98>)
 800d3ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d3ba:	bf00      	nop
 800d3bc:	3714      	adds	r7, #20
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	0800f308 	.word	0x0800f308
 800d3cc:	0800f310 	.word	0x0800f310

0800d3d0 <malloc>:
 800d3d0:	4b02      	ldr	r3, [pc, #8]	@ (800d3dc <malloc+0xc>)
 800d3d2:	4601      	mov	r1, r0
 800d3d4:	6818      	ldr	r0, [r3, #0]
 800d3d6:	f000 b82d 	b.w	800d434 <_malloc_r>
 800d3da:	bf00      	nop
 800d3dc:	20000024 	.word	0x20000024

0800d3e0 <free>:
 800d3e0:	4b02      	ldr	r3, [pc, #8]	@ (800d3ec <free+0xc>)
 800d3e2:	4601      	mov	r1, r0
 800d3e4:	6818      	ldr	r0, [r3, #0]
 800d3e6:	f000 bb35 	b.w	800da54 <_free_r>
 800d3ea:	bf00      	nop
 800d3ec:	20000024 	.word	0x20000024

0800d3f0 <sbrk_aligned>:
 800d3f0:	b570      	push	{r4, r5, r6, lr}
 800d3f2:	4e0f      	ldr	r6, [pc, #60]	@ (800d430 <sbrk_aligned+0x40>)
 800d3f4:	460c      	mov	r4, r1
 800d3f6:	4605      	mov	r5, r0
 800d3f8:	6831      	ldr	r1, [r6, #0]
 800d3fa:	b911      	cbnz	r1, 800d402 <sbrk_aligned+0x12>
 800d3fc:	f000 fada 	bl	800d9b4 <_sbrk_r>
 800d400:	6030      	str	r0, [r6, #0]
 800d402:	4621      	mov	r1, r4
 800d404:	4628      	mov	r0, r5
 800d406:	f000 fad5 	bl	800d9b4 <_sbrk_r>
 800d40a:	1c43      	adds	r3, r0, #1
 800d40c:	d103      	bne.n	800d416 <sbrk_aligned+0x26>
 800d40e:	f04f 34ff 	mov.w	r4, #4294967295
 800d412:	4620      	mov	r0, r4
 800d414:	bd70      	pop	{r4, r5, r6, pc}
 800d416:	1cc4      	adds	r4, r0, #3
 800d418:	f024 0403 	bic.w	r4, r4, #3
 800d41c:	42a0      	cmp	r0, r4
 800d41e:	d0f8      	beq.n	800d412 <sbrk_aligned+0x22>
 800d420:	1a21      	subs	r1, r4, r0
 800d422:	4628      	mov	r0, r5
 800d424:	f000 fac6 	bl	800d9b4 <_sbrk_r>
 800d428:	3001      	adds	r0, #1
 800d42a:	d1f2      	bne.n	800d412 <sbrk_aligned+0x22>
 800d42c:	e7ef      	b.n	800d40e <sbrk_aligned+0x1e>
 800d42e:	bf00      	nop
 800d430:	200007b8 	.word	0x200007b8

0800d434 <_malloc_r>:
 800d434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d438:	1ccd      	adds	r5, r1, #3
 800d43a:	4606      	mov	r6, r0
 800d43c:	f025 0503 	bic.w	r5, r5, #3
 800d440:	3508      	adds	r5, #8
 800d442:	2d0c      	cmp	r5, #12
 800d444:	bf38      	it	cc
 800d446:	250c      	movcc	r5, #12
 800d448:	2d00      	cmp	r5, #0
 800d44a:	db01      	blt.n	800d450 <_malloc_r+0x1c>
 800d44c:	42a9      	cmp	r1, r5
 800d44e:	d904      	bls.n	800d45a <_malloc_r+0x26>
 800d450:	230c      	movs	r3, #12
 800d452:	6033      	str	r3, [r6, #0]
 800d454:	2000      	movs	r0, #0
 800d456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d45a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d530 <_malloc_r+0xfc>
 800d45e:	f000 f869 	bl	800d534 <__malloc_lock>
 800d462:	f8d8 3000 	ldr.w	r3, [r8]
 800d466:	461c      	mov	r4, r3
 800d468:	bb44      	cbnz	r4, 800d4bc <_malloc_r+0x88>
 800d46a:	4629      	mov	r1, r5
 800d46c:	4630      	mov	r0, r6
 800d46e:	f7ff ffbf 	bl	800d3f0 <sbrk_aligned>
 800d472:	1c43      	adds	r3, r0, #1
 800d474:	4604      	mov	r4, r0
 800d476:	d158      	bne.n	800d52a <_malloc_r+0xf6>
 800d478:	f8d8 4000 	ldr.w	r4, [r8]
 800d47c:	4627      	mov	r7, r4
 800d47e:	2f00      	cmp	r7, #0
 800d480:	d143      	bne.n	800d50a <_malloc_r+0xd6>
 800d482:	2c00      	cmp	r4, #0
 800d484:	d04b      	beq.n	800d51e <_malloc_r+0xea>
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	4639      	mov	r1, r7
 800d48a:	4630      	mov	r0, r6
 800d48c:	eb04 0903 	add.w	r9, r4, r3
 800d490:	f000 fa90 	bl	800d9b4 <_sbrk_r>
 800d494:	4581      	cmp	r9, r0
 800d496:	d142      	bne.n	800d51e <_malloc_r+0xea>
 800d498:	6821      	ldr	r1, [r4, #0]
 800d49a:	4630      	mov	r0, r6
 800d49c:	1a6d      	subs	r5, r5, r1
 800d49e:	4629      	mov	r1, r5
 800d4a0:	f7ff ffa6 	bl	800d3f0 <sbrk_aligned>
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	d03a      	beq.n	800d51e <_malloc_r+0xea>
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	442b      	add	r3, r5
 800d4ac:	6023      	str	r3, [r4, #0]
 800d4ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d4b2:	685a      	ldr	r2, [r3, #4]
 800d4b4:	bb62      	cbnz	r2, 800d510 <_malloc_r+0xdc>
 800d4b6:	f8c8 7000 	str.w	r7, [r8]
 800d4ba:	e00f      	b.n	800d4dc <_malloc_r+0xa8>
 800d4bc:	6822      	ldr	r2, [r4, #0]
 800d4be:	1b52      	subs	r2, r2, r5
 800d4c0:	d420      	bmi.n	800d504 <_malloc_r+0xd0>
 800d4c2:	2a0b      	cmp	r2, #11
 800d4c4:	d917      	bls.n	800d4f6 <_malloc_r+0xc2>
 800d4c6:	1961      	adds	r1, r4, r5
 800d4c8:	42a3      	cmp	r3, r4
 800d4ca:	6025      	str	r5, [r4, #0]
 800d4cc:	bf18      	it	ne
 800d4ce:	6059      	strne	r1, [r3, #4]
 800d4d0:	6863      	ldr	r3, [r4, #4]
 800d4d2:	bf08      	it	eq
 800d4d4:	f8c8 1000 	streq.w	r1, [r8]
 800d4d8:	5162      	str	r2, [r4, r5]
 800d4da:	604b      	str	r3, [r1, #4]
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f000 f82f 	bl	800d540 <__malloc_unlock>
 800d4e2:	f104 000b 	add.w	r0, r4, #11
 800d4e6:	1d23      	adds	r3, r4, #4
 800d4e8:	f020 0007 	bic.w	r0, r0, #7
 800d4ec:	1ac2      	subs	r2, r0, r3
 800d4ee:	bf1c      	itt	ne
 800d4f0:	1a1b      	subne	r3, r3, r0
 800d4f2:	50a3      	strne	r3, [r4, r2]
 800d4f4:	e7af      	b.n	800d456 <_malloc_r+0x22>
 800d4f6:	6862      	ldr	r2, [r4, #4]
 800d4f8:	42a3      	cmp	r3, r4
 800d4fa:	bf0c      	ite	eq
 800d4fc:	f8c8 2000 	streq.w	r2, [r8]
 800d500:	605a      	strne	r2, [r3, #4]
 800d502:	e7eb      	b.n	800d4dc <_malloc_r+0xa8>
 800d504:	4623      	mov	r3, r4
 800d506:	6864      	ldr	r4, [r4, #4]
 800d508:	e7ae      	b.n	800d468 <_malloc_r+0x34>
 800d50a:	463c      	mov	r4, r7
 800d50c:	687f      	ldr	r7, [r7, #4]
 800d50e:	e7b6      	b.n	800d47e <_malloc_r+0x4a>
 800d510:	461a      	mov	r2, r3
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	42a3      	cmp	r3, r4
 800d516:	d1fb      	bne.n	800d510 <_malloc_r+0xdc>
 800d518:	2300      	movs	r3, #0
 800d51a:	6053      	str	r3, [r2, #4]
 800d51c:	e7de      	b.n	800d4dc <_malloc_r+0xa8>
 800d51e:	230c      	movs	r3, #12
 800d520:	4630      	mov	r0, r6
 800d522:	6033      	str	r3, [r6, #0]
 800d524:	f000 f80c 	bl	800d540 <__malloc_unlock>
 800d528:	e794      	b.n	800d454 <_malloc_r+0x20>
 800d52a:	6005      	str	r5, [r0, #0]
 800d52c:	e7d6      	b.n	800d4dc <_malloc_r+0xa8>
 800d52e:	bf00      	nop
 800d530:	200007bc 	.word	0x200007bc

0800d534 <__malloc_lock>:
 800d534:	4801      	ldr	r0, [pc, #4]	@ (800d53c <__malloc_lock+0x8>)
 800d536:	f000 ba8a 	b.w	800da4e <__retarget_lock_acquire_recursive>
 800d53a:	bf00      	nop
 800d53c:	20000900 	.word	0x20000900

0800d540 <__malloc_unlock>:
 800d540:	4801      	ldr	r0, [pc, #4]	@ (800d548 <__malloc_unlock+0x8>)
 800d542:	f000 ba85 	b.w	800da50 <__retarget_lock_release_recursive>
 800d546:	bf00      	nop
 800d548:	20000900 	.word	0x20000900

0800d54c <std>:
 800d54c:	2300      	movs	r3, #0
 800d54e:	b510      	push	{r4, lr}
 800d550:	4604      	mov	r4, r0
 800d552:	6083      	str	r3, [r0, #8]
 800d554:	8181      	strh	r1, [r0, #12]
 800d556:	4619      	mov	r1, r3
 800d558:	6643      	str	r3, [r0, #100]	@ 0x64
 800d55a:	81c2      	strh	r2, [r0, #14]
 800d55c:	2208      	movs	r2, #8
 800d55e:	6183      	str	r3, [r0, #24]
 800d560:	e9c0 3300 	strd	r3, r3, [r0]
 800d564:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d568:	305c      	adds	r0, #92	@ 0x5c
 800d56a:	f000 f9e7 	bl	800d93c <memset>
 800d56e:	4b0d      	ldr	r3, [pc, #52]	@ (800d5a4 <std+0x58>)
 800d570:	6224      	str	r4, [r4, #32]
 800d572:	6263      	str	r3, [r4, #36]	@ 0x24
 800d574:	4b0c      	ldr	r3, [pc, #48]	@ (800d5a8 <std+0x5c>)
 800d576:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d578:	4b0c      	ldr	r3, [pc, #48]	@ (800d5ac <std+0x60>)
 800d57a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d57c:	4b0c      	ldr	r3, [pc, #48]	@ (800d5b0 <std+0x64>)
 800d57e:	6323      	str	r3, [r4, #48]	@ 0x30
 800d580:	4b0c      	ldr	r3, [pc, #48]	@ (800d5b4 <std+0x68>)
 800d582:	429c      	cmp	r4, r3
 800d584:	d006      	beq.n	800d594 <std+0x48>
 800d586:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d58a:	4294      	cmp	r4, r2
 800d58c:	d002      	beq.n	800d594 <std+0x48>
 800d58e:	33d0      	adds	r3, #208	@ 0xd0
 800d590:	429c      	cmp	r4, r3
 800d592:	d105      	bne.n	800d5a0 <std+0x54>
 800d594:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d59c:	f000 ba56 	b.w	800da4c <__retarget_lock_init_recursive>
 800d5a0:	bd10      	pop	{r4, pc}
 800d5a2:	bf00      	nop
 800d5a4:	0800d78d 	.word	0x0800d78d
 800d5a8:	0800d7af 	.word	0x0800d7af
 800d5ac:	0800d7e7 	.word	0x0800d7e7
 800d5b0:	0800d80b 	.word	0x0800d80b
 800d5b4:	200007c0 	.word	0x200007c0

0800d5b8 <stdio_exit_handler>:
 800d5b8:	4a02      	ldr	r2, [pc, #8]	@ (800d5c4 <stdio_exit_handler+0xc>)
 800d5ba:	4903      	ldr	r1, [pc, #12]	@ (800d5c8 <stdio_exit_handler+0x10>)
 800d5bc:	4803      	ldr	r0, [pc, #12]	@ (800d5cc <stdio_exit_handler+0x14>)
 800d5be:	f000 b869 	b.w	800d694 <_fwalk_sglue>
 800d5c2:	bf00      	nop
 800d5c4:	20000018 	.word	0x20000018
 800d5c8:	0800dbf1 	.word	0x0800dbf1
 800d5cc:	20000028 	.word	0x20000028

0800d5d0 <cleanup_stdio>:
 800d5d0:	6841      	ldr	r1, [r0, #4]
 800d5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800d604 <cleanup_stdio+0x34>)
 800d5d4:	4299      	cmp	r1, r3
 800d5d6:	b510      	push	{r4, lr}
 800d5d8:	4604      	mov	r4, r0
 800d5da:	d001      	beq.n	800d5e0 <cleanup_stdio+0x10>
 800d5dc:	f000 fb08 	bl	800dbf0 <_fflush_r>
 800d5e0:	68a1      	ldr	r1, [r4, #8]
 800d5e2:	4b09      	ldr	r3, [pc, #36]	@ (800d608 <cleanup_stdio+0x38>)
 800d5e4:	4299      	cmp	r1, r3
 800d5e6:	d002      	beq.n	800d5ee <cleanup_stdio+0x1e>
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	f000 fb01 	bl	800dbf0 <_fflush_r>
 800d5ee:	68e1      	ldr	r1, [r4, #12]
 800d5f0:	4b06      	ldr	r3, [pc, #24]	@ (800d60c <cleanup_stdio+0x3c>)
 800d5f2:	4299      	cmp	r1, r3
 800d5f4:	d004      	beq.n	800d600 <cleanup_stdio+0x30>
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5fc:	f000 baf8 	b.w	800dbf0 <_fflush_r>
 800d600:	bd10      	pop	{r4, pc}
 800d602:	bf00      	nop
 800d604:	200007c0 	.word	0x200007c0
 800d608:	20000828 	.word	0x20000828
 800d60c:	20000890 	.word	0x20000890

0800d610 <global_stdio_init.part.0>:
 800d610:	b510      	push	{r4, lr}
 800d612:	4b0b      	ldr	r3, [pc, #44]	@ (800d640 <global_stdio_init.part.0+0x30>)
 800d614:	2104      	movs	r1, #4
 800d616:	4c0b      	ldr	r4, [pc, #44]	@ (800d644 <global_stdio_init.part.0+0x34>)
 800d618:	4a0b      	ldr	r2, [pc, #44]	@ (800d648 <global_stdio_init.part.0+0x38>)
 800d61a:	4620      	mov	r0, r4
 800d61c:	601a      	str	r2, [r3, #0]
 800d61e:	2200      	movs	r2, #0
 800d620:	f7ff ff94 	bl	800d54c <std>
 800d624:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d628:	2201      	movs	r2, #1
 800d62a:	2109      	movs	r1, #9
 800d62c:	f7ff ff8e 	bl	800d54c <std>
 800d630:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d634:	2202      	movs	r2, #2
 800d636:	2112      	movs	r1, #18
 800d638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d63c:	f7ff bf86 	b.w	800d54c <std>
 800d640:	200008f8 	.word	0x200008f8
 800d644:	200007c0 	.word	0x200007c0
 800d648:	0800d5b9 	.word	0x0800d5b9

0800d64c <__sfp_lock_acquire>:
 800d64c:	4801      	ldr	r0, [pc, #4]	@ (800d654 <__sfp_lock_acquire+0x8>)
 800d64e:	f000 b9fe 	b.w	800da4e <__retarget_lock_acquire_recursive>
 800d652:	bf00      	nop
 800d654:	20000901 	.word	0x20000901

0800d658 <__sfp_lock_release>:
 800d658:	4801      	ldr	r0, [pc, #4]	@ (800d660 <__sfp_lock_release+0x8>)
 800d65a:	f000 b9f9 	b.w	800da50 <__retarget_lock_release_recursive>
 800d65e:	bf00      	nop
 800d660:	20000901 	.word	0x20000901

0800d664 <__sinit>:
 800d664:	b510      	push	{r4, lr}
 800d666:	4604      	mov	r4, r0
 800d668:	f7ff fff0 	bl	800d64c <__sfp_lock_acquire>
 800d66c:	6a23      	ldr	r3, [r4, #32]
 800d66e:	b11b      	cbz	r3, 800d678 <__sinit+0x14>
 800d670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d674:	f7ff bff0 	b.w	800d658 <__sfp_lock_release>
 800d678:	4b04      	ldr	r3, [pc, #16]	@ (800d68c <__sinit+0x28>)
 800d67a:	6223      	str	r3, [r4, #32]
 800d67c:	4b04      	ldr	r3, [pc, #16]	@ (800d690 <__sinit+0x2c>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1f5      	bne.n	800d670 <__sinit+0xc>
 800d684:	f7ff ffc4 	bl	800d610 <global_stdio_init.part.0>
 800d688:	e7f2      	b.n	800d670 <__sinit+0xc>
 800d68a:	bf00      	nop
 800d68c:	0800d5d1 	.word	0x0800d5d1
 800d690:	200008f8 	.word	0x200008f8

0800d694 <_fwalk_sglue>:
 800d694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d698:	4607      	mov	r7, r0
 800d69a:	4688      	mov	r8, r1
 800d69c:	4614      	mov	r4, r2
 800d69e:	2600      	movs	r6, #0
 800d6a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6a4:	f1b9 0901 	subs.w	r9, r9, #1
 800d6a8:	d505      	bpl.n	800d6b6 <_fwalk_sglue+0x22>
 800d6aa:	6824      	ldr	r4, [r4, #0]
 800d6ac:	2c00      	cmp	r4, #0
 800d6ae:	d1f7      	bne.n	800d6a0 <_fwalk_sglue+0xc>
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6b6:	89ab      	ldrh	r3, [r5, #12]
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d907      	bls.n	800d6cc <_fwalk_sglue+0x38>
 800d6bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	d003      	beq.n	800d6cc <_fwalk_sglue+0x38>
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	47c0      	blx	r8
 800d6ca:	4306      	orrs	r6, r0
 800d6cc:	3568      	adds	r5, #104	@ 0x68
 800d6ce:	e7e9      	b.n	800d6a4 <_fwalk_sglue+0x10>

0800d6d0 <_puts_r>:
 800d6d0:	6a03      	ldr	r3, [r0, #32]
 800d6d2:	b570      	push	{r4, r5, r6, lr}
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	460e      	mov	r6, r1
 800d6d8:	6884      	ldr	r4, [r0, #8]
 800d6da:	b90b      	cbnz	r3, 800d6e0 <_puts_r+0x10>
 800d6dc:	f7ff ffc2 	bl	800d664 <__sinit>
 800d6e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6e2:	07db      	lsls	r3, r3, #31
 800d6e4:	d405      	bmi.n	800d6f2 <_puts_r+0x22>
 800d6e6:	89a3      	ldrh	r3, [r4, #12]
 800d6e8:	0598      	lsls	r0, r3, #22
 800d6ea:	d402      	bmi.n	800d6f2 <_puts_r+0x22>
 800d6ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6ee:	f000 f9ae 	bl	800da4e <__retarget_lock_acquire_recursive>
 800d6f2:	89a3      	ldrh	r3, [r4, #12]
 800d6f4:	0719      	lsls	r1, r3, #28
 800d6f6:	d502      	bpl.n	800d6fe <_puts_r+0x2e>
 800d6f8:	6923      	ldr	r3, [r4, #16]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d135      	bne.n	800d76a <_puts_r+0x9a>
 800d6fe:	4621      	mov	r1, r4
 800d700:	4628      	mov	r0, r5
 800d702:	f000 f8c5 	bl	800d890 <__swsetup_r>
 800d706:	b380      	cbz	r0, 800d76a <_puts_r+0x9a>
 800d708:	f04f 35ff 	mov.w	r5, #4294967295
 800d70c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d70e:	07da      	lsls	r2, r3, #31
 800d710:	d405      	bmi.n	800d71e <_puts_r+0x4e>
 800d712:	89a3      	ldrh	r3, [r4, #12]
 800d714:	059b      	lsls	r3, r3, #22
 800d716:	d402      	bmi.n	800d71e <_puts_r+0x4e>
 800d718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d71a:	f000 f999 	bl	800da50 <__retarget_lock_release_recursive>
 800d71e:	4628      	mov	r0, r5
 800d720:	bd70      	pop	{r4, r5, r6, pc}
 800d722:	2b00      	cmp	r3, #0
 800d724:	da04      	bge.n	800d730 <_puts_r+0x60>
 800d726:	69a2      	ldr	r2, [r4, #24]
 800d728:	429a      	cmp	r2, r3
 800d72a:	dc17      	bgt.n	800d75c <_puts_r+0x8c>
 800d72c:	290a      	cmp	r1, #10
 800d72e:	d015      	beq.n	800d75c <_puts_r+0x8c>
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	1c5a      	adds	r2, r3, #1
 800d734:	6022      	str	r2, [r4, #0]
 800d736:	7019      	strb	r1, [r3, #0]
 800d738:	68a3      	ldr	r3, [r4, #8]
 800d73a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d73e:	3b01      	subs	r3, #1
 800d740:	60a3      	str	r3, [r4, #8]
 800d742:	2900      	cmp	r1, #0
 800d744:	d1ed      	bne.n	800d722 <_puts_r+0x52>
 800d746:	2b00      	cmp	r3, #0
 800d748:	da11      	bge.n	800d76e <_puts_r+0x9e>
 800d74a:	4622      	mov	r2, r4
 800d74c:	210a      	movs	r1, #10
 800d74e:	4628      	mov	r0, r5
 800d750:	f000 f85f 	bl	800d812 <__swbuf_r>
 800d754:	3001      	adds	r0, #1
 800d756:	d0d7      	beq.n	800d708 <_puts_r+0x38>
 800d758:	250a      	movs	r5, #10
 800d75a:	e7d7      	b.n	800d70c <_puts_r+0x3c>
 800d75c:	4622      	mov	r2, r4
 800d75e:	4628      	mov	r0, r5
 800d760:	f000 f857 	bl	800d812 <__swbuf_r>
 800d764:	3001      	adds	r0, #1
 800d766:	d1e7      	bne.n	800d738 <_puts_r+0x68>
 800d768:	e7ce      	b.n	800d708 <_puts_r+0x38>
 800d76a:	3e01      	subs	r6, #1
 800d76c:	e7e4      	b.n	800d738 <_puts_r+0x68>
 800d76e:	6823      	ldr	r3, [r4, #0]
 800d770:	1c5a      	adds	r2, r3, #1
 800d772:	6022      	str	r2, [r4, #0]
 800d774:	220a      	movs	r2, #10
 800d776:	701a      	strb	r2, [r3, #0]
 800d778:	e7ee      	b.n	800d758 <_puts_r+0x88>
	...

0800d77c <puts>:
 800d77c:	4b02      	ldr	r3, [pc, #8]	@ (800d788 <puts+0xc>)
 800d77e:	4601      	mov	r1, r0
 800d780:	6818      	ldr	r0, [r3, #0]
 800d782:	f7ff bfa5 	b.w	800d6d0 <_puts_r>
 800d786:	bf00      	nop
 800d788:	20000024 	.word	0x20000024

0800d78c <__sread>:
 800d78c:	b510      	push	{r4, lr}
 800d78e:	460c      	mov	r4, r1
 800d790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d794:	f000 f8fc 	bl	800d990 <_read_r>
 800d798:	2800      	cmp	r0, #0
 800d79a:	bfab      	itete	ge
 800d79c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d79e:	89a3      	ldrhlt	r3, [r4, #12]
 800d7a0:	181b      	addge	r3, r3, r0
 800d7a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d7a6:	bfac      	ite	ge
 800d7a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d7aa:	81a3      	strhlt	r3, [r4, #12]
 800d7ac:	bd10      	pop	{r4, pc}

0800d7ae <__swrite>:
 800d7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b2:	461f      	mov	r7, r3
 800d7b4:	898b      	ldrh	r3, [r1, #12]
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	05db      	lsls	r3, r3, #23
 800d7bc:	4616      	mov	r6, r2
 800d7be:	d505      	bpl.n	800d7cc <__swrite+0x1e>
 800d7c0:	2302      	movs	r3, #2
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7c8:	f000 f8d0 	bl	800d96c <_lseek_r>
 800d7cc:	89a3      	ldrh	r3, [r4, #12]
 800d7ce:	4632      	mov	r2, r6
 800d7d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d7da:	81a3      	strh	r3, [r4, #12]
 800d7dc:	463b      	mov	r3, r7
 800d7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e2:	f000 b8f7 	b.w	800d9d4 <_write_r>

0800d7e6 <__sseek>:
 800d7e6:	b510      	push	{r4, lr}
 800d7e8:	460c      	mov	r4, r1
 800d7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7ee:	f000 f8bd 	bl	800d96c <_lseek_r>
 800d7f2:	1c43      	adds	r3, r0, #1
 800d7f4:	89a3      	ldrh	r3, [r4, #12]
 800d7f6:	bf15      	itete	ne
 800d7f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d7fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d7fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d802:	81a3      	strheq	r3, [r4, #12]
 800d804:	bf18      	it	ne
 800d806:	81a3      	strhne	r3, [r4, #12]
 800d808:	bd10      	pop	{r4, pc}

0800d80a <__sclose>:
 800d80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d80e:	f000 b89d 	b.w	800d94c <_close_r>

0800d812 <__swbuf_r>:
 800d812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d814:	460e      	mov	r6, r1
 800d816:	4614      	mov	r4, r2
 800d818:	4605      	mov	r5, r0
 800d81a:	b118      	cbz	r0, 800d824 <__swbuf_r+0x12>
 800d81c:	6a03      	ldr	r3, [r0, #32]
 800d81e:	b90b      	cbnz	r3, 800d824 <__swbuf_r+0x12>
 800d820:	f7ff ff20 	bl	800d664 <__sinit>
 800d824:	69a3      	ldr	r3, [r4, #24]
 800d826:	60a3      	str	r3, [r4, #8]
 800d828:	89a3      	ldrh	r3, [r4, #12]
 800d82a:	071a      	lsls	r2, r3, #28
 800d82c:	d501      	bpl.n	800d832 <__swbuf_r+0x20>
 800d82e:	6923      	ldr	r3, [r4, #16]
 800d830:	b943      	cbnz	r3, 800d844 <__swbuf_r+0x32>
 800d832:	4621      	mov	r1, r4
 800d834:	4628      	mov	r0, r5
 800d836:	f000 f82b 	bl	800d890 <__swsetup_r>
 800d83a:	b118      	cbz	r0, 800d844 <__swbuf_r+0x32>
 800d83c:	f04f 37ff 	mov.w	r7, #4294967295
 800d840:	4638      	mov	r0, r7
 800d842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d844:	6823      	ldr	r3, [r4, #0]
 800d846:	b2f6      	uxtb	r6, r6
 800d848:	6922      	ldr	r2, [r4, #16]
 800d84a:	4637      	mov	r7, r6
 800d84c:	1a98      	subs	r0, r3, r2
 800d84e:	6963      	ldr	r3, [r4, #20]
 800d850:	4283      	cmp	r3, r0
 800d852:	dc05      	bgt.n	800d860 <__swbuf_r+0x4e>
 800d854:	4621      	mov	r1, r4
 800d856:	4628      	mov	r0, r5
 800d858:	f000 f9ca 	bl	800dbf0 <_fflush_r>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d1ed      	bne.n	800d83c <__swbuf_r+0x2a>
 800d860:	68a3      	ldr	r3, [r4, #8]
 800d862:	3b01      	subs	r3, #1
 800d864:	60a3      	str	r3, [r4, #8]
 800d866:	6823      	ldr	r3, [r4, #0]
 800d868:	1c5a      	adds	r2, r3, #1
 800d86a:	6022      	str	r2, [r4, #0]
 800d86c:	701e      	strb	r6, [r3, #0]
 800d86e:	1c43      	adds	r3, r0, #1
 800d870:	6962      	ldr	r2, [r4, #20]
 800d872:	429a      	cmp	r2, r3
 800d874:	d004      	beq.n	800d880 <__swbuf_r+0x6e>
 800d876:	89a3      	ldrh	r3, [r4, #12]
 800d878:	07db      	lsls	r3, r3, #31
 800d87a:	d5e1      	bpl.n	800d840 <__swbuf_r+0x2e>
 800d87c:	2e0a      	cmp	r6, #10
 800d87e:	d1df      	bne.n	800d840 <__swbuf_r+0x2e>
 800d880:	4621      	mov	r1, r4
 800d882:	4628      	mov	r0, r5
 800d884:	f000 f9b4 	bl	800dbf0 <_fflush_r>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d0d9      	beq.n	800d840 <__swbuf_r+0x2e>
 800d88c:	e7d6      	b.n	800d83c <__swbuf_r+0x2a>
	...

0800d890 <__swsetup_r>:
 800d890:	b538      	push	{r3, r4, r5, lr}
 800d892:	4b29      	ldr	r3, [pc, #164]	@ (800d938 <__swsetup_r+0xa8>)
 800d894:	4605      	mov	r5, r0
 800d896:	460c      	mov	r4, r1
 800d898:	6818      	ldr	r0, [r3, #0]
 800d89a:	b118      	cbz	r0, 800d8a4 <__swsetup_r+0x14>
 800d89c:	6a03      	ldr	r3, [r0, #32]
 800d89e:	b90b      	cbnz	r3, 800d8a4 <__swsetup_r+0x14>
 800d8a0:	f7ff fee0 	bl	800d664 <__sinit>
 800d8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a8:	0719      	lsls	r1, r3, #28
 800d8aa:	d422      	bmi.n	800d8f2 <__swsetup_r+0x62>
 800d8ac:	06da      	lsls	r2, r3, #27
 800d8ae:	d407      	bmi.n	800d8c0 <__swsetup_r+0x30>
 800d8b0:	2209      	movs	r2, #9
 800d8b2:	602a      	str	r2, [r5, #0]
 800d8b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8bc:	81a3      	strh	r3, [r4, #12]
 800d8be:	e033      	b.n	800d928 <__swsetup_r+0x98>
 800d8c0:	0758      	lsls	r0, r3, #29
 800d8c2:	d512      	bpl.n	800d8ea <__swsetup_r+0x5a>
 800d8c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8c6:	b141      	cbz	r1, 800d8da <__swsetup_r+0x4a>
 800d8c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8cc:	4299      	cmp	r1, r3
 800d8ce:	d002      	beq.n	800d8d6 <__swsetup_r+0x46>
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	f000 f8bf 	bl	800da54 <_free_r>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8da:	89a3      	ldrh	r3, [r4, #12]
 800d8dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d8e0:	81a3      	strh	r3, [r4, #12]
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	6063      	str	r3, [r4, #4]
 800d8e6:	6923      	ldr	r3, [r4, #16]
 800d8e8:	6023      	str	r3, [r4, #0]
 800d8ea:	89a3      	ldrh	r3, [r4, #12]
 800d8ec:	f043 0308 	orr.w	r3, r3, #8
 800d8f0:	81a3      	strh	r3, [r4, #12]
 800d8f2:	6923      	ldr	r3, [r4, #16]
 800d8f4:	b94b      	cbnz	r3, 800d90a <__swsetup_r+0x7a>
 800d8f6:	89a3      	ldrh	r3, [r4, #12]
 800d8f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d8fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d900:	d003      	beq.n	800d90a <__swsetup_r+0x7a>
 800d902:	4621      	mov	r1, r4
 800d904:	4628      	mov	r0, r5
 800d906:	f000 f9c0 	bl	800dc8a <__smakebuf_r>
 800d90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d90e:	f013 0201 	ands.w	r2, r3, #1
 800d912:	d00a      	beq.n	800d92a <__swsetup_r+0x9a>
 800d914:	2200      	movs	r2, #0
 800d916:	60a2      	str	r2, [r4, #8]
 800d918:	6962      	ldr	r2, [r4, #20]
 800d91a:	4252      	negs	r2, r2
 800d91c:	61a2      	str	r2, [r4, #24]
 800d91e:	6922      	ldr	r2, [r4, #16]
 800d920:	b942      	cbnz	r2, 800d934 <__swsetup_r+0xa4>
 800d922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d926:	d1c5      	bne.n	800d8b4 <__swsetup_r+0x24>
 800d928:	bd38      	pop	{r3, r4, r5, pc}
 800d92a:	0799      	lsls	r1, r3, #30
 800d92c:	bf58      	it	pl
 800d92e:	6962      	ldrpl	r2, [r4, #20]
 800d930:	60a2      	str	r2, [r4, #8]
 800d932:	e7f4      	b.n	800d91e <__swsetup_r+0x8e>
 800d934:	2000      	movs	r0, #0
 800d936:	e7f7      	b.n	800d928 <__swsetup_r+0x98>
 800d938:	20000024 	.word	0x20000024

0800d93c <memset>:
 800d93c:	4402      	add	r2, r0
 800d93e:	4603      	mov	r3, r0
 800d940:	4293      	cmp	r3, r2
 800d942:	d100      	bne.n	800d946 <memset+0xa>
 800d944:	4770      	bx	lr
 800d946:	f803 1b01 	strb.w	r1, [r3], #1
 800d94a:	e7f9      	b.n	800d940 <memset+0x4>

0800d94c <_close_r>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	2300      	movs	r3, #0
 800d950:	4d05      	ldr	r5, [pc, #20]	@ (800d968 <_close_r+0x1c>)
 800d952:	4604      	mov	r4, r0
 800d954:	4608      	mov	r0, r1
 800d956:	602b      	str	r3, [r5, #0]
 800d958:	f7f6 f98b 	bl	8003c72 <_close>
 800d95c:	1c43      	adds	r3, r0, #1
 800d95e:	d102      	bne.n	800d966 <_close_r+0x1a>
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	b103      	cbz	r3, 800d966 <_close_r+0x1a>
 800d964:	6023      	str	r3, [r4, #0]
 800d966:	bd38      	pop	{r3, r4, r5, pc}
 800d968:	200008fc 	.word	0x200008fc

0800d96c <_lseek_r>:
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4604      	mov	r4, r0
 800d970:	4d06      	ldr	r5, [pc, #24]	@ (800d98c <_lseek_r+0x20>)
 800d972:	4608      	mov	r0, r1
 800d974:	4611      	mov	r1, r2
 800d976:	2200      	movs	r2, #0
 800d978:	602a      	str	r2, [r5, #0]
 800d97a:	461a      	mov	r2, r3
 800d97c:	f7f6 f9a0 	bl	8003cc0 <_lseek>
 800d980:	1c43      	adds	r3, r0, #1
 800d982:	d102      	bne.n	800d98a <_lseek_r+0x1e>
 800d984:	682b      	ldr	r3, [r5, #0]
 800d986:	b103      	cbz	r3, 800d98a <_lseek_r+0x1e>
 800d988:	6023      	str	r3, [r4, #0]
 800d98a:	bd38      	pop	{r3, r4, r5, pc}
 800d98c:	200008fc 	.word	0x200008fc

0800d990 <_read_r>:
 800d990:	b538      	push	{r3, r4, r5, lr}
 800d992:	4604      	mov	r4, r0
 800d994:	4d06      	ldr	r5, [pc, #24]	@ (800d9b0 <_read_r+0x20>)
 800d996:	4608      	mov	r0, r1
 800d998:	4611      	mov	r1, r2
 800d99a:	2200      	movs	r2, #0
 800d99c:	602a      	str	r2, [r5, #0]
 800d99e:	461a      	mov	r2, r3
 800d9a0:	f7f6 f92e 	bl	8003c00 <_read>
 800d9a4:	1c43      	adds	r3, r0, #1
 800d9a6:	d102      	bne.n	800d9ae <_read_r+0x1e>
 800d9a8:	682b      	ldr	r3, [r5, #0]
 800d9aa:	b103      	cbz	r3, 800d9ae <_read_r+0x1e>
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	bd38      	pop	{r3, r4, r5, pc}
 800d9b0:	200008fc 	.word	0x200008fc

0800d9b4 <_sbrk_r>:
 800d9b4:	b538      	push	{r3, r4, r5, lr}
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	4d05      	ldr	r5, [pc, #20]	@ (800d9d0 <_sbrk_r+0x1c>)
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	4608      	mov	r0, r1
 800d9be:	602b      	str	r3, [r5, #0]
 800d9c0:	f7f6 f98c 	bl	8003cdc <_sbrk>
 800d9c4:	1c43      	adds	r3, r0, #1
 800d9c6:	d102      	bne.n	800d9ce <_sbrk_r+0x1a>
 800d9c8:	682b      	ldr	r3, [r5, #0]
 800d9ca:	b103      	cbz	r3, 800d9ce <_sbrk_r+0x1a>
 800d9cc:	6023      	str	r3, [r4, #0]
 800d9ce:	bd38      	pop	{r3, r4, r5, pc}
 800d9d0:	200008fc 	.word	0x200008fc

0800d9d4 <_write_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	4604      	mov	r4, r0
 800d9d8:	4d06      	ldr	r5, [pc, #24]	@ (800d9f4 <_write_r+0x20>)
 800d9da:	4608      	mov	r0, r1
 800d9dc:	4611      	mov	r1, r2
 800d9de:	2200      	movs	r2, #0
 800d9e0:	602a      	str	r2, [r5, #0]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	f7f6 f929 	bl	8003c3a <_write>
 800d9e8:	1c43      	adds	r3, r0, #1
 800d9ea:	d102      	bne.n	800d9f2 <_write_r+0x1e>
 800d9ec:	682b      	ldr	r3, [r5, #0]
 800d9ee:	b103      	cbz	r3, 800d9f2 <_write_r+0x1e>
 800d9f0:	6023      	str	r3, [r4, #0]
 800d9f2:	bd38      	pop	{r3, r4, r5, pc}
 800d9f4:	200008fc 	.word	0x200008fc

0800d9f8 <__errno>:
 800d9f8:	4b01      	ldr	r3, [pc, #4]	@ (800da00 <__errno+0x8>)
 800d9fa:	6818      	ldr	r0, [r3, #0]
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop
 800da00:	20000024 	.word	0x20000024

0800da04 <__libc_init_array>:
 800da04:	b570      	push	{r4, r5, r6, lr}
 800da06:	4d0d      	ldr	r5, [pc, #52]	@ (800da3c <__libc_init_array+0x38>)
 800da08:	2600      	movs	r6, #0
 800da0a:	4c0d      	ldr	r4, [pc, #52]	@ (800da40 <__libc_init_array+0x3c>)
 800da0c:	1b64      	subs	r4, r4, r5
 800da0e:	10a4      	asrs	r4, r4, #2
 800da10:	42a6      	cmp	r6, r4
 800da12:	d109      	bne.n	800da28 <__libc_init_array+0x24>
 800da14:	4d0b      	ldr	r5, [pc, #44]	@ (800da44 <__libc_init_array+0x40>)
 800da16:	2600      	movs	r6, #0
 800da18:	4c0b      	ldr	r4, [pc, #44]	@ (800da48 <__libc_init_array+0x44>)
 800da1a:	f001 fbe9 	bl	800f1f0 <_init>
 800da1e:	1b64      	subs	r4, r4, r5
 800da20:	10a4      	asrs	r4, r4, #2
 800da22:	42a6      	cmp	r6, r4
 800da24:	d105      	bne.n	800da32 <__libc_init_array+0x2e>
 800da26:	bd70      	pop	{r4, r5, r6, pc}
 800da28:	f855 3b04 	ldr.w	r3, [r5], #4
 800da2c:	3601      	adds	r6, #1
 800da2e:	4798      	blx	r3
 800da30:	e7ee      	b.n	800da10 <__libc_init_array+0xc>
 800da32:	f855 3b04 	ldr.w	r3, [r5], #4
 800da36:	3601      	adds	r6, #1
 800da38:	4798      	blx	r3
 800da3a:	e7f2      	b.n	800da22 <__libc_init_array+0x1e>
 800da3c:	0800f358 	.word	0x0800f358
 800da40:	0800f358 	.word	0x0800f358
 800da44:	0800f358 	.word	0x0800f358
 800da48:	0800f35c 	.word	0x0800f35c

0800da4c <__retarget_lock_init_recursive>:
 800da4c:	4770      	bx	lr

0800da4e <__retarget_lock_acquire_recursive>:
 800da4e:	4770      	bx	lr

0800da50 <__retarget_lock_release_recursive>:
 800da50:	4770      	bx	lr
	...

0800da54 <_free_r>:
 800da54:	b538      	push	{r3, r4, r5, lr}
 800da56:	4605      	mov	r5, r0
 800da58:	2900      	cmp	r1, #0
 800da5a:	d041      	beq.n	800dae0 <_free_r+0x8c>
 800da5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da60:	1f0c      	subs	r4, r1, #4
 800da62:	2b00      	cmp	r3, #0
 800da64:	bfb8      	it	lt
 800da66:	18e4      	addlt	r4, r4, r3
 800da68:	f7ff fd64 	bl	800d534 <__malloc_lock>
 800da6c:	4a1d      	ldr	r2, [pc, #116]	@ (800dae4 <_free_r+0x90>)
 800da6e:	6813      	ldr	r3, [r2, #0]
 800da70:	b933      	cbnz	r3, 800da80 <_free_r+0x2c>
 800da72:	6063      	str	r3, [r4, #4]
 800da74:	6014      	str	r4, [r2, #0]
 800da76:	4628      	mov	r0, r5
 800da78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da7c:	f7ff bd60 	b.w	800d540 <__malloc_unlock>
 800da80:	42a3      	cmp	r3, r4
 800da82:	d908      	bls.n	800da96 <_free_r+0x42>
 800da84:	6820      	ldr	r0, [r4, #0]
 800da86:	1821      	adds	r1, r4, r0
 800da88:	428b      	cmp	r3, r1
 800da8a:	bf01      	itttt	eq
 800da8c:	6819      	ldreq	r1, [r3, #0]
 800da8e:	685b      	ldreq	r3, [r3, #4]
 800da90:	1809      	addeq	r1, r1, r0
 800da92:	6021      	streq	r1, [r4, #0]
 800da94:	e7ed      	b.n	800da72 <_free_r+0x1e>
 800da96:	461a      	mov	r2, r3
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	b10b      	cbz	r3, 800daa0 <_free_r+0x4c>
 800da9c:	42a3      	cmp	r3, r4
 800da9e:	d9fa      	bls.n	800da96 <_free_r+0x42>
 800daa0:	6811      	ldr	r1, [r2, #0]
 800daa2:	1850      	adds	r0, r2, r1
 800daa4:	42a0      	cmp	r0, r4
 800daa6:	d10b      	bne.n	800dac0 <_free_r+0x6c>
 800daa8:	6820      	ldr	r0, [r4, #0]
 800daaa:	4401      	add	r1, r0
 800daac:	1850      	adds	r0, r2, r1
 800daae:	6011      	str	r1, [r2, #0]
 800dab0:	4283      	cmp	r3, r0
 800dab2:	d1e0      	bne.n	800da76 <_free_r+0x22>
 800dab4:	6818      	ldr	r0, [r3, #0]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	4408      	add	r0, r1
 800daba:	6053      	str	r3, [r2, #4]
 800dabc:	6010      	str	r0, [r2, #0]
 800dabe:	e7da      	b.n	800da76 <_free_r+0x22>
 800dac0:	d902      	bls.n	800dac8 <_free_r+0x74>
 800dac2:	230c      	movs	r3, #12
 800dac4:	602b      	str	r3, [r5, #0]
 800dac6:	e7d6      	b.n	800da76 <_free_r+0x22>
 800dac8:	6820      	ldr	r0, [r4, #0]
 800daca:	1821      	adds	r1, r4, r0
 800dacc:	428b      	cmp	r3, r1
 800dace:	bf02      	ittt	eq
 800dad0:	6819      	ldreq	r1, [r3, #0]
 800dad2:	685b      	ldreq	r3, [r3, #4]
 800dad4:	1809      	addeq	r1, r1, r0
 800dad6:	6063      	str	r3, [r4, #4]
 800dad8:	bf08      	it	eq
 800dada:	6021      	streq	r1, [r4, #0]
 800dadc:	6054      	str	r4, [r2, #4]
 800dade:	e7ca      	b.n	800da76 <_free_r+0x22>
 800dae0:	bd38      	pop	{r3, r4, r5, pc}
 800dae2:	bf00      	nop
 800dae4:	200007bc 	.word	0x200007bc

0800dae8 <__sflush_r>:
 800dae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800daec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daf0:	0716      	lsls	r6, r2, #28
 800daf2:	4605      	mov	r5, r0
 800daf4:	460c      	mov	r4, r1
 800daf6:	d454      	bmi.n	800dba2 <__sflush_r+0xba>
 800daf8:	684b      	ldr	r3, [r1, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	dc02      	bgt.n	800db04 <__sflush_r+0x1c>
 800dafe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800db00:	2b00      	cmp	r3, #0
 800db02:	dd48      	ble.n	800db96 <__sflush_r+0xae>
 800db04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db06:	2e00      	cmp	r6, #0
 800db08:	d045      	beq.n	800db96 <__sflush_r+0xae>
 800db0a:	2300      	movs	r3, #0
 800db0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800db10:	682f      	ldr	r7, [r5, #0]
 800db12:	6a21      	ldr	r1, [r4, #32]
 800db14:	602b      	str	r3, [r5, #0]
 800db16:	d030      	beq.n	800db7a <__sflush_r+0x92>
 800db18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800db1a:	89a3      	ldrh	r3, [r4, #12]
 800db1c:	0759      	lsls	r1, r3, #29
 800db1e:	d505      	bpl.n	800db2c <__sflush_r+0x44>
 800db20:	6863      	ldr	r3, [r4, #4]
 800db22:	1ad2      	subs	r2, r2, r3
 800db24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db26:	b10b      	cbz	r3, 800db2c <__sflush_r+0x44>
 800db28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db2a:	1ad2      	subs	r2, r2, r3
 800db2c:	2300      	movs	r3, #0
 800db2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db30:	6a21      	ldr	r1, [r4, #32]
 800db32:	4628      	mov	r0, r5
 800db34:	47b0      	blx	r6
 800db36:	1c43      	adds	r3, r0, #1
 800db38:	89a3      	ldrh	r3, [r4, #12]
 800db3a:	d106      	bne.n	800db4a <__sflush_r+0x62>
 800db3c:	6829      	ldr	r1, [r5, #0]
 800db3e:	291d      	cmp	r1, #29
 800db40:	d82b      	bhi.n	800db9a <__sflush_r+0xb2>
 800db42:	4a2a      	ldr	r2, [pc, #168]	@ (800dbec <__sflush_r+0x104>)
 800db44:	410a      	asrs	r2, r1
 800db46:	07d6      	lsls	r6, r2, #31
 800db48:	d427      	bmi.n	800db9a <__sflush_r+0xb2>
 800db4a:	2200      	movs	r2, #0
 800db4c:	04d9      	lsls	r1, r3, #19
 800db4e:	6062      	str	r2, [r4, #4]
 800db50:	6922      	ldr	r2, [r4, #16]
 800db52:	6022      	str	r2, [r4, #0]
 800db54:	d504      	bpl.n	800db60 <__sflush_r+0x78>
 800db56:	1c42      	adds	r2, r0, #1
 800db58:	d101      	bne.n	800db5e <__sflush_r+0x76>
 800db5a:	682b      	ldr	r3, [r5, #0]
 800db5c:	b903      	cbnz	r3, 800db60 <__sflush_r+0x78>
 800db5e:	6560      	str	r0, [r4, #84]	@ 0x54
 800db60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db62:	602f      	str	r7, [r5, #0]
 800db64:	b1b9      	cbz	r1, 800db96 <__sflush_r+0xae>
 800db66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db6a:	4299      	cmp	r1, r3
 800db6c:	d002      	beq.n	800db74 <__sflush_r+0x8c>
 800db6e:	4628      	mov	r0, r5
 800db70:	f7ff ff70 	bl	800da54 <_free_r>
 800db74:	2300      	movs	r3, #0
 800db76:	6363      	str	r3, [r4, #52]	@ 0x34
 800db78:	e00d      	b.n	800db96 <__sflush_r+0xae>
 800db7a:	2301      	movs	r3, #1
 800db7c:	4628      	mov	r0, r5
 800db7e:	47b0      	blx	r6
 800db80:	4602      	mov	r2, r0
 800db82:	1c50      	adds	r0, r2, #1
 800db84:	d1c9      	bne.n	800db1a <__sflush_r+0x32>
 800db86:	682b      	ldr	r3, [r5, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d0c6      	beq.n	800db1a <__sflush_r+0x32>
 800db8c:	2b1d      	cmp	r3, #29
 800db8e:	d001      	beq.n	800db94 <__sflush_r+0xac>
 800db90:	2b16      	cmp	r3, #22
 800db92:	d11d      	bne.n	800dbd0 <__sflush_r+0xe8>
 800db94:	602f      	str	r7, [r5, #0]
 800db96:	2000      	movs	r0, #0
 800db98:	e021      	b.n	800dbde <__sflush_r+0xf6>
 800db9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db9e:	b21b      	sxth	r3, r3
 800dba0:	e01a      	b.n	800dbd8 <__sflush_r+0xf0>
 800dba2:	690f      	ldr	r7, [r1, #16]
 800dba4:	2f00      	cmp	r7, #0
 800dba6:	d0f6      	beq.n	800db96 <__sflush_r+0xae>
 800dba8:	0793      	lsls	r3, r2, #30
 800dbaa:	680e      	ldr	r6, [r1, #0]
 800dbac:	600f      	str	r7, [r1, #0]
 800dbae:	bf0c      	ite	eq
 800dbb0:	694b      	ldreq	r3, [r1, #20]
 800dbb2:	2300      	movne	r3, #0
 800dbb4:	eba6 0807 	sub.w	r8, r6, r7
 800dbb8:	608b      	str	r3, [r1, #8]
 800dbba:	f1b8 0f00 	cmp.w	r8, #0
 800dbbe:	ddea      	ble.n	800db96 <__sflush_r+0xae>
 800dbc0:	4643      	mov	r3, r8
 800dbc2:	463a      	mov	r2, r7
 800dbc4:	6a21      	ldr	r1, [r4, #32]
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dbca:	47b0      	blx	r6
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	dc08      	bgt.n	800dbe2 <__sflush_r+0xfa>
 800dbd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbdc:	81a3      	strh	r3, [r4, #12]
 800dbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe2:	4407      	add	r7, r0
 800dbe4:	eba8 0800 	sub.w	r8, r8, r0
 800dbe8:	e7e7      	b.n	800dbba <__sflush_r+0xd2>
 800dbea:	bf00      	nop
 800dbec:	dfbffffe 	.word	0xdfbffffe

0800dbf0 <_fflush_r>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	690b      	ldr	r3, [r1, #16]
 800dbf4:	4605      	mov	r5, r0
 800dbf6:	460c      	mov	r4, r1
 800dbf8:	b913      	cbnz	r3, 800dc00 <_fflush_r+0x10>
 800dbfa:	2500      	movs	r5, #0
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	bd38      	pop	{r3, r4, r5, pc}
 800dc00:	b118      	cbz	r0, 800dc0a <_fflush_r+0x1a>
 800dc02:	6a03      	ldr	r3, [r0, #32]
 800dc04:	b90b      	cbnz	r3, 800dc0a <_fflush_r+0x1a>
 800dc06:	f7ff fd2d 	bl	800d664 <__sinit>
 800dc0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d0f3      	beq.n	800dbfa <_fflush_r+0xa>
 800dc12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dc14:	07d0      	lsls	r0, r2, #31
 800dc16:	d404      	bmi.n	800dc22 <_fflush_r+0x32>
 800dc18:	0599      	lsls	r1, r3, #22
 800dc1a:	d402      	bmi.n	800dc22 <_fflush_r+0x32>
 800dc1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc1e:	f7ff ff16 	bl	800da4e <__retarget_lock_acquire_recursive>
 800dc22:	4628      	mov	r0, r5
 800dc24:	4621      	mov	r1, r4
 800dc26:	f7ff ff5f 	bl	800dae8 <__sflush_r>
 800dc2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	07da      	lsls	r2, r3, #31
 800dc30:	d4e4      	bmi.n	800dbfc <_fflush_r+0xc>
 800dc32:	89a3      	ldrh	r3, [r4, #12]
 800dc34:	059b      	lsls	r3, r3, #22
 800dc36:	d4e1      	bmi.n	800dbfc <_fflush_r+0xc>
 800dc38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc3a:	f7ff ff09 	bl	800da50 <__retarget_lock_release_recursive>
 800dc3e:	e7dd      	b.n	800dbfc <_fflush_r+0xc>

0800dc40 <__swhatbuf_r>:
 800dc40:	b570      	push	{r4, r5, r6, lr}
 800dc42:	460c      	mov	r4, r1
 800dc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc48:	b096      	sub	sp, #88	@ 0x58
 800dc4a:	4615      	mov	r5, r2
 800dc4c:	2900      	cmp	r1, #0
 800dc4e:	461e      	mov	r6, r3
 800dc50:	da0c      	bge.n	800dc6c <__swhatbuf_r+0x2c>
 800dc52:	89a3      	ldrh	r3, [r4, #12]
 800dc54:	2100      	movs	r1, #0
 800dc56:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc5a:	bf14      	ite	ne
 800dc5c:	2340      	movne	r3, #64	@ 0x40
 800dc5e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc62:	2000      	movs	r0, #0
 800dc64:	6031      	str	r1, [r6, #0]
 800dc66:	602b      	str	r3, [r5, #0]
 800dc68:	b016      	add	sp, #88	@ 0x58
 800dc6a:	bd70      	pop	{r4, r5, r6, pc}
 800dc6c:	466a      	mov	r2, sp
 800dc6e:	f000 f849 	bl	800dd04 <_fstat_r>
 800dc72:	2800      	cmp	r0, #0
 800dc74:	dbed      	blt.n	800dc52 <__swhatbuf_r+0x12>
 800dc76:	9901      	ldr	r1, [sp, #4]
 800dc78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc7c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc80:	4259      	negs	r1, r3
 800dc82:	4159      	adcs	r1, r3
 800dc84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc88:	e7eb      	b.n	800dc62 <__swhatbuf_r+0x22>

0800dc8a <__smakebuf_r>:
 800dc8a:	898b      	ldrh	r3, [r1, #12]
 800dc8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc8e:	079d      	lsls	r5, r3, #30
 800dc90:	4606      	mov	r6, r0
 800dc92:	460c      	mov	r4, r1
 800dc94:	d507      	bpl.n	800dca6 <__smakebuf_r+0x1c>
 800dc96:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc9a:	6023      	str	r3, [r4, #0]
 800dc9c:	6123      	str	r3, [r4, #16]
 800dc9e:	2301      	movs	r3, #1
 800dca0:	6163      	str	r3, [r4, #20]
 800dca2:	b003      	add	sp, #12
 800dca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dca6:	ab01      	add	r3, sp, #4
 800dca8:	466a      	mov	r2, sp
 800dcaa:	f7ff ffc9 	bl	800dc40 <__swhatbuf_r>
 800dcae:	9f00      	ldr	r7, [sp, #0]
 800dcb0:	4605      	mov	r5, r0
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	4639      	mov	r1, r7
 800dcb6:	f7ff fbbd 	bl	800d434 <_malloc_r>
 800dcba:	b948      	cbnz	r0, 800dcd0 <__smakebuf_r+0x46>
 800dcbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcc0:	059a      	lsls	r2, r3, #22
 800dcc2:	d4ee      	bmi.n	800dca2 <__smakebuf_r+0x18>
 800dcc4:	f023 0303 	bic.w	r3, r3, #3
 800dcc8:	f043 0302 	orr.w	r3, r3, #2
 800dccc:	81a3      	strh	r3, [r4, #12]
 800dcce:	e7e2      	b.n	800dc96 <__smakebuf_r+0xc>
 800dcd0:	89a3      	ldrh	r3, [r4, #12]
 800dcd2:	6020      	str	r0, [r4, #0]
 800dcd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcd8:	81a3      	strh	r3, [r4, #12]
 800dcda:	9b01      	ldr	r3, [sp, #4]
 800dcdc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dce0:	b15b      	cbz	r3, 800dcfa <__smakebuf_r+0x70>
 800dce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dce6:	4630      	mov	r0, r6
 800dce8:	f000 f81e 	bl	800dd28 <_isatty_r>
 800dcec:	b128      	cbz	r0, 800dcfa <__smakebuf_r+0x70>
 800dcee:	89a3      	ldrh	r3, [r4, #12]
 800dcf0:	f023 0303 	bic.w	r3, r3, #3
 800dcf4:	f043 0301 	orr.w	r3, r3, #1
 800dcf8:	81a3      	strh	r3, [r4, #12]
 800dcfa:	89a3      	ldrh	r3, [r4, #12]
 800dcfc:	431d      	orrs	r5, r3
 800dcfe:	81a5      	strh	r5, [r4, #12]
 800dd00:	e7cf      	b.n	800dca2 <__smakebuf_r+0x18>
	...

0800dd04 <_fstat_r>:
 800dd04:	b538      	push	{r3, r4, r5, lr}
 800dd06:	2300      	movs	r3, #0
 800dd08:	4d06      	ldr	r5, [pc, #24]	@ (800dd24 <_fstat_r+0x20>)
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	4608      	mov	r0, r1
 800dd0e:	4611      	mov	r1, r2
 800dd10:	602b      	str	r3, [r5, #0]
 800dd12:	f7f5 ffba 	bl	8003c8a <_fstat>
 800dd16:	1c43      	adds	r3, r0, #1
 800dd18:	d102      	bne.n	800dd20 <_fstat_r+0x1c>
 800dd1a:	682b      	ldr	r3, [r5, #0]
 800dd1c:	b103      	cbz	r3, 800dd20 <_fstat_r+0x1c>
 800dd1e:	6023      	str	r3, [r4, #0]
 800dd20:	bd38      	pop	{r3, r4, r5, pc}
 800dd22:	bf00      	nop
 800dd24:	200008fc 	.word	0x200008fc

0800dd28 <_isatty_r>:
 800dd28:	b538      	push	{r3, r4, r5, lr}
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	4d05      	ldr	r5, [pc, #20]	@ (800dd44 <_isatty_r+0x1c>)
 800dd2e:	4604      	mov	r4, r0
 800dd30:	4608      	mov	r0, r1
 800dd32:	602b      	str	r3, [r5, #0]
 800dd34:	f7f5 ffb9 	bl	8003caa <_isatty>
 800dd38:	1c43      	adds	r3, r0, #1
 800dd3a:	d102      	bne.n	800dd42 <_isatty_r+0x1a>
 800dd3c:	682b      	ldr	r3, [r5, #0]
 800dd3e:	b103      	cbz	r3, 800dd42 <_isatty_r+0x1a>
 800dd40:	6023      	str	r3, [r4, #0]
 800dd42:	bd38      	pop	{r3, r4, r5, pc}
 800dd44:	200008fc 	.word	0x200008fc

0800dd48 <log>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	ec55 4b10 	vmov	r4, r5, d0
 800dd4e:	ed2d 8b02 	vpush	{d8}
 800dd52:	f000 fa09 	bl	800e168 <__ieee754_log>
 800dd56:	4622      	mov	r2, r4
 800dd58:	462b      	mov	r3, r5
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	4629      	mov	r1, r5
 800dd5e:	eeb0 8a40 	vmov.f32	s16, s0
 800dd62:	eef0 8a60 	vmov.f32	s17, s1
 800dd66:	f7f2 fee9 	bl	8000b3c <__aeabi_dcmpun>
 800dd6a:	b998      	cbnz	r0, 800dd94 <log+0x4c>
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	2300      	movs	r3, #0
 800dd70:	4620      	mov	r0, r4
 800dd72:	4629      	mov	r1, r5
 800dd74:	f7f2 fed8 	bl	8000b28 <__aeabi_dcmpgt>
 800dd78:	b960      	cbnz	r0, 800dd94 <log+0x4c>
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	4620      	mov	r0, r4
 800dd80:	4629      	mov	r1, r5
 800dd82:	f7f2 fea9 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd86:	b160      	cbz	r0, 800dda2 <log+0x5a>
 800dd88:	f7ff fe36 	bl	800d9f8 <__errno>
 800dd8c:	2322      	movs	r3, #34	@ 0x22
 800dd8e:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800ddb8 <log+0x70>
 800dd92:	6003      	str	r3, [r0, #0]
 800dd94:	eeb0 0a48 	vmov.f32	s0, s16
 800dd98:	eef0 0a68 	vmov.f32	s1, s17
 800dd9c:	ecbd 8b02 	vpop	{d8}
 800dda0:	bd38      	pop	{r3, r4, r5, pc}
 800dda2:	f7ff fe29 	bl	800d9f8 <__errno>
 800dda6:	2321      	movs	r3, #33	@ 0x21
 800dda8:	ecbd 8b02 	vpop	{d8}
 800ddac:	6003      	str	r3, [r0, #0]
 800ddae:	4804      	ldr	r0, [pc, #16]	@ (800ddc0 <log+0x78>)
 800ddb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddb4:	f000 b8f0 	b.w	800df98 <nan>
 800ddb8:	00000000 	.word	0x00000000
 800ddbc:	fff00000 	.word	0xfff00000
 800ddc0:	0800f318 	.word	0x0800f318
 800ddc4:	00000000 	.word	0x00000000

0800ddc8 <log10>:
 800ddc8:	b538      	push	{r3, r4, r5, lr}
 800ddca:	ec55 4b10 	vmov	r4, r5, d0
 800ddce:	ed2d 8b02 	vpush	{d8}
 800ddd2:	f000 fb7d 	bl	800e4d0 <__ieee754_log10>
 800ddd6:	4622      	mov	r2, r4
 800ddd8:	462b      	mov	r3, r5
 800ddda:	4620      	mov	r0, r4
 800dddc:	4629      	mov	r1, r5
 800ddde:	eeb0 8a40 	vmov.f32	s16, s0
 800dde2:	eef0 8a60 	vmov.f32	s17, s1
 800dde6:	f7f2 fea9 	bl	8000b3c <__aeabi_dcmpun>
 800ddea:	b998      	cbnz	r0, 800de14 <log10+0x4c>
 800ddec:	2200      	movs	r2, #0
 800ddee:	2300      	movs	r3, #0
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	4629      	mov	r1, r5
 800ddf4:	f7f2 fe84 	bl	8000b00 <__aeabi_dcmple>
 800ddf8:	b160      	cbz	r0, 800de14 <log10+0x4c>
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	4620      	mov	r0, r4
 800de00:	4629      	mov	r1, r5
 800de02:	f7f2 fe69 	bl	8000ad8 <__aeabi_dcmpeq>
 800de06:	b160      	cbz	r0, 800de22 <log10+0x5a>
 800de08:	f7ff fdf6 	bl	800d9f8 <__errno>
 800de0c:	2322      	movs	r3, #34	@ 0x22
 800de0e:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800de38 <log10+0x70>
 800de12:	6003      	str	r3, [r0, #0]
 800de14:	eeb0 0a48 	vmov.f32	s0, s16
 800de18:	eef0 0a68 	vmov.f32	s1, s17
 800de1c:	ecbd 8b02 	vpop	{d8}
 800de20:	bd38      	pop	{r3, r4, r5, pc}
 800de22:	f7ff fde9 	bl	800d9f8 <__errno>
 800de26:	2321      	movs	r3, #33	@ 0x21
 800de28:	ecbd 8b02 	vpop	{d8}
 800de2c:	6003      	str	r3, [r0, #0]
 800de2e:	4804      	ldr	r0, [pc, #16]	@ (800de40 <log10+0x78>)
 800de30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de34:	f000 b8b0 	b.w	800df98 <nan>
 800de38:	00000000 	.word	0x00000000
 800de3c:	fff00000 	.word	0xfff00000
 800de40:	0800f318 	.word	0x0800f318

0800de44 <pow>:
 800de44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de46:	ec55 4b11 	vmov	r4, r5, d1
 800de4a:	ed2d 8b02 	vpush	{d8}
 800de4e:	eeb0 8a40 	vmov.f32	s16, s0
 800de52:	eef0 8a60 	vmov.f32	s17, s1
 800de56:	f000 fbc7 	bl	800e5e8 <__ieee754_pow>
 800de5a:	4622      	mov	r2, r4
 800de5c:	462b      	mov	r3, r5
 800de5e:	4620      	mov	r0, r4
 800de60:	4629      	mov	r1, r5
 800de62:	ec57 6b10 	vmov	r6, r7, d0
 800de66:	f7f2 fe69 	bl	8000b3c <__aeabi_dcmpun>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	d13b      	bne.n	800dee6 <pow+0xa2>
 800de6e:	2200      	movs	r2, #0
 800de70:	2300      	movs	r3, #0
 800de72:	ec51 0b18 	vmov	r0, r1, d8
 800de76:	f7f2 fe2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800de7a:	b1b8      	cbz	r0, 800deac <pow+0x68>
 800de7c:	2200      	movs	r2, #0
 800de7e:	2300      	movs	r3, #0
 800de80:	4620      	mov	r0, r4
 800de82:	4629      	mov	r1, r5
 800de84:	f7f2 fe28 	bl	8000ad8 <__aeabi_dcmpeq>
 800de88:	2800      	cmp	r0, #0
 800de8a:	d146      	bne.n	800df1a <pow+0xd6>
 800de8c:	ec45 4b10 	vmov	d0, r4, r5
 800de90:	f000 f874 	bl	800df7c <finite>
 800de94:	b338      	cbz	r0, 800dee6 <pow+0xa2>
 800de96:	2200      	movs	r2, #0
 800de98:	2300      	movs	r3, #0
 800de9a:	4620      	mov	r0, r4
 800de9c:	4629      	mov	r1, r5
 800de9e:	f7f2 fe25 	bl	8000aec <__aeabi_dcmplt>
 800dea2:	b300      	cbz	r0, 800dee6 <pow+0xa2>
 800dea4:	f7ff fda8 	bl	800d9f8 <__errno>
 800dea8:	2322      	movs	r3, #34	@ 0x22
 800deaa:	e01b      	b.n	800dee4 <pow+0xa0>
 800deac:	ec47 6b10 	vmov	d0, r6, r7
 800deb0:	f000 f864 	bl	800df7c <finite>
 800deb4:	b9e0      	cbnz	r0, 800def0 <pow+0xac>
 800deb6:	eeb0 0a48 	vmov.f32	s0, s16
 800deba:	eef0 0a68 	vmov.f32	s1, s17
 800debe:	f000 f85d 	bl	800df7c <finite>
 800dec2:	b1a8      	cbz	r0, 800def0 <pow+0xac>
 800dec4:	ec45 4b10 	vmov	d0, r4, r5
 800dec8:	f000 f858 	bl	800df7c <finite>
 800decc:	b180      	cbz	r0, 800def0 <pow+0xac>
 800dece:	4632      	mov	r2, r6
 800ded0:	463b      	mov	r3, r7
 800ded2:	4630      	mov	r0, r6
 800ded4:	4639      	mov	r1, r7
 800ded6:	f7f2 fe31 	bl	8000b3c <__aeabi_dcmpun>
 800deda:	2800      	cmp	r0, #0
 800dedc:	d0e2      	beq.n	800dea4 <pow+0x60>
 800dede:	f7ff fd8b 	bl	800d9f8 <__errno>
 800dee2:	2321      	movs	r3, #33	@ 0x21
 800dee4:	6003      	str	r3, [r0, #0]
 800dee6:	ecbd 8b02 	vpop	{d8}
 800deea:	ec47 6b10 	vmov	d0, r6, r7
 800deee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800def0:	2200      	movs	r2, #0
 800def2:	2300      	movs	r3, #0
 800def4:	4630      	mov	r0, r6
 800def6:	4639      	mov	r1, r7
 800def8:	f7f2 fdee 	bl	8000ad8 <__aeabi_dcmpeq>
 800defc:	2800      	cmp	r0, #0
 800defe:	d0f2      	beq.n	800dee6 <pow+0xa2>
 800df00:	eeb0 0a48 	vmov.f32	s0, s16
 800df04:	eef0 0a68 	vmov.f32	s1, s17
 800df08:	f000 f838 	bl	800df7c <finite>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d0ea      	beq.n	800dee6 <pow+0xa2>
 800df10:	ec45 4b10 	vmov	d0, r4, r5
 800df14:	f000 f832 	bl	800df7c <finite>
 800df18:	e7c3      	b.n	800dea2 <pow+0x5e>
 800df1a:	2600      	movs	r6, #0
 800df1c:	4f00      	ldr	r7, [pc, #0]	@ (800df20 <pow+0xdc>)
 800df1e:	e7e2      	b.n	800dee6 <pow+0xa2>
 800df20:	3ff00000 	.word	0x3ff00000

0800df24 <sqrt>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	ec55 4b10 	vmov	r4, r5, d0
 800df2a:	ed2d 8b02 	vpush	{d8}
 800df2e:	f000 f83b 	bl	800dfa8 <__ieee754_sqrt>
 800df32:	4622      	mov	r2, r4
 800df34:	462b      	mov	r3, r5
 800df36:	4620      	mov	r0, r4
 800df38:	4629      	mov	r1, r5
 800df3a:	eeb0 8a40 	vmov.f32	s16, s0
 800df3e:	eef0 8a60 	vmov.f32	s17, s1
 800df42:	f7f2 fdfb 	bl	8000b3c <__aeabi_dcmpun>
 800df46:	b990      	cbnz	r0, 800df6e <sqrt+0x4a>
 800df48:	2200      	movs	r2, #0
 800df4a:	2300      	movs	r3, #0
 800df4c:	4620      	mov	r0, r4
 800df4e:	4629      	mov	r1, r5
 800df50:	f7f2 fdcc 	bl	8000aec <__aeabi_dcmplt>
 800df54:	b158      	cbz	r0, 800df6e <sqrt+0x4a>
 800df56:	f7ff fd4f 	bl	800d9f8 <__errno>
 800df5a:	2321      	movs	r3, #33	@ 0x21
 800df5c:	2200      	movs	r2, #0
 800df5e:	6003      	str	r3, [r0, #0]
 800df60:	2300      	movs	r3, #0
 800df62:	4610      	mov	r0, r2
 800df64:	4619      	mov	r1, r3
 800df66:	f7f2 fc79 	bl	800085c <__aeabi_ddiv>
 800df6a:	ec41 0b18 	vmov	d8, r0, r1
 800df6e:	eeb0 0a48 	vmov.f32	s0, s16
 800df72:	eef0 0a68 	vmov.f32	s1, s17
 800df76:	ecbd 8b02 	vpop	{d8}
 800df7a:	bd38      	pop	{r3, r4, r5, pc}

0800df7c <finite>:
 800df7c:	b082      	sub	sp, #8
 800df7e:	ed8d 0b00 	vstr	d0, [sp]
 800df82:	9801      	ldr	r0, [sp, #4]
 800df84:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800df88:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800df8c:	0fc0      	lsrs	r0, r0, #31
 800df8e:	b002      	add	sp, #8
 800df90:	4770      	bx	lr
 800df92:	0000      	movs	r0, r0
 800df94:	0000      	movs	r0, r0
	...

0800df98 <nan>:
 800df98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dfa0 <nan+0x8>
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	00000000 	.word	0x00000000
 800dfa4:	7ff80000 	.word	0x7ff80000

0800dfa8 <__ieee754_sqrt>:
 800dfa8:	4a6b      	ldr	r2, [pc, #428]	@ (800e158 <__ieee754_sqrt+0x1b0>)
 800dfaa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfae:	ec55 4b10 	vmov	r4, r5, d0
 800dfb2:	43aa      	bics	r2, r5
 800dfb4:	462b      	mov	r3, r5
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	d110      	bne.n	800dfdc <__ieee754_sqrt+0x34>
 800dfba:	4622      	mov	r2, r4
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	4629      	mov	r1, r5
 800dfc0:	f7f2 fb22 	bl	8000608 <__aeabi_dmul>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	4620      	mov	r0, r4
 800dfca:	4629      	mov	r1, r5
 800dfcc:	f7f2 f966 	bl	800029c <__adddf3>
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	460d      	mov	r5, r1
 800dfd4:	ec45 4b10 	vmov	d0, r4, r5
 800dfd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfdc:	2d00      	cmp	r5, #0
 800dfde:	dc0e      	bgt.n	800dffe <__ieee754_sqrt+0x56>
 800dfe0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800dfe4:	4322      	orrs	r2, r4
 800dfe6:	d0f5      	beq.n	800dfd4 <__ieee754_sqrt+0x2c>
 800dfe8:	b19d      	cbz	r5, 800e012 <__ieee754_sqrt+0x6a>
 800dfea:	4622      	mov	r2, r4
 800dfec:	4620      	mov	r0, r4
 800dfee:	4629      	mov	r1, r5
 800dff0:	f7f2 f952 	bl	8000298 <__aeabi_dsub>
 800dff4:	4602      	mov	r2, r0
 800dff6:	460b      	mov	r3, r1
 800dff8:	f7f2 fc30 	bl	800085c <__aeabi_ddiv>
 800dffc:	e7e8      	b.n	800dfd0 <__ieee754_sqrt+0x28>
 800dffe:	152a      	asrs	r2, r5, #20
 800e000:	d115      	bne.n	800e02e <__ieee754_sqrt+0x86>
 800e002:	2000      	movs	r0, #0
 800e004:	e009      	b.n	800e01a <__ieee754_sqrt+0x72>
 800e006:	0acb      	lsrs	r3, r1, #11
 800e008:	3a15      	subs	r2, #21
 800e00a:	0549      	lsls	r1, r1, #21
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d0fa      	beq.n	800e006 <__ieee754_sqrt+0x5e>
 800e010:	e7f7      	b.n	800e002 <__ieee754_sqrt+0x5a>
 800e012:	462a      	mov	r2, r5
 800e014:	e7fa      	b.n	800e00c <__ieee754_sqrt+0x64>
 800e016:	005b      	lsls	r3, r3, #1
 800e018:	3001      	adds	r0, #1
 800e01a:	02dc      	lsls	r4, r3, #11
 800e01c:	d5fb      	bpl.n	800e016 <__ieee754_sqrt+0x6e>
 800e01e:	1e44      	subs	r4, r0, #1
 800e020:	1b12      	subs	r2, r2, r4
 800e022:	f1c0 0420 	rsb	r4, r0, #32
 800e026:	fa21 f404 	lsr.w	r4, r1, r4
 800e02a:	4081      	lsls	r1, r0
 800e02c:	4323      	orrs	r3, r4
 800e02e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e032:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e036:	07d2      	lsls	r2, r2, #31
 800e038:	f04f 0600 	mov.w	r6, #0
 800e03c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e040:	ea4f 0565 	mov.w	r5, r5, asr #1
 800e044:	f04f 0016 	mov.w	r0, #22
 800e048:	4632      	mov	r2, r6
 800e04a:	bf58      	it	pl
 800e04c:	005b      	lslpl	r3, r3, #1
 800e04e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e052:	bf5c      	itt	pl
 800e054:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e058:	0049      	lslpl	r1, r1, #1
 800e05a:	005b      	lsls	r3, r3, #1
 800e05c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e060:	0049      	lsls	r1, r1, #1
 800e062:	1917      	adds	r7, r2, r4
 800e064:	429f      	cmp	r7, r3
 800e066:	bfde      	ittt	le
 800e068:	193a      	addle	r2, r7, r4
 800e06a:	1bdb      	suble	r3, r3, r7
 800e06c:	1936      	addle	r6, r6, r4
 800e06e:	0fcf      	lsrs	r7, r1, #31
 800e070:	3801      	subs	r0, #1
 800e072:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e076:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e07a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e07e:	d1f0      	bne.n	800e062 <__ieee754_sqrt+0xba>
 800e080:	4604      	mov	r4, r0
 800e082:	2720      	movs	r7, #32
 800e084:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e088:	429a      	cmp	r2, r3
 800e08a:	eb00 0e0c 	add.w	lr, r0, ip
 800e08e:	db02      	blt.n	800e096 <__ieee754_sqrt+0xee>
 800e090:	d113      	bne.n	800e0ba <__ieee754_sqrt+0x112>
 800e092:	458e      	cmp	lr, r1
 800e094:	d811      	bhi.n	800e0ba <__ieee754_sqrt+0x112>
 800e096:	f1be 0f00 	cmp.w	lr, #0
 800e09a:	eb0e 000c 	add.w	r0, lr, ip
 800e09e:	da43      	bge.n	800e128 <__ieee754_sqrt+0x180>
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	db41      	blt.n	800e128 <__ieee754_sqrt+0x180>
 800e0a4:	f102 0801 	add.w	r8, r2, #1
 800e0a8:	1a9b      	subs	r3, r3, r2
 800e0aa:	458e      	cmp	lr, r1
 800e0ac:	4464      	add	r4, ip
 800e0ae:	eba1 010e 	sub.w	r1, r1, lr
 800e0b2:	bf88      	it	hi
 800e0b4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e0b8:	4642      	mov	r2, r8
 800e0ba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e0be:	3f01      	subs	r7, #1
 800e0c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e0c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e0c8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e0cc:	d1dc      	bne.n	800e088 <__ieee754_sqrt+0xe0>
 800e0ce:	4319      	orrs	r1, r3
 800e0d0:	d01b      	beq.n	800e10a <__ieee754_sqrt+0x162>
 800e0d2:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800e15c <__ieee754_sqrt+0x1b4>
 800e0d6:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800e160 <__ieee754_sqrt+0x1b8>
 800e0da:	e9da 0100 	ldrd	r0, r1, [sl]
 800e0de:	e9db 2300 	ldrd	r2, r3, [fp]
 800e0e2:	e9da 8900 	ldrd	r8, r9, [sl]
 800e0e6:	f7f2 f8d7 	bl	8000298 <__aeabi_dsub>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	4640      	mov	r0, r8
 800e0f0:	4649      	mov	r1, r9
 800e0f2:	f7f2 fd05 	bl	8000b00 <__aeabi_dcmple>
 800e0f6:	b140      	cbz	r0, 800e10a <__ieee754_sqrt+0x162>
 800e0f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e0fc:	e9da 0100 	ldrd	r0, r1, [sl]
 800e100:	e9db 2300 	ldrd	r2, r3, [fp]
 800e104:	d112      	bne.n	800e12c <__ieee754_sqrt+0x184>
 800e106:	3601      	adds	r6, #1
 800e108:	463c      	mov	r4, r7
 800e10a:	1072      	asrs	r2, r6, #1
 800e10c:	07f1      	lsls	r1, r6, #31
 800e10e:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800e112:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e116:	bf48      	it	mi
 800e118:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e11c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e120:	4618      	mov	r0, r3
 800e122:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e126:	e753      	b.n	800dfd0 <__ieee754_sqrt+0x28>
 800e128:	4690      	mov	r8, r2
 800e12a:	e7bd      	b.n	800e0a8 <__ieee754_sqrt+0x100>
 800e12c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e130:	f7f2 f8b4 	bl	800029c <__adddf3>
 800e134:	4602      	mov	r2, r0
 800e136:	460b      	mov	r3, r1
 800e138:	4640      	mov	r0, r8
 800e13a:	4649      	mov	r1, r9
 800e13c:	f7f2 fcd6 	bl	8000aec <__aeabi_dcmplt>
 800e140:	b128      	cbz	r0, 800e14e <__ieee754_sqrt+0x1a6>
 800e142:	1ca0      	adds	r0, r4, #2
 800e144:	f104 0402 	add.w	r4, r4, #2
 800e148:	bf08      	it	eq
 800e14a:	3601      	addeq	r6, #1
 800e14c:	e7dd      	b.n	800e10a <__ieee754_sqrt+0x162>
 800e14e:	1c63      	adds	r3, r4, #1
 800e150:	f023 0401 	bic.w	r4, r3, #1
 800e154:	e7d9      	b.n	800e10a <__ieee754_sqrt+0x162>
 800e156:	bf00      	nop
 800e158:	7ff00000 	.word	0x7ff00000
 800e15c:	20000080 	.word	0x20000080
 800e160:	20000078 	.word	0x20000078
 800e164:	00000000 	.word	0x00000000

0800e168 <__ieee754_log>:
 800e168:	ec51 0b10 	vmov	r0, r1, d0
 800e16c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800e170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e174:	460d      	mov	r5, r1
 800e176:	b087      	sub	sp, #28
 800e178:	da26      	bge.n	800e1c8 <__ieee754_log+0x60>
 800e17a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e17e:	4602      	mov	r2, r0
 800e180:	4303      	orrs	r3, r0
 800e182:	d10a      	bne.n	800e19a <__ieee754_log+0x32>
 800e184:	2200      	movs	r2, #0
 800e186:	2300      	movs	r3, #0
 800e188:	2000      	movs	r0, #0
 800e18a:	49cb      	ldr	r1, [pc, #812]	@ (800e4b8 <__ieee754_log+0x350>)
 800e18c:	f7f2 fb66 	bl	800085c <__aeabi_ddiv>
 800e190:	ec41 0b10 	vmov	d0, r0, r1
 800e194:	b007      	add	sp, #28
 800e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19a:	2900      	cmp	r1, #0
 800e19c:	da05      	bge.n	800e1aa <__ieee754_log+0x42>
 800e19e:	460b      	mov	r3, r1
 800e1a0:	f7f2 f87a 	bl	8000298 <__aeabi_dsub>
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	e7f0      	b.n	800e18c <__ieee754_log+0x24>
 800e1aa:	4bc4      	ldr	r3, [pc, #784]	@ (800e4bc <__ieee754_log+0x354>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f7f2 fa2b 	bl	8000608 <__aeabi_dmul>
 800e1b2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800e1b6:	460d      	mov	r5, r1
 800e1b8:	4ac1      	ldr	r2, [pc, #772]	@ (800e4c0 <__ieee754_log+0x358>)
 800e1ba:	4295      	cmp	r5, r2
 800e1bc:	dd06      	ble.n	800e1cc <__ieee754_log+0x64>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	f7f2 f86b 	bl	800029c <__adddf3>
 800e1c6:	e7e3      	b.n	800e190 <__ieee754_log+0x28>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	e7f5      	b.n	800e1b8 <__ieee754_log+0x50>
 800e1cc:	152c      	asrs	r4, r5, #20
 800e1ce:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e1d2:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800e1d6:	441c      	add	r4, r3
 800e1d8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800e1dc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800e1e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e1e4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800e1e8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e1ec:	4bb5      	ldr	r3, [pc, #724]	@ (800e4c4 <__ieee754_log+0x35c>)
 800e1ee:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800e1f2:	ea42 0105 	orr.w	r1, r2, r5
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	f7f2 f84e 	bl	8000298 <__aeabi_dsub>
 800e1fc:	1cab      	adds	r3, r5, #2
 800e1fe:	4682      	mov	sl, r0
 800e200:	468b      	mov	fp, r1
 800e202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e206:	2200      	movs	r2, #0
 800e208:	2b02      	cmp	r3, #2
 800e20a:	dc53      	bgt.n	800e2b4 <__ieee754_log+0x14c>
 800e20c:	2300      	movs	r3, #0
 800e20e:	f7f2 fc63 	bl	8000ad8 <__aeabi_dcmpeq>
 800e212:	b1d0      	cbz	r0, 800e24a <__ieee754_log+0xe2>
 800e214:	2c00      	cmp	r4, #0
 800e216:	f000 8120 	beq.w	800e45a <__ieee754_log+0x2f2>
 800e21a:	4620      	mov	r0, r4
 800e21c:	f7f2 f98a 	bl	8000534 <__aeabi_i2d>
 800e220:	4606      	mov	r6, r0
 800e222:	460f      	mov	r7, r1
 800e224:	a38e      	add	r3, pc, #568	@ (adr r3, 800e460 <__ieee754_log+0x2f8>)
 800e226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22a:	f7f2 f9ed 	bl	8000608 <__aeabi_dmul>
 800e22e:	4604      	mov	r4, r0
 800e230:	460d      	mov	r5, r1
 800e232:	4630      	mov	r0, r6
 800e234:	4639      	mov	r1, r7
 800e236:	a38c      	add	r3, pc, #560	@ (adr r3, 800e468 <__ieee754_log+0x300>)
 800e238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23c:	f7f2 f9e4 	bl	8000608 <__aeabi_dmul>
 800e240:	4602      	mov	r2, r0
 800e242:	460b      	mov	r3, r1
 800e244:	4620      	mov	r0, r4
 800e246:	4629      	mov	r1, r5
 800e248:	e7bb      	b.n	800e1c2 <__ieee754_log+0x5a>
 800e24a:	a389      	add	r3, pc, #548	@ (adr r3, 800e470 <__ieee754_log+0x308>)
 800e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e250:	4650      	mov	r0, sl
 800e252:	4659      	mov	r1, fp
 800e254:	f7f2 f9d8 	bl	8000608 <__aeabi_dmul>
 800e258:	4602      	mov	r2, r0
 800e25a:	460b      	mov	r3, r1
 800e25c:	2000      	movs	r0, #0
 800e25e:	499a      	ldr	r1, [pc, #616]	@ (800e4c8 <__ieee754_log+0x360>)
 800e260:	f7f2 f81a 	bl	8000298 <__aeabi_dsub>
 800e264:	4606      	mov	r6, r0
 800e266:	460f      	mov	r7, r1
 800e268:	4652      	mov	r2, sl
 800e26a:	465b      	mov	r3, fp
 800e26c:	4650      	mov	r0, sl
 800e26e:	4659      	mov	r1, fp
 800e270:	f7f2 f9ca 	bl	8000608 <__aeabi_dmul>
 800e274:	4602      	mov	r2, r0
 800e276:	460b      	mov	r3, r1
 800e278:	4630      	mov	r0, r6
 800e27a:	4639      	mov	r1, r7
 800e27c:	f7f2 f9c4 	bl	8000608 <__aeabi_dmul>
 800e280:	4606      	mov	r6, r0
 800e282:	460f      	mov	r7, r1
 800e284:	b914      	cbnz	r4, 800e28c <__ieee754_log+0x124>
 800e286:	4632      	mov	r2, r6
 800e288:	463b      	mov	r3, r7
 800e28a:	e0a0      	b.n	800e3ce <__ieee754_log+0x266>
 800e28c:	4620      	mov	r0, r4
 800e28e:	f7f2 f951 	bl	8000534 <__aeabi_i2d>
 800e292:	4680      	mov	r8, r0
 800e294:	4689      	mov	r9, r1
 800e296:	a372      	add	r3, pc, #456	@ (adr r3, 800e460 <__ieee754_log+0x2f8>)
 800e298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29c:	f7f2 f9b4 	bl	8000608 <__aeabi_dmul>
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	460d      	mov	r5, r1
 800e2a4:	4640      	mov	r0, r8
 800e2a6:	4649      	mov	r1, r9
 800e2a8:	a36f      	add	r3, pc, #444	@ (adr r3, 800e468 <__ieee754_log+0x300>)
 800e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ae:	f7f2 f9ab 	bl	8000608 <__aeabi_dmul>
 800e2b2:	e0a5      	b.n	800e400 <__ieee754_log+0x298>
 800e2b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e2b8:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800e2bc:	f7f1 ffee 	bl	800029c <__adddf3>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	4650      	mov	r0, sl
 800e2c6:	4659      	mov	r1, fp
 800e2c8:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800e2cc:	f7f2 fac6 	bl	800085c <__aeabi_ddiv>
 800e2d0:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800e2d4:	3551      	adds	r5, #81	@ 0x51
 800e2d6:	e9cd 0100 	strd	r0, r1, [sp]
 800e2da:	4620      	mov	r0, r4
 800e2dc:	4335      	orrs	r5, r6
 800e2de:	f7f2 f929 	bl	8000534 <__aeabi_i2d>
 800e2e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	f7f2 f98b 	bl	8000608 <__aeabi_dmul>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e2fa:	f7f2 f985 	bl	8000608 <__aeabi_dmul>
 800e2fe:	4680      	mov	r8, r0
 800e300:	4689      	mov	r9, r1
 800e302:	a35d      	add	r3, pc, #372	@ (adr r3, 800e478 <__ieee754_log+0x310>)
 800e304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e308:	f7f2 f97e 	bl	8000608 <__aeabi_dmul>
 800e30c:	a35c      	add	r3, pc, #368	@ (adr r3, 800e480 <__ieee754_log+0x318>)
 800e30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e312:	f7f1 ffc3 	bl	800029c <__adddf3>
 800e316:	4642      	mov	r2, r8
 800e318:	464b      	mov	r3, r9
 800e31a:	f7f2 f975 	bl	8000608 <__aeabi_dmul>
 800e31e:	a35a      	add	r3, pc, #360	@ (adr r3, 800e488 <__ieee754_log+0x320>)
 800e320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e324:	f7f1 ffba 	bl	800029c <__adddf3>
 800e328:	4642      	mov	r2, r8
 800e32a:	464b      	mov	r3, r9
 800e32c:	f7f2 f96c 	bl	8000608 <__aeabi_dmul>
 800e330:	a357      	add	r3, pc, #348	@ (adr r3, 800e490 <__ieee754_log+0x328>)
 800e332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e336:	f7f1 ffb1 	bl	800029c <__adddf3>
 800e33a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e33e:	f7f2 f963 	bl	8000608 <__aeabi_dmul>
 800e342:	a355      	add	r3, pc, #340	@ (adr r3, 800e498 <__ieee754_log+0x330>)
 800e344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e348:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e34c:	4640      	mov	r0, r8
 800e34e:	4649      	mov	r1, r9
 800e350:	f7f2 f95a 	bl	8000608 <__aeabi_dmul>
 800e354:	a352      	add	r3, pc, #328	@ (adr r3, 800e4a0 <__ieee754_log+0x338>)
 800e356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35a:	f7f1 ff9f 	bl	800029c <__adddf3>
 800e35e:	4642      	mov	r2, r8
 800e360:	464b      	mov	r3, r9
 800e362:	f7f2 f951 	bl	8000608 <__aeabi_dmul>
 800e366:	a350      	add	r3, pc, #320	@ (adr r3, 800e4a8 <__ieee754_log+0x340>)
 800e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36c:	f7f1 ff96 	bl	800029c <__adddf3>
 800e370:	4642      	mov	r2, r8
 800e372:	464b      	mov	r3, r9
 800e374:	f7f2 f948 	bl	8000608 <__aeabi_dmul>
 800e378:	4602      	mov	r2, r0
 800e37a:	460b      	mov	r3, r1
 800e37c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e380:	f7f1 ff8c 	bl	800029c <__adddf3>
 800e384:	2d00      	cmp	r5, #0
 800e386:	4680      	mov	r8, r0
 800e388:	4689      	mov	r9, r1
 800e38a:	dd48      	ble.n	800e41e <__ieee754_log+0x2b6>
 800e38c:	2200      	movs	r2, #0
 800e38e:	4b4e      	ldr	r3, [pc, #312]	@ (800e4c8 <__ieee754_log+0x360>)
 800e390:	4650      	mov	r0, sl
 800e392:	4659      	mov	r1, fp
 800e394:	f7f2 f938 	bl	8000608 <__aeabi_dmul>
 800e398:	4652      	mov	r2, sl
 800e39a:	465b      	mov	r3, fp
 800e39c:	f7f2 f934 	bl	8000608 <__aeabi_dmul>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	4606      	mov	r6, r0
 800e3a6:	460f      	mov	r7, r1
 800e3a8:	4640      	mov	r0, r8
 800e3aa:	4649      	mov	r1, r9
 800e3ac:	f7f1 ff76 	bl	800029c <__adddf3>
 800e3b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3b4:	f7f2 f928 	bl	8000608 <__aeabi_dmul>
 800e3b8:	4680      	mov	r8, r0
 800e3ba:	4689      	mov	r9, r1
 800e3bc:	b964      	cbnz	r4, 800e3d8 <__ieee754_log+0x270>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	4639      	mov	r1, r7
 800e3c6:	f7f1 ff67 	bl	8000298 <__aeabi_dsub>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	4650      	mov	r0, sl
 800e3d0:	4659      	mov	r1, fp
 800e3d2:	f7f1 ff61 	bl	8000298 <__aeabi_dsub>
 800e3d6:	e6db      	b.n	800e190 <__ieee754_log+0x28>
 800e3d8:	a321      	add	r3, pc, #132	@ (adr r3, 800e460 <__ieee754_log+0x2f8>)
 800e3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3e2:	f7f2 f911 	bl	8000608 <__aeabi_dmul>
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	460d      	mov	r5, r1
 800e3ea:	a31f      	add	r3, pc, #124	@ (adr r3, 800e468 <__ieee754_log+0x300>)
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3f4:	f7f2 f908 	bl	8000608 <__aeabi_dmul>
 800e3f8:	4642      	mov	r2, r8
 800e3fa:	464b      	mov	r3, r9
 800e3fc:	f7f1 ff4e 	bl	800029c <__adddf3>
 800e400:	4602      	mov	r2, r0
 800e402:	460b      	mov	r3, r1
 800e404:	4630      	mov	r0, r6
 800e406:	4639      	mov	r1, r7
 800e408:	f7f1 ff46 	bl	8000298 <__aeabi_dsub>
 800e40c:	4652      	mov	r2, sl
 800e40e:	465b      	mov	r3, fp
 800e410:	f7f1 ff42 	bl	8000298 <__aeabi_dsub>
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	4620      	mov	r0, r4
 800e41a:	4629      	mov	r1, r5
 800e41c:	e7d9      	b.n	800e3d2 <__ieee754_log+0x26a>
 800e41e:	4602      	mov	r2, r0
 800e420:	460b      	mov	r3, r1
 800e422:	4650      	mov	r0, sl
 800e424:	4659      	mov	r1, fp
 800e426:	f7f1 ff37 	bl	8000298 <__aeabi_dsub>
 800e42a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e42e:	f7f2 f8eb 	bl	8000608 <__aeabi_dmul>
 800e432:	4606      	mov	r6, r0
 800e434:	460f      	mov	r7, r1
 800e436:	2c00      	cmp	r4, #0
 800e438:	f43f af25 	beq.w	800e286 <__ieee754_log+0x11e>
 800e43c:	a308      	add	r3, pc, #32	@ (adr r3, 800e460 <__ieee754_log+0x2f8>)
 800e43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e446:	f7f2 f8df 	bl	8000608 <__aeabi_dmul>
 800e44a:	4604      	mov	r4, r0
 800e44c:	460d      	mov	r5, r1
 800e44e:	a306      	add	r3, pc, #24	@ (adr r3, 800e468 <__ieee754_log+0x300>)
 800e450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e458:	e729      	b.n	800e2ae <__ieee754_log+0x146>
 800e45a:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 800e4b0 <__ieee754_log+0x348>
 800e45e:	e699      	b.n	800e194 <__ieee754_log+0x2c>
 800e460:	fee00000 	.word	0xfee00000
 800e464:	3fe62e42 	.word	0x3fe62e42
 800e468:	35793c76 	.word	0x35793c76
 800e46c:	3dea39ef 	.word	0x3dea39ef
 800e470:	55555555 	.word	0x55555555
 800e474:	3fd55555 	.word	0x3fd55555
 800e478:	df3e5244 	.word	0xdf3e5244
 800e47c:	3fc2f112 	.word	0x3fc2f112
 800e480:	96cb03de 	.word	0x96cb03de
 800e484:	3fc74664 	.word	0x3fc74664
 800e488:	94229359 	.word	0x94229359
 800e48c:	3fd24924 	.word	0x3fd24924
 800e490:	55555593 	.word	0x55555593
 800e494:	3fe55555 	.word	0x3fe55555
 800e498:	d078c69f 	.word	0xd078c69f
 800e49c:	3fc39a09 	.word	0x3fc39a09
 800e4a0:	1d8e78af 	.word	0x1d8e78af
 800e4a4:	3fcc71c5 	.word	0x3fcc71c5
 800e4a8:	9997fa04 	.word	0x9997fa04
 800e4ac:	3fd99999 	.word	0x3fd99999
	...
 800e4b8:	c3500000 	.word	0xc3500000
 800e4bc:	43500000 	.word	0x43500000
 800e4c0:	7fefffff 	.word	0x7fefffff
 800e4c4:	3ff00000 	.word	0x3ff00000
 800e4c8:	3fe00000 	.word	0x3fe00000
 800e4cc:	00000000 	.word	0x00000000

0800e4d0 <__ieee754_log10>:
 800e4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4d4:	ec55 4b10 	vmov	r4, r5, d0
 800e4d8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800e4dc:	462b      	mov	r3, r5
 800e4de:	ed2d 8b02 	vpush	{d8}
 800e4e2:	da2e      	bge.n	800e542 <__ieee754_log10+0x72>
 800e4e4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e4e8:	4322      	orrs	r2, r4
 800e4ea:	d10b      	bne.n	800e504 <__ieee754_log10+0x34>
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	4939      	ldr	r1, [pc, #228]	@ (800e5d8 <__ieee754_log10+0x108>)
 800e4f4:	f7f2 f9b2 	bl	800085c <__aeabi_ddiv>
 800e4f8:	ecbd 8b02 	vpop	{d8}
 800e4fc:	ec41 0b10 	vmov	d0, r0, r1
 800e500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e504:	2d00      	cmp	r5, #0
 800e506:	da07      	bge.n	800e518 <__ieee754_log10+0x48>
 800e508:	4622      	mov	r2, r4
 800e50a:	4620      	mov	r0, r4
 800e50c:	4629      	mov	r1, r5
 800e50e:	f7f1 fec3 	bl	8000298 <__aeabi_dsub>
 800e512:	2200      	movs	r2, #0
 800e514:	2300      	movs	r3, #0
 800e516:	e7ed      	b.n	800e4f4 <__ieee754_log10+0x24>
 800e518:	2200      	movs	r2, #0
 800e51a:	4b30      	ldr	r3, [pc, #192]	@ (800e5dc <__ieee754_log10+0x10c>)
 800e51c:	4620      	mov	r0, r4
 800e51e:	4629      	mov	r1, r5
 800e520:	f7f2 f872 	bl	8000608 <__aeabi_dmul>
 800e524:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800e528:	4604      	mov	r4, r0
 800e52a:	460d      	mov	r5, r1
 800e52c:	460b      	mov	r3, r1
 800e52e:	492c      	ldr	r1, [pc, #176]	@ (800e5e0 <__ieee754_log10+0x110>)
 800e530:	428b      	cmp	r3, r1
 800e532:	dd08      	ble.n	800e546 <__ieee754_log10+0x76>
 800e534:	4622      	mov	r2, r4
 800e536:	462b      	mov	r3, r5
 800e538:	4620      	mov	r0, r4
 800e53a:	4629      	mov	r1, r5
 800e53c:	f7f1 feae 	bl	800029c <__adddf3>
 800e540:	e7da      	b.n	800e4f8 <__ieee754_log10+0x28>
 800e542:	2200      	movs	r2, #0
 800e544:	e7f3      	b.n	800e52e <__ieee754_log10+0x5e>
 800e546:	1518      	asrs	r0, r3, #20
 800e548:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800e54c:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800e550:	4410      	add	r0, r2
 800e552:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800e556:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800e55a:	f7f1 ffeb 	bl	8000534 <__aeabi_i2d>
 800e55e:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 800e562:	4606      	mov	r6, r0
 800e564:	460f      	mov	r7, r1
 800e566:	3303      	adds	r3, #3
 800e568:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800e56c:	a314      	add	r3, pc, #80	@ (adr r3, 800e5c0 <__ieee754_log10+0xf0>)
 800e56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e572:	ec45 4b18 	vmov	d8, r4, r5
 800e576:	f7f2 f847 	bl	8000608 <__aeabi_dmul>
 800e57a:	eeb0 0a48 	vmov.f32	s0, s16
 800e57e:	eef0 0a68 	vmov.f32	s1, s17
 800e582:	4604      	mov	r4, r0
 800e584:	460d      	mov	r5, r1
 800e586:	f7ff fdef 	bl	800e168 <__ieee754_log>
 800e58a:	a30f      	add	r3, pc, #60	@ (adr r3, 800e5c8 <__ieee754_log10+0xf8>)
 800e58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e590:	ec51 0b10 	vmov	r0, r1, d0
 800e594:	f7f2 f838 	bl	8000608 <__aeabi_dmul>
 800e598:	4622      	mov	r2, r4
 800e59a:	462b      	mov	r3, r5
 800e59c:	f7f1 fe7e 	bl	800029c <__adddf3>
 800e5a0:	4604      	mov	r4, r0
 800e5a2:	460d      	mov	r5, r1
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	4639      	mov	r1, r7
 800e5a8:	a309      	add	r3, pc, #36	@ (adr r3, 800e5d0 <__ieee754_log10+0x100>)
 800e5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ae:	f7f2 f82b 	bl	8000608 <__aeabi_dmul>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	4629      	mov	r1, r5
 800e5ba:	e7bf      	b.n	800e53c <__ieee754_log10+0x6c>
 800e5bc:	f3af 8000 	nop.w
 800e5c0:	11f12b36 	.word	0x11f12b36
 800e5c4:	3d59fef3 	.word	0x3d59fef3
 800e5c8:	1526e50e 	.word	0x1526e50e
 800e5cc:	3fdbcb7b 	.word	0x3fdbcb7b
 800e5d0:	509f6000 	.word	0x509f6000
 800e5d4:	3fd34413 	.word	0x3fd34413
 800e5d8:	c3500000 	.word	0xc3500000
 800e5dc:	43500000 	.word	0x43500000
 800e5e0:	7fefffff 	.word	0x7fefffff
 800e5e4:	00000000 	.word	0x00000000

0800e5e8 <__ieee754_pow>:
 800e5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ec:	b091      	sub	sp, #68	@ 0x44
 800e5ee:	ed8d 1b00 	vstr	d1, [sp]
 800e5f2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800e5f6:	ec57 6b10 	vmov	r6, r7, d0
 800e5fa:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800e5fe:	ea5a 0001 	orrs.w	r0, sl, r1
 800e602:	d113      	bne.n	800e62c <__ieee754_pow+0x44>
 800e604:	19b3      	adds	r3, r6, r6
 800e606:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800e60a:	4152      	adcs	r2, r2
 800e60c:	4298      	cmp	r0, r3
 800e60e:	4b96      	ldr	r3, [pc, #600]	@ (800e868 <__ieee754_pow+0x280>)
 800e610:	4193      	sbcs	r3, r2
 800e612:	f080 84e7 	bcs.w	800efe4 <__ieee754_pow+0x9fc>
 800e616:	4630      	mov	r0, r6
 800e618:	4639      	mov	r1, r7
 800e61a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e61e:	f7f1 fe3d 	bl	800029c <__adddf3>
 800e622:	ec41 0b10 	vmov	d0, r0, r1
 800e626:	b011      	add	sp, #68	@ 0x44
 800e628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e62c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e630:	4a8e      	ldr	r2, [pc, #568]	@ (800e86c <__ieee754_pow+0x284>)
 800e632:	463d      	mov	r5, r7
 800e634:	4633      	mov	r3, r6
 800e636:	4590      	cmp	r8, r2
 800e638:	d806      	bhi.n	800e648 <__ieee754_pow+0x60>
 800e63a:	d101      	bne.n	800e640 <__ieee754_pow+0x58>
 800e63c:	2e00      	cmp	r6, #0
 800e63e:	d1ea      	bne.n	800e616 <__ieee754_pow+0x2e>
 800e640:	4592      	cmp	sl, r2
 800e642:	d801      	bhi.n	800e648 <__ieee754_pow+0x60>
 800e644:	d10e      	bne.n	800e664 <__ieee754_pow+0x7c>
 800e646:	b169      	cbz	r1, 800e664 <__ieee754_pow+0x7c>
 800e648:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800e64c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800e650:	431d      	orrs	r5, r3
 800e652:	d1e0      	bne.n	800e616 <__ieee754_pow+0x2e>
 800e654:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e658:	18db      	adds	r3, r3, r3
 800e65a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800e65e:	4152      	adcs	r2, r2
 800e660:	429d      	cmp	r5, r3
 800e662:	e7d4      	b.n	800e60e <__ieee754_pow+0x26>
 800e664:	2d00      	cmp	r5, #0
 800e666:	46c3      	mov	fp, r8
 800e668:	da3a      	bge.n	800e6e0 <__ieee754_pow+0xf8>
 800e66a:	4a81      	ldr	r2, [pc, #516]	@ (800e870 <__ieee754_pow+0x288>)
 800e66c:	4592      	cmp	sl, r2
 800e66e:	d84d      	bhi.n	800e70c <__ieee754_pow+0x124>
 800e670:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800e674:	4592      	cmp	sl, r2
 800e676:	f240 84c4 	bls.w	800f002 <__ieee754_pow+0xa1a>
 800e67a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800e67e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e682:	2a14      	cmp	r2, #20
 800e684:	dd0f      	ble.n	800e6a6 <__ieee754_pow+0xbe>
 800e686:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800e68a:	fa21 f402 	lsr.w	r4, r1, r2
 800e68e:	fa04 f202 	lsl.w	r2, r4, r2
 800e692:	428a      	cmp	r2, r1
 800e694:	f040 84b5 	bne.w	800f002 <__ieee754_pow+0xa1a>
 800e698:	f004 0401 	and.w	r4, r4, #1
 800e69c:	f1c4 0402 	rsb	r4, r4, #2
 800e6a0:	2900      	cmp	r1, #0
 800e6a2:	d158      	bne.n	800e756 <__ieee754_pow+0x16e>
 800e6a4:	e00e      	b.n	800e6c4 <__ieee754_pow+0xdc>
 800e6a6:	2900      	cmp	r1, #0
 800e6a8:	d154      	bne.n	800e754 <__ieee754_pow+0x16c>
 800e6aa:	f1c2 0214 	rsb	r2, r2, #20
 800e6ae:	fa4a f402 	asr.w	r4, sl, r2
 800e6b2:	fa04 f202 	lsl.w	r2, r4, r2
 800e6b6:	4552      	cmp	r2, sl
 800e6b8:	f040 84a0 	bne.w	800effc <__ieee754_pow+0xa14>
 800e6bc:	f004 0401 	and.w	r4, r4, #1
 800e6c0:	f1c4 0402 	rsb	r4, r4, #2
 800e6c4:	4a6b      	ldr	r2, [pc, #428]	@ (800e874 <__ieee754_pow+0x28c>)
 800e6c6:	4592      	cmp	sl, r2
 800e6c8:	d12e      	bne.n	800e728 <__ieee754_pow+0x140>
 800e6ca:	f1b9 0f00 	cmp.w	r9, #0
 800e6ce:	f280 8491 	bge.w	800eff4 <__ieee754_pow+0xa0c>
 800e6d2:	4632      	mov	r2, r6
 800e6d4:	463b      	mov	r3, r7
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	4966      	ldr	r1, [pc, #408]	@ (800e874 <__ieee754_pow+0x28c>)
 800e6da:	f7f2 f8bf 	bl	800085c <__aeabi_ddiv>
 800e6de:	e7a0      	b.n	800e622 <__ieee754_pow+0x3a>
 800e6e0:	2400      	movs	r4, #0
 800e6e2:	bbc1      	cbnz	r1, 800e756 <__ieee754_pow+0x16e>
 800e6e4:	4a61      	ldr	r2, [pc, #388]	@ (800e86c <__ieee754_pow+0x284>)
 800e6e6:	4592      	cmp	sl, r2
 800e6e8:	d1ec      	bne.n	800e6c4 <__ieee754_pow+0xdc>
 800e6ea:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800e6ee:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800e6f2:	431a      	orrs	r2, r3
 800e6f4:	f000 8476 	beq.w	800efe4 <__ieee754_pow+0x9fc>
 800e6f8:	4b5f      	ldr	r3, [pc, #380]	@ (800e878 <__ieee754_pow+0x290>)
 800e6fa:	4598      	cmp	r8, r3
 800e6fc:	d908      	bls.n	800e710 <__ieee754_pow+0x128>
 800e6fe:	f1b9 0f00 	cmp.w	r9, #0
 800e702:	f2c0 8473 	blt.w	800efec <__ieee754_pow+0xa04>
 800e706:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e70a:	e78a      	b.n	800e622 <__ieee754_pow+0x3a>
 800e70c:	2402      	movs	r4, #2
 800e70e:	e7e8      	b.n	800e6e2 <__ieee754_pow+0xfa>
 800e710:	f1b9 0f00 	cmp.w	r9, #0
 800e714:	f04f 0000 	mov.w	r0, #0
 800e718:	f04f 0100 	mov.w	r1, #0
 800e71c:	da81      	bge.n	800e622 <__ieee754_pow+0x3a>
 800e71e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e722:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e726:	e77c      	b.n	800e622 <__ieee754_pow+0x3a>
 800e728:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800e72c:	d106      	bne.n	800e73c <__ieee754_pow+0x154>
 800e72e:	4632      	mov	r2, r6
 800e730:	463b      	mov	r3, r7
 800e732:	4630      	mov	r0, r6
 800e734:	4639      	mov	r1, r7
 800e736:	f7f1 ff67 	bl	8000608 <__aeabi_dmul>
 800e73a:	e772      	b.n	800e622 <__ieee754_pow+0x3a>
 800e73c:	4a4f      	ldr	r2, [pc, #316]	@ (800e87c <__ieee754_pow+0x294>)
 800e73e:	4591      	cmp	r9, r2
 800e740:	d109      	bne.n	800e756 <__ieee754_pow+0x16e>
 800e742:	2d00      	cmp	r5, #0
 800e744:	db07      	blt.n	800e756 <__ieee754_pow+0x16e>
 800e746:	ec47 6b10 	vmov	d0, r6, r7
 800e74a:	b011      	add	sp, #68	@ 0x44
 800e74c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e750:	f7ff bc2a 	b.w	800dfa8 <__ieee754_sqrt>
 800e754:	2400      	movs	r4, #0
 800e756:	9302      	str	r3, [sp, #8]
 800e758:	ec47 6b10 	vmov	d0, r6, r7
 800e75c:	f000 fc84 	bl	800f068 <fabs>
 800e760:	9b02      	ldr	r3, [sp, #8]
 800e762:	ec51 0b10 	vmov	r0, r1, d0
 800e766:	bb53      	cbnz	r3, 800e7be <__ieee754_pow+0x1d6>
 800e768:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800e76c:	4b41      	ldr	r3, [pc, #260]	@ (800e874 <__ieee754_pow+0x28c>)
 800e76e:	429a      	cmp	r2, r3
 800e770:	d002      	beq.n	800e778 <__ieee754_pow+0x190>
 800e772:	f1b8 0f00 	cmp.w	r8, #0
 800e776:	d122      	bne.n	800e7be <__ieee754_pow+0x1d6>
 800e778:	f1b9 0f00 	cmp.w	r9, #0
 800e77c:	da05      	bge.n	800e78a <__ieee754_pow+0x1a2>
 800e77e:	4602      	mov	r2, r0
 800e780:	460b      	mov	r3, r1
 800e782:	2000      	movs	r0, #0
 800e784:	493b      	ldr	r1, [pc, #236]	@ (800e874 <__ieee754_pow+0x28c>)
 800e786:	f7f2 f869 	bl	800085c <__aeabi_ddiv>
 800e78a:	2d00      	cmp	r5, #0
 800e78c:	f6bf af49 	bge.w	800e622 <__ieee754_pow+0x3a>
 800e790:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800e794:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800e798:	ea58 0804 	orrs.w	r8, r8, r4
 800e79c:	d108      	bne.n	800e7b0 <__ieee754_pow+0x1c8>
 800e79e:	4602      	mov	r2, r0
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	f7f1 fd77 	bl	8000298 <__aeabi_dsub>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	e794      	b.n	800e6da <__ieee754_pow+0xf2>
 800e7b0:	2c01      	cmp	r4, #1
 800e7b2:	f47f af36 	bne.w	800e622 <__ieee754_pow+0x3a>
 800e7b6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	e731      	b.n	800e622 <__ieee754_pow+0x3a>
 800e7be:	0feb      	lsrs	r3, r5, #31
 800e7c0:	3b01      	subs	r3, #1
 800e7c2:	ea53 0204 	orrs.w	r2, r3, r4
 800e7c6:	d102      	bne.n	800e7ce <__ieee754_pow+0x1e6>
 800e7c8:	4632      	mov	r2, r6
 800e7ca:	463b      	mov	r3, r7
 800e7cc:	e7e9      	b.n	800e7a2 <__ieee754_pow+0x1ba>
 800e7ce:	3c01      	subs	r4, #1
 800e7d0:	431c      	orrs	r4, r3
 800e7d2:	d016      	beq.n	800e802 <__ieee754_pow+0x21a>
 800e7d4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800e858 <__ieee754_pow+0x270>
 800e7d8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e7dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e7e0:	f240 810e 	bls.w	800ea00 <__ieee754_pow+0x418>
 800e7e4:	4b26      	ldr	r3, [pc, #152]	@ (800e880 <__ieee754_pow+0x298>)
 800e7e6:	459a      	cmp	sl, r3
 800e7e8:	4b23      	ldr	r3, [pc, #140]	@ (800e878 <__ieee754_pow+0x290>)
 800e7ea:	d916      	bls.n	800e81a <__ieee754_pow+0x232>
 800e7ec:	4598      	cmp	r8, r3
 800e7ee:	d80b      	bhi.n	800e808 <__ieee754_pow+0x220>
 800e7f0:	f1b9 0f00 	cmp.w	r9, #0
 800e7f4:	da0b      	bge.n	800e80e <__ieee754_pow+0x226>
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	b011      	add	sp, #68	@ 0x44
 800e7fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fe:	f000 bcef 	b.w	800f1e0 <__math_oflow>
 800e802:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 800e860 <__ieee754_pow+0x278>
 800e806:	e7e7      	b.n	800e7d8 <__ieee754_pow+0x1f0>
 800e808:	f1b9 0f00 	cmp.w	r9, #0
 800e80c:	dcf3      	bgt.n	800e7f6 <__ieee754_pow+0x20e>
 800e80e:	2000      	movs	r0, #0
 800e810:	b011      	add	sp, #68	@ 0x44
 800e812:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e816:	f000 bcdb 	b.w	800f1d0 <__math_uflow>
 800e81a:	4598      	cmp	r8, r3
 800e81c:	d20c      	bcs.n	800e838 <__ieee754_pow+0x250>
 800e81e:	2200      	movs	r2, #0
 800e820:	2300      	movs	r3, #0
 800e822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e826:	f7f2 f961 	bl	8000aec <__aeabi_dcmplt>
 800e82a:	3800      	subs	r0, #0
 800e82c:	bf18      	it	ne
 800e82e:	2001      	movne	r0, #1
 800e830:	f1b9 0f00 	cmp.w	r9, #0
 800e834:	daec      	bge.n	800e810 <__ieee754_pow+0x228>
 800e836:	e7df      	b.n	800e7f8 <__ieee754_pow+0x210>
 800e838:	4b0e      	ldr	r3, [pc, #56]	@ (800e874 <__ieee754_pow+0x28c>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	4598      	cmp	r8, r3
 800e83e:	d921      	bls.n	800e884 <__ieee754_pow+0x29c>
 800e840:	2300      	movs	r3, #0
 800e842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e846:	f7f2 f951 	bl	8000aec <__aeabi_dcmplt>
 800e84a:	3800      	subs	r0, #0
 800e84c:	bf18      	it	ne
 800e84e:	2001      	movne	r0, #1
 800e850:	f1b9 0f00 	cmp.w	r9, #0
 800e854:	dcd0      	bgt.n	800e7f8 <__ieee754_pow+0x210>
 800e856:	e7db      	b.n	800e810 <__ieee754_pow+0x228>
 800e858:	00000000 	.word	0x00000000
 800e85c:	3ff00000 	.word	0x3ff00000
 800e860:	00000000 	.word	0x00000000
 800e864:	bff00000 	.word	0xbff00000
 800e868:	fff00000 	.word	0xfff00000
 800e86c:	7ff00000 	.word	0x7ff00000
 800e870:	433fffff 	.word	0x433fffff
 800e874:	3ff00000 	.word	0x3ff00000
 800e878:	3fefffff 	.word	0x3fefffff
 800e87c:	3fe00000 	.word	0x3fe00000
 800e880:	43f00000 	.word	0x43f00000
 800e884:	4b5a      	ldr	r3, [pc, #360]	@ (800e9f0 <__ieee754_pow+0x408>)
 800e886:	f7f1 fd07 	bl	8000298 <__aeabi_dsub>
 800e88a:	4604      	mov	r4, r0
 800e88c:	460d      	mov	r5, r1
 800e88e:	a350      	add	r3, pc, #320	@ (adr r3, 800e9d0 <__ieee754_pow+0x3e8>)
 800e890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e894:	f7f1 feb8 	bl	8000608 <__aeabi_dmul>
 800e898:	4606      	mov	r6, r0
 800e89a:	460f      	mov	r7, r1
 800e89c:	4620      	mov	r0, r4
 800e89e:	4629      	mov	r1, r5
 800e8a0:	a34d      	add	r3, pc, #308	@ (adr r3, 800e9d8 <__ieee754_pow+0x3f0>)
 800e8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a6:	f7f1 feaf 	bl	8000608 <__aeabi_dmul>
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	4682      	mov	sl, r0
 800e8ae:	468b      	mov	fp, r1
 800e8b0:	4b50      	ldr	r3, [pc, #320]	@ (800e9f4 <__ieee754_pow+0x40c>)
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	4629      	mov	r1, r5
 800e8b6:	f7f1 fea7 	bl	8000608 <__aeabi_dmul>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	460b      	mov	r3, r1
 800e8be:	a148      	add	r1, pc, #288	@ (adr r1, 800e9e0 <__ieee754_pow+0x3f8>)
 800e8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8c4:	f7f1 fce8 	bl	8000298 <__aeabi_dsub>
 800e8c8:	4622      	mov	r2, r4
 800e8ca:	462b      	mov	r3, r5
 800e8cc:	f7f1 fe9c 	bl	8000608 <__aeabi_dmul>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	2000      	movs	r0, #0
 800e8d6:	4948      	ldr	r1, [pc, #288]	@ (800e9f8 <__ieee754_pow+0x410>)
 800e8d8:	f7f1 fcde 	bl	8000298 <__aeabi_dsub>
 800e8dc:	4680      	mov	r8, r0
 800e8de:	4689      	mov	r9, r1
 800e8e0:	4622      	mov	r2, r4
 800e8e2:	462b      	mov	r3, r5
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	4629      	mov	r1, r5
 800e8e8:	2400      	movs	r4, #0
 800e8ea:	f7f1 fe8d 	bl	8000608 <__aeabi_dmul>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	4640      	mov	r0, r8
 800e8f4:	4649      	mov	r1, r9
 800e8f6:	f7f1 fe87 	bl	8000608 <__aeabi_dmul>
 800e8fa:	a33b      	add	r3, pc, #236	@ (adr r3, 800e9e8 <__ieee754_pow+0x400>)
 800e8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e900:	f7f1 fe82 	bl	8000608 <__aeabi_dmul>
 800e904:	4602      	mov	r2, r0
 800e906:	460b      	mov	r3, r1
 800e908:	4650      	mov	r0, sl
 800e90a:	4659      	mov	r1, fp
 800e90c:	f7f1 fcc4 	bl	8000298 <__aeabi_dsub>
 800e910:	4602      	mov	r2, r0
 800e912:	460b      	mov	r3, r1
 800e914:	4680      	mov	r8, r0
 800e916:	4689      	mov	r9, r1
 800e918:	4630      	mov	r0, r6
 800e91a:	4639      	mov	r1, r7
 800e91c:	f7f1 fcbe 	bl	800029c <__adddf3>
 800e920:	4632      	mov	r2, r6
 800e922:	463b      	mov	r3, r7
 800e924:	4620      	mov	r0, r4
 800e926:	460d      	mov	r5, r1
 800e928:	f7f1 fcb6 	bl	8000298 <__aeabi_dsub>
 800e92c:	4602      	mov	r2, r0
 800e92e:	460b      	mov	r3, r1
 800e930:	4640      	mov	r0, r8
 800e932:	4649      	mov	r1, r9
 800e934:	f7f1 fcb0 	bl	8000298 <__aeabi_dsub>
 800e938:	4606      	mov	r6, r0
 800e93a:	460f      	mov	r7, r1
 800e93c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e940:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e944:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e948:	2300      	movs	r3, #0
 800e94a:	9304      	str	r3, [sp, #16]
 800e94c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e950:	4652      	mov	r2, sl
 800e952:	465b      	mov	r3, fp
 800e954:	f7f1 fca0 	bl	8000298 <__aeabi_dsub>
 800e958:	4622      	mov	r2, r4
 800e95a:	462b      	mov	r3, r5
 800e95c:	f7f1 fe54 	bl	8000608 <__aeabi_dmul>
 800e960:	4680      	mov	r8, r0
 800e962:	4689      	mov	r9, r1
 800e964:	4630      	mov	r0, r6
 800e966:	4639      	mov	r1, r7
 800e968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e96c:	f7f1 fe4c 	bl	8000608 <__aeabi_dmul>
 800e970:	4602      	mov	r2, r0
 800e972:	460b      	mov	r3, r1
 800e974:	4640      	mov	r0, r8
 800e976:	4649      	mov	r1, r9
 800e978:	f7f1 fc90 	bl	800029c <__adddf3>
 800e97c:	4606      	mov	r6, r0
 800e97e:	460f      	mov	r7, r1
 800e980:	4652      	mov	r2, sl
 800e982:	465b      	mov	r3, fp
 800e984:	4620      	mov	r0, r4
 800e986:	4629      	mov	r1, r5
 800e988:	f7f1 fe3e 	bl	8000608 <__aeabi_dmul>
 800e98c:	460b      	mov	r3, r1
 800e98e:	4602      	mov	r2, r0
 800e990:	4680      	mov	r8, r0
 800e992:	4689      	mov	r9, r1
 800e994:	4630      	mov	r0, r6
 800e996:	4639      	mov	r1, r7
 800e998:	f7f1 fc80 	bl	800029c <__adddf3>
 800e99c:	4b17      	ldr	r3, [pc, #92]	@ (800e9fc <__ieee754_pow+0x414>)
 800e99e:	4604      	mov	r4, r0
 800e9a0:	460d      	mov	r5, r1
 800e9a2:	4299      	cmp	r1, r3
 800e9a4:	468a      	mov	sl, r1
 800e9a6:	468b      	mov	fp, r1
 800e9a8:	f340 82f0 	ble.w	800ef8c <__ieee754_pow+0x9a4>
 800e9ac:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e9b0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e9b4:	4303      	orrs	r3, r0
 800e9b6:	f000 81e8 	beq.w	800ed8a <__ieee754_pow+0x7a2>
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	2300      	movs	r3, #0
 800e9be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9c2:	f7f2 f893 	bl	8000aec <__aeabi_dcmplt>
 800e9c6:	3800      	subs	r0, #0
 800e9c8:	bf18      	it	ne
 800e9ca:	2001      	movne	r0, #1
 800e9cc:	e714      	b.n	800e7f8 <__ieee754_pow+0x210>
 800e9ce:	bf00      	nop
 800e9d0:	60000000 	.word	0x60000000
 800e9d4:	3ff71547 	.word	0x3ff71547
 800e9d8:	f85ddf44 	.word	0xf85ddf44
 800e9dc:	3e54ae0b 	.word	0x3e54ae0b
 800e9e0:	55555555 	.word	0x55555555
 800e9e4:	3fd55555 	.word	0x3fd55555
 800e9e8:	652b82fe 	.word	0x652b82fe
 800e9ec:	3ff71547 	.word	0x3ff71547
 800e9f0:	3ff00000 	.word	0x3ff00000
 800e9f4:	3fd00000 	.word	0x3fd00000
 800e9f8:	3fe00000 	.word	0x3fe00000
 800e9fc:	408fffff 	.word	0x408fffff
 800ea00:	4bd5      	ldr	r3, [pc, #852]	@ (800ed58 <__ieee754_pow+0x770>)
 800ea02:	2200      	movs	r2, #0
 800ea04:	402b      	ands	r3, r5
 800ea06:	b92b      	cbnz	r3, 800ea14 <__ieee754_pow+0x42c>
 800ea08:	4bd4      	ldr	r3, [pc, #848]	@ (800ed5c <__ieee754_pow+0x774>)
 800ea0a:	f7f1 fdfd 	bl	8000608 <__aeabi_dmul>
 800ea0e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ea12:	468b      	mov	fp, r1
 800ea14:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ea18:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ea1c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ea20:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800ea24:	4413      	add	r3, r2
 800ea26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ea2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea2c:	4bcc      	ldr	r3, [pc, #816]	@ (800ed60 <__ieee754_pow+0x778>)
 800ea2e:	459b      	cmp	fp, r3
 800ea30:	dd08      	ble.n	800ea44 <__ieee754_pow+0x45c>
 800ea32:	4bcc      	ldr	r3, [pc, #816]	@ (800ed64 <__ieee754_pow+0x77c>)
 800ea34:	459b      	cmp	fp, r3
 800ea36:	f340 81a5 	ble.w	800ed84 <__ieee754_pow+0x79c>
 800ea3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea3c:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ea40:	3301      	adds	r3, #1
 800ea42:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea44:	f04f 0a00 	mov.w	sl, #0
 800ea48:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ea4c:	4629      	mov	r1, r5
 800ea4e:	106d      	asrs	r5, r5, #1
 800ea50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea52:	4bc5      	ldr	r3, [pc, #788]	@ (800ed68 <__ieee754_pow+0x780>)
 800ea54:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ea58:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ea5c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ea60:	ed93 7b00 	vldr	d7, [r3]
 800ea64:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea68:	ec53 2b17 	vmov	r2, r3, d7
 800ea6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ea70:	f7f1 fc12 	bl	8000298 <__aeabi_dsub>
 800ea74:	4606      	mov	r6, r0
 800ea76:	460f      	mov	r7, r1
 800ea78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ea7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea80:	f7f1 fc0c 	bl	800029c <__adddf3>
 800ea84:	4602      	mov	r2, r0
 800ea86:	460b      	mov	r3, r1
 800ea88:	2000      	movs	r0, #0
 800ea8a:	49b8      	ldr	r1, [pc, #736]	@ (800ed6c <__ieee754_pow+0x784>)
 800ea8c:	f7f1 fee6 	bl	800085c <__aeabi_ddiv>
 800ea90:	4602      	mov	r2, r0
 800ea92:	460b      	mov	r3, r1
 800ea94:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ea98:	4630      	mov	r0, r6
 800ea9a:	4639      	mov	r1, r7
 800ea9c:	f7f1 fdb4 	bl	8000608 <__aeabi_dmul>
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800eaa6:	4614      	mov	r4, r2
 800eaa8:	461d      	mov	r5, r3
 800eaaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eaae:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800eab2:	f04f 0b00 	mov.w	fp, #0
 800eab6:	4661      	mov	r1, ip
 800eab8:	46e1      	mov	r9, ip
 800eaba:	4658      	mov	r0, fp
 800eabc:	46d8      	mov	r8, fp
 800eabe:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800eac2:	f7f1 fda1 	bl	8000608 <__aeabi_dmul>
 800eac6:	4602      	mov	r2, r0
 800eac8:	460b      	mov	r3, r1
 800eaca:	4630      	mov	r0, r6
 800eacc:	4639      	mov	r1, r7
 800eace:	f7f1 fbe3 	bl	8000298 <__aeabi_dsub>
 800ead2:	4606      	mov	r6, r0
 800ead4:	460f      	mov	r7, r1
 800ead6:	4620      	mov	r0, r4
 800ead8:	4629      	mov	r1, r5
 800eada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eade:	f7f1 fbdb 	bl	8000298 <__aeabi_dsub>
 800eae2:	4602      	mov	r2, r0
 800eae4:	460b      	mov	r3, r1
 800eae6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eaea:	f7f1 fbd5 	bl	8000298 <__aeabi_dsub>
 800eaee:	465a      	mov	r2, fp
 800eaf0:	464b      	mov	r3, r9
 800eaf2:	f7f1 fd89 	bl	8000608 <__aeabi_dmul>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	460b      	mov	r3, r1
 800eafa:	4630      	mov	r0, r6
 800eafc:	4639      	mov	r1, r7
 800eafe:	f7f1 fbcb 	bl	8000298 <__aeabi_dsub>
 800eb02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800eb06:	f7f1 fd7f 	bl	8000608 <__aeabi_dmul>
 800eb0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb12:	4610      	mov	r0, r2
 800eb14:	4619      	mov	r1, r3
 800eb16:	f7f1 fd77 	bl	8000608 <__aeabi_dmul>
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	460d      	mov	r5, r1
 800eb1e:	a37c      	add	r3, pc, #496	@ (adr r3, 800ed10 <__ieee754_pow+0x728>)
 800eb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb24:	f7f1 fd70 	bl	8000608 <__aeabi_dmul>
 800eb28:	a37b      	add	r3, pc, #492	@ (adr r3, 800ed18 <__ieee754_pow+0x730>)
 800eb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2e:	f7f1 fbb5 	bl	800029c <__adddf3>
 800eb32:	4622      	mov	r2, r4
 800eb34:	462b      	mov	r3, r5
 800eb36:	f7f1 fd67 	bl	8000608 <__aeabi_dmul>
 800eb3a:	a379      	add	r3, pc, #484	@ (adr r3, 800ed20 <__ieee754_pow+0x738>)
 800eb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb40:	f7f1 fbac 	bl	800029c <__adddf3>
 800eb44:	4622      	mov	r2, r4
 800eb46:	462b      	mov	r3, r5
 800eb48:	f7f1 fd5e 	bl	8000608 <__aeabi_dmul>
 800eb4c:	a376      	add	r3, pc, #472	@ (adr r3, 800ed28 <__ieee754_pow+0x740>)
 800eb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb52:	f7f1 fba3 	bl	800029c <__adddf3>
 800eb56:	4622      	mov	r2, r4
 800eb58:	462b      	mov	r3, r5
 800eb5a:	f7f1 fd55 	bl	8000608 <__aeabi_dmul>
 800eb5e:	a374      	add	r3, pc, #464	@ (adr r3, 800ed30 <__ieee754_pow+0x748>)
 800eb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb64:	f7f1 fb9a 	bl	800029c <__adddf3>
 800eb68:	4622      	mov	r2, r4
 800eb6a:	462b      	mov	r3, r5
 800eb6c:	f7f1 fd4c 	bl	8000608 <__aeabi_dmul>
 800eb70:	a371      	add	r3, pc, #452	@ (adr r3, 800ed38 <__ieee754_pow+0x750>)
 800eb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb76:	f7f1 fb91 	bl	800029c <__adddf3>
 800eb7a:	4606      	mov	r6, r0
 800eb7c:	460f      	mov	r7, r1
 800eb7e:	4622      	mov	r2, r4
 800eb80:	462b      	mov	r3, r5
 800eb82:	4620      	mov	r0, r4
 800eb84:	4629      	mov	r1, r5
 800eb86:	f7f1 fd3f 	bl	8000608 <__aeabi_dmul>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	4630      	mov	r0, r6
 800eb90:	4639      	mov	r1, r7
 800eb92:	f7f1 fd39 	bl	8000608 <__aeabi_dmul>
 800eb96:	465a      	mov	r2, fp
 800eb98:	4604      	mov	r4, r0
 800eb9a:	460d      	mov	r5, r1
 800eb9c:	464b      	mov	r3, r9
 800eb9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eba2:	f7f1 fb7b 	bl	800029c <__adddf3>
 800eba6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ebaa:	f7f1 fd2d 	bl	8000608 <__aeabi_dmul>
 800ebae:	4622      	mov	r2, r4
 800ebb0:	462b      	mov	r3, r5
 800ebb2:	f7f1 fb73 	bl	800029c <__adddf3>
 800ebb6:	465a      	mov	r2, fp
 800ebb8:	464b      	mov	r3, r9
 800ebba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ebbe:	4658      	mov	r0, fp
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	f7f1 fd21 	bl	8000608 <__aeabi_dmul>
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	4b69      	ldr	r3, [pc, #420]	@ (800ed70 <__ieee754_pow+0x788>)
 800ebca:	4606      	mov	r6, r0
 800ebcc:	460f      	mov	r7, r1
 800ebce:	f7f1 fb65 	bl	800029c <__adddf3>
 800ebd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ebd6:	f7f1 fb61 	bl	800029c <__adddf3>
 800ebda:	460d      	mov	r5, r1
 800ebdc:	460b      	mov	r3, r1
 800ebde:	4640      	mov	r0, r8
 800ebe0:	4649      	mov	r1, r9
 800ebe2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800ebe6:	465c      	mov	r4, fp
 800ebe8:	465a      	mov	r2, fp
 800ebea:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800ebee:	f7f1 fd0b 	bl	8000608 <__aeabi_dmul>
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	4680      	mov	r8, r0
 800ebf6:	4689      	mov	r9, r1
 800ebf8:	4b5d      	ldr	r3, [pc, #372]	@ (800ed70 <__ieee754_pow+0x788>)
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	4629      	mov	r1, r5
 800ebfe:	f7f1 fb4b 	bl	8000298 <__aeabi_dsub>
 800ec02:	4632      	mov	r2, r6
 800ec04:	463b      	mov	r3, r7
 800ec06:	f7f1 fb47 	bl	8000298 <__aeabi_dsub>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ec12:	f7f1 fb41 	bl	8000298 <__aeabi_dsub>
 800ec16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec1a:	f7f1 fcf5 	bl	8000608 <__aeabi_dmul>
 800ec1e:	4606      	mov	r6, r0
 800ec20:	460f      	mov	r7, r1
 800ec22:	4622      	mov	r2, r4
 800ec24:	462b      	mov	r3, r5
 800ec26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec2a:	f7f1 fced 	bl	8000608 <__aeabi_dmul>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	460b      	mov	r3, r1
 800ec32:	4630      	mov	r0, r6
 800ec34:	4639      	mov	r1, r7
 800ec36:	f7f1 fb31 	bl	800029c <__adddf3>
 800ec3a:	4606      	mov	r6, r0
 800ec3c:	460f      	mov	r7, r1
 800ec3e:	4602      	mov	r2, r0
 800ec40:	460b      	mov	r3, r1
 800ec42:	4640      	mov	r0, r8
 800ec44:	4649      	mov	r1, r9
 800ec46:	f7f1 fb29 	bl	800029c <__adddf3>
 800ec4a:	460d      	mov	r5, r1
 800ec4c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800ec50:	a33b      	add	r3, pc, #236	@ (adr r3, 800ed40 <__ieee754_pow+0x758>)
 800ec52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec56:	465c      	mov	r4, fp
 800ec58:	4658      	mov	r0, fp
 800ec5a:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800ec5e:	f7f1 fcd3 	bl	8000608 <__aeabi_dmul>
 800ec62:	4642      	mov	r2, r8
 800ec64:	464b      	mov	r3, r9
 800ec66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	4629      	mov	r1, r5
 800ec6e:	f7f1 fb13 	bl	8000298 <__aeabi_dsub>
 800ec72:	4602      	mov	r2, r0
 800ec74:	460b      	mov	r3, r1
 800ec76:	4630      	mov	r0, r6
 800ec78:	4639      	mov	r1, r7
 800ec7a:	f7f1 fb0d 	bl	8000298 <__aeabi_dsub>
 800ec7e:	a332      	add	r3, pc, #200	@ (adr r3, 800ed48 <__ieee754_pow+0x760>)
 800ec80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec84:	f7f1 fcc0 	bl	8000608 <__aeabi_dmul>
 800ec88:	4606      	mov	r6, r0
 800ec8a:	460f      	mov	r7, r1
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	4629      	mov	r1, r5
 800ec90:	a32f      	add	r3, pc, #188	@ (adr r3, 800ed50 <__ieee754_pow+0x768>)
 800ec92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec96:	f7f1 fcb7 	bl	8000608 <__aeabi_dmul>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	4630      	mov	r0, r6
 800eca0:	4639      	mov	r1, r7
 800eca2:	f7f1 fafb 	bl	800029c <__adddf3>
 800eca6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eca8:	4b32      	ldr	r3, [pc, #200]	@ (800ed74 <__ieee754_pow+0x78c>)
 800ecaa:	4413      	add	r3, r2
 800ecac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb0:	f7f1 faf4 	bl	800029c <__adddf3>
 800ecb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ecb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ecba:	f7f1 fc3b 	bl	8000534 <__aeabi_i2d>
 800ecbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ecc0:	4b2d      	ldr	r3, [pc, #180]	@ (800ed78 <__ieee754_pow+0x790>)
 800ecc2:	4606      	mov	r6, r0
 800ecc4:	460f      	mov	r7, r1
 800ecc6:	4413      	add	r3, r2
 800ecc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ecd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecd4:	f7f1 fae2 	bl	800029c <__adddf3>
 800ecd8:	4642      	mov	r2, r8
 800ecda:	464b      	mov	r3, r9
 800ecdc:	f7f1 fade 	bl	800029c <__adddf3>
 800ece0:	4632      	mov	r2, r6
 800ece2:	463b      	mov	r3, r7
 800ece4:	f7f1 fada 	bl	800029c <__adddf3>
 800ece8:	4632      	mov	r2, r6
 800ecea:	463b      	mov	r3, r7
 800ecec:	460d      	mov	r5, r1
 800ecee:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ecf2:	4658      	mov	r0, fp
 800ecf4:	465c      	mov	r4, fp
 800ecf6:	f7f1 facf 	bl	8000298 <__aeabi_dsub>
 800ecfa:	4642      	mov	r2, r8
 800ecfc:	464b      	mov	r3, r9
 800ecfe:	f7f1 facb 	bl	8000298 <__aeabi_dsub>
 800ed02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed06:	f7f1 fac7 	bl	8000298 <__aeabi_dsub>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	e036      	b.n	800ed7c <__ieee754_pow+0x794>
 800ed0e:	bf00      	nop
 800ed10:	4a454eef 	.word	0x4a454eef
 800ed14:	3fca7e28 	.word	0x3fca7e28
 800ed18:	93c9db65 	.word	0x93c9db65
 800ed1c:	3fcd864a 	.word	0x3fcd864a
 800ed20:	a91d4101 	.word	0xa91d4101
 800ed24:	3fd17460 	.word	0x3fd17460
 800ed28:	518f264d 	.word	0x518f264d
 800ed2c:	3fd55555 	.word	0x3fd55555
 800ed30:	db6fabff 	.word	0xdb6fabff
 800ed34:	3fdb6db6 	.word	0x3fdb6db6
 800ed38:	33333303 	.word	0x33333303
 800ed3c:	3fe33333 	.word	0x3fe33333
 800ed40:	e0000000 	.word	0xe0000000
 800ed44:	3feec709 	.word	0x3feec709
 800ed48:	dc3a03fd 	.word	0xdc3a03fd
 800ed4c:	3feec709 	.word	0x3feec709
 800ed50:	145b01f5 	.word	0x145b01f5
 800ed54:	be3e2fe0 	.word	0xbe3e2fe0
 800ed58:	7ff00000 	.word	0x7ff00000
 800ed5c:	43400000 	.word	0x43400000
 800ed60:	0003988e 	.word	0x0003988e
 800ed64:	000bb679 	.word	0x000bb679
 800ed68:	0800f340 	.word	0x0800f340
 800ed6c:	3ff00000 	.word	0x3ff00000
 800ed70:	40080000 	.word	0x40080000
 800ed74:	0800f320 	.word	0x0800f320
 800ed78:	0800f330 	.word	0x0800f330
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed82:	e5d7      	b.n	800e934 <__ieee754_pow+0x34c>
 800ed84:	f04f 0a01 	mov.w	sl, #1
 800ed88:	e65e      	b.n	800ea48 <__ieee754_pow+0x460>
 800ed8a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800f05c <__ieee754_pow+0xa74>)
 800ed8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed90:	4630      	mov	r0, r6
 800ed92:	4639      	mov	r1, r7
 800ed94:	f7f1 fa82 	bl	800029c <__adddf3>
 800ed98:	4642      	mov	r2, r8
 800ed9a:	464b      	mov	r3, r9
 800ed9c:	e9cd 0100 	strd	r0, r1, [sp]
 800eda0:	4620      	mov	r0, r4
 800eda2:	4629      	mov	r1, r5
 800eda4:	f7f1 fa78 	bl	8000298 <__aeabi_dsub>
 800eda8:	4602      	mov	r2, r0
 800edaa:	460b      	mov	r3, r1
 800edac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800edb0:	f7f1 feba 	bl	8000b28 <__aeabi_dcmpgt>
 800edb4:	2800      	cmp	r0, #0
 800edb6:	f47f ae00 	bne.w	800e9ba <__ieee754_pow+0x3d2>
 800edba:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800edbe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800edc2:	48a1      	ldr	r0, [pc, #644]	@ (800f048 <__ieee754_pow+0xa60>)
 800edc4:	f1bb 0f00 	cmp.w	fp, #0
 800edc8:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800edcc:	f04f 0200 	mov.w	r2, #0
 800edd0:	fa43 fa0a 	asr.w	sl, r3, sl
 800edd4:	44da      	add	sl, fp
 800edd6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800edda:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800edde:	fa40 f001 	asr.w	r0, r0, r1
 800ede2:	f1c1 0114 	rsb	r1, r1, #20
 800ede6:	ea00 030a 	and.w	r3, r0, sl
 800edea:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800edee:	4640      	mov	r0, r8
 800edf0:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800edf4:	fa4a fa01 	asr.w	sl, sl, r1
 800edf8:	4649      	mov	r1, r9
 800edfa:	bfb8      	it	lt
 800edfc:	f1ca 0a00 	rsblt	sl, sl, #0
 800ee00:	f7f1 fa4a 	bl	8000298 <__aeabi_dsub>
 800ee04:	4680      	mov	r8, r0
 800ee06:	4689      	mov	r9, r1
 800ee08:	2400      	movs	r4, #0
 800ee0a:	4632      	mov	r2, r6
 800ee0c:	463b      	mov	r3, r7
 800ee0e:	4640      	mov	r0, r8
 800ee10:	4649      	mov	r1, r9
 800ee12:	f7f1 fa43 	bl	800029c <__adddf3>
 800ee16:	460d      	mov	r5, r1
 800ee18:	4620      	mov	r0, r4
 800ee1a:	a37b      	add	r3, pc, #492	@ (adr r3, 800f008 <__ieee754_pow+0xa20>)
 800ee1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee20:	f7f1 fbf2 	bl	8000608 <__aeabi_dmul>
 800ee24:	4642      	mov	r2, r8
 800ee26:	464b      	mov	r3, r9
 800ee28:	e9cd 0100 	strd	r0, r1, [sp]
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	4629      	mov	r1, r5
 800ee30:	f7f1 fa32 	bl	8000298 <__aeabi_dsub>
 800ee34:	4602      	mov	r2, r0
 800ee36:	460b      	mov	r3, r1
 800ee38:	4630      	mov	r0, r6
 800ee3a:	4639      	mov	r1, r7
 800ee3c:	f7f1 fa2c 	bl	8000298 <__aeabi_dsub>
 800ee40:	a373      	add	r3, pc, #460	@ (adr r3, 800f010 <__ieee754_pow+0xa28>)
 800ee42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee46:	f7f1 fbdf 	bl	8000608 <__aeabi_dmul>
 800ee4a:	4680      	mov	r8, r0
 800ee4c:	4689      	mov	r9, r1
 800ee4e:	4620      	mov	r0, r4
 800ee50:	4629      	mov	r1, r5
 800ee52:	a371      	add	r3, pc, #452	@ (adr r3, 800f018 <__ieee754_pow+0xa30>)
 800ee54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee58:	f7f1 fbd6 	bl	8000608 <__aeabi_dmul>
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	460b      	mov	r3, r1
 800ee60:	4640      	mov	r0, r8
 800ee62:	4649      	mov	r1, r9
 800ee64:	f7f1 fa1a 	bl	800029c <__adddf3>
 800ee68:	4604      	mov	r4, r0
 800ee6a:	460d      	mov	r5, r1
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	460b      	mov	r3, r1
 800ee70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee74:	f7f1 fa12 	bl	800029c <__adddf3>
 800ee78:	4680      	mov	r8, r0
 800ee7a:	4689      	mov	r9, r1
 800ee7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee80:	f7f1 fa0a 	bl	8000298 <__aeabi_dsub>
 800ee84:	4602      	mov	r2, r0
 800ee86:	460b      	mov	r3, r1
 800ee88:	4620      	mov	r0, r4
 800ee8a:	4629      	mov	r1, r5
 800ee8c:	f7f1 fa04 	bl	8000298 <__aeabi_dsub>
 800ee90:	4642      	mov	r2, r8
 800ee92:	4606      	mov	r6, r0
 800ee94:	460f      	mov	r7, r1
 800ee96:	464b      	mov	r3, r9
 800ee98:	4640      	mov	r0, r8
 800ee9a:	4649      	mov	r1, r9
 800ee9c:	f7f1 fbb4 	bl	8000608 <__aeabi_dmul>
 800eea0:	4604      	mov	r4, r0
 800eea2:	460d      	mov	r5, r1
 800eea4:	a35e      	add	r3, pc, #376	@ (adr r3, 800f020 <__ieee754_pow+0xa38>)
 800eea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeaa:	f7f1 fbad 	bl	8000608 <__aeabi_dmul>
 800eeae:	a35e      	add	r3, pc, #376	@ (adr r3, 800f028 <__ieee754_pow+0xa40>)
 800eeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb4:	f7f1 f9f0 	bl	8000298 <__aeabi_dsub>
 800eeb8:	4622      	mov	r2, r4
 800eeba:	462b      	mov	r3, r5
 800eebc:	f7f1 fba4 	bl	8000608 <__aeabi_dmul>
 800eec0:	a35b      	add	r3, pc, #364	@ (adr r3, 800f030 <__ieee754_pow+0xa48>)
 800eec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec6:	f7f1 f9e9 	bl	800029c <__adddf3>
 800eeca:	4622      	mov	r2, r4
 800eecc:	462b      	mov	r3, r5
 800eece:	f7f1 fb9b 	bl	8000608 <__aeabi_dmul>
 800eed2:	a359      	add	r3, pc, #356	@ (adr r3, 800f038 <__ieee754_pow+0xa50>)
 800eed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed8:	f7f1 f9de 	bl	8000298 <__aeabi_dsub>
 800eedc:	4622      	mov	r2, r4
 800eede:	462b      	mov	r3, r5
 800eee0:	f7f1 fb92 	bl	8000608 <__aeabi_dmul>
 800eee4:	a356      	add	r3, pc, #344	@ (adr r3, 800f040 <__ieee754_pow+0xa58>)
 800eee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeea:	f7f1 f9d7 	bl	800029c <__adddf3>
 800eeee:	4622      	mov	r2, r4
 800eef0:	462b      	mov	r3, r5
 800eef2:	f7f1 fb89 	bl	8000608 <__aeabi_dmul>
 800eef6:	4602      	mov	r2, r0
 800eef8:	460b      	mov	r3, r1
 800eefa:	4640      	mov	r0, r8
 800eefc:	4649      	mov	r1, r9
 800eefe:	f7f1 f9cb 	bl	8000298 <__aeabi_dsub>
 800ef02:	4604      	mov	r4, r0
 800ef04:	460d      	mov	r5, r1
 800ef06:	4602      	mov	r2, r0
 800ef08:	460b      	mov	r3, r1
 800ef0a:	4640      	mov	r0, r8
 800ef0c:	4649      	mov	r1, r9
 800ef0e:	f7f1 fb7b 	bl	8000608 <__aeabi_dmul>
 800ef12:	2200      	movs	r2, #0
 800ef14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ef18:	e9cd 0100 	strd	r0, r1, [sp]
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	4629      	mov	r1, r5
 800ef20:	f7f1 f9ba 	bl	8000298 <__aeabi_dsub>
 800ef24:	4602      	mov	r2, r0
 800ef26:	460b      	mov	r3, r1
 800ef28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef2c:	f7f1 fc96 	bl	800085c <__aeabi_ddiv>
 800ef30:	4632      	mov	r2, r6
 800ef32:	4604      	mov	r4, r0
 800ef34:	460d      	mov	r5, r1
 800ef36:	463b      	mov	r3, r7
 800ef38:	4640      	mov	r0, r8
 800ef3a:	4649      	mov	r1, r9
 800ef3c:	f7f1 fb64 	bl	8000608 <__aeabi_dmul>
 800ef40:	4632      	mov	r2, r6
 800ef42:	463b      	mov	r3, r7
 800ef44:	f7f1 f9aa 	bl	800029c <__adddf3>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	4629      	mov	r1, r5
 800ef50:	f7f1 f9a2 	bl	8000298 <__aeabi_dsub>
 800ef54:	4642      	mov	r2, r8
 800ef56:	464b      	mov	r3, r9
 800ef58:	f7f1 f99e 	bl	8000298 <__aeabi_dsub>
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	4602      	mov	r2, r0
 800ef60:	493a      	ldr	r1, [pc, #232]	@ (800f04c <__ieee754_pow+0xa64>)
 800ef62:	2000      	movs	r0, #0
 800ef64:	f7f1 f998 	bl	8000298 <__aeabi_dsub>
 800ef68:	ec41 0b10 	vmov	d0, r0, r1
 800ef6c:	ee10 3a90 	vmov	r3, s1
 800ef70:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ef74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ef78:	da30      	bge.n	800efdc <__ieee754_pow+0x9f4>
 800ef7a:	4650      	mov	r0, sl
 800ef7c:	f000 f87c 	bl	800f078 <scalbn>
 800ef80:	ec51 0b10 	vmov	r0, r1, d0
 800ef84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef88:	f7ff bbd5 	b.w	800e736 <__ieee754_pow+0x14e>
 800ef8c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ef90:	4c2f      	ldr	r4, [pc, #188]	@ (800f050 <__ieee754_pow+0xa68>)
 800ef92:	42a3      	cmp	r3, r4
 800ef94:	d91a      	bls.n	800efcc <__ieee754_pow+0x9e4>
 800ef96:	4b2f      	ldr	r3, [pc, #188]	@ (800f054 <__ieee754_pow+0xa6c>)
 800ef98:	440b      	add	r3, r1
 800ef9a:	4303      	orrs	r3, r0
 800ef9c:	d009      	beq.n	800efb2 <__ieee754_pow+0x9ca>
 800ef9e:	2200      	movs	r2, #0
 800efa0:	2300      	movs	r3, #0
 800efa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efa6:	f7f1 fda1 	bl	8000aec <__aeabi_dcmplt>
 800efaa:	3800      	subs	r0, #0
 800efac:	bf18      	it	ne
 800efae:	2001      	movne	r0, #1
 800efb0:	e42e      	b.n	800e810 <__ieee754_pow+0x228>
 800efb2:	4642      	mov	r2, r8
 800efb4:	464b      	mov	r3, r9
 800efb6:	f7f1 f96f 	bl	8000298 <__aeabi_dsub>
 800efba:	4632      	mov	r2, r6
 800efbc:	463b      	mov	r3, r7
 800efbe:	f7f1 fda9 	bl	8000b14 <__aeabi_dcmpge>
 800efc2:	2800      	cmp	r0, #0
 800efc4:	d1eb      	bne.n	800ef9e <__ieee754_pow+0x9b6>
 800efc6:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800f064 <__ieee754_pow+0xa7c>
 800efca:	e6f6      	b.n	800edba <__ieee754_pow+0x7d2>
 800efcc:	469a      	mov	sl, r3
 800efce:	4b22      	ldr	r3, [pc, #136]	@ (800f058 <__ieee754_pow+0xa70>)
 800efd0:	459a      	cmp	sl, r3
 800efd2:	f63f aef2 	bhi.w	800edba <__ieee754_pow+0x7d2>
 800efd6:	f8dd a010 	ldr.w	sl, [sp, #16]
 800efda:	e715      	b.n	800ee08 <__ieee754_pow+0x820>
 800efdc:	ec51 0b10 	vmov	r0, r1, d0
 800efe0:	4619      	mov	r1, r3
 800efe2:	e7cf      	b.n	800ef84 <__ieee754_pow+0x99c>
 800efe4:	2000      	movs	r0, #0
 800efe6:	4919      	ldr	r1, [pc, #100]	@ (800f04c <__ieee754_pow+0xa64>)
 800efe8:	f7ff bb1b 	b.w	800e622 <__ieee754_pow+0x3a>
 800efec:	2000      	movs	r0, #0
 800efee:	2100      	movs	r1, #0
 800eff0:	f7ff bb17 	b.w	800e622 <__ieee754_pow+0x3a>
 800eff4:	4630      	mov	r0, r6
 800eff6:	4639      	mov	r1, r7
 800eff8:	f7ff bb13 	b.w	800e622 <__ieee754_pow+0x3a>
 800effc:	460c      	mov	r4, r1
 800effe:	f7ff bb61 	b.w	800e6c4 <__ieee754_pow+0xdc>
 800f002:	2400      	movs	r4, #0
 800f004:	f7ff bb4c 	b.w	800e6a0 <__ieee754_pow+0xb8>
 800f008:	00000000 	.word	0x00000000
 800f00c:	3fe62e43 	.word	0x3fe62e43
 800f010:	fefa39ef 	.word	0xfefa39ef
 800f014:	3fe62e42 	.word	0x3fe62e42
 800f018:	0ca86c39 	.word	0x0ca86c39
 800f01c:	be205c61 	.word	0xbe205c61
 800f020:	72bea4d0 	.word	0x72bea4d0
 800f024:	3e663769 	.word	0x3e663769
 800f028:	c5d26bf1 	.word	0xc5d26bf1
 800f02c:	3ebbbd41 	.word	0x3ebbbd41
 800f030:	af25de2c 	.word	0xaf25de2c
 800f034:	3f11566a 	.word	0x3f11566a
 800f038:	16bebd93 	.word	0x16bebd93
 800f03c:	3f66c16c 	.word	0x3f66c16c
 800f040:	5555553e 	.word	0x5555553e
 800f044:	3fc55555 	.word	0x3fc55555
 800f048:	fff00000 	.word	0xfff00000
 800f04c:	3ff00000 	.word	0x3ff00000
 800f050:	4090cbff 	.word	0x4090cbff
 800f054:	3f6f3400 	.word	0x3f6f3400
 800f058:	3fe00000 	.word	0x3fe00000
 800f05c:	652b82fe 	.word	0x652b82fe
 800f060:	3c971547 	.word	0x3c971547
 800f064:	4090cc00 	.word	0x4090cc00

0800f068 <fabs>:
 800f068:	ec51 0b10 	vmov	r0, r1, d0
 800f06c:	4602      	mov	r2, r0
 800f06e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f072:	ec43 2b10 	vmov	d0, r2, r3
 800f076:	4770      	bx	lr

0800f078 <scalbn>:
 800f078:	b570      	push	{r4, r5, r6, lr}
 800f07a:	ec55 4b10 	vmov	r4, r5, d0
 800f07e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f082:	4606      	mov	r6, r0
 800f084:	462b      	mov	r3, r5
 800f086:	b991      	cbnz	r1, 800f0ae <scalbn+0x36>
 800f088:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f08c:	4323      	orrs	r3, r4
 800f08e:	d03d      	beq.n	800f10c <scalbn+0x94>
 800f090:	4b35      	ldr	r3, [pc, #212]	@ (800f168 <scalbn+0xf0>)
 800f092:	4620      	mov	r0, r4
 800f094:	4629      	mov	r1, r5
 800f096:	2200      	movs	r2, #0
 800f098:	f7f1 fab6 	bl	8000608 <__aeabi_dmul>
 800f09c:	4b33      	ldr	r3, [pc, #204]	@ (800f16c <scalbn+0xf4>)
 800f09e:	4604      	mov	r4, r0
 800f0a0:	460d      	mov	r5, r1
 800f0a2:	429e      	cmp	r6, r3
 800f0a4:	da0f      	bge.n	800f0c6 <scalbn+0x4e>
 800f0a6:	a328      	add	r3, pc, #160	@ (adr r3, 800f148 <scalbn+0xd0>)
 800f0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ac:	e01e      	b.n	800f0ec <scalbn+0x74>
 800f0ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f0b2:	4291      	cmp	r1, r2
 800f0b4:	d10b      	bne.n	800f0ce <scalbn+0x56>
 800f0b6:	4622      	mov	r2, r4
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	4629      	mov	r1, r5
 800f0bc:	f7f1 f8ee 	bl	800029c <__adddf3>
 800f0c0:	4604      	mov	r4, r0
 800f0c2:	460d      	mov	r5, r1
 800f0c4:	e022      	b.n	800f10c <scalbn+0x94>
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f0cc:	3936      	subs	r1, #54	@ 0x36
 800f0ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f0d2:	4296      	cmp	r6, r2
 800f0d4:	dd0d      	ble.n	800f0f2 <scalbn+0x7a>
 800f0d6:	2d00      	cmp	r5, #0
 800f0d8:	a11d      	add	r1, pc, #116	@ (adr r1, 800f150 <scalbn+0xd8>)
 800f0da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0de:	da02      	bge.n	800f0e6 <scalbn+0x6e>
 800f0e0:	a11d      	add	r1, pc, #116	@ (adr r1, 800f158 <scalbn+0xe0>)
 800f0e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0e6:	a31a      	add	r3, pc, #104	@ (adr r3, 800f150 <scalbn+0xd8>)
 800f0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ec:	f7f1 fa8c 	bl	8000608 <__aeabi_dmul>
 800f0f0:	e7e6      	b.n	800f0c0 <scalbn+0x48>
 800f0f2:	1872      	adds	r2, r6, r1
 800f0f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f0f8:	428a      	cmp	r2, r1
 800f0fa:	dcec      	bgt.n	800f0d6 <scalbn+0x5e>
 800f0fc:	2a00      	cmp	r2, #0
 800f0fe:	dd08      	ble.n	800f112 <scalbn+0x9a>
 800f100:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f104:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f108:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f10c:	ec45 4b10 	vmov	d0, r4, r5
 800f110:	bd70      	pop	{r4, r5, r6, pc}
 800f112:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f116:	da08      	bge.n	800f12a <scalbn+0xb2>
 800f118:	2d00      	cmp	r5, #0
 800f11a:	a10b      	add	r1, pc, #44	@ (adr r1, 800f148 <scalbn+0xd0>)
 800f11c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f120:	dac1      	bge.n	800f0a6 <scalbn+0x2e>
 800f122:	a10f      	add	r1, pc, #60	@ (adr r1, 800f160 <scalbn+0xe8>)
 800f124:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f128:	e7bd      	b.n	800f0a6 <scalbn+0x2e>
 800f12a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f12e:	3236      	adds	r2, #54	@ 0x36
 800f130:	4620      	mov	r0, r4
 800f132:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f136:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f13a:	2200      	movs	r2, #0
 800f13c:	4b0c      	ldr	r3, [pc, #48]	@ (800f170 <scalbn+0xf8>)
 800f13e:	4629      	mov	r1, r5
 800f140:	e7d4      	b.n	800f0ec <scalbn+0x74>
 800f142:	bf00      	nop
 800f144:	f3af 8000 	nop.w
 800f148:	c2f8f359 	.word	0xc2f8f359
 800f14c:	01a56e1f 	.word	0x01a56e1f
 800f150:	8800759c 	.word	0x8800759c
 800f154:	7e37e43c 	.word	0x7e37e43c
 800f158:	8800759c 	.word	0x8800759c
 800f15c:	fe37e43c 	.word	0xfe37e43c
 800f160:	c2f8f359 	.word	0xc2f8f359
 800f164:	81a56e1f 	.word	0x81a56e1f
 800f168:	43500000 	.word	0x43500000
 800f16c:	ffff3cb0 	.word	0xffff3cb0
 800f170:	3c900000 	.word	0x3c900000

0800f174 <with_errno>:
 800f174:	b510      	push	{r4, lr}
 800f176:	ed2d 8b02 	vpush	{d8}
 800f17a:	eeb0 8a40 	vmov.f32	s16, s0
 800f17e:	eef0 8a60 	vmov.f32	s17, s1
 800f182:	4604      	mov	r4, r0
 800f184:	f7fe fc38 	bl	800d9f8 <__errno>
 800f188:	6004      	str	r4, [r0, #0]
 800f18a:	eeb0 0a48 	vmov.f32	s0, s16
 800f18e:	eef0 0a68 	vmov.f32	s1, s17
 800f192:	ecbd 8b02 	vpop	{d8}
 800f196:	bd10      	pop	{r4, pc}

0800f198 <xflow>:
 800f198:	4603      	mov	r3, r0
 800f19a:	b507      	push	{r0, r1, r2, lr}
 800f19c:	ec51 0b10 	vmov	r0, r1, d0
 800f1a0:	b183      	cbz	r3, 800f1c4 <xflow+0x2c>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f1a8:	e9cd 2300 	strd	r2, r3, [sp]
 800f1ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1b0:	f7f1 fa2a 	bl	8000608 <__aeabi_dmul>
 800f1b4:	ec41 0b10 	vmov	d0, r0, r1
 800f1b8:	2022      	movs	r0, #34	@ 0x22
 800f1ba:	b003      	add	sp, #12
 800f1bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1c0:	f7ff bfd8 	b.w	800f174 <with_errno>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	e7ee      	b.n	800f1a8 <xflow+0x10>
 800f1ca:	0000      	movs	r0, r0
 800f1cc:	0000      	movs	r0, r0
	...

0800f1d0 <__math_uflow>:
 800f1d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f1d8 <__math_uflow+0x8>
 800f1d4:	f7ff bfe0 	b.w	800f198 <xflow>
 800f1d8:	00000000 	.word	0x00000000
 800f1dc:	10000000 	.word	0x10000000

0800f1e0 <__math_oflow>:
 800f1e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f1e8 <__math_oflow+0x8>
 800f1e4:	f7ff bfd8 	b.w	800f198 <xflow>
 800f1e8:	00000000 	.word	0x00000000
 800f1ec:	70000000 	.word	0x70000000

0800f1f0 <_init>:
 800f1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f2:	bf00      	nop
 800f1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1f6:	bc08      	pop	{r3}
 800f1f8:	469e      	mov	lr, r3
 800f1fa:	4770      	bx	lr

0800f1fc <_fini>:
 800f1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1fe:	bf00      	nop
 800f200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f202:	bc08      	pop	{r3}
 800f204:	469e      	mov	lr, r3
 800f206:	4770      	bx	lr
