
rhd_acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee78  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800f0c8  0800f0c8  000100c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f210  0800f210  00010210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f218  0800f218  00010218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f21c  0800f21c  0001021c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  0800f220  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000087a  20000088  0800f2a8  00011088  2**3
                  ALLOC
  8 ._user_heap_stack 00000606  20000902  0800f2a8  00011902  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00011088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f757  00000000  00000000  000110be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b3f  00000000  00000000  00030815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a58  00000000  00000000  00034358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001484  00000000  00000000  00035db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038d18  00000000  00000000  00037234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000211d2  00000000  00000000  0006ff4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016428f  00000000  00000000  0009111e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f53ad  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007dc8  00000000  00000000  001f53f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000091  00000000  00000000  001fd1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000088 	.word	0x20000088
 800026c:	00000000 	.word	0x00000000
 8000270:	0800f0b0 	.word	0x0800f0b0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000008c 	.word	0x2000008c
 800028c:	0800f0b0 	.word	0x0800f0b0

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b97e 	b.w	8000ebc <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bdc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14d      	bne.n	8000c80 <__udivmoddi4+0xa8>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	460f      	mov	r7, r1
 8000be8:	4684      	mov	ip, r0
 8000bea:	4696      	mov	lr, r2
 8000bec:	fab2 f382 	clz	r3, r2
 8000bf0:	d960      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bf2:	b14b      	cbz	r3, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c0c:	fa1f f48e 	uxth.w	r4, lr
 8000c10:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c14:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c18:	fb06 7711 	mls	r7, r6, r1, r7
 8000c1c:	fb01 f004 	mul.w	r0, r1, r4
 8000c20:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c28:	eb1e 0202 	adds.w	r2, lr, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x60>
 8000c32:	4290      	cmp	r0, r2
 8000c34:	f200 812d 	bhi.w	8000e92 <__udivmoddi4+0x2ba>
 8000c38:	4639      	mov	r1, r7
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	fa1f fc8c 	uxth.w	ip, ip
 8000c40:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c44:	fb06 2210 	mls	r2, r6, r0, r2
 8000c48:	fb00 f404 	mul.w	r4, r0, r4
 8000c4c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c50:	4564      	cmp	r4, ip
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c54:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5c:	d202      	bcs.n	8000c64 <__udivmoddi4+0x8c>
 8000c5e:	4564      	cmp	r4, ip
 8000c60:	f200 811a 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000c64:	4610      	mov	r0, r2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	ebac 0c04 	sub.w	ip, ip, r4
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b125      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c72:	fa2c f303 	lsr.w	r3, ip, r3
 8000c76:	2200      	movs	r2, #0
 8000c78:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d905      	bls.n	8000c90 <__udivmoddi4+0xb8>
 8000c84:	b10d      	cbz	r5, 8000c8a <__udivmoddi4+0xb2>
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	e7f5      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d14d      	bne.n	8000d34 <__udivmoddi4+0x15c>
 8000c98:	42a3      	cmp	r3, r4
 8000c9a:	f0c0 80f2 	bcc.w	8000e82 <__udivmoddi4+0x2aa>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f080 80ef 	bcs.w	8000e82 <__udivmoddi4+0x2aa>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	4608      	mov	r0, r1
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e6      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cae:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb2:	e7e3      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 80a2 	bne.w	8000dfe <__udivmoddi4+0x226>
 8000cba:	1a8a      	subs	r2, r1, r2
 8000cbc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cc0:	fa1f f68e 	uxth.w	r6, lr
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cca:	fb07 2014 	mls	r0, r7, r4, r2
 8000cce:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb06 f004 	mul.w	r0, r6, r4
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d90f      	bls.n	8000cfe <__udivmoddi4+0x126>
 8000cde:	eb1e 0202 	adds.w	r2, lr, r2
 8000ce2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000ce6:	bf2c      	ite	cs
 8000ce8:	f04f 0901 	movcs.w	r9, #1
 8000cec:	f04f 0900 	movcc.w	r9, #0
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d903      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cf4:	f1b9 0f00 	cmp.w	r9, #0
 8000cf8:	f000 80c8 	beq.w	8000e8c <__udivmoddi4+0x2b4>
 8000cfc:	4644      	mov	r4, r8
 8000cfe:	1a12      	subs	r2, r2, r0
 8000d00:	fa1f fc8c 	uxth.w	ip, ip
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	fb00 f606 	mul.w	r6, r0, r6
 8000d10:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d14:	4566      	cmp	r6, ip
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x152>
 8000d18:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x150>
 8000d22:	4566      	cmp	r6, ip
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	ebac 0c06 	sub.w	ip, ip, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	e79d      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d46:	40f4      	lsrs	r4, r6
 8000d48:	408a      	lsls	r2, r1
 8000d4a:	431f      	orrs	r7, r3
 8000d4c:	ea4e 030c 	orr.w	r3, lr, ip
 8000d50:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d54:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d64:	fb08 4410 	mls	r4, r8, r0, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb00 f90c 	mul.w	r9, r0, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	d90e      	bls.n	8000d92 <__udivmoddi4+0x1ba>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	bf2c      	ite	cs
 8000d7c:	f04f 0b01 	movcs.w	fp, #1
 8000d80:	f04f 0b00 	movcc.w	fp, #0
 8000d84:	45a1      	cmp	r9, r4
 8000d86:	d903      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d88:	f1bb 0f00 	cmp.w	fp, #0
 8000d8c:	f000 8093 	beq.w	8000eb6 <__udivmoddi4+0x2de>
 8000d90:	4650      	mov	r0, sl
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d9e:	fb08 4413 	mls	r4, r8, r3, r4
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d906      	bls.n	8000dbc <__udivmoddi4+0x1e4>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 38ff 	add.w	r8, r3, #4294967295
 8000db4:	d201      	bcs.n	8000dba <__udivmoddi4+0x1e2>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d87a      	bhi.n	8000eb0 <__udivmoddi4+0x2d8>
 8000dba:	4643      	mov	r3, r8
 8000dbc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc0:	eba4 040c 	sub.w	r4, r4, ip
 8000dc4:	fba0 9802 	umull	r9, r8, r0, r2
 8000dc8:	4544      	cmp	r4, r8
 8000dca:	46cc      	mov	ip, r9
 8000dcc:	4643      	mov	r3, r8
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0x1fe>
 8000dd0:	d106      	bne.n	8000de0 <__udivmoddi4+0x208>
 8000dd2:	45ce      	cmp	lr, r9
 8000dd4:	d204      	bcs.n	8000de0 <__udivmoddi4+0x208>
 8000dd6:	3801      	subs	r0, #1
 8000dd8:	ebb9 0c02 	subs.w	ip, r9, r2
 8000ddc:	eb68 0307 	sbc.w	r3, r8, r7
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x222>
 8000de2:	ebbe 020c 	subs.w	r2, lr, ip
 8000de6:	eb64 0403 	sbc.w	r4, r4, r3
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	fa22 f301 	lsr.w	r3, r2, r1
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	431e      	orrs	r6, r3
 8000df6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	e73e      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000dfe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e02:	f1c3 0120 	rsb	r1, r3, #32
 8000e06:	fa04 f203 	lsl.w	r2, r4, r3
 8000e0a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e0e:	40cc      	lsrs	r4, r1
 8000e10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e14:	fa20 f101 	lsr.w	r1, r0, r1
 8000e18:	fa1f f68e 	uxth.w	r6, lr
 8000e1c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fb07 4410 	mls	r4, r7, r0, r4
 8000e26:	0c11      	lsrs	r1, r2, #16
 8000e28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e2c:	fb00 f406 	mul.w	r4, r0, r6
 8000e30:	428c      	cmp	r4, r1
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x27a>
 8000e34:	eb1e 0101 	adds.w	r1, lr, r1
 8000e38:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3c:	bf2c      	ite	cs
 8000e3e:	f04f 0901 	movcs.w	r9, #1
 8000e42:	f04f 0900 	movcc.w	r9, #0
 8000e46:	428c      	cmp	r4, r1
 8000e48:	d902      	bls.n	8000e50 <__udivmoddi4+0x278>
 8000e4a:	f1b9 0f00 	cmp.w	r9, #0
 8000e4e:	d02c      	beq.n	8000eaa <__udivmoddi4+0x2d2>
 8000e50:	4640      	mov	r0, r8
 8000e52:	1b09      	subs	r1, r1, r4
 8000e54:	b292      	uxth	r2, r2
 8000e56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x2a2>
 8000e6a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e6e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e72:	d201      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d815      	bhi.n	8000ea4 <__udivmoddi4+0x2cc>
 8000e78:	4644      	mov	r4, r8
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e80:	e721      	b.n	8000cc6 <__udivmoddi4+0xee>
 8000e82:	1a86      	subs	r6, r0, r2
 8000e84:	eb64 0303 	sbc.w	r3, r4, r3
 8000e88:	2001      	movs	r0, #1
 8000e8a:	e70e      	b.n	8000caa <__udivmoddi4+0xd2>
 8000e8c:	3c02      	subs	r4, #2
 8000e8e:	4472      	add	r2, lr
 8000e90:	e735      	b.n	8000cfe <__udivmoddi4+0x126>
 8000e92:	3902      	subs	r1, #2
 8000e94:	4472      	add	r2, lr
 8000e96:	e6d0      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e98:	44f4      	add	ip, lr
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	e6e3      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e9e:	44f4      	add	ip, lr
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x152>
 8000ea4:	3c02      	subs	r4, #2
 8000ea6:	4472      	add	r2, lr
 8000ea8:	e7e7      	b.n	8000e7a <__udivmoddi4+0x2a2>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	4471      	add	r1, lr
 8000eae:	e7d0      	b.n	8000e52 <__udivmoddi4+0x27a>
 8000eb0:	3b02      	subs	r3, #2
 8000eb2:	443c      	add	r4, r7
 8000eb4:	e782      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	e76a      	b.n	8000d92 <__udivmoddi4+0x1ba>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <write_pin>:
void uart_interrupt_routine();
#endif

// Write specified pin on specified port either high (1) or low (0).
static inline void write_pin(GPIO_TypeDef * gpio_port, uint32_t gpio_pin, int level)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
#ifdef USE_HAL
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f004 fc32 	bl	8005740 <HAL_GPIO_WritePin>
#else
	level ? LL_GPIO_SetOutputPin(gpio_port, gpio_pin) : LL_GPIO_ResetOutputPin(gpio_port, gpio_pin);
#endif
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <wait_ms>:
 * helpful for repeated function calls within interrupt routine.
 */

// Wait for 'duration' ms. Recommended to never call from within an interrupt function.
static inline void wait_ms(int duration)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	HAL_Delay(duration);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 f952 	bl	8004198 <HAL_Delay>
#else
	SysTick_Config(SystemCoreClock/1000); // Set up SysTick so that getSysTick() returns ms since program started.
	while (get_SysTick() < duration) {}
#endif
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <enable_interrupt_timer>:

// Enable/disable timer interrupts.
static inline void enable_interrupt_timer(int enable)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <enable_interrupt_timer+0x16>
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <enable_interrupt_timer+0x24>)
 8000f0c:	f009 fe70 	bl	800abf0 <HAL_TIM_Base_Start_IT>
	} else {
		LL_TIM_DisableCounter(INTERRUPT_TIM);
		LL_TIM_DisableIT_UPDATE(INTERRUPT_TIM);
	}
#endif
}
 8000f10:	e002      	b.n	8000f18 <enable_interrupt_timer+0x1c>
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000f12:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <enable_interrupt_timer+0x24>)
 8000f14:	f009 ff0c 	bl	800ad30 <HAL_TIM_Base_Stop_IT>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000224 	.word	0x20000224

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0ca      	sub	sp, #296	@ 0x128
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2a:	f003 f86f 	bl	800400c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000f2e:	f000 f8bb 	bl	80010a8 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 f861 	bl	8000ff8 <SystemClock_Config>
  // reset, for example pushing the RESET button on a NUCLEO board, or when downloading/running using
  // STM32CubeProgrammer. For these cases, this delay can be removed.
  // When this bug does occur, we recommend including a delay of ~500 ms so that this brief running of the previously
  // loaded program doesn't have any interaction with any peripherals and this re-run program does nothing important.
  // In practice, 50 ms is likely enough of a pause from our testing, but 500 ms is even safer.
  wait_ms(500);
 8000f36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f3a:	f7ff ffd3 	bl	8000ee4 <wait_ms>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fa75 	bl	800142c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000f42:	f000 f8c1 	bl	80010c8 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8000f46:	f000 f9cd 	bl	80012e4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000f4a:	f000 f973 	bl	8001234 <MX_TIM3_Init>
  MX_SPI3_Init();
 8000f4e:	f000 f8ff 	bl	8001150 <MX_SPI3_Init>
  MX_ICACHE_Init();
 8000f52:	f000 f8e9 	bl	8001128 <MX_ICACHE_Init>
  MX_USART2_UART_Init();
 8000f56:	f000 fa1d 	bl	8001394 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Doing Stuff \r\n");
 8000f5a:	4822      	ldr	r0, [pc, #136]	@ (8000fe4 <main+0xc0>)
 8000f5c:	f00c fb6c 	bl	800d638 <puts>

  // Write register value to pause all used timers when execution pauses during debug
  SET_BIT(DBGMCU->APB1FZR1, 0b10); // enable pausing TIM3 during debug
 8000f60:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <main+0xc4>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	4a20      	ldr	r2, [pc, #128]	@ (8000fe8 <main+0xc4>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	6093      	str	r3, [r2, #8]

  // Alocate sample_memory array which will be used to store acquired data.
  allocate_sample_memory();
 8000f6c:	f000 fc2e 	bl	80017cc <allocate_sample_memory>

  // Set up SPI DMA configuration for when SPI transfers begin.
  initialize_spi_with_dma();
 8000f70:	f000 fc5c 	bl	800182c <initialize_spi_with_dma>

  // Initialize Intan chip registers with suitable settings for this application.
  // This not only determines the initial registers, but actually writes them via SPI.
  RHDConfigParameters parameters;
  configure_registers(&parameters);
 8000f74:	463b      	mov	r3, r7
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 ffce 	bl	8003f18 <configure_registers>

  // Populate first CONVERT_COMMANDS_PER_SEQUENCE that will repeatedly
  // convert for each sample interrupt.
  // Note that AUX_COMMANDS_PER_SEQUENCE remain unpopulated in command_sequence_MOSI after this.
  configure_convert_commands();
 8000f7c:	f002 ffd7 	bl	8003f2e <configure_convert_commands>

  // Populate the AUX_COMMANDS_PER_SEQUENCE command lists (default 3) with auxiliary commands.
  configure_aux_commands(&parameters);
 8000f80:	463b      	mov	r3, r7
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 ffda 	bl	8003f3c <configure_aux_commands>

  // Turn on LED to indicate acquisition is about to start.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2180      	movs	r1, #128	@ 0x80
 8000f8c:	4817      	ldr	r0, [pc, #92]	@ (8000fec <main+0xc8>)
 8000f8e:	f7ff ff97 	bl	8000ec0 <write_pin>

  // Start timer so that at every period defined by INTERRUPT_TIM, an interrupt occurs, starting an SPI command sequence.
  sample_counter = 0;
 8000f92:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <main+0xcc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	801a      	strh	r2, [r3, #0]
  enable_interrupt_timer(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f7ff ffaf 	bl	8000efc <enable_interrupt_timer>
  main_loop_active = 1;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <main+0xd0>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]

  // Keep looping, doing nothing (other than handling interrupts) until enough data has been gathered
  while (1) {

	  // Break infinite loop when loop_escape() condition have been met.
	  if (loop_escape()) break;
 8000fa4:	f002 fef4 	bl	8003d90 <loop_escape>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d106      	bne.n	8000fbc <main+0x98>

	  // During infinite loop, write this pin High to indicate this main loop is currently processing.
	  write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <main+0xc8>)
 8000fb6:	f7ff ff83 	bl	8000ec0 <write_pin>
	  if (loop_escape()) break;
 8000fba:	e7f3      	b.n	8000fa4 <main+0x80>
 8000fbc:	bf00      	nop
    /* USER CODE BEGIN 3 */

  }

  // Disable TIM to stop sample interrupts.
  enable_interrupt_timer(0);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff ff9c 	bl	8000efc <enable_interrupt_timer>
  main_loop_active = 0;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <main+0xd0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]

  // Disable SPI DMA.
  end_spi_with_dma();
 8000fca:	f000 fc36 	bl	800183a <end_spi_with_dma>

  // Transmit accumulated data.
  transmit_data_offline();
 8000fce:	f002 ff2f 	bl	8003e30 <transmit_data_offline>

  // Free previously allocated sample memory.
  free_sample_memory();
 8000fd2:	f000 fc1f 	bl	8001814 <free_sample_memory>

  // Indicate acquisition and data transfer have completed.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2180      	movs	r1, #128	@ 0x80
 8000fda:	4804      	ldr	r0, [pc, #16]	@ (8000fec <main+0xc8>)
 8000fdc:	f7ff ff70 	bl	8000ec0 <write_pin>

  // Infinite loop for remainder of program life.
  while (1);
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <main+0xbc>
 8000fe4:	0800f0c8 	.word	0x0800f0c8
 8000fe8:	e0044000 	.word	0xe0044000
 8000fec:	42020800 	.word	0x42020800
 8000ff0:	2000049e 	.word	0x2000049e
 8000ff4:	200007a6 	.word	0x200007a6

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b09e      	sub	sp, #120	@ 0x78
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	2260      	movs	r2, #96	@ 0x60
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f00c fbf6 	bl	800d7f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800101c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001020:	f004 fbd6 	bl	80057d0 <HAL_PWREx_ControlVoltageScaling>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800102a:	f000 fb3b 	bl	80016a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001032:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001036:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001038:	2302      	movs	r3, #2
 800103a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103c:	2303      	movs	r3, #3
 800103e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001044:	2301      	movs	r3, #1
 8001046:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001048:	2314      	movs	r3, #20
 800104a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 800104c:	2308      	movs	r3, #8
 800104e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001054:	2302      	movs	r3, #2
 8001056:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001058:	230c      	movs	r3, #12
 800105a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	4618      	mov	r0, r3
 8001066:	f004 fcaf 	bl	80059c8 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001070:	f000 fb18 	bl	80016a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	231f      	movs	r3, #31
 8001076:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	2303      	movs	r3, #3
 800107a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	2104      	movs	r1, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f005 fb75 	bl	8006780 <HAL_RCC_ClockConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800109c:	f000 fb02 	bl	80016a4 <Error_Handler>
  }
}
 80010a0:	bf00      	nop
 80010a2:	3778      	adds	r7, #120	@ 0x78
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80010ac:	f004 fc6c 	bl	8005988 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010b0:	f004 fc7a 	bl	80059a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80010b4:	2002      	movs	r0, #2
 80010b6:	f004 fc17 	bl	80058e8 <HAL_PWREx_ConfigSupply>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 80010c0:	f000 faf0 	bl	80016a4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <MX_GPDMA1_Init+0x5c>)
 80010d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d4:	4a13      	ldr	r2, [pc, #76]	@ (8001124 <MX_GPDMA1_Init+0x5c>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_GPDMA1_Init+0x5c>)
 80010e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	201d      	movs	r0, #29
 80010f2:	f003 f92d 	bl	8004350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80010f6:	201d      	movs	r0, #29
 80010f8:	f003 f944 	bl	8004384 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2054      	movs	r0, #84	@ 0x54
 8001102:	f003 f925 	bl	8004350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8001106:	2054      	movs	r0, #84	@ 0x54
 8001108:	f003 f93c 	bl	8004384 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2055      	movs	r0, #85	@ 0x55
 8001112:	f003 f91d 	bl	8004350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 8001116:	2055      	movs	r0, #85	@ 0x55
 8001118:	f003 f934 	bl	8004384 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	46020c00 	.word	0x46020c00

08001128 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800112c:	2000      	movs	r0, #0
 800112e:	f004 fb1f 	bl	8005770 <HAL_ICACHE_ConfigAssociativityMode>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001138:	f000 fab4 	bl	80016a4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800113c:	f004 fb38 	bl	80057b0 <HAL_ICACHE_Enable>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001146:	f000 faad 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001160:	4b32      	ldr	r3, [pc, #200]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001162:	4a33      	ldr	r2, [pc, #204]	@ (8001230 <MX_SPI3_Init+0xe0>)
 8001164:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001166:	4b31      	ldr	r3, [pc, #196]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001168:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800116c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800116e:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001174:	4b2d      	ldr	r3, [pc, #180]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001176:	220f      	movs	r2, #15
 8001178:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117a:	4b2c      	ldr	r3, [pc, #176]	@ (800122c <MX_SPI3_Init+0xdc>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001180:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001186:	4b29      	ldr	r3, [pc, #164]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001188:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800118c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800118e:	4b27      	ldr	r3, [pc, #156]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001190:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001194:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001196:	4b25      	ldr	r3, [pc, #148]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800119c:	4b23      	ldr	r3, [pc, #140]	@ (800122c <MX_SPI3_Init+0xdc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a2:	4b22      	ldr	r3, [pc, #136]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011aa:	2207      	movs	r2, #7
 80011ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_04CYCLE;
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011ca:	2240      	movs	r2, #64	@ 0x40
 80011cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_ENABLE;
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011d8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80011dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011f0:	480e      	ldr	r0, [pc, #56]	@ (800122c <MX_SPI3_Init+0xdc>)
 80011f2:	f008 fded 	bl	8009dd0 <HAL_SPI_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_SPI3_Init+0xb0>
  {
    Error_Handler();
 80011fc:	f000 fa52 	bl	80016a4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 8001204:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001208:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	@ (800122c <MX_SPI3_Init+0xdc>)
 8001214:	f009 fcab 	bl	800ab6e <HAL_SPIEx_SetConfigAutonomousMode>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_SPI3_Init+0xd2>
  {
    Error_Handler();
 800121e:	f000 fa41 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200000a4 	.word	0x200000a4
 8001230:	46002000 	.word	0x46002000

08001234 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001258:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <MX_TIM3_Init+0xa8>)
 800125a:	4a21      	ldr	r2, [pc, #132]	@ (80012e0 <MX_TIM3_Init+0xac>)
 800125c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800125e:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <MX_TIM3_Init+0xa8>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <MX_TIM3_Init+0xa8>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 800126a:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <MX_TIM3_Init+0xa8>)
 800126c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001270:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <MX_TIM3_Init+0xa8>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_TIM3_Init+0xa8>)
 800127a:	2280      	movs	r2, #128	@ 0x80
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800127e:	4817      	ldr	r0, [pc, #92]	@ (80012dc <MX_TIM3_Init+0xa8>)
 8001280:	f009 fd85 	bl	800ad8e <HAL_TIM_OC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800128a:	f000 fa0b 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	480f      	ldr	r0, [pc, #60]	@ (80012dc <MX_TIM3_Init+0xa8>)
 800129e:	f00a fc95 	bl	800bbcc <HAL_TIMEx_MasterConfigSynchronization>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80012a8:	f000 f9fc 	bl	80016a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	@ (80012dc <MX_TIM3_Init+0xa8>)
 80012c4:	f009 ff0a 	bl	800b0dc <HAL_TIM_OC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012ce:	f000 f9e9 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	@ 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000224 	.word	0x20000224
 80012e0:	40000400 	.word	0x40000400

080012e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 80012ea:	4a28      	ldr	r2, [pc, #160]	@ (800138c <MX_USART1_UART_Init+0xa8>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 10000000;
 80012ee:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 80012f0:	4a27      	ldr	r2, [pc, #156]	@ (8001390 <MX_USART1_UART_Init+0xac>)
 80012f2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f4:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012fa:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001300:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001308:	2208      	movs	r2, #8
 800130a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130c:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001312:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001314:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 800131c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001320:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001322:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 800132a:	2230      	movs	r2, #48	@ 0x30
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001330:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001334:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001338:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800133c:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133e:	4812      	ldr	r0, [pc, #72]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001340:	f00a fd4c 	bl	800bddc <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800134a:	f000 f9ab 	bl	80016a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134e:	2100      	movs	r1, #0
 8001350:	480d      	ldr	r0, [pc, #52]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001352:	f00b fed1 	bl	800d0f8 <HAL_UARTEx_SetTxFifoThreshold>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800135c:	f000 f9a2 	bl	80016a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001360:	2100      	movs	r1, #0
 8001362:	4809      	ldr	r0, [pc, #36]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001364:	f00b ff06 	bl	800d174 <HAL_UARTEx_SetRxFifoThreshold>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800136e:	f000 f999 	bl	80016a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_USART1_UART_Init+0xa4>)
 8001374:	f00b fe87 	bl	800d086 <HAL_UARTEx_DisableFifoMode>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART1_UART_Init+0x9e>
  {
    Error_Handler();
 800137e:	f000 f991 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000270 	.word	0x20000270
 800138c:	40013800 	.word	0x40013800
 8001390:	00989680 	.word	0x00989680

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 800139a:	4a23      	ldr	r2, [pc, #140]	@ (8001428 <MX_USART2_UART_Init+0x94>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013a0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d0:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013dc:	4811      	ldr	r0, [pc, #68]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013de:	f00a fcfd 	bl	800bddc <HAL_UART_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013e8:	f000 f95c 	bl	80016a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ec:	2100      	movs	r1, #0
 80013ee:	480d      	ldr	r0, [pc, #52]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 80013f0:	f00b fe82 	bl	800d0f8 <HAL_UARTEx_SetTxFifoThreshold>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013fa:	f000 f953 	bl	80016a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fe:	2100      	movs	r1, #0
 8001400:	4808      	ldr	r0, [pc, #32]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 8001402:	f00b feb7 	bl	800d174 <HAL_UARTEx_SetRxFifoThreshold>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800140c:	f000 f94a 	bl	80016a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MX_USART2_UART_Init+0x90>)
 8001412:	f00b fe38 	bl	800d086 <HAL_UARTEx_DisableFifoMode>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800141c:	f000 f942 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000304 	.word	0x20000304
 8001428:	40004400 	.word	0x40004400

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	@ 0x30
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	4b91      	ldr	r3, [pc, #580]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001448:	4a8f      	ldr	r2, [pc, #572]	@ (8001688 <MX_GPIO_Init+0x25c>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001452:	4b8d      	ldr	r3, [pc, #564]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001460:	4b89      	ldr	r3, [pc, #548]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001466:	4a88      	ldr	r2, [pc, #544]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800146c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001470:	4b85      	ldr	r3, [pc, #532]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b82      	ldr	r3, [pc, #520]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001484:	4a80      	ldr	r2, [pc, #512]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800148e:	4b7e      	ldr	r3, [pc, #504]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	4b7a      	ldr	r3, [pc, #488]	@ (8001688 <MX_GPIO_Init+0x25c>)
 800149e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a2:	4a79      	ldr	r2, [pc, #484]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ac:	4b76      	ldr	r3, [pc, #472]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	4b73      	ldr	r3, [pc, #460]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c0:	4a71      	ldr	r2, [pc, #452]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014de:	4a6a      	ldr	r2, [pc, #424]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014e8:	4b67      	ldr	r3, [pc, #412]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f6:	4b64      	ldr	r3, [pc, #400]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014fc:	4a62      	ldr	r2, [pc, #392]	@ (8001688 <MX_GPIO_Init+0x25c>)
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001506:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <MX_GPIO_Init+0x25c>)
 8001508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800151a:	485c      	ldr	r0, [pc, #368]	@ (800168c <MX_GPIO_Init+0x260>)
 800151c:	f004 f910 	bl	8005740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_RED_Pin|ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 8001526:	485a      	ldr	r0, [pc, #360]	@ (8001690 <MX_GPIO_Init+0x264>)
 8001528:	f004 f90a 	bl	8005740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|Main_Monitor_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8001532:	4858      	ldr	r0, [pc, #352]	@ (8001694 <MX_GPIO_Init+0x268>)
 8001534:	f004 f904 	bl	8005740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	21a0      	movs	r1, #160	@ 0xa0
 800153c:	4856      	ldr	r0, [pc, #344]	@ (8001698 <MX_GPIO_Init+0x26c>)
 800153e:	f004 f8ff 	bl	8005740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ErrorCode_Bit_3_GPIO_Port, ErrorCode_Bit_3_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2101      	movs	r1, #1
 8001546:	4855      	ldr	r0, [pc, #340]	@ (800169c <MX_GPIO_Init+0x270>)
 8001548:	f004 f8fa 	bl	8005740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800154c:	2304      	movs	r3, #4
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001550:	2303      	movs	r3, #3
 8001552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	484d      	ldr	r0, [pc, #308]	@ (8001694 <MX_GPIO_Init+0x268>)
 8001560:	f003 ff16 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001564:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4847      	ldr	r0, [pc, #284]	@ (8001698 <MX_GPIO_Init+0x26c>)
 800157a:	f003 ff09 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800157e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	4841      	ldr	r0, [pc, #260]	@ (8001698 <MX_GPIO_Init+0x26c>)
 8001594:	f003 fefc 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Monitor_Pin */
  GPIO_InitStruct.Pin = Interrupt_Monitor_Pin;
 8001598:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Interrupt_Monitor_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4836      	ldr	r0, [pc, #216]	@ (800168c <MX_GPIO_Init+0x260>)
 80015b2:	f003 feed 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin ErrorCode_Bit_1_Pin ErrorCode_Bit_0_Pin ErrorCode_Bit_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin;
 80015b6:	f44f 73b2 	mov.w	r3, #356	@ 0x164
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4830      	ldr	r0, [pc, #192]	@ (8001690 <MX_GPIO_Init+0x264>)
 80015d0:	f003 fede 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	482a      	ldr	r0, [pc, #168]	@ (8001694 <MX_GPIO_Init+0x268>)
 80015ec:	f003 fed0 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : Main_Monitor_Pin */
  GPIO_InitStruct.Pin = Main_Monitor_Pin;
 80015f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Main_Monitor_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4822      	ldr	r0, [pc, #136]	@ (8001694 <MX_GPIO_Init+0x268>)
 800160a:	f003 fec1 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800160e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	481e      	ldr	r0, [pc, #120]	@ (80016a0 <MX_GPIO_Init+0x274>)
 8001628:	f003 feb2 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800162c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4817      	ldr	r0, [pc, #92]	@ (80016a0 <MX_GPIO_Init+0x274>)
 8001642:	f003 fea5 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 8001646:	23a0      	movs	r3, #160	@ 0xa0
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	480e      	ldr	r0, [pc, #56]	@ (8001698 <MX_GPIO_Init+0x26c>)
 800165e:	f003 fe97 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : ErrorCode_Bit_3_Pin */
  GPIO_InitStruct.Pin = ErrorCode_Bit_3_Pin;
 8001662:	2301      	movs	r3, #1
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ErrorCode_Bit_3_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	4808      	ldr	r0, [pc, #32]	@ (800169c <MX_GPIO_Init+0x270>)
 800167a:	f003 fe89 	bl	8005390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800167e:	bf00      	nop
 8001680:	3730      	adds	r7, #48	@ 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	46020c00 	.word	0x46020c00
 800168c:	42020c00 	.word	0x42020c00
 8001690:	42021800 	.word	0x42021800
 8001694:	42020800 	.word	0x42020800
 8001698:	42020400 	.word	0x42020400
 800169c:	42021000 	.word	0x42021000
 80016a0:	42020000 	.word	0x42020000

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <Error_Handler+0x8>

080016b0 <write_pin>:
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f004 f83a 	bl	8005740 <HAL_GPIO_WritePin>
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <sample_interrupt_routine>:
// Due to use of DMA in this example (which is very efficient for large data transfers), processing is not
// the likely bottleneck, but rather the rate of SPI communication itself. Shorter SPI command sequences
// (default is 32 CONVERT commands + 3 AUX commands) and/or faster Baud rate will allow SPI communication to
// finish faster.
void sample_interrupt_routine()
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	// Check if condition specified in loop_escape (e.g. target number of samples have been acquired) is true.
	// If so, keep from continuing interrupt execution and return to main loop so it can be escaped.
	if (loop_escape()) return;
 80016d8:	f002 fb5a 	bl	8003d90 <loop_escape>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d120      	bne.n	8001724 <sample_interrupt_routine+0x50>

	// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
	// Main loop will write Main_Monitor_Pin when processing returns to main, so the duty cycle of this pin
	// can be measured to estimate what percentage of clock cycles are available for main processing.
	write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016e8:	480f      	ldr	r0, [pc, #60]	@ (8001728 <sample_interrupt_routine+0x54>)
 80016ea:	f7ff ffe1 	bl	80016b0 <write_pin>

	// Write aux commands to command_sequence_MOSI, advancing one sample through aux_command_list.
	cycle_aux_commands();
 80016ee:	f000 f821 	bl	8001734 <cycle_aux_commands>

	// If previous DMA transfer has not completed, SPI communication from previous sample has not finished.
	// This is a critical error that will halt execution. To avoid this, all processing from previous interrupt
	// must conclude sooner (most likely, this would be waiting on SPI transfer completion, in which case
	// fewer channels can be included in the command sequence, or the SPI communication itself must be sped up).
	if (command_transfer_state == TRANSFER_WAIT) {
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <sample_interrupt_routine+0x58>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <sample_interrupt_routine+0x2c>
		handle_comm_error(ITClip);
 80016fa:	2005      	movs	r0, #5
 80016fc:	f000 f8a4 	bl	8001848 <handle_comm_error>

	// Indicate start of timer interrupt by writing Interrupt_Monitor_Pin High.
	// At the end of this function, Interrupt_Monitor_Pin will be written Low (though, keep in mind that
	// this only indicates that the DMA transfer has been initiated - DMA will continue running either until
	// its SPI command sequence concludes, or the next interrupt occurs, causing an ITClip error).
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 1);
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001706:	480a      	ldr	r0, [pc, #40]	@ (8001730 <sample_interrupt_routine+0x5c>)
 8001708:	f7ff ffd2 	bl	80016b0 <write_pin>

	// Update variable indicate to wait until SPI DMA transfer completes.
	command_transfer_state = TRANSFER_WAIT;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <sample_interrupt_routine+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]

	transfer_sequence_spi_dma();
 8001712:	f000 f845 	bl	80017a0 <transfer_sequence_spi_dma>

	// SPI DMA transfer has begun, so write Interrupt_Monitor_Pin Low and exit interrupt function,
	// returning to processing main loop.
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800171c:	4804      	ldr	r0, [pc, #16]	@ (8001730 <sample_interrupt_routine+0x5c>)
 800171e:	f7ff ffc7 	bl	80016b0 <write_pin>
 8001722:	e000      	b.n	8001726 <sample_interrupt_routine+0x52>
	if (loop_escape()) return;
 8001724:	bf00      	nop
}
 8001726:	bd80      	pop	{r7, pc}
 8001728:	42020800 	.word	0x42020800
 800172c:	20000004 	.word	0x20000004
 8001730:	42020c00 	.word	0x42020c00

08001734 <cycle_aux_commands>:


// Every sample period, cycle circularly through aux_command_list, adding this sample's AUX commands to the end of
// command_sequence_MOSI array which will be transmitted via SPI.
void cycle_aux_commands()
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
	for (int i = 0; i < AUX_COMMANDS_PER_SEQUENCE; i++) {
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	e012      	b.n	8001766 <cycle_aux_commands+0x32>
		command_sequence_MOSI[CONVERT_COMMANDS_PER_SEQUENCE + i] = aux_command_list[i][aux_command_index];
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <cycle_aux_commands+0x60>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3320      	adds	r3, #32
 800174c:	4912      	ldr	r1, [pc, #72]	@ (8001798 <cycle_aux_commands+0x64>)
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	01d2      	lsls	r2, r2, #7
 8001752:	4402      	add	r2, r0
 8001754:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001758:	b291      	uxth	r1, r2
 800175a:	4a10      	ldr	r2, [pc, #64]	@ (800179c <cycle_aux_commands+0x68>)
 800175c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < AUX_COMMANDS_PER_SEQUENCE; i++) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3301      	adds	r3, #1
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b02      	cmp	r3, #2
 800176a:	dde9      	ble.n	8001740 <cycle_aux_commands+0xc>
	}
	if (++aux_command_index >= AUX_COMMAND_LIST_LENGTH) {
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <cycle_aux_commands+0x60>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	3301      	adds	r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <cycle_aux_commands+0x60>)
 8001778:	4611      	mov	r1, r2
 800177a:	7019      	strb	r1, [r3, #0]
 800177c:	b253      	sxtb	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	da02      	bge.n	8001788 <cycle_aux_commands+0x54>
		aux_command_index = 0;
 8001782:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <cycle_aux_commands+0x60>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
	// Note that if any command(s) are to be used with a command list different from AUX_COMMAND_LIST_LENGTH,
	// the above code should be commented out, and the last AUX_COMMANDS_PER_SEQUENCE of command_sequence_MOSI
	// should be written here. For example, if impedance check DAC control is used, zcheck_DAC_command_list_length
	// should replace AUX_COMMAND_LIST_LENGTH and zcheck_DAC_command_slot_position should be used to correctly index
	// commands from the proper aux_command_list slot.
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	200007a4 	.word	0x200007a4
 8001798:	200004a4 	.word	0x200004a4
 800179c:	20000410 	.word	0x20000410

080017a0 <transfer_sequence_spi_dma>:


// Begin receiving MISO data (RHD -> SPI -> DMA -> memory) and transmitting MOSI data (memory -> DMA -> SPI -> RHD).
void transfer_sequence_spi_dma()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	// HAL handles all of SPI DMA transfer with this single function call.

	// Note: this HAL function call seems to not be consistent in how long it takes, causing some jitter between Interrupt_Monitor_Pin (GPIO) and SPI signals.
	// However, SPI/DMA signals seem to be consistent with each other, so this shouldn't affect functionality.

	if (HAL_SPI_TransmitReceive_DMA(&SPI, (uint8_t*)command_sequence_MOSI, (uint8_t*)command_sequence_MISO,
 80017a4:	2323      	movs	r3, #35	@ 0x23
 80017a6:	4a06      	ldr	r2, [pc, #24]	@ (80017c0 <transfer_sequence_spi_dma+0x20>)
 80017a8:	4906      	ldr	r1, [pc, #24]	@ (80017c4 <transfer_sequence_spi_dma+0x24>)
 80017aa:	4807      	ldr	r0, [pc, #28]	@ (80017c8 <transfer_sequence_spi_dma+0x28>)
 80017ac:	f008 fc26 	bl	8009ffc <HAL_SPI_TransmitReceive_DMA>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <transfer_sequence_spi_dma+0x1a>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) != HAL_OK)
	{
		Error_Handler();
 80017b6:	f7ff ff75 	bl	80016a4 <Error_Handler>

#else
	begin_spi_rx(LL_DMA_DEST_INCREMENT, (uint32_t) command_sequence_MISO, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
	begin_spi_tx(LL_DMA_SRC_INCREMENT, (uint32_t) command_sequence_MOSI, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
#endif
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000458 	.word	0x20000458
 80017c4:	20000410 	.word	0x20000410
 80017c8:	200000a4 	.word	0x200000a4

080017cc <allocate_sample_memory>:


// Calculate suitable size for sample_memory array and allocate memory.
// Note, free_sample_memory() should be called after this function and when memory allocation is no longer needed.
void allocate_sample_memory()
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	per_channel_sample_memory_capacity = calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 80017d2:	f000 f91f 	bl	8001a14 <calculate_sample_rate>
 80017d6:	ec53 2b10 	vmov	r2, r3, d0
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f9c3 	bl	8000b68 <__aeabi_d2uiz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a09      	ldr	r2, [pc, #36]	@ (800180c <allocate_sample_memory+0x40>)
 80017e6:	6013      	str	r3, [r2, #0]
	uint32_t total_sample_memory_capacity = NUM_SAMPLED_CHANNELS * per_channel_sample_memory_capacity;
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <allocate_sample_memory+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	607b      	str	r3, [r7, #4]
	sample_memory = (uint16_t *)malloc(total_sample_memory_capacity * sizeof(uint16_t));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4618      	mov	r0, r3
 80017f6:	f00b fd49 	bl	800d28c <malloc>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <allocate_sample_memory+0x44>)
 8001800:	601a      	str	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000000 	.word	0x20000000
 8001810:	200004a0 	.word	0x200004a0

08001814 <free_sample_memory>:


// Free memory previously allocated for sample_memory array.
// Note, this should be called after allocate_sample_memory() and when memory allocation is no longer needed.
void free_sample_memory()
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	free(sample_memory);
 8001818:	4b03      	ldr	r3, [pc, #12]	@ (8001828 <free_sample_memory+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f00b fd3d 	bl	800d29c <free>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200004a0 	.word	0x200004a0

0800182c <initialize_spi_with_dma>:
// so this function only has an LL implementation.
// Some of these settings (data length, memory location, and memory increment state)
// will be overwritten on a transfer-by-transfer basis, but the general configurations
// like transfer directions, peripheral addresses, and DMAMUX request ID can be permanently set here.
void initialize_spi_with_dma()
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	return;
 8001830:	bf00      	nop
	LL_DMA_SetDestIncMode(DMA, DMA_RX_CHANNEL, LL_DMA_DEST_INCREMENT);

	// Default to data length of full command sequence - may be overwritten for individual transfers
	LL_DMA_SetBlkDataLength(DMA, DMA_RX_CHANNEL, (CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) * 2);
#endif
}
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <end_spi_with_dma>:

// Write SPI/DMA registers to cleanly disable once DMA transfer ends.
// HAL automatically does this for each Send/Receive with SPI/DMA,
// so this function only has an LL implementation.
void end_spi_with_dma()
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
#ifdef USE_HAL
#else
	end_spi_rx();
	end_spi_tx();
#endif
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <handle_comm_error>:
// Handle communication error.
// Write ERROR_DETECTED_PIN (by default, red LED) High.
// Write each bit of a 4-bit error code to a pin so that by measuring pins, user can determine the error code.
// Enter an infinite loop, halting execution and allowing user to measure error pins.
void handle_comm_error(CommErrorStatus error_code)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
	// No error, just return.
	if (error_code == 0) return;
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d03e      	beq.n	80018d6 <handle_comm_error+0x8e>

	// Write ERROR_DETECTED_PIN (by default red LED) to communicate that an error occurred.
	write_pin(ERROR_DETECTED_PORT, ERROR_DETECTED_PIN, 1);
 8001858:	2201      	movs	r2, #1
 800185a:	2104      	movs	r1, #4
 800185c:	4820      	ldr	r0, [pc, #128]	@ (80018e0 <handle_comm_error+0x98>)
 800185e:	f7ff ff27 	bl	80016b0 <write_pin>

	// Write 4 bits of error code to 4 pins.
	uint8_t error_code_bit_0 = (error_code & 0b0001) >> 0;
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
	uint8_t error_code_bit_1 = (error_code & 0b0010) >> 1;
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	105b      	asrs	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	73bb      	strb	r3, [r7, #14]
	uint8_t error_code_bit_2 = (error_code & 0b0100) >> 2;
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	109b      	asrs	r3, r3, #2
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	737b      	strb	r3, [r7, #13]
	uint8_t error_code_bit_3 = (error_code & 0b1000) >> 3;
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	10db      	asrs	r3, r3, #3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	733b      	strb	r3, [r7, #12]
	if (error_code_bit_0) write_pin(ErrorCode_Bit_0_GPIO_Port, ErrorCode_Bit_0_Pin, 1);
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <handle_comm_error+0x56>
 8001894:	2201      	movs	r2, #1
 8001896:	2140      	movs	r1, #64	@ 0x40
 8001898:	4811      	ldr	r0, [pc, #68]	@ (80018e0 <handle_comm_error+0x98>)
 800189a:	f7ff ff09 	bl	80016b0 <write_pin>
	if (error_code_bit_1) write_pin(ErrorCode_Bit_1_GPIO_Port, ErrorCode_Bit_1_Pin, 1);
 800189e:	7bbb      	ldrb	r3, [r7, #14]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <handle_comm_error+0x66>
 80018a4:	2201      	movs	r2, #1
 80018a6:	2120      	movs	r1, #32
 80018a8:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <handle_comm_error+0x98>)
 80018aa:	f7ff ff01 	bl	80016b0 <write_pin>
	if (error_code_bit_2) write_pin(ErrorCode_Bit_2_GPIO_Port, ErrorCode_Bit_2_Pin, 1);
 80018ae:	7b7b      	ldrb	r3, [r7, #13]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <handle_comm_error+0x78>
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018ba:	4809      	ldr	r0, [pc, #36]	@ (80018e0 <handle_comm_error+0x98>)
 80018bc:	f7ff fef8 	bl	80016b0 <write_pin>
	if (error_code_bit_3) write_pin(ErrorCode_Bit_3_GPIO_Port, ErrorCode_Bit_3_Pin, 1);
 80018c0:	7b3b      	ldrb	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <handle_comm_error+0x8a>
 80018c6:	2201      	movs	r2, #1
 80018c8:	2101      	movs	r1, #1
 80018ca:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <handle_comm_error+0x9c>)
 80018cc:	f7ff fef0 	bl	80016b0 <write_pin>

	// Enter infinite loop.
	while(1);
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	e7fd      	b.n	80018d2 <handle_comm_error+0x8a>
	if (error_code == 0) return;
 80018d6:	bf00      	nop
}
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	42021800 	.word	0x42021800
 80018e4:	42021000 	.word	0x42021000

080018e8 <spi_txrx_cplt_callback>:


// Callback function that executes when both Transmission and Reception of SPI have completed.
void spi_txrx_cplt_callback()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	// If main loop is active, drive Main_Monitor_Pin low, write data to memory, transmit data in realtime, and update command_transfer_state
	if (main_loop_active) {
 80018ec:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <spi_txrx_cplt_callback+0x34>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00d      	beq.n	8001912 <spi_txrx_cplt_callback+0x2a>
		// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
		write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018fc:	4808      	ldr	r0, [pc, #32]	@ (8001920 <spi_txrx_cplt_callback+0x38>)
 80018fe:	f7ff fed7 	bl	80016b0 <write_pin>

		// User-specified function - here is where specified channel(s) can be written to memory.
		write_data_to_memory();
 8001902:	f002 fa5b 	bl	8003dbc <write_data_to_memory>

		// User-specified function - here is where user can transmit data in real time every sample period.
		transmit_data_realtime();
 8001906:	f002 fa8b 	bl	8003e20 <transmit_data_realtime>

		// Update state variable to show that transfer has completed.
		command_transfer_state = TRANSFER_COMPLETE;
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <spi_txrx_cplt_callback+0x3c>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]
#else
		end_spi_rx();
#endif
		reception_in_progress = 0;
	}
}
 8001910:	e002      	b.n	8001918 <spi_txrx_cplt_callback+0x30>
		reception_in_progress = 0;
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <spi_txrx_cplt_callback+0x40>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200007a6 	.word	0x200007a6
 8001920:	42020800 	.word	0x42020800
 8001924:	20000004 	.word	0x20000004
 8001928:	200007a5 	.word	0x200007a5

0800192c <spi_error_callback>:


// Callback function to show that an SPI error occurred.
void spi_error_callback()
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
	command_transfer_state = TRANSFER_ERROR;
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <spi_error_callback+0x14>)
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	20000004 	.word	0x20000004

08001944 <write_initial_reg_values>:
// Determine suitable values to be written to registers
// (based on default acquisition values from RHX software).
// These suitable default values are saved to RHDConfigParameters argument.
// Write these values to registers, and calibrate and run for 9 commands to fully initialize chip.
void write_initial_reg_values(RHDConfigParameters *p)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	@ 0x38
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	// Determine suitable values to be written for each of the registers.
	p->sample_rate = calculate_sample_rate();
 800194c:	f000 f862 	bl	8001a14 <calculate_sample_rate>
 8001950:	eeb0 7a40 	vmov.f32	s14, s0
 8001954:	eef0 7a60 	vmov.f32	s15, s1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	ed83 7b00 	vstr	d7, [r3]
	set_default_rhd_settings(p);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f001 face 	bl	8002f00 <set_default_rhd_settings>

	uint16_t registers[18];
	for (int i = 0; i < 18; i++) {
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	@ 0x34
 8001968:	e00e      	b.n	8001988 <write_initial_reg_values+0x44>
		registers[i] = get_register_value(p, i);
 800196a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f001 fc17 	bl	80031a0 <get_register_value>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	3338      	adds	r3, #56	@ 0x38
 800197c:	443b      	add	r3, r7
 800197e:	f823 2c30 	strh.w	r2, [r3, #-48]
	for (int i = 0; i < 18; i++) {
 8001982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001984:	3301      	adds	r3, #1
 8001986:	637b      	str	r3, [r7, #52]	@ 0x34
 8001988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198a:	2b11      	cmp	r3, #17
 800198c:	dded      	ble.n	800196a <write_initial_reg_values+0x26>
	}

	// Send a few dummy commands in case chip is still powering up.
	send_spi_command(read_command(63));
 800198e:	203f      	movs	r0, #63	@ 0x3f
 8001990:	f001 fdcd 	bl	800352e <read_command>
 8001994:	4603      	mov	r3, r0
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fa99 	bl	8001ece <send_spi_command>
	send_spi_command(read_command(63));
 800199c:	203f      	movs	r0, #63	@ 0x3f
 800199e:	f001 fdc6 	bl	800352e <read_command>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fa92 	bl	8001ece <send_spi_command>


	// Write suitable default values for RHD registers.
	for (int i = 0; i < 18; i++) {
 80019aa:	2300      	movs	r3, #0
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ae:	e013      	b.n	80019d8 <write_initial_reg_values+0x94>
		send_spi_command(write_command(i, registers[i]));
 80019b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	3338      	adds	r3, #56	@ 0x38
 80019ba:	443b      	add	r3, r7
 80019bc:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4619      	mov	r1, r3
 80019c4:	4610      	mov	r0, r2
 80019c6:	f001 fd95 	bl	80034f4 <write_command>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fa7e 	bl	8001ece <send_spi_command>
	for (int i = 0; i < 18; i++) {
 80019d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019d4:	3301      	adds	r3, #1
 80019d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80019d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019da:	2b11      	cmp	r3, #17
 80019dc:	dde8      	ble.n	80019b0 <write_initial_reg_values+0x6c>
	}

	// Calibrate and run for 9 commands.
	send_spi_command(calibrate_command());
 80019de:	f001 fd80 	bl	80034e2 <calibrate_command>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fa72 	bl	8001ece <send_spi_command>
	for (int i = 0; i < 9; i++) {
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ee:	e009      	b.n	8001a04 <write_initial_reg_values+0xc0>
		send_spi_command(read_command(40));
 80019f0:	2028      	movs	r0, #40	@ 0x28
 80019f2:	f001 fd9c 	bl	800352e <read_command>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fa68 	bl	8001ece <send_spi_command>
	for (int i = 0; i < 9; i++) {
 80019fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a00:	3301      	adds	r3, #1
 8001a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	ddf2      	ble.n	80019f0 <write_initial_reg_values+0xac>
	}
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	3738      	adds	r7, #56	@ 0x38
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <calculate_sample_rate>:
// Check timer clock input, clock division, prescaling, and counter period
// to determine the rate at which INTERRUPT_TIM interrupts occur (sample rate).
// Note that this reads clock and timer configuration register values during runtime,
// so this function should adapt to any changes made to the .ioc.
double calculate_sample_rate()
{
 8001a14:	b5b0      	push	{r4, r5, r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af00      	add	r7, sp, #0
	uint32_t apb1_timer_freq, ckd_value, psc_value, counter_period;

#ifdef USE_HAL
	apb1_timer_freq = HAL_RCC_GetPCLK1Freq();
 8001a1a:	f005 f9bf 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8001a1e:	61f8      	str	r0, [r7, #28]
	ckd_value = INTERRUPT_TIM.Init.ClockDivision;
 8001a20:	4b28      	ldr	r3, [pc, #160]	@ (8001ac4 <calculate_sample_rate+0xb0>)
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	61bb      	str	r3, [r7, #24]
	psc_value = INTERRUPT_TIM.Init.Prescaler;
 8001a26:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <calculate_sample_rate+0xb0>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	617b      	str	r3, [r7, #20]
	counter_period = INTERRUPT_TIM.Init.Period;
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <calculate_sample_rate+0xb0>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	613b      	str	r3, [r7, #16]
	ckd_value = LL_TIM_GetClockDivision(INTERRUPT_TIM);
	psc_value = LL_TIM_GetPrescaler(INTERRUPT_TIM);
	counter_period = LL_TIM_GetAutoReload(INTERRUPT_TIM);
#endif

	double ckd_factor = 1.0;
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	4b24      	ldr	r3, [pc, #144]	@ (8001ac8 <calculate_sample_rate+0xb4>)
 8001a38:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (ckd_value == 0b01) {
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d106      	bne.n	8001a50 <calculate_sample_rate+0x3c>
		ckd_factor = 2;
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001a4e:	e007      	b.n	8001a60 <calculate_sample_rate+0x4c>
	} else if (ckd_value == 0b10) {
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d104      	bne.n	8001a60 <calculate_sample_rate+0x4c>
		ckd_factor = 4;
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <calculate_sample_rate+0xb8>)
 8001a5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	double psc_factor = psc_value + 1;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd55 	bl	8000514 <__aeabi_ui2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double input_frequency = apb1_timer_freq / (ckd_factor * psc_factor);
 8001a72:	69f8      	ldr	r0, [r7, #28]
 8001a74:	f7fe fd4e 	bl	8000514 <__aeabi_ui2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a84:	f7fe fdc0 	bl	8000608 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4629      	mov	r1, r5
 8001a90:	f7fe fee4 	bl	800085c <__aeabi_ddiv>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	e9c7 2300 	strd	r2, r3, [r7]
	return input_frequency / counter_period;
 8001a9c:	6938      	ldr	r0, [r7, #16]
 8001a9e:	f7fe fd39 	bl	8000514 <__aeabi_ui2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aaa:	f7fe fed7 	bl	800085c <__aeabi_ddiv>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aba:	eef0 0a67 	vmov.f32	s1, s15
 8001abe:	3728      	adds	r7, #40	@ 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac4:	20000224 	.word	0x20000224
 8001ac8:	3ff00000 	.word	0x3ff00000
 8001acc:	40100000 	.word	0x40100000

08001ad0 <create_convert_sequence>:
// and load them into command_sequence_MOSI.
// If the channel_numbers_to_convert parameter is NULL,
// create CONVERT_COMMANDS_PER_SEQUENCE commands from channel 0 (default 0 - 31).
// Otherwise, populate the CONVERT commands in the order specified by channel_numbers_to_convert.
void create_convert_sequence(uint8_t* channel_numbers_to_convert)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	// If no list of channel numbers is provided,
	// then assume CONVERT should occur for channels 0 - CONVERT_COMMANDS_PER_SEQUENCE.
	if (channel_numbers_to_convert == NULL) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d115      	bne.n	8001b0a <create_convert_sequence+0x3a>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	e00e      	b.n	8001b02 <create_convert_sequence+0x32>
			command_sequence_MOSI[i] = convert_command(i, 0);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 fcdc 	bl	80034a8 <convert_command>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4619      	mov	r1, r3
 8001af4:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <create_convert_sequence+0x70>)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2b1f      	cmp	r3, #31
 8001b06:	dded      	ble.n	8001ae4 <create_convert_sequence+0x14>
	else {
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
		}
	}
}
 8001b08:	e016      	b.n	8001b38 <create_convert_sequence+0x68>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	e010      	b.n	8001b32 <create_convert_sequence+0x62>
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 fcc4 	bl	80034a8 <convert_command>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4619      	mov	r1, r3
 8001b24:	4a06      	ldr	r2, [pc, #24]	@ (8001b40 <create_convert_sequence+0x70>)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b1f      	cmp	r3, #31
 8001b36:	ddeb      	ble.n	8001b10 <create_convert_sequence+0x40>
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000410 	.word	0x20000410

08001b44 <create_command_list_RHD_register_config>:

// Create a list of num_commands commands to program most RAM registers on an RHD2000 chip, read those values
// back to confirm programming, read ROM registers, and (if calibrate == true) run ADC calibration.
// Return the number of populated commands. num_commands must be 60 or greater.
int create_command_list_RHD_register_config(RHDConfigParameters *p, uint16_t *command_list, uint8_t calibrate, int num_commands)
{
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	71fb      	strb	r3, [r7, #7]
	int command_index = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
	// Start with a few dummy commands in case chip is still powering up.
	command_list[command_index++] = read_command(63);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	61fa      	str	r2, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	18d4      	adds	r4, r2, r3
 8001b64:	203f      	movs	r0, #63	@ 0x3f
 8001b66:	f001 fce2 	bl	800352e <read_command>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(63);
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	61fa      	str	r2, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	18d4      	adds	r4, r2, r3
 8001b7a:	203f      	movs	r0, #63	@ 0x3f
 8001b7c:	f001 fcd7 	bl	800352e <read_command>
 8001b80:	4603      	mov	r3, r0
 8001b82:	8023      	strh	r3, [r4, #0]


	// Program RAM registers.
	for (int reg = 0; reg < 18; ++reg) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	e01d      	b.n	8001bc6 <create_command_list_RHD_register_config+0x82>
		// Don't program Register 3 (MUX Load, Temperature Sensor, and Auxiliary Digital Output)
		// or 6 (Impedance Check DAC) here;
		// control temperature sensor and DAC waveforms in other command streams.
		if (reg == 3 || reg == 6) continue;
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d016      	beq.n	8001bbe <create_command_list_RHD_register_config+0x7a>
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d013      	beq.n	8001bbe <create_command_list_RHD_register_config+0x7a>
		command_list[command_index++] = write_command(reg, get_register_value(p, reg));
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	b2dd      	uxtb	r5, r3
 8001b9a:	69b9      	ldr	r1, [r7, #24]
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f001 faff 	bl	80031a0 <get_register_value>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b2d9      	uxtb	r1, r3
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	61fa      	str	r2, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	18d4      	adds	r4, r2, r3
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f001 fc9e 	bl	80034f4 <write_command>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	8023      	strh	r3, [r4, #0]
 8001bbc:	e000      	b.n	8001bc0 <create_command_list_RHD_register_config+0x7c>
		if (reg == 3 || reg == 6) continue;
 8001bbe:	bf00      	nop
	for (int reg = 0; reg < 18; ++reg) {
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b11      	cmp	r3, #17
 8001bca:	ddde      	ble.n	8001b8a <create_command_list_RHD_register_config+0x46>
	}


	// Read ROM registers.
	command_list[command_index++] = read_command(63);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	61fa      	str	r2, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	18d4      	adds	r4, r2, r3
 8001bd8:	203f      	movs	r0, #63	@ 0x3f
 8001bda:	f001 fca8 	bl	800352e <read_command>
 8001bde:	4603      	mov	r3, r0
 8001be0:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(62);
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	61fa      	str	r2, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	18d4      	adds	r4, r2, r3
 8001bee:	203e      	movs	r0, #62	@ 0x3e
 8001bf0:	f001 fc9d 	bl	800352e <read_command>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(61);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	61fa      	str	r2, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	18d4      	adds	r4, r2, r3
 8001c04:	203d      	movs	r0, #61	@ 0x3d
 8001c06:	f001 fc92 	bl	800352e <read_command>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(60);
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	61fa      	str	r2, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	18d4      	adds	r4, r2, r3
 8001c1a:	203c      	movs	r0, #60	@ 0x3c
 8001c1c:	f001 fc87 	bl	800352e <read_command>
 8001c20:	4603      	mov	r3, r0
 8001c22:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(59);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	61fa      	str	r2, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	18d4      	adds	r4, r2, r3
 8001c30:	203b      	movs	r0, #59	@ 0x3b
 8001c32:	f001 fc7c 	bl	800352e <read_command>
 8001c36:	4603      	mov	r3, r0
 8001c38:	8023      	strh	r3, [r4, #0]

	// Read chip name from ROM.
	command_list[command_index++] = read_command(48);
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	61fa      	str	r2, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	18d4      	adds	r4, r2, r3
 8001c46:	2030      	movs	r0, #48	@ 0x30
 8001c48:	f001 fc71 	bl	800352e <read_command>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(49);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	61fa      	str	r2, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	18d4      	adds	r4, r2, r3
 8001c5c:	2031      	movs	r0, #49	@ 0x31
 8001c5e:	f001 fc66 	bl	800352e <read_command>
 8001c62:	4603      	mov	r3, r0
 8001c64:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(50);
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	61fa      	str	r2, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	18d4      	adds	r4, r2, r3
 8001c72:	2032      	movs	r0, #50	@ 0x32
 8001c74:	f001 fc5b 	bl	800352e <read_command>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(51);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	61fa      	str	r2, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	18d4      	adds	r4, r2, r3
 8001c88:	2033      	movs	r0, #51	@ 0x33
 8001c8a:	f001 fc50 	bl	800352e <read_command>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(52);
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	61fa      	str	r2, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	18d4      	adds	r4, r2, r3
 8001c9e:	2034      	movs	r0, #52	@ 0x34
 8001ca0:	f001 fc45 	bl	800352e <read_command>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(53);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	61fa      	str	r2, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	18d4      	adds	r4, r2, r3
 8001cb4:	2035      	movs	r0, #53	@ 0x35
 8001cb6:	f001 fc3a 	bl	800352e <read_command>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(54);
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	61fa      	str	r2, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	18d4      	adds	r4, r2, r3
 8001cca:	2036      	movs	r0, #54	@ 0x36
 8001ccc:	f001 fc2f 	bl	800352e <read_command>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(55);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	61fa      	str	r2, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	18d4      	adds	r4, r2, r3
 8001ce0:	2037      	movs	r0, #55	@ 0x37
 8001ce2:	f001 fc24 	bl	800352e <read_command>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	8023      	strh	r3, [r4, #0]

	// Read Intan name from ROM.
	command_list[command_index++] = read_command(40);
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	61fa      	str	r2, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	18d4      	adds	r4, r2, r3
 8001cf6:	2028      	movs	r0, #40	@ 0x28
 8001cf8:	f001 fc19 	bl	800352e <read_command>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(41);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	61fa      	str	r2, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	18d4      	adds	r4, r2, r3
 8001d0c:	2029      	movs	r0, #41	@ 0x29
 8001d0e:	f001 fc0e 	bl	800352e <read_command>
 8001d12:	4603      	mov	r3, r0
 8001d14:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(42);
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	61fa      	str	r2, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	18d4      	adds	r4, r2, r3
 8001d22:	202a      	movs	r0, #42	@ 0x2a
 8001d24:	f001 fc03 	bl	800352e <read_command>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(43);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	61fa      	str	r2, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	18d4      	adds	r4, r2, r3
 8001d38:	202b      	movs	r0, #43	@ 0x2b
 8001d3a:	f001 fbf8 	bl	800352e <read_command>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(44);
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	61fa      	str	r2, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	18d4      	adds	r4, r2, r3
 8001d4e:	202c      	movs	r0, #44	@ 0x2c
 8001d50:	f001 fbed 	bl	800352e <read_command>
 8001d54:	4603      	mov	r3, r0
 8001d56:	8023      	strh	r3, [r4, #0]

	// Read back RAM registers to confirm programming.
	for (int reg = 0; reg < 18; ++reg) {
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e00f      	b.n	8001d7e <create_command_list_RHD_register_config+0x23a>
		command_list[command_index++] = read_command(reg);
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	b2d9      	uxtb	r1, r3
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	61fa      	str	r2, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	18d4      	adds	r4, r2, r3
 8001d6e:	4608      	mov	r0, r1
 8001d70:	f001 fbdd 	bl	800352e <read_command>
 8001d74:	4603      	mov	r3, r0
 8001d76:	8023      	strh	r3, [r4, #0]
	for (int reg = 0; reg < 18; ++reg) {
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b11      	cmp	r3, #17
 8001d82:	ddec      	ble.n	8001d5e <create_command_list_RHD_register_config+0x21a>
	}

	// Optionally, run ADC calibration (should only be run once after board is plugged in).
	if (calibrate) {
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <create_command_list_RHD_register_config+0x25c>
		command_list[command_index++] = calibrate_command();
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	61fa      	str	r2, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	18d4      	adds	r4, r2, r3
 8001d96:	f001 fba4 	bl	80034e2 <calibrate_command>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	8023      	strh	r3, [r4, #0]
 8001d9e:	e00a      	b.n	8001db6 <create_command_list_RHD_register_config+0x272>
	} else {
		command_list[command_index++] = read_command(63);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	61fa      	str	r2, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	18d4      	adds	r4, r2, r3
 8001dac:	203f      	movs	r0, #63	@ 0x3f
 8001dae:	f001 fbbe 	bl	800352e <read_command>
 8001db2:	4603      	mov	r3, r0
 8001db4:	8023      	strh	r3, [r4, #0]
	}

	// Program amplifier 31-63 power up/down registers in case a RHD2164 is connected.
	// Note: We don't read these registers back, since they are only 'visible' on MISO B.
	command_list[command_index++] = write_command(18, get_register_value(p, 18));
 8001db6:	2112      	movs	r1, #18
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f001 f9f1 	bl	80031a0 <get_register_value>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	b2d9      	uxtb	r1, r3
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	61fa      	str	r2, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	18d4      	adds	r4, r2, r3
 8001dce:	2012      	movs	r0, #18
 8001dd0:	f001 fb90 	bl	80034f4 <write_command>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = write_command(19, get_register_value(p, 19));
 8001dd8:	2113      	movs	r1, #19
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f001 f9e0 	bl	80031a0 <get_register_value>
 8001de0:	4603      	mov	r3, r0
 8001de2:	b2d9      	uxtb	r1, r3
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	61fa      	str	r2, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	18d4      	adds	r4, r2, r3
 8001df0:	2013      	movs	r0, #19
 8001df2:	f001 fb7f 	bl	80034f4 <write_command>
 8001df6:	4603      	mov	r3, r0
 8001df8:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = write_command(20, get_register_value(p, 20));
 8001dfa:	2114      	movs	r1, #20
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f001 f9cf 	bl	80031a0 <get_register_value>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2d9      	uxtb	r1, r3
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	61fa      	str	r2, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	18d4      	adds	r4, r2, r3
 8001e12:	2014      	movs	r0, #20
 8001e14:	f001 fb6e 	bl	80034f4 <write_command>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = write_command(21, get_register_value(p, 21));
 8001e1c:	2115      	movs	r1, #21
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f001 f9be 	bl	80031a0 <get_register_value>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b2d9      	uxtb	r1, r3
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	61fa      	str	r2, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	18d4      	adds	r4, r2, r3
 8001e34:	2015      	movs	r0, #21
 8001e36:	f001 fb5d 	bl	80034f4 <write_command>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	8023      	strh	r3, [r4, #0]

	// End with a dummy command.
	command_list[command_index++] = read_command(63);
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	61fa      	str	r2, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	18d4      	adds	r4, r2, r3
 8001e4a:	203f      	movs	r0, #63	@ 0x3f
 8001e4c:	f001 fb6f 	bl	800352e <read_command>
 8001e50:	4603      	mov	r3, r0
 8001e52:	8023      	strh	r3, [r4, #0]

	for (int i = 0; i < (num_commands - 60); ++i) {
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	e00d      	b.n	8001e76 <create_command_list_RHD_register_config+0x332>
		command_list[command_index++] = read_command(63);
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	61fa      	str	r2, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	18d4      	adds	r4, r2, r3
 8001e66:	203f      	movs	r0, #63	@ 0x3f
 8001e68:	f001 fb61 	bl	800352e <read_command>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < (num_commands - 60); ++i) {
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	3301      	adds	r3, #1
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	3b3c      	subs	r3, #60	@ 0x3c
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	dbec      	blt.n	8001e5a <create_command_list_RHD_register_config+0x316>
	}
	return command_index;
 8001e80:	69fb      	ldr	r3, [r7, #28]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3720      	adds	r7, #32
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bdb0      	pop	{r4, r5, r7, pc}

08001e8a <create_command_list_dummy>:


// Create a list of dummy commands with a specific command.
// Return the length of the command list (which should be n).
int create_command_list_dummy(RHDConfigParameters *p, uint16_t *command_list, int n, uint16_t cmd)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b087      	sub	sp, #28
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	807b      	strh	r3, [r7, #2]
	int command_index = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < n; i++) {
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	e00a      	b.n	8001eb8 <create_command_list_dummy+0x2e>
		command_list[command_index++] = cmd;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	617a      	str	r2, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	4413      	add	r3, r2
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < n; i++) {
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbf0      	blt.n	8001ea2 <create_command_list_dummy+0x18>
	}

	return command_index;
 8001ec0:	697b      	ldr	r3, [r7, #20]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <send_spi_command>:
}


// Send provided 16-bit word 'tx_data' over SPI, ignoring resultant 16-bit received word.
void send_spi_command(uint16_t tx_data)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	80fb      	strh	r3, [r7, #6]
	uint16_t dummy_data = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	81fb      	strh	r3, [r7, #14]
	send_receive_spi_command(tx_data, &dummy_data);
 8001edc:	f107 020e 	add.w	r2, r7, #14
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 f805 	bl	8001ef4 <send_receive_spi_command>
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <send_receive_spi_command>:

// Send provided 16-bit word 'tx_data' over SPI, and pass resultant 16-bit received work by reference.
// Note that the pipelined nature of the SPI communication has a 2-command delay,
// so the obtained result corresponds to the command from 2 transactions earlier.
void send_receive_spi_command(uint16_t tx_data, uint16_t *rx_data)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	80fb      	strh	r3, [r7, #6]
	reception_in_progress = 1;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <send_receive_spi_command+0x40>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
#ifdef USE_HAL

	if (HAL_SPI_TransmitReceive_DMA(&SPI, (uint8_t*) &tx_data, (uint8_t*)rx_data, 1) != HAL_OK)
 8001f06:	1db9      	adds	r1, r7, #6
 8001f08:	2301      	movs	r3, #1
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	480a      	ldr	r0, [pc, #40]	@ (8001f38 <send_receive_spi_command+0x44>)
 8001f0e:	f008 f875 	bl	8009ffc <HAL_SPI_TransmitReceive_DMA>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <send_receive_spi_command+0x28>
	{
		Error_Handler();
 8001f18:	f7ff fbc4 	bl	80016a4 <Error_Handler>

#else
	begin_spi_rx(LL_DMA_DEST_FIXED, (uint32_t) rx_data, 1);
	begin_spi_tx(LL_DMA_SRC_FIXED, (uint32_t) &tx_data, 1);
#endif
	while (reception_in_progress == 1) {}
 8001f1c:	bf00      	nop
 8001f1e:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <send_receive_spi_command+0x40>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d0fa      	beq.n	8001f1e <send_receive_spi_command+0x2a>
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200007a5 	.word	0x200007a5
 8001f38:	200000a4 	.word	0x200000a4

08001f3c <HAL_SPI_TxRxCpltCallback>:


#ifdef USE_HAL
// HAL calls this function when both Tx and Rx have completed.
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	if (hspi == &SPI) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_SPI_TxRxCpltCallback+0x14>
		spi_txrx_cplt_callback();
 8001f4c:	f7ff fccc 	bl	80018e8 <spi_txrx_cplt_callback>
	}
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200000a4 	.word	0x200000a4

08001f5c <HAL_SPI_ErrorCallback>:


// HAL calls this function when an error in the SPI communication has been detected.
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	spi_error_callback();
 8001f64:	f7ff fce2 	bl	800192c <spi_error_callback>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_UART_TxCpltCallback>:


// HAL calls this function when UART Tx has completed.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	uart_ready = 1;
 8001f78:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <HAL_UART_TxCpltCallback+0x1c>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000008 	.word	0x20000008

08001f90 <set_DigOut_hiZ>:
}


// Set auxiliary digital output to high-impedance (HiZ) state.
void set_DigOut_hiZ(RHDConfigParameters *p)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	p->digOut = 0;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	635a      	str	r2, [r3, #52]	@ 0x34
	p->digOut_hiZ = 1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <set_DSP_cutoff_freq>:


// Set the DSP offset removal filter cutoff frequency as closely to the requested
// newDspCutoffFreq (in Hz) as possible; returns the actual cutoff frequency (in Hz).
double set_DSP_cutoff_freq(RHDConfigParameters *p, double new_DSP_cutoff_freq)
{
 8001fb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fb4:	b0b0      	sub	sp, #192	@ 0xc0
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	ed87 0b00 	vstr	d0, [r7]
	double f_cutoff[16] = {0};
 8001fbe:	f107 0310 	add.w	r3, r7, #16
 8001fc2:	2280      	movs	r2, #128	@ 0x80
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00b fc16 	bl	800d7f8 <memset>
	// Note: f_cutoff[0] = 0.0 here, but this index should not be used.
	for (int n = 1; n < 16; ++n) {
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001fd2:	e045      	b.n	8002060 <set_DSP_cutoff_freq+0xb0>
		double x = pow(2.0, (double) n);
 8001fd4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001fd8:	f7fe faac 	bl	8000534 <__aeabi_i2d>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	ec43 2b11 	vmov	d1, r2, r3
 8001fe4:	ed9f 0b5e 	vldr	d0, [pc, #376]	@ 8002160 <set_DSP_cutoff_freq+0x1b0>
 8001fe8:	f00b fe8c 	bl	800dd04 <pow>
 8001fec:	ed87 0b24 	vstr	d0, [r7, #144]	@ 0x90
		f_cutoff[n] = p->sample_rate * log(x / (x - 1.0)) / (2.0 * M_PI);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8002178 <set_DSP_cutoff_freq+0x1c8>)
 8001ffc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002000:	f7fe f94a 	bl	8000298 <__aeabi_dsub>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800200c:	f7fe fc26 	bl	800085c <__aeabi_ddiv>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	ec43 2b17 	vmov	d7, r2, r3
 8002018:	eeb0 0a47 	vmov.f32	s0, s14
 800201c:	eef0 0a67 	vmov.f32	s1, s15
 8002020:	f00b fdf2 	bl	800dc08 <log>
 8002024:	ec53 2b10 	vmov	r2, r3, d0
 8002028:	4640      	mov	r0, r8
 800202a:	4649      	mov	r1, r9
 800202c:	f7fe faec 	bl	8000608 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	a34b      	add	r3, pc, #300	@ (adr r3, 8002168 <set_DSP_cutoff_freq+0x1b8>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe fc0d 	bl	800085c <__aeabi_ddiv>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800204a:	00c9      	lsls	r1, r1, #3
 800204c:	31c0      	adds	r1, #192	@ 0xc0
 800204e:	4439      	add	r1, r7
 8002050:	39b0      	subs	r1, #176	@ 0xb0
 8002052:	e9c1 2300 	strd	r2, r3, [r1]
	for (int n = 1; n < 16; ++n) {
 8002056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800205a:	3301      	adds	r3, #1
 800205c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002060:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002064:	2b0f      	cmp	r3, #15
 8002066:	ddb5      	ble.n	8001fd4 <set_DSP_cutoff_freq+0x24>
	}
	double log_new_DSP_cutoff_freq = log10(new_DSP_cutoff_freq);
 8002068:	ed97 0b00 	vldr	d0, [r7]
 800206c:	f00b fe0c 	bl	800dc88 <log10>
 8002070:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

	// Find the closest value to the requested cutoff frequency (on a logarithmic scale).
	if (new_DSP_cutoff_freq > f_cutoff[1]) {
 8002074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800207c:	f7fe fd54 	bl	8000b28 <__aeabi_dcmpgt>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <set_DSP_cutoff_freq+0xde>
		p->DSP_cutoff_freq = 1;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800208c:	e055      	b.n	800213a <set_DSP_cutoff_freq+0x18a>
	} else if (new_DSP_cutoff_freq < f_cutoff[15]) {
 800208e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002092:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002096:	f7fe fd29 	bl	8000aec <__aeabi_dcmplt>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <set_DSP_cutoff_freq+0xf8>
		p->DSP_cutoff_freq = 15;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	220f      	movs	r2, #15
 80020a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80020a6:	e048      	b.n	800213a <set_DSP_cutoff_freq+0x18a>
	} else {
		double min_log_diff = 10000000.0;
 80020a8:	a331      	add	r3, pc, #196	@ (adr r3, 8002170 <set_DSP_cutoff_freq+0x1c0>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		for (int n = 1; n < 16; n++) {
 80020b2:	2301      	movs	r3, #1
 80020b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80020b8:	e03b      	b.n	8002132 <set_DSP_cutoff_freq+0x182>
			double log_f_cutoff = log10(f_cutoff[n]);
 80020ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	33c0      	adds	r3, #192	@ 0xc0
 80020c2:	443b      	add	r3, r7
 80020c4:	3bb0      	subs	r3, #176	@ 0xb0
 80020c6:	ed93 7b00 	vldr	d7, [r3]
 80020ca:	eeb0 0a47 	vmov.f32	s0, s14
 80020ce:	eef0 0a67 	vmov.f32	s1, s15
 80020d2:	f00b fdd9 	bl	800dc88 <log10>
 80020d6:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
			if (fabs(log_new_DSP_cutoff_freq - log_f_cutoff) < min_log_diff) {
 80020da:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80020de:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80020e2:	f7fe f8d9 	bl	8000298 <__aeabi_dsub>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4614      	mov	r4, r2
 80020ec:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80020f0:	4622      	mov	r2, r4
 80020f2:	462b      	mov	r3, r5
 80020f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80020f8:	f7fe fd16 	bl	8000b28 <__aeabi_dcmpgt>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d012      	beq.n	8002128 <set_DSP_cutoff_freq+0x178>
				min_log_diff = fabs(log_new_DSP_cutoff_freq - log_f_cutoff);
 8002102:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002106:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800210a:	f7fe f8c5 	bl	8000298 <__aeabi_dsub>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4611      	mov	r1, r2
 8002114:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8002118:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800211c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
				p->DSP_cutoff_freq = n;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002126:	64da      	str	r2, [r3, #76]	@ 0x4c
		for (int n = 1; n < 16; n++) {
 8002128:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800212c:	3301      	adds	r3, #1
 800212e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002136:	2b0f      	cmp	r3, #15
 8002138:	ddbf      	ble.n	80020ba <set_DSP_cutoff_freq+0x10a>
			}
		}
	}
	return f_cutoff[p->DSP_cutoff_freq];
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	33c0      	adds	r3, #192	@ 0xc0
 8002142:	443b      	add	r3, r7
 8002144:	3bb0      	subs	r3, #176	@ 0xb0
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	ec43 2b17 	vmov	d7, r2, r3
}
 800214e:	eeb0 0a47 	vmov.f32	s0, s14
 8002152:	eef0 0a67 	vmov.f32	s1, s15
 8002156:	37c0      	adds	r7, #192	@ 0xc0
 8002158:	46bd      	mov	sp, r7
 800215a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800215e:	bf00      	nop
 8002160:	00000000 	.word	0x00000000
 8002164:	40000000 	.word	0x40000000
 8002168:	54442d18 	.word	0x54442d18
 800216c:	401921fb 	.word	0x401921fb
 8002170:	00000000 	.word	0x00000000
 8002174:	416312d0 	.word	0x416312d0
 8002178:	3ff00000 	.word	0x3ff00000

0800217c <set_zcheck_scale>:


// Select the series capacitor used to convert the voltage waveform generated by the on-chip DAC into an AC
// current waveform that stimulates a selected electrode for impedance testing (ZcheckCs100fF, ZcheckCs1pF, or Zcheck10pF).
void set_zcheck_scale(RHDConfigParameters *p, ZcheckCs scale)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
	switch (scale) {
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d00e      	beq.n	80021ac <set_zcheck_scale+0x30>
 800218e:	2b02      	cmp	r3, #2
 8002190:	dc10      	bgt.n	80021b4 <set_zcheck_scale+0x38>
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <set_zcheck_scale+0x20>
 8002196:	2b01      	cmp	r3, #1
 8002198:	d004      	beq.n	80021a4 <set_zcheck_scale+0x28>
		break;
	case ZcheckCs10pF:
		p->zcheck_scale = 0x03;
		break;
	}
}
 800219a:	e00b      	b.n	80021b4 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x00;		// Cs = 0.1 pF
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 80021a2:	e007      	b.n	80021b4 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x01;		// Cs = 1.0 pF
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 80021aa:	e003      	b.n	80021b4 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x03;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2203      	movs	r2, #3
 80021b0:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 80021b2:	bf00      	nop
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <set_zcheck_polarity>:


// Select impedance testing of positive or negative amplifier inputs (RHD2216 only), based on
// the variable polarity (ZcheckPositiveInput or ZcheckNegativeInput).
void set_zcheck_polarity(RHDConfigParameters *p, ZcheckPolarity polarity)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	70fb      	strb	r3, [r7, #3]
	p->zcheck_sel_pol = polarity == ZcheckNegativeInput; // Negative: 1, Positive: 0
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	bf0c      	ite	eq
 80021d2:	2301      	moveq	r3, #1
 80021d4:	2300      	movne	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <set_zcheck_channel>:


// Select the amplifier channel for impedance testing.
int set_zcheck_channel(RHDConfigParameters *p, int channel)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
	if (channel < 0 || channel > max_num_channels_per_chip() - 1) {
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db05      	blt.n	8002206 <set_zcheck_channel+0x1c>
 80021fa:	f000 fe77 	bl	8002eec <max_num_channels_per_chip>
 80021fe:	4602      	mov	r2, r0
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4293      	cmp	r3, r2
 8002204:	db02      	blt.n	800220c <set_zcheck_channel+0x22>
		return -1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e004      	b.n	8002216 <set_zcheck_channel+0x2c>
	} else {
		p->zcheck_select = channel;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	669a      	str	r2, [r3, #104]	@ 0x68
		return p->zcheck_select;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
	}
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <power_up_all_amps>:
}


// Power up all amplifiers on chip.
void power_up_all_amps(RHDConfigParameters *p)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e008      	b.n	800223e <power_up_all_amps+0x20>
		p->amp_pwr[channel] = 1;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	3228      	adds	r2, #40	@ 0x28
 8002232:	2101      	movs	r1, #1
 8002234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3301      	adds	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	f000 fe55 	bl	8002eec <max_num_channels_per_chip>
 8002242:	4602      	mov	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4293      	cmp	r3, r2
 8002248:	dbf0      	blt.n	800222c <power_up_all_amps+0xe>
	}
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	0000      	movs	r0, r0
	...

08002258 <set_upper_bandwidth>:


// Set the on-chip RH1 and RH2 DAC values appropriately to set a particular amplifier
// upper bandwidth (in Hz).  Return an estimate of the actual upper bandwidth achieved.
double set_upper_bandwidth(RHDConfigParameters *p, double upper_bandwidth)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b0a6      	sub	sp, #152	@ 0x98
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	ed87 0b00 	vstr	d0, [r7]
	const double RH1Base = 2200.0;
 8002264:	a3b7      	add	r3, pc, #732	@ (adr r3, 8002544 <set_upper_bandwidth+0x2ec>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	const double RH1Dac1Unit = 600.0;
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4bb1      	ldr	r3, [pc, #708]	@ (8002538 <set_upper_bandwidth+0x2e0>)
 8002274:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	const double RH1Dac2Unit = 29400.0;
 8002278:	a3a9      	add	r3, pc, #676	@ (adr r3, 8002520 <set_upper_bandwidth+0x2c8>)
 800227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	const int RH1Dac1Steps = 63;
 8002282:	233f      	movs	r3, #63	@ 0x3f
 8002284:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const int RH1Dac2Steps = 31;
 8002286:	231f      	movs	r3, #31
 8002288:	65bb      	str	r3, [r7, #88]	@ 0x58

	const double RH2Base = 8700.0;
 800228a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8002528 <set_upper_bandwidth+0x2d0>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	const double RH2Dac1Unit = 763.0;
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	4ba8      	ldr	r3, [pc, #672]	@ (800253c <set_upper_bandwidth+0x2e4>)
 800229a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	const double RH2Dac2Unit = 38400.0;
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	4ba7      	ldr	r3, [pc, #668]	@ (8002540 <set_upper_bandwidth+0x2e8>)
 80022a4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	const int RH2Dac1Steps = 63;
 80022a8:	233f      	movs	r3, #63	@ 0x3f
 80022aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const int RH2Dac2Steps = 31;
 80022ac:	231f      	movs	r3, #31
 80022ae:	63bb      	str	r3, [r7, #56]	@ 0x38

	// No upper bandwidths higher than 30 kHz.
	if (upper_bandwidth > 30000.0) {
 80022b0:	a39f      	add	r3, pc, #636	@ (adr r3, 8002530 <set_upper_bandwidth+0x2d8>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022ba:	f7fe fc35 	bl	8000b28 <__aeabi_dcmpgt>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d004      	beq.n	80022ce <set_upper_bandwidth+0x76>
		upper_bandwidth = 30000.0;
 80022c4:	a39a      	add	r3, pc, #616	@ (adr r3, 8002530 <set_upper_bandwidth+0x2d8>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	e9c7 2300 	strd	r2, r3, [r7]
	}

	double rH1_target = rH1_from_upper_bandwidth(upper_bandwidth);
 80022ce:	ed97 0b00 	vldr	d0, [r7]
 80022d2:	f000 fa31 	bl	8002738 <rH1_from_upper_bandwidth>
 80022d6:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

	p->rH1_DAC1 = 0;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	p->rH1_DAC2 = 0;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	double rH1_actual = RH1Base;
 80022ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80022ee:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

	for (int i = 0; i < RH1Dac2Steps; ++i) {
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80022f8:	e032      	b.n	8002360 <set_upper_bandwidth+0x108>
		if (rH1_actual < rH1_target - (RH1Dac2Unit - RH1Dac1Unit / 2)) {
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002302:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002306:	f7fe faa9 	bl	800085c <__aeabi_ddiv>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002312:	f7fd ffc1 	bl	8000298 <__aeabi_dsub>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800231e:	f7fd ffbb 	bl	8000298 <__aeabi_dsub>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800232a:	f7fe fbdf 	bl	8000aec <__aeabi_dcmplt>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d010      	beq.n	8002356 <set_upper_bandwidth+0xfe>
			rH1_actual += RH1Dac2Unit;
 8002334:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002338:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800233c:	f7fd ffae 	bl	800029c <__adddf3>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			++p->rH1_DAC2;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < RH1Dac2Steps; ++i) {
 8002356:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800235a:	3301      	adds	r3, #1
 800235c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002360:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002364:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002366:	429a      	cmp	r2, r3
 8002368:	dbc7      	blt.n	80022fa <set_upper_bandwidth+0xa2>
		}
	}

	for (int i = 0; i < RH1Dac1Steps; ++i) {
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002370:	e02c      	b.n	80023cc <set_upper_bandwidth+0x174>
		if (rH1_actual < rH1_target - (RH1Dac1Unit / 2)) {
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800237a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800237e:	f7fe fa6d 	bl	800085c <__aeabi_ddiv>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800238a:	f7fd ff85 	bl	8000298 <__aeabi_dsub>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002396:	f7fe fba9 	bl	8000aec <__aeabi_dcmplt>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d010      	beq.n	80023c2 <set_upper_bandwidth+0x16a>
			rH1_actual += RH1Dac1Unit;
 80023a0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80023a4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80023a8:	f7fd ff78 	bl	800029c <__adddf3>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			++p->rH1_DAC1;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	for (int i = 0; i < RH1Dac1Steps; ++i) {
 80023c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023c6:	3301      	adds	r3, #1
 80023c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80023d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023d2:	429a      	cmp	r2, r3
 80023d4:	dbcd      	blt.n	8002372 <set_upper_bandwidth+0x11a>
		}
	}

	double rH2_target = rH2_from_upper_bandwidth(upper_bandwidth);
 80023d6:	ed97 0b00 	vldr	d0, [r7]
 80023da:	f000 fa11 	bl	8002800 <rH2_from_upper_bandwidth>
 80023de:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	p->rH2_DAC1 = 0;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	p->rH2_DAC2 = 0;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	double rH2_actual = RH2Base;
 80023f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80023f6:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	for (int i = 0; i < RH2Dac2Steps; ++i) {
 80023fa:	2300      	movs	r3, #0
 80023fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023fe:	e030      	b.n	8002462 <set_upper_bandwidth+0x20a>
		if (rH2_actual < rH2_target - (RH2Dac2Unit - RH2Dac1Unit / 2)) {
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002408:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800240c:	f7fe fa26 	bl	800085c <__aeabi_ddiv>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002418:	f7fd ff3e 	bl	8000298 <__aeabi_dsub>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002424:	f7fd ff38 	bl	8000298 <__aeabi_dsub>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002430:	f7fe fb5c 	bl	8000aec <__aeabi_dcmplt>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d010      	beq.n	800245c <set_upper_bandwidth+0x204>
			rH2_actual += RH2Dac2Unit;
 800243a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800243e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002442:	f7fd ff2b 	bl	800029c <__adddf3>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			++p->rH2_DAC2;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	for (int i = 0; i < RH2Dac2Steps; ++i) {
 800245c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800245e:	3301      	adds	r3, #1
 8002460:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002462:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002466:	429a      	cmp	r2, r3
 8002468:	dbca      	blt.n	8002400 <set_upper_bandwidth+0x1a8>
		}
	}

	for (int i = 0; i < RH2Dac1Steps; ++i) {
 800246a:	2300      	movs	r3, #0
 800246c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800246e:	e02a      	b.n	80024c6 <set_upper_bandwidth+0x26e>
		if (rH2_actual < rH2_target - (RH2Dac1Unit / 2)) {
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002478:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800247c:	f7fe f9ee 	bl	800085c <__aeabi_ddiv>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002488:	f7fd ff06 	bl	8000298 <__aeabi_dsub>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002494:	f7fe fb2a 	bl	8000aec <__aeabi_dcmplt>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d010      	beq.n	80024c0 <set_upper_bandwidth+0x268>
			rH2_actual += RH2Dac1Unit;
 800249e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80024a6:	f7fd fef9 	bl	800029c <__adddf3>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			++p->rH2_DAC1;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < RH2Dac1Steps; ++i) {
 80024c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024c2:	3301      	adds	r3, #1
 80024c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024c6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80024c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ca:	429a      	cmp	r2, r3
 80024cc:	dbd0      	blt.n	8002470 <set_upper_bandwidth+0x218>
		}
	}

	double actual_upper_bandwidth1 = upper_bandwidth_from_rH1(rH1_actual);
 80024ce:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 80024d2:	f000 fad9 	bl	8002a88 <upper_bandwidth_from_rH1>
 80024d6:	ed87 0b08 	vstr	d0, [r7, #32]
	double actual_upper_bandwidth2 = upper_bandwidth_from_rH2(rH2_actual);
 80024da:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 80024de:	f000 fb73 	bl	8002bc8 <upper_bandwidth_from_rH2>
 80024e2:	ed87 0b06 	vstr	d0, [r7, #24]

	// Upper bandwidth estimates calculated from actual RH1 value and actual RH2 value
	// should be very close; we will take their geometric means to get a single number.
	double actual_upper_bandwidth = sqrt(actual_upper_bandwidth1 * actual_upper_bandwidth2);
 80024e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024ee:	f7fe f88b 	bl	8000608 <__aeabi_dmul>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	ec43 2b17 	vmov	d7, r2, r3
 80024fa:	eeb0 0a47 	vmov.f32	s0, s14
 80024fe:	eef0 0a67 	vmov.f32	s1, s15
 8002502:	f00b fc6f 	bl	800dde4 <sqrt>
 8002506:	ed87 0b04 	vstr	d0, [r7, #16]

	return actual_upper_bandwidth;
 800250a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800250e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002512:	eeb0 0a47 	vmov.f32	s0, s14
 8002516:	eef0 0a67 	vmov.f32	s1, s15
 800251a:	3798      	adds	r7, #152	@ 0x98
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	00000000 	.word	0x00000000
 8002524:	40dcb600 	.word	0x40dcb600
 8002528:	00000000 	.word	0x00000000
 800252c:	40c0fe00 	.word	0x40c0fe00
 8002530:	00000000 	.word	0x00000000
 8002534:	40dd4c00 	.word	0x40dd4c00
 8002538:	4082c000 	.word	0x4082c000
 800253c:	4087d800 	.word	0x4087d800
 8002540:	40e2c000 	.word	0x40e2c000
 8002544:	00000000 	.word	0x00000000
 8002548:	40a13000 	.word	0x40a13000
 800254c:	00000000 	.word	0x00000000

08002550 <set_lower_bandwidth>:


// Set the on-chip RL DAC values appropriately to set a particular amplifier lower bandwidth (in Hz).
// Return an estimate of the actual lower bandwidth achieved.
double set_lower_bandwidth(RHDConfigParameters *p, double lower_bandwidth)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b096      	sub	sp, #88	@ 0x58
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	ed87 0b00 	vstr	d0, [r7]
    const double RLBase = 3500.0;
 800255c:	a36a      	add	r3, pc, #424	@ (adr r3, 8002708 <set_lower_bandwidth+0x1b8>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    const double RLDac1Unit = 175.0;
 8002566:	a36a      	add	r3, pc, #424	@ (adr r3, 8002710 <set_lower_bandwidth+0x1c0>)
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    const double RLDac2Unit = 12700.0;
 8002570:	a369      	add	r3, pc, #420	@ (adr r3, 8002718 <set_lower_bandwidth+0x1c8>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    const double RLDac3Unit = 3000000.0;
 800257a:	a369      	add	r3, pc, #420	@ (adr r3, 8002720 <set_lower_bandwidth+0x1d0>)
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    const int RLDac1Steps = 127;
 8002584:	237f      	movs	r3, #127	@ 0x7f
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
    const int RLDac2Steps = 63;
 8002588:	233f      	movs	r3, #63	@ 0x3f
 800258a:	623b      	str	r3, [r7, #32]

    // No lower bandwidths higher than 1.5 kHz.
    if (lower_bandwidth > 1500.0) {
 800258c:	a366      	add	r3, pc, #408	@ (adr r3, 8002728 <set_lower_bandwidth+0x1d8>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002596:	f7fe fac7 	bl	8000b28 <__aeabi_dcmpgt>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <set_lower_bandwidth+0x5a>
    	lower_bandwidth = 1500.0;
 80025a0:	a361      	add	r3, pc, #388	@ (adr r3, 8002728 <set_lower_bandwidth+0x1d8>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	e9c7 2300 	strd	r2, r3, [r7]
    }

    double rL_target = rL_from_lower_bandwidth(lower_bandwidth);
 80025aa:	ed97 0b00 	vldr	d0, [r7]
 80025ae:	f000 f98b 	bl	80028c8 <rL_from_lower_bandwidth>
 80025b2:	ed87 0b06 	vstr	d0, [r7, #24]

    p->rL_DAC1 = 0;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    p->rL_DAC2 = 0;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    p->rL_DAC3 = 0;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    double rL_actual = RLBase;
 80025ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    if (lower_bandwidth < 0.15) {
 80025d6:	a356      	add	r3, pc, #344	@ (adr r3, 8002730 <set_lower_bandwidth+0x1e0>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025e0:	f7fe fa84 	bl	8000aec <__aeabi_dcmplt>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d010      	beq.n	800260c <set_lower_bandwidth+0xbc>
    	rL_actual += RLDac3Unit;
 80025ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80025f2:	f7fd fe53 	bl	800029c <__adddf3>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    	++p->rL_DAC3;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    for (int i = 0; i < RLDac2Steps; ++i) {
 800260c:	2300      	movs	r3, #0
 800260e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002610:	e030      	b.n	8002674 <set_lower_bandwidth+0x124>
    	if (rL_actual < rL_target - (RLDac2Unit - RLDac1Unit / 2)) {
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800261a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800261e:	f7fe f91d 	bl	800085c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800262a:	f7fd fe35 	bl	8000298 <__aeabi_dsub>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002636:	f7fd fe2f 	bl	8000298 <__aeabi_dsub>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002642:	f7fe fa53 	bl	8000aec <__aeabi_dcmplt>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <set_lower_bandwidth+0x11e>
    		rL_actual += RLDac2Unit;
 800264c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002650:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002654:	f7fd fe22 	bl	800029c <__adddf3>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    		++p->rL_DAC2;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    for (int i = 0; i < RLDac2Steps; ++i) {
 800266e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002670:	3301      	adds	r3, #1
 8002672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002674:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	429a      	cmp	r2, r3
 800267a:	dbca      	blt.n	8002612 <set_lower_bandwidth+0xc2>
    	}
    }

    for (int i = 0; i < RLDac1Steps; ++i) {
 800267c:	2300      	movs	r3, #0
 800267e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002680:	e02a      	b.n	80026d8 <set_lower_bandwidth+0x188>
    	if (rL_actual < rL_target - (RLDac1Unit / 2)) {
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800268a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800268e:	f7fe f8e5 	bl	800085c <__aeabi_ddiv>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800269a:	f7fd fdfd 	bl	8000298 <__aeabi_dsub>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80026a6:	f7fe fa21 	bl	8000aec <__aeabi_dcmplt>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <set_lower_bandwidth+0x182>
    		rL_actual += RLDac1Unit;
 80026b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80026b8:	f7fd fdf0 	bl	800029c <__adddf3>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    		++p->rL_DAC1;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    for (int i = 0; i < RLDac1Steps; ++i) {
 80026d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026d4:	3301      	adds	r3, #1
 80026d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	429a      	cmp	r2, r3
 80026de:	dbd0      	blt.n	8002682 <set_lower_bandwidth+0x132>
    	}
    }

    double actual_lower_bandwidth = lower_bandwidth_from_rL(rL_actual);
 80026e0:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 80026e4:	f000 fb10 	bl	8002d08 <lower_bandwidth_from_rL>
 80026e8:	ed87 0b04 	vstr	d0, [r7, #16]

    return actual_lower_bandwidth;
 80026ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80026f4:	eeb0 0a47 	vmov.f32	s0, s14
 80026f8:	eef0 0a67 	vmov.f32	s1, s15
 80026fc:	3758      	adds	r7, #88	@ 0x58
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	f3af 8000 	nop.w
 8002708:	00000000 	.word	0x00000000
 800270c:	40ab5800 	.word	0x40ab5800
 8002710:	00000000 	.word	0x00000000
 8002714:	4065e000 	.word	0x4065e000
 8002718:	00000000 	.word	0x00000000
 800271c:	40c8ce00 	.word	0x40c8ce00
 8002720:	00000000 	.word	0x00000000
 8002724:	4146e360 	.word	0x4146e360
 8002728:	00000000 	.word	0x00000000
 800272c:	40977000 	.word	0x40977000
 8002730:	33333333 	.word	0x33333333
 8002734:	3fc33333 	.word	0x3fc33333

08002738 <rH1_from_upper_bandwidth>:


// Return the value of the RH1 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH1_from_upper_bandwidth(double upper_bandwidth)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	ed87 0b00 	vstr	d0, [r7]
	double log10f = log10(upper_bandwidth);
 8002742:	ed97 0b00 	vldr	d0, [r7]
 8002746:	f00b fa9f 	bl	800dc88 <log10>
 800274a:	ed87 0b02 	vstr	d0, [r7, #8]

    return 0.9730 * pow(10.0, (8.0968 - 1.1892 * log10f + 0.04767 * log10f * log10f));
 800274e:	a324      	add	r3, pc, #144	@ (adr r3, 80027e0 <rH1_from_upper_bandwidth+0xa8>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002758:	f7fd ff56 	bl	8000608 <__aeabi_dmul>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	a121      	add	r1, pc, #132	@ (adr r1, 80027e8 <rH1_from_upper_bandwidth+0xb0>)
 8002762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002766:	f7fd fd97 	bl	8000298 <__aeabi_dsub>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4614      	mov	r4, r2
 8002770:	461d      	mov	r5, r3
 8002772:	a31f      	add	r3, pc, #124	@ (adr r3, 80027f0 <rH1_from_upper_bandwidth+0xb8>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800277c:	f7fd ff44 	bl	8000608 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800278c:	f7fd ff3c 	bl	8000608 <__aeabi_dmul>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4620      	mov	r0, r4
 8002796:	4629      	mov	r1, r5
 8002798:	f7fd fd80 	bl	800029c <__adddf3>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	ec43 2b17 	vmov	d7, r2, r3
 80027a4:	eeb0 1a47 	vmov.f32	s2, s14
 80027a8:	eef0 1a67 	vmov.f32	s3, s15
 80027ac:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 80027d8 <rH1_from_upper_bandwidth+0xa0>
 80027b0:	f00b faa8 	bl	800dd04 <pow>
 80027b4:	ec51 0b10 	vmov	r0, r1, d0
 80027b8:	a30f      	add	r3, pc, #60	@ (adr r3, 80027f8 <rH1_from_upper_bandwidth+0xc0>)
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	f7fd ff23 	bl	8000608 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	ec43 2b17 	vmov	d7, r2, r3
}
 80027ca:	eeb0 0a47 	vmov.f32	s0, s14
 80027ce:	eef0 0a67 	vmov.f32	s1, s15
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bdb0      	pop	{r4, r5, r7, pc}
 80027d8:	00000000 	.word	0x00000000
 80027dc:	40240000 	.word	0x40240000
 80027e0:	94467382 	.word	0x94467382
 80027e4:	3ff306f6 	.word	0x3ff306f6
 80027e8:	c504816f 	.word	0xc504816f
 80027ec:	4020318f 	.word	0x4020318f
 80027f0:	c60029f1 	.word	0xc60029f1
 80027f4:	3fa86833 	.word	0x3fa86833
 80027f8:	e5604189 	.word	0xe5604189
 80027fc:	3fef22d0 	.word	0x3fef22d0

08002800 <rH2_from_upper_bandwidth>:


// Return the value of the RH2 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH2_from_upper_bandwidth(double upper_bandwidth)
{
 8002800:	b5b0      	push	{r4, r5, r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(upper_bandwidth);
 800280a:	ed97 0b00 	vldr	d0, [r7]
 800280e:	f00b fa3b 	bl	800dc88 <log10>
 8002812:	ed87 0b02 	vstr	d0, [r7, #8]

    return 1.0191 * pow(10.0, (8.1009 - 1.0821 * log10f + 0.03383 * log10f * log10f));
 8002816:	a324      	add	r3, pc, #144	@ (adr r3, 80028a8 <rH2_from_upper_bandwidth+0xa8>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002820:	f7fd fef2 	bl	8000608 <__aeabi_dmul>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	a121      	add	r1, pc, #132	@ (adr r1, 80028b0 <rH2_from_upper_bandwidth+0xb0>)
 800282a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800282e:	f7fd fd33 	bl	8000298 <__aeabi_dsub>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4614      	mov	r4, r2
 8002838:	461d      	mov	r5, r3
 800283a:	a31f      	add	r3, pc, #124	@ (adr r3, 80028b8 <rH2_from_upper_bandwidth+0xb8>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002844:	f7fd fee0 	bl	8000608 <__aeabi_dmul>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002854:	f7fd fed8 	bl	8000608 <__aeabi_dmul>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4620      	mov	r0, r4
 800285e:	4629      	mov	r1, r5
 8002860:	f7fd fd1c 	bl	800029c <__adddf3>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	ec43 2b17 	vmov	d7, r2, r3
 800286c:	eeb0 1a47 	vmov.f32	s2, s14
 8002870:	eef0 1a67 	vmov.f32	s3, s15
 8002874:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 80028a0 <rH2_from_upper_bandwidth+0xa0>
 8002878:	f00b fa44 	bl	800dd04 <pow>
 800287c:	ec51 0b10 	vmov	r0, r1, d0
 8002880:	a30f      	add	r3, pc, #60	@ (adr r3, 80028c0 <rH2_from_upper_bandwidth+0xc0>)
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f7fd febf 	bl	8000608 <__aeabi_dmul>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002892:	eeb0 0a47 	vmov.f32	s0, s14
 8002896:	eef0 0a67 	vmov.f32	s1, s15
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bdb0      	pop	{r4, r5, r7, pc}
 80028a0:	00000000 	.word	0x00000000
 80028a4:	40240000 	.word	0x40240000
 80028a8:	16f0068e 	.word	0x16f0068e
 80028ac:	3ff15048 	.word	0x3ff15048
 80028b0:	2a305532 	.word	0x2a305532
 80028b4:	402033a9 	.word	0x402033a9
 80028b8:	6f3f52fc 	.word	0x6f3f52fc
 80028bc:	3fa1522a 	.word	0x3fa1522a
 80028c0:	cd35a858 	.word	0xcd35a858
 80028c4:	3ff04e3b 	.word	0x3ff04e3b

080028c8 <rL_from_lower_bandwidth>:


// Return the value of the RL resistor (in ohms) corresponding to a particular lower bandwidth value (in Hz).
double rL_from_lower_bandwidth(double lower_bandwidth)
{
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(lower_bandwidth);
 80028d2:	ed97 0b00 	vldr	d0, [r7]
 80028d6:	f00b f9d7 	bl	800dc88 <log10>
 80028da:	ed87 0b02 	vstr	d0, [r7, #8]

    if (lower_bandwidth < 4.0) {
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	4b67      	ldr	r3, [pc, #412]	@ (8002a80 <rL_from_lower_bandwidth+0x1b8>)
 80028e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028e8:	f7fe f900 	bl	8000aec <__aeabi_dcmplt>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d05d      	beq.n	80029ae <rL_from_lower_bandwidth+0xe6>
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 80028f2:	a351      	add	r3, pc, #324	@ (adr r3, 8002a38 <rL_from_lower_bandwidth+0x170>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028fc:	f7fd fe84 	bl	8000608 <__aeabi_dmul>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	a14e      	add	r1, pc, #312	@ (adr r1, 8002a40 <rL_from_lower_bandwidth+0x178>)
 8002906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800290a:	f7fd fcc5 	bl	8000298 <__aeabi_dsub>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4614      	mov	r4, r2
 8002914:	461d      	mov	r5, r3
 8002916:	a34c      	add	r3, pc, #304	@ (adr r3, 8002a48 <rL_from_lower_bandwidth+0x180>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002920:	f7fd fe72 	bl	8000608 <__aeabi_dmul>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002930:	f7fd fe6a 	bl	8000608 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4620      	mov	r0, r4
 800293a:	4629      	mov	r1, r5
 800293c:	f7fd fcae 	bl	800029c <__adddf3>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4614      	mov	r4, r2
 8002946:	461d      	mov	r5, r3
            0.1442 * log10f * log10f * log10f));
 8002948:	a341      	add	r3, pc, #260	@ (adr r3, 8002a50 <rL_from_lower_bandwidth+0x188>)
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002952:	f7fd fe59 	bl	8000608 <__aeabi_dmul>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002962:	f7fd fe51 	bl	8000608 <__aeabi_dmul>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002972:	f7fd fe49 	bl	8000608 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 800297a:	4620      	mov	r0, r4
 800297c:	4629      	mov	r1, r5
 800297e:	f7fd fc8d 	bl	800029c <__adddf3>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	ec43 2b17 	vmov	d7, r2, r3
 800298a:	eeb0 1a47 	vmov.f32	s2, s14
 800298e:	eef0 1a67 	vmov.f32	s3, s15
 8002992:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8002a58 <rL_from_lower_bandwidth+0x190>
 8002996:	f00b f9b5 	bl	800dd04 <pow>
 800299a:	ec51 0b10 	vmov	r0, r1, d0
 800299e:	a330      	add	r3, pc, #192	@ (adr r3, 8002a60 <rL_from_lower_bandwidth+0x198>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fd fe30 	bl	8000608 <__aeabi_dmul>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	e03b      	b.n	8002a26 <rL_from_lower_bandwidth+0x15e>
    } else {
        return 1.0061 * pow(10.0, (4.7351 - 0.5916 * log10f + 0.08482 * log10f * log10f));
 80029ae:	a32e      	add	r3, pc, #184	@ (adr r3, 8002a68 <rL_from_lower_bandwidth+0x1a0>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029b8:	f7fd fe26 	bl	8000608 <__aeabi_dmul>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	a12b      	add	r1, pc, #172	@ (adr r1, 8002a70 <rL_from_lower_bandwidth+0x1a8>)
 80029c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029c6:	f7fd fc67 	bl	8000298 <__aeabi_dsub>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4614      	mov	r4, r2
 80029d0:	461d      	mov	r5, r3
 80029d2:	a329      	add	r3, pc, #164	@ (adr r3, 8002a78 <rL_from_lower_bandwidth+0x1b0>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029dc:	f7fd fe14 	bl	8000608 <__aeabi_dmul>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ec:	f7fd fe0c 	bl	8000608 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4620      	mov	r0, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7fd fc50 	bl	800029c <__adddf3>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	ec43 2b17 	vmov	d7, r2, r3
 8002a04:	eeb0 1a47 	vmov.f32	s2, s14
 8002a08:	eef0 1a67 	vmov.f32	s3, s15
 8002a0c:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8002a58 <rL_from_lower_bandwidth+0x190>
 8002a10:	f00b f978 	bl	800dd04 <pow>
 8002a14:	ec51 0b10 	vmov	r0, r1, d0
 8002a18:	a311      	add	r3, pc, #68	@ (adr r3, 8002a60 <rL_from_lower_bandwidth+0x198>)
 8002a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1e:	f7fd fdf3 	bl	8000608 <__aeabi_dmul>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
    }
}
 8002a26:	ec43 2b17 	vmov	d7, r2, r3
 8002a2a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a2e:	eef0 0a67 	vmov.f32	s1, s15
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bdb0      	pop	{r4, r5, r7, pc}
 8002a38:	ab367a10 	.word	0xab367a10
 8002a3c:	3ff3573e 	.word	0x3ff3573e
 8002a40:	6e2eb1c4 	.word	0x6e2eb1c4
 8002a44:	4013c1a3 	.word	0x4013c1a3
 8002a48:	35a85879 	.word	0x35a85879
 8002a4c:	3fe23bcd 	.word	0x3fe23bcd
 8002a50:	460aa64c 	.word	0x460aa64c
 8002a54:	3fc27525 	.word	0x3fc27525
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	40240000 	.word	0x40240000
 8002a60:	504816f0 	.word	0x504816f0
 8002a64:	3ff018fc 	.word	0x3ff018fc
 8002a68:	1f8a0903 	.word	0x1f8a0903
 8002a6c:	3fe2ee63 	.word	0x3fe2ee63
 8002a70:	0ded288d 	.word	0x0ded288d
 8002a74:	4012f0be 	.word	0x4012f0be
 8002a78:	760bf5d8 	.word	0x760bf5d8
 8002a7c:	3fb5b6c3 	.word	0x3fb5b6c3
 8002a80:	40100000 	.word	0x40100000
 8002a84:	00000000 	.word	0x00000000

08002a88 <upper_bandwidth_from_rH1>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH1 (in Ohms).
double upper_bandwidth_from_rH1(double rH1)
{
 8002a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a8c:	b088      	sub	sp, #32
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.04767;
 8002a94:	a343      	add	r3, pc, #268	@ (adr r3, 8002ba4 <upper_bandwidth_from_rH1+0x11c>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.1892;
 8002a9e:	a343      	add	r3, pc, #268	@ (adr r3, 8002bac <upper_bandwidth_from_rH1+0x124>)
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.0968 - log10(rH1 / 0.9730);
 8002aa8:	a342      	add	r3, pc, #264	@ (adr r3, 8002bb4 <upper_bandwidth_from_rH1+0x12c>)
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ab2:	f7fd fed3 	bl	800085c <__aeabi_ddiv>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	ec43 2b17 	vmov	d7, r2, r3
 8002abe:	eeb0 0a47 	vmov.f32	s0, s14
 8002ac2:	eef0 0a67 	vmov.f32	s1, s15
 8002ac6:	f00b f8df 	bl	800dc88 <log10>
 8002aca:	ec53 2b10 	vmov	r2, r3, d0
 8002ace:	a13b      	add	r1, pc, #236	@ (adr r1, 8002bbc <upper_bandwidth_from_rH1+0x134>)
 8002ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ad4:	f7fd fbe0 	bl	8000298 <__aeabi_dsub>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002ae0:	693c      	ldr	r4, [r7, #16]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002ae8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002aec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002af0:	f7fd fd8a 	bl	8000608 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4690      	mov	r8, r2
 8002afa:	4699      	mov	r9, r3
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <upper_bandwidth_from_rH1+0x118>)
 8002b02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b06:	f7fd fd7f 	bl	8000608 <__aeabi_dmul>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b16:	f7fd fd77 	bl	8000608 <__aeabi_dmul>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4640      	mov	r0, r8
 8002b20:	4649      	mov	r1, r9
 8002b22:	f7fd fbb9 	bl	8000298 <__aeabi_dsub>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	ec43 2b17 	vmov	d7, r2, r3
 8002b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b32:	eef0 0a67 	vmov.f32	s1, s15
 8002b36:	f00b f955 	bl	800dde4 <sqrt>
 8002b3a:	ec53 2b10 	vmov	r2, r3, d0
 8002b3e:	4620      	mov	r0, r4
 8002b40:	4629      	mov	r1, r5
 8002b42:	f7fd fba9 	bl	8000298 <__aeabi_dsub>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4614      	mov	r4, r2
 8002b4c:	461d      	mov	r5, r3
 8002b4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	f7fd fba1 	bl	800029c <__adddf3>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4620      	mov	r0, r4
 8002b60:	4629      	mov	r1, r5
 8002b62:	f7fd fe7b 	bl	800085c <__aeabi_ddiv>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	ec43 2b17 	vmov	d7, r2, r3
 8002b6e:	eeb0 1a47 	vmov.f32	s2, s14
 8002b72:	eef0 1a67 	vmov.f32	s3, s15
 8002b76:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8002b98 <upper_bandwidth_from_rH1+0x110>
 8002b7a:	f00b f8c3 	bl	800dd04 <pow>
 8002b7e:	eeb0 7a40 	vmov.f32	s14, s0
 8002b82:	eef0 7a60 	vmov.f32	s15, s1
}
 8002b86:	eeb0 0a47 	vmov.f32	s0, s14
 8002b8a:	eef0 0a67 	vmov.f32	s1, s15
 8002b8e:	3720      	adds	r7, #32
 8002b90:	46bd      	mov	sp, r7
 8002b92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b96:	bf00      	nop
 8002b98:	00000000 	.word	0x00000000
 8002b9c:	40240000 	.word	0x40240000
 8002ba0:	40100000 	.word	0x40100000
 8002ba4:	c60029f1 	.word	0xc60029f1
 8002ba8:	3fa86833 	.word	0x3fa86833
 8002bac:	94467382 	.word	0x94467382
 8002bb0:	bff306f6 	.word	0xbff306f6
 8002bb4:	e5604189 	.word	0xe5604189
 8002bb8:	3fef22d0 	.word	0x3fef22d0
 8002bbc:	c504816f 	.word	0xc504816f
 8002bc0:	4020318f 	.word	0x4020318f
 8002bc4:	00000000 	.word	0x00000000

08002bc8 <upper_bandwidth_from_rH2>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH2 (in Ohms).
double upper_bandwidth_from_rH2(double rH2)
{
 8002bc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bcc:	b088      	sub	sp, #32
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.03383;
 8002bd4:	a343      	add	r3, pc, #268	@ (adr r3, 8002ce4 <upper_bandwidth_from_rH2+0x11c>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.0821;
 8002bde:	a343      	add	r3, pc, #268	@ (adr r3, 8002cec <upper_bandwidth_from_rH2+0x124>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.1009 - log10(rH2 / 1.0191);
 8002be8:	a342      	add	r3, pc, #264	@ (adr r3, 8002cf4 <upper_bandwidth_from_rH2+0x12c>)
 8002bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bf2:	f7fd fe33 	bl	800085c <__aeabi_ddiv>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	ec43 2b17 	vmov	d7, r2, r3
 8002bfe:	eeb0 0a47 	vmov.f32	s0, s14
 8002c02:	eef0 0a67 	vmov.f32	s1, s15
 8002c06:	f00b f83f 	bl	800dc88 <log10>
 8002c0a:	ec53 2b10 	vmov	r2, r3, d0
 8002c0e:	a13b      	add	r1, pc, #236	@ (adr r1, 8002cfc <upper_bandwidth_from_rH2+0x134>)
 8002c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c14:	f7fd fb40 	bl	8000298 <__aeabi_dsub>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002c20:	693c      	ldr	r4, [r7, #16]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002c28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c30:	f7fd fcea 	bl	8000608 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4690      	mov	r8, r2
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	4b27      	ldr	r3, [pc, #156]	@ (8002ce0 <upper_bandwidth_from_rH2+0x118>)
 8002c42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c46:	f7fd fcdf 	bl	8000608 <__aeabi_dmul>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c56:	f7fd fcd7 	bl	8000608 <__aeabi_dmul>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4640      	mov	r0, r8
 8002c60:	4649      	mov	r1, r9
 8002c62:	f7fd fb19 	bl	8000298 <__aeabi_dsub>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	ec43 2b17 	vmov	d7, r2, r3
 8002c6e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c72:	eef0 0a67 	vmov.f32	s1, s15
 8002c76:	f00b f8b5 	bl	800dde4 <sqrt>
 8002c7a:	ec53 2b10 	vmov	r2, r3, d0
 8002c7e:	4620      	mov	r0, r4
 8002c80:	4629      	mov	r1, r5
 8002c82:	f7fd fb09 	bl	8000298 <__aeabi_dsub>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4614      	mov	r4, r2
 8002c8c:	461d      	mov	r5, r3
 8002c8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	f7fd fb01 	bl	800029c <__adddf3>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	f7fd fddb 	bl	800085c <__aeabi_ddiv>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	ec43 2b17 	vmov	d7, r2, r3
 8002cae:	eeb0 1a47 	vmov.f32	s2, s14
 8002cb2:	eef0 1a67 	vmov.f32	s3, s15
 8002cb6:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8002cd8 <upper_bandwidth_from_rH2+0x110>
 8002cba:	f00b f823 	bl	800dd04 <pow>
 8002cbe:	eeb0 7a40 	vmov.f32	s14, s0
 8002cc2:	eef0 7a60 	vmov.f32	s15, s1
}
 8002cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8002cca:	eef0 0a67 	vmov.f32	s1, s15
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cd6:	bf00      	nop
 8002cd8:	00000000 	.word	0x00000000
 8002cdc:	40240000 	.word	0x40240000
 8002ce0:	40100000 	.word	0x40100000
 8002ce4:	6f3f52fc 	.word	0x6f3f52fc
 8002ce8:	3fa1522a 	.word	0x3fa1522a
 8002cec:	16f0068e 	.word	0x16f0068e
 8002cf0:	bff15048 	.word	0xbff15048
 8002cf4:	cd35a858 	.word	0xcd35a858
 8002cf8:	3ff04e3b 	.word	0x3ff04e3b
 8002cfc:	2a305532 	.word	0x2a305532
 8002d00:	402033a9 	.word	0x402033a9
 8002d04:	00000000 	.word	0x00000000

08002d08 <lower_bandwidth_from_rL>:


// Return the amplifier lower bandwidth (in Hz) corresponding to a particular value of the resistor RL (in Ohms).
double lower_bandwidth_from_rL(double rL)
{
 8002d08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d0c:	b088      	sub	sp, #32
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    // Quadratic fit below is invalid for values of RL less than 5.1 kOhm.
    if (rL < 5100.0) {
 8002d14:	a363      	add	r3, pc, #396	@ (adr r3, 8002ea4 <lower_bandwidth_from_rL+0x19c>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d1e:	f7fd fee5 	bl	8000aec <__aeabi_dcmplt>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <lower_bandwidth_from_rL+0x2a>
        rL = 5100.0;
 8002d28:	a35e      	add	r3, pc, #376	@ (adr r3, 8002ea4 <lower_bandwidth_from_rL+0x19c>)
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	e9c7 2300 	strd	r2, r3, [r7]
    }

    if (rL < 30000.0) {
 8002d32:	a35e      	add	r3, pc, #376	@ (adr r3, 8002eac <lower_bandwidth_from_rL+0x1a4>)
 8002d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d3c:	f7fd fed6 	bl	8000aec <__aeabi_dcmplt>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d026      	beq.n	8002d94 <lower_bandwidth_from_rL+0x8c>
        a = 0.08482;
 8002d46:	a35b      	add	r3, pc, #364	@ (adr r3, 8002eb4 <lower_bandwidth_from_rL+0x1ac>)
 8002d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -0.5916;
 8002d50:	a35a      	add	r3, pc, #360	@ (adr r3, 8002ebc <lower_bandwidth_from_rL+0x1b4>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.7351 - log10(rL / 1.0061);
 8002d5a:	a35a      	add	r3, pc, #360	@ (adr r3, 8002ec4 <lower_bandwidth_from_rL+0x1bc>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d64:	f7fd fd7a 	bl	800085c <__aeabi_ddiv>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	ec43 2b17 	vmov	d7, r2, r3
 8002d70:	eeb0 0a47 	vmov.f32	s0, s14
 8002d74:	eef0 0a67 	vmov.f32	s1, s15
 8002d78:	f00a ff86 	bl	800dc88 <log10>
 8002d7c:	ec53 2b10 	vmov	r2, r3, d0
 8002d80:	a152      	add	r1, pc, #328	@ (adr r1, 8002ecc <lower_bandwidth_from_rL+0x1c4>)
 8002d82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d86:	f7fd fa87 	bl	8000298 <__aeabi_dsub>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002d92:	e025      	b.n	8002de0 <lower_bandwidth_from_rL+0xd8>
    } else {
        a = 0.3303;
 8002d94:	a34f      	add	r3, pc, #316	@ (adr r3, 8002ed4 <lower_bandwidth_from_rL+0x1cc>)
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -1.2100;
 8002d9e:	a34f      	add	r3, pc, #316	@ (adr r3, 8002edc <lower_bandwidth_from_rL+0x1d4>)
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.9873 - log10(rL / 1.0061);
 8002da8:	a346      	add	r3, pc, #280	@ (adr r3, 8002ec4 <lower_bandwidth_from_rL+0x1bc>)
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002db2:	f7fd fd53 	bl	800085c <__aeabi_ddiv>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	ec43 2b17 	vmov	d7, r2, r3
 8002dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8002dc2:	eef0 0a67 	vmov.f32	s1, s15
 8002dc6:	f00a ff5f 	bl	800dc88 <log10>
 8002dca:	ec53 2b10 	vmov	r2, r3, d0
 8002dce:	a145      	add	r1, pc, #276	@ (adr r1, 8002ee4 <lower_bandwidth_from_rL+0x1dc>)
 8002dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dd4:	f7fd fa60 	bl	8000298 <__aeabi_dsub>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002de0:	693c      	ldr	r4, [r7, #16]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002de8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002df0:	f7fd fc0a 	bl	8000608 <__aeabi_dmul>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4690      	mov	r8, r2
 8002dfa:	4699      	mov	r9, r3
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	4b27      	ldr	r3, [pc, #156]	@ (8002ea0 <lower_bandwidth_from_rL+0x198>)
 8002e02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e06:	f7fd fbff 	bl	8000608 <__aeabi_dmul>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e16:	f7fd fbf7 	bl	8000608 <__aeabi_dmul>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4640      	mov	r0, r8
 8002e20:	4649      	mov	r1, r9
 8002e22:	f7fd fa39 	bl	8000298 <__aeabi_dsub>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	ec43 2b17 	vmov	d7, r2, r3
 8002e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e32:	eef0 0a67 	vmov.f32	s1, s15
 8002e36:	f00a ffd5 	bl	800dde4 <sqrt>
 8002e3a:	ec53 2b10 	vmov	r2, r3, d0
 8002e3e:	4620      	mov	r0, r4
 8002e40:	4629      	mov	r1, r5
 8002e42:	f7fd fa29 	bl	8000298 <__aeabi_dsub>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4614      	mov	r4, r2
 8002e4c:	461d      	mov	r5, r3
 8002e4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	f7fd fa21 	bl	800029c <__adddf3>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4620      	mov	r0, r4
 8002e60:	4629      	mov	r1, r5
 8002e62:	f7fd fcfb 	bl	800085c <__aeabi_ddiv>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	ec43 2b17 	vmov	d7, r2, r3
 8002e6e:	eeb0 1a47 	vmov.f32	s2, s14
 8002e72:	eef0 1a67 	vmov.f32	s3, s15
 8002e76:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8002e98 <lower_bandwidth_from_rL+0x190>
 8002e7a:	f00a ff43 	bl	800dd04 <pow>
 8002e7e:	eeb0 7a40 	vmov.f32	s14, s0
 8002e82:	eef0 7a60 	vmov.f32	s15, s1
}
 8002e86:	eeb0 0a47 	vmov.f32	s0, s14
 8002e8a:	eef0 0a67 	vmov.f32	s1, s15
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e96:	bf00      	nop
 8002e98:	00000000 	.word	0x00000000
 8002e9c:	40240000 	.word	0x40240000
 8002ea0:	40100000 	.word	0x40100000
 8002ea4:	00000000 	.word	0x00000000
 8002ea8:	40b3ec00 	.word	0x40b3ec00
 8002eac:	00000000 	.word	0x00000000
 8002eb0:	40dd4c00 	.word	0x40dd4c00
 8002eb4:	760bf5d8 	.word	0x760bf5d8
 8002eb8:	3fb5b6c3 	.word	0x3fb5b6c3
 8002ebc:	1f8a0903 	.word	0x1f8a0903
 8002ec0:	bfe2ee63 	.word	0xbfe2ee63
 8002ec4:	504816f0 	.word	0x504816f0
 8002ec8:	3ff018fc 	.word	0x3ff018fc
 8002ecc:	0ded288d 	.word	0x0ded288d
 8002ed0:	4012f0be 	.word	0x4012f0be
 8002ed4:	9c779a6b 	.word	0x9c779a6b
 8002ed8:	3fd523a2 	.word	0x3fd523a2
 8002edc:	f5c28f5c 	.word	0xf5c28f5c
 8002ee0:	bff35c28 	.word	0xbff35c28
 8002ee4:	c56d5cfb 	.word	0xc56d5cfb
 8002ee8:	4013f2fe 	.word	0x4013f2fe

08002eec <max_num_channels_per_chip>:


// Maximum number of amplifier channels per chip.
int max_num_channels_per_chip()
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
	return 32;
 8002ef0:	2320      	movs	r3, #32
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	0000      	movs	r0, r0
	...

08002f00 <set_default_rhd_settings>:


// Set default values for parameters used to configure RAM registers on RHD2000 chip.
void set_default_rhd_settings(RHDConfigParameters *p)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	// D[7:6]: ADC reference BW
	// D[5]: amp fast settle
	// D[4]: amp Vref enable
	// D[3:2]: ADC comparator bias
	// D[1:0]: ADC comparator select
	p->adc_reference_bw = 3;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	609a      	str	r2, [r3, #8]
	p->amp_fast_settle = 0;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
	p->amp_vref_enable = 1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	60da      	str	r2, [r3, #12]
	p->adc_comparator_bias = 3;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	611a      	str	r2, [r3, #16]
	p->adc_comparator_select = 2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	615a      	str	r2, [r3, #20]

	// Register 1: Supply Sensor and ADC Buffer Bias Current
	// D[7]: X (No Function)
	// D[6]: VDD sense enable
	// D[5:0]: ADC buffer bias (set below in set_biases_based_on_sample_rate)
	p->vdd_sense_enable = 1;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	619a      	str	r2, [r3, #24]

	// Register 2: MUX Bias Current
	// D[7:6]: X (No Function)
	// D[5:0]: MUX bias (set below in set_biases_based_on_sample_rate)
	set_biases_based_on_sample_rate(&p->adc_buffer_bias, &p->mux_bias, p->sample_rate);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f103 021c 	add.w	r2, r3, #28
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f103 0120 	add.w	r1, r3, #32
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	ed93 7b00 	vldr	d7, [r3]
 8002f40:	eeb0 0a47 	vmov.f32	s0, s14
 8002f44:	eef0 0a67 	vmov.f32	s1, s15
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f000 f865 	bl	8003018 <set_biases_based_on_sample_rate>
	// D[4]: tempS2
	// D[3]: tempS1
	// D[2]: tempen
	// D[1]: digout HiZ
	// D[0]: digout
	p->mux_load = 0;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	625a      	str	r2, [r3, #36]	@ 0x24
	p->temp_S1 = 0;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	629a      	str	r2, [r3, #40]	@ 0x28
	p->temp_S2 = 0;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	p->temp_en = 0;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	@ 0x30
	set_DigOut_hiZ(p);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff f812 	bl	8001f90 <set_DigOut_hiZ>
	// D[7]: weak MISO
	// D[6]: twoscomp
	// D[5]: absmode
	// D[4]: DSPen
	// D[3:0]: DSP cutoff freq
	p->weak_miso = 1;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	63da      	str	r2, [r3, #60]	@ 0x3c
	p->twos_comp = 0;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	641a      	str	r2, [r3, #64]	@ 0x40
	p->abs_mode = 0;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
	p->DSP_en = 1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	649a      	str	r2, [r3, #72]	@ 0x48
	set_DSP_cutoff_freq(p, 1.0);
 8002f84:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8003008 <set_default_rhd_settings+0x108>
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff f811 	bl	8001fb0 <set_DSP_cutoff_freq>
	// D[5]: Zcheck load
	// D[4:3]: Zcheck scale
	// D[2]: Zcheck conn all
	// D[1]: Zcheck sel pol
	// D[0]: Zcheck en
	p->zcheck_DAC_power = 1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	651a      	str	r2, [r3, #80]	@ 0x50
	p->zcheck_load = 0;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	655a      	str	r2, [r3, #84]	@ 0x54
	set_zcheck_scale(p, ZcheckCs100fF);
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff f8ed 	bl	800217c <set_zcheck_scale>
	p->zcheck_conn_all = 0;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
	set_zcheck_polarity(p, ZcheckPositiveInput);
 8002fa8:	2100      	movs	r1, #0
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff f908 	bl	80021c0 <set_zcheck_polarity>
	p->zcheck_en = 0;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	665a      	str	r2, [r3, #100]	@ 0x64
	// D[7:0]: Zcheck DAC

	// Register 7: Impedance Check Amplifier Select
	// D[7:6]: X (No Function)
	// D[5:0]: Zcheck select
	set_zcheck_channel(p, 0);
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff f916 	bl	80021ea <set_zcheck_channel>

	// Registers 8-13: On-Chip Amplifier Bandwidth Select
	// R[8]D[7]: offchip RH1
	// R[8]D[6]: X (No Function)
	// R[8]D[5:0]: RH1 DAC1
	p->off_chip_RH1 = 0;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	66da      	str	r2, [r3, #108]	@ 0x6c

	// R[9]D[7]: ADC aux1 en
	// R[9]D[6:5]: X (No Function)
	// R[9]D[4:0] RH1 DAC2
	p->adc_Aux1_en = 1;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	679a      	str	r2, [r3, #120]	@ 0x78

	// R[10]D[7]: offchip RH2
	// R[10]D[6]: X (No Function)
	// R[10]D[5:0]: RH2 DAC1
	p->off_chip_RH2 = 0;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	671a      	str	r2, [r3, #112]	@ 0x70

	// R[11]D[7]: ADC2 aux2 en
	// R[11]D[6:5]: X (No Function)
	// R[11]D[4:0]: RH2 DAC2
	p->adc_Aux2_en = 1;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	67da      	str	r2, [r3, #124]	@ 0x7c

	// R[12]D[7]: offchip RL
	// R[12]D[6:0]: RL DAC1
	p->off_chip_RL = 0;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	675a      	str	r2, [r3, #116]	@ 0x74

	// R[13]D[7]: ADC3 aux3 en
	// R[13]D[6]: RL DAC3
	// R[13]D[5:0]: RL DAC2
	p->adc_Aux3_en = 1;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	set_upper_bandwidth(p, 7500.0);
 8002fe4:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8003010 <set_default_rhd_settings+0x110>
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff f935 	bl	8002258 <set_upper_bandwidth>
	set_lower_bandwidth(p, 1.0);
 8002fee:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 8003008 <set_default_rhd_settings+0x108>
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff faac 	bl	8002550 <set_lower_bandwidth>
	// Register 14-17: Individual Amplifier Power
	// R[14]D[7:0]: apwr[7:0]
	// R[15]D[7:0]: apwr[15:8]
	// R[16]D[7:0]: apwr[23:16]
	// R[17]D[7:0]: apwr[31:0]
	power_up_all_amps(p);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff f910 	bl	800221e <power_up_all_amps>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	00000000 	.word	0x00000000
 800300c:	3ff00000 	.word	0x3ff00000
 8003010:	00000000 	.word	0x00000000
 8003014:	40bd4c00 	.word	0x40bd4c00

08003018 <set_biases_based_on_sample_rate>:


// Determine suitable ADC buffer bias and mux bias values based on provided sample rate.
void set_biases_based_on_sample_rate(int *adc_buffer_bias, int *mux_bias, const double sample_rate)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	ed87 0b00 	vstr	d0, [r7]
	double adc_sampling_rate = (CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) * sample_rate;
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	4b5b      	ldr	r3, [pc, #364]	@ (8003198 <set_biases_based_on_sample_rate+0x180>)
 800302c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003030:	f7fd faea 	bl	8000608 <__aeabi_dmul>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (adc_sampling_rate <= 120000.0) {
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	4b56      	ldr	r3, [pc, #344]	@ (800319c <set_biases_based_on_sample_rate+0x184>)
 8003042:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003046:	f7fd fd5b 	bl	8000b00 <__aeabi_dcmple>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <set_biases_based_on_sample_rate+0x46>
		*adc_buffer_bias = 32;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2228      	movs	r2, #40	@ 0x28
 800305a:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
	} else {
		*adc_buffer_bias = 2;
		*mux_bias = 4;
	}
}
 800305c:	e07c      	b.n	8003158 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 140000.0) {
 800305e:	a340      	add	r3, pc, #256	@ (adr r3, 8003160 <set_biases_based_on_sample_rate+0x148>)
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003068:	f7fd fd4a 	bl	8000b00 <__aeabi_dcmple>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <set_biases_based_on_sample_rate+0x68>
		*adc_buffer_bias = 16;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2210      	movs	r2, #16
 8003076:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2228      	movs	r2, #40	@ 0x28
 800307c:	601a      	str	r2, [r3, #0]
}
 800307e:	e06b      	b.n	8003158 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 175000.0) {
 8003080:	a339      	add	r3, pc, #228	@ (adr r3, 8003168 <set_biases_based_on_sample_rate+0x150>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800308a:	f7fd fd39 	bl	8000b00 <__aeabi_dcmple>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <set_biases_based_on_sample_rate+0x8a>
		*adc_buffer_bias = 8;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2208      	movs	r2, #8
 8003098:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2228      	movs	r2, #40	@ 0x28
 800309e:	601a      	str	r2, [r3, #0]
}
 80030a0:	e05a      	b.n	8003158 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 220000.0) {
 80030a2:	a333      	add	r3, pc, #204	@ (adr r3, 8003170 <set_biases_based_on_sample_rate+0x158>)
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030ac:	f7fd fd28 	bl	8000b00 <__aeabi_dcmple>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d006      	beq.n	80030c4 <set_biases_based_on_sample_rate+0xac>
		*adc_buffer_bias = 8;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2208      	movs	r2, #8
 80030ba:	601a      	str	r2, [r3, #0]
		*mux_bias = 32;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2220      	movs	r2, #32
 80030c0:	601a      	str	r2, [r3, #0]
}
 80030c2:	e049      	b.n	8003158 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 280000.0) {
 80030c4:	a32c      	add	r3, pc, #176	@ (adr r3, 8003178 <set_biases_based_on_sample_rate+0x160>)
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030ce:	f7fd fd17 	bl	8000b00 <__aeabi_dcmple>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <set_biases_based_on_sample_rate+0xce>
		*adc_buffer_bias = 8;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2208      	movs	r2, #8
 80030dc:	601a      	str	r2, [r3, #0]
		*mux_bias = 26;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	221a      	movs	r2, #26
 80030e2:	601a      	str	r2, [r3, #0]
}
 80030e4:	e038      	b.n	8003158 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 350000.0) {
 80030e6:	a326      	add	r3, pc, #152	@ (adr r3, 8003180 <set_biases_based_on_sample_rate+0x168>)
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030f0:	f7fd fd06 	bl	8000b00 <__aeabi_dcmple>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <set_biases_based_on_sample_rate+0xf0>
		*adc_buffer_bias = 4;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2204      	movs	r2, #4
 80030fe:	601a      	str	r2, [r3, #0]
		*mux_bias = 18;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2212      	movs	r2, #18
 8003104:	601a      	str	r2, [r3, #0]
}
 8003106:	e027      	b.n	8003158 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 440000.0) {
 8003108:	a31f      	add	r3, pc, #124	@ (adr r3, 8003188 <set_biases_based_on_sample_rate+0x170>)
 800310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003112:	f7fd fcf5 	bl	8000b00 <__aeabi_dcmple>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d006      	beq.n	800312a <set_biases_based_on_sample_rate+0x112>
		*adc_buffer_bias = 3;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2203      	movs	r2, #3
 8003120:	601a      	str	r2, [r3, #0]
		*mux_bias = 16;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2210      	movs	r2, #16
 8003126:	601a      	str	r2, [r3, #0]
}
 8003128:	e016      	b.n	8003158 <set_biases_based_on_sample_rate+0x140>
	} else if (adc_sampling_rate <= 525000.0) {
 800312a:	a319      	add	r3, pc, #100	@ (adr r3, 8003190 <set_biases_based_on_sample_rate+0x178>)
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003134:	f7fd fce4 	bl	8000b00 <__aeabi_dcmple>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d006      	beq.n	800314c <set_biases_based_on_sample_rate+0x134>
		*adc_buffer_bias = 3;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2203      	movs	r2, #3
 8003142:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2207      	movs	r2, #7
 8003148:	601a      	str	r2, [r3, #0]
}
 800314a:	e005      	b.n	8003158 <set_biases_based_on_sample_rate+0x140>
		*adc_buffer_bias = 2;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2202      	movs	r2, #2
 8003150:	601a      	str	r2, [r3, #0]
		*mux_bias = 4;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2204      	movs	r2, #4
 8003156:	601a      	str	r2, [r3, #0]
}
 8003158:	bf00      	nop
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	00000000 	.word	0x00000000
 8003164:	41011700 	.word	0x41011700
 8003168:	00000000 	.word	0x00000000
 800316c:	41055cc0 	.word	0x41055cc0
 8003170:	00000000 	.word	0x00000000
 8003174:	410adb00 	.word	0x410adb00
 8003178:	00000000 	.word	0x00000000
 800317c:	41111700 	.word	0x41111700
 8003180:	00000000 	.word	0x00000000
 8003184:	41155cc0 	.word	0x41155cc0
 8003188:	00000000 	.word	0x00000000
 800318c:	411adb00 	.word	0x411adb00
 8003190:	00000000 	.word	0x00000000
 8003194:	41200590 	.word	0x41200590
 8003198:	40418000 	.word	0x40418000
 800319c:	40fd4c00 	.word	0x40fd4c00

080031a0 <get_register_value>:


// Return the value of a selected RAM register (0-17) on the RHD2000 chip,
// based on the current register variables in RHDConfigParameters.
uint16_t get_register_value(RHDConfigParameters *p, int reg)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
	int regout;
	const int ZcheckDac = 128;  // midrange
 80031aa:	2380      	movs	r3, #128	@ 0x80
 80031ac:	60bb      	str	r3, [r7, #8]

	switch (reg) {
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b11      	cmp	r3, #17
 80031b2:	f200 816f 	bhi.w	8003494 <get_register_value+0x2f4>
 80031b6:	a201      	add	r2, pc, #4	@ (adr r2, 80031bc <get_register_value+0x1c>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	08003205 	.word	0x08003205
 80031c0:	0800322f 	.word	0x0800322f
 80031c4:	0800323f 	.word	0x0800323f
 80031c8:	08003247 	.word	0x08003247
 80031cc:	08003277 	.word	0x08003277
 80031d0:	0800329f 	.word	0x0800329f
 80031d4:	080032cf 	.word	0x080032cf
 80031d8:	080032d5 	.word	0x080032d5
 80031dc:	080032dd 	.word	0x080032dd
 80031e0:	080032ef 	.word	0x080032ef
 80031e4:	08003301 	.word	0x08003301
 80031e8:	08003313 	.word	0x08003313
 80031ec:	08003325 	.word	0x08003325
 80031f0:	08003337 	.word	0x08003337
 80031f4:	08003355 	.word	0x08003355
 80031f8:	080033a5 	.word	0x080033a5
 80031fc:	080033f5 	.word	0x080033f5
 8003200:	08003445 	.word	0x08003445
	case 0:
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	019a      	lsls	r2, r3, #6
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8003210:	015b      	lsls	r3, r3, #5
 8003212:	441a      	add	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	009b      	lsls	r3, r3, #2
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8003222:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8003228:	4413      	add	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
		break;
 800322c:	e134      	b.n	8003498 <get_register_value+0x2f8>

	case 1:
		regout = (p->vdd_sense_enable << 6) + p->adc_buffer_bias;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	019a      	lsls	r2, r3, #6
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	4413      	add	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
		break;
 800323c:	e12c      	b.n	8003498 <get_register_value+0x2f8>

	case 2:
		regout = p->mux_bias;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	60fb      	str	r3, [r7, #12]
		break;
 8003244:	e128      	b.n	8003498 <get_register_value+0x2f8>

	case 3:
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	441a      	add	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	441a      	add	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003268:	005b      	lsls	r3, r3, #1
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 800326a:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8003270:	4413      	add	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
		break;
 8003274:	e110      	b.n	8003498 <get_register_value+0x2f8>

	case 4:
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327a:	01da      	lsls	r2, r3, #7
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	441a      	add	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003288:	015b      	lsls	r3, r3, #5
 800328a:	441a      	add	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	441a      	add	r2, r3
			(p->DSP_cutoff_freq);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8003298:	4413      	add	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
		break;
 800329c:	e0fc      	b.n	8003498 <get_register_value+0x2f8>

	case 5:
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a2:	019a      	lsls	r2, r3, #6
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a8:	015b      	lsls	r3, r3, #5
 80032aa:	441a      	add	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	009b      	lsls	r3, r3, #2
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 80032ba:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	441a      	add	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 80032c8:	4413      	add	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
		break;
 80032cc:	e0e4      	b.n	8003498 <get_register_value+0x2f8>

	case 6:
		regout = ZcheckDac;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	60fb      	str	r3, [r7, #12]
		break;
 80032d2:	e0e1      	b.n	8003498 <get_register_value+0x2f8>

	case 7:
		regout = p->zcheck_select;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032d8:	60fb      	str	r3, [r7, #12]
		break;
 80032da:	e0dd      	b.n	8003498 <get_register_value+0x2f8>

	case 8:
		regout = (p->off_chip_RH1 << 7) + p->rH1_DAC1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032e0:	01da      	lsls	r2, r3, #7
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032e8:	4413      	add	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
		break;
 80032ec:	e0d4      	b.n	8003498 <get_register_value+0x2f8>

	case 9:
		regout = (p->adc_Aux1_en << 7) + p->rH1_DAC2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032f2:	01da      	lsls	r2, r3, #7
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fa:	4413      	add	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
		break;
 80032fe:	e0cb      	b.n	8003498 <get_register_value+0x2f8>

	case 10:
		regout = (p->off_chip_RH2 << 7) + p->rH2_DAC1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003304:	01da      	lsls	r2, r3, #7
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800330c:	4413      	add	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
		break;
 8003310:	e0c2      	b.n	8003498 <get_register_value+0x2f8>

	case 11:
		regout = (p->adc_Aux2_en << 7) + p->rH2_DAC2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003316:	01da      	lsls	r2, r3, #7
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331e:	4413      	add	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
		break;
 8003322:	e0b9      	b.n	8003498 <get_register_value+0x2f8>

	case 12:
		regout = (p->off_chip_RL << 7) + p->rL_DAC1;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003328:	01da      	lsls	r2, r3, #7
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003330:	4413      	add	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
		break;
 8003334:	e0b0      	b.n	8003498 <get_register_value+0x2f8>

	case 13:
		regout = (p->adc_Aux3_en << 7) + (p->rL_DAC3 << 6) + p->rL_DAC2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800333c:	01da      	lsls	r2, r3, #7
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	441a      	add	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800334e:	4413      	add	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
		break;
 8003352:	e0a1      	b.n	8003498 <get_register_value+0x2f8>

	case 14:
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800335a:	01da      	lsls	r2, r3, #7
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003362:	019b      	lsls	r3, r3, #6
 8003364:	441a      	add	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800336c:	015b      	lsls	r3, r3, #5
 800336e:	441a      	add	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003380:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8003382:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	441a      	add	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 800339e:	4413      	add	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
		break;
 80033a2:	e079      	b.n	8003498 <get_register_value+0x2f8>

	case 15:
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80033aa:	01da      	lsls	r2, r3, #7
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033b2:	019b      	lsls	r3, r3, #6
 80033b4:	441a      	add	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80033bc:	015b      	lsls	r3, r3, #5
 80033be:	441a      	add	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80033d0:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 80033d2:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	441a      	add	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	441a      	add	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 80033ee:	4413      	add	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
		break;
 80033f2:	e051      	b.n	8003498 <get_register_value+0x2f8>

	case 16:
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80033fa:	01da      	lsls	r2, r3, #7
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003402:	019b      	lsls	r3, r3, #6
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800340c:	015b      	lsls	r3, r3, #5
 800340e:	441a      	add	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003420:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8003422:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	441a      	add	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	441a      	add	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 800343e:	4413      	add	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
		break;
 8003442:	e029      	b.n	8003498 <get_register_value+0x2f8>

	case 17:
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800344a:	01da      	lsls	r2, r3, #7
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003452:	019b      	lsls	r3, r3, #6
 8003454:	441a      	add	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800345c:	015b      	lsls	r3, r3, #5
 800345e:	441a      	add	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003470:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8003472:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	441a      	add	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	441a      	add	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 800348e:	4413      	add	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
		break;
 8003492:	e001      	b.n	8003498 <get_register_value+0x2f8>

	default:
		regout = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
	}
	return regout;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	b29b      	uxth	r3, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <convert_command>:
// A special case with channel = 63 can be used to cycle through successive amplifier channels,
// so long as at least one defined-channel convert command is called first.
// Once sent, SPI returns (2 commands later) the 16-bit result of this conversion.
// Command: 00_C[5]-C[0]_0000000H for channel C and hBit H
// Result:  A[15]-A[0] for ADC conversion output A
uint16_t convert_command(uint8_t channel, uint8_t h_bit) {
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	460a      	mov	r2, r1
 80034b2:	71fb      	strb	r3, [r7, #7]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71bb      	strb	r3, [r7, #6]
	const uint16_t convert_mask = 0b0000000000000000;
 80034b8:	2300      	movs	r3, #0
 80034ba:	81fb      	strh	r3, [r7, #14]
	const uint16_t channel_mask = channel << 8;
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	81bb      	strh	r3, [r7, #12]
	const uint16_t h_bit_mask = (uint16_t) h_bit;
 80034c4:	79bb      	ldrb	r3, [r7, #6]
 80034c6:	817b      	strh	r3, [r7, #10]
	return convert_mask | channel_mask | h_bit_mask;
 80034c8:	89fa      	ldrh	r2, [r7, #14]
 80034ca:	89bb      	ldrh	r3, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	897b      	ldrh	r3, [r7, #10]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	b29b      	uxth	r3, r3
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <calibrate_command>:
// These dummy commands are not executed (unless another calibration command is sent, which resets the process).
// During the entire 9-command process, the results are all 0s except the for the MSB.
// The MSB will be 0 if 2's complement mode is enabled (see Register 4), otherwise it will be 1.
// Command: 01010101_00000000
// Result:  *0000000_00000000 where * depends on 2's complement mode
uint16_t calibrate_command() {
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0
	return 0b0101010100000000;
 80034e6:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <write_command>:
// echoed data that was written (to verify reception of correct data).
// Any attempt to write to a read-only register (or non-existent register) will produce this same result,
// but data will not be written to that register.
// Command: 10_R[5]-R[0]_D[7]-D[0]
// Result:  11111111_D[7]-D[0]
uint16_t write_command(uint8_t reg_addr, uint8_t data) {
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	460a      	mov	r2, r1
 80034fe:	71fb      	strb	r3, [r7, #7]
 8003500:	4613      	mov	r3, r2
 8003502:	71bb      	strb	r3, [r7, #6]
	const uint16_t read_mask = 0b1000000000000000;
 8003504:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003508:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	b29b      	uxth	r3, r3
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask | (uint16_t) data;
 8003512:	89fa      	ldrh	r2, [r7, #14]
 8003514:	89bb      	ldrh	r3, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	b29a      	uxth	r2, r3
 800351a:	79bb      	ldrb	r3, [r7, #6]
 800351c:	b29b      	uxth	r3, r3
 800351e:	4313      	orrs	r3, r2
 8003520:	b29b      	uxth	r3, r3
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <read_command>:

// Read contents of register.
// Once sent, SPI returns (2 commands later) 8 MSBs of 0s, and 8 LSBs of the read data.
// Command: 11_R[5]-R[0]_00000000
// Result:  00000000_D[7]-D[0]
uint16_t read_command(uint8_t reg_addr) {
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	71fb      	strb	r3, [r7, #7]
	const uint16_t read_mask = 0b1100000000000000;
 8003538:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800353c:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	b29b      	uxth	r3, r3
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask;
 8003546:	89fa      	ldrh	r2, [r7, #14]
 8003548:	89bb      	ldrh	r3, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	b29b      	uxth	r3, r3
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_MspInit+0x30>)
 8003564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003568:	4a08      	ldr	r2, [pc, #32]	@ (800358c <HAL_MspInit+0x30>)
 800356a:	f043 0304 	orr.w	r3, r3, #4
 800356e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003572:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_MspInit+0x30>)
 8003574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8003580:	f002 fa02 	bl	8005988 <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	46020c00 	.word	0x46020c00

08003590 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b0c2      	sub	sp, #264	@ 0x108
 8003594:	af00      	add	r7, sp, #0
 8003596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800359a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800359e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035b0:	f107 0318 	add.w	r3, r7, #24
 80035b4:	22d8      	movs	r2, #216	@ 0xd8
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f00a f91d 	bl	800d7f8 <memset>
  if(hspi->Instance==SPI3)
 80035be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a8a      	ldr	r2, [pc, #552]	@ (80037f4 <HAL_SPI_MspInit+0x264>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	f040 810b 	bne.w	80037e8 <HAL_SPI_MspInit+0x258>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80035d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PCLK3;
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035e4:	f107 0318 	add.w	r3, r7, #24
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 fc99 	bl	8006f20 <HAL_RCCEx_PeriphCLKConfig>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 80035f4:	f7fe f856 	bl	80016a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80035f8:	4b7f      	ldr	r3, [pc, #508]	@ (80037f8 <HAL_SPI_MspInit+0x268>)
 80035fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035fe:	4a7e      	ldr	r2, [pc, #504]	@ (80037f8 <HAL_SPI_MspInit+0x268>)
 8003600:	f043 0320 	orr.w	r3, r3, #32
 8003604:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003608:	4b7b      	ldr	r3, [pc, #492]	@ (80037f8 <HAL_SPI_MspInit+0x268>)
 800360a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003616:	4b78      	ldr	r3, [pc, #480]	@ (80037f8 <HAL_SPI_MspInit+0x268>)
 8003618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800361c:	4a76      	ldr	r2, [pc, #472]	@ (80037f8 <HAL_SPI_MspInit+0x268>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003626:	4b74      	ldr	r3, [pc, #464]	@ (80037f8 <HAL_SPI_MspInit+0x268>)
 8003628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003634:	4b70      	ldr	r3, [pc, #448]	@ (80037f8 <HAL_SPI_MspInit+0x268>)
 8003636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800363a:	4a6f      	ldr	r2, [pc, #444]	@ (80037f8 <HAL_SPI_MspInit+0x268>)
 800363c:	f043 0304 	orr.w	r3, r3, #4
 8003640:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003644:	4b6c      	ldr	r3, [pc, #432]	@ (80037f8 <HAL_SPI_MspInit+0x268>)
 8003646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003652:	2310      	movs	r3, #16
 8003654:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003658:	2302      	movs	r3, #2
 800365a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003664:	2303      	movs	r3, #3
 8003666:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800366a:	2306      	movs	r3, #6
 800366c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003670:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003674:	4619      	mov	r1, r3
 8003676:	4861      	ldr	r0, [pc, #388]	@ (80037fc <HAL_SPI_MspInit+0x26c>)
 8003678:	f001 fe8a 	bl	8005390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800367c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003680:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003684:	2302      	movs	r3, #2
 8003686:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003690:	2303      	movs	r3, #3
 8003692:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003696:	2306      	movs	r3, #6
 8003698:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80036a0:	4619      	mov	r1, r3
 80036a2:	4857      	ldr	r0, [pc, #348]	@ (8003800 <HAL_SPI_MspInit+0x270>)
 80036a4:	f001 fe74 	bl	8005390 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* GPDMA1_REQUEST_SPI3_RX Init */
    handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 80036a8:	4b56      	ldr	r3, [pc, #344]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036aa:	4a57      	ldr	r2, [pc, #348]	@ (8003808 <HAL_SPI_MspInit+0x278>)
 80036ac:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel13.Init.Request = GPDMA1_REQUEST_SPI3_RX;
 80036ae:	4b55      	ldr	r3, [pc, #340]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036b0:	220a      	movs	r2, #10
 80036b2:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel13.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80036b4:	4b53      	ldr	r3, [pc, #332]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel13.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ba:	4b52      	ldr	r3, [pc, #328]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036bc:	2200      	movs	r2, #0
 80036be:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel13.Init.SrcInc = DMA_SINC_FIXED;
 80036c0:	4b50      	ldr	r3, [pc, #320]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel13.Init.DestInc = DMA_DINC_INCREMENTED;
 80036c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80036cc:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel13.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80036ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel13.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80036d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80036da:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel13.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80036dc:	4b49      	ldr	r3, [pc, #292]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036de:	2200      	movs	r2, #0
 80036e0:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel13.Init.SrcBurstLength = 1;
 80036e2:	4b48      	ldr	r3, [pc, #288]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel13.Init.DestBurstLength = 1;
 80036e8:	4b46      	ldr	r3, [pc, #280]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel13.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80036ee:	4b45      	ldr	r3, [pc, #276]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel13.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80036f4:	4b43      	ldr	r3, [pc, #268]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel13.Init.Mode = DMA_NORMAL;
 80036fa:	4b42      	ldr	r3, [pc, #264]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 8003700:	4840      	ldr	r0, [pc, #256]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 8003702:	f000 ff01 	bl	8004508 <HAL_DMA_Init>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_SPI_MspInit+0x180>
    {
      Error_Handler();
 800370c:	f7fd ffca 	bl	80016a4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel13);
 8003710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a3a      	ldr	r2, [pc, #232]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 800371c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003720:	4a38      	ldr	r2, [pc, #224]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 8003722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 800372e:	2110      	movs	r1, #16
 8003730:	4834      	ldr	r0, [pc, #208]	@ (8003804 <HAL_SPI_MspInit+0x274>)
 8003732:	f001 fa87 	bl	8004c44 <HAL_DMA_ConfigChannelAttributes>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_SPI_MspInit+0x1b0>
    {
      Error_Handler();
 800373c:	f7fd ffb2 	bl	80016a4 <Error_Handler>
    }

    /* GPDMA1_REQUEST_SPI3_TX Init */
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8003740:	4b32      	ldr	r3, [pc, #200]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 8003742:	4a33      	ldr	r2, [pc, #204]	@ (8003810 <HAL_SPI_MspInit+0x280>)
 8003744:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_SPI3_TX;
 8003746:	4b31      	ldr	r3, [pc, #196]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 8003748:	220b      	movs	r2, #11
 800374a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800374c:	4b2f      	ldr	r3, [pc, #188]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003752:	4b2e      	ldr	r3, [pc, #184]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 8003754:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003758:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_INCREMENTED;
 800375a:	4b2c      	ldr	r3, [pc, #176]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 800375c:	2208      	movs	r2, #8
 800375e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_FIXED;
 8003760:	4b2a      	ldr	r3, [pc, #168]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 8003762:	2200      	movs	r2, #0
 8003764:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8003766:	4b29      	ldr	r3, [pc, #164]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 8003768:	2201      	movs	r2, #1
 800376a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800376c:	4b27      	ldr	r3, [pc, #156]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 800376e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003772:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8003774:	4b25      	ldr	r3, [pc, #148]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 8003776:	2200      	movs	r2, #0
 8003778:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 800377a:	4b24      	ldr	r3, [pc, #144]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 800377c:	2201      	movs	r2, #1
 800377e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 8003780:	4b22      	ldr	r3, [pc, #136]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 8003782:	2201      	movs	r2, #1
 8003784:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8003786:	4b21      	ldr	r3, [pc, #132]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 8003788:	2200      	movs	r2, #0
 800378a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800378c:	4b1f      	ldr	r3, [pc, #124]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 8003792:	4b1e      	ldr	r3, [pc, #120]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 8003794:	2200      	movs	r2, #0
 8003796:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8003798:	481c      	ldr	r0, [pc, #112]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 800379a:	f000 feb5 	bl	8004508 <HAL_DMA_Init>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_SPI_MspInit+0x218>
    {
      Error_Handler();
 80037a4:	f7fd ff7e 	bl	80016a4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel12);
 80037a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a16      	ldr	r2, [pc, #88]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 80037b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80037b8:	4a14      	ldr	r2, [pc, #80]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 80037ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 80037c6:	2110      	movs	r1, #16
 80037c8:	4810      	ldr	r0, [pc, #64]	@ (800380c <HAL_SPI_MspInit+0x27c>)
 80037ca:	f001 fa3b 	bl	8004c44 <HAL_DMA_ConfigChannelAttributes>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_SPI_MspInit+0x248>
    {
      Error_Handler();
 80037d4:	f7fd ff66 	bl	80016a4 <Error_Handler>
    }

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80037d8:	2200      	movs	r2, #0
 80037da:	2100      	movs	r1, #0
 80037dc:	2063      	movs	r0, #99	@ 0x63
 80037de:	f000 fdb7 	bl	8004350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80037e2:	2063      	movs	r0, #99	@ 0x63
 80037e4:	f000 fdce 	bl	8004384 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80037e8:	bf00      	nop
 80037ea:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	46002000 	.word	0x46002000
 80037f8:	46020c00 	.word	0x46020c00
 80037fc:	42020000 	.word	0x42020000
 8003800:	42020800 	.word	0x42020800
 8003804:	20000134 	.word	0x20000134
 8003808:	400206d0 	.word	0x400206d0
 800380c:	200001ac 	.word	0x200001ac
 8003810:	40020650 	.word	0x40020650

08003814 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0e      	ldr	r2, [pc, #56]	@ (800385c <HAL_TIM_OC_MspInit+0x48>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d116      	bne.n	8003854 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <HAL_TIM_OC_MspInit+0x4c>)
 8003828:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800382c:	4a0c      	ldr	r2, [pc, #48]	@ (8003860 <HAL_TIM_OC_MspInit+0x4c>)
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003836:	4b0a      	ldr	r3, [pc, #40]	@ (8003860 <HAL_TIM_OC_MspInit+0x4c>)
 8003838:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003844:	2200      	movs	r2, #0
 8003846:	2100      	movs	r1, #0
 8003848:	202e      	movs	r0, #46	@ 0x2e
 800384a:	f000 fd81 	bl	8004350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800384e:	202e      	movs	r0, #46	@ 0x2e
 8003850:	f000 fd98 	bl	8004384 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40000400 	.word	0x40000400
 8003860:	46020c00 	.word	0x46020c00

08003864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b0c2      	sub	sp, #264	@ 0x108
 8003868:	af00      	add	r7, sp, #0
 800386a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800386e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003872:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003884:	f107 0318 	add.w	r3, r7, #24
 8003888:	22d8      	movs	r2, #216	@ 0xd8
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f009 ffb3 	bl	800d7f8 <memset>
  if(huart->Instance==USART1)
 8003892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a87      	ldr	r2, [pc, #540]	@ (8003abc <HAL_UART_MspInit+0x258>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	f040 80b0 	bne.w	8003a06 <HAL_UART_MspInit+0x1a2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038a6:	f04f 0201 	mov.w	r2, #1
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038b2:	2300      	movs	r3, #0
 80038b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038b6:	f107 0318 	add.w	r3, r7, #24
 80038ba:	4618      	mov	r0, r3
 80038bc:	f003 fb30 	bl	8006f20 <HAL_RCCEx_PeriphCLKConfig>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80038c6:	f7fd feed 	bl	80016a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038ca:	4b7d      	ldr	r3, [pc, #500]	@ (8003ac0 <HAL_UART_MspInit+0x25c>)
 80038cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038d0:	4a7b      	ldr	r2, [pc, #492]	@ (8003ac0 <HAL_UART_MspInit+0x25c>)
 80038d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038d6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80038da:	4b79      	ldr	r3, [pc, #484]	@ (8003ac0 <HAL_UART_MspInit+0x25c>)
 80038dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e8:	4b75      	ldr	r3, [pc, #468]	@ (8003ac0 <HAL_UART_MspInit+0x25c>)
 80038ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038ee:	4a74      	ldr	r2, [pc, #464]	@ (8003ac0 <HAL_UART_MspInit+0x25c>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80038f8:	4b71      	ldr	r3, [pc, #452]	@ (8003ac0 <HAL_UART_MspInit+0x25c>)
 80038fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin;
 8003906:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800390a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390e:	2302      	movs	r3, #2
 8003910:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800391a:	2303      	movs	r3, #3
 800391c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003920:	2307      	movs	r3, #7
 8003922:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(T_VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003926:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800392a:	4619      	mov	r1, r3
 800392c:	4865      	ldr	r0, [pc, #404]	@ (8003ac4 <HAL_UART_MspInit+0x260>)
 800392e:	f001 fd2f 	bl	8005390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003936:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393a:	2302      	movs	r3, #2
 800393c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003946:	2300      	movs	r3, #0
 8003948:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800394c:	2307      	movs	r3, #7
 800394e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003952:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003956:	4619      	mov	r1, r3
 8003958:	485a      	ldr	r0, [pc, #360]	@ (8003ac4 <HAL_UART_MspInit+0x260>)
 800395a:	f001 fd19 	bl	8005390 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800395e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 8003960:	4a5a      	ldr	r2, [pc, #360]	@ (8003acc <HAL_UART_MspInit+0x268>)
 8003962:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8003964:	4b58      	ldr	r3, [pc, #352]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 8003966:	2219      	movs	r2, #25
 8003968:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800396a:	4b57      	ldr	r3, [pc, #348]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003970:	4b55      	ldr	r3, [pc, #340]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 8003972:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003976:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8003978:	4b53      	ldr	r3, [pc, #332]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 800397a:	2208      	movs	r2, #8
 800397c:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 800397e:	4b52      	ldr	r3, [pc, #328]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 8003980:	2200      	movs	r2, #0
 8003982:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8003984:	4b50      	ldr	r3, [pc, #320]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 8003986:	2200      	movs	r2, #0
 8003988:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800398a:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 800398c:	2200      	movs	r2, #0
 800398e:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_HIGH_PRIORITY;
 8003990:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 8003992:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003996:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8003998:	4b4b      	ldr	r3, [pc, #300]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 800399a:	2201      	movs	r2, #1
 800399c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 800399e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80039a4:	4b48      	ldr	r3, [pc, #288]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80039aa:	4b47      	ldr	r3, [pc, #284]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80039b0:	4b45      	ldr	r3, [pc, #276]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80039b6:	4844      	ldr	r0, [pc, #272]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 80039b8:	f000 fda6 	bl	8004508 <HAL_DMA_Init>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80039c2:	f7fd fe6f 	bl	80016a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel0);
 80039c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a3d      	ldr	r2, [pc, #244]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 80039d2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80039d4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 80039d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80039e2:	2110      	movs	r1, #16
 80039e4:	4838      	ldr	r0, [pc, #224]	@ (8003ac8 <HAL_UART_MspInit+0x264>)
 80039e6:	f001 f92d 	bl	8004c44 <HAL_DMA_ConfigChannelAttributes>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_UART_MspInit+0x190>
    {
      Error_Handler();
 80039f0:	f7fd fe58 	bl	80016a4 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2100      	movs	r1, #0
 80039f8:	203d      	movs	r0, #61	@ 0x3d
 80039fa:	f000 fca9 	bl	8004350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039fe:	203d      	movs	r0, #61	@ 0x3d
 8003a00:	f000 fcc0 	bl	8004384 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a04:	e055      	b.n	8003ab2 <HAL_UART_MspInit+0x24e>
  else if(huart->Instance==USART2)
 8003a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad0 <HAL_UART_MspInit+0x26c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d14c      	bne.n	8003ab2 <HAL_UART_MspInit+0x24e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a18:	f04f 0202 	mov.w	r2, #2
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a24:	2300      	movs	r3, #0
 8003a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a28:	f107 0318 	add.w	r3, r7, #24
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 fa77 	bl	8006f20 <HAL_RCCEx_PeriphCLKConfig>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 8003a38:	f7fd fe34 	bl	80016a4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a3c:	4b20      	ldr	r3, [pc, #128]	@ (8003ac0 <HAL_UART_MspInit+0x25c>)
 8003a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a42:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac0 <HAL_UART_MspInit+0x25c>)
 8003a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a48:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac0 <HAL_UART_MspInit+0x25c>)
 8003a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5a:	4b19      	ldr	r3, [pc, #100]	@ (8003ac0 <HAL_UART_MspInit+0x25c>)
 8003a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a60:	4a17      	ldr	r2, [pc, #92]	@ (8003ac0 <HAL_UART_MspInit+0x25c>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <HAL_UART_MspInit+0x25c>)
 8003a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a70:	f003 0201 	and.w	r2, r3, #1
 8003a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a78:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a82:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003a86:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a88:	230c      	movs	r3, #12
 8003a8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003aa0:	2307      	movs	r3, #7
 8003aa2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4805      	ldr	r0, [pc, #20]	@ (8003ac4 <HAL_UART_MspInit+0x260>)
 8003aae:	f001 fc6f 	bl	8005390 <HAL_GPIO_Init>
}
 8003ab2:	bf00      	nop
 8003ab4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40013800 	.word	0x40013800
 8003ac0:	46020c00 	.word	0x46020c00
 8003ac4:	42020000 	.word	0x42020000
 8003ac8:	20000398 	.word	0x20000398
 8003acc:	40020050 	.word	0x40020050
 8003ad0:	40004400 	.word	0x40004400

08003ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ad8:	bf00      	nop
 8003ada:	e7fd      	b.n	8003ad8 <NMI_Handler+0x4>

08003adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ae0:	bf00      	nop
 8003ae2:	e7fd      	b.n	8003ae0 <HardFault_Handler+0x4>

08003ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae8:	bf00      	nop
 8003aea:	e7fd      	b.n	8003ae8 <MemManage_Handler+0x4>

08003aec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003af0:	bf00      	nop
 8003af2:	e7fd      	b.n	8003af0 <BusFault_Handler+0x4>

08003af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <UsageFault_Handler+0x4>

08003afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SysTick_counter++;
 8003b2c:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <SysTick_Handler+0x20>)
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	1c50      	adds	r0, r2, #1
 8003b34:	f143 0100 	adc.w	r1, r3, #0
 8003b38:	4b03      	ldr	r3, [pc, #12]	@ (8003b48 <SysTick_Handler+0x20>)
 8003b3a:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b3e:	f000 fb0b 	bl	8004158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200007a8 	.word	0x200007a8

08003b4c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_usart_tx();
#endif
  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8003b50:	4802      	ldr	r0, [pc, #8]	@ (8003b5c <GPDMA1_Channel0_IRQHandler+0x10>)
 8003b52:	f000 ff0a 	bl	800496a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000398 	.word	0x20000398

08003b60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
	if (!LL_TIM_IsActiveFlag_UPDATE(INTERRUPT_TIM)) return; // Ignore any non-UPDATE events that may  have generated this interrupt
	LL_TIM_ClearFlag_UPDATE(INTERRUPT_TIM); // If this was an UPDATE event, clear the flag and proceed with interrupt routine
	sample_interrupt_routine();
#endif
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b64:	4802      	ldr	r0, [pc, #8]	@ (8003b70 <TIM3_IRQHandler+0x10>)
 8003b66:	f007 f969 	bl	800ae3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000224 	.word	0x20000224

08003b74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
#ifndef USE_HAL
	uart_interrupt_routine();
#endif
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b78:	4802      	ldr	r0, [pc, #8]	@ (8003b84 <USART1_IRQHandler+0x10>)
 8003b7a:	f008 fa47 	bl	800c00c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000270 	.word	0x20000270

08003b88 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_tx();
#endif
  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8003b8c:	4802      	ldr	r0, [pc, #8]	@ (8003b98 <GPDMA1_Channel12_IRQHandler+0x10>)
 8003b8e:	f000 feec 	bl	800496a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	200001ac 	.word	0x200001ac

08003b9c <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_rx();
#endif
  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 8003ba0:	4802      	ldr	r0, [pc, #8]	@ (8003bac <GPDMA1_Channel13_IRQHandler+0x10>)
 8003ba2:	f000 fee2 	bl	800496a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000134 	.word	0x20000134

08003bb0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine();
#endif
  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003bb4:	4802      	ldr	r0, [pc, #8]	@ (8003bc0 <SPI3_IRQHandler+0x10>)
 8003bb6:	f006 fcaf 	bl	800a518 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200000a4 	.word	0x200000a4

08003bc4 <HAL_TIM_PeriodElapsedCallback>:

#ifdef USE_HAL

// This HAL function is called when the timer reaches its counter target - execute interrupt routine when this happens
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	sample_interrupt_routine();
 8003bcc:	f7fd fd82 	bl	80016d4 <sample_interrupt_routine>
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e00a      	b.n	8003c00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bea:	f3af 8000 	nop.w
 8003bee:	4601      	mov	r1, r0
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	60ba      	str	r2, [r7, #8]
 8003bf6:	b2ca      	uxtb	r2, r1
 8003bf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	dbf0      	blt.n	8003bea <_read+0x12>
  }

  return len;
 8003c08:	687b      	ldr	r3, [r7, #4]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	e009      	b.n	8003c38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	60ba      	str	r2, [r7, #8]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	3301      	adds	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	dbf1      	blt.n	8003c24 <_write+0x12>
  }
  return len;
 8003c40:	687b      	ldr	r3, [r7, #4]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_close>:

int _close(int file)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c72:	605a      	str	r2, [r3, #4]
  return 0;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <_isatty>:

int _isatty(int file)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c8a:	2301      	movs	r3, #1
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cbc:	4a14      	ldr	r2, [pc, #80]	@ (8003d10 <_sbrk+0x5c>)
 8003cbe:	4b15      	ldr	r3, [pc, #84]	@ (8003d14 <_sbrk+0x60>)
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cc8:	4b13      	ldr	r3, [pc, #76]	@ (8003d18 <_sbrk+0x64>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cd0:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <_sbrk+0x64>)
 8003cd2:	4a12      	ldr	r2, [pc, #72]	@ (8003d1c <_sbrk+0x68>)
 8003cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cd6:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <_sbrk+0x64>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d207      	bcs.n	8003cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ce4:	f009 fde6 	bl	800d8b4 <__errno>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	220c      	movs	r2, #12
 8003cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf2:	e009      	b.n	8003d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cf4:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <_sbrk+0x64>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cfa:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <_sbrk+0x64>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	4a05      	ldr	r2, [pc, #20]	@ (8003d18 <_sbrk+0x64>)
 8003d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d06:	68fb      	ldr	r3, [r7, #12]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20270000 	.word	0x20270000
 8003d14:	00000400 	.word	0x00000400
 8003d18:	200007b0 	.word	0x200007b0
 8003d1c:	20000908 	.word	0x20000908

08003d20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d24:	4b18      	ldr	r3, [pc, #96]	@ (8003d88 <SystemInit+0x68>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2a:	4a17      	ldr	r2, [pc, #92]	@ (8003d88 <SystemInit+0x68>)
 8003d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003d34:	4b15      	ldr	r3, [pc, #84]	@ (8003d8c <SystemInit+0x6c>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003d3a:	4b14      	ldr	r3, [pc, #80]	@ (8003d8c <SystemInit+0x6c>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003d40:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <SystemInit+0x6c>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8003d46:	4b11      	ldr	r3, [pc, #68]	@ (8003d8c <SystemInit+0x6c>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d8c <SystemInit+0x6c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a0e      	ldr	r2, [pc, #56]	@ (8003d8c <SystemInit+0x6c>)
 8003d52:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8003d56:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8003d5a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <SystemInit+0x6c>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003d62:	4b0a      	ldr	r3, [pc, #40]	@ (8003d8c <SystemInit+0x6c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a09      	ldr	r2, [pc, #36]	@ (8003d8c <SystemInit+0x6c>)
 8003d68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003d6e:	4b07      	ldr	r3, [pc, #28]	@ (8003d8c <SystemInit+0x6c>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d74:	4b04      	ldr	r3, [pc, #16]	@ (8003d88 <SystemInit+0x68>)
 8003d76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003d7a:	609a      	str	r2, [r3, #8]
  #endif
}
 8003d7c:	bf00      	nop
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	e000ed00 	.word	0xe000ed00
 8003d8c:	46020c00 	.word	0x46020c00

08003d90 <loop_escape>:
#include <math.h>

// Specify condition that should result in the main while loop ending.
// By default, escape once 1 second of data has been gathered.
int loop_escape()
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
	// Escape once sample memory capacity (default 1 second of data) has been reached.
#ifdef OFFLINE_TRANSFER
	return sample_counter > per_channel_sample_memory_capacity;
 8003d94:	4b07      	ldr	r3, [pc, #28]	@ (8003db4 <loop_escape+0x24>)
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <loop_escape+0x28>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	bf8c      	ite	hi
 8003da4:	2301      	movhi	r3, #1
 8003da6:	2300      	movls	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
#else
	return 0;
#endif
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	2000049e 	.word	0x2000049e
 8003db8:	20000000 	.word	0x20000000

08003dbc <write_data_to_memory>:


// Write any desired data from this sequence to memory.
// By default, only the result corresponding to a CONVERT on FIRST_SAMPLED_CHANNEL is saved per sequence.
void write_data_to_memory()
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
#ifdef OFFLINE_TRANSFER
	// Save single sample to sample_memory array.
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	e014      	b.n	8003df2 <write_data_to_memory+0x36>
		sample_memory[(sample_counter * NUM_SAMPLED_CHANNELS) + i] = command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2];
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f103 020a 	add.w	r2, r3, #10
 8003dce:	4b11      	ldr	r3, [pc, #68]	@ (8003e14 <write_data_to_memory+0x58>)
 8003dd0:	6819      	ldr	r1, [r3, #0]
 8003dd2:	4b11      	ldr	r3, [pc, #68]	@ (8003e18 <write_data_to_memory+0x5c>)
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	0098      	lsls	r0, r3, #2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4403      	add	r3, r0
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	440b      	add	r3, r1
 8003de2:	490e      	ldr	r1, [pc, #56]	@ (8003e1c <write_data_to_memory+0x60>)
 8003de4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003de8:	b292      	uxth	r2, r2
 8003dea:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3301      	adds	r3, #1
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	dde7      	ble.n	8003dc8 <write_data_to_memory+0xc>
	}
	sample_counter++;
 8003df8:	4b07      	ldr	r3, [pc, #28]	@ (8003e18 <write_data_to_memory+0x5c>)
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	4b05      	ldr	r3, [pc, #20]	@ (8003e18 <write_data_to_memory+0x5c>)
 8003e04:	801a      	strh	r2, [r3, #0]
//	// For more advanced programs that require reading of aux command results, those would be read and saved here.
//	uint16_t aux0_result = command_sequence_MISO[34]; // Result of AUX SLOT 1 from this command sequence
//	uint16_t aux1_result = command_sequence_MISO[0];  // Result of AUX SLOT 2 from the previous command sequence
//	uint16_t aux2_result = command_sequence_MISO[1];  // Result of AUX SLOT 3 from the previous command sequence
#endif
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	200004a0 	.word	0x200004a0
 8003e18:	2000049e 	.word	0x2000049e
 8003e1c:	20000458 	.word	0x20000458

08003e20 <transmit_data_realtime>:


// Determine if data is ready to be transmitted, and if so, transmit (for example via USART).
void transmit_data_realtime()
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE; i++) {
//		command_sequence_MISO[i] = i;
//	}
	transmit_dma_to_usart(&command_sequence_MISO[FIRST_SAMPLED_CHANNEL + 2], NUM_SAMPLED_CHANNELS * sizeof(uint16_t));
#endif
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <transmit_data_offline>:


// Transmit accumulated data after acquisition has finished (for example via USART).
void transmit_data_offline()
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
	// into very small chunks seems to be the most reliable at high Baud rates.

	// We do the same thing for LL, for consistency - optimized performance is not critical for offline transfers, so there is likely
	// no significant downside to chunking data into many smaller transfers.

	uint16_t samples_per_chunk = 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	827b      	strh	r3, [r7, #18]
	uint32_t total_samples_in_memory = NUM_SAMPLED_CHANNELS * calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 8003e3a:	f7fd fdeb 	bl	8001a14 <calculate_sample_rate>
 8003e3e:	ec51 0b10 	vmov	r0, r1, d0
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	4b31      	ldr	r3, [pc, #196]	@ (8003f0c <transmit_data_offline+0xdc>)
 8003e48:	f7fc fbde 	bl	8000608 <__aeabi_dmul>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	f7fc fe88 	bl	8000b68 <__aeabi_d2uiz>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	60fb      	str	r3, [r7, #12]
	uint32_t num_chunks = floor(total_samples_in_memory / samples_per_chunk);
 8003e5c:	8a7b      	ldrh	r3, [r7, #18]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fc fb55 	bl	8000514 <__aeabi_ui2d>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4610      	mov	r0, r2
 8003e70:	4619      	mov	r1, r3
 8003e72:	f7fc fe79 	bl	8000b68 <__aeabi_d2uiz>
 8003e76:	4603      	mov	r3, r0
 8003e78:	60bb      	str	r3, [r7, #8]
	uint16_t remaining_samples = total_samples_in_memory % samples_per_chunk;
 8003e7a:	8a7a      	ldrh	r2, [r7, #18]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e82:	fb01 f202 	mul.w	r2, r1, r2
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]

	// Transmit multiple complete chunks of data
	for (int i = 0; i < num_chunks; i++) {
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	e01a      	b.n	8003ec6 <transmit_data_offline+0x96>
		uart_ready = 0;
 8003e90:	4b1f      	ldr	r3, [pc, #124]	@ (8003f10 <transmit_data_offline+0xe0>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * i], samples_per_chunk * sizeof(uint16_t));
 8003e96:	4b1f      	ldr	r3, [pc, #124]	@ (8003f14 <transmit_data_offline+0xe4>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	8a7b      	ldrh	r3, [r7, #18]
 8003e9c:	6979      	ldr	r1, [r7, #20]
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	441a      	add	r2, r3
 8003ea6:	8a7b      	ldrh	r3, [r7, #18]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f000 f86a 	bl	8003f88 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 8003eb4:	bf00      	nop
 8003eb6:	4b16      	ldr	r3, [pc, #88]	@ (8003f10 <transmit_data_offline+0xe0>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d1fa      	bne.n	8003eb6 <transmit_data_offline+0x86>
	for (int i = 0; i < num_chunks; i++) {
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d8e0      	bhi.n	8003e90 <transmit_data_offline+0x60>
	}

	// Transmit any remaining data too small to fit in a complete chunk
	if (remaining_samples > 0) {
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d017      	beq.n	8003f04 <transmit_data_offline+0xd4>
		uart_ready = 0;
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f10 <transmit_data_offline+0xe0>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * num_chunks], remaining_samples * sizeof(uint16_t));
 8003eda:	4b0e      	ldr	r3, [pc, #56]	@ (8003f14 <transmit_data_offline+0xe4>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	8a7b      	ldrh	r3, [r7, #18]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	441a      	add	r2, r3
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f000 f848 	bl	8003f88 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 8003ef8:	bf00      	nop
 8003efa:	4b05      	ldr	r3, [pc, #20]	@ (8003f10 <transmit_data_offline+0xe0>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d1fa      	bne.n	8003efa <transmit_data_offline+0xca>
	}
}
 8003f04:	bf00      	nop
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40100000 	.word	0x40100000
 8003f10:	20000008 	.word	0x20000008
 8003f14:	200004a0 	.word	0x200004a0

08003f18 <configure_registers>:

// Configure and transmit register values.
// Initial register values default to the same default settings in the RHX software.
// Any desired changes to these values added after the 'write_initial_reg_values()' function call.
void configure_registers(RHDConfigParameters *parameters)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	write_initial_reg_values(parameters);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7fd fd0f 	bl	8001944 <write_initial_reg_values>
//	// Reg 6: (Actual DAC value which changes over time - instead of setting once here, this should be written sample-by-sample in an aux command list).
//
//	// Reg 7: Set zcheck_select
//	set_zcheck_channel(parameters, FIRST_SAMPLED_CHANNEL);
//	write_command(7, get_register_value(parameters, 7));
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <configure_convert_commands>:


// Configure the CONVERT commands that are loaded at the beginning of command_sequence_MOSI.
// By default, channels from 0 to CONVERT_COMMANDS_PER_SEQUENCE - 1 (0 to 31) are loaded consecutively (0, 1, 2, 3, ... 31).
void configure_convert_commands()
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	af00      	add	r7, sp, #0
	// If default ordering of channel CONVERT commands (0, 1, 2, 3, ... 31) is desired, pass a NULL 2nd parameter to create_convert_sequence().
	create_convert_sequence(NULL);
 8003f32:	2000      	movs	r0, #0
 8003f34:	f7fd fdcc 	bl	8001ad0 <create_convert_sequence>
	//	uint8_t channel_numbers[CONVERT_COMMANDS_PER_SEQUENCE] = {0};
	//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
	//		channel_numbers[i] = (CONVERT_COMMANDS_PER_SEQUENCE - 1) - i;
	//	}
	//	create_convert_sequence(channel_numbers);
}
 8003f38:	bf00      	nop
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <configure_aux_commands>:


// Configure the AUX commands that are loaded at the end of command_sequence_MOSI.
// By defaults, command lists from 0 to AUX_COMMANDS_PER_SEQUENCE - 1 (0 to 2) are loaded consecutively (32, 33, 34).
void configure_aux_commands(RHDConfigParameters *parameters)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	  // desired frequency, so if using this command list it's important to set zcheck_DAC_command_slot_position to 0, 1, or
	  // 2 (one of the 3 command slots) to indicate its position, and set zcheck_DAC_command_list_length so that during
	  // execution of this list, after the length has been reached it can begin at 0 again.

	// Slot 0: Write RHD register loading to aux_command_list[0], so that the register values saved in software (parameters) are continually re-written.
	create_command_list_RHD_register_config(parameters, (uint16_t*) aux_command_list[0], 0, AUX_COMMAND_LIST_LENGTH);
 8003f44:	2380      	movs	r3, #128	@ 0x80
 8003f46:	2200      	movs	r2, #0
 8003f48:	490c      	ldr	r1, [pc, #48]	@ (8003f7c <configure_aux_commands+0x40>)
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fd fdfa 	bl	8001b44 <create_command_list_RHD_register_config>

	// Slot 1: Write dummy reads to aux_command_list[1], so that register 40 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[1], AUX_COMMAND_LIST_LENGTH, read_command(40));
 8003f50:	2028      	movs	r0, #40	@ 0x28
 8003f52:	f7ff faec 	bl	800352e <read_command>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2280      	movs	r2, #128	@ 0x80
 8003f5a:	4909      	ldr	r1, [pc, #36]	@ (8003f80 <configure_aux_commands+0x44>)
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fd ff94 	bl	8001e8a <create_command_list_dummy>

	// Slot 2: Write dummy reads to aux_command_list[2], so that register 41 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[2], AUX_COMMAND_LIST_LENGTH, read_command(41));
 8003f62:	2029      	movs	r0, #41	@ 0x29
 8003f64:	f7ff fae3 	bl	800352e <read_command>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2280      	movs	r2, #128	@ 0x80
 8003f6c:	4905      	ldr	r1, [pc, #20]	@ (8003f84 <configure_aux_commands+0x48>)
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd ff8b 	bl	8001e8a <create_command_list_dummy>
	// zcheck_DAC commands can have different lengths depending on desired frequency. To handle this, be sure to:
	// a) assign create_command_list_zcheck_DAC()'s return value to zcheck_DAC_command_list_length, and
	// b) assign which command slot the zcheck_DAC command list is in to zcheck_DAC_command_slot_position.
//	zcheck_DAC_command_list_length = create_command_list_zcheck_DAC(parameters, (uint16_t*) aux_command_list[2], 1000.0, 100);
//	zcheck_DAC_command_slot_position = 2;
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	200004a4 	.word	0x200004a4
 8003f80:	200005a4 	.word	0x200005a4
 8003f84:	200006a4 	.word	0x200006a4

08003f88 <transmit_dma_to_usart>:

// Use DMA to transmit num_bytes of data from memory pointer tx_data directly to USART.
// Non-blocking, so it may be helpful to set the 'uart_ready' variable to 0 prior to this function call,
// monitor it, and hold off on further transmissions until the USART Tx complete callback sets it to 1.
void transmit_dma_to_usart(volatile uint16_t *tx_data, uint16_t num_bytes)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	807b      	strh	r3, [r7, #2]
#ifdef USE_HAL
	if (HAL_UART_Transmit_DMA(&USART, (uint8_t*) tx_data, num_bytes) != HAL_OK)
 8003f94:	887b      	ldrh	r3, [r7, #2]
 8003f96:	461a      	mov	r2, r3
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4806      	ldr	r0, [pc, #24]	@ (8003fb4 <transmit_dma_to_usart+0x2c>)
 8003f9c:	f007 ff6e 	bl	800be7c <HAL_UART_Transmit_DMA>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <transmit_dma_to_usart+0x22>
	{
		Error_Handler();
 8003fa6:	f7fd fb7d 	bl	80016a4 <Error_Handler>
	LL_DMA_EnableChannel(DMA, DMA_USART_CHANNEL);

	// Enable DMA transfer for transmit request by setting DMAT bit in UART CR3 register
	LL_USART_EnableDMAReq_TX(USART);
#endif
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000270 	.word	0x20000270

08003fb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ff0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fbc:	f7ff feb0 	bl	8003d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003fc2:	e003      	b.n	8003fcc <LoopCopyDataInit>

08003fc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003fc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003fc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003fca:	3104      	adds	r1, #4

08003fcc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003fcc:	480a      	ldr	r0, [pc, #40]	@ (8003ff8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003fce:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <LoopForever+0xe>)
	adds	r2, r0, r1
 8003fd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003fd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003fd4:	d3f6      	bcc.n	8003fc4 <CopyDataInit>
	ldr	r2, =_sbss
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004000 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003fd8:	e002      	b.n	8003fe0 <LoopFillZerobss>

08003fda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003fda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003fdc:	f842 3b04 	str.w	r3, [r2], #4

08003fe0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003fe0:	4b08      	ldr	r3, [pc, #32]	@ (8004004 <LoopForever+0x16>)
	cmp	r2, r3
 8003fe2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003fe4:	d3f9      	bcc.n	8003fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fe6:	f009 fc6b 	bl	800d8c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fea:	f7fc ff9b 	bl	8000f24 <main>

08003fee <LoopForever>:

LoopForever:
    b LoopForever
 8003fee:	e7fe      	b.n	8003fee <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003ff0:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8003ff4:	0800f220 	.word	0x0800f220
	ldr	r0, =_sdata
 8003ff8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003ffc:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8004000:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8004004:	20000902 	.word	0x20000902

08004008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004008:	e7fe      	b.n	8004008 <ADC1_2_IRQHandler>
	...

0800400c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004010:	4b12      	ldr	r3, [pc, #72]	@ (800405c <HAL_Init+0x50>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a11      	ldr	r2, [pc, #68]	@ (800405c <HAL_Init+0x50>)
 8004016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800401a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800401c:	2003      	movs	r0, #3
 800401e:	f000 f98c 	bl	800433a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004022:	f002 fd9f 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8004026:	4602      	mov	r2, r0
 8004028:	4b0d      	ldr	r3, [pc, #52]	@ (8004060 <HAL_Init+0x54>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	490c      	ldr	r1, [pc, #48]	@ (8004064 <HAL_Init+0x58>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
 8004038:	4a0b      	ldr	r2, [pc, #44]	@ (8004068 <HAL_Init+0x5c>)
 800403a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800403c:	2004      	movs	r0, #4
 800403e:	f000 f9d1 	bl	80043e4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004042:	200f      	movs	r0, #15
 8004044:	f000 f812 	bl	800406c <HAL_InitTick>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e002      	b.n	8004058 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004052:	f7ff fa83 	bl	800355c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40022000 	.word	0x40022000
 8004060:	46020c00 	.word	0x46020c00
 8004064:	0800f0d8 	.word	0x0800f0d8
 8004068:	2000000c 	.word	0x2000000c

0800406c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004078:	4b33      	ldr	r3, [pc, #204]	@ (8004148 <HAL_InitTick+0xdc>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e05c      	b.n	800413e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8004084:	4b31      	ldr	r3, [pc, #196]	@ (800414c <HAL_InitTick+0xe0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b04      	cmp	r3, #4
 800408e:	d10c      	bne.n	80040aa <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8004090:	4b2f      	ldr	r3, [pc, #188]	@ (8004150 <HAL_InitTick+0xe4>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4b2c      	ldr	r3, [pc, #176]	@ (8004148 <HAL_InitTick+0xdc>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	4619      	mov	r1, r3
 800409a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800409e:	fbb3 f3f1 	udiv	r3, r3, r1
 80040a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e037      	b.n	800411a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80040aa:	f000 f9f3 	bl	8004494 <HAL_SYSTICK_GetCLKSourceConfig>
 80040ae:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d023      	beq.n	80040fe <HAL_InitTick+0x92>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d82d      	bhi.n	8004118 <HAL_InitTick+0xac>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_InitTick+0x5e>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d00d      	beq.n	80040e4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80040c8:	e026      	b.n	8004118 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80040ca:	4b21      	ldr	r3, [pc, #132]	@ (8004150 <HAL_InitTick+0xe4>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004148 <HAL_InitTick+0xdc>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	4619      	mov	r1, r3
 80040d4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80040d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	60fb      	str	r3, [r7, #12]
        break;
 80040e2:	e01a      	b.n	800411a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80040e4:	4b18      	ldr	r3, [pc, #96]	@ (8004148 <HAL_InitTick+0xdc>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80040f2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	60fb      	str	r3, [r7, #12]
        break;
 80040fc:	e00d      	b.n	800411a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80040fe:	4b12      	ldr	r3, [pc, #72]	@ (8004148 <HAL_InitTick+0xdc>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004108:	fbb3 f3f2 	udiv	r3, r3, r2
 800410c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	60fb      	str	r3, [r7, #12]
        break;
 8004116:	e000      	b.n	800411a <HAL_InitTick+0xae>
        break;
 8004118:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f940 	bl	80043a0 <HAL_SYSTICK_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e009      	b.n	800413e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800412a:	2200      	movs	r2, #0
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	f04f 30ff 	mov.w	r0, #4294967295
 8004132:	f000 f90d 	bl	8004350 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8004136:	4a07      	ldr	r2, [pc, #28]	@ (8004154 <HAL_InitTick+0xe8>)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000014 	.word	0x20000014
 800414c:	e000e010 	.word	0xe000e010
 8004150:	2000000c 	.word	0x2000000c
 8004154:	20000010 	.word	0x20000010

08004158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <HAL_IncTick+0x20>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	4b06      	ldr	r3, [pc, #24]	@ (800417c <HAL_IncTick+0x24>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4413      	add	r3, r2
 8004168:	4a04      	ldr	r2, [pc, #16]	@ (800417c <HAL_IncTick+0x24>)
 800416a:	6013      	str	r3, [r2, #0]
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000014 	.word	0x20000014
 800417c:	200007b4 	.word	0x200007b4

08004180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return uwTick;
 8004184:	4b03      	ldr	r3, [pc, #12]	@ (8004194 <HAL_GetTick+0x14>)
 8004186:	681b      	ldr	r3, [r3, #0]
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	200007b4 	.word	0x200007b4

08004198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041a0:	f7ff ffee 	bl	8004180 <HAL_GetTick>
 80041a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d005      	beq.n	80041be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041b2:	4b0a      	ldr	r3, [pc, #40]	@ (80041dc <HAL_Delay+0x44>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041be:	bf00      	nop
 80041c0:	f7ff ffde 	bl	8004180 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d8f7      	bhi.n	80041c0 <HAL_Delay+0x28>
  {
  }
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000014 	.word	0x20000014

080041e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041fc:	4013      	ands	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800420c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004212:	4a04      	ldr	r2, [pc, #16]	@ (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	60d3      	str	r3, [r2, #12]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800422c:	4b04      	ldr	r3, [pc, #16]	@ (8004240 <__NVIC_GetPriorityGrouping+0x18>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f003 0307 	and.w	r3, r3, #7
}
 8004236:	4618      	mov	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800424e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004252:	2b00      	cmp	r3, #0
 8004254:	db0b      	blt.n	800426e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	f003 021f 	and.w	r2, r3, #31
 800425c:	4907      	ldr	r1, [pc, #28]	@ (800427c <__NVIC_EnableIRQ+0x38>)
 800425e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	2001      	movs	r0, #1
 8004266:	fa00 f202 	lsl.w	r2, r0, r2
 800426a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	e000e100 	.word	0xe000e100

08004280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	6039      	str	r1, [r7, #0]
 800428a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800428c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004290:	2b00      	cmp	r3, #0
 8004292:	db0a      	blt.n	80042aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	b2da      	uxtb	r2, r3
 8004298:	490c      	ldr	r1, [pc, #48]	@ (80042cc <__NVIC_SetPriority+0x4c>)
 800429a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800429e:	0112      	lsls	r2, r2, #4
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	440b      	add	r3, r1
 80042a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042a8:	e00a      	b.n	80042c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4908      	ldr	r1, [pc, #32]	@ (80042d0 <__NVIC_SetPriority+0x50>)
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	3b04      	subs	r3, #4
 80042b8:	0112      	lsls	r2, r2, #4
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	440b      	add	r3, r1
 80042be:	761a      	strb	r2, [r3, #24]
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	e000e100 	.word	0xe000e100
 80042d0:	e000ed00 	.word	0xe000ed00

080042d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	@ 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f1c3 0307 	rsb	r3, r3, #7
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	bf28      	it	cs
 80042f2:	2304      	movcs	r3, #4
 80042f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	3304      	adds	r3, #4
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d902      	bls.n	8004304 <NVIC_EncodePriority+0x30>
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	3b03      	subs	r3, #3
 8004302:	e000      	b.n	8004306 <NVIC_EncodePriority+0x32>
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004308:	f04f 32ff 	mov.w	r2, #4294967295
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43da      	mvns	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	401a      	ands	r2, r3
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800431c:	f04f 31ff 	mov.w	r1, #4294967295
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	43d9      	mvns	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800432c:	4313      	orrs	r3, r2
         );
}
 800432e:	4618      	mov	r0, r3
 8004330:	3724      	adds	r7, #36	@ 0x24
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ff4c 	bl	80041e0 <__NVIC_SetPriorityGrouping>
}
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800435e:	f7ff ff63 	bl	8004228 <__NVIC_GetPriorityGrouping>
 8004362:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	6978      	ldr	r0, [r7, #20]
 800436a:	f7ff ffb3 	bl	80042d4 <NVIC_EncodePriority>
 800436e:	4602      	mov	r2, r0
 8004370:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff ff82 	bl	8004280 <__NVIC_SetPriority>
}
 800437c:	bf00      	nop
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800438e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ff56 	bl	8004244 <__NVIC_EnableIRQ>
}
 8004398:	bf00      	nop
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043b0:	d301      	bcc.n	80043b6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80043b2:	2301      	movs	r3, #1
 80043b4:	e00d      	b.n	80043d2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80043b6:	4a0a      	ldr	r2, [pc, #40]	@ (80043e0 <HAL_SYSTICK_Config+0x40>)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80043be:	4b08      	ldr	r3, [pc, #32]	@ (80043e0 <HAL_SYSTICK_Config+0x40>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80043c4:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <HAL_SYSTICK_Config+0x40>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a05      	ldr	r2, [pc, #20]	@ (80043e0 <HAL_SYSTICK_Config+0x40>)
 80043ca:	f043 0303 	orr.w	r3, r3, #3
 80043ce:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	e000e010 	.word	0xe000e010

080043e4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d844      	bhi.n	800447c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80043f2:	a201      	add	r2, pc, #4	@ (adr r2, 80043f8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	0800441b 	.word	0x0800441b
 80043fc:	08004439 	.word	0x08004439
 8004400:	0800445b 	.word	0x0800445b
 8004404:	0800447d 	.word	0x0800447d
 8004408:	0800440d 	.word	0x0800440d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800440c:	4b1f      	ldr	r3, [pc, #124]	@ (800448c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1e      	ldr	r2, [pc, #120]	@ (800448c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004412:	f043 0304 	orr.w	r3, r3, #4
 8004416:	6013      	str	r3, [r2, #0]
      break;
 8004418:	e031      	b.n	800447e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800441a:	4b1c      	ldr	r3, [pc, #112]	@ (800448c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1b      	ldr	r2, [pc, #108]	@ (800448c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004420:	f023 0304 	bic.w	r3, r3, #4
 8004424:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004426:	4b1a      	ldr	r3, [pc, #104]	@ (8004490 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800442c:	4a18      	ldr	r2, [pc, #96]	@ (8004490 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800442e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004432:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004436:	e022      	b.n	800447e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004438:	4b14      	ldr	r3, [pc, #80]	@ (800448c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a13      	ldr	r2, [pc, #76]	@ (800448c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800443e:	f023 0304 	bic.w	r3, r3, #4
 8004442:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004444:	4b12      	ldr	r3, [pc, #72]	@ (8004490 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800444a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800444e:	4a10      	ldr	r2, [pc, #64]	@ (8004490 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004450:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004454:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004458:	e011      	b.n	800447e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800445a:	4b0c      	ldr	r3, [pc, #48]	@ (800448c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a0b      	ldr	r2, [pc, #44]	@ (800448c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004460:	f023 0304 	bic.w	r3, r3, #4
 8004464:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800446c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004470:	4a07      	ldr	r2, [pc, #28]	@ (8004490 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004472:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004476:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800447a:	e000      	b.n	800447e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800447c:	bf00      	nop
  }
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	e000e010 	.word	0xe000e010
 8004490:	46020c00 	.word	0x46020c00

08004494 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800449a:	4b19      	ldr	r3, [pc, #100]	@ (8004500 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80044a6:	2304      	movs	r3, #4
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	e021      	b.n	80044f0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80044ac:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80044ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044b2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80044b6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044be:	d011      	beq.n	80044e4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044c6:	d810      	bhi.n	80044ea <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d4:	d003      	beq.n	80044de <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80044d6:	e008      	b.n	80044ea <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80044d8:	2300      	movs	r3, #0
 80044da:	607b      	str	r3, [r7, #4]
        break;
 80044dc:	e008      	b.n	80044f0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80044de:	2301      	movs	r3, #1
 80044e0:	607b      	str	r3, [r7, #4]
        break;
 80044e2:	e005      	b.n	80044f0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80044e4:	2302      	movs	r3, #2
 80044e6:	607b      	str	r3, [r7, #4]
        break;
 80044e8:	e002      	b.n	80044f0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80044ea:	2300      	movs	r3, #0
 80044ec:	607b      	str	r3, [r7, #4]
        break;
 80044ee:	bf00      	nop
    }
  }
  return systick_source;
 80044f0:	687b      	ldr	r3, [r7, #4]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e010 	.word	0xe000e010
 8004504:	46020c00 	.word	0x46020c00

08004508 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8004510:	f7ff fe36 	bl	8004180 <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0db      	b.n	80046d8 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a6e      	ldr	r2, [pc, #440]	@ (80046e0 <HAL_DMA_Init+0x1d8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	f000 809f 	beq.w	800466a <HAL_DMA_Init+0x162>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a6c      	ldr	r2, [pc, #432]	@ (80046e4 <HAL_DMA_Init+0x1dc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	f000 8099 	beq.w	800466a <HAL_DMA_Init+0x162>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a6a      	ldr	r2, [pc, #424]	@ (80046e8 <HAL_DMA_Init+0x1e0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	f000 8093 	beq.w	800466a <HAL_DMA_Init+0x162>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a68      	ldr	r2, [pc, #416]	@ (80046ec <HAL_DMA_Init+0x1e4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	f000 808d 	beq.w	800466a <HAL_DMA_Init+0x162>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a66      	ldr	r2, [pc, #408]	@ (80046f0 <HAL_DMA_Init+0x1e8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	f000 8087 	beq.w	800466a <HAL_DMA_Init+0x162>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a64      	ldr	r2, [pc, #400]	@ (80046f4 <HAL_DMA_Init+0x1ec>)
 8004562:	4293      	cmp	r3, r2
 8004564:	f000 8081 	beq.w	800466a <HAL_DMA_Init+0x162>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a62      	ldr	r2, [pc, #392]	@ (80046f8 <HAL_DMA_Init+0x1f0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d07b      	beq.n	800466a <HAL_DMA_Init+0x162>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a61      	ldr	r2, [pc, #388]	@ (80046fc <HAL_DMA_Init+0x1f4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d076      	beq.n	800466a <HAL_DMA_Init+0x162>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a5f      	ldr	r2, [pc, #380]	@ (8004700 <HAL_DMA_Init+0x1f8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d071      	beq.n	800466a <HAL_DMA_Init+0x162>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a5e      	ldr	r2, [pc, #376]	@ (8004704 <HAL_DMA_Init+0x1fc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d06c      	beq.n	800466a <HAL_DMA_Init+0x162>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a5c      	ldr	r2, [pc, #368]	@ (8004708 <HAL_DMA_Init+0x200>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d067      	beq.n	800466a <HAL_DMA_Init+0x162>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a5b      	ldr	r2, [pc, #364]	@ (800470c <HAL_DMA_Init+0x204>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d062      	beq.n	800466a <HAL_DMA_Init+0x162>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a59      	ldr	r2, [pc, #356]	@ (8004710 <HAL_DMA_Init+0x208>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d05d      	beq.n	800466a <HAL_DMA_Init+0x162>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a58      	ldr	r2, [pc, #352]	@ (8004714 <HAL_DMA_Init+0x20c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d058      	beq.n	800466a <HAL_DMA_Init+0x162>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a56      	ldr	r2, [pc, #344]	@ (8004718 <HAL_DMA_Init+0x210>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d053      	beq.n	800466a <HAL_DMA_Init+0x162>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a55      	ldr	r2, [pc, #340]	@ (800471c <HAL_DMA_Init+0x214>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d04e      	beq.n	800466a <HAL_DMA_Init+0x162>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a53      	ldr	r2, [pc, #332]	@ (8004720 <HAL_DMA_Init+0x218>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d049      	beq.n	800466a <HAL_DMA_Init+0x162>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a52      	ldr	r2, [pc, #328]	@ (8004724 <HAL_DMA_Init+0x21c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d044      	beq.n	800466a <HAL_DMA_Init+0x162>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a50      	ldr	r2, [pc, #320]	@ (8004728 <HAL_DMA_Init+0x220>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d03f      	beq.n	800466a <HAL_DMA_Init+0x162>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a4f      	ldr	r2, [pc, #316]	@ (800472c <HAL_DMA_Init+0x224>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d03a      	beq.n	800466a <HAL_DMA_Init+0x162>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004730 <HAL_DMA_Init+0x228>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d035      	beq.n	800466a <HAL_DMA_Init+0x162>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a4c      	ldr	r2, [pc, #304]	@ (8004734 <HAL_DMA_Init+0x22c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d030      	beq.n	800466a <HAL_DMA_Init+0x162>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a4a      	ldr	r2, [pc, #296]	@ (8004738 <HAL_DMA_Init+0x230>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d02b      	beq.n	800466a <HAL_DMA_Init+0x162>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a49      	ldr	r2, [pc, #292]	@ (800473c <HAL_DMA_Init+0x234>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d026      	beq.n	800466a <HAL_DMA_Init+0x162>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a47      	ldr	r2, [pc, #284]	@ (8004740 <HAL_DMA_Init+0x238>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d021      	beq.n	800466a <HAL_DMA_Init+0x162>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a46      	ldr	r2, [pc, #280]	@ (8004744 <HAL_DMA_Init+0x23c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d01c      	beq.n	800466a <HAL_DMA_Init+0x162>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a44      	ldr	r2, [pc, #272]	@ (8004748 <HAL_DMA_Init+0x240>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d017      	beq.n	800466a <HAL_DMA_Init+0x162>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a43      	ldr	r2, [pc, #268]	@ (800474c <HAL_DMA_Init+0x244>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d012      	beq.n	800466a <HAL_DMA_Init+0x162>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a41      	ldr	r2, [pc, #260]	@ (8004750 <HAL_DMA_Init+0x248>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00d      	beq.n	800466a <HAL_DMA_Init+0x162>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a40      	ldr	r2, [pc, #256]	@ (8004754 <HAL_DMA_Init+0x24c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d008      	beq.n	800466a <HAL_DMA_Init+0x162>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a3e      	ldr	r2, [pc, #248]	@ (8004758 <HAL_DMA_Init+0x250>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <HAL_DMA_Init+0x162>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a3d      	ldr	r2, [pc, #244]	@ (800475c <HAL_DMA_Init+0x254>)
 8004668:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0206 	orr.w	r2, r2, #6
 8004688:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800468a:	e00f      	b.n	80046ac <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800468c:	f7ff fd78 	bl	8004180 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b05      	cmp	r3, #5
 8004698:	d908      	bls.n	80046ac <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2210      	movs	r2, #16
 800469e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2203      	movs	r2, #3
 80046a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e015      	b.n	80046d8 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e8      	bne.n	800468c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fb24 	bl	8004d08 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40020050 	.word	0x40020050
 80046e4:	50020050 	.word	0x50020050
 80046e8:	400200d0 	.word	0x400200d0
 80046ec:	500200d0 	.word	0x500200d0
 80046f0:	40020150 	.word	0x40020150
 80046f4:	50020150 	.word	0x50020150
 80046f8:	400201d0 	.word	0x400201d0
 80046fc:	500201d0 	.word	0x500201d0
 8004700:	40020250 	.word	0x40020250
 8004704:	50020250 	.word	0x50020250
 8004708:	400202d0 	.word	0x400202d0
 800470c:	500202d0 	.word	0x500202d0
 8004710:	40020350 	.word	0x40020350
 8004714:	50020350 	.word	0x50020350
 8004718:	400203d0 	.word	0x400203d0
 800471c:	500203d0 	.word	0x500203d0
 8004720:	40020450 	.word	0x40020450
 8004724:	50020450 	.word	0x50020450
 8004728:	400204d0 	.word	0x400204d0
 800472c:	500204d0 	.word	0x500204d0
 8004730:	40020550 	.word	0x40020550
 8004734:	50020550 	.word	0x50020550
 8004738:	400205d0 	.word	0x400205d0
 800473c:	500205d0 	.word	0x500205d0
 8004740:	40020650 	.word	0x40020650
 8004744:	50020650 	.word	0x50020650
 8004748:	400206d0 	.word	0x400206d0
 800474c:	500206d0 	.word	0x500206d0
 8004750:	40020750 	.word	0x40020750
 8004754:	50020750 	.word	0x50020750
 8004758:	400207d0 	.word	0x400207d0
 800475c:	500207d0 	.word	0x500207d0

08004760 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e04f      	b.n	8004818 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_DMA_Start_IT+0x26>
 8004782:	2302      	movs	r3, #2
 8004784:	e048      	b.n	8004818 <HAL_DMA_Start_IT+0xb8>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	d136      	bne.n	8004808 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2202      	movs	r2, #2
 800479e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fa84 	bl	8004cbc <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80047c2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047da:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047f2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e007      	b.n	8004818 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2240      	movs	r2, #64	@ 0x40
 800480c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004828:	f7ff fcaa 	bl	8004180 <HAL_GetTick>
 800482c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e06b      	b.n	8004910 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d008      	beq.n	8004856 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e05c      	b.n	8004910 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0204 	orr.w	r2, r2, #4
 8004864:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2205      	movs	r2, #5
 800486a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800486e:	e020      	b.n	80048b2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004870:	f7ff fc86 	bl	8004180 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b05      	cmp	r3, #5
 800487c:	d919      	bls.n	80048b2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004882:	f043 0210 	orr.w	r2, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2203      	movs	r2, #3
 800488e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a2:	2201      	movs	r2, #1
 80048a4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e02e      	b.n	8004910 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0d7      	beq.n	8004870 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0202 	orr.w	r2, r2, #2
 80048ce:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2204      	movs	r2, #4
 80048d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80048e0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fa:	2201      	movs	r2, #1
 80048fc:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2200      	movs	r2, #0
 8004904:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e019      	b.n	800495e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d004      	beq.n	8004940 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e00e      	b.n	800495e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2204      	movs	r2, #4
 8004944:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004956:	f043 0304 	orr.w	r3, r3, #4
 800495a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800497a:	f023 030f 	bic.w	r3, r3, #15
 800497e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004988:	3b50      	subs	r3, #80	@ 0x50
 800498a:	09db      	lsrs	r3, r3, #7
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	2201      	movs	r2, #1
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4013      	ands	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 813b 	beq.w	8004c20 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d011      	beq.n	80049dc <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049ce:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d4:	f043 0201 	orr.w	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d011      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a00:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a06:	f043 0202 	orr.w	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d011      	beq.n	8004a40 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004a32:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a38:	f043 0204 	orr.w	r2, r3, #4
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d011      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004a64:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6a:	f043 0208 	orr.w	r2, r3, #8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d013      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00c      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a96:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d04c      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d045      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004acc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d12e      	bne.n	8004b38 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ae8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695a      	ldr	r2, [r3, #20]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0202 	orr.w	r2, r2, #2
 8004af8:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b12:	2201      	movs	r2, #1
 8004b14:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d07a      	beq.n	8004c24 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
        }

        return;
 8004b36:	e075      	b.n	8004c24 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2205      	movs	r2, #5
 8004b3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d039      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d032      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d012      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d116      	bne.n	8004bb0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d111      	bne.n	8004bb0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b98:	2201      	movs	r2, #1
 8004b9a:	731a      	strb	r2, [r3, #12]
 8004b9c:	e008      	b.n	8004bb0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d103      	bne.n	8004bb0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004bb8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d025      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0202 	orr.w	r2, r2, #2
 8004be8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c02:	2201      	movs	r2, #1
 8004c04:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
 8004c1e:	e002      	b.n	8004c26 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004c20:	bf00      	nop
 8004c22:	e000      	b.n	8004c26 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8004c24:	bf00      	nop
    }
  }
}
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e02b      	b.n	8004cb0 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004c60:	f023 030f 	bic.w	r3, r3, #15
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6e:	3b50      	subs	r3, #80	@ 0x50
 8004c70:	09db      	lsrs	r3, r3, #7
 8004c72:	f003 031f 	and.w	r3, r3, #31
 8004c76:	2201      	movs	r2, #1
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d012      	beq.n	8004cae <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f003 0311 	and.w	r3, r3, #17
 8004c8e:	2b11      	cmp	r3, #17
 8004c90:	d106      	bne.n	8004ca0 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	605a      	str	r2, [r3, #4]
 8004c9e:	e006      	b.n	8004cae <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	401a      	ands	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	041b      	lsls	r3, r3, #16
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	b291      	uxth	r1, r2
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004ce8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a53      	ldr	r2, [pc, #332]	@ (8004e94 <DMA_Init+0x18c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	f000 80a0 	beq.w	8004e8e <DMA_Init+0x186>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a51      	ldr	r2, [pc, #324]	@ (8004e98 <DMA_Init+0x190>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	f000 809a 	beq.w	8004e8e <DMA_Init+0x186>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a4f      	ldr	r2, [pc, #316]	@ (8004e9c <DMA_Init+0x194>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	f000 8094 	beq.w	8004e8e <DMA_Init+0x186>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a4d      	ldr	r2, [pc, #308]	@ (8004ea0 <DMA_Init+0x198>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	f000 808e 	beq.w	8004e8e <DMA_Init+0x186>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a4b      	ldr	r2, [pc, #300]	@ (8004ea4 <DMA_Init+0x19c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	f000 8088 	beq.w	8004e8e <DMA_Init+0x186>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a49      	ldr	r2, [pc, #292]	@ (8004ea8 <DMA_Init+0x1a0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	f000 8082 	beq.w	8004e8e <DMA_Init+0x186>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a47      	ldr	r2, [pc, #284]	@ (8004eac <DMA_Init+0x1a4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d07c      	beq.n	8004e8e <DMA_Init+0x186>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a45      	ldr	r2, [pc, #276]	@ (8004eb0 <DMA_Init+0x1a8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d077      	beq.n	8004e8e <DMA_Init+0x186>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a44      	ldr	r2, [pc, #272]	@ (8004eb4 <DMA_Init+0x1ac>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d072      	beq.n	8004e8e <DMA_Init+0x186>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a42      	ldr	r2, [pc, #264]	@ (8004eb8 <DMA_Init+0x1b0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d06d      	beq.n	8004e8e <DMA_Init+0x186>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a41      	ldr	r2, [pc, #260]	@ (8004ebc <DMA_Init+0x1b4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d068      	beq.n	8004e8e <DMA_Init+0x186>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ec0 <DMA_Init+0x1b8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d063      	beq.n	8004e8e <DMA_Init+0x186>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a3e      	ldr	r2, [pc, #248]	@ (8004ec4 <DMA_Init+0x1bc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d05e      	beq.n	8004e8e <DMA_Init+0x186>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ec8 <DMA_Init+0x1c0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d059      	beq.n	8004e8e <DMA_Init+0x186>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a3b      	ldr	r2, [pc, #236]	@ (8004ecc <DMA_Init+0x1c4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d054      	beq.n	8004e8e <DMA_Init+0x186>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a39      	ldr	r2, [pc, #228]	@ (8004ed0 <DMA_Init+0x1c8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d04f      	beq.n	8004e8e <DMA_Init+0x186>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a38      	ldr	r2, [pc, #224]	@ (8004ed4 <DMA_Init+0x1cc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d04a      	beq.n	8004e8e <DMA_Init+0x186>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a36      	ldr	r2, [pc, #216]	@ (8004ed8 <DMA_Init+0x1d0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d045      	beq.n	8004e8e <DMA_Init+0x186>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a35      	ldr	r2, [pc, #212]	@ (8004edc <DMA_Init+0x1d4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d040      	beq.n	8004e8e <DMA_Init+0x186>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a33      	ldr	r2, [pc, #204]	@ (8004ee0 <DMA_Init+0x1d8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d03b      	beq.n	8004e8e <DMA_Init+0x186>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a32      	ldr	r2, [pc, #200]	@ (8004ee4 <DMA_Init+0x1dc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d036      	beq.n	8004e8e <DMA_Init+0x186>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a30      	ldr	r2, [pc, #192]	@ (8004ee8 <DMA_Init+0x1e0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d031      	beq.n	8004e8e <DMA_Init+0x186>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004eec <DMA_Init+0x1e4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d02c      	beq.n	8004e8e <DMA_Init+0x186>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef0 <DMA_Init+0x1e8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d027      	beq.n	8004e8e <DMA_Init+0x186>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2c      	ldr	r2, [pc, #176]	@ (8004ef4 <DMA_Init+0x1ec>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d022      	beq.n	8004e8e <DMA_Init+0x186>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ef8 <DMA_Init+0x1f0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01d      	beq.n	8004e8e <DMA_Init+0x186>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a29      	ldr	r2, [pc, #164]	@ (8004efc <DMA_Init+0x1f4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d018      	beq.n	8004e8e <DMA_Init+0x186>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a27      	ldr	r2, [pc, #156]	@ (8004f00 <DMA_Init+0x1f8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <DMA_Init+0x186>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a26      	ldr	r2, [pc, #152]	@ (8004f04 <DMA_Init+0x1fc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00e      	beq.n	8004e8e <DMA_Init+0x186>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a24      	ldr	r2, [pc, #144]	@ (8004f08 <DMA_Init+0x200>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d009      	beq.n	8004e8e <DMA_Init+0x186>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a23      	ldr	r2, [pc, #140]	@ (8004f0c <DMA_Init+0x204>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <DMA_Init+0x186>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a21      	ldr	r2, [pc, #132]	@ (8004f10 <DMA_Init+0x208>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d142      	bne.n	8004f14 <DMA_Init+0x20c>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e041      	b.n	8004f16 <DMA_Init+0x20e>
 8004e92:	bf00      	nop
 8004e94:	40020050 	.word	0x40020050
 8004e98:	50020050 	.word	0x50020050
 8004e9c:	400200d0 	.word	0x400200d0
 8004ea0:	500200d0 	.word	0x500200d0
 8004ea4:	40020150 	.word	0x40020150
 8004ea8:	50020150 	.word	0x50020150
 8004eac:	400201d0 	.word	0x400201d0
 8004eb0:	500201d0 	.word	0x500201d0
 8004eb4:	40020250 	.word	0x40020250
 8004eb8:	50020250 	.word	0x50020250
 8004ebc:	400202d0 	.word	0x400202d0
 8004ec0:	500202d0 	.word	0x500202d0
 8004ec4:	40020350 	.word	0x40020350
 8004ec8:	50020350 	.word	0x50020350
 8004ecc:	400203d0 	.word	0x400203d0
 8004ed0:	500203d0 	.word	0x500203d0
 8004ed4:	40020450 	.word	0x40020450
 8004ed8:	50020450 	.word	0x50020450
 8004edc:	400204d0 	.word	0x400204d0
 8004ee0:	500204d0 	.word	0x500204d0
 8004ee4:	40020550 	.word	0x40020550
 8004ee8:	50020550 	.word	0x50020550
 8004eec:	400205d0 	.word	0x400205d0
 8004ef0:	500205d0 	.word	0x500205d0
 8004ef4:	40020650 	.word	0x40020650
 8004ef8:	50020650 	.word	0x50020650
 8004efc:	400206d0 	.word	0x400206d0
 8004f00:	500206d0 	.word	0x500206d0
 8004f04:	40020750 	.word	0x40020750
 8004f08:	50020750 	.word	0x50020750
 8004f0c:	400207d0 	.word	0x400207d0
 8004f10:	500207d0 	.word	0x500207d0
 8004f14:	2300      	movs	r3, #0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d012      	beq.n	8004f40 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	3b01      	subs	r3, #1
 8004f24:	051b      	lsls	r3, r3, #20
 8004f26:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004f2a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	3b01      	subs	r3, #1
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004f38:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f72:	f040 80b0 	bne.w	80050d6 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a82      	ldr	r2, [pc, #520]	@ (8005184 <DMA_Init+0x47c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	f000 80a0 	beq.w	80050c2 <DMA_Init+0x3ba>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a80      	ldr	r2, [pc, #512]	@ (8005188 <DMA_Init+0x480>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	f000 809a 	beq.w	80050c2 <DMA_Init+0x3ba>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a7e      	ldr	r2, [pc, #504]	@ (800518c <DMA_Init+0x484>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	f000 8094 	beq.w	80050c2 <DMA_Init+0x3ba>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a7c      	ldr	r2, [pc, #496]	@ (8005190 <DMA_Init+0x488>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	f000 808e 	beq.w	80050c2 <DMA_Init+0x3ba>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a7a      	ldr	r2, [pc, #488]	@ (8005194 <DMA_Init+0x48c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	f000 8088 	beq.w	80050c2 <DMA_Init+0x3ba>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a78      	ldr	r2, [pc, #480]	@ (8005198 <DMA_Init+0x490>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	f000 8082 	beq.w	80050c2 <DMA_Init+0x3ba>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a76      	ldr	r2, [pc, #472]	@ (800519c <DMA_Init+0x494>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d07c      	beq.n	80050c2 <DMA_Init+0x3ba>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a74      	ldr	r2, [pc, #464]	@ (80051a0 <DMA_Init+0x498>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d077      	beq.n	80050c2 <DMA_Init+0x3ba>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a73      	ldr	r2, [pc, #460]	@ (80051a4 <DMA_Init+0x49c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d072      	beq.n	80050c2 <DMA_Init+0x3ba>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a71      	ldr	r2, [pc, #452]	@ (80051a8 <DMA_Init+0x4a0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d06d      	beq.n	80050c2 <DMA_Init+0x3ba>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a70      	ldr	r2, [pc, #448]	@ (80051ac <DMA_Init+0x4a4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d068      	beq.n	80050c2 <DMA_Init+0x3ba>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a6e      	ldr	r2, [pc, #440]	@ (80051b0 <DMA_Init+0x4a8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d063      	beq.n	80050c2 <DMA_Init+0x3ba>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a6d      	ldr	r2, [pc, #436]	@ (80051b4 <DMA_Init+0x4ac>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d05e      	beq.n	80050c2 <DMA_Init+0x3ba>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a6b      	ldr	r2, [pc, #428]	@ (80051b8 <DMA_Init+0x4b0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d059      	beq.n	80050c2 <DMA_Init+0x3ba>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a6a      	ldr	r2, [pc, #424]	@ (80051bc <DMA_Init+0x4b4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d054      	beq.n	80050c2 <DMA_Init+0x3ba>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a68      	ldr	r2, [pc, #416]	@ (80051c0 <DMA_Init+0x4b8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d04f      	beq.n	80050c2 <DMA_Init+0x3ba>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a67      	ldr	r2, [pc, #412]	@ (80051c4 <DMA_Init+0x4bc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d04a      	beq.n	80050c2 <DMA_Init+0x3ba>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a65      	ldr	r2, [pc, #404]	@ (80051c8 <DMA_Init+0x4c0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d045      	beq.n	80050c2 <DMA_Init+0x3ba>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a64      	ldr	r2, [pc, #400]	@ (80051cc <DMA_Init+0x4c4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d040      	beq.n	80050c2 <DMA_Init+0x3ba>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a62      	ldr	r2, [pc, #392]	@ (80051d0 <DMA_Init+0x4c8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d03b      	beq.n	80050c2 <DMA_Init+0x3ba>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a61      	ldr	r2, [pc, #388]	@ (80051d4 <DMA_Init+0x4cc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d036      	beq.n	80050c2 <DMA_Init+0x3ba>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a5f      	ldr	r2, [pc, #380]	@ (80051d8 <DMA_Init+0x4d0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d031      	beq.n	80050c2 <DMA_Init+0x3ba>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a5e      	ldr	r2, [pc, #376]	@ (80051dc <DMA_Init+0x4d4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d02c      	beq.n	80050c2 <DMA_Init+0x3ba>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a5c      	ldr	r2, [pc, #368]	@ (80051e0 <DMA_Init+0x4d8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d027      	beq.n	80050c2 <DMA_Init+0x3ba>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a5b      	ldr	r2, [pc, #364]	@ (80051e4 <DMA_Init+0x4dc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d022      	beq.n	80050c2 <DMA_Init+0x3ba>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a59      	ldr	r2, [pc, #356]	@ (80051e8 <DMA_Init+0x4e0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01d      	beq.n	80050c2 <DMA_Init+0x3ba>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a58      	ldr	r2, [pc, #352]	@ (80051ec <DMA_Init+0x4e4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d018      	beq.n	80050c2 <DMA_Init+0x3ba>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a56      	ldr	r2, [pc, #344]	@ (80051f0 <DMA_Init+0x4e8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <DMA_Init+0x3ba>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a55      	ldr	r2, [pc, #340]	@ (80051f4 <DMA_Init+0x4ec>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00e      	beq.n	80050c2 <DMA_Init+0x3ba>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a53      	ldr	r2, [pc, #332]	@ (80051f8 <DMA_Init+0x4f0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d009      	beq.n	80050c2 <DMA_Init+0x3ba>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a52      	ldr	r2, [pc, #328]	@ (80051fc <DMA_Init+0x4f4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <DMA_Init+0x3ba>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a50      	ldr	r2, [pc, #320]	@ (8005200 <DMA_Init+0x4f8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d101      	bne.n	80050c6 <DMA_Init+0x3be>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <DMA_Init+0x3c0>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00d      	beq.n	80050e8 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e008      	b.n	80050e8 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050de:	d103      	bne.n	80050e8 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050e6:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050ee:	4b45      	ldr	r3, [pc, #276]	@ (8005204 <DMA_Init+0x4fc>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	68f9      	ldr	r1, [r7, #12]
 80050f8:	430b      	orrs	r3, r1
 80050fa:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2200      	movs	r2, #0
 8005102:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a36      	ldr	r2, [pc, #216]	@ (80051e4 <DMA_Init+0x4dc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d022      	beq.n	8005154 <DMA_Init+0x44c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a35      	ldr	r2, [pc, #212]	@ (80051e8 <DMA_Init+0x4e0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d01d      	beq.n	8005154 <DMA_Init+0x44c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a33      	ldr	r2, [pc, #204]	@ (80051ec <DMA_Init+0x4e4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <DMA_Init+0x44c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a32      	ldr	r2, [pc, #200]	@ (80051f0 <DMA_Init+0x4e8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <DMA_Init+0x44c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a30      	ldr	r2, [pc, #192]	@ (80051f4 <DMA_Init+0x4ec>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <DMA_Init+0x44c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2f      	ldr	r2, [pc, #188]	@ (80051f8 <DMA_Init+0x4f0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <DMA_Init+0x44c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2d      	ldr	r2, [pc, #180]	@ (80051fc <DMA_Init+0x4f4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <DMA_Init+0x44c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2c      	ldr	r2, [pc, #176]	@ (8005200 <DMA_Init+0x4f8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d101      	bne.n	8005158 <DMA_Init+0x450>
 8005154:	2301      	movs	r3, #1
 8005156:	e000      	b.n	800515a <DMA_Init+0x452>
 8005158:	2300      	movs	r3, #0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2200      	movs	r2, #0
 800516c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2200      	movs	r2, #0
 8005174:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40020050 	.word	0x40020050
 8005188:	50020050 	.word	0x50020050
 800518c:	400200d0 	.word	0x400200d0
 8005190:	500200d0 	.word	0x500200d0
 8005194:	40020150 	.word	0x40020150
 8005198:	50020150 	.word	0x50020150
 800519c:	400201d0 	.word	0x400201d0
 80051a0:	500201d0 	.word	0x500201d0
 80051a4:	40020250 	.word	0x40020250
 80051a8:	50020250 	.word	0x50020250
 80051ac:	400202d0 	.word	0x400202d0
 80051b0:	500202d0 	.word	0x500202d0
 80051b4:	40020350 	.word	0x40020350
 80051b8:	50020350 	.word	0x50020350
 80051bc:	400203d0 	.word	0x400203d0
 80051c0:	500203d0 	.word	0x500203d0
 80051c4:	40020450 	.word	0x40020450
 80051c8:	50020450 	.word	0x50020450
 80051cc:	400204d0 	.word	0x400204d0
 80051d0:	500204d0 	.word	0x500204d0
 80051d4:	40020550 	.word	0x40020550
 80051d8:	50020550 	.word	0x50020550
 80051dc:	400205d0 	.word	0x400205d0
 80051e0:	500205d0 	.word	0x500205d0
 80051e4:	40020650 	.word	0x40020650
 80051e8:	50020650 	.word	0x50020650
 80051ec:	400206d0 	.word	0x400206d0
 80051f0:	500206d0 	.word	0x500206d0
 80051f4:	40020750 	.word	0x40020750
 80051f8:	50020750 	.word	0x50020750
 80051fc:	400207d0 	.word	0x400207d0
 8005200:	500207d0 	.word	0x500207d0
 8005204:	3cc03180 	.word	0x3cc03180

08005208 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_DMAEx_List_Start_IT+0x16>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e082      	b.n	8005328 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005228:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005234:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8005236:	7dfb      	ldrb	r3, [r7, #23]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d005      	beq.n	8005248 <HAL_DMAEx_List_Start_IT+0x40>
 800523c:	7dfb      	ldrb	r3, [r7, #23]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d16a      	bne.n	8005318 <HAL_DMAEx_List_Start_IT+0x110>
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d067      	beq.n	8005318 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d157      	bne.n	8005304 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_DMAEx_List_Start_IT+0x5a>
 800525e:	2302      	movs	r3, #2
 8005260:	e062      	b.n	8005328 <HAL_DMAEx_List_Start_IT+0x120>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005276:	2202      	movs	r2, #2
 8005278:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005284:	2200      	movs	r2, #0
 8005286:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695a      	ldr	r2, [r3, #20]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005296:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800529c:	2b00      	cmp	r3, #0
 800529e:	d007      	beq.n	80052b0 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695a      	ldr	r2, [r3, #20]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ae:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695a      	ldr	r2, [r3, #20]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052c6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f107 010c 	add.w	r1, r7, #12
 80052d2:	2200      	movs	r2, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 f82b 	bl	8005330 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4619      	mov	r1, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	0c0b      	lsrs	r3, r1, #16
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80052f8:	4013      	ands	r3, r2
 80052fa:	68f9      	ldr	r1, [r7, #12]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	430b      	orrs	r3, r1
 8005302:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695a      	ldr	r2, [r3, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e007      	b.n	8005328 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2240      	movs	r2, #64	@ 0x40
 800531c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00c      	beq.n	8005362 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4a0d      	ldr	r2, [pc, #52]	@ (8005388 <DMA_List_GetCLLRNodeInfo+0x58>)
 8005352:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00f      	beq.n	800537a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2207      	movs	r2, #7
 800535e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8005360:	e00b      	b.n	800537a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a08      	ldr	r2, [pc, #32]	@ (800538c <DMA_List_GetCLLRNodeInfo+0x5c>)
 800536c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2205      	movs	r2, #5
 8005378:	601a      	str	r2, [r3, #0]
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	fe010000 	.word	0xfe010000
 800538c:	f8010000 	.word	0xf8010000

08005390 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005390:	b480      	push	{r7}
 8005392:	b089      	sub	sp, #36	@ 0x24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80053a2:	e1ba      	b.n	800571a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	2101      	movs	r1, #1
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	fa01 f303 	lsl.w	r3, r1, r3
 80053b0:	4013      	ands	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 81aa 	beq.w	8005714 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a55      	ldr	r2, [pc, #340]	@ (8005518 <HAL_GPIO_Init+0x188>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d15d      	bne.n	8005484 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80053ce:	2201      	movs	r2, #1
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	43db      	mvns	r3, r3
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	4013      	ands	r3, r2
 80053dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 0201 	and.w	r2, r3, #1
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80053f8:	4a48      	ldr	r2, [pc, #288]	@ (800551c <HAL_GPIO_Init+0x18c>)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005400:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005402:	4a46      	ldr	r2, [pc, #280]	@ (800551c <HAL_GPIO_Init+0x18c>)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	08da      	lsrs	r2, r3, #3
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3208      	adds	r2, #8
 8005416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	220f      	movs	r2, #15
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43db      	mvns	r3, r3
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	4013      	ands	r3, r2
 8005430:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	220b      	movs	r2, #11
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	4313      	orrs	r3, r2
 8005444:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	08da      	lsrs	r2, r3, #3
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	3208      	adds	r2, #8
 800544e:	69f9      	ldr	r1, [r7, #28]
 8005450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	2203      	movs	r2, #3
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	4013      	ands	r3, r2
 800546a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	2202      	movs	r2, #2
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	4313      	orrs	r3, r2
 800547a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e067      	b.n	8005554 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b02      	cmp	r3, #2
 800548a:	d003      	beq.n	8005494 <HAL_GPIO_Init+0x104>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b12      	cmp	r3, #18
 8005492:	d145      	bne.n	8005520 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	08da      	lsrs	r2, r3, #3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3208      	adds	r2, #8
 800549c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	220f      	movs	r2, #15
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	43db      	mvns	r3, r3
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	4013      	ands	r3, r2
 80054b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f003 020f 	and.w	r2, r3, #15
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	08da      	lsrs	r2, r3, #3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3208      	adds	r2, #8
 80054da:	69f9      	ldr	r1, [r7, #28]
 80054dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	2203      	movs	r2, #3
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	4013      	ands	r3, r2
 80054f6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f003 0203 	and.w	r2, r3, #3
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	69fa      	ldr	r2, [r7, #28]
 800550a:	4313      	orrs	r3, r2
 800550c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e01e      	b.n	8005554 <HAL_GPIO_Init+0x1c4>
 8005516:	bf00      	nop
 8005518:	46020000 	.word	0x46020000
 800551c:	0800f130 	.word	0x0800f130
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	2203      	movs	r2, #3
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	4013      	ands	r3, r2
 8005536:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 0203 	and.w	r2, r3, #3
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	4313      	orrs	r3, r2
 800554c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d00b      	beq.n	8005574 <HAL_GPIO_Init+0x1e4>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d007      	beq.n	8005574 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005568:	2b11      	cmp	r3, #17
 800556a:	d003      	beq.n	8005574 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b12      	cmp	r3, #18
 8005572:	d130      	bne.n	80055d6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	2203      	movs	r2, #3
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	43db      	mvns	r3, r3
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	4013      	ands	r3, r2
 800558a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	4313      	orrs	r3, r2
 800559c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80055aa:	2201      	movs	r2, #1
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	43db      	mvns	r3, r3
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	4013      	ands	r3, r2
 80055b8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	f003 0201 	and.w	r2, r3, #1
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d017      	beq.n	800560e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	2203      	movs	r2, #3
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	4013      	ands	r3, r2
 80055f4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	4313      	orrs	r3, r2
 8005606:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d07c      	beq.n	8005714 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800561a:	4a47      	ldr	r2, [pc, #284]	@ (8005738 <HAL_GPIO_Init+0x3a8>)
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	089b      	lsrs	r3, r3, #2
 8005620:	3318      	adds	r3, #24
 8005622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005626:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	220f      	movs	r2, #15
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	4013      	ands	r3, r2
 800563c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	0a9a      	lsrs	r2, r3, #10
 8005642:	4b3e      	ldr	r3, [pc, #248]	@ (800573c <HAL_GPIO_Init+0x3ac>)
 8005644:	4013      	ands	r3, r2
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	f002 0203 	and.w	r2, r2, #3
 800564c:	00d2      	lsls	r2, r2, #3
 800564e:	4093      	lsls	r3, r2
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	4313      	orrs	r3, r2
 8005654:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005656:	4938      	ldr	r1, [pc, #224]	@ (8005738 <HAL_GPIO_Init+0x3a8>)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	089b      	lsrs	r3, r3, #2
 800565c:	3318      	adds	r3, #24
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005664:	4b34      	ldr	r3, [pc, #208]	@ (8005738 <HAL_GPIO_Init+0x3a8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	43db      	mvns	r3, r3
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	4013      	ands	r3, r2
 8005672:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005688:	4a2b      	ldr	r2, [pc, #172]	@ (8005738 <HAL_GPIO_Init+0x3a8>)
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800568e:	4b2a      	ldr	r3, [pc, #168]	@ (8005738 <HAL_GPIO_Init+0x3a8>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	43db      	mvns	r3, r3
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	4013      	ands	r3, r2
 800569c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80056b2:	4a21      	ldr	r2, [pc, #132]	@ (8005738 <HAL_GPIO_Init+0x3a8>)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80056b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005738 <HAL_GPIO_Init+0x3a8>)
 80056ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	43db      	mvns	r3, r3
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	4013      	ands	r3, r2
 80056c8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80056de:	4a16      	ldr	r2, [pc, #88]	@ (8005738 <HAL_GPIO_Init+0x3a8>)
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80056e6:	4b14      	ldr	r3, [pc, #80]	@ (8005738 <HAL_GPIO_Init+0x3a8>)
 80056e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4313      	orrs	r3, r2
 800570a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800570c:	4a0a      	ldr	r2, [pc, #40]	@ (8005738 <HAL_GPIO_Init+0x3a8>)
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	3301      	adds	r3, #1
 8005718:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	f47f ae3d 	bne.w	80053a4 <HAL_GPIO_Init+0x14>
  }
}
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	3724      	adds	r7, #36	@ 0x24
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	46022000 	.word	0x46022000
 800573c:	002f7f7f 	.word	0x002f7f7f

08005740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	807b      	strh	r3, [r7, #2]
 800574c:	4613      	mov	r3, r2
 800574e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005750:	787b      	ldrb	r3, [r7, #1]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005756:	887a      	ldrh	r2, [r7, #2]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800575c:	e002      	b.n	8005764 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800575e:	887a      	ldrh	r2, [r7, #2]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800577c:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
 800578c:	e007      	b.n	800579e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800578e:	4b07      	ldr	r3, [pc, #28]	@ (80057ac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 0204 	bic.w	r2, r3, #4
 8005796:	4905      	ldr	r1, [pc, #20]	@ (80057ac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4313      	orrs	r3, r2
 800579c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800579e:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40030400 	.word	0x40030400

080057b0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80057b4:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <HAL_ICACHE_Enable+0x1c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a04      	ldr	r2, [pc, #16]	@ (80057cc <HAL_ICACHE_Enable+0x1c>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	40030400 	.word	0x40030400

080057d0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80057d8:	4b39      	ldr	r3, [pc, #228]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80057da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057e0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d10b      	bne.n	8005802 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057f0:	d905      	bls.n	80057fe <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80057f2:	4b33      	ldr	r3, [pc, #204]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	4a32      	ldr	r2, [pc, #200]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80057f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057fc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	e057      	b.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005808:	d90a      	bls.n	8005820 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800580a:	4b2d      	ldr	r3, [pc, #180]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4313      	orrs	r3, r2
 8005816:	4a2a      	ldr	r2, [pc, #168]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800581c:	60d3      	str	r3, [r2, #12]
 800581e:	e007      	b.n	8005830 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005820:	4b27      	ldr	r3, [pc, #156]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005828:	4925      	ldr	r1, [pc, #148]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4313      	orrs	r3, r2
 800582e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005830:	4b24      	ldr	r3, [pc, #144]	@ (80058c4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a24      	ldr	r2, [pc, #144]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005836:	fba2 2303 	umull	r2, r3, r2, r3
 800583a:	099b      	lsrs	r3, r3, #6
 800583c:	2232      	movs	r2, #50	@ 0x32
 800583e:	fb02 f303 	mul.w	r3, r2, r3
 8005842:	4a21      	ldr	r2, [pc, #132]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005844:	fba2 2303 	umull	r2, r3, r2, r3
 8005848:	099b      	lsrs	r3, r3, #6
 800584a:	3301      	adds	r3, #1
 800584c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800584e:	e002      	b.n	8005856 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3b01      	subs	r3, #1
 8005854:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005856:	4b1a      	ldr	r3, [pc, #104]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <HAL_PWREx_ControlVoltageScaling+0x98>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1f3      	bne.n	8005850 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01b      	beq.n	80058a6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800586e:	4b15      	ldr	r3, [pc, #84]	@ (80058c4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a15      	ldr	r2, [pc, #84]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	099b      	lsrs	r3, r3, #6
 800587a:	2232      	movs	r2, #50	@ 0x32
 800587c:	fb02 f303 	mul.w	r3, r2, r3
 8005880:	4a11      	ldr	r2, [pc, #68]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	099b      	lsrs	r3, r3, #6
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800588c:	e002      	b.n	8005894 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3b01      	subs	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005894:	4b0a      	ldr	r3, [pc, #40]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f3      	bne.n	800588e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e000      	b.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	46020800 	.word	0x46020800
 80058c4:	2000000c 	.word	0x2000000c
 80058c8:	10624dd3 	.word	0x10624dd3

080058cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80058d0:	4b04      	ldr	r3, [pc, #16]	@ (80058e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80058d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80058d8:	4618      	mov	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	46020800 	.word	0x46020800

080058e8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80058f0:	4b22      	ldr	r3, [pc, #136]	@ (800597c <HAL_PWREx_ConfigSupply+0x94>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a22      	ldr	r2, [pc, #136]	@ (8005980 <HAL_PWREx_ConfigSupply+0x98>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	099b      	lsrs	r3, r3, #6
 80058fc:	2232      	movs	r2, #50	@ 0x32
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	4a1f      	ldr	r2, [pc, #124]	@ (8005980 <HAL_PWREx_ConfigSupply+0x98>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	099b      	lsrs	r3, r3, #6
 800590a:	3301      	adds	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d113      	bne.n	800593c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005914:	4b1b      	ldr	r3, [pc, #108]	@ (8005984 <HAL_PWREx_ConfigSupply+0x9c>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4a1a      	ldr	r2, [pc, #104]	@ (8005984 <HAL_PWREx_ConfigSupply+0x9c>)
 800591a:	f023 0302 	bic.w	r3, r3, #2
 800591e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005920:	e002      	b.n	8005928 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3b01      	subs	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005928:	4b16      	ldr	r3, [pc, #88]	@ (8005984 <HAL_PWREx_ConfigSupply+0x9c>)
 800592a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b02      	cmp	r3, #2
 8005932:	d116      	bne.n	8005962 <HAL_PWREx_ConfigSupply+0x7a>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f3      	bne.n	8005922 <HAL_PWREx_ConfigSupply+0x3a>
 800593a:	e012      	b.n	8005962 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800593c:	4b11      	ldr	r3, [pc, #68]	@ (8005984 <HAL_PWREx_ConfigSupply+0x9c>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	4a10      	ldr	r2, [pc, #64]	@ (8005984 <HAL_PWREx_ConfigSupply+0x9c>)
 8005942:	f043 0302 	orr.w	r3, r3, #2
 8005946:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005948:	e002      	b.n	8005950 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3b01      	subs	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005950:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <HAL_PWREx_ConfigSupply+0x9c>)
 8005952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <HAL_PWREx_ConfigSupply+0x7a>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f3      	bne.n	800594a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e000      	b.n	800596e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	2000000c 	.word	0x2000000c
 8005980:	10624dd3 	.word	0x10624dd3
 8005984:	46020800 	.word	0x46020800

08005988 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800598c:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	4a04      	ldr	r2, [pc, #16]	@ (80059a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005992:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005996:	6113      	str	r3, [r2, #16]
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	46020800 	.word	0x46020800

080059a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80059ac:	4b05      	ldr	r3, [pc, #20]	@ (80059c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80059ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b0:	4a04      	ldr	r2, [pc, #16]	@ (80059c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80059b8:	bf00      	nop
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	46020800 	.word	0x46020800

080059c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08e      	sub	sp, #56	@ 0x38
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80059d0:	2300      	movs	r3, #0
 80059d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d102      	bne.n	80059e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f000 bec8 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059e2:	4b99      	ldr	r3, [pc, #612]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f003 030c 	and.w	r3, r3, #12
 80059ea:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059ec:	4b96      	ldr	r3, [pc, #600]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 80059ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 816c 	beq.w	8005cdc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <HAL_RCC_OscConfig+0x52>
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0c:	2b0c      	cmp	r3, #12
 8005a0e:	f040 80de 	bne.w	8005bce <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	f040 80da 	bne.w	8005bce <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	f000 bea5 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a2c:	4b86      	ldr	r3, [pc, #536]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d004      	beq.n	8005a42 <HAL_RCC_OscConfig+0x7a>
 8005a38:	4b83      	ldr	r3, [pc, #524]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005a40:	e005      	b.n	8005a4e <HAL_RCC_OscConfig+0x86>
 8005a42:	4b81      	ldr	r3, [pc, #516]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d255      	bcs.n	8005afe <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 f9d9 	bl	8006e14 <RCC_SetFlashLatencyFromMSIRange>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f000 be82 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005a6e:	4b76      	ldr	r3, [pc, #472]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	4a75      	ldr	r2, [pc, #468]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005a74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a78:	6093      	str	r3, [r2, #8]
 8005a7a:	4b73      	ldr	r3, [pc, #460]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a86:	4970      	ldr	r1, [pc, #448]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a90:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005a94:	d309      	bcc.n	8005aaa <HAL_RCC_OscConfig+0xe2>
 8005a96:	4b6c      	ldr	r3, [pc, #432]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f023 021f 	bic.w	r2, r3, #31
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	4969      	ldr	r1, [pc, #420]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60cb      	str	r3, [r1, #12]
 8005aa8:	e07e      	b.n	8005ba8 <HAL_RCC_OscConfig+0x1e0>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	da0a      	bge.n	8005ac8 <HAL_RCC_OscConfig+0x100>
 8005ab2:	4b65      	ldr	r3, [pc, #404]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	015b      	lsls	r3, r3, #5
 8005ac0:	4961      	ldr	r1, [pc, #388]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60cb      	str	r3, [r1, #12]
 8005ac6:	e06f      	b.n	8005ba8 <HAL_RCC_OscConfig+0x1e0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad0:	d30a      	bcc.n	8005ae8 <HAL_RCC_OscConfig+0x120>
 8005ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	029b      	lsls	r3, r3, #10
 8005ae0:	4959      	ldr	r1, [pc, #356]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60cb      	str	r3, [r1, #12]
 8005ae6:	e05f      	b.n	8005ba8 <HAL_RCC_OscConfig+0x1e0>
 8005ae8:	4b57      	ldr	r3, [pc, #348]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	03db      	lsls	r3, r3, #15
 8005af6:	4954      	ldr	r1, [pc, #336]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60cb      	str	r3, [r1, #12]
 8005afc:	e054      	b.n	8005ba8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005afe:	4b52      	ldr	r3, [pc, #328]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	4a51      	ldr	r2, [pc, #324]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005b04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b08:	6093      	str	r3, [r2, #8]
 8005b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b16:	494c      	ldr	r1, [pc, #304]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b20:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005b24:	d309      	bcc.n	8005b3a <HAL_RCC_OscConfig+0x172>
 8005b26:	4b48      	ldr	r3, [pc, #288]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f023 021f 	bic.w	r2, r3, #31
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	4945      	ldr	r1, [pc, #276]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60cb      	str	r3, [r1, #12]
 8005b38:	e028      	b.n	8005b8c <HAL_RCC_OscConfig+0x1c4>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da0a      	bge.n	8005b58 <HAL_RCC_OscConfig+0x190>
 8005b42:	4b41      	ldr	r3, [pc, #260]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	015b      	lsls	r3, r3, #5
 8005b50:	493d      	ldr	r1, [pc, #244]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60cb      	str	r3, [r1, #12]
 8005b56:	e019      	b.n	8005b8c <HAL_RCC_OscConfig+0x1c4>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b60:	d30a      	bcc.n	8005b78 <HAL_RCC_OscConfig+0x1b0>
 8005b62:	4b39      	ldr	r3, [pc, #228]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	029b      	lsls	r3, r3, #10
 8005b70:	4935      	ldr	r1, [pc, #212]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60cb      	str	r3, [r1, #12]
 8005b76:	e009      	b.n	8005b8c <HAL_RCC_OscConfig+0x1c4>
 8005b78:	4b33      	ldr	r3, [pc, #204]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	03db      	lsls	r3, r3, #15
 8005b86:	4930      	ldr	r1, [pc, #192]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 f93c 	bl	8006e14 <RCC_SetFlashLatencyFromMSIRange>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f000 bde5 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005ba8:	f001 f8de 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005bac:	4b27      	ldr	r3, [pc, #156]	@ (8005c4c <HAL_RCC_OscConfig+0x284>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fe fa5b 	bl	800406c <HAL_InitTick>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 808a 	beq.w	8005cda <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bca:	f000 bdd2 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d066      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1b      	ldr	r2, [pc, #108]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005be2:	f7fe facd 	bl	8004180 <HAL_GetTick>
 8005be6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005be8:	e009      	b.n	8005bfe <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bea:	f7fe fac9 	bl	8004180 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d902      	bls.n	8005bfe <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	f000 bdba 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005bfe:	4b12      	ldr	r3, [pc, #72]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0ef      	beq.n	8005bea <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005c10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c14:	6093      	str	r3, [r2, #8]
 8005c16:	4b0c      	ldr	r3, [pc, #48]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c22:	4909      	ldr	r1, [pc, #36]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005c30:	d30e      	bcc.n	8005c50 <HAL_RCC_OscConfig+0x288>
 8005c32:	4b05      	ldr	r3, [pc, #20]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f023 021f 	bic.w	r2, r3, #31
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	4902      	ldr	r1, [pc, #8]	@ (8005c48 <HAL_RCC_OscConfig+0x280>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60cb      	str	r3, [r1, #12]
 8005c44:	e04a      	b.n	8005cdc <HAL_RCC_OscConfig+0x314>
 8005c46:	bf00      	nop
 8005c48:	46020c00 	.word	0x46020c00
 8005c4c:	20000010 	.word	0x20000010
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	da0a      	bge.n	8005c6e <HAL_RCC_OscConfig+0x2a6>
 8005c58:	4b98      	ldr	r3, [pc, #608]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	015b      	lsls	r3, r3, #5
 8005c66:	4995      	ldr	r1, [pc, #596]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60cb      	str	r3, [r1, #12]
 8005c6c:	e036      	b.n	8005cdc <HAL_RCC_OscConfig+0x314>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c76:	d30a      	bcc.n	8005c8e <HAL_RCC_OscConfig+0x2c6>
 8005c78:	4b90      	ldr	r3, [pc, #576]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	029b      	lsls	r3, r3, #10
 8005c86:	498d      	ldr	r1, [pc, #564]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60cb      	str	r3, [r1, #12]
 8005c8c:	e026      	b.n	8005cdc <HAL_RCC_OscConfig+0x314>
 8005c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	03db      	lsls	r3, r3, #15
 8005c9c:	4987      	ldr	r1, [pc, #540]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60cb      	str	r3, [r1, #12]
 8005ca2:	e01b      	b.n	8005cdc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005ca4:	4b85      	ldr	r3, [pc, #532]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a84      	ldr	r2, [pc, #528]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005cb0:	f7fe fa66 	bl	8004180 <HAL_GetTick>
 8005cb4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005cb6:	e009      	b.n	8005ccc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cb8:	f7fe fa62 	bl	8004180 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d902      	bls.n	8005ccc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	f000 bd53 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005ccc:	4b7b      	ldr	r3, [pc, #492]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1ef      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x2f0>
 8005cd8:	e000      	b.n	8005cdc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005cda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 808b 	beq.w	8005e00 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d005      	beq.n	8005cfc <HAL_RCC_OscConfig+0x334>
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf2:	2b0c      	cmp	r3, #12
 8005cf4:	d109      	bne.n	8005d0a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d17d      	bne.n	8005e00 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	f000 bd34 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d12:	d106      	bne.n	8005d22 <HAL_RCC_OscConfig+0x35a>
 8005d14:	4b69      	ldr	r3, [pc, #420]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a68      	ldr	r2, [pc, #416]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	e041      	b.n	8005da6 <HAL_RCC_OscConfig+0x3de>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d2a:	d112      	bne.n	8005d52 <HAL_RCC_OscConfig+0x38a>
 8005d2c:	4b63      	ldr	r3, [pc, #396]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a62      	ldr	r2, [pc, #392]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	4b60      	ldr	r3, [pc, #384]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a5f      	ldr	r2, [pc, #380]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d3e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	4b5d      	ldr	r3, [pc, #372]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a5c      	ldr	r2, [pc, #368]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	e029      	b.n	8005da6 <HAL_RCC_OscConfig+0x3de>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005d5a:	d112      	bne.n	8005d82 <HAL_RCC_OscConfig+0x3ba>
 8005d5c:	4b57      	ldr	r3, [pc, #348]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a56      	ldr	r2, [pc, #344]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	4b54      	ldr	r3, [pc, #336]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a53      	ldr	r2, [pc, #332]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	4b51      	ldr	r3, [pc, #324]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a50      	ldr	r2, [pc, #320]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	e011      	b.n	8005da6 <HAL_RCC_OscConfig+0x3de>
 8005d82:	4b4e      	ldr	r3, [pc, #312]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a4d      	ldr	r2, [pc, #308]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	4b4b      	ldr	r3, [pc, #300]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a4a      	ldr	r2, [pc, #296]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	4b48      	ldr	r3, [pc, #288]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a47      	ldr	r2, [pc, #284]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005da0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005da4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d014      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005dae:	f7fe f9e7 	bl	8004180 <HAL_GetTick>
 8005db2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005db4:	e009      	b.n	8005dca <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db6:	f7fe f9e3 	bl	8004180 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b64      	cmp	r3, #100	@ 0x64
 8005dc2:	d902      	bls.n	8005dca <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	f000 bcd4 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dca:	4b3c      	ldr	r3, [pc, #240]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0ef      	beq.n	8005db6 <HAL_RCC_OscConfig+0x3ee>
 8005dd6:	e013      	b.n	8005e00 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005dd8:	f7fe f9d2 	bl	8004180 <HAL_GetTick>
 8005ddc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dde:	e009      	b.n	8005df4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fe f9ce 	bl	8004180 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	@ 0x64
 8005dec:	d902      	bls.n	8005df4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	f000 bcbf 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005df4:	4b31      	ldr	r3, [pc, #196]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1ef      	bne.n	8005de0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d05f      	beq.n	8005ecc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d005      	beq.n	8005e1e <HAL_RCC_OscConfig+0x456>
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	2b0c      	cmp	r3, #12
 8005e16:	d114      	bne.n	8005e42 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d111      	bne.n	8005e42 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d102      	bne.n	8005e2c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f000 bca3 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005e2c:	4b23      	ldr	r3, [pc, #140]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	041b      	lsls	r3, r3, #16
 8005e3a:	4920      	ldr	r1, [pc, #128]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e40:	e044      	b.n	8005ecc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d024      	beq.n	8005e94 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e54:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005e56:	f7fe f993 	bl	8004180 <HAL_GetTick>
 8005e5a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e5c:	e009      	b.n	8005e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e5e:	f7fe f98f 	bl	8004180 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d902      	bls.n	8005e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	f000 bc80 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e72:	4b12      	ldr	r3, [pc, #72]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0ef      	beq.n	8005e5e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	041b      	lsls	r3, r3, #16
 8005e8c:	490b      	ldr	r1, [pc, #44]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	610b      	str	r3, [r1, #16]
 8005e92:	e01b      	b.n	8005ecc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005e94:	4b09      	ldr	r3, [pc, #36]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a08      	ldr	r2, [pc, #32]	@ (8005ebc <HAL_RCC_OscConfig+0x4f4>)
 8005e9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e9e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005ea0:	f7fe f96e 	bl	8004180 <HAL_GetTick>
 8005ea4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ea6:	e00b      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea8:	f7fe f96a 	bl	8004180 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d904      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	f000 bc5b 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
 8005ebc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ec0:	4baf      	ldr	r3, [pc, #700]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1ed      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80c8 	beq.w	800606a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005eda:	2300      	movs	r3, #0
 8005edc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ee0:	4ba7      	ldr	r3, [pc, #668]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d111      	bne.n	8005f12 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eee:	4ba4      	ldr	r3, [pc, #656]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ef4:	4aa2      	ldr	r2, [pc, #648]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005ef6:	f043 0304 	orr.w	r3, r3, #4
 8005efa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005efe:	4ba0      	ldr	r3, [pc, #640]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005f12:	4b9c      	ldr	r3, [pc, #624]	@ (8006184 <HAL_RCC_OscConfig+0x7bc>)
 8005f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d119      	bne.n	8005f52 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005f1e:	4b99      	ldr	r3, [pc, #612]	@ (8006184 <HAL_RCC_OscConfig+0x7bc>)
 8005f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f22:	4a98      	ldr	r2, [pc, #608]	@ (8006184 <HAL_RCC_OscConfig+0x7bc>)
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f2a:	f7fe f929 	bl	8004180 <HAL_GetTick>
 8005f2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005f30:	e009      	b.n	8005f46 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f32:	f7fe f925 	bl	8004180 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d902      	bls.n	8005f46 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	f000 bc16 	b.w	8006772 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005f46:	4b8f      	ldr	r3, [pc, #572]	@ (8006184 <HAL_RCC_OscConfig+0x7bc>)
 8005f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0ef      	beq.n	8005f32 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d05f      	beq.n	800601a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005f5a:	4b89      	ldr	r3, [pc, #548]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f60:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d037      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d006      	beq.n	8005f88 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e3f4      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d01b      	beq.n	8005fca <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005f92:	4b7b      	ldr	r3, [pc, #492]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f98:	4a79      	ldr	r2, [pc, #484]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005f9a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8005fa2:	f7fe f8ed 	bl	8004180 <HAL_GetTick>
 8005fa6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005faa:	f7fe f8e9 	bl	8004180 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b05      	cmp	r3, #5
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e3da      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005fbc:	4b70      	ldr	r3, [pc, #448]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1ef      	bne.n	8005faa <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005fca:	4b6d      	ldr	r3, [pc, #436]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fd0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	4969      	ldr	r1, [pc, #420]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005fe0:	4b67      	ldr	r3, [pc, #412]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fe6:	4a66      	ldr	r2, [pc, #408]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8005fe8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005ff0:	f7fe f8c6 	bl	8004180 <HAL_GetTick>
 8005ff4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005ff6:	e008      	b.n	800600a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ff8:	f7fe f8c2 	bl	8004180 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b05      	cmp	r3, #5
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e3b3      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800600a:	4b5d      	ldr	r3, [pc, #372]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 800600c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006010:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0ef      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x630>
 8006018:	e01b      	b.n	8006052 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800601a:	4b59      	ldr	r3, [pc, #356]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 800601c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006020:	4a57      	ldr	r2, [pc, #348]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8006022:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006026:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800602a:	f7fe f8a9 	bl	8004180 <HAL_GetTick>
 800602e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006032:	f7fe f8a5 	bl	8004180 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b05      	cmp	r3, #5
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e396      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006044:	4b4e      	ldr	r3, [pc, #312]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8006046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800604a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1ef      	bne.n	8006032 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006052:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006056:	2b01      	cmp	r3, #1
 8006058:	d107      	bne.n	800606a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800605a:	4b49      	ldr	r3, [pc, #292]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 800605c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006060:	4a47      	ldr	r2, [pc, #284]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8006062:	f023 0304 	bic.w	r3, r3, #4
 8006066:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8111 	beq.w	800629a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006078:	2300      	movs	r3, #0
 800607a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800607e:	4b40      	ldr	r3, [pc, #256]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8006080:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d111      	bne.n	80060b0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800608c:	4b3c      	ldr	r3, [pc, #240]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 800608e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006092:	4a3b      	ldr	r2, [pc, #236]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8006094:	f043 0304 	orr.w	r3, r3, #4
 8006098:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800609c:	4b38      	ldr	r3, [pc, #224]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 800609e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80060b0:	4b34      	ldr	r3, [pc, #208]	@ (8006184 <HAL_RCC_OscConfig+0x7bc>)
 80060b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d118      	bne.n	80060ee <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80060bc:	4b31      	ldr	r3, [pc, #196]	@ (8006184 <HAL_RCC_OscConfig+0x7bc>)
 80060be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c0:	4a30      	ldr	r2, [pc, #192]	@ (8006184 <HAL_RCC_OscConfig+0x7bc>)
 80060c2:	f043 0301 	orr.w	r3, r3, #1
 80060c6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060c8:	f7fe f85a 	bl	8004180 <HAL_GetTick>
 80060cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060d0:	f7fe f856 	bl	8004180 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e347      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80060e2:	4b28      	ldr	r3, [pc, #160]	@ (8006184 <HAL_RCC_OscConfig+0x7bc>)
 80060e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0f0      	beq.n	80060d0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01f      	beq.n	800613a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d010      	beq.n	8006128 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006106:	4b1e      	ldr	r3, [pc, #120]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8006108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800610c:	4a1c      	ldr	r2, [pc, #112]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 800610e:	f043 0304 	orr.w	r3, r3, #4
 8006112:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006116:	4b1a      	ldr	r3, [pc, #104]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8006118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800611c:	4a18      	ldr	r2, [pc, #96]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 800611e:	f043 0301 	orr.w	r3, r3, #1
 8006122:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006126:	e018      	b.n	800615a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006128:	4b15      	ldr	r3, [pc, #84]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 800612a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800612e:	4a14      	ldr	r2, [pc, #80]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006138:	e00f      	b.n	800615a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800613a:	4b11      	ldr	r3, [pc, #68]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 800613c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006140:	4a0f      	ldr	r2, [pc, #60]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8006142:	f023 0301 	bic.w	r3, r3, #1
 8006146:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800614a:	4b0d      	ldr	r3, [pc, #52]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 800614c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006150:	4a0b      	ldr	r2, [pc, #44]	@ (8006180 <HAL_RCC_OscConfig+0x7b8>)
 8006152:	f023 0304 	bic.w	r3, r3, #4
 8006156:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d057      	beq.n	8006212 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006162:	f7fe f80d 	bl	8004180 <HAL_GetTick>
 8006166:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006168:	e00e      	b.n	8006188 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800616a:	f7fe f809 	bl	8004180 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006178:	4293      	cmp	r3, r2
 800617a:	d905      	bls.n	8006188 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e2f8      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
 8006180:	46020c00 	.word	0x46020c00
 8006184:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006188:	4b9c      	ldr	r3, [pc, #624]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 800618a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0e9      	beq.n	800616a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01b      	beq.n	80061da <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061a2:	4b96      	ldr	r3, [pc, #600]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80061a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061a8:	4a94      	ldr	r2, [pc, #592]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80061aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80061b2:	e00a      	b.n	80061ca <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b4:	f7fd ffe4 	bl	8004180 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e2d3      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80061ca:	4b8c      	ldr	r3, [pc, #560]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80061cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0ed      	beq.n	80061b4 <HAL_RCC_OscConfig+0x7ec>
 80061d8:	e053      	b.n	8006282 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061da:	4b88      	ldr	r3, [pc, #544]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80061dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061e0:	4a86      	ldr	r2, [pc, #536]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80061e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061ea:	e00a      	b.n	8006202 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ec:	f7fd ffc8 	bl	8004180 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e2b7      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006202:	4b7e      	ldr	r3, [pc, #504]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 8006204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1ed      	bne.n	80061ec <HAL_RCC_OscConfig+0x824>
 8006210:	e037      	b.n	8006282 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006212:	f7fd ffb5 	bl	8004180 <HAL_GetTick>
 8006216:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006218:	e00a      	b.n	8006230 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800621a:	f7fd ffb1 	bl	8004180 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006228:	4293      	cmp	r3, r2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e2a0      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006230:	4b72      	ldr	r3, [pc, #456]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 8006232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1ed      	bne.n	800621a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800623e:	4b6f      	ldr	r3, [pc, #444]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 8006240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01a      	beq.n	8006282 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800624c:	4b6b      	ldr	r3, [pc, #428]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 800624e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006252:	4a6a      	ldr	r2, [pc, #424]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 8006254:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006258:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800625c:	e00a      	b.n	8006274 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800625e:	f7fd ff8f 	bl	8004180 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800626c:	4293      	cmp	r3, r2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e27e      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006274:	4b61      	ldr	r3, [pc, #388]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 8006276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800627a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1ed      	bne.n	800625e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006282:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006286:	2b01      	cmp	r3, #1
 8006288:	d107      	bne.n	800629a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800628a:	4b5c      	ldr	r3, [pc, #368]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 800628c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006290:	4a5a      	ldr	r2, [pc, #360]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 8006292:	f023 0304 	bic.w	r3, r3, #4
 8006296:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d036      	beq.n	8006314 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d019      	beq.n	80062e2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80062ae:	4b53      	ldr	r3, [pc, #332]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a52      	ldr	r2, [pc, #328]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80062b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062b8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80062ba:	f7fd ff61 	bl	8004180 <HAL_GetTick>
 80062be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062c2:	f7fd ff5d 	bl	8004180 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e24e      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80062d4:	4b49      	ldr	r3, [pc, #292]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0f0      	beq.n	80062c2 <HAL_RCC_OscConfig+0x8fa>
 80062e0:	e018      	b.n	8006314 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80062e2:	4b46      	ldr	r3, [pc, #280]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a45      	ldr	r2, [pc, #276]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80062e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062ec:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80062ee:	f7fd ff47 	bl	8004180 <HAL_GetTick>
 80062f2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062f6:	f7fd ff43 	bl	8004180 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e234      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006308:	4b3c      	ldr	r3, [pc, #240]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1f0      	bne.n	80062f6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800631c:	2b00      	cmp	r3, #0
 800631e:	d036      	beq.n	800638e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006324:	2b00      	cmp	r3, #0
 8006326:	d019      	beq.n	800635c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006328:	4b34      	ldr	r3, [pc, #208]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a33      	ldr	r2, [pc, #204]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 800632e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006332:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006334:	f7fd ff24 	bl	8004180 <HAL_GetTick>
 8006338:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800633c:	f7fd ff20 	bl	8004180 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e211      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800634e:	4b2b      	ldr	r3, [pc, #172]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0f0      	beq.n	800633c <HAL_RCC_OscConfig+0x974>
 800635a:	e018      	b.n	800638e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800635c:	4b27      	ldr	r3, [pc, #156]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a26      	ldr	r2, [pc, #152]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 8006362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006366:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006368:	f7fd ff0a 	bl	8004180 <HAL_GetTick>
 800636c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006370:	f7fd ff06 	bl	8004180 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e1f7      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006382:	4b1e      	ldr	r3, [pc, #120]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1f0      	bne.n	8006370 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d07f      	beq.n	800649a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d062      	beq.n	8006468 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80063a2:	4b16      	ldr	r3, [pc, #88]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	4a15      	ldr	r2, [pc, #84]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80063a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063ac:	6093      	str	r3, [r2, #8]
 80063ae:	4b13      	ldr	r3, [pc, #76]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ba:	4910      	ldr	r1, [pc, #64]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80063c8:	d309      	bcc.n	80063de <HAL_RCC_OscConfig+0xa16>
 80063ca:	4b0c      	ldr	r3, [pc, #48]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f023 021f 	bic.w	r2, r3, #31
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	4909      	ldr	r1, [pc, #36]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	60cb      	str	r3, [r1, #12]
 80063dc:	e02a      	b.n	8006434 <HAL_RCC_OscConfig+0xa6c>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	da0c      	bge.n	8006400 <HAL_RCC_OscConfig+0xa38>
 80063e6:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	015b      	lsls	r3, r3, #5
 80063f4:	4901      	ldr	r1, [pc, #4]	@ (80063fc <HAL_RCC_OscConfig+0xa34>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60cb      	str	r3, [r1, #12]
 80063fa:	e01b      	b.n	8006434 <HAL_RCC_OscConfig+0xa6c>
 80063fc:	46020c00 	.word	0x46020c00
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006408:	d30a      	bcc.n	8006420 <HAL_RCC_OscConfig+0xa58>
 800640a:	4ba1      	ldr	r3, [pc, #644]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	029b      	lsls	r3, r3, #10
 8006418:	499d      	ldr	r1, [pc, #628]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 800641a:	4313      	orrs	r3, r2
 800641c:	60cb      	str	r3, [r1, #12]
 800641e:	e009      	b.n	8006434 <HAL_RCC_OscConfig+0xa6c>
 8006420:	4b9b      	ldr	r3, [pc, #620]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	03db      	lsls	r3, r3, #15
 800642e:	4998      	ldr	r1, [pc, #608]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006430:	4313      	orrs	r3, r2
 8006432:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006434:	4b96      	ldr	r3, [pc, #600]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a95      	ldr	r2, [pc, #596]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 800643a:	f043 0310 	orr.w	r3, r3, #16
 800643e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006440:	f7fd fe9e 	bl	8004180 <HAL_GetTick>
 8006444:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006448:	f7fd fe9a 	bl	8004180 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e18b      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800645a:	4b8d      	ldr	r3, [pc, #564]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f0      	beq.n	8006448 <HAL_RCC_OscConfig+0xa80>
 8006466:	e018      	b.n	800649a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006468:	4b89      	ldr	r3, [pc, #548]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a88      	ldr	r2, [pc, #544]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 800646e:	f023 0310 	bic.w	r3, r3, #16
 8006472:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006474:	f7fd fe84 	bl	8004180 <HAL_GetTick>
 8006478:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800647c:	f7fd fe80 	bl	8004180 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e171      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800648e:	4b80      	ldr	r3, [pc, #512]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f0      	bne.n	800647c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8166 	beq.w	8006770 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064aa:	4b79      	ldr	r3, [pc, #484]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f003 030c 	and.w	r3, r3, #12
 80064b2:	2b0c      	cmp	r3, #12
 80064b4:	f000 80f2 	beq.w	800669c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064bc:	2b02      	cmp	r3, #2
 80064be:	f040 80c5 	bne.w	800664c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80064c2:	4b73      	ldr	r3, [pc, #460]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a72      	ldr	r2, [pc, #456]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80064c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80064ce:	f7fd fe57 	bl	8004180 <HAL_GetTick>
 80064d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064d6:	f7fd fe53 	bl	8004180 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e144      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80064e8:	4b69      	ldr	r3, [pc, #420]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1f0      	bne.n	80064d6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064f4:	4b66      	ldr	r3, [pc, #408]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80064f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d111      	bne.n	8006526 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006502:	4b63      	ldr	r3, [pc, #396]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006508:	4a61      	ldr	r2, [pc, #388]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 800650a:	f043 0304 	orr.w	r3, r3, #4
 800650e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006512:	4b5f      	ldr	r3, [pc, #380]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006520:	2301      	movs	r3, #1
 8006522:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006526:	4b5b      	ldr	r3, [pc, #364]	@ (8006694 <HAL_RCC_OscConfig+0xccc>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800652e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006532:	d102      	bne.n	800653a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006534:	2301      	movs	r3, #1
 8006536:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800653a:	4b56      	ldr	r3, [pc, #344]	@ (8006694 <HAL_RCC_OscConfig+0xccc>)
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	4a55      	ldr	r2, [pc, #340]	@ (8006694 <HAL_RCC_OscConfig+0xccc>)
 8006540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006544:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006546:	4b52      	ldr	r3, [pc, #328]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800655a:	3a01      	subs	r2, #1
 800655c:	0212      	lsls	r2, r2, #8
 800655e:	4311      	orrs	r1, r2
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006564:	430a      	orrs	r2, r1
 8006566:	494a      	ldr	r1, [pc, #296]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006568:	4313      	orrs	r3, r2
 800656a:	628b      	str	r3, [r1, #40]	@ 0x28
 800656c:	4b48      	ldr	r3, [pc, #288]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 800656e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006570:	4b49      	ldr	r3, [pc, #292]	@ (8006698 <HAL_RCC_OscConfig+0xcd0>)
 8006572:	4013      	ands	r3, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006578:	3a01      	subs	r2, #1
 800657a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006582:	3a01      	subs	r2, #1
 8006584:	0252      	lsls	r2, r2, #9
 8006586:	b292      	uxth	r2, r2
 8006588:	4311      	orrs	r1, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800658e:	3a01      	subs	r2, #1
 8006590:	0412      	lsls	r2, r2, #16
 8006592:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006596:	4311      	orrs	r1, r2
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800659c:	3a01      	subs	r2, #1
 800659e:	0612      	lsls	r2, r2, #24
 80065a0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80065a4:	430a      	orrs	r2, r1
 80065a6:	493a      	ldr	r1, [pc, #232]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80065ac:	4b38      	ldr	r3, [pc, #224]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80065ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b0:	4a37      	ldr	r2, [pc, #220]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80065b2:	f023 0310 	bic.w	r3, r3, #16
 80065b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065bc:	4a34      	ldr	r2, [pc, #208]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80065c2:	4b33      	ldr	r3, [pc, #204]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80065c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c6:	4a32      	ldr	r2, [pc, #200]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80065c8:	f043 0310 	orr.w	r3, r3, #16
 80065cc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80065ce:	4b30      	ldr	r3, [pc, #192]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80065d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d2:	f023 020c 	bic.w	r2, r3, #12
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065da:	492d      	ldr	r1, [pc, #180]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80065e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d105      	bne.n	80065f4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80065e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006694 <HAL_RCC_OscConfig+0xccc>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	4a29      	ldr	r2, [pc, #164]	@ (8006694 <HAL_RCC_OscConfig+0xccc>)
 80065ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065f2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80065f4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d107      	bne.n	800660c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80065fc:	4b24      	ldr	r3, [pc, #144]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 80065fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006602:	4a23      	ldr	r2, [pc, #140]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006604:	f023 0304 	bic.w	r3, r3, #4
 8006608:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800660c:	4b20      	ldr	r3, [pc, #128]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a1f      	ldr	r2, [pc, #124]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006616:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006618:	f7fd fdb2 	bl	8004180 <HAL_GetTick>
 800661c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006620:	f7fd fdae 	bl	8004180 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e09f      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006632:	4b17      	ldr	r3, [pc, #92]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f0      	beq.n	8006620 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800663e:	4b14      	ldr	r3, [pc, #80]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006642:	4a13      	ldr	r2, [pc, #76]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006644:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006648:	6293      	str	r3, [r2, #40]	@ 0x28
 800664a:	e091      	b.n	8006770 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800664c:	4b10      	ldr	r3, [pc, #64]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0f      	ldr	r2, [pc, #60]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006656:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006658:	f7fd fd92 	bl	8004180 <HAL_GetTick>
 800665c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006660:	f7fd fd8e 	bl	8004180 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e07f      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006672:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f0      	bne.n	8006660 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800667e:	4b04      	ldr	r3, [pc, #16]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006682:	4a03      	ldr	r2, [pc, #12]	@ (8006690 <HAL_RCC_OscConfig+0xcc8>)
 8006684:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006688:	f023 0303 	bic.w	r3, r3, #3
 800668c:	6293      	str	r3, [r2, #40]	@ 0x28
 800668e:	e06f      	b.n	8006770 <HAL_RCC_OscConfig+0xda8>
 8006690:	46020c00 	.word	0x46020c00
 8006694:	46020800 	.word	0x46020800
 8006698:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800669c:	4b37      	ldr	r3, [pc, #220]	@ (800677c <HAL_RCC_OscConfig+0xdb4>)
 800669e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066a2:	4b36      	ldr	r3, [pc, #216]	@ (800677c <HAL_RCC_OscConfig+0xdb4>)
 80066a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d039      	beq.n	8006724 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f003 0203 	and.w	r2, r3, #3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d132      	bne.n	8006724 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	0a1b      	lsrs	r3, r3, #8
 80066c2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ca:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d129      	bne.n	8006724 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80066da:	429a      	cmp	r2, r3
 80066dc:	d122      	bne.n	8006724 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066e8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d11a      	bne.n	8006724 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	0a5b      	lsrs	r3, r3, #9
 80066f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d111      	bne.n	8006724 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	0c1b      	lsrs	r3, r3, #16
 8006704:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800670c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800670e:	429a      	cmp	r2, r3
 8006710:	d108      	bne.n	8006724 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	0e1b      	lsrs	r3, r3, #24
 8006716:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006720:	429a      	cmp	r2, r3
 8006722:	d001      	beq.n	8006728 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e024      	b.n	8006772 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006728:	4b14      	ldr	r3, [pc, #80]	@ (800677c <HAL_RCC_OscConfig+0xdb4>)
 800672a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800672c:	08db      	lsrs	r3, r3, #3
 800672e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006736:	429a      	cmp	r2, r3
 8006738:	d01a      	beq.n	8006770 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800673a:	4b10      	ldr	r3, [pc, #64]	@ (800677c <HAL_RCC_OscConfig+0xdb4>)
 800673c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673e:	4a0f      	ldr	r2, [pc, #60]	@ (800677c <HAL_RCC_OscConfig+0xdb4>)
 8006740:	f023 0310 	bic.w	r3, r3, #16
 8006744:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006746:	f7fd fd1b 	bl	8004180 <HAL_GetTick>
 800674a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800674c:	bf00      	nop
 800674e:	f7fd fd17 	bl	8004180 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	4293      	cmp	r3, r2
 8006758:	d0f9      	beq.n	800674e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800675e:	4a07      	ldr	r2, [pc, #28]	@ (800677c <HAL_RCC_OscConfig+0xdb4>)
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006764:	4b05      	ldr	r3, [pc, #20]	@ (800677c <HAL_RCC_OscConfig+0xdb4>)
 8006766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006768:	4a04      	ldr	r2, [pc, #16]	@ (800677c <HAL_RCC_OscConfig+0xdb4>)
 800676a:	f043 0310 	orr.w	r3, r3, #16
 800676e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3738      	adds	r7, #56	@ 0x38
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	46020c00 	.word	0x46020c00

08006780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e1d9      	b.n	8006b48 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006794:	4b9b      	ldr	r3, [pc, #620]	@ (8006a04 <HAL_RCC_ClockConfig+0x284>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 030f 	and.w	r3, r3, #15
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d910      	bls.n	80067c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067a2:	4b98      	ldr	r3, [pc, #608]	@ (8006a04 <HAL_RCC_ClockConfig+0x284>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f023 020f 	bic.w	r2, r3, #15
 80067aa:	4996      	ldr	r1, [pc, #600]	@ (8006a04 <HAL_RCC_ClockConfig+0x284>)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b2:	4b94      	ldr	r3, [pc, #592]	@ (8006a04 <HAL_RCC_ClockConfig+0x284>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d001      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e1c1      	b.n	8006b48 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d010      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	4b8c      	ldr	r3, [pc, #560]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 80067d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067dc:	429a      	cmp	r2, r3
 80067de:	d908      	bls.n	80067f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80067e0:	4b89      	ldr	r3, [pc, #548]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 80067e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	4986      	ldr	r1, [pc, #536]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d012      	beq.n	8006824 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	4b81      	ldr	r3, [pc, #516]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	091b      	lsrs	r3, r3, #4
 8006808:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800680c:	429a      	cmp	r2, r3
 800680e:	d909      	bls.n	8006824 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006810:	4b7d      	ldr	r3, [pc, #500]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	497a      	ldr	r1, [pc, #488]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006820:	4313      	orrs	r3, r2
 8006822:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d010      	beq.n	8006852 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	4b74      	ldr	r3, [pc, #464]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800683c:	429a      	cmp	r2, r3
 800683e:	d908      	bls.n	8006852 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006840:	4b71      	ldr	r3, [pc, #452]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	496e      	ldr	r1, [pc, #440]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 800684e:	4313      	orrs	r3, r2
 8006850:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d010      	beq.n	8006880 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	4b69      	ldr	r3, [pc, #420]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	429a      	cmp	r2, r3
 800686c:	d908      	bls.n	8006880 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800686e:	4b66      	ldr	r3, [pc, #408]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	f023 020f 	bic.w	r2, r3, #15
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	4963      	ldr	r1, [pc, #396]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 800687c:	4313      	orrs	r3, r2
 800687e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 80d2 	beq.w	8006a32 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b03      	cmp	r3, #3
 8006898:	d143      	bne.n	8006922 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800689a:	4b5b      	ldr	r3, [pc, #364]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 800689c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d110      	bne.n	80068ca <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80068a8:	4b57      	ldr	r3, [pc, #348]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 80068aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068ae:	4a56      	ldr	r2, [pc, #344]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 80068b0:	f043 0304 	orr.w	r3, r3, #4
 80068b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80068b8:	4b53      	ldr	r3, [pc, #332]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 80068ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	60bb      	str	r3, [r7, #8]
 80068c4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80068c6:	2301      	movs	r3, #1
 80068c8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80068ca:	f7fd fc59 	bl	8004180 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80068d0:	4b4e      	ldr	r3, [pc, #312]	@ (8006a0c <HAL_RCC_ClockConfig+0x28c>)
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00f      	beq.n	80068fc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80068de:	f7fd fc4f 	bl	8004180 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e12b      	b.n	8006b48 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80068f0:	4b46      	ldr	r3, [pc, #280]	@ (8006a0c <HAL_RCC_ClockConfig+0x28c>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0f0      	beq.n	80068de <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d107      	bne.n	8006912 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006902:	4b41      	ldr	r3, [pc, #260]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006904:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006908:	4a3f      	ldr	r2, [pc, #252]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 800690a:	f023 0304 	bic.w	r3, r3, #4
 800690e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006912:	4b3d      	ldr	r3, [pc, #244]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d121      	bne.n	8006962 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e112      	b.n	8006b48 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d107      	bne.n	800693a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800692a:	4b37      	ldr	r3, [pc, #220]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d115      	bne.n	8006962 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e106      	b.n	8006b48 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d107      	bne.n	8006952 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006942:	4b31      	ldr	r3, [pc, #196]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d109      	bne.n	8006962 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e0fa      	b.n	8006b48 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006952:	4b2d      	ldr	r3, [pc, #180]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e0f2      	b.n	8006b48 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006962:	4b29      	ldr	r3, [pc, #164]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f023 0203 	bic.w	r2, r3, #3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	4926      	ldr	r1, [pc, #152]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 8006970:	4313      	orrs	r3, r2
 8006972:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006974:	f7fd fc04 	bl	8004180 <HAL_GetTick>
 8006978:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b03      	cmp	r3, #3
 8006980:	d112      	bne.n	80069a8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006982:	e00a      	b.n	800699a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006984:	f7fd fbfc 	bl	8004180 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006992:	4293      	cmp	r3, r2
 8006994:	d901      	bls.n	800699a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e0d6      	b.n	8006b48 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800699a:	4b1b      	ldr	r3, [pc, #108]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f003 030c 	and.w	r3, r3, #12
 80069a2:	2b0c      	cmp	r3, #12
 80069a4:	d1ee      	bne.n	8006984 <HAL_RCC_ClockConfig+0x204>
 80069a6:	e044      	b.n	8006a32 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d112      	bne.n	80069d6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80069b0:	e00a      	b.n	80069c8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b2:	f7fd fbe5 	bl	8004180 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e0bf      	b.n	8006b48 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80069c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f003 030c 	and.w	r3, r3, #12
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d1ee      	bne.n	80069b2 <HAL_RCC_ClockConfig+0x232>
 80069d4:	e02d      	b.n	8006a32 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d123      	bne.n	8006a26 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80069de:	e00a      	b.n	80069f6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e0:	f7fd fbce 	bl	8004180 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e0a8      	b.n	8006b48 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80069f6:	4b04      	ldr	r3, [pc, #16]	@ (8006a08 <HAL_RCC_ClockConfig+0x288>)
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f003 030c 	and.w	r3, r3, #12
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1ee      	bne.n	80069e0 <HAL_RCC_ClockConfig+0x260>
 8006a02:	e016      	b.n	8006a32 <HAL_RCC_ClockConfig+0x2b2>
 8006a04:	40022000 	.word	0x40022000
 8006a08:	46020c00 	.word	0x46020c00
 8006a0c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a10:	f7fd fbb6 	bl	8004180 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e090      	b.n	8006b48 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a26:	4b4a      	ldr	r3, [pc, #296]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f003 030c 	and.w	r3, r3, #12
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d1ee      	bne.n	8006a10 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d010      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	4b43      	ldr	r3, [pc, #268]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d208      	bcs.n	8006a60 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006a4e:	4b40      	ldr	r3, [pc, #256]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	f023 020f 	bic.w	r2, r3, #15
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	493d      	ldr	r1, [pc, #244]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a60:	4b3c      	ldr	r3, [pc, #240]	@ (8006b54 <HAL_RCC_ClockConfig+0x3d4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d210      	bcs.n	8006a90 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6e:	4b39      	ldr	r3, [pc, #228]	@ (8006b54 <HAL_RCC_ClockConfig+0x3d4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f023 020f 	bic.w	r2, r3, #15
 8006a76:	4937      	ldr	r1, [pc, #220]	@ (8006b54 <HAL_RCC_ClockConfig+0x3d4>)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7e:	4b35      	ldr	r3, [pc, #212]	@ (8006b54 <HAL_RCC_ClockConfig+0x3d4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e05b      	b.n	8006b48 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d010      	beq.n	8006abe <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d208      	bcs.n	8006abe <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006aac:	4b28      	ldr	r3, [pc, #160]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	4925      	ldr	r1, [pc, #148]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d012      	beq.n	8006af0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	4b20      	ldr	r3, [pc, #128]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	091b      	lsrs	r3, r3, #4
 8006ad4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d209      	bcs.n	8006af0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006adc:	4b1c      	ldr	r3, [pc, #112]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	4919      	ldr	r1, [pc, #100]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d010      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	695a      	ldr	r2, [r3, #20]
 8006b00:	4b13      	ldr	r3, [pc, #76]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d208      	bcs.n	8006b1e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006b0c:	4b10      	ldr	r3, [pc, #64]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	490d      	ldr	r1, [pc, #52]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006b1e:	f000 f821 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8006b22:	4602      	mov	r2, r0
 8006b24:	4b0a      	ldr	r3, [pc, #40]	@ (8006b50 <HAL_RCC_ClockConfig+0x3d0>)
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	490a      	ldr	r1, [pc, #40]	@ (8006b58 <HAL_RCC_ClockConfig+0x3d8>)
 8006b2e:	5ccb      	ldrb	r3, [r1, r3]
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
 8006b34:	4a09      	ldr	r2, [pc, #36]	@ (8006b5c <HAL_RCC_ClockConfig+0x3dc>)
 8006b36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006b38:	4b09      	ldr	r3, [pc, #36]	@ (8006b60 <HAL_RCC_ClockConfig+0x3e0>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fd fa95 	bl	800406c <HAL_InitTick>
 8006b42:	4603      	mov	r3, r0
 8006b44:	73fb      	strb	r3, [r7, #15]

  return status;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	46020c00 	.word	0x46020c00
 8006b54:	40022000 	.word	0x40022000
 8006b58:	0800f0d8 	.word	0x0800f0d8
 8006b5c:	2000000c 	.word	0x2000000c
 8006b60:	20000010 	.word	0x20000010

08006b64 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b08b      	sub	sp, #44	@ 0x2c
 8006b68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b72:	4b78      	ldr	r3, [pc, #480]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f003 030c 	and.w	r3, r3, #12
 8006b7a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b7c:	4b75      	ldr	r3, [pc, #468]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_RCC_GetSysClockFreq+0x34>
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	2b0c      	cmp	r3, #12
 8006b90:	d121      	bne.n	8006bd6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d11e      	bne.n	8006bd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006b98:	4b6e      	ldr	r3, [pc, #440]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d107      	bne.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006ba4:	4b6b      	ldr	r3, [pc, #428]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006baa:	0b1b      	lsrs	r3, r3, #12
 8006bac:	f003 030f 	and.w	r3, r3, #15
 8006bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bb2:	e005      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006bb4:	4b67      	ldr	r3, [pc, #412]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	0f1b      	lsrs	r3, r3, #28
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006bc0:	4a65      	ldr	r2, [pc, #404]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d110      	bne.n	8006bf2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006bd4:	e00d      	b.n	8006bf2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f003 030c 	and.w	r3, r3, #12
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d102      	bne.n	8006be8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006be2:	4b5e      	ldr	r3, [pc, #376]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	e004      	b.n	8006bf2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b08      	cmp	r3, #8
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006bee:	4b5b      	ldr	r3, [pc, #364]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006bf0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b0c      	cmp	r3, #12
 8006bf6:	f040 80a5 	bne.w	8006d44 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006bfa:	4b56      	ldr	r3, [pc, #344]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006c04:	4b53      	ldr	r3, [pc, #332]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c08:	0a1b      	lsrs	r3, r3, #8
 8006c0a:	f003 030f 	and.w	r3, r3, #15
 8006c0e:	3301      	adds	r3, #1
 8006c10:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006c12:	4b50      	ldr	r3, [pc, #320]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	091b      	lsrs	r3, r3, #4
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c22:	08db      	lsrs	r3, r3, #3
 8006c24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	fb02 f303 	mul.w	r3, r2, r3
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c36:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d003      	beq.n	8006c48 <HAL_RCC_GetSysClockFreq+0xe4>
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d022      	beq.n	8006c8c <HAL_RCC_GetSysClockFreq+0x128>
 8006c46:	e043      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006d60 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006c6a:	ed97 6a01 	vldr	s12, [r7, #4]
 8006c6e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006d64 <HAL_RCC_GetSysClockFreq+0x200>
 8006c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c8a:	e046      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c96:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8006d60 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006cae:	ed97 6a01 	vldr	s12, [r7, #4]
 8006cb2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006d64 <HAL_RCC_GetSysClockFreq+0x200>
 8006cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cce:	e024      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf0:	ee07 3a90 	vmov	s15, r3
 8006cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006cf8:	ed97 6a01 	vldr	s12, [r7, #4]
 8006cfc:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8006d64 <HAL_RCC_GetSysClockFreq+0x200>
 8006d00:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006d08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d18:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d1e:	0e1b      	lsrs	r3, r3, #24
 8006d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d24:	3301      	adds	r3, #1
 8006d26:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d3e:	ee17 3a90 	vmov	r3, s15
 8006d42:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006d44:	6a3b      	ldr	r3, [r7, #32]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	372c      	adds	r7, #44	@ 0x2c
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	46020c00 	.word	0x46020c00
 8006d58:	0800f0f0 	.word	0x0800f0f0
 8006d5c:	00f42400 	.word	0x00f42400
 8006d60:	4b742400 	.word	0x4b742400
 8006d64:	46000000 	.word	0x46000000

08006d68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006d6c:	f7ff fefa 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8006d70:	4602      	mov	r2, r0
 8006d72:	4b07      	ldr	r3, [pc, #28]	@ (8006d90 <HAL_RCC_GetHCLKFreq+0x28>)
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	4906      	ldr	r1, [pc, #24]	@ (8006d94 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006d7c:	5ccb      	ldrb	r3, [r1, r3]
 8006d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d82:	4a05      	ldr	r2, [pc, #20]	@ (8006d98 <HAL_RCC_GetHCLKFreq+0x30>)
 8006d84:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006d86:	4b04      	ldr	r3, [pc, #16]	@ (8006d98 <HAL_RCC_GetHCLKFreq+0x30>)
 8006d88:	681b      	ldr	r3, [r3, #0]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	46020c00 	.word	0x46020c00
 8006d94:	0800f0d8 	.word	0x0800f0d8
 8006d98:	2000000c 	.word	0x2000000c

08006d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006da0:	f7ff ffe2 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8006da4:	4602      	mov	r2, r0
 8006da6:	4b05      	ldr	r3, [pc, #20]	@ (8006dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	091b      	lsrs	r3, r3, #4
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	4903      	ldr	r1, [pc, #12]	@ (8006dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006db2:	5ccb      	ldrb	r3, [r1, r3]
 8006db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	46020c00 	.word	0x46020c00
 8006dc0:	0800f0e8 	.word	0x0800f0e8

08006dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006dc8:	f7ff ffce 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	0a1b      	lsrs	r3, r3, #8
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	4903      	ldr	r1, [pc, #12]	@ (8006de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dda:	5ccb      	ldrb	r3, [r1, r3]
 8006ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	46020c00 	.word	0x46020c00
 8006de8:	0800f0e8 	.word	0x0800f0e8

08006dec <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006df0:	f7ff ffba 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8006df4:	4602      	mov	r2, r0
 8006df6:	4b05      	ldr	r3, [pc, #20]	@ (8006e0c <HAL_RCC_GetPCLK3Freq+0x20>)
 8006df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfa:	091b      	lsrs	r3, r3, #4
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	4903      	ldr	r1, [pc, #12]	@ (8006e10 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006e02:	5ccb      	ldrb	r3, [r1, r3]
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	46020c00 	.word	0x46020c00
 8006e10:	0800f0e8 	.word	0x0800f0e8

08006e14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8006f18 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e2a:	f7fe fd4f 	bl	80058cc <HAL_PWREx_GetVoltageRange>
 8006e2e:	6178      	str	r0, [r7, #20]
 8006e30:	e019      	b.n	8006e66 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e32:	4b39      	ldr	r3, [pc, #228]	@ (8006f18 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e38:	4a37      	ldr	r2, [pc, #220]	@ (8006f18 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e3a:	f043 0304 	orr.w	r3, r3, #4
 8006e3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006e42:	4b35      	ldr	r3, [pc, #212]	@ (8006f18 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e50:	f7fe fd3c 	bl	80058cc <HAL_PWREx_GetVoltageRange>
 8006e54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e56:	4b30      	ldr	r3, [pc, #192]	@ (8006f18 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006f18 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e5e:	f023 0304 	bic.w	r3, r3, #4
 8006e62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e6c:	d003      	beq.n	8006e76 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e74:	d109      	bne.n	8006e8a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e7c:	d202      	bcs.n	8006e84 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006e7e:	2301      	movs	r3, #1
 8006e80:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006e82:	e033      	b.n	8006eec <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006e84:	2300      	movs	r3, #0
 8006e86:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006e88:	e030      	b.n	8006eec <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e90:	d208      	bcs.n	8006ea4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e98:	d102      	bne.n	8006ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	e025      	b.n	8006eec <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e035      	b.n	8006f10 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eaa:	d90f      	bls.n	8006ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d109      	bne.n	8006ec6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006eb8:	d902      	bls.n	8006ec0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
 8006ebe:	e015      	b.n	8006eec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	613b      	str	r3, [r7, #16]
 8006ec4:	e012      	b.n	8006eec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	e00f      	b.n	8006eec <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ed2:	d109      	bne.n	8006ee8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eda:	d102      	bne.n	8006ee2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006edc:	2301      	movs	r3, #1
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	e004      	b.n	8006eec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	e001      	b.n	8006eec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006ee8:	2301      	movs	r3, #1
 8006eea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006eec:	4b0b      	ldr	r3, [pc, #44]	@ (8006f1c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f023 020f 	bic.w	r2, r3, #15
 8006ef4:	4909      	ldr	r1, [pc, #36]	@ (8006f1c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006efc:	4b07      	ldr	r3, [pc, #28]	@ (8006f1c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 030f 	and.w	r3, r3, #15
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d001      	beq.n	8006f0e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	46020c00 	.word	0x46020c00
 8006f1c:	40022000 	.word	0x40022000

08006f20 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f24:	b0c4      	sub	sp, #272	@ 0x110
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f32:	2300      	movs	r3, #0
 8006f34:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	f002 0401 	and.w	r4, r2, #1
 8006f44:	2500      	movs	r5, #0
 8006f46:	ea54 0305 	orrs.w	r3, r4, r5
 8006f4a:	d00b      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006f4c:	4bd5      	ldr	r3, [pc, #852]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f52:	f023 0103 	bic.w	r1, r3, #3
 8006f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f5c:	4ad1      	ldr	r2, [pc, #836]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	f002 0802 	and.w	r8, r2, #2
 8006f70:	f04f 0900 	mov.w	r9, #0
 8006f74:	ea58 0309 	orrs.w	r3, r8, r9
 8006f78:	d00b      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006f7a:	4bca      	ldr	r3, [pc, #808]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f80:	f023 010c 	bic.w	r1, r3, #12
 8006f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8a:	4ac6      	ldr	r2, [pc, #792]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	f002 0a04 	and.w	sl, r2, #4
 8006f9e:	f04f 0b00 	mov.w	fp, #0
 8006fa2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006fa6:	d00b      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006fa8:	4bbe      	ldr	r3, [pc, #760]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fae:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb8:	4aba      	ldr	r2, [pc, #744]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006fba:	430b      	orrs	r3, r1
 8006fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f002 0308 	and.w	r3, r2, #8
 8006fcc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fd6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	d00b      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006fe0:	4bb0      	ldr	r3, [pc, #704]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fe6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ff0:	4aac      	ldr	r2, [pc, #688]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006ff2:	430b      	orrs	r3, r1
 8006ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f002 0310 	and.w	r3, r2, #16
 8007004:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007008:	2300      	movs	r3, #0
 800700a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800700e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007012:	460b      	mov	r3, r1
 8007014:	4313      	orrs	r3, r2
 8007016:	d00b      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007018:	4ba2      	ldr	r3, [pc, #648]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800701a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800701e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007028:	4a9e      	ldr	r2, [pc, #632]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800702a:	430b      	orrs	r3, r1
 800702c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800703c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007040:	2300      	movs	r3, #0
 8007042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007046:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800704a:	460b      	mov	r3, r1
 800704c:	4313      	orrs	r3, r2
 800704e:	d00b      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8007050:	4b94      	ldr	r3, [pc, #592]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007052:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007056:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800705a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800705e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007060:	4a90      	ldr	r2, [pc, #576]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007062:	430b      	orrs	r3, r1
 8007064:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f002 0320 	and.w	r3, r2, #32
 8007074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007078:	2300      	movs	r3, #0
 800707a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800707e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007082:	460b      	mov	r3, r1
 8007084:	4313      	orrs	r3, r2
 8007086:	d00b      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007088:	4b86      	ldr	r3, [pc, #536]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800708a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800708e:	f023 0107 	bic.w	r1, r3, #7
 8007092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007096:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007098:	4a82      	ldr	r2, [pc, #520]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800709a:	430b      	orrs	r3, r1
 800709c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80070ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070b0:	2300      	movs	r3, #0
 80070b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80070b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4313      	orrs	r3, r2
 80070be:	d00b      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80070c0:	4b78      	ldr	r3, [pc, #480]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80070c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070c6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80070ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070d0:	4a74      	ldr	r2, [pc, #464]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80070d2:	430b      	orrs	r3, r1
 80070d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80070e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070e8:	2300      	movs	r3, #0
 80070ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80070f2:	460b      	mov	r3, r1
 80070f4:	4313      	orrs	r3, r2
 80070f6:	d00b      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80070f8:	4b6a      	ldr	r3, [pc, #424]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80070fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007108:	4a66      	ldr	r2, [pc, #408]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800710a:	430b      	orrs	r3, r1
 800710c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800711c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007120:	2300      	movs	r3, #0
 8007122:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007126:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800712a:	460b      	mov	r3, r1
 800712c:	4313      	orrs	r3, r2
 800712e:	d00b      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007130:	4b5c      	ldr	r3, [pc, #368]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007136:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800713a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800713e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007140:	4a58      	ldr	r2, [pc, #352]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007142:	430b      	orrs	r3, r1
 8007144:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007158:	2300      	movs	r3, #0
 800715a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800715e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007162:	460b      	mov	r3, r1
 8007164:	4313      	orrs	r3, r2
 8007166:	d00b      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007168:	4b4e      	ldr	r3, [pc, #312]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800716a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800716e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007176:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007178:	4a4a      	ldr	r2, [pc, #296]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800717a:	430b      	orrs	r3, r1
 800717c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8007180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800718c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007190:	2300      	movs	r3, #0
 8007192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007196:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d00b      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80071a0:	4b40      	ldr	r3, [pc, #256]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80071a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071a6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80071aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071b0:	4a3c      	ldr	r2, [pc, #240]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80071b2:	430b      	orrs	r3, r1
 80071b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 80071b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80071c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071c8:	2300      	movs	r3, #0
 80071ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071ce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80071d2:	460b      	mov	r3, r1
 80071d4:	4313      	orrs	r3, r2
 80071d6:	d00c      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80071d8:	4b32      	ldr	r3, [pc, #200]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80071da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071de:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80071e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ea:	4a2e      	ldr	r2, [pc, #184]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80071ec:	430b      	orrs	r3, r1
 80071ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80071f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80071fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007202:	2300      	movs	r3, #0
 8007204:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007208:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800720c:	460b      	mov	r3, r1
 800720e:	4313      	orrs	r3, r2
 8007210:	d00c      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007212:	4b24      	ldr	r3, [pc, #144]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007218:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800721c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007224:	4a1f      	ldr	r2, [pc, #124]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007226:	430b      	orrs	r3, r1
 8007228:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800722c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800723c:	2300      	movs	r3, #0
 800723e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007242:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007246:	460b      	mov	r3, r1
 8007248:	4313      	orrs	r3, r2
 800724a:	d00c      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800724c:	4b15      	ldr	r3, [pc, #84]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800724e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007252:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800725a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725e:	4a11      	ldr	r2, [pc, #68]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007260:	430b      	orrs	r3, r1
 8007262:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007276:	2300      	movs	r3, #0
 8007278:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800727c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007280:	460b      	mov	r3, r1
 8007282:	4313      	orrs	r3, r2
 8007284:	d010      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007286:	4b07      	ldr	r3, [pc, #28]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800728c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007298:	4a02      	ldr	r2, [pc, #8]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800729a:	430b      	orrs	r3, r1
 800729c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80072a0:	e002      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80072a2:	bf00      	nop
 80072a4:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80072a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80072b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072b8:	2300      	movs	r3, #0
 80072ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80072be:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80072c2:	460b      	mov	r3, r1
 80072c4:	4313      	orrs	r3, r2
 80072c6:	d04c      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80072c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072d0:	2b80      	cmp	r3, #128	@ 0x80
 80072d2:	d02d      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80072d4:	2b80      	cmp	r3, #128	@ 0x80
 80072d6:	d827      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80072d8:	2b60      	cmp	r3, #96	@ 0x60
 80072da:	d02b      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80072dc:	2b60      	cmp	r3, #96	@ 0x60
 80072de:	d823      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80072e0:	2b40      	cmp	r3, #64	@ 0x40
 80072e2:	d006      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80072e4:	2b40      	cmp	r3, #64	@ 0x40
 80072e6:	d81f      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d009      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80072ec:	2b20      	cmp	r3, #32
 80072ee:	d011      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80072f0:	e01a      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80072f2:	4bbe      	ldr	r3, [pc, #760]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f6:	4abd      	ldr	r2, [pc, #756]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072fc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80072fe:	e01a      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007304:	3308      	adds	r3, #8
 8007306:	4618      	mov	r0, r3
 8007308:	f002 fc32 	bl	8009b70 <RCCEx_PLL2_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007312:	e010      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007318:	332c      	adds	r3, #44	@ 0x2c
 800731a:	4618      	mov	r0, r3
 800731c:	f002 fcc0 	bl	8009ca0 <RCCEx_PLL3_Config>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007326:	e006      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800732e:	e002      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8007330:	bf00      	nop
 8007332:	e000      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8007334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007336:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10d      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800733e:	4bab      	ldr	r3, [pc, #684]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007340:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007344:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800734c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007350:	4aa6      	ldr	r2, [pc, #664]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007352:	430b      	orrs	r3, r1
 8007354:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007358:	e003      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800735e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800736e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007372:	2300      	movs	r3, #0
 8007374:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007378:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800737c:	460b      	mov	r3, r1
 800737e:	4313      	orrs	r3, r2
 8007380:	d053      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007386:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800738a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800738e:	d033      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007394:	d82c      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800739a:	d02f      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800739c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073a0:	d826      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80073a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073a6:	d008      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80073a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073ac:	d820      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80073b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073b6:	d011      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80073b8:	e01a      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80073ba:	4b8c      	ldr	r3, [pc, #560]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073be:	4a8b      	ldr	r2, [pc, #556]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073c4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80073c6:	e01a      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073cc:	3308      	adds	r3, #8
 80073ce:	4618      	mov	r0, r3
 80073d0:	f002 fbce 	bl	8009b70 <RCCEx_PLL2_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80073da:	e010      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073e0:	332c      	adds	r3, #44	@ 0x2c
 80073e2:	4618      	mov	r0, r3
 80073e4:	f002 fc5c 	bl	8009ca0 <RCCEx_PLL3_Config>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80073ee:	e006      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80073f6:	e002      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80073f8:	bf00      	nop
 80073fa:	e000      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80073fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fe:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10d      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007406:	4b79      	ldr	r3, [pc, #484]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007408:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800740c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007414:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007418:	4a74      	ldr	r2, [pc, #464]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800741a:	430b      	orrs	r3, r1
 800741c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007420:	e003      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007422:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007426:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800742a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007436:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007438:	2300      	movs	r3, #0
 800743a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800743c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007440:	460b      	mov	r3, r1
 8007442:	4313      	orrs	r3, r2
 8007444:	d046      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800744a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800744e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007452:	d028      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007454:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007458:	d821      	bhi.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800745a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800745e:	d022      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007460:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007464:	d81b      	bhi.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8007466:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800746a:	d01c      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800746c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007470:	d815      	bhi.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8007472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007476:	d008      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8007478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800747c:	d80f      	bhi.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d011      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007486:	d00e      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007488:	e009      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800748a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800748e:	3308      	adds	r3, #8
 8007490:	4618      	mov	r0, r3
 8007492:	f002 fb6d 	bl	8009b70 <RCCEx_PLL2_Config>
 8007496:	4603      	mov	r3, r0
 8007498:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800749c:	e004      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80074a4:	e000      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 80074a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10d      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80074b0:	4b4e      	ldr	r3, [pc, #312]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074b6:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80074ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074c2:	4a4a      	ldr	r2, [pc, #296]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074c4:	430b      	orrs	r3, r1
 80074c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80074ca:	e003      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074cc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80074d0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80074d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80074e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80074e2:	2300      	movs	r3, #0
 80074e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80074e6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80074ea:	460b      	mov	r3, r1
 80074ec:	4313      	orrs	r3, r2
 80074ee:	d03f      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80074f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d81e      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80074fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007504 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	08007543 	.word	0x08007543
 8007508:	08007519 	.word	0x08007519
 800750c:	08007527 	.word	0x08007527
 8007510:	08007543 	.word	0x08007543
 8007514:	08007543 	.word	0x08007543
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007518:	4b34      	ldr	r3, [pc, #208]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751c:	4a33      	ldr	r2, [pc, #204]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800751e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007522:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007524:	e00e      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800752a:	332c      	adds	r3, #44	@ 0x2c
 800752c:	4618      	mov	r0, r3
 800752e:	f002 fbb7 	bl	8009ca0 <RCCEx_PLL3_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007538:	e004      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007540:	e000      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8007542:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007544:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10d      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800754c:	4b27      	ldr	r3, [pc, #156]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800754e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007552:	f023 0107 	bic.w	r1, r3, #7
 8007556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800755a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800755e:	4a23      	ldr	r2, [pc, #140]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007560:	430b      	orrs	r3, r1
 8007562:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007566:	e003      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007568:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800756c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800757c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800757e:	2300      	movs	r3, #0
 8007580:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007582:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007586:	460b      	mov	r3, r1
 8007588:	4313      	orrs	r3, r2
 800758a:	d04c      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800758c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007590:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007594:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007598:	d02a      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800759a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800759e:	d821      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80075a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075a4:	d026      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80075a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075aa:	d81b      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80075ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075b0:	d00e      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80075b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075b6:	d815      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d01d      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80075bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075c0:	d110      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075c2:	4b0a      	ldr	r3, [pc, #40]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c6:	4a09      	ldr	r2, [pc, #36]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075cc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80075ce:	e014      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075d4:	332c      	adds	r3, #44	@ 0x2c
 80075d6:	4618      	mov	r0, r3
 80075d8:	f002 fb62 	bl	8009ca0 <RCCEx_PLL3_Config>
 80075dc:	4603      	mov	r3, r0
 80075de:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80075e2:	e00a      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80075ea:	e006      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80075ec:	46020c00 	.word	0x46020c00
        break;
 80075f0:	bf00      	nop
 80075f2:	e002      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80075f4:	bf00      	nop
 80075f6:	e000      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80075f8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80075fa:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10d      	bne.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007602:	4baf      	ldr	r3, [pc, #700]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007608:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800760c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007610:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007614:	4aaa      	ldr	r2, [pc, #680]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007616:	430b      	orrs	r3, r1
 8007618:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800761c:	e003      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007622:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007632:	663b      	str	r3, [r7, #96]	@ 0x60
 8007634:	2300      	movs	r3, #0
 8007636:	667b      	str	r3, [r7, #100]	@ 0x64
 8007638:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800763c:	460b      	mov	r3, r1
 800763e:	4313      	orrs	r3, r2
 8007640:	f000 80b5 	beq.w	80077ae <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007644:	2300      	movs	r3, #0
 8007646:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800764a:	4b9d      	ldr	r3, [pc, #628]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800764c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	d113      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007658:	4b99      	ldr	r3, [pc, #612]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800765a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800765e:	4a98      	ldr	r2, [pc, #608]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007660:	f043 0304 	orr.w	r3, r3, #4
 8007664:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007668:	4b95      	ldr	r3, [pc, #596]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800766a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800766e:	f003 0304 	and.w	r3, r3, #4
 8007672:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007676:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 800767a:	2301      	movs	r3, #1
 800767c:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007680:	4b90      	ldr	r3, [pc, #576]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8007682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007684:	4a8f      	ldr	r2, [pc, #572]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8007686:	f043 0301 	orr.w	r3, r3, #1
 800768a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800768c:	f7fc fd78 	bl	8004180 <HAL_GetTick>
 8007690:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007694:	e00b      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007696:	f7fc fd73 	bl	8004180 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d903      	bls.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80076ac:	e005      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80076ae:	4b85      	ldr	r3, [pc, #532]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80076b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0ed      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 80076ba:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d165      	bne.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80076c2:	4b7f      	ldr	r3, [pc, #508]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80076c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80076d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d023      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x800>
 80076d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076dc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80076e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d01b      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80076e8:	4b75      	ldr	r3, [pc, #468]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80076ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076f6:	4b72      	ldr	r3, [pc, #456]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80076f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076fc:	4a70      	ldr	r2, [pc, #448]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80076fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007702:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007706:	4b6e      	ldr	r3, [pc, #440]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800770c:	4a6c      	ldr	r2, [pc, #432]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800770e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007712:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007716:	4a6a      	ldr	r2, [pc, #424]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800771c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d019      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772c:	f7fc fd28 	bl	8004180 <HAL_GetTick>
 8007730:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007734:	e00d      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007736:	f7fc fd23 	bl	8004180 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007740:	1ad2      	subs	r2, r2, r3
 8007742:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007746:	429a      	cmp	r2, r3
 8007748:	d903      	bls.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8007750:	e006      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007752:	4b5b      	ldr	r3, [pc, #364]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0ea      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8007760:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10d      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007768:	4b55      	ldr	r3, [pc, #340]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800776a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800776e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007776:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800777a:	4a51      	ldr	r2, [pc, #324]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800777c:	430b      	orrs	r3, r1
 800777e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007782:	e008      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007784:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007788:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 800778c:	e003      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007792:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007796:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800779a:	2b01      	cmp	r3, #1
 800779c:	d107      	bne.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800779e:	4b48      	ldr	r3, [pc, #288]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80077a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077a4:	4a46      	ldr	r2, [pc, #280]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80077a6:	f023 0304 	bic.w	r3, r3, #4
 80077aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80077ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80077ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077bc:	2300      	movs	r3, #0
 80077be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077c0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80077c4:	460b      	mov	r3, r1
 80077c6:	4313      	orrs	r3, r2
 80077c8:	d042      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80077ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80077d2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80077d6:	d022      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80077d8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80077dc:	d81b      	bhi.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80077de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077e2:	d011      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 80077e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077e8:	d815      	bhi.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d019      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x902>
 80077ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077f2:	d110      	bne.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077f8:	3308      	adds	r3, #8
 80077fa:	4618      	mov	r0, r3
 80077fc:	f002 f9b8 	bl	8009b70 <RCCEx_PLL2_Config>
 8007800:	4603      	mov	r3, r0
 8007802:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007806:	e00d      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007808:	4b2d      	ldr	r3, [pc, #180]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800780a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800780c:	4a2c      	ldr	r2, [pc, #176]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800780e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007812:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007814:	e006      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800781c:	e002      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800781e:	bf00      	nop
 8007820:	e000      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8007822:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007824:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10d      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800782c:	4b24      	ldr	r3, [pc, #144]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800782e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007832:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800783a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800783e:	4a20      	ldr	r2, [pc, #128]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007840:	430b      	orrs	r3, r1
 8007842:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007846:	e003      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007848:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800784c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800785c:	653b      	str	r3, [r7, #80]	@ 0x50
 800785e:	2300      	movs	r3, #0
 8007860:	657b      	str	r3, [r7, #84]	@ 0x54
 8007862:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007866:	460b      	mov	r3, r1
 8007868:	4313      	orrs	r3, r2
 800786a:	d031      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800786c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007878:	d00b      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800787a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800787e:	d804      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007888:	d007      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007890:	e004      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8007892:	bf00      	nop
 8007894:	e002      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8007896:	bf00      	nop
 8007898:	e000      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800789a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800789c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d111      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80078a4:	4b06      	ldr	r3, [pc, #24]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80078a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078b6:	4a02      	ldr	r2, [pc, #8]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80078b8:	430b      	orrs	r3, r1
 80078ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80078be:	e007      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 80078c0:	46020c00 	.word	0x46020c00
 80078c4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80078cc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80078d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80078dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078de:	2300      	movs	r3, #0
 80078e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80078e6:	460b      	mov	r3, r1
 80078e8:	4313      	orrs	r3, r2
 80078ea:	d00c      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80078ec:	4bb2      	ldr	r3, [pc, #712]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80078ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078f2:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80078f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80078fe:	4aae      	ldr	r2, [pc, #696]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007900:	430b      	orrs	r3, r1
 8007902:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007912:	643b      	str	r3, [r7, #64]	@ 0x40
 8007914:	2300      	movs	r3, #0
 8007916:	647b      	str	r3, [r7, #68]	@ 0x44
 8007918:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800791c:	460b      	mov	r3, r1
 800791e:	4313      	orrs	r3, r2
 8007920:	d019      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800792a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800792e:	d105      	bne.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007930:	4ba1      	ldr	r3, [pc, #644]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007934:	4aa0      	ldr	r2, [pc, #640]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800793a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800793c:	4b9e      	ldr	r3, [pc, #632]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800793e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007942:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800794a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800794e:	4a9a      	ldr	r2, [pc, #616]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007950:	430b      	orrs	r3, r1
 8007952:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007962:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007964:	2300      	movs	r3, #0
 8007966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007968:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800796c:	460b      	mov	r3, r1
 800796e:	4313      	orrs	r3, r2
 8007970:	d00c      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007972:	4b91      	ldr	r3, [pc, #580]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007978:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800797c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007980:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007984:	4a8c      	ldr	r2, [pc, #560]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007986:	430b      	orrs	r3, r1
 8007988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800798c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007998:	633b      	str	r3, [r7, #48]	@ 0x30
 800799a:	2300      	movs	r3, #0
 800799c:	637b      	str	r3, [r7, #52]	@ 0x34
 800799e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80079a2:	460b      	mov	r3, r1
 80079a4:	4313      	orrs	r3, r2
 80079a6:	d00c      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80079a8:	4b83      	ldr	r3, [pc, #524]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80079aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80079b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80079ba:	4a7f      	ldr	r2, [pc, #508]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80079bc:	430b      	orrs	r3, r1
 80079be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80079c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80079ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079d0:	2300      	movs	r3, #0
 80079d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80079d8:	460b      	mov	r3, r1
 80079da:	4313      	orrs	r3, r2
 80079dc:	d00c      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80079de:	4b76      	ldr	r3, [pc, #472]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80079e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079e4:	f023 0218 	bic.w	r2, r3, #24
 80079e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80079f0:	4971      	ldr	r1, [pc, #452]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80079f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007a04:	623b      	str	r3, [r7, #32]
 8007a06:	2300      	movs	r3, #0
 8007a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a0a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4313      	orrs	r3, r2
 8007a12:	d032      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a20:	d105      	bne.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a22:	4b65      	ldr	r3, [pc, #404]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a26:	4a64      	ldr	r2, [pc, #400]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a2c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a3a:	d108      	bne.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a40:	3308      	adds	r3, #8
 8007a42:	4618      	mov	r0, r3
 8007a44:	f002 f894 	bl	8009b70 <RCCEx_PLL2_Config>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8007a4e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10d      	bne.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007a56:	4b58      	ldr	r3, [pc, #352]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a68:	4953      	ldr	r1, [pc, #332]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007a70:	e003      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a72:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007a76:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8007a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	2100      	movs	r1, #0
 8007a84:	61b9      	str	r1, [r7, #24]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	61fb      	str	r3, [r7, #28]
 8007a8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a90:	460b      	mov	r3, r1
 8007a92:	4313      	orrs	r3, r2
 8007a94:	d04a      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8007a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007a9e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007aa2:	d01e      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8007aa4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007aa8:	d825      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8007aaa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007aae:	d00e      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8007ab0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ab4:	d81f      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d021      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8007aba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007abe:	d11a      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac4:	4a3c      	ldr	r2, [pc, #240]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007acc:	e018      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f002 f84b 	bl	8009b70 <RCCEx_PLL2_Config>
 8007ada:	4603      	mov	r3, r0
 8007adc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007ae0:	e00e      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ae6:	332c      	adds	r3, #44	@ 0x2c
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f002 f8d9 	bl	8009ca0 <RCCEx_PLL3_Config>
 8007aee:	4603      	mov	r3, r0
 8007af0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007af4:	e004      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007afc:	e000      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8007afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b00:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10d      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8007b08:	4b2b      	ldr	r3, [pc, #172]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b1a:	4927      	ldr	r1, [pc, #156]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007b22:	e003      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b24:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007b28:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007b38:	613b      	str	r3, [r7, #16]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	617b      	str	r3, [r7, #20]
 8007b3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b42:	460b      	mov	r3, r1
 8007b44:	4313      	orrs	r3, r2
 8007b46:	d03d      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b54:	d00e      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007b56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b5a:	d815      	bhi.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d017      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b64:	d110      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b66:	4b14      	ldr	r3, [pc, #80]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6a:	4a13      	ldr	r2, [pc, #76]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b70:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007b72:	e00e      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b78:	3308      	adds	r3, #8
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 fff8 	bl	8009b70 <RCCEx_PLL2_Config>
 8007b80:	4603      	mov	r3, r0
 8007b82:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007b86:	e004      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007b8e:	e000      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8007b90:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007b92:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d110      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007b9a:	4b07      	ldr	r3, [pc, #28]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ba0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bac:	4902      	ldr	r1, [pc, #8]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007bb4:	e006      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8007bb6:	bf00      	nop
 8007bb8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007bc0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007bd0:	60bb      	str	r3, [r7, #8]
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	d00c      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007be0:	4b2c      	ldr	r3, [pc, #176]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007be2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007be6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007bf2:	4928      	ldr	r1, [pc, #160]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8007bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	2100      	movs	r1, #0
 8007c04:	6039      	str	r1, [r7, #0]
 8007c06:	f003 0308 	and.w	r3, r3, #8
 8007c0a:	607b      	str	r3, [r7, #4]
 8007c0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c10:	460b      	mov	r3, r1
 8007c12:	4313      	orrs	r3, r2
 8007c14:	d036      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8007c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007c1e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007c22:	d00d      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007c24:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007c28:	d811      	bhi.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8007c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c2e:	d012      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007c30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c34:	d80b      	bhi.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00d      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c3e:	d106      	bne.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c40:	4b14      	ldr	r3, [pc, #80]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c44:	4a13      	ldr	r2, [pc, #76]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c4a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8007c4c:	e004      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007c54:	e000      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8007c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c58:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10d      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8007c60:	4b0c      	ldr	r3, [pc, #48]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007c62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c66:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007c72:	4908      	ldr	r1, [pc, #32]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007c7a:	e003      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007c80:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007c84:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c94:	46020c00 	.word	0x46020c00

08007c98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b089      	sub	sp, #36	@ 0x24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007ca0:	4ba6      	ldr	r3, [pc, #664]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007caa:	4ba4      	ldr	r3, [pc, #656]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007cb4:	4ba1      	ldr	r3, [pc, #644]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb8:	0a1b      	lsrs	r3, r3, #8
 8007cba:	f003 030f 	and.w	r3, r3, #15
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007cc2:	4b9e      	ldr	r3, [pc, #632]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc6:	091b      	lsrs	r3, r3, #4
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007cce:	4b9b      	ldr	r3, [pc, #620]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd2:	08db      	lsrs	r3, r3, #3
 8007cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	fb02 f303 	mul.w	r3, r2, r3
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d062      	beq.n	8007db6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	f200 8081 	bhi.w	8007dfa <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d024      	beq.n	8007d48 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d17a      	bne.n	8007dfa <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d16:	4b89      	ldr	r3, [pc, #548]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1e:	ee07 3a90 	vmov	s15, r3
 8007d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d2a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007f44 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d46:	e08f      	b.n	8007e68 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007d48:	4b7c      	ldr	r3, [pc, #496]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007d54:	4b79      	ldr	r3, [pc, #484]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	0f1b      	lsrs	r3, r3, #28
 8007d5a:	f003 030f 	and.w	r3, r3, #15
 8007d5e:	e006      	b.n	8007d6e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007d60:	4b76      	ldr	r3, [pc, #472]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d66:	041b      	lsls	r3, r3, #16
 8007d68:	0f1b      	lsrs	r3, r3, #28
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	4a76      	ldr	r2, [pc, #472]	@ (8007f48 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d74:	ee07 3a90 	vmov	s15, r3
 8007d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	ee07 3a90 	vmov	s15, r3
 8007d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d94:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d98:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007f44 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007db4:	e058      	b.n	8007e68 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	ee07 3a90 	vmov	s15, r3
 8007dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc8:	4b5c      	ldr	r3, [pc, #368]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd0:	ee07 3a90 	vmov	s15, r3
 8007dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ddc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007f44 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007de8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007df8:	e036      	b.n	8007e68 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007dfa:	4b50      	ldr	r3, [pc, #320]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8007e06:	4b4d      	ldr	r3, [pc, #308]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	0f1b      	lsrs	r3, r3, #28
 8007e0c:	f003 030f 	and.w	r3, r3, #15
 8007e10:	e006      	b.n	8007e20 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8007e12:	4b4a      	ldr	r3, [pc, #296]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e18:	041b      	lsls	r3, r3, #16
 8007e1a:	0f1b      	lsrs	r3, r3, #28
 8007e1c:	f003 030f 	and.w	r3, r3, #15
 8007e20:	4a49      	ldr	r2, [pc, #292]	@ (8007f48 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	ee07 3a90 	vmov	s15, r3
 8007e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e4a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007f44 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e66:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007e68:	4b34      	ldr	r3, [pc, #208]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d017      	beq.n	8007ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007e74:	4b31      	ldr	r3, [pc, #196]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e78:	0a5b      	lsrs	r3, r3, #9
 8007e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e7e:	ee07 3a90 	vmov	s15, r3
 8007e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007e86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e9a:	ee17 2a90 	vmov	r2, s15
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e002      	b.n	8007eaa <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007eaa:	4b24      	ldr	r3, [pc, #144]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d017      	beq.n	8007ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007eb6:	4b21      	ldr	r3, [pc, #132]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eba:	0c1b      	lsrs	r3, r3, #16
 8007ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ec0:	ee07 3a90 	vmov	s15, r3
 8007ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007ec8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ecc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007edc:	ee17 2a90 	vmov	r2, s15
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	605a      	str	r2, [r3, #4]
 8007ee4:	e002      	b.n	8007eec <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007eec:	4b13      	ldr	r3, [pc, #76]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d017      	beq.n	8007f28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007ef8:	4b10      	ldr	r3, [pc, #64]	@ (8007f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007efc:	0e1b      	lsrs	r3, r3, #24
 8007efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f02:	ee07 3a90 	vmov	s15, r3
 8007f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8007f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f1e:	ee17 2a90 	vmov	r2, s15
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f26:	e002      	b.n	8007f2e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	609a      	str	r2, [r3, #8]
}
 8007f2e:	bf00      	nop
 8007f30:	3724      	adds	r7, #36	@ 0x24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	46020c00 	.word	0x46020c00
 8007f40:	4b742400 	.word	0x4b742400
 8007f44:	46000000 	.word	0x46000000
 8007f48:	0800f0f0 	.word	0x0800f0f0

08007f4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b089      	sub	sp, #36	@ 0x24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007f54:	4ba6      	ldr	r3, [pc, #664]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007f5e:	4ba4      	ldr	r3, [pc, #656]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007f68:	4ba1      	ldr	r3, [pc, #644]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6c:	0a1b      	lsrs	r3, r3, #8
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	3301      	adds	r3, #1
 8007f74:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007f76:	4b9e      	ldr	r3, [pc, #632]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7a:	091b      	lsrs	r3, r3, #4
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007f82:	4b9b      	ldr	r3, [pc, #620]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f86:	08db      	lsrs	r3, r3, #3
 8007f88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	fb02 f303 	mul.w	r3, r2, r3
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d062      	beq.n	800806a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	f200 8081 	bhi.w	80080ae <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d024      	beq.n	8007ffc <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d17a      	bne.n	80080ae <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80081f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fca:	4b89      	ldr	r3, [pc, #548]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fde:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ffa:	e08f      	b.n	800811c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007ffc:	4b7c      	ldr	r3, [pc, #496]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008008:	4b79      	ldr	r3, [pc, #484]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	0f1b      	lsrs	r3, r3, #28
 800800e:	f003 030f 	and.w	r3, r3, #15
 8008012:	e006      	b.n	8008022 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008014:	4b76      	ldr	r3, [pc, #472]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800801a:	041b      	lsls	r3, r3, #16
 800801c:	0f1b      	lsrs	r3, r3, #28
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	4a76      	ldr	r2, [pc, #472]	@ (80081fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008028:	ee07 3a90 	vmov	s15, r3
 800802c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	ee07 3a90 	vmov	s15, r3
 8008044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008048:	ed97 6a02 	vldr	s12, [r7, #8]
 800804c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008050:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008054:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008058:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800805c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008064:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008068:	e058      	b.n	800811c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	ee07 3a90 	vmov	s15, r3
 8008070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008074:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80081f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800807c:	4b5c      	ldr	r3, [pc, #368]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800807e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008084:	ee07 3a90 	vmov	s15, r3
 8008088:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800808c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008090:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008094:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008098:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800809c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80080a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080ac:	e036      	b.n	800811c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80080ae:	4b50      	ldr	r3, [pc, #320]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d005      	beq.n	80080c6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80080ba:	4b4d      	ldr	r3, [pc, #308]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	0f1b      	lsrs	r3, r3, #28
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	e006      	b.n	80080d4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80080c6:	4b4a      	ldr	r3, [pc, #296]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80080c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080cc:	041b      	lsls	r3, r3, #16
 80080ce:	0f1b      	lsrs	r3, r3, #28
 80080d0:	f003 030f 	and.w	r3, r3, #15
 80080d4:	4a49      	ldr	r2, [pc, #292]	@ (80081fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80080d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	ee07 3a90 	vmov	s15, r3
 80080e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	ee07 3a90 	vmov	s15, r3
 80080f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80080fe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800810e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800811a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800811c:	4b34      	ldr	r3, [pc, #208]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800811e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d017      	beq.n	8008158 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008128:	4b31      	ldr	r3, [pc, #196]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800812a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812c:	0a5b      	lsrs	r3, r3, #9
 800812e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800813a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800813e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008142:	edd7 6a07 	vldr	s13, [r7, #28]
 8008146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800814a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800814e:	ee17 2a90 	vmov	r2, s15
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	e002      	b.n	800815e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800815e:	4b24      	ldr	r3, [pc, #144]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d017      	beq.n	800819a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800816a:	4b21      	ldr	r3, [pc, #132]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800816c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800816e:	0c1b      	lsrs	r3, r3, #16
 8008170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008174:	ee07 3a90 	vmov	s15, r3
 8008178:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800817c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008180:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008184:	edd7 6a07 	vldr	s13, [r7, #28]
 8008188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800818c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008190:	ee17 2a90 	vmov	r2, s15
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	605a      	str	r2, [r3, #4]
 8008198:	e002      	b.n	80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80081a0:	4b13      	ldr	r3, [pc, #76]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d017      	beq.n	80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80081ac:	4b10      	ldr	r3, [pc, #64]	@ (80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b0:	0e1b      	lsrs	r3, r3, #24
 80081b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80081be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80081c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80081ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081d2:	ee17 2a90 	vmov	r2, s15
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80081da:	e002      	b.n	80081e2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	609a      	str	r2, [r3, #8]
}
 80081e2:	bf00      	nop
 80081e4:	3724      	adds	r7, #36	@ 0x24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	46020c00 	.word	0x46020c00
 80081f4:	4b742400 	.word	0x4b742400
 80081f8:	46000000 	.word	0x46000000
 80081fc:	0800f0f0 	.word	0x0800f0f0

08008200 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008200:	b480      	push	{r7}
 8008202:	b089      	sub	sp, #36	@ 0x24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008208:	4ba6      	ldr	r3, [pc, #664]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800820a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800820c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008210:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008212:	4ba4      	ldr	r3, [pc, #656]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800821c:	4ba1      	ldr	r3, [pc, #644]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800821e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008220:	0a1b      	lsrs	r3, r3, #8
 8008222:	f003 030f 	and.w	r3, r3, #15
 8008226:	3301      	adds	r3, #1
 8008228:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800822a:	4b9e      	ldr	r3, [pc, #632]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800822c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800822e:	091b      	lsrs	r3, r3, #4
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008236:	4b9b      	ldr	r3, [pc, #620]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800823a:	08db      	lsrs	r3, r3, #3
 800823c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	fb02 f303 	mul.w	r3, r2, r3
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	2b03      	cmp	r3, #3
 8008256:	d062      	beq.n	800831e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	2b03      	cmp	r3, #3
 800825c:	f200 8081 	bhi.w	8008362 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d024      	beq.n	80082b0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2b02      	cmp	r3, #2
 800826a:	d17a      	bne.n	8008362 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	ee07 3a90 	vmov	s15, r3
 8008272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008276:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800827a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800827e:	4b89      	ldr	r3, [pc, #548]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800828e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008292:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008296:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800829a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800829e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80082a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082aa:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80082ae:	e08f      	b.n	80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80082b0:	4b7c      	ldr	r3, [pc, #496]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d005      	beq.n	80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80082bc:	4b79      	ldr	r3, [pc, #484]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	0f1b      	lsrs	r3, r3, #28
 80082c2:	f003 030f 	and.w	r3, r3, #15
 80082c6:	e006      	b.n	80082d6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80082c8:	4b76      	ldr	r3, [pc, #472]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082ce:	041b      	lsls	r3, r3, #16
 80082d0:	0f1b      	lsrs	r3, r3, #28
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	4a76      	ldr	r2, [pc, #472]	@ (80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80082d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082dc:	ee07 3a90 	vmov	s15, r3
 80082e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	ee07 3a90 	vmov	s15, r3
 80082f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8008300:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800830c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008310:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008318:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800831c:	e058      	b.n	80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	ee07 3a90 	vmov	s15, r3
 8008324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008328:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800832c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008330:	4b5c      	ldr	r3, [pc, #368]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008338:	ee07 3a90 	vmov	s15, r3
 800833c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008340:	ed97 6a02 	vldr	s12, [r7, #8]
 8008344:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008348:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800834c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008350:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008354:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800835c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008360:	e036      	b.n	80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008362:	4b50      	ldr	r3, [pc, #320]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d005      	beq.n	800837a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800836e:	4b4d      	ldr	r3, [pc, #308]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	0f1b      	lsrs	r3, r3, #28
 8008374:	f003 030f 	and.w	r3, r3, #15
 8008378:	e006      	b.n	8008388 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800837a:	4b4a      	ldr	r3, [pc, #296]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800837c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008380:	041b      	lsls	r3, r3, #16
 8008382:	0f1b      	lsrs	r3, r3, #28
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	4a49      	ldr	r2, [pc, #292]	@ (80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800838a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	ee07 3a90 	vmov	s15, r3
 800839c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	ee07 3a90 	vmov	s15, r3
 80083aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80083b2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80083b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80083c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083ce:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80083d0:	4b34      	ldr	r3, [pc, #208]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80083d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d017      	beq.n	800840c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80083dc:	4b31      	ldr	r3, [pc, #196]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80083de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083e0:	0a5b      	lsrs	r3, r3, #9
 80083e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80083ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083f2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80083f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008402:	ee17 2a90 	vmov	r2, s15
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	e002      	b.n	8008412 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008412:	4b24      	ldr	r3, [pc, #144]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d017      	beq.n	800844e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800841e:	4b21      	ldr	r3, [pc, #132]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008422:	0c1b      	lsrs	r3, r3, #16
 8008424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008428:	ee07 3a90 	vmov	s15, r3
 800842c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008430:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008434:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008438:	edd7 6a07 	vldr	s13, [r7, #28]
 800843c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008444:	ee17 2a90 	vmov	r2, s15
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	605a      	str	r2, [r3, #4]
 800844c:	e002      	b.n	8008454 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008454:	4b13      	ldr	r3, [pc, #76]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008458:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d017      	beq.n	8008490 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008460:	4b10      	ldr	r3, [pc, #64]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008464:	0e1b      	lsrs	r3, r3, #24
 8008466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008472:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008476:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800847a:	edd7 6a07 	vldr	s13, [r7, #28]
 800847e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008486:	ee17 2a90 	vmov	r2, s15
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800848e:	e002      	b.n	8008496 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	609a      	str	r2, [r3, #8]
}
 8008496:	bf00      	nop
 8008498:	3724      	adds	r7, #36	@ 0x24
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	46020c00 	.word	0x46020c00
 80084a8:	4b742400 	.word	0x4b742400
 80084ac:	46000000 	.word	0x46000000
 80084b0:	0800f0f0 	.word	0x0800f0f0

080084b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08e      	sub	sp, #56	@ 0x38
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80084be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084c2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80084c6:	430b      	orrs	r3, r1
 80084c8:	d145      	bne.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80084ca:	4ba7      	ldr	r3, [pc, #668]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084d4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80084d6:	4ba4      	ldr	r3, [pc, #656]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d108      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ea:	d104      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80084ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f2:	f001 bb31 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80084f6:	4b9c      	ldr	r3, [pc, #624]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008504:	d114      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800850c:	d110      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800850e:	4b96      	ldr	r3, [pc, #600]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008518:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800851c:	d103      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800851e:	23fa      	movs	r3, #250	@ 0xfa
 8008520:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008522:	f001 bb19 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8008526:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800852a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800852c:	f001 bb14 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008530:	4b8d      	ldr	r3, [pc, #564]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008538:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800853c:	d107      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800853e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008540:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008544:	d103      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008546:	4b89      	ldr	r3, [pc, #548]	@ (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008548:	637b      	str	r3, [r7, #52]	@ 0x34
 800854a:	f001 bb05 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	637b      	str	r3, [r7, #52]	@ 0x34
 8008552:	f001 bb01 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800855a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800855e:	430b      	orrs	r3, r1
 8008560:	d151      	bne.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008562:	4b81      	ldr	r3, [pc, #516]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008564:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008568:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800856c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800856e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008570:	2b80      	cmp	r3, #128	@ 0x80
 8008572:	d035      	beq.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008576:	2b80      	cmp	r3, #128	@ 0x80
 8008578:	d841      	bhi.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	2b60      	cmp	r3, #96	@ 0x60
 800857e:	d02a      	beq.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008582:	2b60      	cmp	r3, #96	@ 0x60
 8008584:	d83b      	bhi.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008588:	2b40      	cmp	r3, #64	@ 0x40
 800858a:	d009      	beq.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	2b40      	cmp	r3, #64	@ 0x40
 8008590:	d835      	bhi.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00c      	beq.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859a:	2b20      	cmp	r3, #32
 800859c:	d012      	beq.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800859e:	e02e      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7ff fb77 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80085aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085ae:	f001 bad3 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b2:	f107 0318 	add.w	r3, r7, #24
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff fcc8 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085c0:	f001 baca 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c4:	f107 030c 	add.w	r3, r7, #12
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff fe19 	bl	8008200 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085d2:	f001 bac1 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80085d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80085da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085dc:	f001 babc 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085e0:	4b61      	ldr	r3, [pc, #388]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085ec:	d103      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80085ee:	4b60      	ldr	r3, [pc, #384]	@ (8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80085f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085f2:	f001 bab1 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085fa:	f001 baad 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008602:	f001 baa9 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800860a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800860e:	430b      	orrs	r3, r1
 8008610:	d158      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008612:	4b55      	ldr	r3, [pc, #340]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008614:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008618:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800861c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800861e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008624:	d03b      	beq.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800862c:	d846      	bhi.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800862e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008630:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008634:	d02e      	beq.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800863c:	d83e      	bhi.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008644:	d00b      	beq.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800864c:	d836      	bhi.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00d      	beq.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800865a:	d012      	beq.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800865c:	e02e      	b.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800865e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008662:	4618      	mov	r0, r3
 8008664:	f7ff fb18 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800866c:	f001 ba74 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008670:	f107 0318 	add.w	r3, r7, #24
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff fc69 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800867e:	f001 ba6b 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008682:	f107 030c 	add.w	r3, r7, #12
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff fdba 	bl	8008200 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008690:	f001 ba62 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008694:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008698:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800869a:	f001 ba5d 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800869e:	4b32      	ldr	r3, [pc, #200]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086aa:	d103      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80086ac:	4b30      	ldr	r3, [pc, #192]	@ (8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80086ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086b0:	f001 ba52 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086b8:	f001 ba4e 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086c0:	f001 ba4a 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80086c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086c8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80086cc:	430b      	orrs	r3, r1
 80086ce:	d126      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80086d0:	4b25      	ldr	r3, [pc, #148]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80086d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086da:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80086dc:	4b22      	ldr	r3, [pc, #136]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086e8:	d106      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d103      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80086f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80086f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f4:	f001 ba30 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80086f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008704:	d107      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800870c:	d103      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800870e:	4b19      	ldr	r3, [pc, #100]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
 8008712:	f001 ba21 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	637b      	str	r3, [r7, #52]	@ 0x34
 800871a:	f001 ba1d 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800871e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008722:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008726:	430b      	orrs	r3, r1
 8008728:	d16e      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800872a:	4b0f      	ldr	r3, [pc, #60]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800872c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008730:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008734:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008738:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800873c:	d03d      	beq.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008744:	d85c      	bhi.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008748:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800874c:	d014      	beq.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800874e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008754:	d854      	bhi.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008758:	2b00      	cmp	r3, #0
 800875a:	d01f      	beq.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800875c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008762:	d012      	beq.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008764:	e04c      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008766:	bf00      	nop
 8008768:	46020c00 	.word	0x46020c00
 800876c:	0007a120 	.word	0x0007a120
 8008770:	00f42400 	.word	0x00f42400
 8008774:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff fa8b 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008784:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008786:	f001 b9e7 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800878a:	f107 0318 	add.w	r3, r7, #24
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff fbdc 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008798:	f001 b9de 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800879c:	4ba7      	ldr	r3, [pc, #668]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087a8:	d103      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80087aa:	4ba5      	ldr	r3, [pc, #660]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087ae:	f001 b9d3 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087b6:	f001 b9cf 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80087ba:	4ba0      	ldr	r3, [pc, #640]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b20      	cmp	r3, #32
 80087c4:	d118      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80087c6:	4b9d      	ldr	r3, [pc, #628]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d005      	beq.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80087d2:	4b9a      	ldr	r3, [pc, #616]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	0e1b      	lsrs	r3, r3, #24
 80087d8:	f003 030f 	and.w	r3, r3, #15
 80087dc:	e006      	b.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80087de:	4b97      	ldr	r3, [pc, #604]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80087e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087e4:	041b      	lsls	r3, r3, #16
 80087e6:	0e1b      	lsrs	r3, r3, #24
 80087e8:	f003 030f 	and.w	r3, r3, #15
 80087ec:	4a95      	ldr	r2, [pc, #596]	@ (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80087ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087f4:	f001 b9b0 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087fc:	f001 b9ac 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008804:	f001 b9a8 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800880c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008810:	430b      	orrs	r3, r1
 8008812:	d17f      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008814:	4b89      	ldr	r3, [pc, #548]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008816:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800881a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800881e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008822:	2b00      	cmp	r3, #0
 8008824:	d165      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008826:	4b85      	ldr	r3, [pc, #532]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800882c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008830:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008838:	d034      	beq.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008840:	d853      	bhi.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008848:	d00b      	beq.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800884a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008850:	d84b      	bhi.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008854:	2b00      	cmp	r3, #0
 8008856:	d016      	beq.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800885e:	d009      	beq.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008860:	e043      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff fa16 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800886c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008870:	f001 b972 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008874:	f107 0318 	add.w	r3, r7, #24
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff fb67 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008882:	f001 b969 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008886:	4b6d      	ldr	r3, [pc, #436]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800888e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008892:	d103      	bne.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8008894:	4b6a      	ldr	r3, [pc, #424]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008896:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008898:	f001 b95e 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80088a0:	f001 b95a 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80088a4:	4b65      	ldr	r3, [pc, #404]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0320 	and.w	r3, r3, #32
 80088ac:	2b20      	cmp	r3, #32
 80088ae:	d118      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088b0:	4b62      	ldr	r3, [pc, #392]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80088bc:	4b5f      	ldr	r3, [pc, #380]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	0e1b      	lsrs	r3, r3, #24
 80088c2:	f003 030f 	and.w	r3, r3, #15
 80088c6:	e006      	b.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80088c8:	4b5c      	ldr	r3, [pc, #368]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80088ce:	041b      	lsls	r3, r3, #16
 80088d0:	0e1b      	lsrs	r3, r3, #24
 80088d2:	f003 030f 	and.w	r3, r3, #15
 80088d6:	4a5b      	ldr	r2, [pc, #364]	@ (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80088d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088dc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80088de:	f001 b93b 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80088e6:	f001 b937 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80088ee:	f001 b933 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088f8:	d108      	bne.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff f9ca 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008906:	637b      	str	r3, [r7, #52]	@ 0x34
 8008908:	f001 b926 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008910:	f001 b922 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008918:	1e51      	subs	r1, r2, #1
 800891a:	430b      	orrs	r3, r1
 800891c:	d136      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800891e:	4b47      	ldr	r3, [pc, #284]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008924:	f003 0303 	and.w	r3, r3, #3
 8008928:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008930:	f7fe fa48 	bl	8006dc4 <HAL_RCC_GetPCLK2Freq>
 8008934:	6378      	str	r0, [r7, #52]	@ 0x34
 8008936:	f001 b90f 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	2b01      	cmp	r3, #1
 800893e:	d104      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008940:	f7fe f910 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8008944:	6378      	str	r0, [r7, #52]	@ 0x34
 8008946:	f001 b907 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800894a:	4b3c      	ldr	r3, [pc, #240]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008956:	d106      	bne.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895a:	2b02      	cmp	r3, #2
 800895c:	d103      	bne.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800895e:	4b3a      	ldr	r3, [pc, #232]	@ (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008960:	637b      	str	r3, [r7, #52]	@ 0x34
 8008962:	f001 b8f9 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008966:	4b35      	ldr	r3, [pc, #212]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b02      	cmp	r3, #2
 8008972:	d107      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008976:	2b03      	cmp	r3, #3
 8008978:	d104      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800897a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800897e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008980:	f001 b8ea 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	637b      	str	r3, [r7, #52]	@ 0x34
 8008988:	f001 b8e6 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800898c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008990:	1e91      	subs	r1, r2, #2
 8008992:	430b      	orrs	r3, r1
 8008994:	d136      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008996:	4b29      	ldr	r3, [pc, #164]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800899c:	f003 030c 	and.w	r3, r3, #12
 80089a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d104      	bne.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80089a8:	f7fe f9f8 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 80089ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80089ae:	f001 b8d3 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80089b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d104      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80089b8:	f7fe f8d4 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 80089bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80089be:	f001 b8cb 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80089c2:	4b1e      	ldr	r3, [pc, #120]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089ce:	d106      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	2b08      	cmp	r3, #8
 80089d4:	d103      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80089d6:	4b1c      	ldr	r3, [pc, #112]	@ (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80089d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089da:	f001 b8bd 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80089de:	4b17      	ldr	r3, [pc, #92]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80089e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d107      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ee:	2b0c      	cmp	r3, #12
 80089f0:	d104      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80089f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80089f8:	f001 b8ae 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80089fc:	2300      	movs	r3, #0
 80089fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a00:	f001 b8aa 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a08:	1f11      	subs	r1, r2, #4
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	d13f      	bne.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008a18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d104      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008a20:	f7fe f9bc 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8008a24:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a26:	f001 b897 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2c:	2b10      	cmp	r3, #16
 8008a2e:	d10d      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008a30:	f7fe f898 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8008a34:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a36:	f001 b88f 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8008a3a:	bf00      	nop
 8008a3c:	46020c00 	.word	0x46020c00
 8008a40:	02dc6c00 	.word	0x02dc6c00
 8008a44:	0800f0f0 	.word	0x0800f0f0
 8008a48:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008a4c:	4ba8      	ldr	r3, [pc, #672]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a58:	d106      	bne.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5c:	2b20      	cmp	r3, #32
 8008a5e:	d103      	bne.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8008a60:	4ba4      	ldr	r3, [pc, #656]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a64:	f001 b878 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008a68:	4ba1      	ldr	r3, [pc, #644]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a6e:	f003 0302 	and.w	r3, r3, #2
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d107      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a78:	2b30      	cmp	r3, #48	@ 0x30
 8008a7a:	d104      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8008a7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a82:	f001 b869 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a8a:	f001 b865 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a92:	f1a2 0108 	sub.w	r1, r2, #8
 8008a96:	430b      	orrs	r3, r1
 8008a98:	d136      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008a9a:	4b95      	ldr	r3, [pc, #596]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008aa0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008aa4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d104      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008aac:	f7fe f976 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8008ab0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ab2:	f001 b851 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab8:	2b40      	cmp	r3, #64	@ 0x40
 8008aba:	d104      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008abc:	f7fe f852 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8008ac0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ac2:	f001 b849 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008ac6:	4b8a      	ldr	r3, [pc, #552]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ad2:	d106      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad6:	2b80      	cmp	r3, #128	@ 0x80
 8008ad8:	d103      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8008ada:	4b86      	ldr	r3, [pc, #536]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ade:	f001 b83b 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008ae2:	4b83      	ldr	r3, [pc, #524]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d107      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008af4:	d104      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8008af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008afc:	f001 b82c 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b04:	f001 b828 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b0c:	f1a2 0110 	sub.w	r1, r2, #16
 8008b10:	430b      	orrs	r3, r1
 8008b12:	d139      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008b14:	4b76      	ldr	r3, [pc, #472]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d104      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008b26:	f7fe f939 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8008b2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b2c:	f001 b814 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b36:	d104      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008b38:	f7fe f814 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8008b3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b3e:	f001 b80b 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008b42:	4b6b      	ldr	r3, [pc, #428]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b4e:	d107      	bne.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8008b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b56:	d103      	bne.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8008b58:	4b66      	ldr	r3, [pc, #408]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b5c:	f000 bffc 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008b60:	4b63      	ldr	r3, [pc, #396]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d108      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b74:	d104      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b7c:	f000 bfec 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b84:	f000 bfe8 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8008b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b8c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8008b90:	430b      	orrs	r3, r1
 8008b92:	d139      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008b94:	4b56      	ldr	r3, [pc, #344]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b9e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d104      	bne.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008ba6:	f7fe f8f9 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8008baa:	6378      	str	r0, [r7, #52]	@ 0x34
 8008bac:	f000 bfd4 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bb6:	d104      	bne.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008bb8:	f7fd ffd4 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8008bbc:	6378      	str	r0, [r7, #52]	@ 0x34
 8008bbe:	f000 bfcb 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bce:	d107      	bne.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bd6:	d103      	bne.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8008bd8:	4b46      	ldr	r3, [pc, #280]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bdc:	f000 bfbc 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008be0:	4b43      	ldr	r3, [pc, #268]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d108      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8008bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bf4:	d104      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8008bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bfc:	f000 bfac 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c04:	f000 bfa8 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c0c:	f1a2 0120 	sub.w	r1, r2, #32
 8008c10:	430b      	orrs	r3, r1
 8008c12:	d158      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008c14:	4b36      	ldr	r3, [pc, #216]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d104      	bne.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008c26:	f7fe f8e1 	bl	8006dec <HAL_RCC_GetPCLK3Freq>
 8008c2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c2c:	f000 bf94 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d104      	bne.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c36:	f7fd ff95 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8008c3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c3c:	f000 bf8c 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008c40:	4b2b      	ldr	r3, [pc, #172]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c4c:	d106      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d103      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8008c54:	4b27      	ldr	r3, [pc, #156]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c58:	f000 bf7e 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008c5c:	4b24      	ldr	r3, [pc, #144]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d107      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	2b03      	cmp	r3, #3
 8008c6e:	d104      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8008c70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c76:	f000 bf6f 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0320 	and.w	r3, r3, #32
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	d11b      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d118      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008c8c:	4b18      	ldr	r3, [pc, #96]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d005      	beq.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8008c98:	4b15      	ldr	r3, [pc, #84]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	0e1b      	lsrs	r3, r3, #24
 8008c9e:	f003 030f 	and.w	r3, r3, #15
 8008ca2:	e006      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8008ca4:	4b12      	ldr	r3, [pc, #72]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008caa:	041b      	lsls	r3, r3, #16
 8008cac:	0e1b      	lsrs	r3, r3, #24
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	4a11      	ldr	r2, [pc, #68]	@ (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cba:	f000 bf4d 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cc2:	f000 bf49 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cca:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008cce:	430b      	orrs	r3, r1
 8008cd0:	d172      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008cd2:	4b07      	ldr	r3, [pc, #28]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cd8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008cdc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ce4:	d10a      	bne.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ce6:	f7fd ff3d 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8008cea:	6378      	str	r0, [r7, #52]	@ 0x34
 8008cec:	f000 bf34 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8008cf0:	46020c00 	.word	0x46020c00
 8008cf4:	00f42400 	.word	0x00f42400
 8008cf8:	0800f0f0 	.word	0x0800f0f0
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d02:	d108      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d04:	f107 0318 	add.w	r3, r7, #24
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7ff f91f 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d12:	f000 bf21 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d104      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008d1c:	f7fe f824 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8008d20:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d22:	f000 bf19 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d28:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008d2c:	d122      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008d2e:	4bb0      	ldr	r3, [pc, #704]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0320 	and.w	r3, r3, #32
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	d118      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d3a:	4bad      	ldr	r3, [pc, #692]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d005      	beq.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8008d46:	4baa      	ldr	r3, [pc, #680]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	0e1b      	lsrs	r3, r3, #24
 8008d4c:	f003 030f 	and.w	r3, r3, #15
 8008d50:	e006      	b.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8008d52:	4ba7      	ldr	r3, [pc, #668]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d58:	041b      	lsls	r3, r3, #16
 8008d5a:	0e1b      	lsrs	r3, r3, #24
 8008d5c:	f003 030f 	and.w	r3, r3, #15
 8008d60:	4aa4      	ldr	r2, [pc, #656]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d68:	f000 bef6 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d70:	f000 bef2 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008d74:	4b9e      	ldr	r3, [pc, #632]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d80:	d107      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d88:	d103      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8008d8a:	4b9b      	ldr	r3, [pc, #620]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d8e:	f000 bee3 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008d92:	4b97      	ldr	r3, [pc, #604]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d9e:	d107      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8008da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008da6:	d103      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8008da8:	4b93      	ldr	r3, [pc, #588]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dac:	f000 bed4 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008db4:	f000 bed0 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dbc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	d158      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008dc4:	4b8a      	ldr	r3, [pc, #552]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008dc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008dca:	f003 0307 	and.w	r3, r3, #7
 8008dce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	d84b      	bhi.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8008dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008e15 	.word	0x08008e15
 8008de0:	08008df1 	.word	0x08008df1
 8008de4:	08008e03 	.word	0x08008e03
 8008de8:	08008e1f 	.word	0x08008e1f
 8008dec:	08008e29 	.word	0x08008e29
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fe ff4f 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dfe:	f000 beab 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e02:	f107 030c 	add.w	r3, r7, #12
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff f9fa 	bl	8008200 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e10:	f000 bea2 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008e14:	f7fd ffa8 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8008e18:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008e1a:	f000 be9d 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008e1e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008e22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e24:	f000 be98 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008e28:	4b71      	ldr	r3, [pc, #452]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b20      	cmp	r3, #32
 8008e32:	d118      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008e34:	4b6e      	ldr	r3, [pc, #440]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d005      	beq.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8008e40:	4b6b      	ldr	r3, [pc, #428]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	0e1b      	lsrs	r3, r3, #24
 8008e46:	f003 030f 	and.w	r3, r3, #15
 8008e4a:	e006      	b.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8008e4c:	4b68      	ldr	r3, [pc, #416]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e52:	041b      	lsls	r3, r3, #16
 8008e54:	0e1b      	lsrs	r3, r3, #24
 8008e56:	f003 030f 	and.w	r3, r3, #15
 8008e5a:	4a66      	ldr	r2, [pc, #408]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e60:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008e62:	f000 be79 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e6a:	f000 be75 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e72:	f000 be71 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e7a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008e7e:	430b      	orrs	r3, r1
 8008e80:	d167      	bne.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8008e82:	4b5b      	ldr	r3, [pc, #364]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e88:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008e8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e94:	d036      	beq.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e9c:	d855      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ea4:	d029      	beq.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008eac:	d84d      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eb4:	d013      	beq.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ebc:	d845      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d015      	beq.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eca:	d13e      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fe fee1 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008eda:	f000 be3d 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ede:	f107 030c 	add.w	r3, r7, #12
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff f98c 	bl	8008200 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008eec:	f000 be34 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008ef0:	f7fd ff3a 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8008ef4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008ef6:	f000 be2f 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008efa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008efe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f00:	f000 be2a 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008f04:	4b3a      	ldr	r3, [pc, #232]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b20      	cmp	r3, #32
 8008f0e:	d118      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008f10:	4b37      	ldr	r3, [pc, #220]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d005      	beq.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8008f1c:	4b34      	ldr	r3, [pc, #208]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	0e1b      	lsrs	r3, r3, #24
 8008f22:	f003 030f 	and.w	r3, r3, #15
 8008f26:	e006      	b.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008f28:	4b31      	ldr	r3, [pc, #196]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f2e:	041b      	lsls	r3, r3, #16
 8008f30:	0e1b      	lsrs	r3, r3, #24
 8008f32:	f003 030f 	and.w	r3, r3, #15
 8008f36:	4a2f      	ldr	r2, [pc, #188]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f3c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f3e:	f000 be0b 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f46:	f000 be07 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f4e:	f000 be03 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8008f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f56:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008f5a:	430b      	orrs	r3, r1
 8008f5c:	d152      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008f5e:	4b24      	ldr	r3, [pc, #144]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f68:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d104      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008f70:	f7fd ff14 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8008f74:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f76:	f000 bdef 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f80:	d104      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f82:	f7fd fdef 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8008f86:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f88:	f000 bde6 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008f8c:	4b18      	ldr	r3, [pc, #96]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f98:	d107      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fa0:	d103      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8008fa2:	4b15      	ldr	r3, [pc, #84]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa6:	f000 bdd7 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008faa:	4b11      	ldr	r3, [pc, #68]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0320 	and.w	r3, r3, #32
 8008fb2:	2b20      	cmp	r3, #32
 8008fb4:	d122      	bne.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fbc:	d11e      	bne.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d005      	beq.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8008fca:	4b09      	ldr	r3, [pc, #36]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	0e1b      	lsrs	r3, r3, #24
 8008fd0:	f003 030f 	and.w	r3, r3, #15
 8008fd4:	e006      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8008fd6:	4b06      	ldr	r3, [pc, #24]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008fd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008fdc:	041b      	lsls	r3, r3, #16
 8008fde:	0e1b      	lsrs	r3, r3, #24
 8008fe0:	f003 030f 	and.w	r3, r3, #15
 8008fe4:	4a03      	ldr	r2, [pc, #12]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fec:	f000 bdb4 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8008ff0:	46020c00 	.word	0x46020c00
 8008ff4:	0800f0f0 	.word	0x0800f0f0
 8008ff8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009000:	f000 bdaa 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009008:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800900c:	430b      	orrs	r3, r1
 800900e:	d14c      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009010:	4ba8      	ldr	r3, [pc, #672]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009016:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800901a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009022:	f7fd febb 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8009026:	6378      	str	r0, [r7, #52]	@ 0x34
 8009028:	f000 bd96 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800902c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009032:	d104      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009034:	f7fd fd96 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8009038:	6378      	str	r0, [r7, #52]	@ 0x34
 800903a:	f000 bd8d 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800903e:	4b9d      	ldr	r3, [pc, #628]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800904a:	d107      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800904c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009052:	d103      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8009054:	4b98      	ldr	r3, [pc, #608]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009056:	637b      	str	r3, [r7, #52]	@ 0x34
 8009058:	f000 bd7e 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800905c:	4b95      	ldr	r3, [pc, #596]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0320 	and.w	r3, r3, #32
 8009064:	2b20      	cmp	r3, #32
 8009066:	d11c      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8009068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800906e:	d118      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009070:	4b90      	ldr	r3, [pc, #576]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d005      	beq.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800907c:	4b8d      	ldr	r3, [pc, #564]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	0e1b      	lsrs	r3, r3, #24
 8009082:	f003 030f 	and.w	r3, r3, #15
 8009086:	e006      	b.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8009088:	4b8a      	ldr	r3, [pc, #552]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800908a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800908e:	041b      	lsls	r3, r3, #16
 8009090:	0e1b      	lsrs	r3, r3, #24
 8009092:	f003 030f 	and.w	r3, r3, #15
 8009096:	4a89      	ldr	r2, [pc, #548]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8009098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34
 800909e:	f000 bd5b 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090a6:	f000 bd57 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80090aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80090b2:	430b      	orrs	r3, r1
 80090b4:	d158      	bne.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80090b6:	4b7f      	ldr	r3, [pc, #508]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80090b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80090c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80090c6:	d028      	beq.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 80090c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80090cc:	d848      	bhi.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80090ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d0:	2b80      	cmp	r3, #128	@ 0x80
 80090d2:	d00e      	beq.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	2b80      	cmp	r3, #128	@ 0x80
 80090d8:	d842      	bhi.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80090da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 80090e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e2:	2b40      	cmp	r3, #64	@ 0x40
 80090e4:	d014      	beq.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80090e6:	e03b      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80090e8:	f7fd fe80 	bl	8006dec <HAL_RCC_GetPCLK3Freq>
 80090ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80090ee:	f000 bd33 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090f2:	4b70      	ldr	r3, [pc, #448]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090fe:	d103      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8009100:	4b6d      	ldr	r3, [pc, #436]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009102:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009104:	f000 bd28 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009108:	2300      	movs	r3, #0
 800910a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800910c:	f000 bd24 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009110:	f7fd fd28 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8009114:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009116:	f000 bd1f 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800911a:	4b66      	ldr	r3, [pc, #408]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0320 	and.w	r3, r3, #32
 8009122:	2b20      	cmp	r3, #32
 8009124:	d118      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009126:	4b63      	ldr	r3, [pc, #396]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d005      	beq.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8009132:	4b60      	ldr	r3, [pc, #384]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	0e1b      	lsrs	r3, r3, #24
 8009138:	f003 030f 	and.w	r3, r3, #15
 800913c:	e006      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800913e:	4b5d      	ldr	r3, [pc, #372]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009144:	041b      	lsls	r3, r3, #16
 8009146:	0e1b      	lsrs	r3, r3, #24
 8009148:	f003 030f 	and.w	r3, r3, #15
 800914c:	4a5b      	ldr	r2, [pc, #364]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800914e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009152:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009154:	f000 bd00 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009158:	2300      	movs	r3, #0
 800915a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800915c:	f000 bcfc 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8009160:	2300      	movs	r3, #0
 8009162:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009164:	f000 bcf8 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800916c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009170:	430b      	orrs	r3, r1
 8009172:	d14c      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009174:	4b4f      	ldr	r3, [pc, #316]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800917a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800917e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009182:	2b00      	cmp	r3, #0
 8009184:	d104      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009186:	f7fd fe09 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 800918a:	6378      	str	r0, [r7, #52]	@ 0x34
 800918c:	f000 bce4 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009196:	d104      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009198:	f7fd fce4 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 800919c:	6378      	str	r0, [r7, #52]	@ 0x34
 800919e:	f000 bcdb 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80091a2:	4b44      	ldr	r3, [pc, #272]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091ae:	d107      	bne.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 80091b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091b6:	d103      	bne.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 80091b8:	4b3f      	ldr	r3, [pc, #252]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80091ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80091bc:	f000 bccc 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80091c0:	4b3c      	ldr	r3, [pc, #240]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0320 	and.w	r3, r3, #32
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d11c      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80091cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80091d2:	d118      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80091d4:	4b37      	ldr	r3, [pc, #220]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80091e0:	4b34      	ldr	r3, [pc, #208]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	0e1b      	lsrs	r3, r3, #24
 80091e6:	f003 030f 	and.w	r3, r3, #15
 80091ea:	e006      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80091ec:	4b31      	ldr	r3, [pc, #196]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80091ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091f2:	041b      	lsls	r3, r3, #16
 80091f4:	0e1b      	lsrs	r3, r3, #24
 80091f6:	f003 030f 	and.w	r3, r3, #15
 80091fa:	4a30      	ldr	r2, [pc, #192]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80091fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009200:	637b      	str	r3, [r7, #52]	@ 0x34
 8009202:	f000 bca9 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	637b      	str	r3, [r7, #52]	@ 0x34
 800920a:	f000 bca5 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800920e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009212:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8009216:	430b      	orrs	r3, r1
 8009218:	d152      	bne.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800921a:	4b26      	ldr	r3, [pc, #152]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800921c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009220:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009224:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8009226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009228:	2b00      	cmp	r3, #0
 800922a:	d104      	bne.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800922c:	f7fd fdb6 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8009230:	6378      	str	r0, [r7, #52]	@ 0x34
 8009232:	f000 bc91 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800923c:	d104      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800923e:	f7fd fc91 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8009242:	6378      	str	r0, [r7, #52]	@ 0x34
 8009244:	f000 bc88 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8009248:	4b1a      	ldr	r3, [pc, #104]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009254:	d107      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800925c:	d103      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800925e:	4b16      	ldr	r3, [pc, #88]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009260:	637b      	str	r3, [r7, #52]	@ 0x34
 8009262:	f000 bc79 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8009266:	4b13      	ldr	r3, [pc, #76]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b20      	cmp	r3, #32
 8009270:	d11c      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8009272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009274:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009278:	d118      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800927a:	4b0e      	ldr	r3, [pc, #56]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d005      	beq.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 8009286:	4b0b      	ldr	r3, [pc, #44]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	0e1b      	lsrs	r3, r3, #24
 800928c:	f003 030f 	and.w	r3, r3, #15
 8009290:	e006      	b.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8009292:	4b08      	ldr	r3, [pc, #32]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009298:	041b      	lsls	r3, r3, #16
 800929a:	0e1b      	lsrs	r3, r3, #24
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	4a06      	ldr	r2, [pc, #24]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80092a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092a8:	f000 bc56 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80092b0:	f000 bc52 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80092b4:	46020c00 	.word	0x46020c00
 80092b8:	00f42400 	.word	0x00f42400
 80092bc:	0800f0f0 	.word	0x0800f0f0
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80092c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c4:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80092c8:	430b      	orrs	r3, r1
 80092ca:	d14a      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80092cc:	4ba5      	ldr	r3, [pc, #660]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80092ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092d2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80092d6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d104      	bne.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80092de:	f7fd fd5d 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 80092e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80092e4:	f000 bc38 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 80092e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092ee:	d104      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80092f0:	f7fd fc38 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 80092f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80092f6:	f000 bc2f 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 80092fa:	4b9a      	ldr	r3, [pc, #616]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009306:	d107      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800930e:	d103      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8009310:	4b95      	ldr	r3, [pc, #596]	@ (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009312:	637b      	str	r3, [r7, #52]	@ 0x34
 8009314:	f000 bc20 	b.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8009318:	4b92      	ldr	r3, [pc, #584]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 0320 	and.w	r3, r3, #32
 8009320:	2b20      	cmp	r3, #32
 8009322:	d11b      	bne.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8009324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009326:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800932a:	d117      	bne.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800932c:	4b8d      	ldr	r3, [pc, #564]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8009338:	4b8a      	ldr	r3, [pc, #552]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	0e1b      	lsrs	r3, r3, #24
 800933e:	f003 030f 	and.w	r3, r3, #15
 8009342:	e006      	b.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 8009344:	4b87      	ldr	r3, [pc, #540]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800934a:	041b      	lsls	r3, r3, #16
 800934c:	0e1b      	lsrs	r3, r3, #24
 800934e:	f003 030f 	and.w	r3, r3, #15
 8009352:	4a86      	ldr	r2, [pc, #536]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8009354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009358:	637b      	str	r3, [r7, #52]	@ 0x34
 800935a:	e3fd      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009360:	e3fa      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009362:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009366:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800936a:	430b      	orrs	r3, r1
 800936c:	d164      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800936e:	4b7d      	ldr	r3, [pc, #500]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009378:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	2b00      	cmp	r3, #0
 800937e:	d120      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009380:	4b78      	ldr	r3, [pc, #480]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b20      	cmp	r3, #32
 800938a:	d117      	bne.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800938c:	4b75      	ldr	r3, [pc, #468]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 8009398:	4b72      	ldr	r3, [pc, #456]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	0e1b      	lsrs	r3, r3, #24
 800939e:	f003 030f 	and.w	r3, r3, #15
 80093a2:	e006      	b.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 80093a4:	4b6f      	ldr	r3, [pc, #444]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80093a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093aa:	041b      	lsls	r3, r3, #16
 80093ac:	0e1b      	lsrs	r3, r3, #24
 80093ae:	f003 030f 	and.w	r3, r3, #15
 80093b2:	4a6e      	ldr	r2, [pc, #440]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80093b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ba:	e3cd      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c0:	e3ca      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80093c2:	4b68      	ldr	r3, [pc, #416]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80093c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093d0:	d112      	bne.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 80093d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093d8:	d10e      	bne.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093da:	4b62      	ldr	r3, [pc, #392]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80093dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093e8:	d102      	bne.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 80093ea:	23fa      	movs	r3, #250	@ 0xfa
 80093ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093ee:	e3b3      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80093f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80093f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093f6:	e3af      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80093f8:	4b5a      	ldr	r3, [pc, #360]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009404:	d106      	bne.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800940c:	d102      	bne.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 800940e:	4b56      	ldr	r3, [pc, #344]	@ (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009410:	637b      	str	r3, [r7, #52]	@ 0x34
 8009412:	e3a1      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009414:	4b53      	ldr	r3, [pc, #332]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800941a:	f003 0302 	and.w	r3, r3, #2
 800941e:	2b02      	cmp	r3, #2
 8009420:	d107      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 8009422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009424:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009428:	d103      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 800942a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800942e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009430:	e392      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	637b      	str	r3, [r7, #52]	@ 0x34
 8009436:	e38f      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800943c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009440:	430b      	orrs	r3, r1
 8009442:	d164      	bne.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009444:	4b47      	ldr	r3, [pc, #284]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800944a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800944e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	2b00      	cmp	r3, #0
 8009454:	d120      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009456:	4b43      	ldr	r3, [pc, #268]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	2b20      	cmp	r3, #32
 8009460:	d117      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009462:	4b40      	ldr	r3, [pc, #256]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800946a:	2b00      	cmp	r3, #0
 800946c:	d005      	beq.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 800946e:	4b3d      	ldr	r3, [pc, #244]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	0e1b      	lsrs	r3, r3, #24
 8009474:	f003 030f 	and.w	r3, r3, #15
 8009478:	e006      	b.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800947a:	4b3a      	ldr	r3, [pc, #232]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800947c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009480:	041b      	lsls	r3, r3, #16
 8009482:	0e1b      	lsrs	r3, r3, #24
 8009484:	f003 030f 	and.w	r3, r3, #15
 8009488:	4a38      	ldr	r2, [pc, #224]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800948a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800948e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009490:	e362      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8009492:	2300      	movs	r3, #0
 8009494:	637b      	str	r3, [r7, #52]	@ 0x34
 8009496:	e35f      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009498:	4b32      	ldr	r3, [pc, #200]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800949a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800949e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094a6:	d112      	bne.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094ae:	d10e      	bne.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80094b0:	4b2c      	ldr	r3, [pc, #176]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80094b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094be:	d102      	bne.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 80094c0:	23fa      	movs	r3, #250	@ 0xfa
 80094c2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80094c4:	e348      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80094c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80094ca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80094cc:	e344      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80094ce:	4b25      	ldr	r3, [pc, #148]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094da:	d106      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 80094dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094e2:	d102      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 80094e4:	4b20      	ldr	r3, [pc, #128]	@ (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80094e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e8:	e336      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80094ea:	4b1e      	ldr	r3, [pc, #120]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80094ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d107      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 80094f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094fe:	d103      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8009500:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009504:	637b      	str	r3, [r7, #52]	@ 0x34
 8009506:	e327      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	637b      	str	r3, [r7, #52]	@ 0x34
 800950c:	e324      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800950e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009512:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009516:	430b      	orrs	r3, r1
 8009518:	d14e      	bne.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800951a:	4b12      	ldr	r3, [pc, #72]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800951c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009520:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009524:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	2b00      	cmp	r3, #0
 800952a:	d103      	bne.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800952c:	f7fd fc36 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8009530:	6378      	str	r0, [r7, #52]	@ 0x34
 8009532:	e311      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009534:	4b0b      	ldr	r3, [pc, #44]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8009536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800953a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800953e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009542:	d119      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8009544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009546:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800954a:	d115      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800954c:	4b05      	ldr	r3, [pc, #20]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800954e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800955a:	d109      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 800955c:	23fa      	movs	r3, #250	@ 0xfa
 800955e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009560:	e2fa      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8009562:	bf00      	nop
 8009564:	46020c00 	.word	0x46020c00
 8009568:	00f42400 	.word	0x00f42400
 800956c:	0800f0f0 	.word	0x0800f0f0
      }
      else
      {
        frequency = LSI_VALUE;
 8009570:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009574:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009576:	e2ef      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009578:	4ba8      	ldr	r3, [pc, #672]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009584:	d106      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 8009586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009588:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800958c:	d102      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 800958e:	4ba4      	ldr	r3, [pc, #656]	@ (8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009590:	637b      	str	r3, [r7, #52]	@ 0x34
 8009592:	e2e1      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009594:	4ba1      	ldr	r3, [pc, #644]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d107      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 80095a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80095a8:	d103      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 80095aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80095b0:	e2d2      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80095b2:	2300      	movs	r3, #0
 80095b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095b6:	e2cf      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80095b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095bc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80095c0:	430b      	orrs	r3, r1
 80095c2:	d12d      	bne.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80095c4:	4b95      	ldr	r3, [pc, #596]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80095c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095ca:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80095ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80095d0:	4b92      	ldr	r3, [pc, #584]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095dc:	d105      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 80095de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d102      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 80095e4:	4b8e      	ldr	r3, [pc, #568]	@ (8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80095e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095e8:	e2b6      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095f0:	d107      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe fb4e 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009600:	e2aa      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009608:	d107      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800960a:	f107 0318 	add.w	r3, r7, #24
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fc9c 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	637b      	str	r3, [r7, #52]	@ 0x34
 8009618:	e29e      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	637b      	str	r3, [r7, #52]	@ 0x34
 800961e:	e29b      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009624:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009628:	430b      	orrs	r3, r1
 800962a:	d156      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800962c:	4b7b      	ldr	r3, [pc, #492]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800962e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009632:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009636:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800963e:	d028      	beq.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8009640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009642:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009646:	d845      	bhi.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8009648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800964e:	d013      	beq.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8009650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009652:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009656:	d83d      	bhi.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	2b00      	cmp	r3, #0
 800965c:	d004      	beq.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 800965e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009664:	d004      	beq.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 8009666:	e035      	b.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009668:	f7fd fbac 	bl	8006dc4 <HAL_RCC_GetPCLK2Freq>
 800966c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800966e:	e273      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009670:	f7fd fa78 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8009674:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009676:	e26f      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009678:	4b68      	ldr	r3, [pc, #416]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009684:	d102      	bne.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 8009686:	4b66      	ldr	r3, [pc, #408]	@ (8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009688:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800968a:	e265      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009690:	e262      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009692:	4b62      	ldr	r3, [pc, #392]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0320 	and.w	r3, r3, #32
 800969a:	2b20      	cmp	r3, #32
 800969c:	d117      	bne.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800969e:	4b5f      	ldr	r3, [pc, #380]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d005      	beq.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 80096aa:	4b5c      	ldr	r3, [pc, #368]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	0e1b      	lsrs	r3, r3, #24
 80096b0:	f003 030f 	and.w	r3, r3, #15
 80096b4:	e006      	b.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 80096b6:	4b59      	ldr	r3, [pc, #356]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80096b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096bc:	041b      	lsls	r3, r3, #16
 80096be:	0e1b      	lsrs	r3, r3, #24
 80096c0:	f003 030f 	and.w	r3, r3, #15
 80096c4:	4a57      	ldr	r2, [pc, #348]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80096c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80096cc:	e244      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096d2:	e241      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80096d4:	2300      	movs	r3, #0
 80096d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096d8:	e23e      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80096da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096de:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80096e2:	430b      	orrs	r3, r1
 80096e4:	d156      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80096e6:	4b4d      	ldr	r3, [pc, #308]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80096e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80096ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80096f0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80096f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80096f8:	d028      	beq.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009700:	d845      	bhi.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8009702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009708:	d013      	beq.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800970a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009710:	d83d      	bhi.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8009712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009714:	2b00      	cmp	r3, #0
 8009716:	d004      	beq.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8009718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800971e:	d004      	beq.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8009720:	e035      	b.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009722:	f7fd fb3b 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8009726:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009728:	e216      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800972a:	f7fd fa1b 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 800972e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009730:	e212      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009732:	4b3a      	ldr	r3, [pc, #232]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800973a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800973e:	d102      	bne.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8009740:	4b37      	ldr	r3, [pc, #220]	@ (8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009742:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009744:	e208      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800974a:	e205      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800974c:	4b33      	ldr	r3, [pc, #204]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0320 	and.w	r3, r3, #32
 8009754:	2b20      	cmp	r3, #32
 8009756:	d117      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009758:	4b30      	ldr	r3, [pc, #192]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d005      	beq.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8009764:	4b2d      	ldr	r3, [pc, #180]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	0e1b      	lsrs	r3, r3, #24
 800976a:	f003 030f 	and.w	r3, r3, #15
 800976e:	e006      	b.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8009770:	4b2a      	ldr	r3, [pc, #168]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009776:	041b      	lsls	r3, r3, #16
 8009778:	0e1b      	lsrs	r3, r3, #24
 800977a:	f003 030f 	and.w	r3, r3, #15
 800977e:	4a29      	ldr	r2, [pc, #164]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8009780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009784:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009786:	e1e7      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800978c:	e1e4      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009792:	e1e1      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009798:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800979c:	430b      	orrs	r3, r1
 800979e:	d17c      	bne.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80097a0:	4b1e      	ldr	r3, [pc, #120]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80097a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097a6:	f003 0318 	and.w	r3, r3, #24
 80097aa:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	2b18      	cmp	r3, #24
 80097b0:	d870      	bhi.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 80097b2:	a201      	add	r2, pc, #4	@ (adr r2, 80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 80097b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b8:	08009829 	.word	0x08009829
 80097bc:	08009895 	.word	0x08009895
 80097c0:	08009895 	.word	0x08009895
 80097c4:	08009895 	.word	0x08009895
 80097c8:	08009895 	.word	0x08009895
 80097cc:	08009895 	.word	0x08009895
 80097d0:	08009895 	.word	0x08009895
 80097d4:	08009895 	.word	0x08009895
 80097d8:	08009831 	.word	0x08009831
 80097dc:	08009895 	.word	0x08009895
 80097e0:	08009895 	.word	0x08009895
 80097e4:	08009895 	.word	0x08009895
 80097e8:	08009895 	.word	0x08009895
 80097ec:	08009895 	.word	0x08009895
 80097f0:	08009895 	.word	0x08009895
 80097f4:	08009895 	.word	0x08009895
 80097f8:	08009839 	.word	0x08009839
 80097fc:	08009895 	.word	0x08009895
 8009800:	08009895 	.word	0x08009895
 8009804:	08009895 	.word	0x08009895
 8009808:	08009895 	.word	0x08009895
 800980c:	08009895 	.word	0x08009895
 8009810:	08009895 	.word	0x08009895
 8009814:	08009895 	.word	0x08009895
 8009818:	08009853 	.word	0x08009853
 800981c:	46020c00 	.word	0x46020c00
 8009820:	00f42400 	.word	0x00f42400
 8009824:	0800f0f0 	.word	0x0800f0f0
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009828:	f7fd fae0 	bl	8006dec <HAL_RCC_GetPCLK3Freq>
 800982c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800982e:	e193      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009830:	f7fd f998 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8009834:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009836:	e18f      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009838:	4b9f      	ldr	r3, [pc, #636]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009844:	d102      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 8009846:	4b9d      	ldr	r3, [pc, #628]	@ (8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009848:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800984a:	e185      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009850:	e182      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009852:	4b99      	ldr	r3, [pc, #612]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 0320 	and.w	r3, r3, #32
 800985a:	2b20      	cmp	r3, #32
 800985c:	d117      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800985e:	4b96      	ldr	r3, [pc, #600]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d005      	beq.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 800986a:	4b93      	ldr	r3, [pc, #588]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	0e1b      	lsrs	r3, r3, #24
 8009870:	f003 030f 	and.w	r3, r3, #15
 8009874:	e006      	b.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 8009876:	4b90      	ldr	r3, [pc, #576]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800987c:	041b      	lsls	r3, r3, #16
 800987e:	0e1b      	lsrs	r3, r3, #24
 8009880:	f003 030f 	and.w	r3, r3, #15
 8009884:	4a8e      	ldr	r2, [pc, #568]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800988a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800988c:	e164      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009892:	e161      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009898:	e15e      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800989a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800989e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80098a2:	430b      	orrs	r3, r1
 80098a4:	d155      	bne.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80098a6:	4b84      	ldr	r3, [pc, #528]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80098a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098ac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80098b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80098b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098b8:	d013      	beq.n	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 80098ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098c0:	d844      	bhi.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80098c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098c8:	d013      	beq.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 80098ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098d0:	d83c      	bhi.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80098d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d014      	beq.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 80098d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098de:	d014      	beq.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 80098e0:	e034      	b.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098e2:	f107 0318 	add.w	r3, r7, #24
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fe fb30 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098f0:	e132      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fe f9ce 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80098fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009900:	e12a      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009902:	f7fd f92f 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8009906:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009908:	e126      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800990a:	4b6b      	ldr	r3, [pc, #428]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0320 	and.w	r3, r3, #32
 8009912:	2b20      	cmp	r3, #32
 8009914:	d117      	bne.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009916:	4b68      	ldr	r3, [pc, #416]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d005      	beq.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8009922:	4b65      	ldr	r3, [pc, #404]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	0e1b      	lsrs	r3, r3, #24
 8009928:	f003 030f 	and.w	r3, r3, #15
 800992c:	e006      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 800992e:	4b62      	ldr	r3, [pc, #392]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009934:	041b      	lsls	r3, r3, #16
 8009936:	0e1b      	lsrs	r3, r3, #24
 8009938:	f003 030f 	and.w	r3, r3, #15
 800993c:	4a60      	ldr	r2, [pc, #384]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800993e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009942:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009944:	e108      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800994a:	e105      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009950:	e102      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8009952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009956:	1e59      	subs	r1, r3, #1
 8009958:	ea52 0301 	orrs.w	r3, r2, r1
 800995c:	d13c      	bne.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800995e:	4b56      	ldr	r3, [pc, #344]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009960:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009964:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009968:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009970:	d027      	beq.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009978:	d82b      	bhi.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009980:	d017      	beq.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 8009982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009984:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009988:	d823      	bhi.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800998a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998c:	2b00      	cmp	r3, #0
 800998e:	d004      	beq.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8009990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009996:	d004      	beq.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8009998:	e01b      	b.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800999a:	f7fd f8e3 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 800999e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80099a0:	e0da      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fe f976 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80099ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099b0:	e0d2      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099b2:	f107 0318 	add.w	r3, r7, #24
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fac8 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099c0:	e0ca      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099c2:	f107 030c 	add.w	r3, r7, #12
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fe fc1a 	bl	8008200 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099d0:	e0c2      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099d6:	e0bf      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80099d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099dc:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80099e0:	430b      	orrs	r3, r1
 80099e2:	d131      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80099e4:	4b34      	ldr	r3, [pc, #208]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80099e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099ee:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80099f0:	4b31      	ldr	r3, [pc, #196]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80099f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d106      	bne.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 80099fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d103      	bne.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8009a04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a0a:	e0a5      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a1a:	d112      	bne.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a22:	d10e      	bne.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a24:	4b24      	ldr	r3, [pc, #144]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a32:	d102      	bne.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8009a34:	23fa      	movs	r3, #250	@ 0xfa
 8009a36:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a38:	e08e      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8009a3a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009a3e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a40:	e08a      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a46:	e087      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a4c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009a50:	430b      	orrs	r3, r1
 8009a52:	d13b      	bne.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009a54:	4b18      	ldr	r3, [pc, #96]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009a56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a5a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009a5e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009a60:	4b15      	ldr	r3, [pc, #84]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a6c:	d105      	bne.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d102      	bne.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 8009a74:	4b13      	ldr	r3, [pc, #76]	@ (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8009a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a78:	e06e      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a86:	d106      	bne.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 8009a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a8e:	d102      	bne.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009a90:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8009a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a94:	e060      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009a96:	4b08      	ldr	r3, [pc, #32]	@ (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aa2:	d106      	bne.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009aaa:	d102      	bne.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 8009aac:	4b03      	ldr	r3, [pc, #12]	@ (8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab0:	e052      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab6:	e04f      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8009ab8:	46020c00 	.word	0x46020c00
 8009abc:	00f42400 	.word	0x00f42400
 8009ac0:	0800f0f0 	.word	0x0800f0f0
 8009ac4:	02dc6c00 	.word	0x02dc6c00
 8009ac8:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8009acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ad0:	f1a3 0108 	sub.w	r1, r3, #8
 8009ad4:	ea52 0301 	orrs.w	r3, r2, r1
 8009ad8:	d13c      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8009ada:	4b22      	ldr	r3, [pc, #136]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8009adc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ae0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009ae4:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8009ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009af2:	d105      	bne.n	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8009af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 8009afa:	4b1b      	ldr	r3, [pc, #108]	@ (8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8009afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009afe:	e02b      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8009b00:	4b18      	ldr	r3, [pc, #96]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b0c:	d106      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b14:	d102      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8009b16:	4b15      	ldr	r3, [pc, #84]	@ (8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8009b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b1a:	e01d      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b22:	d107      	bne.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fe f8b5 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b32:	e011      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8009b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b36:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009b3a:	d108      	bne.n	8009b4e <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe f8a9 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	085b      	lsrs	r3, r3, #1
 8009b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b4c:	e004      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b52:	e001      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3738      	adds	r7, #56	@ 0x38
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	46020c00 	.word	0x46020c00
 8009b68:	00f42400 	.word	0x00f42400
 8009b6c:	007a1200 	.word	0x007a1200

08009b70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009b78:	4b47      	ldr	r3, [pc, #284]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a46      	ldr	r2, [pc, #280]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009b7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b82:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b84:	f7fa fafc 	bl	8004180 <HAL_GetTick>
 8009b88:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b8a:	e008      	b.n	8009b9e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b8c:	f7fa faf8 	bl	8004180 <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d901      	bls.n	8009b9e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e077      	b.n	8009c8e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1f0      	bne.n	8009b8c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009baa:	4b3b      	ldr	r3, [pc, #236]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009bb2:	f023 0303 	bic.w	r3, r3, #3
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	6811      	ldr	r1, [r2, #0]
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	6852      	ldr	r2, [r2, #4]
 8009bbe:	3a01      	subs	r2, #1
 8009bc0:	0212      	lsls	r2, r2, #8
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	4934      	ldr	r1, [pc, #208]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009bca:	4b33      	ldr	r3, [pc, #204]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009bcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bce:	4b33      	ldr	r3, [pc, #204]	@ (8009c9c <RCCEx_PLL2_Config+0x12c>)
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	6892      	ldr	r2, [r2, #8]
 8009bd6:	3a01      	subs	r2, #1
 8009bd8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	68d2      	ldr	r2, [r2, #12]
 8009be0:	3a01      	subs	r2, #1
 8009be2:	0252      	lsls	r2, r2, #9
 8009be4:	b292      	uxth	r2, r2
 8009be6:	4311      	orrs	r1, r2
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	6912      	ldr	r2, [r2, #16]
 8009bec:	3a01      	subs	r2, #1
 8009bee:	0412      	lsls	r2, r2, #16
 8009bf0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009bf4:	4311      	orrs	r1, r2
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	6952      	ldr	r2, [r2, #20]
 8009bfa:	3a01      	subs	r2, #1
 8009bfc:	0612      	lsls	r2, r2, #24
 8009bfe:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009c02:	430a      	orrs	r2, r1
 8009c04:	4924      	ldr	r1, [pc, #144]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c06:	4313      	orrs	r3, r2
 8009c08:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009c0a:	4b23      	ldr	r3, [pc, #140]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0e:	f023 020c 	bic.w	r2, r3, #12
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	4920      	ldr	r1, [pc, #128]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	491c      	ldr	r1, [pc, #112]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c30:	f023 0310 	bic.w	r3, r3, #16
 8009c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c36:	4b18      	ldr	r3, [pc, #96]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c3e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	69d2      	ldr	r2, [r2, #28]
 8009c46:	00d2      	lsls	r2, r2, #3
 8009c48:	4913      	ldr	r1, [pc, #76]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009c4e:	4b12      	ldr	r3, [pc, #72]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c52:	4a11      	ldr	r2, [pc, #68]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c54:	f043 0310 	orr.w	r3, r3, #16
 8009c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009c64:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009c66:	f7fa fa8b 	bl	8004180 <HAL_GetTick>
 8009c6a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c6c:	e008      	b.n	8009c80 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c6e:	f7fa fa87 	bl	8004180 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d901      	bls.n	8009c80 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e006      	b.n	8009c8e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c80:	4b05      	ldr	r3, [pc, #20]	@ (8009c98 <RCCEx_PLL2_Config+0x128>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d0f0      	beq.n	8009c6e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0

}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	46020c00 	.word	0x46020c00
 8009c9c:	80800000 	.word	0x80800000

08009ca0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009ca8:	4b47      	ldr	r3, [pc, #284]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a46      	ldr	r2, [pc, #280]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009cae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cb2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009cb4:	f7fa fa64 	bl	8004180 <HAL_GetTick>
 8009cb8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009cba:	e008      	b.n	8009cce <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cbc:	f7fa fa60 	bl	8004180 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d901      	bls.n	8009cce <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e077      	b.n	8009dbe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009cce:	4b3e      	ldr	r3, [pc, #248]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1f0      	bne.n	8009cbc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009cda:	4b3b      	ldr	r3, [pc, #236]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cde:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009ce2:	f023 0303 	bic.w	r3, r3, #3
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	6811      	ldr	r1, [r2, #0]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	6852      	ldr	r2, [r2, #4]
 8009cee:	3a01      	subs	r2, #1
 8009cf0:	0212      	lsls	r2, r2, #8
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	4934      	ldr	r1, [pc, #208]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	630b      	str	r3, [r1, #48]	@ 0x30
 8009cfa:	4b33      	ldr	r3, [pc, #204]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cfe:	4b33      	ldr	r3, [pc, #204]	@ (8009dcc <RCCEx_PLL3_Config+0x12c>)
 8009d00:	4013      	ands	r3, r2
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	6892      	ldr	r2, [r2, #8]
 8009d06:	3a01      	subs	r2, #1
 8009d08:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	68d2      	ldr	r2, [r2, #12]
 8009d10:	3a01      	subs	r2, #1
 8009d12:	0252      	lsls	r2, r2, #9
 8009d14:	b292      	uxth	r2, r2
 8009d16:	4311      	orrs	r1, r2
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	6912      	ldr	r2, [r2, #16]
 8009d1c:	3a01      	subs	r2, #1
 8009d1e:	0412      	lsls	r2, r2, #16
 8009d20:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009d24:	4311      	orrs	r1, r2
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	6952      	ldr	r2, [r2, #20]
 8009d2a:	3a01      	subs	r2, #1
 8009d2c:	0612      	lsls	r2, r2, #24
 8009d2e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009d32:	430a      	orrs	r2, r1
 8009d34:	4924      	ldr	r1, [pc, #144]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009d3a:	4b23      	ldr	r3, [pc, #140]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d3e:	f023 020c 	bic.w	r2, r3, #12
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	4920      	ldr	r1, [pc, #128]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	491c      	ldr	r1, [pc, #112]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d56:	4313      	orrs	r3, r2
 8009d58:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d5e:	4a1a      	ldr	r2, [pc, #104]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d60:	f023 0310 	bic.w	r3, r3, #16
 8009d64:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d66:	4b18      	ldr	r3, [pc, #96]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d6e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	69d2      	ldr	r2, [r2, #28]
 8009d76:	00d2      	lsls	r2, r2, #3
 8009d78:	4913      	ldr	r1, [pc, #76]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009d7e:	4b12      	ldr	r3, [pc, #72]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d82:	4a11      	ldr	r2, [pc, #68]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d84:	f043 0310 	orr.w	r3, r3, #16
 8009d88:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d94:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009d96:	f7fa f9f3 	bl	8004180 <HAL_GetTick>
 8009d9a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d9c:	e008      	b.n	8009db0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d9e:	f7fa f9ef 	bl	8004180 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d901      	bls.n	8009db0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e006      	b.n	8009dbe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009db0:	4b05      	ldr	r3, [pc, #20]	@ (8009dc8 <RCCEx_PLL3_Config+0x128>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d0f0      	beq.n	8009d9e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	46020c00 	.word	0x46020c00
 8009dcc:	80800000 	.word	0x80800000

08009dd0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e0fb      	b.n	8009fda <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a7f      	ldr	r2, [pc, #508]	@ (8009fe4 <HAL_SPI_Init+0x214>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d004      	beq.n	8009df6 <HAL_SPI_Init+0x26>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a7d      	ldr	r2, [pc, #500]	@ (8009fe8 <HAL_SPI_Init+0x218>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	e000      	b.n	8009df8 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009df6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a78      	ldr	r2, [pc, #480]	@ (8009fe4 <HAL_SPI_Init+0x214>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d004      	beq.n	8009e12 <HAL_SPI_Init+0x42>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a76      	ldr	r2, [pc, #472]	@ (8009fe8 <HAL_SPI_Init+0x218>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d105      	bne.n	8009e1e <HAL_SPI_Init+0x4e>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	2b0f      	cmp	r3, #15
 8009e18:	d901      	bls.n	8009e1e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e0dd      	b.n	8009fda <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fe8a 	bl	800ab38 <SPI_GetPacketSize>
 8009e24:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a6e      	ldr	r2, [pc, #440]	@ (8009fe4 <HAL_SPI_Init+0x214>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d004      	beq.n	8009e3a <HAL_SPI_Init+0x6a>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a6c      	ldr	r2, [pc, #432]	@ (8009fe8 <HAL_SPI_Init+0x218>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d102      	bne.n	8009e40 <HAL_SPI_Init+0x70>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b08      	cmp	r3, #8
 8009e3e:	d816      	bhi.n	8009e6e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e44:	4a69      	ldr	r2, [pc, #420]	@ (8009fec <HAL_SPI_Init+0x21c>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d00e      	beq.n	8009e68 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a68      	ldr	r2, [pc, #416]	@ (8009ff0 <HAL_SPI_Init+0x220>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d009      	beq.n	8009e68 <HAL_SPI_Init+0x98>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a66      	ldr	r2, [pc, #408]	@ (8009ff4 <HAL_SPI_Init+0x224>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d004      	beq.n	8009e68 <HAL_SPI_Init+0x98>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a65      	ldr	r2, [pc, #404]	@ (8009ff8 <HAL_SPI_Init+0x228>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d104      	bne.n	8009e72 <HAL_SPI_Init+0xa2>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b10      	cmp	r3, #16
 8009e6c:	d901      	bls.n	8009e72 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e0b3      	b.n	8009fda <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d106      	bne.n	8009e8c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7f9 fb82 	bl	8003590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 0201 	bic.w	r2, r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009eae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009eb8:	d119      	bne.n	8009eee <HAL_SPI_Init+0x11e>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ec2:	d103      	bne.n	8009ecc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d008      	beq.n	8009ede <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10c      	bne.n	8009eee <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ed8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009edc:	d107      	bne.n	8009eee <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009eec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00f      	beq.n	8009f1a <HAL_SPI_Init+0x14a>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	2b06      	cmp	r3, #6
 8009f00:	d90b      	bls.n	8009f1a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	e007      	b.n	8009f2a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009f28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	69da      	ldr	r2, [r3, #28]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f32:	431a      	orrs	r2, r3
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	431a      	orrs	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f3c:	ea42 0103 	orr.w	r1, r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68da      	ldr	r2, [r3, #12]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f54:	431a      	orrs	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	431a      	orrs	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	431a      	orrs	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	431a      	orrs	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f7e:	431a      	orrs	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	431a      	orrs	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f90:	431a      	orrs	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f96:	ea42 0103 	orr.w	r1, r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00a      	beq.n	8009fc8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	46002000 	.word	0x46002000
 8009fe8:	56002000 	.word	0x56002000
 8009fec:	40013000 	.word	0x40013000
 8009ff0:	50013000 	.word	0x50013000
 8009ff4:	40003800 	.word	0x40003800
 8009ff8:	50003800 	.word	0x50003800

08009ffc <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a91      	ldr	r2, [pc, #580]	@ (800a254 <HAL_SPI_TransmitReceive_DMA+0x258>)
 800a010:	4293      	cmp	r3, r2
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d001      	beq.n	800a022 <HAL_SPI_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 800a01e:	2302      	movs	r3, #2
 800a020:	e274      	b.n	800a50c <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d005      	beq.n	800a034 <HAL_SPI_TransmitReceive_DMA+0x38>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d002      	beq.n	800a034 <HAL_SPI_TransmitReceive_DMA+0x38>
 800a02e:	887b      	ldrh	r3, [r7, #2]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e269      	b.n	800a50c <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d101      	bne.n	800a046 <HAL_SPI_TransmitReceive_DMA+0x4a>
 800a042:	2302      	movs	r3, #2
 800a044:	e262      	b.n	800a50c <HAL_SPI_TransmitReceive_DMA+0x510>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2205      	movs	r2, #5
 800a052:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	887a      	ldrh	r2, [r7, #2]
 800a068:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	887a      	ldrh	r2, [r7, #2]
 800a070:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	887a      	ldrh	r2, [r7, #2]
 800a07e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	887a      	ldrh	r2, [r7, #2]
 800a086:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68da      	ldr	r2, [r3, #12]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a0a4:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689a      	ldr	r2, [r3, #8]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a0b4:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	2b0f      	cmp	r3, #15
 800a0bc:	d920      	bls.n	800a100 <HAL_SPI_TransmitReceive_DMA+0x104>
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0c4:	69db      	ldr	r3, [r3, #28]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800a0c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0ca:	d105      	bne.n	800a0d8 <HAL_SPI_TransmitReceive_DMA+0xdc>
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0d2:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d013      	beq.n	800a100 <HAL_SPI_TransmitReceive_DMA+0x104>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 800a0dc:	4a5e      	ldr	r2, [pc, #376]	@ (800a258 <HAL_SPI_TransmitReceive_DMA+0x25c>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d01e      	beq.n	800a120 <HAL_SPI_TransmitReceive_DMA+0x124>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a5d      	ldr	r2, [pc, #372]	@ (800a25c <HAL_SPI_TransmitReceive_DMA+0x260>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d019      	beq.n	800a120 <HAL_SPI_TransmitReceive_DMA+0x124>
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a5b      	ldr	r2, [pc, #364]	@ (800a260 <HAL_SPI_TransmitReceive_DMA+0x264>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d014      	beq.n	800a120 <HAL_SPI_TransmitReceive_DMA+0x124>
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a5a      	ldr	r2, [pc, #360]	@ (800a264 <HAL_SPI_TransmitReceive_DMA+0x268>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d00f      	beq.n	800a120 <HAL_SPI_TransmitReceive_DMA+0x124>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800a104:	2b07      	cmp	r3, #7
 800a106:	d911      	bls.n	800a12c <HAL_SPI_TransmitReceive_DMA+0x130>
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a10e:	69db      	ldr	r3, [r3, #28]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <HAL_SPI_TransmitReceive_DMA+0x124>
        (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_BYTE))))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a11a:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d105      	bne.n	800a12c <HAL_SPI_TransmitReceive_DMA+0x130>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e1ef      	b.n	800a50c <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	2b07      	cmp	r3, #7
 800a132:	d842      	bhi.n	800a1ba <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d109      	bne.n	800a154 <HAL_SPI_TransmitReceive_DMA+0x158>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a146:	b29b      	uxth	r3, r3
 800a148:	3301      	adds	r3, #1
 800a14a:	105b      	asrs	r3, r3, #1
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d109      	bne.n	800a174 <HAL_SPI_TransmitReceive_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a166:	b29b      	uxth	r3, r3
 800a168:	3303      	adds	r3, #3
 800a16a:	109b      	asrs	r3, r3, #2
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a17a:	69db      	ldr	r3, [r3, #28]
 800a17c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a180:	d109      	bne.n	800a196 <HAL_SPI_TransmitReceive_DMA+0x19a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a188:	b29b      	uxth	r3, r3
 800a18a:	3301      	adds	r3, #1
 800a18c:	105b      	asrs	r3, r3, #1
 800a18e:	b29a      	uxth	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1a2:	d12f      	bne.n	800a204 <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	3303      	adds	r3, #3
 800a1ae:	109b      	asrs	r3, r3, #2
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a1b8:	e024      	b.n	800a204 <HAL_SPI_TransmitReceive_DMA+0x208>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	2b0f      	cmp	r3, #15
 800a1c0:	d820      	bhi.n	800a204 <HAL_SPI_TransmitReceive_DMA+0x208>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d109      	bne.n	800a1e2 <HAL_SPI_TransmitReceive_DMA+0x1e6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	105b      	asrs	r3, r3, #1
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1ee:	d109      	bne.n	800a204 <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	105b      	asrs	r3, r3, #1
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a20a:	4a17      	ldr	r2, [pc, #92]	@ (800a268 <HAL_SPI_TransmitReceive_DMA+0x26c>)
 800a20c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a214:	4a15      	ldr	r2, [pc, #84]	@ (800a26c <HAL_SPI_TransmitReceive_DMA+0x270>)
 800a216:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a21e:	4a14      	ldr	r2, [pc, #80]	@ (800a270 <HAL_SPI_TransmitReceive_DMA+0x274>)
 800a220:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a228:	2200      	movs	r2, #0
 800a22a:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	2b07      	cmp	r3, #7
 800a232:	d804      	bhi.n	800a23e <HAL_SPI_TransmitReceive_DMA+0x242>
  {
    hspi->RxXferCount = Size;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	887a      	ldrh	r2, [r7, #2]
 800a238:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a23c:	e020      	b.n	800a280 <HAL_SPI_TransmitReceive_DMA+0x284>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	2b0f      	cmp	r3, #15
 800a244:	d816      	bhi.n	800a274 <HAL_SPI_TransmitReceive_DMA+0x278>
  {
    hspi->RxXferCount = Size * 2U;
 800a246:	887b      	ldrh	r3, [r7, #2]
 800a248:	005b      	lsls	r3, r3, #1
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a252:	e015      	b.n	800a280 <HAL_SPI_TransmitReceive_DMA+0x284>
 800a254:	46002000 	.word	0x46002000
 800a258:	40013000 	.word	0x40013000
 800a25c:	50013000 	.word	0x50013000
 800a260:	40003800 	.word	0x40003800
 800a264:	50003800 	.word	0x50003800
 800a268:	0800a963 	.word	0x0800a963
 800a26c:	0800a911 	.word	0x0800a911
 800a270:	0800a97f 	.word	0x0800a97f
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 800a274:	887b      	ldrh	r3, [r7, #2]
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	b29a      	uxth	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  }
  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d02d      	beq.n	800a2ec <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d024      	beq.n	800a2e6 <HAL_SPI_TransmitReceive_DMA+0x2ea>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fa ff94 	bl	8005208 <HAL_DMAEx_List_Start_IT>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75fb      	strb	r3, [r7, #23]
 800a2e4:	e014      	b.n	800a310 <HAL_SPI_TransmitReceive_DMA+0x314>
    }
    else
    {
      status = HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	75fb      	strb	r3, [r7, #23]
 800a2ea:	e011      	b.n	800a310 <HAL_SPI_TransmitReceive_DMA+0x314>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3330      	adds	r3, #48	@ 0x30
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2fe:	461a      	mov	r2, r3
                              hspi->RxXferCount);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a306:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a308:	f7fa fa2a 	bl	8004760 <HAL_DMA_Start_IT>
 800a30c:	4603      	mov	r3, r0
 800a30e:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800a310:	7dfb      	ldrb	r3, [r7, #23]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d011      	beq.n	800a33a <HAL_SPI_TransmitReceive_DMA+0x33e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a31c:	f043 0210 	orr.w	r2, r3, #16
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2201      	movs	r2, #1
 800a32a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	e0e8      	b.n	800a50c <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a348:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a350:	2200      	movs	r2, #0
 800a352:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a35a:	2200      	movs	r2, #0
 800a35c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a364:	2200      	movs	r2, #0
 800a366:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a36e:	4a69      	ldr	r2, [pc, #420]	@ (800a514 <HAL_SPI_TransmitReceive_DMA+0x518>)
 800a370:	669a      	str	r2, [r3, #104]	@ 0x68

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	2b07      	cmp	r3, #7
 800a378:	d804      	bhi.n	800a384 <HAL_SPI_TransmitReceive_DMA+0x388>
  {
    hspi->TxXferCount = Size;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	887a      	ldrh	r2, [r7, #2]
 800a37e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a382:	e010      	b.n	800a3a6 <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	2b0f      	cmp	r3, #15
 800a38a:	d806      	bhi.n	800a39a <HAL_SPI_TransmitReceive_DMA+0x39e>
  {
    hspi->TxXferCount = Size * 2U;
 800a38c:	887b      	ldrh	r3, [r7, #2]
 800a38e:	005b      	lsls	r3, r3, #1
 800a390:	b29a      	uxth	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a398:	e005      	b.n	800a3a6 <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 800a39a:	887b      	ldrh	r3, [r7, #2]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel  */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d02d      	beq.n	800a412 <HAL_SPI_TransmitReceive_DMA+0x416>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d024      	beq.n	800a40c <HAL_SPI_TransmitReceive_DMA+0x410>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f103 0220 	add.w	r2, r3, #32
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a400:	4618      	mov	r0, r3
 800a402:	f7fa ff01 	bl	8005208 <HAL_DMAEx_List_Start_IT>
 800a406:	4603      	mov	r3, r0
 800a408:	75fb      	strb	r3, [r7, #23]
 800a40a:	e014      	b.n	800a436 <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
    else
    {
      status = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	75fb      	strb	r3, [r7, #23]
 800a410:	e011      	b.n	800a436 <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a41c:	4619      	mov	r1, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3320      	adds	r3, #32
 800a424:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a42c:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a42e:	f7fa f997 	bl	8004760 <HAL_DMA_Start_IT>
 800a432:	4603      	mov	r3, r0
 800a434:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800a436:	7dfb      	ldrb	r3, [r7, #23]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d017      	beq.n	800a46c <HAL_SPI_TransmitReceive_DMA+0x470>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a442:	4618      	mov	r0, r3
 800a444:	f7fa f9ec 	bl	8004820 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a44e:	f043 0210 	orr.w	r2, r3, #16
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e04f      	b.n	800a50c <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) && (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a474:	2b81      	cmp	r3, #129	@ 0x81
 800a476:	d10e      	bne.n	800a496 <HAL_SPI_TransmitReceive_DMA+0x49a>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a47e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a480:	2b81      	cmp	r3, #129	@ 0x81
 800a482:	d108      	bne.n	800a496 <HAL_SPI_TransmitReceive_DMA+0x49a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	6812      	ldr	r2, [r2, #0]
 800a48e:	0c1b      	lsrs	r3, r3, #16
 800a490:	041b      	lsls	r3, r3, #16
 800a492:	6053      	str	r3, [r2, #4]
 800a494:	e009      	b.n	800a4aa <HAL_SPI_TransmitReceive_DMA+0x4ae>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	0c1b      	lsrs	r3, r3, #16
 800a49e:	041b      	lsls	r3, r3, #16
 800a4a0:	8879      	ldrh	r1, [r7, #2]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	6812      	ldr	r2, [r2, #0]
 800a4a6:	430b      	orrs	r3, r1
 800a4a8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	689a      	ldr	r2, [r3, #8]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4b8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	691a      	ldr	r2, [r3, #16]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800a4c8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f042 0201 	orr.w	r2, r2, #1
 800a4d8:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10c      	bne.n	800a502 <HAL_SPI_TransmitReceive_DMA+0x506>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4f0:	d107      	bne.n	800a502 <HAL_SPI_TransmitReceive_DMA+0x506>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a500:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3718      	adds	r7, #24
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	0800a97f 	.word	0x0800a97f

0800a518 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b08a      	sub	sp, #40	@ 0x28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a530:	6a3a      	ldr	r2, [r7, #32]
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	4013      	ands	r3, r2
 800a536:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a540:	2300      	movs	r3, #0
 800a542:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a54a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3330      	adds	r3, #48	@ 0x30
 800a552:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d010      	beq.n	800a580 <HAL_SPI_IRQHandler+0x68>
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	f003 0308 	and.w	r3, r3, #8
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00b      	beq.n	800a580 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	699a      	ldr	r2, [r3, #24]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a576:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f9bf 	bl	800a8fc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a57e:	e19a      	b.n	800a8b6 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a586:	2b00      	cmp	r3, #0
 800a588:	d113      	bne.n	800a5b2 <HAL_SPI_IRQHandler+0x9a>
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	f003 0320 	and.w	r3, r3, #32
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10e      	bne.n	800a5b2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d009      	beq.n	800a5b2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	4798      	blx	r3
    handled = 1UL;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10f      	bne.n	800a5dc <HAL_SPI_IRQHandler+0xc4>
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00a      	beq.n	800a5dc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d105      	bne.n	800a5dc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	4798      	blx	r3
    handled = 1UL;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	f003 0320 	and.w	r3, r3, #32
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10f      	bne.n	800a606 <HAL_SPI_IRQHandler+0xee>
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	f003 0302 	and.w	r3, r3, #2
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00a      	beq.n	800a606 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d105      	bne.n	800a606 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	4798      	blx	r3
    handled = 1UL;
 800a602:	2301      	movs	r3, #1
 800a604:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800a606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f040 814f 	bne.w	800a8ac <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	f003 0308 	and.w	r3, r3, #8
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 808b 	beq.w	800a730 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	699a      	ldr	r2, [r3, #24]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f042 0208 	orr.w	r2, r2, #8
 800a628:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	699a      	ldr	r2, [r3, #24]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f042 0210 	orr.w	r2, r2, #16
 800a638:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	699a      	ldr	r2, [r3, #24]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a648:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	691a      	ldr	r2, [r3, #16]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f022 0208 	bic.w	r2, r2, #8
 800a658:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d13d      	bne.n	800a6e4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a668:	e036      	b.n	800a6d8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	2b0f      	cmp	r3, #15
 800a670:	d90b      	bls.n	800a68a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a67a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a67c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a682:	1d1a      	adds	r2, r3, #4
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a688:	e01d      	b.n	800a6c6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	2b07      	cmp	r3, #7
 800a690:	d90b      	bls.n	800a6aa <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	8812      	ldrh	r2, [r2, #0]
 800a69a:	b292      	uxth	r2, r2
 800a69c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6a2:	1c9a      	adds	r2, r3, #2
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a6a8:	e00d      	b.n	800a6c6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6b6:	7812      	ldrb	r2, [r2, #0]
 800a6b8:	b2d2      	uxtb	r2, r2
 800a6ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6c0:	1c5a      	adds	r2, r3, #1
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1c2      	bne.n	800a66a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f987 	bl	800a9f8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d003      	beq.n	800a704 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7f7 fc2d 	bl	8001f5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a702:	e0d8      	b.n	800a8b6 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a704:	7cfb      	ldrb	r3, [r7, #19]
 800a706:	2b05      	cmp	r3, #5
 800a708:	d103      	bne.n	800a712 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7f7 fc16 	bl	8001f3c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a710:	e0ce      	b.n	800a8b0 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a712:	7cfb      	ldrb	r3, [r7, #19]
 800a714:	2b04      	cmp	r3, #4
 800a716:	d103      	bne.n	800a720 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f8db 	bl	800a8d4 <HAL_SPI_RxCpltCallback>
    return;
 800a71e:	e0c7      	b.n	800a8b0 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a720:	7cfb      	ldrb	r3, [r7, #19]
 800a722:	2b03      	cmp	r3, #3
 800a724:	f040 80c4 	bne.w	800a8b0 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f8c9 	bl	800a8c0 <HAL_SPI_TxCpltCallback>
    return;
 800a72e:	e0bf      	b.n	800a8b0 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 80bd 	beq.w	800a8b6 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00f      	beq.n	800a766 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a74c:	f043 0204 	orr.w	r2, r3, #4
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	699a      	ldr	r2, [r3, #24]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a764:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00f      	beq.n	800a790 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a776:	f043 0201 	orr.w	r2, r3, #1
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699a      	ldr	r2, [r3, #24]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a78e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00f      	beq.n	800a7ba <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7a0:	f043 0208 	orr.w	r2, r3, #8
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	699a      	ldr	r2, [r3, #24]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7b8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	f003 0320 	and.w	r3, r3, #32
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00f      	beq.n	800a7e4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	699a      	ldr	r2, [r3, #24]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f042 0220 	orr.w	r2, r2, #32
 800a7e2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d062      	beq.n	800a8b4 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 0201 	bic.w	r2, r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	6812      	ldr	r2, [r2, #0]
 800a808:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800a80c:	f023 0303 	bic.w	r3, r3, #3
 800a810:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a818:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a81c:	d13e      	bne.n	800a89c <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a82c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a834:	2b00      	cmp	r3, #0
 800a836:	d015      	beq.n	800a864 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a83e:	4a1f      	ldr	r2, [pc, #124]	@ (800a8bc <HAL_SPI_IRQHandler+0x3a4>)
 800a840:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fa f865 	bl	8004918 <HAL_DMA_Abort_IT>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d007      	beq.n	800a864 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a85a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d022      	beq.n	800a8b4 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a874:	4a11      	ldr	r2, [pc, #68]	@ (800a8bc <HAL_SPI_IRQHandler+0x3a4>)
 800a876:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fa f84a 	bl	8004918 <HAL_DMA_Abort_IT>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d014      	beq.n	800a8b4 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a890:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a89a:	e00b      	b.n	800a8b4 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7f7 fb59 	bl	8001f5c <HAL_SPI_ErrorCallback>
    return;
 800a8aa:	e003      	b.n	800a8b4 <HAL_SPI_IRQHandler+0x39c>
    return;
 800a8ac:	bf00      	nop
 800a8ae:	e002      	b.n	800a8b6 <HAL_SPI_IRQHandler+0x39e>
    return;
 800a8b0:	bf00      	nop
 800a8b2:	e000      	b.n	800a8b6 <HAL_SPI_IRQHandler+0x39e>
    return;
 800a8b4:	bf00      	nop
  }
}
 800a8b6:	3728      	adds	r7, #40	@ 0x28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	0800a9c5 	.word	0x0800a9c5

0800a8c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a904:	bf00      	nop
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a91c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b07      	cmp	r3, #7
 800a928:	d017      	beq.n	800a95a <SPI_DMATransmitReceiveCplt+0x4a>
  {
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a932:	2b81      	cmp	r3, #129	@ 0x81
 800a934:	d109      	bne.n	800a94a <SPI_DMATransmitReceiveCplt+0x3a>
        (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a93c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800a93e:	2b81      	cmp	r3, #129	@ 0x81
 800a940:	d103      	bne.n	800a94a <SPI_DMATransmitReceiveCplt+0x3a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f7f7 fafa 	bl	8001f3c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a948:	e007      	b.n	800a95a <SPI_DMATransmitReceiveCplt+0x4a>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	691a      	ldr	r2, [r3, #16]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f042 0208 	orr.w	r2, r2, #8
 800a958:	611a      	str	r2, [r3, #16]
}
 800a95a:	bf00      	nop
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a96e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f7ff ffb9 	bl	800a8e8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a976:	bf00      	nop
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a98a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f7fa f94d 	bl	8004c2c <HAL_DMA_GetError>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d011      	beq.n	800a9bc <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 f82d 	bl	800a9f8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9a4:	f043 0210 	orr.w	r2, r3, #16
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f7f7 fad0 	bl	8001f5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a9bc:	bf00      	nop
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f7f7 fab6 	bl	8001f5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a9f0:	bf00      	nop
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	699a      	ldr	r2, [r3, #24]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f042 0208 	orr.w	r2, r2, #8
 800aa16:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	699a      	ldr	r2, [r3, #24]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f042 0210 	orr.w	r2, r2, #16
 800aa26:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0201 	bic.w	r2, r2, #1
 800aa36:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	6812      	ldr	r2, [r2, #0]
 800aa42:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800aa46:	f023 0303 	bic.w	r3, r3, #3
 800aa4a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	689a      	ldr	r2, [r3, #8]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800aa5a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b04      	cmp	r3, #4
 800aa66:	d014      	beq.n	800aa92 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f003 0320 	and.w	r3, r3, #32
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00f      	beq.n	800aa92 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	699a      	ldr	r2, [r3, #24]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f042 0220 	orr.w	r2, r2, #32
 800aa90:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d014      	beq.n	800aac8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00f      	beq.n	800aac8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaae:	f043 0204 	orr.w	r2, r3, #4
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	699a      	ldr	r2, [r3, #24]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aac6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00f      	beq.n	800aaf2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aad8:	f043 0201 	orr.w	r2, r3, #1
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	699a      	ldr	r2, [r3, #24]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aaf0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00f      	beq.n	800ab1c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab02:	f043 0208 	orr.w	r2, r3, #8
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	699a      	ldr	r2, [r3, #24]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab1a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800ab2c:	bf00      	nop
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab44:	095b      	lsrs	r3, r3, #5
 800ab46:	3301      	adds	r3, #1
 800ab48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	3307      	adds	r3, #7
 800ab56:	08db      	lsrs	r3, r3, #3
 800ab58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	fb02 f303 	mul.w	r3, r2, r3
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr

0800ab6e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800ab6e:	b480      	push	{r7}
 800ab70:	b083      	sub	sp, #12
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d12e      	bne.n	800abe2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d101      	bne.n	800ab92 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800ab8e:	2302      	movs	r3, #2
 800ab90:	e028      	b.n	800abe4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f022 0201 	bic.w	r2, r2, #1
 800abb0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800abbe:	ea42 0103 	orr.w	r1, r2, r3
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	689a      	ldr	r2, [r3, #8]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	430a      	orrs	r2, r1
 800abcc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	e000      	b.n	800abe4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
  }
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d001      	beq.n	800ac08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e072      	b.n	800acee <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68da      	ldr	r2, [r3, #12]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f042 0201 	orr.w	r2, r2, #1
 800ac1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a35      	ldr	r2, [pc, #212]	@ (800acfc <HAL_TIM_Base_Start_IT+0x10c>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d040      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a34      	ldr	r2, [pc, #208]	@ (800ad00 <HAL_TIM_Base_Start_IT+0x110>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d03b      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac3c:	d036      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac46:	d031      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a2d      	ldr	r2, [pc, #180]	@ (800ad04 <HAL_TIM_Base_Start_IT+0x114>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d02c      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a2c      	ldr	r2, [pc, #176]	@ (800ad08 <HAL_TIM_Base_Start_IT+0x118>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d027      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a2a      	ldr	r2, [pc, #168]	@ (800ad0c <HAL_TIM_Base_Start_IT+0x11c>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d022      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a29      	ldr	r2, [pc, #164]	@ (800ad10 <HAL_TIM_Base_Start_IT+0x120>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d01d      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a27      	ldr	r2, [pc, #156]	@ (800ad14 <HAL_TIM_Base_Start_IT+0x124>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d018      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a26      	ldr	r2, [pc, #152]	@ (800ad18 <HAL_TIM_Base_Start_IT+0x128>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d013      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a24      	ldr	r2, [pc, #144]	@ (800ad1c <HAL_TIM_Base_Start_IT+0x12c>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d00e      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a23      	ldr	r2, [pc, #140]	@ (800ad20 <HAL_TIM_Base_Start_IT+0x130>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d009      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a21      	ldr	r2, [pc, #132]	@ (800ad24 <HAL_TIM_Base_Start_IT+0x134>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d004      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xbc>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a20      	ldr	r2, [pc, #128]	@ (800ad28 <HAL_TIM_Base_Start_IT+0x138>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d115      	bne.n	800acd8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	689a      	ldr	r2, [r3, #8]
 800acb2:	4b1e      	ldr	r3, [pc, #120]	@ (800ad2c <HAL_TIM_Base_Start_IT+0x13c>)
 800acb4:	4013      	ands	r3, r2
 800acb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b06      	cmp	r3, #6
 800acbc:	d015      	beq.n	800acea <HAL_TIM_Base_Start_IT+0xfa>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acc4:	d011      	beq.n	800acea <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f042 0201 	orr.w	r2, r2, #1
 800acd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acd6:	e008      	b.n	800acea <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f042 0201 	orr.w	r2, r2, #1
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	e000      	b.n	800acec <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	40012c00 	.word	0x40012c00
 800ad00:	50012c00 	.word	0x50012c00
 800ad04:	40000400 	.word	0x40000400
 800ad08:	50000400 	.word	0x50000400
 800ad0c:	40000800 	.word	0x40000800
 800ad10:	50000800 	.word	0x50000800
 800ad14:	40000c00 	.word	0x40000c00
 800ad18:	50000c00 	.word	0x50000c00
 800ad1c:	40013400 	.word	0x40013400
 800ad20:	50013400 	.word	0x50013400
 800ad24:	40014000 	.word	0x40014000
 800ad28:	50014000 	.word	0x50014000
 800ad2c:	00010007 	.word	0x00010007

0800ad30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68da      	ldr	r2, [r3, #12]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f022 0201 	bic.w	r2, r2, #1
 800ad46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	6a1a      	ldr	r2, [r3, #32]
 800ad4e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ad52:	4013      	ands	r3, r2
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10f      	bne.n	800ad78 <HAL_TIM_Base_Stop_IT+0x48>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	6a1a      	ldr	r2, [r3, #32]
 800ad5e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ad62:	4013      	ands	r3, r2
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d107      	bne.n	800ad78 <HAL_TIM_Base_Stop_IT+0x48>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f022 0201 	bic.w	r2, r2, #1
 800ad76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e049      	b.n	800ae34 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d106      	bne.n	800adba <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7f8 fd2d 	bl	8003814 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2202      	movs	r2, #2
 800adbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3304      	adds	r3, #4
 800adca:	4619      	mov	r1, r3
 800adcc:	4610      	mov	r0, r2
 800adce:	f000 fa27 	bl	800b220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	f003 0302 	and.w	r3, r3, #2
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d020      	beq.n	800aea0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f003 0302 	and.w	r3, r3, #2
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d01b      	beq.n	800aea0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f06f 0202 	mvn.w	r2, #2
 800ae70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2201      	movs	r2, #1
 800ae76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	f003 0303 	and.w	r3, r3, #3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f9ac 	bl	800b1e4 <HAL_TIM_IC_CaptureCallback>
 800ae8c:	e005      	b.n	800ae9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f99e 	bl	800b1d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f9af 	bl	800b1f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	f003 0304 	and.w	r3, r3, #4
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d020      	beq.n	800aeec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f003 0304 	and.w	r3, r3, #4
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d01b      	beq.n	800aeec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f06f 0204 	mvn.w	r2, #4
 800aebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2202      	movs	r2, #2
 800aec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d003      	beq.n	800aeda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f986 	bl	800b1e4 <HAL_TIM_IC_CaptureCallback>
 800aed8:	e005      	b.n	800aee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f978 	bl	800b1d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f989 	bl	800b1f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f003 0308 	and.w	r3, r3, #8
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d020      	beq.n	800af38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f003 0308 	and.w	r3, r3, #8
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d01b      	beq.n	800af38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f06f 0208 	mvn.w	r2, #8
 800af08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2204      	movs	r2, #4
 800af0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	69db      	ldr	r3, [r3, #28]
 800af16:	f003 0303 	and.w	r3, r3, #3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f960 	bl	800b1e4 <HAL_TIM_IC_CaptureCallback>
 800af24:	e005      	b.n	800af32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f952 	bl	800b1d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f963 	bl	800b1f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	f003 0310 	and.w	r3, r3, #16
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d020      	beq.n	800af84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f003 0310 	and.w	r3, r3, #16
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d01b      	beq.n	800af84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f06f 0210 	mvn.w	r2, #16
 800af54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2208      	movs	r2, #8
 800af5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	69db      	ldr	r3, [r3, #28]
 800af62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f93a 	bl	800b1e4 <HAL_TIM_IC_CaptureCallback>
 800af70:	e005      	b.n	800af7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f92c 	bl	800b1d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f93d 	bl	800b1f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	f003 0301 	and.w	r3, r3, #1
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00c      	beq.n	800afa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f003 0301 	and.w	r3, r3, #1
 800af94:	2b00      	cmp	r3, #0
 800af96:	d007      	beq.n	800afa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f06f 0201 	mvn.w	r2, #1
 800afa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7f8 fe0e 	bl	8003bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d104      	bne.n	800afbc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00c      	beq.n	800afd6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d007      	beq.n	800afd6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800afce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fec7 	bl	800bd64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00c      	beq.n	800affa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d007      	beq.n	800affa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 febf 	bl	800bd78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00c      	beq.n	800b01e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d007      	beq.n	800b01e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 f8f7 	bl	800b20c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	f003 0320 	and.w	r3, r3, #32
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00c      	beq.n	800b042 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f003 0320 	and.w	r3, r3, #32
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d007      	beq.n	800b042 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f06f 0220 	mvn.w	r2, #32
 800b03a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 fe87 	bl	800bd50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00c      	beq.n	800b066 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d007      	beq.n	800b066 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b05e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fe93 	bl	800bd8c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00c      	beq.n	800b08a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b076:	2b00      	cmp	r3, #0
 800b078:	d007      	beq.n	800b08a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fe8b 	bl	800bda0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00c      	beq.n	800b0ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d007      	beq.n	800b0ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b0a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fe83 	bl	800bdb4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00c      	beq.n	800b0d2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d007      	beq.n	800b0d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b0ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fe7b 	bl	800bdc8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0d2:	bf00      	nop
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
	...

0800b0dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d101      	bne.n	800b0fa <HAL_TIM_OC_ConfigChannel+0x1e>
 800b0f6:	2302      	movs	r3, #2
 800b0f8:	e066      	b.n	800b1c8 <HAL_TIM_OC_ConfigChannel+0xec>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b14      	cmp	r3, #20
 800b106:	d857      	bhi.n	800b1b8 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b108:	a201      	add	r2, pc, #4	@ (adr r2, 800b110 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10e:	bf00      	nop
 800b110:	0800b165 	.word	0x0800b165
 800b114:	0800b1b9 	.word	0x0800b1b9
 800b118:	0800b1b9 	.word	0x0800b1b9
 800b11c:	0800b1b9 	.word	0x0800b1b9
 800b120:	0800b173 	.word	0x0800b173
 800b124:	0800b1b9 	.word	0x0800b1b9
 800b128:	0800b1b9 	.word	0x0800b1b9
 800b12c:	0800b1b9 	.word	0x0800b1b9
 800b130:	0800b181 	.word	0x0800b181
 800b134:	0800b1b9 	.word	0x0800b1b9
 800b138:	0800b1b9 	.word	0x0800b1b9
 800b13c:	0800b1b9 	.word	0x0800b1b9
 800b140:	0800b18f 	.word	0x0800b18f
 800b144:	0800b1b9 	.word	0x0800b1b9
 800b148:	0800b1b9 	.word	0x0800b1b9
 800b14c:	0800b1b9 	.word	0x0800b1b9
 800b150:	0800b19d 	.word	0x0800b19d
 800b154:	0800b1b9 	.word	0x0800b1b9
 800b158:	0800b1b9 	.word	0x0800b1b9
 800b15c:	0800b1b9 	.word	0x0800b1b9
 800b160:	0800b1ab 	.word	0x0800b1ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68b9      	ldr	r1, [r7, #8]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 f958 	bl	800b420 <TIM_OC1_SetConfig>
      break;
 800b170:	e025      	b.n	800b1be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 fa13 	bl	800b5a4 <TIM_OC2_SetConfig>
      break;
 800b17e:	e01e      	b.n	800b1be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68b9      	ldr	r1, [r7, #8]
 800b186:	4618      	mov	r0, r3
 800b188:	f000 fabc 	bl	800b704 <TIM_OC3_SetConfig>
      break;
 800b18c:	e017      	b.n	800b1be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68b9      	ldr	r1, [r7, #8]
 800b194:	4618      	mov	r0, r3
 800b196:	f000 fb63 	bl	800b860 <TIM_OC4_SetConfig>
      break;
 800b19a:	e010      	b.n	800b1be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68b9      	ldr	r1, [r7, #8]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 fc0c 	bl	800b9c0 <TIM_OC5_SetConfig>
      break;
 800b1a8:	e009      	b.n	800b1be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 fc87 	bl	800bac4 <TIM_OC6_SetConfig>
      break;
 800b1b6:	e002      	b.n	800b1be <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b1bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b214:	bf00      	nop
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a6b      	ldr	r2, [pc, #428]	@ (800b3e0 <TIM_Base_SetConfig+0x1c0>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d02b      	beq.n	800b290 <TIM_Base_SetConfig+0x70>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a6a      	ldr	r2, [pc, #424]	@ (800b3e4 <TIM_Base_SetConfig+0x1c4>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d027      	beq.n	800b290 <TIM_Base_SetConfig+0x70>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b246:	d023      	beq.n	800b290 <TIM_Base_SetConfig+0x70>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b24e:	d01f      	beq.n	800b290 <TIM_Base_SetConfig+0x70>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a65      	ldr	r2, [pc, #404]	@ (800b3e8 <TIM_Base_SetConfig+0x1c8>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d01b      	beq.n	800b290 <TIM_Base_SetConfig+0x70>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a64      	ldr	r2, [pc, #400]	@ (800b3ec <TIM_Base_SetConfig+0x1cc>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d017      	beq.n	800b290 <TIM_Base_SetConfig+0x70>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a63      	ldr	r2, [pc, #396]	@ (800b3f0 <TIM_Base_SetConfig+0x1d0>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d013      	beq.n	800b290 <TIM_Base_SetConfig+0x70>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a62      	ldr	r2, [pc, #392]	@ (800b3f4 <TIM_Base_SetConfig+0x1d4>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d00f      	beq.n	800b290 <TIM_Base_SetConfig+0x70>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a61      	ldr	r2, [pc, #388]	@ (800b3f8 <TIM_Base_SetConfig+0x1d8>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d00b      	beq.n	800b290 <TIM_Base_SetConfig+0x70>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a60      	ldr	r2, [pc, #384]	@ (800b3fc <TIM_Base_SetConfig+0x1dc>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d007      	beq.n	800b290 <TIM_Base_SetConfig+0x70>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a5f      	ldr	r2, [pc, #380]	@ (800b400 <TIM_Base_SetConfig+0x1e0>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d003      	beq.n	800b290 <TIM_Base_SetConfig+0x70>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a5e      	ldr	r2, [pc, #376]	@ (800b404 <TIM_Base_SetConfig+0x1e4>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d108      	bne.n	800b2a2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a4e      	ldr	r2, [pc, #312]	@ (800b3e0 <TIM_Base_SetConfig+0x1c0>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d043      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a4d      	ldr	r2, [pc, #308]	@ (800b3e4 <TIM_Base_SetConfig+0x1c4>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d03f      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2b8:	d03b      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2c0:	d037      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a48      	ldr	r2, [pc, #288]	@ (800b3e8 <TIM_Base_SetConfig+0x1c8>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d033      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a47      	ldr	r2, [pc, #284]	@ (800b3ec <TIM_Base_SetConfig+0x1cc>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d02f      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a46      	ldr	r2, [pc, #280]	@ (800b3f0 <TIM_Base_SetConfig+0x1d0>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d02b      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a45      	ldr	r2, [pc, #276]	@ (800b3f4 <TIM_Base_SetConfig+0x1d4>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d027      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a44      	ldr	r2, [pc, #272]	@ (800b3f8 <TIM_Base_SetConfig+0x1d8>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d023      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a43      	ldr	r2, [pc, #268]	@ (800b3fc <TIM_Base_SetConfig+0x1dc>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d01f      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a42      	ldr	r2, [pc, #264]	@ (800b400 <TIM_Base_SetConfig+0x1e0>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d01b      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a41      	ldr	r2, [pc, #260]	@ (800b404 <TIM_Base_SetConfig+0x1e4>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d017      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a40      	ldr	r2, [pc, #256]	@ (800b408 <TIM_Base_SetConfig+0x1e8>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d013      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a3f      	ldr	r2, [pc, #252]	@ (800b40c <TIM_Base_SetConfig+0x1ec>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d00f      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a3e      	ldr	r2, [pc, #248]	@ (800b410 <TIM_Base_SetConfig+0x1f0>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d00b      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a3d      	ldr	r2, [pc, #244]	@ (800b414 <TIM_Base_SetConfig+0x1f4>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d007      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a3c      	ldr	r2, [pc, #240]	@ (800b418 <TIM_Base_SetConfig+0x1f8>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d003      	beq.n	800b332 <TIM_Base_SetConfig+0x112>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a3b      	ldr	r2, [pc, #236]	@ (800b41c <TIM_Base_SetConfig+0x1fc>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d108      	bne.n	800b344 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	4313      	orrs	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	4313      	orrs	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	689a      	ldr	r2, [r3, #8]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a1e      	ldr	r2, [pc, #120]	@ (800b3e0 <TIM_Base_SetConfig+0x1c0>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d023      	beq.n	800b3b2 <TIM_Base_SetConfig+0x192>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a1d      	ldr	r2, [pc, #116]	@ (800b3e4 <TIM_Base_SetConfig+0x1c4>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d01f      	beq.n	800b3b2 <TIM_Base_SetConfig+0x192>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a22      	ldr	r2, [pc, #136]	@ (800b400 <TIM_Base_SetConfig+0x1e0>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d01b      	beq.n	800b3b2 <TIM_Base_SetConfig+0x192>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a21      	ldr	r2, [pc, #132]	@ (800b404 <TIM_Base_SetConfig+0x1e4>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d017      	beq.n	800b3b2 <TIM_Base_SetConfig+0x192>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a20      	ldr	r2, [pc, #128]	@ (800b408 <TIM_Base_SetConfig+0x1e8>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d013      	beq.n	800b3b2 <TIM_Base_SetConfig+0x192>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a1f      	ldr	r2, [pc, #124]	@ (800b40c <TIM_Base_SetConfig+0x1ec>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d00f      	beq.n	800b3b2 <TIM_Base_SetConfig+0x192>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a1e      	ldr	r2, [pc, #120]	@ (800b410 <TIM_Base_SetConfig+0x1f0>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d00b      	beq.n	800b3b2 <TIM_Base_SetConfig+0x192>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a1d      	ldr	r2, [pc, #116]	@ (800b414 <TIM_Base_SetConfig+0x1f4>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d007      	beq.n	800b3b2 <TIM_Base_SetConfig+0x192>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4a1c      	ldr	r2, [pc, #112]	@ (800b418 <TIM_Base_SetConfig+0x1f8>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d003      	beq.n	800b3b2 <TIM_Base_SetConfig+0x192>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a1b      	ldr	r2, [pc, #108]	@ (800b41c <TIM_Base_SetConfig+0x1fc>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d103      	bne.n	800b3ba <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	691a      	ldr	r2, [r3, #16]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f043 0204 	orr.w	r2, r3, #4
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	601a      	str	r2, [r3, #0]
}
 800b3d2:	bf00      	nop
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	40012c00 	.word	0x40012c00
 800b3e4:	50012c00 	.word	0x50012c00
 800b3e8:	40000400 	.word	0x40000400
 800b3ec:	50000400 	.word	0x50000400
 800b3f0:	40000800 	.word	0x40000800
 800b3f4:	50000800 	.word	0x50000800
 800b3f8:	40000c00 	.word	0x40000c00
 800b3fc:	50000c00 	.word	0x50000c00
 800b400:	40013400 	.word	0x40013400
 800b404:	50013400 	.word	0x50013400
 800b408:	40014000 	.word	0x40014000
 800b40c:	50014000 	.word	0x50014000
 800b410:	40014400 	.word	0x40014400
 800b414:	50014400 	.word	0x50014400
 800b418:	40014800 	.word	0x40014800
 800b41c:	50014800 	.word	0x50014800

0800b420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b420:	b480      	push	{r7}
 800b422:	b087      	sub	sp, #28
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a1b      	ldr	r3, [r3, #32]
 800b434:	f023 0201 	bic.w	r2, r3, #1
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b44e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f023 0303 	bic.w	r3, r3, #3
 800b45a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	4313      	orrs	r3, r2
 800b464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f023 0302 	bic.w	r3, r3, #2
 800b46c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	4313      	orrs	r3, r2
 800b476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a40      	ldr	r2, [pc, #256]	@ (800b57c <TIM_OC1_SetConfig+0x15c>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d023      	beq.n	800b4c8 <TIM_OC1_SetConfig+0xa8>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a3f      	ldr	r2, [pc, #252]	@ (800b580 <TIM_OC1_SetConfig+0x160>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d01f      	beq.n	800b4c8 <TIM_OC1_SetConfig+0xa8>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a3e      	ldr	r2, [pc, #248]	@ (800b584 <TIM_OC1_SetConfig+0x164>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d01b      	beq.n	800b4c8 <TIM_OC1_SetConfig+0xa8>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a3d      	ldr	r2, [pc, #244]	@ (800b588 <TIM_OC1_SetConfig+0x168>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d017      	beq.n	800b4c8 <TIM_OC1_SetConfig+0xa8>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a3c      	ldr	r2, [pc, #240]	@ (800b58c <TIM_OC1_SetConfig+0x16c>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d013      	beq.n	800b4c8 <TIM_OC1_SetConfig+0xa8>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a3b      	ldr	r2, [pc, #236]	@ (800b590 <TIM_OC1_SetConfig+0x170>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d00f      	beq.n	800b4c8 <TIM_OC1_SetConfig+0xa8>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a3a      	ldr	r2, [pc, #232]	@ (800b594 <TIM_OC1_SetConfig+0x174>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d00b      	beq.n	800b4c8 <TIM_OC1_SetConfig+0xa8>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a39      	ldr	r2, [pc, #228]	@ (800b598 <TIM_OC1_SetConfig+0x178>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d007      	beq.n	800b4c8 <TIM_OC1_SetConfig+0xa8>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a38      	ldr	r2, [pc, #224]	@ (800b59c <TIM_OC1_SetConfig+0x17c>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d003      	beq.n	800b4c8 <TIM_OC1_SetConfig+0xa8>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a37      	ldr	r2, [pc, #220]	@ (800b5a0 <TIM_OC1_SetConfig+0x180>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d10c      	bne.n	800b4e2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	f023 0308 	bic.w	r3, r3, #8
 800b4ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	697a      	ldr	r2, [r7, #20]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f023 0304 	bic.w	r3, r3, #4
 800b4e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a25      	ldr	r2, [pc, #148]	@ (800b57c <TIM_OC1_SetConfig+0x15c>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d023      	beq.n	800b532 <TIM_OC1_SetConfig+0x112>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a24      	ldr	r2, [pc, #144]	@ (800b580 <TIM_OC1_SetConfig+0x160>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d01f      	beq.n	800b532 <TIM_OC1_SetConfig+0x112>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a23      	ldr	r2, [pc, #140]	@ (800b584 <TIM_OC1_SetConfig+0x164>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d01b      	beq.n	800b532 <TIM_OC1_SetConfig+0x112>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a22      	ldr	r2, [pc, #136]	@ (800b588 <TIM_OC1_SetConfig+0x168>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d017      	beq.n	800b532 <TIM_OC1_SetConfig+0x112>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a21      	ldr	r2, [pc, #132]	@ (800b58c <TIM_OC1_SetConfig+0x16c>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d013      	beq.n	800b532 <TIM_OC1_SetConfig+0x112>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a20      	ldr	r2, [pc, #128]	@ (800b590 <TIM_OC1_SetConfig+0x170>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d00f      	beq.n	800b532 <TIM_OC1_SetConfig+0x112>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4a1f      	ldr	r2, [pc, #124]	@ (800b594 <TIM_OC1_SetConfig+0x174>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d00b      	beq.n	800b532 <TIM_OC1_SetConfig+0x112>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4a1e      	ldr	r2, [pc, #120]	@ (800b598 <TIM_OC1_SetConfig+0x178>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d007      	beq.n	800b532 <TIM_OC1_SetConfig+0x112>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a1d      	ldr	r2, [pc, #116]	@ (800b59c <TIM_OC1_SetConfig+0x17c>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d003      	beq.n	800b532 <TIM_OC1_SetConfig+0x112>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4a1c      	ldr	r2, [pc, #112]	@ (800b5a0 <TIM_OC1_SetConfig+0x180>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d111      	bne.n	800b556 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	4313      	orrs	r3, r2
 800b54a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	4313      	orrs	r3, r2
 800b554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	697a      	ldr	r2, [r7, #20]
 800b56e:	621a      	str	r2, [r3, #32]
}
 800b570:	bf00      	nop
 800b572:	371c      	adds	r7, #28
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	40012c00 	.word	0x40012c00
 800b580:	50012c00 	.word	0x50012c00
 800b584:	40013400 	.word	0x40013400
 800b588:	50013400 	.word	0x50013400
 800b58c:	40014000 	.word	0x40014000
 800b590:	50014000 	.word	0x50014000
 800b594:	40014400 	.word	0x40014400
 800b598:	50014400 	.word	0x50014400
 800b59c:	40014800 	.word	0x40014800
 800b5a0:	50014800 	.word	0x50014800

0800b5a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b087      	sub	sp, #28
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a1b      	ldr	r3, [r3, #32]
 800b5b8:	f023 0210 	bic.w	r2, r3, #16
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b5d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b5de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	021b      	lsls	r3, r3, #8
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f023 0320 	bic.w	r3, r3, #32
 800b5f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	011b      	lsls	r3, r3, #4
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a36      	ldr	r2, [pc, #216]	@ (800b6dc <TIM_OC2_SetConfig+0x138>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d00b      	beq.n	800b620 <TIM_OC2_SetConfig+0x7c>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a35      	ldr	r2, [pc, #212]	@ (800b6e0 <TIM_OC2_SetConfig+0x13c>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d007      	beq.n	800b620 <TIM_OC2_SetConfig+0x7c>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a34      	ldr	r2, [pc, #208]	@ (800b6e4 <TIM_OC2_SetConfig+0x140>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d003      	beq.n	800b620 <TIM_OC2_SetConfig+0x7c>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a33      	ldr	r2, [pc, #204]	@ (800b6e8 <TIM_OC2_SetConfig+0x144>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d10d      	bne.n	800b63c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	011b      	lsls	r3, r3, #4
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	4313      	orrs	r3, r2
 800b632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b63a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a27      	ldr	r2, [pc, #156]	@ (800b6dc <TIM_OC2_SetConfig+0x138>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d023      	beq.n	800b68c <TIM_OC2_SetConfig+0xe8>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a26      	ldr	r2, [pc, #152]	@ (800b6e0 <TIM_OC2_SetConfig+0x13c>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d01f      	beq.n	800b68c <TIM_OC2_SetConfig+0xe8>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a25      	ldr	r2, [pc, #148]	@ (800b6e4 <TIM_OC2_SetConfig+0x140>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d01b      	beq.n	800b68c <TIM_OC2_SetConfig+0xe8>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a24      	ldr	r2, [pc, #144]	@ (800b6e8 <TIM_OC2_SetConfig+0x144>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d017      	beq.n	800b68c <TIM_OC2_SetConfig+0xe8>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a23      	ldr	r2, [pc, #140]	@ (800b6ec <TIM_OC2_SetConfig+0x148>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d013      	beq.n	800b68c <TIM_OC2_SetConfig+0xe8>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a22      	ldr	r2, [pc, #136]	@ (800b6f0 <TIM_OC2_SetConfig+0x14c>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d00f      	beq.n	800b68c <TIM_OC2_SetConfig+0xe8>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a21      	ldr	r2, [pc, #132]	@ (800b6f4 <TIM_OC2_SetConfig+0x150>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d00b      	beq.n	800b68c <TIM_OC2_SetConfig+0xe8>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a20      	ldr	r2, [pc, #128]	@ (800b6f8 <TIM_OC2_SetConfig+0x154>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d007      	beq.n	800b68c <TIM_OC2_SetConfig+0xe8>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a1f      	ldr	r2, [pc, #124]	@ (800b6fc <TIM_OC2_SetConfig+0x158>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d003      	beq.n	800b68c <TIM_OC2_SetConfig+0xe8>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a1e      	ldr	r2, [pc, #120]	@ (800b700 <TIM_OC2_SetConfig+0x15c>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d113      	bne.n	800b6b4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b69a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	695b      	ldr	r3, [r3, #20]
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	693a      	ldr	r2, [r7, #16]
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	699b      	ldr	r3, [r3, #24]
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	693a      	ldr	r2, [r7, #16]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	685a      	ldr	r2, [r3, #4]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	621a      	str	r2, [r3, #32]
}
 800b6ce:	bf00      	nop
 800b6d0:	371c      	adds	r7, #28
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	40012c00 	.word	0x40012c00
 800b6e0:	50012c00 	.word	0x50012c00
 800b6e4:	40013400 	.word	0x40013400
 800b6e8:	50013400 	.word	0x50013400
 800b6ec:	40014000 	.word	0x40014000
 800b6f0:	50014000 	.word	0x50014000
 800b6f4:	40014400 	.word	0x40014400
 800b6f8:	50014400 	.word	0x50014400
 800b6fc:	40014800 	.word	0x40014800
 800b700:	50014800 	.word	0x50014800

0800b704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a1b      	ldr	r3, [r3, #32]
 800b718:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	69db      	ldr	r3, [r3, #28]
 800b72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f023 0303 	bic.w	r3, r3, #3
 800b73e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	4313      	orrs	r3, r2
 800b748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	021b      	lsls	r3, r3, #8
 800b758:	697a      	ldr	r2, [r7, #20]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a35      	ldr	r2, [pc, #212]	@ (800b838 <TIM_OC3_SetConfig+0x134>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d00b      	beq.n	800b77e <TIM_OC3_SetConfig+0x7a>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a34      	ldr	r2, [pc, #208]	@ (800b83c <TIM_OC3_SetConfig+0x138>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d007      	beq.n	800b77e <TIM_OC3_SetConfig+0x7a>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a33      	ldr	r2, [pc, #204]	@ (800b840 <TIM_OC3_SetConfig+0x13c>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d003      	beq.n	800b77e <TIM_OC3_SetConfig+0x7a>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a32      	ldr	r2, [pc, #200]	@ (800b844 <TIM_OC3_SetConfig+0x140>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d10d      	bne.n	800b79a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	021b      	lsls	r3, r3, #8
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	4313      	orrs	r3, r2
 800b790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a26      	ldr	r2, [pc, #152]	@ (800b838 <TIM_OC3_SetConfig+0x134>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d023      	beq.n	800b7ea <TIM_OC3_SetConfig+0xe6>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a25      	ldr	r2, [pc, #148]	@ (800b83c <TIM_OC3_SetConfig+0x138>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d01f      	beq.n	800b7ea <TIM_OC3_SetConfig+0xe6>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a24      	ldr	r2, [pc, #144]	@ (800b840 <TIM_OC3_SetConfig+0x13c>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d01b      	beq.n	800b7ea <TIM_OC3_SetConfig+0xe6>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a23      	ldr	r2, [pc, #140]	@ (800b844 <TIM_OC3_SetConfig+0x140>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d017      	beq.n	800b7ea <TIM_OC3_SetConfig+0xe6>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a22      	ldr	r2, [pc, #136]	@ (800b848 <TIM_OC3_SetConfig+0x144>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d013      	beq.n	800b7ea <TIM_OC3_SetConfig+0xe6>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a21      	ldr	r2, [pc, #132]	@ (800b84c <TIM_OC3_SetConfig+0x148>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d00f      	beq.n	800b7ea <TIM_OC3_SetConfig+0xe6>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a20      	ldr	r2, [pc, #128]	@ (800b850 <TIM_OC3_SetConfig+0x14c>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d00b      	beq.n	800b7ea <TIM_OC3_SetConfig+0xe6>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a1f      	ldr	r2, [pc, #124]	@ (800b854 <TIM_OC3_SetConfig+0x150>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d007      	beq.n	800b7ea <TIM_OC3_SetConfig+0xe6>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a1e      	ldr	r2, [pc, #120]	@ (800b858 <TIM_OC3_SetConfig+0x154>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d003      	beq.n	800b7ea <TIM_OC3_SetConfig+0xe6>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a1d      	ldr	r2, [pc, #116]	@ (800b85c <TIM_OC3_SetConfig+0x158>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d113      	bne.n	800b812 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b7f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	011b      	lsls	r3, r3, #4
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	4313      	orrs	r3, r2
 800b804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	011b      	lsls	r3, r3, #4
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	4313      	orrs	r3, r2
 800b810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	685a      	ldr	r2, [r3, #4]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	621a      	str	r2, [r3, #32]
}
 800b82c:	bf00      	nop
 800b82e:	371c      	adds	r7, #28
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	40012c00 	.word	0x40012c00
 800b83c:	50012c00 	.word	0x50012c00
 800b840:	40013400 	.word	0x40013400
 800b844:	50013400 	.word	0x50013400
 800b848:	40014000 	.word	0x40014000
 800b84c:	50014000 	.word	0x50014000
 800b850:	40014400 	.word	0x40014400
 800b854:	50014400 	.word	0x50014400
 800b858:	40014800 	.word	0x40014800
 800b85c:	50014800 	.word	0x50014800

0800b860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a1b      	ldr	r3, [r3, #32]
 800b86e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a1b      	ldr	r3, [r3, #32]
 800b874:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	69db      	ldr	r3, [r3, #28]
 800b886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b88e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	021b      	lsls	r3, r3, #8
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b8ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	031b      	lsls	r3, r3, #12
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a36      	ldr	r2, [pc, #216]	@ (800b998 <TIM_OC4_SetConfig+0x138>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d00b      	beq.n	800b8dc <TIM_OC4_SetConfig+0x7c>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a35      	ldr	r2, [pc, #212]	@ (800b99c <TIM_OC4_SetConfig+0x13c>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d007      	beq.n	800b8dc <TIM_OC4_SetConfig+0x7c>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a34      	ldr	r2, [pc, #208]	@ (800b9a0 <TIM_OC4_SetConfig+0x140>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d003      	beq.n	800b8dc <TIM_OC4_SetConfig+0x7c>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a33      	ldr	r2, [pc, #204]	@ (800b9a4 <TIM_OC4_SetConfig+0x144>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d10d      	bne.n	800b8f8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b8e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	031b      	lsls	r3, r3, #12
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b8f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a27      	ldr	r2, [pc, #156]	@ (800b998 <TIM_OC4_SetConfig+0x138>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d023      	beq.n	800b948 <TIM_OC4_SetConfig+0xe8>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a26      	ldr	r2, [pc, #152]	@ (800b99c <TIM_OC4_SetConfig+0x13c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d01f      	beq.n	800b948 <TIM_OC4_SetConfig+0xe8>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a25      	ldr	r2, [pc, #148]	@ (800b9a0 <TIM_OC4_SetConfig+0x140>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d01b      	beq.n	800b948 <TIM_OC4_SetConfig+0xe8>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a24      	ldr	r2, [pc, #144]	@ (800b9a4 <TIM_OC4_SetConfig+0x144>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d017      	beq.n	800b948 <TIM_OC4_SetConfig+0xe8>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a23      	ldr	r2, [pc, #140]	@ (800b9a8 <TIM_OC4_SetConfig+0x148>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d013      	beq.n	800b948 <TIM_OC4_SetConfig+0xe8>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a22      	ldr	r2, [pc, #136]	@ (800b9ac <TIM_OC4_SetConfig+0x14c>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d00f      	beq.n	800b948 <TIM_OC4_SetConfig+0xe8>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a21      	ldr	r2, [pc, #132]	@ (800b9b0 <TIM_OC4_SetConfig+0x150>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d00b      	beq.n	800b948 <TIM_OC4_SetConfig+0xe8>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a20      	ldr	r2, [pc, #128]	@ (800b9b4 <TIM_OC4_SetConfig+0x154>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d007      	beq.n	800b948 <TIM_OC4_SetConfig+0xe8>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a1f      	ldr	r2, [pc, #124]	@ (800b9b8 <TIM_OC4_SetConfig+0x158>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d003      	beq.n	800b948 <TIM_OC4_SetConfig+0xe8>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a1e      	ldr	r2, [pc, #120]	@ (800b9bc <TIM_OC4_SetConfig+0x15c>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d113      	bne.n	800b970 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b94e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b956:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	695b      	ldr	r3, [r3, #20]
 800b95c:	019b      	lsls	r3, r3, #6
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	4313      	orrs	r3, r2
 800b962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	019b      	lsls	r3, r3, #6
 800b96a:	693a      	ldr	r2, [r7, #16]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	697a      	ldr	r2, [r7, #20]
 800b988:	621a      	str	r2, [r3, #32]
}
 800b98a:	bf00      	nop
 800b98c:	371c      	adds	r7, #28
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	40012c00 	.word	0x40012c00
 800b99c:	50012c00 	.word	0x50012c00
 800b9a0:	40013400 	.word	0x40013400
 800b9a4:	50013400 	.word	0x50013400
 800b9a8:	40014000 	.word	0x40014000
 800b9ac:	50014000 	.word	0x50014000
 800b9b0:	40014400 	.word	0x40014400
 800b9b4:	50014400 	.word	0x50014400
 800b9b8:	40014800 	.word	0x40014800
 800b9bc:	50014800 	.word	0x50014800

0800b9c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b087      	sub	sp, #28
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a1b      	ldr	r3, [r3, #32]
 800b9d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ba04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	041b      	lsls	r3, r3, #16
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4a21      	ldr	r2, [pc, #132]	@ (800ba9c <TIM_OC5_SetConfig+0xdc>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d023      	beq.n	800ba62 <TIM_OC5_SetConfig+0xa2>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a20      	ldr	r2, [pc, #128]	@ (800baa0 <TIM_OC5_SetConfig+0xe0>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d01f      	beq.n	800ba62 <TIM_OC5_SetConfig+0xa2>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a1f      	ldr	r2, [pc, #124]	@ (800baa4 <TIM_OC5_SetConfig+0xe4>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d01b      	beq.n	800ba62 <TIM_OC5_SetConfig+0xa2>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4a1e      	ldr	r2, [pc, #120]	@ (800baa8 <TIM_OC5_SetConfig+0xe8>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d017      	beq.n	800ba62 <TIM_OC5_SetConfig+0xa2>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a1d      	ldr	r2, [pc, #116]	@ (800baac <TIM_OC5_SetConfig+0xec>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d013      	beq.n	800ba62 <TIM_OC5_SetConfig+0xa2>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a1c      	ldr	r2, [pc, #112]	@ (800bab0 <TIM_OC5_SetConfig+0xf0>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d00f      	beq.n	800ba62 <TIM_OC5_SetConfig+0xa2>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a1b      	ldr	r2, [pc, #108]	@ (800bab4 <TIM_OC5_SetConfig+0xf4>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d00b      	beq.n	800ba62 <TIM_OC5_SetConfig+0xa2>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a1a      	ldr	r2, [pc, #104]	@ (800bab8 <TIM_OC5_SetConfig+0xf8>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d007      	beq.n	800ba62 <TIM_OC5_SetConfig+0xa2>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a19      	ldr	r2, [pc, #100]	@ (800babc <TIM_OC5_SetConfig+0xfc>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d003      	beq.n	800ba62 <TIM_OC5_SetConfig+0xa2>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a18      	ldr	r2, [pc, #96]	@ (800bac0 <TIM_OC5_SetConfig+0x100>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d109      	bne.n	800ba76 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	021b      	lsls	r3, r3, #8
 800ba70:	697a      	ldr	r2, [r7, #20]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	685a      	ldr	r2, [r3, #4]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	621a      	str	r2, [r3, #32]
}
 800ba90:	bf00      	nop
 800ba92:	371c      	adds	r7, #28
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr
 800ba9c:	40012c00 	.word	0x40012c00
 800baa0:	50012c00 	.word	0x50012c00
 800baa4:	40013400 	.word	0x40013400
 800baa8:	50013400 	.word	0x50013400
 800baac:	40014000 	.word	0x40014000
 800bab0:	50014000 	.word	0x50014000
 800bab4:	40014400 	.word	0x40014400
 800bab8:	50014400 	.word	0x50014400
 800babc:	40014800 	.word	0x40014800
 800bac0:	50014800 	.word	0x50014800

0800bac4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a1b      	ldr	r3, [r3, #32]
 800bad8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800baf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800baf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	021b      	lsls	r3, r3, #8
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	051b      	lsls	r3, r3, #20
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a22      	ldr	r2, [pc, #136]	@ (800bba4 <TIM_OC6_SetConfig+0xe0>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d023      	beq.n	800bb68 <TIM_OC6_SetConfig+0xa4>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a21      	ldr	r2, [pc, #132]	@ (800bba8 <TIM_OC6_SetConfig+0xe4>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d01f      	beq.n	800bb68 <TIM_OC6_SetConfig+0xa4>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a20      	ldr	r2, [pc, #128]	@ (800bbac <TIM_OC6_SetConfig+0xe8>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d01b      	beq.n	800bb68 <TIM_OC6_SetConfig+0xa4>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a1f      	ldr	r2, [pc, #124]	@ (800bbb0 <TIM_OC6_SetConfig+0xec>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d017      	beq.n	800bb68 <TIM_OC6_SetConfig+0xa4>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a1e      	ldr	r2, [pc, #120]	@ (800bbb4 <TIM_OC6_SetConfig+0xf0>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d013      	beq.n	800bb68 <TIM_OC6_SetConfig+0xa4>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a1d      	ldr	r2, [pc, #116]	@ (800bbb8 <TIM_OC6_SetConfig+0xf4>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d00f      	beq.n	800bb68 <TIM_OC6_SetConfig+0xa4>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a1c      	ldr	r2, [pc, #112]	@ (800bbbc <TIM_OC6_SetConfig+0xf8>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d00b      	beq.n	800bb68 <TIM_OC6_SetConfig+0xa4>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a1b      	ldr	r2, [pc, #108]	@ (800bbc0 <TIM_OC6_SetConfig+0xfc>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d007      	beq.n	800bb68 <TIM_OC6_SetConfig+0xa4>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a1a      	ldr	r2, [pc, #104]	@ (800bbc4 <TIM_OC6_SetConfig+0x100>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d003      	beq.n	800bb68 <TIM_OC6_SetConfig+0xa4>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a19      	ldr	r2, [pc, #100]	@ (800bbc8 <TIM_OC6_SetConfig+0x104>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d109      	bne.n	800bb7c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	695b      	ldr	r3, [r3, #20]
 800bb74:	029b      	lsls	r3, r3, #10
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	621a      	str	r2, [r3, #32]
}
 800bb96:	bf00      	nop
 800bb98:	371c      	adds	r7, #28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	40012c00 	.word	0x40012c00
 800bba8:	50012c00 	.word	0x50012c00
 800bbac:	40013400 	.word	0x40013400
 800bbb0:	50013400 	.word	0x50013400
 800bbb4:	40014000 	.word	0x40014000
 800bbb8:	50014000 	.word	0x50014000
 800bbbc:	40014400 	.word	0x40014400
 800bbc0:	50014400 	.word	0x50014400
 800bbc4:	40014800 	.word	0x40014800
 800bbc8:	50014800 	.word	0x50014800

0800bbcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d101      	bne.n	800bbe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	e097      	b.n	800bd14 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2202      	movs	r2, #2
 800bbf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a45      	ldr	r2, [pc, #276]	@ (800bd20 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d00e      	beq.n	800bc2c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a44      	ldr	r2, [pc, #272]	@ (800bd24 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d009      	beq.n	800bc2c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a42      	ldr	r2, [pc, #264]	@ (800bd28 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d004      	beq.n	800bc2c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a41      	ldr	r2, [pc, #260]	@ (800bd2c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d108      	bne.n	800bc3e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bc32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bc44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a2f      	ldr	r2, [pc, #188]	@ (800bd20 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d040      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a2e      	ldr	r2, [pc, #184]	@ (800bd24 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d03b      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc78:	d036      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc82:	d031      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a29      	ldr	r2, [pc, #164]	@ (800bd30 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d02c      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a28      	ldr	r2, [pc, #160]	@ (800bd34 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d027      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a26      	ldr	r2, [pc, #152]	@ (800bd38 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d022      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a25      	ldr	r2, [pc, #148]	@ (800bd3c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d01d      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a23      	ldr	r2, [pc, #140]	@ (800bd40 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d018      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a22      	ldr	r2, [pc, #136]	@ (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d013      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a18      	ldr	r2, [pc, #96]	@ (800bd28 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d00e      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a17      	ldr	r2, [pc, #92]	@ (800bd2c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d009      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a1b      	ldr	r2, [pc, #108]	@ (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d004      	beq.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a1a      	ldr	r2, [pc, #104]	@ (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d10c      	bne.n	800bd02 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	40012c00 	.word	0x40012c00
 800bd24:	50012c00 	.word	0x50012c00
 800bd28:	40013400 	.word	0x40013400
 800bd2c:	50013400 	.word	0x50013400
 800bd30:	40000400 	.word	0x40000400
 800bd34:	50000400 	.word	0x50000400
 800bd38:	40000800 	.word	0x40000800
 800bd3c:	50000800 	.word	0x50000800
 800bd40:	40000c00 	.word	0x40000c00
 800bd44:	50000c00 	.word	0x50000c00
 800bd48:	40014000 	.word	0x40014000
 800bd4c:	50014000 	.word	0x50014000

0800bd50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd58:	bf00      	nop
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd6c:	bf00      	nop
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd80:	bf00      	nop
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bdbc:	bf00      	nop
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d101      	bne.n	800bdee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e042      	b.n	800be74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d106      	bne.n	800be06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f7f7 fd2f 	bl	8003864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2224      	movs	r2, #36	@ 0x24
 800be0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f022 0201 	bic.w	r2, r2, #1
 800be1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be22:	2b00      	cmp	r3, #0
 800be24:	d002      	beq.n	800be2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fde4 	bl	800c9f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fc33 	bl	800c698 <UART_SetConfig>
 800be32:	4603      	mov	r3, r0
 800be34:	2b01      	cmp	r3, #1
 800be36:	d101      	bne.n	800be3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	e01b      	b.n	800be74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	685a      	ldr	r2, [r3, #4]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	689a      	ldr	r2, [r3, #8]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f042 0201 	orr.w	r2, r2, #1
 800be6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fe63 	bl	800cb38 <UART_CheckIdleState>
 800be72:	4603      	mov	r3, r0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08c      	sub	sp, #48	@ 0x30
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	4613      	mov	r3, r2
 800be88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800be8a:	88fb      	ldrh	r3, [r7, #6]
 800be8c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be94:	2b20      	cmp	r3, #32
 800be96:	f040 80ad 	bne.w	800bff4 <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <HAL_UART_Transmit_DMA+0x2a>
 800bea0:	88fb      	ldrh	r3, [r7, #6]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	e0a5      	b.n	800bff6 <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	88fa      	ldrh	r2, [r7, #6]
 800beb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	88fa      	ldrh	r2, [r7, #6]
 800bebc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2221      	movs	r2, #33	@ 0x21
 800becc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if defined(USART_DMAREQUESTS_SW_WA)
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);

#endif /* USART_DMAREQUESTS_SW_WA */
    if (huart->hdmatx != NULL)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d06d      	beq.n	800bfb4 <HAL_UART_Transmit_DMA+0x138>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bedc:	4a48      	ldr	r2, [pc, #288]	@ (800c000 <HAL_UART_Transmit_DMA+0x184>)
 800bede:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bee4:	4a47      	ldr	r2, [pc, #284]	@ (800c004 <HAL_UART_Transmit_DMA+0x188>)
 800bee6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800beec:	4a46      	ldr	r2, [pc, #280]	@ (800c008 <HAL_UART_Transmit_DMA+0x18c>)
 800beee:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bef4:	2200      	movs	r2, #0
 800bef6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf00:	d106      	bne.n	800bf10 <HAL_UART_Transmit_DMA+0x94>
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d102      	bne.n	800bf10 <HAL_UART_Transmit_DMA+0x94>
      {
        nbByte = Size * 2U;
 800bf0a:	88fb      	ldrh	r3, [r7, #6]
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d02d      	beq.n	800bf7a <HAL_UART_Transmit_DMA+0xfe>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d024      	beq.n	800bf72 <HAL_UART_Transmit_DMA+0xf6>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d01e      	beq.n	800bf72 <HAL_UART_Transmit_DMA+0xf6>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800bf3e:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f103 0228 	add.w	r2, r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7f9 f94f 	bl	8005208 <HAL_DMAEx_List_Start_IT>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bf70:	e012      	b.n	800bf98 <HAL_UART_Transmit_DMA+0x11c>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bf78:	e00e      	b.n	800bf98 <HAL_UART_Transmit_DMA+0x11c>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf82:	4619      	mov	r1, r3
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3328      	adds	r3, #40	@ 0x28
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bf8e:	f7f8 fbe7 	bl	8004760 <HAL_DMA_Start_IT>
 800bf92:	4603      	mov	r3, r0
 800bf94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }

      if (status != HAL_OK)
 800bf98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d009      	beq.n	800bfb4 <HAL_UART_Transmit_DMA+0x138>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2210      	movs	r2, #16
 800bfa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2220      	movs	r2, #32
 800bfac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e020      	b.n	800bff6 <HAL_UART_Transmit_DMA+0x17a>
      }
    }
#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2240      	movs	r2, #64	@ 0x40
 800bfba:	621a      	str	r2, [r3, #32]

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	e853 3f00 	ldrex	r3, [r3]
 800bfca:	617b      	str	r3, [r7, #20]
   return(result);
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3308      	adds	r3, #8
 800bfda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfdc:	627a      	str	r2, [r7, #36]	@ 0x24
 800bfde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe0:	6a39      	ldr	r1, [r7, #32]
 800bfe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfe4:	e841 2300 	strex	r3, r2, [r1]
 800bfe8:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1e5      	bne.n	800bfbc <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	e000      	b.n	800bff6 <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 800bff4:	2302      	movs	r3, #2
  }
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3730      	adds	r7, #48	@ 0x30
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	0800ceb5 	.word	0x0800ceb5
 800c004:	0800cf49 	.word	0x0800cf49
 800c008:	0800cf65 	.word	0x0800cf65

0800c00c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b0ba      	sub	sp, #232	@ 0xe8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	69db      	ldr	r3, [r3, #28]
 800c01a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c032:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c036:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c03a:	4013      	ands	r3, r2
 800c03c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c044:	2b00      	cmp	r3, #0
 800c046:	d11b      	bne.n	800c080 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c04c:	f003 0320 	and.w	r3, r3, #32
 800c050:	2b00      	cmp	r3, #0
 800c052:	d015      	beq.n	800c080 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c058:	f003 0320 	and.w	r3, r3, #32
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d105      	bne.n	800c06c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d009      	beq.n	800c080 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c070:	2b00      	cmp	r3, #0
 800c072:	f000 82e5 	beq.w	800c640 <HAL_UART_IRQHandler+0x634>
      {
        huart->RxISR(huart);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	4798      	blx	r3
      }
      return;
 800c07e:	e2df      	b.n	800c640 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c084:	2b00      	cmp	r3, #0
 800c086:	f000 8123 	beq.w	800c2d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c08a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c08e:	4b8d      	ldr	r3, [pc, #564]	@ (800c2c4 <HAL_UART_IRQHandler+0x2b8>)
 800c090:	4013      	ands	r3, r2
 800c092:	2b00      	cmp	r3, #0
 800c094:	d106      	bne.n	800c0a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c09a:	4b8b      	ldr	r3, [pc, #556]	@ (800c2c8 <HAL_UART_IRQHandler+0x2bc>)
 800c09c:	4013      	ands	r3, r2
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f000 8116 	beq.w	800c2d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0a8:	f003 0301 	and.w	r3, r3, #1
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d011      	beq.n	800c0d4 <HAL_UART_IRQHandler+0xc8>
 800c0b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00b      	beq.n	800c0d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0ca:	f043 0201 	orr.w	r2, r3, #1
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0d8:	f003 0302 	and.w	r3, r3, #2
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d011      	beq.n	800c104 <HAL_UART_IRQHandler+0xf8>
 800c0e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0e4:	f003 0301 	and.w	r3, r3, #1
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00b      	beq.n	800c104 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0fa:	f043 0204 	orr.w	r2, r3, #4
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c108:	f003 0304 	and.w	r3, r3, #4
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d011      	beq.n	800c134 <HAL_UART_IRQHandler+0x128>
 800c110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c114:	f003 0301 	and.w	r3, r3, #1
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00b      	beq.n	800c134 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2204      	movs	r2, #4
 800c122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c12a:	f043 0202 	orr.w	r2, r3, #2
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c138:	f003 0308 	and.w	r3, r3, #8
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d017      	beq.n	800c170 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c144:	f003 0320 	and.w	r3, r3, #32
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d105      	bne.n	800c158 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c14c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c150:	4b5c      	ldr	r3, [pc, #368]	@ (800c2c4 <HAL_UART_IRQHandler+0x2b8>)
 800c152:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00b      	beq.n	800c170 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2208      	movs	r2, #8
 800c15e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c166:	f043 0208 	orr.w	r2, r3, #8
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d012      	beq.n	800c1a2 <HAL_UART_IRQHandler+0x196>
 800c17c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c180:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00c      	beq.n	800c1a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c198:	f043 0220 	orr.w	r2, r3, #32
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 824b 	beq.w	800c644 <HAL_UART_IRQHandler+0x638>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1b2:	f003 0320 	and.w	r3, r3, #32
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d013      	beq.n	800c1e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1be:	f003 0320 	and.w	r3, r3, #32
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d105      	bne.n	800c1d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d007      	beq.n	800c1e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d003      	beq.n	800c1e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1f6:	2b40      	cmp	r3, #64	@ 0x40
 800c1f8:	d005      	beq.n	800c206 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c1fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c1fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c202:	2b00      	cmp	r3, #0
 800c204:	d054      	beq.n	800c2b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fdee 	bl	800cde8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c216:	2b40      	cmp	r3, #64	@ 0x40
 800c218:	d146      	bne.n	800c2a8 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3308      	adds	r3, #8
 800c220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c228:	e853 3f00 	ldrex	r3, [r3]
 800c22c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	3308      	adds	r3, #8
 800c242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c246:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c24a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c256:	e841 2300 	strex	r3, r2, [r1]
 800c25a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c25e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d1d9      	bne.n	800c21a <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d017      	beq.n	800c2a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c276:	4a15      	ldr	r2, [pc, #84]	@ (800c2cc <HAL_UART_IRQHandler+0x2c0>)
 800c278:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c280:	4618      	mov	r0, r3
 800c282:	f7f8 fb49 	bl	8004918 <HAL_DMA_Abort_IT>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d019      	beq.n	800c2c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c29a:	4610      	mov	r0, r2
 800c29c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c29e:	e00f      	b.n	800c2c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f9e3 	bl	800c66c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2a6:	e00b      	b.n	800c2c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f9df 	bl	800c66c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2ae:	e007      	b.n	800c2c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 f9db 	bl	800c66c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c2be:	e1c1      	b.n	800c644 <HAL_UART_IRQHandler+0x638>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2c0:	bf00      	nop
    return;
 800c2c2:	e1bf      	b.n	800c644 <HAL_UART_IRQHandler+0x638>
 800c2c4:	10000001 	.word	0x10000001
 800c2c8:	04000120 	.word	0x04000120
 800c2cc:	0800cfe5 	.word	0x0800cfe5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	f040 816a 	bne.w	800c5ae <HAL_UART_IRQHandler+0x5a2>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c2da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2de:	f003 0310 	and.w	r3, r3, #16
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 8163 	beq.w	800c5ae <HAL_UART_IRQHandler+0x5a2>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2ec:	f003 0310 	and.w	r3, r3, #16
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f000 815c 	beq.w	800c5ae <HAL_UART_IRQHandler+0x5a2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2210      	movs	r2, #16
 800c2fc:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c308:	2b40      	cmp	r3, #64	@ 0x40
 800c30a:	f040 80d2 	bne.w	800c4b2 <HAL_UART_IRQHandler+0x4a6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c318:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c31c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 80ac 	beq.w	800c47e <HAL_UART_IRQHandler+0x472>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c32c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c330:	429a      	cmp	r2, r3
 800c332:	f080 80a4 	bcs.w	800c47e <HAL_UART_IRQHandler+0x472>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c33c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c348:	2b81      	cmp	r3, #129	@ 0x81
 800c34a:	f000 8087 	beq.w	800c45c <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c356:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c35a:	e853 3f00 	ldrex	r3, [r3]
 800c35e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c362:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c366:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c36a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	461a      	mov	r2, r3
 800c374:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c378:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c37c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c380:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c384:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c388:	e841 2300 	strex	r3, r2, [r1]
 800c38c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c390:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1da      	bne.n	800c34e <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	3308      	adds	r3, #8
 800c39e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3a2:	e853 3f00 	ldrex	r3, [r3]
 800c3a6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c3a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3aa:	f023 0301 	bic.w	r3, r3, #1
 800c3ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c3bc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c3c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c3c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c3c8:	e841 2300 	strex	r3, r2, [r1]
 800c3cc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c3ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1e1      	bne.n	800c398 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	3308      	adds	r3, #8
 800c3da:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3de:	e853 3f00 	ldrex	r3, [r3]
 800c3e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c3e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3308      	adds	r3, #8
 800c3f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c3f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c3fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c3fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c400:	e841 2300 	strex	r3, r2, [r1]
 800c404:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c406:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1e3      	bne.n	800c3d4 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2220      	movs	r2, #32
 800c410:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c422:	e853 3f00 	ldrex	r3, [r3]
 800c426:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c42a:	f023 0310 	bic.w	r3, r3, #16
 800c42e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	461a      	mov	r2, r3
 800c438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c43c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c43e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c440:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c442:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c444:	e841 2300 	strex	r3, r2, [r1]
 800c448:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c44a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1e4      	bne.n	800c41a <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c456:	4618      	mov	r0, r3
 800c458:	f7f8 f9e2 	bl	8004820 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2202      	movs	r2, #2
 800c460:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c46e:	b29b      	uxth	r3, r3
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	b29b      	uxth	r3, r3
 800c474:	4619      	mov	r1, r3
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f902 	bl	800c680 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c47c:	e0e4      	b.n	800c648 <HAL_UART_IRQHandler+0x63c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c484:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c488:	429a      	cmp	r2, r3
 800c48a:	f040 80dd 	bne.w	800c648 <HAL_UART_IRQHandler+0x63c>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c496:	2b81      	cmp	r3, #129	@ 0x81
 800c498:	f040 80d6 	bne.w	800c648 <HAL_UART_IRQHandler+0x63c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2202      	movs	r2, #2
 800c4a0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f8e8 	bl	800c680 <HAL_UARTEx_RxEventCallback>
      return;
 800c4b0:	e0ca      	b.n	800c648 <HAL_UART_IRQHandler+0x63c>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f000 80bc 	beq.w	800c64c <HAL_UART_IRQHandler+0x640>
          && (nb_rx_data > 0U))
 800c4d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f000 80b7 	beq.w	800c64c <HAL_UART_IRQHandler+0x640>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e6:	e853 3f00 	ldrex	r3, [r3]
 800c4ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c500:	647b      	str	r3, [r7, #68]	@ 0x44
 800c502:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c508:	e841 2300 	strex	r3, r2, [r1]
 800c50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c50e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1e4      	bne.n	800c4de <HAL_UART_IRQHandler+0x4d2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3308      	adds	r3, #8
 800c51a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51e:	e853 3f00 	ldrex	r3, [r3]
 800c522:	623b      	str	r3, [r7, #32]
   return(result);
 800c524:	6a3b      	ldr	r3, [r7, #32]
 800c526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c52a:	f023 0301 	bic.w	r3, r3, #1
 800c52e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3308      	adds	r3, #8
 800c538:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c53c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c540:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c544:	e841 2300 	strex	r3, r2, [r1]
 800c548:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1e1      	bne.n	800c514 <HAL_UART_IRQHandler+0x508>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2220      	movs	r2, #32
 800c554:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	e853 3f00 	ldrex	r3, [r3]
 800c570:	60fb      	str	r3, [r7, #12]
   return(result);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f023 0310 	bic.w	r3, r3, #16
 800c578:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	461a      	mov	r2, r3
 800c582:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c586:	61fb      	str	r3, [r7, #28]
 800c588:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58a:	69b9      	ldr	r1, [r7, #24]
 800c58c:	69fa      	ldr	r2, [r7, #28]
 800c58e:	e841 2300 	strex	r3, r2, [r1]
 800c592:	617b      	str	r3, [r7, #20]
   return(result);
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1e4      	bne.n	800c564 <HAL_UART_IRQHandler+0x558>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2202      	movs	r2, #2
 800c59e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f86a 	bl	800c680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5ac:	e04e      	b.n	800c64c <HAL_UART_IRQHandler+0x640>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d014      	beq.n	800c5e4 <HAL_UART_IRQHandler+0x5d8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c5ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d105      	bne.n	800c5d2 <HAL_UART_IRQHandler+0x5c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c5c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d008      	beq.n	800c5e4 <HAL_UART_IRQHandler+0x5d8>
  {
    if (huart->TxISR != NULL)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d03a      	beq.n	800c650 <HAL_UART_IRQHandler+0x644>
    {
      huart->TxISR(huart);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	4798      	blx	r3
    }
    return;
 800c5e2:	e035      	b.n	800c650 <HAL_UART_IRQHandler+0x644>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c5e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d009      	beq.n	800c604 <HAL_UART_IRQHandler+0x5f8>
 800c5f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <HAL_UART_IRQHandler+0x5f8>
  {
    UART_EndTransmit_IT(huart);
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fd03 	bl	800d008 <UART_EndTransmit_IT>
    return;
 800c602:	e026      	b.n	800c652 <HAL_UART_IRQHandler+0x646>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c608:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d009      	beq.n	800c624 <HAL_UART_IRQHandler+0x618>
 800c610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c614:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d003      	beq.n	800c624 <HAL_UART_IRQHandler+0x618>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 fd28 	bl	800d072 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c622:	e016      	b.n	800c652 <HAL_UART_IRQHandler+0x646>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d010      	beq.n	800c652 <HAL_UART_IRQHandler+0x646>
 800c630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c634:	2b00      	cmp	r3, #0
 800c636:	da0c      	bge.n	800c652 <HAL_UART_IRQHandler+0x646>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 fd10 	bl	800d05e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c63e:	e008      	b.n	800c652 <HAL_UART_IRQHandler+0x646>
      return;
 800c640:	bf00      	nop
 800c642:	e006      	b.n	800c652 <HAL_UART_IRQHandler+0x646>
    return;
 800c644:	bf00      	nop
 800c646:	e004      	b.n	800c652 <HAL_UART_IRQHandler+0x646>
      return;
 800c648:	bf00      	nop
 800c64a:	e002      	b.n	800c652 <HAL_UART_IRQHandler+0x646>
      return;
 800c64c:	bf00      	nop
 800c64e:	e000      	b.n	800c652 <HAL_UART_IRQHandler+0x646>
    return;
 800c650:	bf00      	nop
  }
}
 800c652:	37e8      	adds	r7, #232	@ 0xe8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c68c:	bf00      	nop
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c69c:	b094      	sub	sp, #80	@ 0x50
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	4b83      	ldr	r3, [pc, #524]	@ (800c8bc <UART_SetConfig+0x224>)
 800c6ae:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b2:	689a      	ldr	r2, [r3, #8]
 800c6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	431a      	orrs	r2, r3
 800c6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6bc:	695b      	ldr	r3, [r3, #20]
 800c6be:	431a      	orrs	r2, r3
 800c6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c2:	69db      	ldr	r3, [r3, #28]
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	497c      	ldr	r1, [pc, #496]	@ (800c8c0 <UART_SetConfig+0x228>)
 800c6d0:	4019      	ands	r1, r3
 800c6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6d8:	430b      	orrs	r3, r1
 800c6da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e8:	68d9      	ldr	r1, [r3, #12]
 800c6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	ea40 0301 	orr.w	r3, r0, r1
 800c6f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f6:	699b      	ldr	r3, [r3, #24]
 800c6f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	4b6f      	ldr	r3, [pc, #444]	@ (800c8bc <UART_SetConfig+0x224>)
 800c700:	429a      	cmp	r2, r3
 800c702:	d009      	beq.n	800c718 <UART_SetConfig+0x80>
 800c704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	4b6e      	ldr	r3, [pc, #440]	@ (800c8c4 <UART_SetConfig+0x22c>)
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d004      	beq.n	800c718 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c710:	6a1a      	ldr	r2, [r3, #32]
 800c712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c714:	4313      	orrs	r3, r2
 800c716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c722:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c72c:	430b      	orrs	r3, r1
 800c72e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c736:	f023 000f 	bic.w	r0, r3, #15
 800c73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c73c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	ea40 0301 	orr.w	r3, r0, r1
 800c746:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	4b5e      	ldr	r3, [pc, #376]	@ (800c8c8 <UART_SetConfig+0x230>)
 800c74e:	429a      	cmp	r2, r3
 800c750:	d102      	bne.n	800c758 <UART_SetConfig+0xc0>
 800c752:	2301      	movs	r3, #1
 800c754:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c756:	e032      	b.n	800c7be <UART_SetConfig+0x126>
 800c758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	4b5b      	ldr	r3, [pc, #364]	@ (800c8cc <UART_SetConfig+0x234>)
 800c75e:	429a      	cmp	r2, r3
 800c760:	d102      	bne.n	800c768 <UART_SetConfig+0xd0>
 800c762:	2302      	movs	r3, #2
 800c764:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c766:	e02a      	b.n	800c7be <UART_SetConfig+0x126>
 800c768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	4b58      	ldr	r3, [pc, #352]	@ (800c8d0 <UART_SetConfig+0x238>)
 800c76e:	429a      	cmp	r2, r3
 800c770:	d102      	bne.n	800c778 <UART_SetConfig+0xe0>
 800c772:	2304      	movs	r3, #4
 800c774:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c776:	e022      	b.n	800c7be <UART_SetConfig+0x126>
 800c778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	4b55      	ldr	r3, [pc, #340]	@ (800c8d4 <UART_SetConfig+0x23c>)
 800c77e:	429a      	cmp	r2, r3
 800c780:	d102      	bne.n	800c788 <UART_SetConfig+0xf0>
 800c782:	2308      	movs	r3, #8
 800c784:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c786:	e01a      	b.n	800c7be <UART_SetConfig+0x126>
 800c788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	4b52      	ldr	r3, [pc, #328]	@ (800c8d8 <UART_SetConfig+0x240>)
 800c78e:	429a      	cmp	r2, r3
 800c790:	d102      	bne.n	800c798 <UART_SetConfig+0x100>
 800c792:	2310      	movs	r3, #16
 800c794:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c796:	e012      	b.n	800c7be <UART_SetConfig+0x126>
 800c798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	4b4f      	ldr	r3, [pc, #316]	@ (800c8dc <UART_SetConfig+0x244>)
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d103      	bne.n	800c7aa <UART_SetConfig+0x112>
 800c7a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800c7a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7a8:	e009      	b.n	800c7be <UART_SetConfig+0x126>
 800c7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	4b43      	ldr	r3, [pc, #268]	@ (800c8bc <UART_SetConfig+0x224>)
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d102      	bne.n	800c7ba <UART_SetConfig+0x122>
 800c7b4:	2320      	movs	r3, #32
 800c7b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7b8:	e001      	b.n	800c7be <UART_SetConfig+0x126>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	4b3e      	ldr	r3, [pc, #248]	@ (800c8bc <UART_SetConfig+0x224>)
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d005      	beq.n	800c7d4 <UART_SetConfig+0x13c>
 800c7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	4b3d      	ldr	r3, [pc, #244]	@ (800c8c4 <UART_SetConfig+0x22c>)
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	f040 8088 	bne.w	800c8e4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c7d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	623b      	str	r3, [r7, #32]
 800c7da:	627a      	str	r2, [r7, #36]	@ 0x24
 800c7dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c7e0:	f7fb fe68 	bl	80084b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c7e4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c7e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f000 80eb 	beq.w	800c9c4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7f2:	4a3b      	ldr	r2, [pc, #236]	@ (800c8e0 <UART_SetConfig+0x248>)
 800c7f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c800:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c804:	685a      	ldr	r2, [r3, #4]
 800c806:	4613      	mov	r3, r2
 800c808:	005b      	lsls	r3, r3, #1
 800c80a:	4413      	add	r3, r2
 800c80c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c80e:	429a      	cmp	r2, r3
 800c810:	d305      	bcc.n	800c81e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d903      	bls.n	800c826 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c824:	e048      	b.n	800c8b8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c828:	2200      	movs	r2, #0
 800c82a:	61bb      	str	r3, [r7, #24]
 800c82c:	61fa      	str	r2, [r7, #28]
 800c82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c832:	4a2b      	ldr	r2, [pc, #172]	@ (800c8e0 <UART_SetConfig+0x248>)
 800c834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c838:	b29b      	uxth	r3, r3
 800c83a:	2200      	movs	r2, #0
 800c83c:	613b      	str	r3, [r7, #16]
 800c83e:	617a      	str	r2, [r7, #20]
 800c840:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c844:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c848:	f7f4 f9ae 	bl	8000ba8 <__aeabi_uldivmod>
 800c84c:	4602      	mov	r2, r0
 800c84e:	460b      	mov	r3, r1
 800c850:	4610      	mov	r0, r2
 800c852:	4619      	mov	r1, r3
 800c854:	f04f 0200 	mov.w	r2, #0
 800c858:	f04f 0300 	mov.w	r3, #0
 800c85c:	020b      	lsls	r3, r1, #8
 800c85e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c862:	0202      	lsls	r2, r0, #8
 800c864:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c866:	6849      	ldr	r1, [r1, #4]
 800c868:	0849      	lsrs	r1, r1, #1
 800c86a:	2000      	movs	r0, #0
 800c86c:	460c      	mov	r4, r1
 800c86e:	4605      	mov	r5, r0
 800c870:	eb12 0804 	adds.w	r8, r2, r4
 800c874:	eb43 0905 	adc.w	r9, r3, r5
 800c878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	2200      	movs	r2, #0
 800c87e:	60bb      	str	r3, [r7, #8]
 800c880:	60fa      	str	r2, [r7, #12]
 800c882:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c886:	4640      	mov	r0, r8
 800c888:	4649      	mov	r1, r9
 800c88a:	f7f4 f98d 	bl	8000ba8 <__aeabi_uldivmod>
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	4613      	mov	r3, r2
 800c894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c898:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c89c:	d308      	bcc.n	800c8b0 <UART_SetConfig+0x218>
 800c89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8a4:	d204      	bcs.n	800c8b0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800c8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c8ac:	60da      	str	r2, [r3, #12]
 800c8ae:	e003      	b.n	800c8b8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c8b6:	e085      	b.n	800c9c4 <UART_SetConfig+0x32c>
 800c8b8:	e084      	b.n	800c9c4 <UART_SetConfig+0x32c>
 800c8ba:	bf00      	nop
 800c8bc:	46002400 	.word	0x46002400
 800c8c0:	cfff69f3 	.word	0xcfff69f3
 800c8c4:	56002400 	.word	0x56002400
 800c8c8:	40013800 	.word	0x40013800
 800c8cc:	40004400 	.word	0x40004400
 800c8d0:	40004800 	.word	0x40004800
 800c8d4:	40004c00 	.word	0x40004c00
 800c8d8:	40005000 	.word	0x40005000
 800c8dc:	40006400 	.word	0x40006400
 800c8e0:	0800f1b0 	.word	0x0800f1b0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e6:	69db      	ldr	r3, [r3, #28]
 800c8e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8ec:	d13c      	bne.n	800c968 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c8ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	603b      	str	r3, [r7, #0]
 800c8f4:	607a      	str	r2, [r7, #4]
 800c8f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8fa:	f7fb fddb 	bl	80084b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c8fe:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c902:	2b00      	cmp	r3, #0
 800c904:	d05e      	beq.n	800c9c4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c90a:	4a39      	ldr	r2, [pc, #228]	@ (800c9f0 <UART_SetConfig+0x358>)
 800c90c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c910:	461a      	mov	r2, r3
 800c912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c914:	fbb3 f3f2 	udiv	r3, r3, r2
 800c918:	005a      	lsls	r2, r3, #1
 800c91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	085b      	lsrs	r3, r3, #1
 800c920:	441a      	add	r2, r3
 800c922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	fbb2 f3f3 	udiv	r3, r2, r3
 800c92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c92e:	2b0f      	cmp	r3, #15
 800c930:	d916      	bls.n	800c960 <UART_SetConfig+0x2c8>
 800c932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c938:	d212      	bcs.n	800c960 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c93a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	f023 030f 	bic.w	r3, r3, #15
 800c942:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c946:	085b      	lsrs	r3, r3, #1
 800c948:	b29b      	uxth	r3, r3
 800c94a:	f003 0307 	and.w	r3, r3, #7
 800c94e:	b29a      	uxth	r2, r3
 800c950:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c952:	4313      	orrs	r3, r2
 800c954:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c95c:	60da      	str	r2, [r3, #12]
 800c95e:	e031      	b.n	800c9c4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c960:	2301      	movs	r3, #1
 800c962:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c966:	e02d      	b.n	800c9c4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c96a:	2200      	movs	r2, #0
 800c96c:	469a      	mov	sl, r3
 800c96e:	4693      	mov	fp, r2
 800c970:	4650      	mov	r0, sl
 800c972:	4659      	mov	r1, fp
 800c974:	f7fb fd9e 	bl	80084b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c978:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c97a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d021      	beq.n	800c9c4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c984:	4a1a      	ldr	r2, [pc, #104]	@ (800c9f0 <UART_SetConfig+0x358>)
 800c986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c98a:	461a      	mov	r2, r3
 800c98c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c98e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	085b      	lsrs	r3, r3, #1
 800c998:	441a      	add	r2, r3
 800c99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9a6:	2b0f      	cmp	r3, #15
 800c9a8:	d909      	bls.n	800c9be <UART_SetConfig+0x326>
 800c9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9b0:	d205      	bcs.n	800c9be <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c9b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	60da      	str	r2, [r3, #12]
 800c9bc:	e002      	b.n	800c9c4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9dc:	2200      	movs	r2, #0
 800c9de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c9e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3750      	adds	r7, #80	@ 0x50
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9ee:	bf00      	nop
 800c9f0:	0800f1b0 	.word	0x0800f1b0

0800c9f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca00:	f003 0308 	and.w	r3, r3, #8
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00a      	beq.n	800ca1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	430a      	orrs	r2, r1
 800ca1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca22:	f003 0301 	and.w	r3, r3, #1
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00a      	beq.n	800ca40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	430a      	orrs	r2, r1
 800ca3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca44:	f003 0302 	and.w	r3, r3, #2
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00a      	beq.n	800ca62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	430a      	orrs	r2, r1
 800ca60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca66:	f003 0304 	and.w	r3, r3, #4
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00a      	beq.n	800ca84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	430a      	orrs	r2, r1
 800ca82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca88:	f003 0310 	and.w	r3, r3, #16
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00a      	beq.n	800caa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	430a      	orrs	r2, r1
 800caa4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caaa:	f003 0320 	and.w	r3, r3, #32
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00a      	beq.n	800cac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	430a      	orrs	r2, r1
 800cac6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cacc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d01a      	beq.n	800cb0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	430a      	orrs	r2, r1
 800cae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800caf2:	d10a      	bne.n	800cb0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	430a      	orrs	r2, r1
 800cb08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00a      	beq.n	800cb2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	430a      	orrs	r2, r1
 800cb2a:	605a      	str	r2, [r3, #4]
  }
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b098      	sub	sp, #96	@ 0x60
 800cb3c:	af02      	add	r7, sp, #8
 800cb3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb48:	f7f7 fb1a 	bl	8004180 <HAL_GetTick>
 800cb4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f003 0308 	and.w	r3, r3, #8
 800cb58:	2b08      	cmp	r3, #8
 800cb5a:	d12f      	bne.n	800cbbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cb60:	9300      	str	r3, [sp, #0]
 800cb62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb64:	2200      	movs	r2, #0
 800cb66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 f88e 	bl	800cc8c <UART_WaitOnFlagUntilTimeout>
 800cb70:	4603      	mov	r3, r0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d022      	beq.n	800cbbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb7e:	e853 3f00 	ldrex	r3, [r3]
 800cb82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb8a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	461a      	mov	r2, r3
 800cb92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb94:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb9c:	e841 2300 	strex	r3, r2, [r1]
 800cba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1e6      	bne.n	800cb76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2220      	movs	r2, #32
 800cbac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	e063      	b.n	800cc84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 0304 	and.w	r3, r3, #4
 800cbc6:	2b04      	cmp	r3, #4
 800cbc8:	d149      	bne.n	800cc5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f857 	bl	800cc8c <UART_WaitOnFlagUntilTimeout>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d03c      	beq.n	800cc5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbec:	e853 3f00 	ldrex	r3, [r3]
 800cbf0:	623b      	str	r3, [r7, #32]
   return(result);
 800cbf2:	6a3b      	ldr	r3, [r7, #32]
 800cbf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	461a      	mov	r2, r3
 800cc00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc02:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc0a:	e841 2300 	strex	r3, r2, [r1]
 800cc0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d1e6      	bne.n	800cbe4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	e853 3f00 	ldrex	r3, [r3]
 800cc24:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f023 0301 	bic.w	r3, r3, #1
 800cc2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	3308      	adds	r3, #8
 800cc34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc36:	61fa      	str	r2, [r7, #28]
 800cc38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3a:	69b9      	ldr	r1, [r7, #24]
 800cc3c:	69fa      	ldr	r2, [r7, #28]
 800cc3e:	e841 2300 	strex	r3, r2, [r1]
 800cc42:	617b      	str	r3, [r7, #20]
   return(result);
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1e5      	bne.n	800cc16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2220      	movs	r2, #32
 800cc4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc5a:	2303      	movs	r3, #3
 800cc5c:	e012      	b.n	800cc84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2220      	movs	r2, #32
 800cc62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2220      	movs	r2, #32
 800cc6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc82:	2300      	movs	r3, #0
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3758      	adds	r7, #88	@ 0x58
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	603b      	str	r3, [r7, #0]
 800cc98:	4613      	mov	r3, r2
 800cc9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc9c:	e04f      	b.n	800cd3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca4:	d04b      	beq.n	800cd3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cca6:	f7f7 fa6b 	bl	8004180 <HAL_GetTick>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	1ad3      	subs	r3, r2, r3
 800ccb0:	69ba      	ldr	r2, [r7, #24]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d302      	bcc.n	800ccbc <UART_WaitOnFlagUntilTimeout+0x30>
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d101      	bne.n	800ccc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	e04e      	b.n	800cd5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f003 0304 	and.w	r3, r3, #4
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d037      	beq.n	800cd3e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	2b80      	cmp	r3, #128	@ 0x80
 800ccd2:	d034      	beq.n	800cd3e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	2b40      	cmp	r3, #64	@ 0x40
 800ccd8:	d031      	beq.n	800cd3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	69db      	ldr	r3, [r3, #28]
 800cce0:	f003 0308 	and.w	r3, r3, #8
 800cce4:	2b08      	cmp	r3, #8
 800cce6:	d110      	bne.n	800cd0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2208      	movs	r2, #8
 800ccee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f000 f879 	bl	800cde8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2208      	movs	r2, #8
 800ccfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cd06:	2301      	movs	r3, #1
 800cd08:	e029      	b.n	800cd5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	69db      	ldr	r3, [r3, #28]
 800cd10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cd14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd18:	d111      	bne.n	800cd3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd24:	68f8      	ldr	r0, [r7, #12]
 800cd26:	f000 f85f 	bl	800cde8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2220      	movs	r2, #32
 800cd2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2200      	movs	r2, #0
 800cd36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cd3a:	2303      	movs	r3, #3
 800cd3c:	e00f      	b.n	800cd5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	69da      	ldr	r2, [r3, #28]
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	4013      	ands	r3, r2
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	bf0c      	ite	eq
 800cd4e:	2301      	moveq	r3, #1
 800cd50:	2300      	movne	r3, #0
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	461a      	mov	r2, r3
 800cd56:	79fb      	ldrb	r3, [r7, #7]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d0a0      	beq.n	800cc9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3710      	adds	r7, #16
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b08f      	sub	sp, #60	@ 0x3c
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	e853 3f00 	ldrex	r3, [r3]
 800cd7a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cd82:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	461a      	mov	r2, r3
 800cd8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd8e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd94:	e841 2300 	strex	r3, r2, [r1]
 800cd98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d1e6      	bne.n	800cd6e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3308      	adds	r3, #8
 800cda6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	e853 3f00 	ldrex	r3, [r3]
 800cdae:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800cdb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3308      	adds	r3, #8
 800cdbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdc0:	61ba      	str	r2, [r7, #24]
 800cdc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc4:	6979      	ldr	r1, [r7, #20]
 800cdc6:	69ba      	ldr	r2, [r7, #24]
 800cdc8:	e841 2300 	strex	r3, r2, [r1]
 800cdcc:	613b      	str	r3, [r7, #16]
   return(result);
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d1e5      	bne.n	800cda0 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2220      	movs	r2, #32
 800cdd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800cddc:	bf00      	nop
 800cdde:	373c      	adds	r7, #60	@ 0x3c
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b095      	sub	sp, #84	@ 0x54
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf8:	e853 3f00 	ldrex	r3, [r3]
 800cdfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce16:	e841 2300 	strex	r3, r2, [r1]
 800ce1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1e6      	bne.n	800cdf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	3308      	adds	r3, #8
 800ce28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
 800ce2c:	e853 3f00 	ldrex	r3, [r3]
 800ce30:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce38:	f023 0301 	bic.w	r3, r3, #1
 800ce3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	3308      	adds	r3, #8
 800ce44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce4e:	e841 2300 	strex	r3, r2, [r1]
 800ce52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1e3      	bne.n	800ce22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d118      	bne.n	800ce94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	e853 3f00 	ldrex	r3, [r3]
 800ce6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	f023 0310 	bic.w	r3, r3, #16
 800ce76:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce80:	61bb      	str	r3, [r7, #24]
 800ce82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce84:	6979      	ldr	r1, [r7, #20]
 800ce86:	69ba      	ldr	r2, [r7, #24]
 800ce88:	e841 2300 	strex	r3, r2, [r1]
 800ce8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1e6      	bne.n	800ce62 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2220      	movs	r2, #32
 800ce98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cea8:	bf00      	nop
 800ceaa:	3754      	adds	r7, #84	@ 0x54
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b090      	sub	sp, #64	@ 0x40
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cec0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cec6:	2b81      	cmp	r3, #129	@ 0x81
 800cec8:	d037      	beq.n	800cf3a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800ceca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cecc:	2200      	movs	r2, #0
 800cece:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ced2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	3308      	adds	r3, #8
 800ced8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cedc:	e853 3f00 	ldrex	r3, [r3]
 800cee0:	623b      	str	r3, [r7, #32]
   return(result);
 800cee2:	6a3b      	ldr	r3, [r7, #32]
 800cee4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cee8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ceea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	3308      	adds	r3, #8
 800cef0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cef2:	633a      	str	r2, [r7, #48]	@ 0x30
 800cef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cefa:	e841 2300 	strex	r3, r2, [r1]
 800cefe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d1e5      	bne.n	800ced2 <UART_DMATransmitCplt+0x1e>

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	e853 3f00 	ldrex	r3, [r3]
 800cf12:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	461a      	mov	r2, r3
 800cf22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf24:	61fb      	str	r3, [r7, #28]
 800cf26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf28:	69b9      	ldr	r1, [r7, #24]
 800cf2a:	69fa      	ldr	r2, [r7, #28]
 800cf2c:	e841 2300 	strex	r3, r2, [r1]
 800cf30:	617b      	str	r3, [r7, #20]
   return(result);
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1e6      	bne.n	800cf06 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf38:	e002      	b.n	800cf40 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800cf3a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cf3c:	f7f5 f818 	bl	8001f70 <HAL_UART_TxCpltCallback>
}
 800cf40:	bf00      	nop
 800cf42:	3740      	adds	r7, #64	@ 0x40
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf54:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f7ff fb7e 	bl	800c658 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf5c:	bf00      	nop
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf70:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf78:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf80:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf8c:	2b80      	cmp	r3, #128	@ 0x80
 800cf8e:	d109      	bne.n	800cfa4 <UART_DMAError+0x40>
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	2b21      	cmp	r3, #33	@ 0x21
 800cf94:	d106      	bne.n	800cfa4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800cf9e:	6978      	ldr	r0, [r7, #20]
 800cfa0:	f7ff fee1 	bl	800cd66 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	689b      	ldr	r3, [r3, #8]
 800cfaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfae:	2b40      	cmp	r3, #64	@ 0x40
 800cfb0:	d109      	bne.n	800cfc6 <UART_DMAError+0x62>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2b22      	cmp	r3, #34	@ 0x22
 800cfb6:	d106      	bne.n	800cfc6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800cfc0:	6978      	ldr	r0, [r7, #20]
 800cfc2:	f7ff ff11 	bl	800cde8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfcc:	f043 0210 	orr.w	r2, r3, #16
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfd6:	6978      	ldr	r0, [r7, #20]
 800cfd8:	f7ff fb48 	bl	800c66c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfdc:	bf00      	nop
 800cfde:	3718      	adds	r7, #24
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cff0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f7ff fb36 	bl	800c66c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d000:	bf00      	nop
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b088      	sub	sp, #32
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	e853 3f00 	ldrex	r3, [r3]
 800d01c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d024:	61fb      	str	r3, [r7, #28]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	461a      	mov	r2, r3
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	61bb      	str	r3, [r7, #24]
 800d030:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d032:	6979      	ldr	r1, [r7, #20]
 800d034:	69ba      	ldr	r2, [r7, #24]
 800d036:	e841 2300 	strex	r3, r2, [r1]
 800d03a:	613b      	str	r3, [r7, #16]
   return(result);
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1e6      	bne.n	800d010 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2220      	movs	r2, #32
 800d046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7f4 ff8d 	bl	8001f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d056:	bf00      	nop
 800d058:	3720      	adds	r7, #32
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d05e:	b480      	push	{r7}
 800d060:	b083      	sub	sp, #12
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d066:	bf00      	nop
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d072:	b480      	push	{r7}
 800d074:	b083      	sub	sp, #12
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d07a:	bf00      	nop
 800d07c:	370c      	adds	r7, #12
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d086:	b480      	push	{r7}
 800d088:	b085      	sub	sp, #20
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d094:	2b01      	cmp	r3, #1
 800d096:	d101      	bne.n	800d09c <HAL_UARTEx_DisableFifoMode+0x16>
 800d098:	2302      	movs	r3, #2
 800d09a:	e027      	b.n	800d0ec <HAL_UARTEx_DisableFifoMode+0x66>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2224      	movs	r2, #36	@ 0x24
 800d0a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f022 0201 	bic.w	r2, r2, #1
 800d0c2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d0ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	68fa      	ldr	r2, [r7, #12]
 800d0d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2220      	movs	r2, #32
 800d0de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d0ea:	2300      	movs	r3, #0
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3714      	adds	r7, #20
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d101      	bne.n	800d110 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d10c:	2302      	movs	r3, #2
 800d10e:	e02d      	b.n	800d16c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2224      	movs	r2, #36	@ 0x24
 800d11c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f022 0201 	bic.w	r2, r2, #1
 800d136:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	683a      	ldr	r2, [r7, #0]
 800d148:	430a      	orrs	r2, r1
 800d14a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f84f 	bl	800d1f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68fa      	ldr	r2, [r7, #12]
 800d158:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2220      	movs	r2, #32
 800d15e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d184:	2b01      	cmp	r3, #1
 800d186:	d101      	bne.n	800d18c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d188:	2302      	movs	r3, #2
 800d18a:	e02d      	b.n	800d1e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2224      	movs	r2, #36	@ 0x24
 800d198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f022 0201 	bic.w	r2, r2, #1
 800d1b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	430a      	orrs	r2, r1
 800d1c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 f811 	bl	800d1f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2220      	movs	r2, #32
 800d1da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d108      	bne.n	800d212 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2201      	movs	r2, #1
 800d204:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d210:	e031      	b.n	800d276 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d212:	2308      	movs	r3, #8
 800d214:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d216:	2308      	movs	r3, #8
 800d218:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	0e5b      	lsrs	r3, r3, #25
 800d222:	b2db      	uxtb	r3, r3
 800d224:	f003 0307 	and.w	r3, r3, #7
 800d228:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	0f5b      	lsrs	r3, r3, #29
 800d232:	b2db      	uxtb	r3, r3
 800d234:	f003 0307 	and.w	r3, r3, #7
 800d238:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d23a:	7bbb      	ldrb	r3, [r7, #14]
 800d23c:	7b3a      	ldrb	r2, [r7, #12]
 800d23e:	4911      	ldr	r1, [pc, #68]	@ (800d284 <UARTEx_SetNbDataToProcess+0x94>)
 800d240:	5c8a      	ldrb	r2, [r1, r2]
 800d242:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d246:	7b3a      	ldrb	r2, [r7, #12]
 800d248:	490f      	ldr	r1, [pc, #60]	@ (800d288 <UARTEx_SetNbDataToProcess+0x98>)
 800d24a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d24c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d250:	b29a      	uxth	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d258:	7bfb      	ldrb	r3, [r7, #15]
 800d25a:	7b7a      	ldrb	r2, [r7, #13]
 800d25c:	4909      	ldr	r1, [pc, #36]	@ (800d284 <UARTEx_SetNbDataToProcess+0x94>)
 800d25e:	5c8a      	ldrb	r2, [r1, r2]
 800d260:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d264:	7b7a      	ldrb	r2, [r7, #13]
 800d266:	4908      	ldr	r1, [pc, #32]	@ (800d288 <UARTEx_SetNbDataToProcess+0x98>)
 800d268:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d26a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d26e:	b29a      	uxth	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d276:	bf00      	nop
 800d278:	3714      	adds	r7, #20
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	0800f1c8 	.word	0x0800f1c8
 800d288:	0800f1d0 	.word	0x0800f1d0

0800d28c <malloc>:
 800d28c:	4b02      	ldr	r3, [pc, #8]	@ (800d298 <malloc+0xc>)
 800d28e:	4601      	mov	r1, r0
 800d290:	6818      	ldr	r0, [r3, #0]
 800d292:	f000 b82d 	b.w	800d2f0 <_malloc_r>
 800d296:	bf00      	nop
 800d298:	20000024 	.word	0x20000024

0800d29c <free>:
 800d29c:	4b02      	ldr	r3, [pc, #8]	@ (800d2a8 <free+0xc>)
 800d29e:	4601      	mov	r1, r0
 800d2a0:	6818      	ldr	r0, [r3, #0]
 800d2a2:	f000 bb35 	b.w	800d910 <_free_r>
 800d2a6:	bf00      	nop
 800d2a8:	20000024 	.word	0x20000024

0800d2ac <sbrk_aligned>:
 800d2ac:	b570      	push	{r4, r5, r6, lr}
 800d2ae:	4e0f      	ldr	r6, [pc, #60]	@ (800d2ec <sbrk_aligned+0x40>)
 800d2b0:	460c      	mov	r4, r1
 800d2b2:	4605      	mov	r5, r0
 800d2b4:	6831      	ldr	r1, [r6, #0]
 800d2b6:	b911      	cbnz	r1, 800d2be <sbrk_aligned+0x12>
 800d2b8:	f000 fada 	bl	800d870 <_sbrk_r>
 800d2bc:	6030      	str	r0, [r6, #0]
 800d2be:	4621      	mov	r1, r4
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	f000 fad5 	bl	800d870 <_sbrk_r>
 800d2c6:	1c43      	adds	r3, r0, #1
 800d2c8:	d103      	bne.n	800d2d2 <sbrk_aligned+0x26>
 800d2ca:	f04f 34ff 	mov.w	r4, #4294967295
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	bd70      	pop	{r4, r5, r6, pc}
 800d2d2:	1cc4      	adds	r4, r0, #3
 800d2d4:	f024 0403 	bic.w	r4, r4, #3
 800d2d8:	42a0      	cmp	r0, r4
 800d2da:	d0f8      	beq.n	800d2ce <sbrk_aligned+0x22>
 800d2dc:	1a21      	subs	r1, r4, r0
 800d2de:	4628      	mov	r0, r5
 800d2e0:	f000 fac6 	bl	800d870 <_sbrk_r>
 800d2e4:	3001      	adds	r0, #1
 800d2e6:	d1f2      	bne.n	800d2ce <sbrk_aligned+0x22>
 800d2e8:	e7ef      	b.n	800d2ca <sbrk_aligned+0x1e>
 800d2ea:	bf00      	nop
 800d2ec:	200007b8 	.word	0x200007b8

0800d2f0 <_malloc_r>:
 800d2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2f4:	1ccd      	adds	r5, r1, #3
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	f025 0503 	bic.w	r5, r5, #3
 800d2fc:	3508      	adds	r5, #8
 800d2fe:	2d0c      	cmp	r5, #12
 800d300:	bf38      	it	cc
 800d302:	250c      	movcc	r5, #12
 800d304:	2d00      	cmp	r5, #0
 800d306:	db01      	blt.n	800d30c <_malloc_r+0x1c>
 800d308:	42a9      	cmp	r1, r5
 800d30a:	d904      	bls.n	800d316 <_malloc_r+0x26>
 800d30c:	230c      	movs	r3, #12
 800d30e:	6033      	str	r3, [r6, #0]
 800d310:	2000      	movs	r0, #0
 800d312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d316:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d3ec <_malloc_r+0xfc>
 800d31a:	f000 f869 	bl	800d3f0 <__malloc_lock>
 800d31e:	f8d8 3000 	ldr.w	r3, [r8]
 800d322:	461c      	mov	r4, r3
 800d324:	bb44      	cbnz	r4, 800d378 <_malloc_r+0x88>
 800d326:	4629      	mov	r1, r5
 800d328:	4630      	mov	r0, r6
 800d32a:	f7ff ffbf 	bl	800d2ac <sbrk_aligned>
 800d32e:	1c43      	adds	r3, r0, #1
 800d330:	4604      	mov	r4, r0
 800d332:	d158      	bne.n	800d3e6 <_malloc_r+0xf6>
 800d334:	f8d8 4000 	ldr.w	r4, [r8]
 800d338:	4627      	mov	r7, r4
 800d33a:	2f00      	cmp	r7, #0
 800d33c:	d143      	bne.n	800d3c6 <_malloc_r+0xd6>
 800d33e:	2c00      	cmp	r4, #0
 800d340:	d04b      	beq.n	800d3da <_malloc_r+0xea>
 800d342:	6823      	ldr	r3, [r4, #0]
 800d344:	4639      	mov	r1, r7
 800d346:	4630      	mov	r0, r6
 800d348:	eb04 0903 	add.w	r9, r4, r3
 800d34c:	f000 fa90 	bl	800d870 <_sbrk_r>
 800d350:	4581      	cmp	r9, r0
 800d352:	d142      	bne.n	800d3da <_malloc_r+0xea>
 800d354:	6821      	ldr	r1, [r4, #0]
 800d356:	4630      	mov	r0, r6
 800d358:	1a6d      	subs	r5, r5, r1
 800d35a:	4629      	mov	r1, r5
 800d35c:	f7ff ffa6 	bl	800d2ac <sbrk_aligned>
 800d360:	3001      	adds	r0, #1
 800d362:	d03a      	beq.n	800d3da <_malloc_r+0xea>
 800d364:	6823      	ldr	r3, [r4, #0]
 800d366:	442b      	add	r3, r5
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	f8d8 3000 	ldr.w	r3, [r8]
 800d36e:	685a      	ldr	r2, [r3, #4]
 800d370:	bb62      	cbnz	r2, 800d3cc <_malloc_r+0xdc>
 800d372:	f8c8 7000 	str.w	r7, [r8]
 800d376:	e00f      	b.n	800d398 <_malloc_r+0xa8>
 800d378:	6822      	ldr	r2, [r4, #0]
 800d37a:	1b52      	subs	r2, r2, r5
 800d37c:	d420      	bmi.n	800d3c0 <_malloc_r+0xd0>
 800d37e:	2a0b      	cmp	r2, #11
 800d380:	d917      	bls.n	800d3b2 <_malloc_r+0xc2>
 800d382:	1961      	adds	r1, r4, r5
 800d384:	42a3      	cmp	r3, r4
 800d386:	6025      	str	r5, [r4, #0]
 800d388:	bf18      	it	ne
 800d38a:	6059      	strne	r1, [r3, #4]
 800d38c:	6863      	ldr	r3, [r4, #4]
 800d38e:	bf08      	it	eq
 800d390:	f8c8 1000 	streq.w	r1, [r8]
 800d394:	5162      	str	r2, [r4, r5]
 800d396:	604b      	str	r3, [r1, #4]
 800d398:	4630      	mov	r0, r6
 800d39a:	f000 f82f 	bl	800d3fc <__malloc_unlock>
 800d39e:	f104 000b 	add.w	r0, r4, #11
 800d3a2:	1d23      	adds	r3, r4, #4
 800d3a4:	f020 0007 	bic.w	r0, r0, #7
 800d3a8:	1ac2      	subs	r2, r0, r3
 800d3aa:	bf1c      	itt	ne
 800d3ac:	1a1b      	subne	r3, r3, r0
 800d3ae:	50a3      	strne	r3, [r4, r2]
 800d3b0:	e7af      	b.n	800d312 <_malloc_r+0x22>
 800d3b2:	6862      	ldr	r2, [r4, #4]
 800d3b4:	42a3      	cmp	r3, r4
 800d3b6:	bf0c      	ite	eq
 800d3b8:	f8c8 2000 	streq.w	r2, [r8]
 800d3bc:	605a      	strne	r2, [r3, #4]
 800d3be:	e7eb      	b.n	800d398 <_malloc_r+0xa8>
 800d3c0:	4623      	mov	r3, r4
 800d3c2:	6864      	ldr	r4, [r4, #4]
 800d3c4:	e7ae      	b.n	800d324 <_malloc_r+0x34>
 800d3c6:	463c      	mov	r4, r7
 800d3c8:	687f      	ldr	r7, [r7, #4]
 800d3ca:	e7b6      	b.n	800d33a <_malloc_r+0x4a>
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	42a3      	cmp	r3, r4
 800d3d2:	d1fb      	bne.n	800d3cc <_malloc_r+0xdc>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	6053      	str	r3, [r2, #4]
 800d3d8:	e7de      	b.n	800d398 <_malloc_r+0xa8>
 800d3da:	230c      	movs	r3, #12
 800d3dc:	4630      	mov	r0, r6
 800d3de:	6033      	str	r3, [r6, #0]
 800d3e0:	f000 f80c 	bl	800d3fc <__malloc_unlock>
 800d3e4:	e794      	b.n	800d310 <_malloc_r+0x20>
 800d3e6:	6005      	str	r5, [r0, #0]
 800d3e8:	e7d6      	b.n	800d398 <_malloc_r+0xa8>
 800d3ea:	bf00      	nop
 800d3ec:	200007bc 	.word	0x200007bc

0800d3f0 <__malloc_lock>:
 800d3f0:	4801      	ldr	r0, [pc, #4]	@ (800d3f8 <__malloc_lock+0x8>)
 800d3f2:	f000 ba8a 	b.w	800d90a <__retarget_lock_acquire_recursive>
 800d3f6:	bf00      	nop
 800d3f8:	20000900 	.word	0x20000900

0800d3fc <__malloc_unlock>:
 800d3fc:	4801      	ldr	r0, [pc, #4]	@ (800d404 <__malloc_unlock+0x8>)
 800d3fe:	f000 ba85 	b.w	800d90c <__retarget_lock_release_recursive>
 800d402:	bf00      	nop
 800d404:	20000900 	.word	0x20000900

0800d408 <std>:
 800d408:	2300      	movs	r3, #0
 800d40a:	b510      	push	{r4, lr}
 800d40c:	4604      	mov	r4, r0
 800d40e:	6083      	str	r3, [r0, #8]
 800d410:	8181      	strh	r1, [r0, #12]
 800d412:	4619      	mov	r1, r3
 800d414:	6643      	str	r3, [r0, #100]	@ 0x64
 800d416:	81c2      	strh	r2, [r0, #14]
 800d418:	2208      	movs	r2, #8
 800d41a:	6183      	str	r3, [r0, #24]
 800d41c:	e9c0 3300 	strd	r3, r3, [r0]
 800d420:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d424:	305c      	adds	r0, #92	@ 0x5c
 800d426:	f000 f9e7 	bl	800d7f8 <memset>
 800d42a:	4b0d      	ldr	r3, [pc, #52]	@ (800d460 <std+0x58>)
 800d42c:	6224      	str	r4, [r4, #32]
 800d42e:	6263      	str	r3, [r4, #36]	@ 0x24
 800d430:	4b0c      	ldr	r3, [pc, #48]	@ (800d464 <std+0x5c>)
 800d432:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d434:	4b0c      	ldr	r3, [pc, #48]	@ (800d468 <std+0x60>)
 800d436:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d438:	4b0c      	ldr	r3, [pc, #48]	@ (800d46c <std+0x64>)
 800d43a:	6323      	str	r3, [r4, #48]	@ 0x30
 800d43c:	4b0c      	ldr	r3, [pc, #48]	@ (800d470 <std+0x68>)
 800d43e:	429c      	cmp	r4, r3
 800d440:	d006      	beq.n	800d450 <std+0x48>
 800d442:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d446:	4294      	cmp	r4, r2
 800d448:	d002      	beq.n	800d450 <std+0x48>
 800d44a:	33d0      	adds	r3, #208	@ 0xd0
 800d44c:	429c      	cmp	r4, r3
 800d44e:	d105      	bne.n	800d45c <std+0x54>
 800d450:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d458:	f000 ba56 	b.w	800d908 <__retarget_lock_init_recursive>
 800d45c:	bd10      	pop	{r4, pc}
 800d45e:	bf00      	nop
 800d460:	0800d649 	.word	0x0800d649
 800d464:	0800d66b 	.word	0x0800d66b
 800d468:	0800d6a3 	.word	0x0800d6a3
 800d46c:	0800d6c7 	.word	0x0800d6c7
 800d470:	200007c0 	.word	0x200007c0

0800d474 <stdio_exit_handler>:
 800d474:	4a02      	ldr	r2, [pc, #8]	@ (800d480 <stdio_exit_handler+0xc>)
 800d476:	4903      	ldr	r1, [pc, #12]	@ (800d484 <stdio_exit_handler+0x10>)
 800d478:	4803      	ldr	r0, [pc, #12]	@ (800d488 <stdio_exit_handler+0x14>)
 800d47a:	f000 b869 	b.w	800d550 <_fwalk_sglue>
 800d47e:	bf00      	nop
 800d480:	20000018 	.word	0x20000018
 800d484:	0800daad 	.word	0x0800daad
 800d488:	20000028 	.word	0x20000028

0800d48c <cleanup_stdio>:
 800d48c:	6841      	ldr	r1, [r0, #4]
 800d48e:	4b0c      	ldr	r3, [pc, #48]	@ (800d4c0 <cleanup_stdio+0x34>)
 800d490:	4299      	cmp	r1, r3
 800d492:	b510      	push	{r4, lr}
 800d494:	4604      	mov	r4, r0
 800d496:	d001      	beq.n	800d49c <cleanup_stdio+0x10>
 800d498:	f000 fb08 	bl	800daac <_fflush_r>
 800d49c:	68a1      	ldr	r1, [r4, #8]
 800d49e:	4b09      	ldr	r3, [pc, #36]	@ (800d4c4 <cleanup_stdio+0x38>)
 800d4a0:	4299      	cmp	r1, r3
 800d4a2:	d002      	beq.n	800d4aa <cleanup_stdio+0x1e>
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	f000 fb01 	bl	800daac <_fflush_r>
 800d4aa:	68e1      	ldr	r1, [r4, #12]
 800d4ac:	4b06      	ldr	r3, [pc, #24]	@ (800d4c8 <cleanup_stdio+0x3c>)
 800d4ae:	4299      	cmp	r1, r3
 800d4b0:	d004      	beq.n	800d4bc <cleanup_stdio+0x30>
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4b8:	f000 baf8 	b.w	800daac <_fflush_r>
 800d4bc:	bd10      	pop	{r4, pc}
 800d4be:	bf00      	nop
 800d4c0:	200007c0 	.word	0x200007c0
 800d4c4:	20000828 	.word	0x20000828
 800d4c8:	20000890 	.word	0x20000890

0800d4cc <global_stdio_init.part.0>:
 800d4cc:	b510      	push	{r4, lr}
 800d4ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d4fc <global_stdio_init.part.0+0x30>)
 800d4d0:	2104      	movs	r1, #4
 800d4d2:	4c0b      	ldr	r4, [pc, #44]	@ (800d500 <global_stdio_init.part.0+0x34>)
 800d4d4:	4a0b      	ldr	r2, [pc, #44]	@ (800d504 <global_stdio_init.part.0+0x38>)
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f7ff ff94 	bl	800d408 <std>
 800d4e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	2109      	movs	r1, #9
 800d4e8:	f7ff ff8e 	bl	800d408 <std>
 800d4ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d4f0:	2202      	movs	r2, #2
 800d4f2:	2112      	movs	r1, #18
 800d4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4f8:	f7ff bf86 	b.w	800d408 <std>
 800d4fc:	200008f8 	.word	0x200008f8
 800d500:	200007c0 	.word	0x200007c0
 800d504:	0800d475 	.word	0x0800d475

0800d508 <__sfp_lock_acquire>:
 800d508:	4801      	ldr	r0, [pc, #4]	@ (800d510 <__sfp_lock_acquire+0x8>)
 800d50a:	f000 b9fe 	b.w	800d90a <__retarget_lock_acquire_recursive>
 800d50e:	bf00      	nop
 800d510:	20000901 	.word	0x20000901

0800d514 <__sfp_lock_release>:
 800d514:	4801      	ldr	r0, [pc, #4]	@ (800d51c <__sfp_lock_release+0x8>)
 800d516:	f000 b9f9 	b.w	800d90c <__retarget_lock_release_recursive>
 800d51a:	bf00      	nop
 800d51c:	20000901 	.word	0x20000901

0800d520 <__sinit>:
 800d520:	b510      	push	{r4, lr}
 800d522:	4604      	mov	r4, r0
 800d524:	f7ff fff0 	bl	800d508 <__sfp_lock_acquire>
 800d528:	6a23      	ldr	r3, [r4, #32]
 800d52a:	b11b      	cbz	r3, 800d534 <__sinit+0x14>
 800d52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d530:	f7ff bff0 	b.w	800d514 <__sfp_lock_release>
 800d534:	4b04      	ldr	r3, [pc, #16]	@ (800d548 <__sinit+0x28>)
 800d536:	6223      	str	r3, [r4, #32]
 800d538:	4b04      	ldr	r3, [pc, #16]	@ (800d54c <__sinit+0x2c>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1f5      	bne.n	800d52c <__sinit+0xc>
 800d540:	f7ff ffc4 	bl	800d4cc <global_stdio_init.part.0>
 800d544:	e7f2      	b.n	800d52c <__sinit+0xc>
 800d546:	bf00      	nop
 800d548:	0800d48d 	.word	0x0800d48d
 800d54c:	200008f8 	.word	0x200008f8

0800d550 <_fwalk_sglue>:
 800d550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d554:	4607      	mov	r7, r0
 800d556:	4688      	mov	r8, r1
 800d558:	4614      	mov	r4, r2
 800d55a:	2600      	movs	r6, #0
 800d55c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d560:	f1b9 0901 	subs.w	r9, r9, #1
 800d564:	d505      	bpl.n	800d572 <_fwalk_sglue+0x22>
 800d566:	6824      	ldr	r4, [r4, #0]
 800d568:	2c00      	cmp	r4, #0
 800d56a:	d1f7      	bne.n	800d55c <_fwalk_sglue+0xc>
 800d56c:	4630      	mov	r0, r6
 800d56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d572:	89ab      	ldrh	r3, [r5, #12]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d907      	bls.n	800d588 <_fwalk_sglue+0x38>
 800d578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d57c:	3301      	adds	r3, #1
 800d57e:	d003      	beq.n	800d588 <_fwalk_sglue+0x38>
 800d580:	4629      	mov	r1, r5
 800d582:	4638      	mov	r0, r7
 800d584:	47c0      	blx	r8
 800d586:	4306      	orrs	r6, r0
 800d588:	3568      	adds	r5, #104	@ 0x68
 800d58a:	e7e9      	b.n	800d560 <_fwalk_sglue+0x10>

0800d58c <_puts_r>:
 800d58c:	6a03      	ldr	r3, [r0, #32]
 800d58e:	b570      	push	{r4, r5, r6, lr}
 800d590:	4605      	mov	r5, r0
 800d592:	460e      	mov	r6, r1
 800d594:	6884      	ldr	r4, [r0, #8]
 800d596:	b90b      	cbnz	r3, 800d59c <_puts_r+0x10>
 800d598:	f7ff ffc2 	bl	800d520 <__sinit>
 800d59c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d59e:	07db      	lsls	r3, r3, #31
 800d5a0:	d405      	bmi.n	800d5ae <_puts_r+0x22>
 800d5a2:	89a3      	ldrh	r3, [r4, #12]
 800d5a4:	0598      	lsls	r0, r3, #22
 800d5a6:	d402      	bmi.n	800d5ae <_puts_r+0x22>
 800d5a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5aa:	f000 f9ae 	bl	800d90a <__retarget_lock_acquire_recursive>
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	0719      	lsls	r1, r3, #28
 800d5b2:	d502      	bpl.n	800d5ba <_puts_r+0x2e>
 800d5b4:	6923      	ldr	r3, [r4, #16]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d135      	bne.n	800d626 <_puts_r+0x9a>
 800d5ba:	4621      	mov	r1, r4
 800d5bc:	4628      	mov	r0, r5
 800d5be:	f000 f8c5 	bl	800d74c <__swsetup_r>
 800d5c2:	b380      	cbz	r0, 800d626 <_puts_r+0x9a>
 800d5c4:	f04f 35ff 	mov.w	r5, #4294967295
 800d5c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d5ca:	07da      	lsls	r2, r3, #31
 800d5cc:	d405      	bmi.n	800d5da <_puts_r+0x4e>
 800d5ce:	89a3      	ldrh	r3, [r4, #12]
 800d5d0:	059b      	lsls	r3, r3, #22
 800d5d2:	d402      	bmi.n	800d5da <_puts_r+0x4e>
 800d5d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5d6:	f000 f999 	bl	800d90c <__retarget_lock_release_recursive>
 800d5da:	4628      	mov	r0, r5
 800d5dc:	bd70      	pop	{r4, r5, r6, pc}
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	da04      	bge.n	800d5ec <_puts_r+0x60>
 800d5e2:	69a2      	ldr	r2, [r4, #24]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	dc17      	bgt.n	800d618 <_puts_r+0x8c>
 800d5e8:	290a      	cmp	r1, #10
 800d5ea:	d015      	beq.n	800d618 <_puts_r+0x8c>
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	1c5a      	adds	r2, r3, #1
 800d5f0:	6022      	str	r2, [r4, #0]
 800d5f2:	7019      	strb	r1, [r3, #0]
 800d5f4:	68a3      	ldr	r3, [r4, #8]
 800d5f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	60a3      	str	r3, [r4, #8]
 800d5fe:	2900      	cmp	r1, #0
 800d600:	d1ed      	bne.n	800d5de <_puts_r+0x52>
 800d602:	2b00      	cmp	r3, #0
 800d604:	da11      	bge.n	800d62a <_puts_r+0x9e>
 800d606:	4622      	mov	r2, r4
 800d608:	210a      	movs	r1, #10
 800d60a:	4628      	mov	r0, r5
 800d60c:	f000 f85f 	bl	800d6ce <__swbuf_r>
 800d610:	3001      	adds	r0, #1
 800d612:	d0d7      	beq.n	800d5c4 <_puts_r+0x38>
 800d614:	250a      	movs	r5, #10
 800d616:	e7d7      	b.n	800d5c8 <_puts_r+0x3c>
 800d618:	4622      	mov	r2, r4
 800d61a:	4628      	mov	r0, r5
 800d61c:	f000 f857 	bl	800d6ce <__swbuf_r>
 800d620:	3001      	adds	r0, #1
 800d622:	d1e7      	bne.n	800d5f4 <_puts_r+0x68>
 800d624:	e7ce      	b.n	800d5c4 <_puts_r+0x38>
 800d626:	3e01      	subs	r6, #1
 800d628:	e7e4      	b.n	800d5f4 <_puts_r+0x68>
 800d62a:	6823      	ldr	r3, [r4, #0]
 800d62c:	1c5a      	adds	r2, r3, #1
 800d62e:	6022      	str	r2, [r4, #0]
 800d630:	220a      	movs	r2, #10
 800d632:	701a      	strb	r2, [r3, #0]
 800d634:	e7ee      	b.n	800d614 <_puts_r+0x88>
	...

0800d638 <puts>:
 800d638:	4b02      	ldr	r3, [pc, #8]	@ (800d644 <puts+0xc>)
 800d63a:	4601      	mov	r1, r0
 800d63c:	6818      	ldr	r0, [r3, #0]
 800d63e:	f7ff bfa5 	b.w	800d58c <_puts_r>
 800d642:	bf00      	nop
 800d644:	20000024 	.word	0x20000024

0800d648 <__sread>:
 800d648:	b510      	push	{r4, lr}
 800d64a:	460c      	mov	r4, r1
 800d64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d650:	f000 f8fc 	bl	800d84c <_read_r>
 800d654:	2800      	cmp	r0, #0
 800d656:	bfab      	itete	ge
 800d658:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d65a:	89a3      	ldrhlt	r3, [r4, #12]
 800d65c:	181b      	addge	r3, r3, r0
 800d65e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d662:	bfac      	ite	ge
 800d664:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d666:	81a3      	strhlt	r3, [r4, #12]
 800d668:	bd10      	pop	{r4, pc}

0800d66a <__swrite>:
 800d66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d66e:	461f      	mov	r7, r3
 800d670:	898b      	ldrh	r3, [r1, #12]
 800d672:	4605      	mov	r5, r0
 800d674:	460c      	mov	r4, r1
 800d676:	05db      	lsls	r3, r3, #23
 800d678:	4616      	mov	r6, r2
 800d67a:	d505      	bpl.n	800d688 <__swrite+0x1e>
 800d67c:	2302      	movs	r3, #2
 800d67e:	2200      	movs	r2, #0
 800d680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d684:	f000 f8d0 	bl	800d828 <_lseek_r>
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	4632      	mov	r2, r6
 800d68c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d690:	4628      	mov	r0, r5
 800d692:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d696:	81a3      	strh	r3, [r4, #12]
 800d698:	463b      	mov	r3, r7
 800d69a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d69e:	f000 b8f7 	b.w	800d890 <_write_r>

0800d6a2 <__sseek>:
 800d6a2:	b510      	push	{r4, lr}
 800d6a4:	460c      	mov	r4, r1
 800d6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6aa:	f000 f8bd 	bl	800d828 <_lseek_r>
 800d6ae:	1c43      	adds	r3, r0, #1
 800d6b0:	89a3      	ldrh	r3, [r4, #12]
 800d6b2:	bf15      	itete	ne
 800d6b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d6b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d6ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d6be:	81a3      	strheq	r3, [r4, #12]
 800d6c0:	bf18      	it	ne
 800d6c2:	81a3      	strhne	r3, [r4, #12]
 800d6c4:	bd10      	pop	{r4, pc}

0800d6c6 <__sclose>:
 800d6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6ca:	f000 b89d 	b.w	800d808 <_close_r>

0800d6ce <__swbuf_r>:
 800d6ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d0:	460e      	mov	r6, r1
 800d6d2:	4614      	mov	r4, r2
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	b118      	cbz	r0, 800d6e0 <__swbuf_r+0x12>
 800d6d8:	6a03      	ldr	r3, [r0, #32]
 800d6da:	b90b      	cbnz	r3, 800d6e0 <__swbuf_r+0x12>
 800d6dc:	f7ff ff20 	bl	800d520 <__sinit>
 800d6e0:	69a3      	ldr	r3, [r4, #24]
 800d6e2:	60a3      	str	r3, [r4, #8]
 800d6e4:	89a3      	ldrh	r3, [r4, #12]
 800d6e6:	071a      	lsls	r2, r3, #28
 800d6e8:	d501      	bpl.n	800d6ee <__swbuf_r+0x20>
 800d6ea:	6923      	ldr	r3, [r4, #16]
 800d6ec:	b943      	cbnz	r3, 800d700 <__swbuf_r+0x32>
 800d6ee:	4621      	mov	r1, r4
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	f000 f82b 	bl	800d74c <__swsetup_r>
 800d6f6:	b118      	cbz	r0, 800d700 <__swbuf_r+0x32>
 800d6f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d6fc:	4638      	mov	r0, r7
 800d6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d700:	6823      	ldr	r3, [r4, #0]
 800d702:	b2f6      	uxtb	r6, r6
 800d704:	6922      	ldr	r2, [r4, #16]
 800d706:	4637      	mov	r7, r6
 800d708:	1a98      	subs	r0, r3, r2
 800d70a:	6963      	ldr	r3, [r4, #20]
 800d70c:	4283      	cmp	r3, r0
 800d70e:	dc05      	bgt.n	800d71c <__swbuf_r+0x4e>
 800d710:	4621      	mov	r1, r4
 800d712:	4628      	mov	r0, r5
 800d714:	f000 f9ca 	bl	800daac <_fflush_r>
 800d718:	2800      	cmp	r0, #0
 800d71a:	d1ed      	bne.n	800d6f8 <__swbuf_r+0x2a>
 800d71c:	68a3      	ldr	r3, [r4, #8]
 800d71e:	3b01      	subs	r3, #1
 800d720:	60a3      	str	r3, [r4, #8]
 800d722:	6823      	ldr	r3, [r4, #0]
 800d724:	1c5a      	adds	r2, r3, #1
 800d726:	6022      	str	r2, [r4, #0]
 800d728:	701e      	strb	r6, [r3, #0]
 800d72a:	1c43      	adds	r3, r0, #1
 800d72c:	6962      	ldr	r2, [r4, #20]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d004      	beq.n	800d73c <__swbuf_r+0x6e>
 800d732:	89a3      	ldrh	r3, [r4, #12]
 800d734:	07db      	lsls	r3, r3, #31
 800d736:	d5e1      	bpl.n	800d6fc <__swbuf_r+0x2e>
 800d738:	2e0a      	cmp	r6, #10
 800d73a:	d1df      	bne.n	800d6fc <__swbuf_r+0x2e>
 800d73c:	4621      	mov	r1, r4
 800d73e:	4628      	mov	r0, r5
 800d740:	f000 f9b4 	bl	800daac <_fflush_r>
 800d744:	2800      	cmp	r0, #0
 800d746:	d0d9      	beq.n	800d6fc <__swbuf_r+0x2e>
 800d748:	e7d6      	b.n	800d6f8 <__swbuf_r+0x2a>
	...

0800d74c <__swsetup_r>:
 800d74c:	b538      	push	{r3, r4, r5, lr}
 800d74e:	4b29      	ldr	r3, [pc, #164]	@ (800d7f4 <__swsetup_r+0xa8>)
 800d750:	4605      	mov	r5, r0
 800d752:	460c      	mov	r4, r1
 800d754:	6818      	ldr	r0, [r3, #0]
 800d756:	b118      	cbz	r0, 800d760 <__swsetup_r+0x14>
 800d758:	6a03      	ldr	r3, [r0, #32]
 800d75a:	b90b      	cbnz	r3, 800d760 <__swsetup_r+0x14>
 800d75c:	f7ff fee0 	bl	800d520 <__sinit>
 800d760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d764:	0719      	lsls	r1, r3, #28
 800d766:	d422      	bmi.n	800d7ae <__swsetup_r+0x62>
 800d768:	06da      	lsls	r2, r3, #27
 800d76a:	d407      	bmi.n	800d77c <__swsetup_r+0x30>
 800d76c:	2209      	movs	r2, #9
 800d76e:	602a      	str	r2, [r5, #0]
 800d770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d774:	f04f 30ff 	mov.w	r0, #4294967295
 800d778:	81a3      	strh	r3, [r4, #12]
 800d77a:	e033      	b.n	800d7e4 <__swsetup_r+0x98>
 800d77c:	0758      	lsls	r0, r3, #29
 800d77e:	d512      	bpl.n	800d7a6 <__swsetup_r+0x5a>
 800d780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d782:	b141      	cbz	r1, 800d796 <__swsetup_r+0x4a>
 800d784:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d788:	4299      	cmp	r1, r3
 800d78a:	d002      	beq.n	800d792 <__swsetup_r+0x46>
 800d78c:	4628      	mov	r0, r5
 800d78e:	f000 f8bf 	bl	800d910 <_free_r>
 800d792:	2300      	movs	r3, #0
 800d794:	6363      	str	r3, [r4, #52]	@ 0x34
 800d796:	89a3      	ldrh	r3, [r4, #12]
 800d798:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d79c:	81a3      	strh	r3, [r4, #12]
 800d79e:	2300      	movs	r3, #0
 800d7a0:	6063      	str	r3, [r4, #4]
 800d7a2:	6923      	ldr	r3, [r4, #16]
 800d7a4:	6023      	str	r3, [r4, #0]
 800d7a6:	89a3      	ldrh	r3, [r4, #12]
 800d7a8:	f043 0308 	orr.w	r3, r3, #8
 800d7ac:	81a3      	strh	r3, [r4, #12]
 800d7ae:	6923      	ldr	r3, [r4, #16]
 800d7b0:	b94b      	cbnz	r3, 800d7c6 <__swsetup_r+0x7a>
 800d7b2:	89a3      	ldrh	r3, [r4, #12]
 800d7b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d7b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7bc:	d003      	beq.n	800d7c6 <__swsetup_r+0x7a>
 800d7be:	4621      	mov	r1, r4
 800d7c0:	4628      	mov	r0, r5
 800d7c2:	f000 f9c0 	bl	800db46 <__smakebuf_r>
 800d7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ca:	f013 0201 	ands.w	r2, r3, #1
 800d7ce:	d00a      	beq.n	800d7e6 <__swsetup_r+0x9a>
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	60a2      	str	r2, [r4, #8]
 800d7d4:	6962      	ldr	r2, [r4, #20]
 800d7d6:	4252      	negs	r2, r2
 800d7d8:	61a2      	str	r2, [r4, #24]
 800d7da:	6922      	ldr	r2, [r4, #16]
 800d7dc:	b942      	cbnz	r2, 800d7f0 <__swsetup_r+0xa4>
 800d7de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d7e2:	d1c5      	bne.n	800d770 <__swsetup_r+0x24>
 800d7e4:	bd38      	pop	{r3, r4, r5, pc}
 800d7e6:	0799      	lsls	r1, r3, #30
 800d7e8:	bf58      	it	pl
 800d7ea:	6962      	ldrpl	r2, [r4, #20]
 800d7ec:	60a2      	str	r2, [r4, #8]
 800d7ee:	e7f4      	b.n	800d7da <__swsetup_r+0x8e>
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	e7f7      	b.n	800d7e4 <__swsetup_r+0x98>
 800d7f4:	20000024 	.word	0x20000024

0800d7f8 <memset>:
 800d7f8:	4402      	add	r2, r0
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d100      	bne.n	800d802 <memset+0xa>
 800d800:	4770      	bx	lr
 800d802:	f803 1b01 	strb.w	r1, [r3], #1
 800d806:	e7f9      	b.n	800d7fc <memset+0x4>

0800d808 <_close_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	2300      	movs	r3, #0
 800d80c:	4d05      	ldr	r5, [pc, #20]	@ (800d824 <_close_r+0x1c>)
 800d80e:	4604      	mov	r4, r0
 800d810:	4608      	mov	r0, r1
 800d812:	602b      	str	r3, [r5, #0]
 800d814:	f7f6 fa19 	bl	8003c4a <_close>
 800d818:	1c43      	adds	r3, r0, #1
 800d81a:	d102      	bne.n	800d822 <_close_r+0x1a>
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	b103      	cbz	r3, 800d822 <_close_r+0x1a>
 800d820:	6023      	str	r3, [r4, #0]
 800d822:	bd38      	pop	{r3, r4, r5, pc}
 800d824:	200008fc 	.word	0x200008fc

0800d828 <_lseek_r>:
 800d828:	b538      	push	{r3, r4, r5, lr}
 800d82a:	4604      	mov	r4, r0
 800d82c:	4d06      	ldr	r5, [pc, #24]	@ (800d848 <_lseek_r+0x20>)
 800d82e:	4608      	mov	r0, r1
 800d830:	4611      	mov	r1, r2
 800d832:	2200      	movs	r2, #0
 800d834:	602a      	str	r2, [r5, #0]
 800d836:	461a      	mov	r2, r3
 800d838:	f7f6 fa2e 	bl	8003c98 <_lseek>
 800d83c:	1c43      	adds	r3, r0, #1
 800d83e:	d102      	bne.n	800d846 <_lseek_r+0x1e>
 800d840:	682b      	ldr	r3, [r5, #0]
 800d842:	b103      	cbz	r3, 800d846 <_lseek_r+0x1e>
 800d844:	6023      	str	r3, [r4, #0]
 800d846:	bd38      	pop	{r3, r4, r5, pc}
 800d848:	200008fc 	.word	0x200008fc

0800d84c <_read_r>:
 800d84c:	b538      	push	{r3, r4, r5, lr}
 800d84e:	4604      	mov	r4, r0
 800d850:	4d06      	ldr	r5, [pc, #24]	@ (800d86c <_read_r+0x20>)
 800d852:	4608      	mov	r0, r1
 800d854:	4611      	mov	r1, r2
 800d856:	2200      	movs	r2, #0
 800d858:	602a      	str	r2, [r5, #0]
 800d85a:	461a      	mov	r2, r3
 800d85c:	f7f6 f9bc 	bl	8003bd8 <_read>
 800d860:	1c43      	adds	r3, r0, #1
 800d862:	d102      	bne.n	800d86a <_read_r+0x1e>
 800d864:	682b      	ldr	r3, [r5, #0]
 800d866:	b103      	cbz	r3, 800d86a <_read_r+0x1e>
 800d868:	6023      	str	r3, [r4, #0]
 800d86a:	bd38      	pop	{r3, r4, r5, pc}
 800d86c:	200008fc 	.word	0x200008fc

0800d870 <_sbrk_r>:
 800d870:	b538      	push	{r3, r4, r5, lr}
 800d872:	2300      	movs	r3, #0
 800d874:	4d05      	ldr	r5, [pc, #20]	@ (800d88c <_sbrk_r+0x1c>)
 800d876:	4604      	mov	r4, r0
 800d878:	4608      	mov	r0, r1
 800d87a:	602b      	str	r3, [r5, #0]
 800d87c:	f7f6 fa1a 	bl	8003cb4 <_sbrk>
 800d880:	1c43      	adds	r3, r0, #1
 800d882:	d102      	bne.n	800d88a <_sbrk_r+0x1a>
 800d884:	682b      	ldr	r3, [r5, #0]
 800d886:	b103      	cbz	r3, 800d88a <_sbrk_r+0x1a>
 800d888:	6023      	str	r3, [r4, #0]
 800d88a:	bd38      	pop	{r3, r4, r5, pc}
 800d88c:	200008fc 	.word	0x200008fc

0800d890 <_write_r>:
 800d890:	b538      	push	{r3, r4, r5, lr}
 800d892:	4604      	mov	r4, r0
 800d894:	4d06      	ldr	r5, [pc, #24]	@ (800d8b0 <_write_r+0x20>)
 800d896:	4608      	mov	r0, r1
 800d898:	4611      	mov	r1, r2
 800d89a:	2200      	movs	r2, #0
 800d89c:	602a      	str	r2, [r5, #0]
 800d89e:	461a      	mov	r2, r3
 800d8a0:	f7f6 f9b7 	bl	8003c12 <_write>
 800d8a4:	1c43      	adds	r3, r0, #1
 800d8a6:	d102      	bne.n	800d8ae <_write_r+0x1e>
 800d8a8:	682b      	ldr	r3, [r5, #0]
 800d8aa:	b103      	cbz	r3, 800d8ae <_write_r+0x1e>
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	bd38      	pop	{r3, r4, r5, pc}
 800d8b0:	200008fc 	.word	0x200008fc

0800d8b4 <__errno>:
 800d8b4:	4b01      	ldr	r3, [pc, #4]	@ (800d8bc <__errno+0x8>)
 800d8b6:	6818      	ldr	r0, [r3, #0]
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop
 800d8bc:	20000024 	.word	0x20000024

0800d8c0 <__libc_init_array>:
 800d8c0:	b570      	push	{r4, r5, r6, lr}
 800d8c2:	4d0d      	ldr	r5, [pc, #52]	@ (800d8f8 <__libc_init_array+0x38>)
 800d8c4:	2600      	movs	r6, #0
 800d8c6:	4c0d      	ldr	r4, [pc, #52]	@ (800d8fc <__libc_init_array+0x3c>)
 800d8c8:	1b64      	subs	r4, r4, r5
 800d8ca:	10a4      	asrs	r4, r4, #2
 800d8cc:	42a6      	cmp	r6, r4
 800d8ce:	d109      	bne.n	800d8e4 <__libc_init_array+0x24>
 800d8d0:	4d0b      	ldr	r5, [pc, #44]	@ (800d900 <__libc_init_array+0x40>)
 800d8d2:	2600      	movs	r6, #0
 800d8d4:	4c0b      	ldr	r4, [pc, #44]	@ (800d904 <__libc_init_array+0x44>)
 800d8d6:	f001 fbeb 	bl	800f0b0 <_init>
 800d8da:	1b64      	subs	r4, r4, r5
 800d8dc:	10a4      	asrs	r4, r4, #2
 800d8de:	42a6      	cmp	r6, r4
 800d8e0:	d105      	bne.n	800d8ee <__libc_init_array+0x2e>
 800d8e2:	bd70      	pop	{r4, r5, r6, pc}
 800d8e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8e8:	3601      	adds	r6, #1
 800d8ea:	4798      	blx	r3
 800d8ec:	e7ee      	b.n	800d8cc <__libc_init_array+0xc>
 800d8ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8f2:	3601      	adds	r6, #1
 800d8f4:	4798      	blx	r3
 800d8f6:	e7f2      	b.n	800d8de <__libc_init_array+0x1e>
 800d8f8:	0800f218 	.word	0x0800f218
 800d8fc:	0800f218 	.word	0x0800f218
 800d900:	0800f218 	.word	0x0800f218
 800d904:	0800f21c 	.word	0x0800f21c

0800d908 <__retarget_lock_init_recursive>:
 800d908:	4770      	bx	lr

0800d90a <__retarget_lock_acquire_recursive>:
 800d90a:	4770      	bx	lr

0800d90c <__retarget_lock_release_recursive>:
 800d90c:	4770      	bx	lr
	...

0800d910 <_free_r>:
 800d910:	b538      	push	{r3, r4, r5, lr}
 800d912:	4605      	mov	r5, r0
 800d914:	2900      	cmp	r1, #0
 800d916:	d041      	beq.n	800d99c <_free_r+0x8c>
 800d918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d91c:	1f0c      	subs	r4, r1, #4
 800d91e:	2b00      	cmp	r3, #0
 800d920:	bfb8      	it	lt
 800d922:	18e4      	addlt	r4, r4, r3
 800d924:	f7ff fd64 	bl	800d3f0 <__malloc_lock>
 800d928:	4a1d      	ldr	r2, [pc, #116]	@ (800d9a0 <_free_r+0x90>)
 800d92a:	6813      	ldr	r3, [r2, #0]
 800d92c:	b933      	cbnz	r3, 800d93c <_free_r+0x2c>
 800d92e:	6063      	str	r3, [r4, #4]
 800d930:	6014      	str	r4, [r2, #0]
 800d932:	4628      	mov	r0, r5
 800d934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d938:	f7ff bd60 	b.w	800d3fc <__malloc_unlock>
 800d93c:	42a3      	cmp	r3, r4
 800d93e:	d908      	bls.n	800d952 <_free_r+0x42>
 800d940:	6820      	ldr	r0, [r4, #0]
 800d942:	1821      	adds	r1, r4, r0
 800d944:	428b      	cmp	r3, r1
 800d946:	bf01      	itttt	eq
 800d948:	6819      	ldreq	r1, [r3, #0]
 800d94a:	685b      	ldreq	r3, [r3, #4]
 800d94c:	1809      	addeq	r1, r1, r0
 800d94e:	6021      	streq	r1, [r4, #0]
 800d950:	e7ed      	b.n	800d92e <_free_r+0x1e>
 800d952:	461a      	mov	r2, r3
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	b10b      	cbz	r3, 800d95c <_free_r+0x4c>
 800d958:	42a3      	cmp	r3, r4
 800d95a:	d9fa      	bls.n	800d952 <_free_r+0x42>
 800d95c:	6811      	ldr	r1, [r2, #0]
 800d95e:	1850      	adds	r0, r2, r1
 800d960:	42a0      	cmp	r0, r4
 800d962:	d10b      	bne.n	800d97c <_free_r+0x6c>
 800d964:	6820      	ldr	r0, [r4, #0]
 800d966:	4401      	add	r1, r0
 800d968:	1850      	adds	r0, r2, r1
 800d96a:	6011      	str	r1, [r2, #0]
 800d96c:	4283      	cmp	r3, r0
 800d96e:	d1e0      	bne.n	800d932 <_free_r+0x22>
 800d970:	6818      	ldr	r0, [r3, #0]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	4408      	add	r0, r1
 800d976:	6053      	str	r3, [r2, #4]
 800d978:	6010      	str	r0, [r2, #0]
 800d97a:	e7da      	b.n	800d932 <_free_r+0x22>
 800d97c:	d902      	bls.n	800d984 <_free_r+0x74>
 800d97e:	230c      	movs	r3, #12
 800d980:	602b      	str	r3, [r5, #0]
 800d982:	e7d6      	b.n	800d932 <_free_r+0x22>
 800d984:	6820      	ldr	r0, [r4, #0]
 800d986:	1821      	adds	r1, r4, r0
 800d988:	428b      	cmp	r3, r1
 800d98a:	bf02      	ittt	eq
 800d98c:	6819      	ldreq	r1, [r3, #0]
 800d98e:	685b      	ldreq	r3, [r3, #4]
 800d990:	1809      	addeq	r1, r1, r0
 800d992:	6063      	str	r3, [r4, #4]
 800d994:	bf08      	it	eq
 800d996:	6021      	streq	r1, [r4, #0]
 800d998:	6054      	str	r4, [r2, #4]
 800d99a:	e7ca      	b.n	800d932 <_free_r+0x22>
 800d99c:	bd38      	pop	{r3, r4, r5, pc}
 800d99e:	bf00      	nop
 800d9a0:	200007bc 	.word	0x200007bc

0800d9a4 <__sflush_r>:
 800d9a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ac:	0716      	lsls	r6, r2, #28
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	460c      	mov	r4, r1
 800d9b2:	d454      	bmi.n	800da5e <__sflush_r+0xba>
 800d9b4:	684b      	ldr	r3, [r1, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	dc02      	bgt.n	800d9c0 <__sflush_r+0x1c>
 800d9ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	dd48      	ble.n	800da52 <__sflush_r+0xae>
 800d9c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9c2:	2e00      	cmp	r6, #0
 800d9c4:	d045      	beq.n	800da52 <__sflush_r+0xae>
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d9cc:	682f      	ldr	r7, [r5, #0]
 800d9ce:	6a21      	ldr	r1, [r4, #32]
 800d9d0:	602b      	str	r3, [r5, #0]
 800d9d2:	d030      	beq.n	800da36 <__sflush_r+0x92>
 800d9d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d9d6:	89a3      	ldrh	r3, [r4, #12]
 800d9d8:	0759      	lsls	r1, r3, #29
 800d9da:	d505      	bpl.n	800d9e8 <__sflush_r+0x44>
 800d9dc:	6863      	ldr	r3, [r4, #4]
 800d9de:	1ad2      	subs	r2, r2, r3
 800d9e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d9e2:	b10b      	cbz	r3, 800d9e8 <__sflush_r+0x44>
 800d9e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d9e6:	1ad2      	subs	r2, r2, r3
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9ec:	6a21      	ldr	r1, [r4, #32]
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	47b0      	blx	r6
 800d9f2:	1c43      	adds	r3, r0, #1
 800d9f4:	89a3      	ldrh	r3, [r4, #12]
 800d9f6:	d106      	bne.n	800da06 <__sflush_r+0x62>
 800d9f8:	6829      	ldr	r1, [r5, #0]
 800d9fa:	291d      	cmp	r1, #29
 800d9fc:	d82b      	bhi.n	800da56 <__sflush_r+0xb2>
 800d9fe:	4a2a      	ldr	r2, [pc, #168]	@ (800daa8 <__sflush_r+0x104>)
 800da00:	410a      	asrs	r2, r1
 800da02:	07d6      	lsls	r6, r2, #31
 800da04:	d427      	bmi.n	800da56 <__sflush_r+0xb2>
 800da06:	2200      	movs	r2, #0
 800da08:	04d9      	lsls	r1, r3, #19
 800da0a:	6062      	str	r2, [r4, #4]
 800da0c:	6922      	ldr	r2, [r4, #16]
 800da0e:	6022      	str	r2, [r4, #0]
 800da10:	d504      	bpl.n	800da1c <__sflush_r+0x78>
 800da12:	1c42      	adds	r2, r0, #1
 800da14:	d101      	bne.n	800da1a <__sflush_r+0x76>
 800da16:	682b      	ldr	r3, [r5, #0]
 800da18:	b903      	cbnz	r3, 800da1c <__sflush_r+0x78>
 800da1a:	6560      	str	r0, [r4, #84]	@ 0x54
 800da1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da1e:	602f      	str	r7, [r5, #0]
 800da20:	b1b9      	cbz	r1, 800da52 <__sflush_r+0xae>
 800da22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da26:	4299      	cmp	r1, r3
 800da28:	d002      	beq.n	800da30 <__sflush_r+0x8c>
 800da2a:	4628      	mov	r0, r5
 800da2c:	f7ff ff70 	bl	800d910 <_free_r>
 800da30:	2300      	movs	r3, #0
 800da32:	6363      	str	r3, [r4, #52]	@ 0x34
 800da34:	e00d      	b.n	800da52 <__sflush_r+0xae>
 800da36:	2301      	movs	r3, #1
 800da38:	4628      	mov	r0, r5
 800da3a:	47b0      	blx	r6
 800da3c:	4602      	mov	r2, r0
 800da3e:	1c50      	adds	r0, r2, #1
 800da40:	d1c9      	bne.n	800d9d6 <__sflush_r+0x32>
 800da42:	682b      	ldr	r3, [r5, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d0c6      	beq.n	800d9d6 <__sflush_r+0x32>
 800da48:	2b1d      	cmp	r3, #29
 800da4a:	d001      	beq.n	800da50 <__sflush_r+0xac>
 800da4c:	2b16      	cmp	r3, #22
 800da4e:	d11d      	bne.n	800da8c <__sflush_r+0xe8>
 800da50:	602f      	str	r7, [r5, #0]
 800da52:	2000      	movs	r0, #0
 800da54:	e021      	b.n	800da9a <__sflush_r+0xf6>
 800da56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da5a:	b21b      	sxth	r3, r3
 800da5c:	e01a      	b.n	800da94 <__sflush_r+0xf0>
 800da5e:	690f      	ldr	r7, [r1, #16]
 800da60:	2f00      	cmp	r7, #0
 800da62:	d0f6      	beq.n	800da52 <__sflush_r+0xae>
 800da64:	0793      	lsls	r3, r2, #30
 800da66:	680e      	ldr	r6, [r1, #0]
 800da68:	600f      	str	r7, [r1, #0]
 800da6a:	bf0c      	ite	eq
 800da6c:	694b      	ldreq	r3, [r1, #20]
 800da6e:	2300      	movne	r3, #0
 800da70:	eba6 0807 	sub.w	r8, r6, r7
 800da74:	608b      	str	r3, [r1, #8]
 800da76:	f1b8 0f00 	cmp.w	r8, #0
 800da7a:	ddea      	ble.n	800da52 <__sflush_r+0xae>
 800da7c:	4643      	mov	r3, r8
 800da7e:	463a      	mov	r2, r7
 800da80:	6a21      	ldr	r1, [r4, #32]
 800da82:	4628      	mov	r0, r5
 800da84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da86:	47b0      	blx	r6
 800da88:	2800      	cmp	r0, #0
 800da8a:	dc08      	bgt.n	800da9e <__sflush_r+0xfa>
 800da8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da94:	f04f 30ff 	mov.w	r0, #4294967295
 800da98:	81a3      	strh	r3, [r4, #12]
 800da9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da9e:	4407      	add	r7, r0
 800daa0:	eba8 0800 	sub.w	r8, r8, r0
 800daa4:	e7e7      	b.n	800da76 <__sflush_r+0xd2>
 800daa6:	bf00      	nop
 800daa8:	dfbffffe 	.word	0xdfbffffe

0800daac <_fflush_r>:
 800daac:	b538      	push	{r3, r4, r5, lr}
 800daae:	690b      	ldr	r3, [r1, #16]
 800dab0:	4605      	mov	r5, r0
 800dab2:	460c      	mov	r4, r1
 800dab4:	b913      	cbnz	r3, 800dabc <_fflush_r+0x10>
 800dab6:	2500      	movs	r5, #0
 800dab8:	4628      	mov	r0, r5
 800daba:	bd38      	pop	{r3, r4, r5, pc}
 800dabc:	b118      	cbz	r0, 800dac6 <_fflush_r+0x1a>
 800dabe:	6a03      	ldr	r3, [r0, #32]
 800dac0:	b90b      	cbnz	r3, 800dac6 <_fflush_r+0x1a>
 800dac2:	f7ff fd2d 	bl	800d520 <__sinit>
 800dac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d0f3      	beq.n	800dab6 <_fflush_r+0xa>
 800dace:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dad0:	07d0      	lsls	r0, r2, #31
 800dad2:	d404      	bmi.n	800dade <_fflush_r+0x32>
 800dad4:	0599      	lsls	r1, r3, #22
 800dad6:	d402      	bmi.n	800dade <_fflush_r+0x32>
 800dad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dada:	f7ff ff16 	bl	800d90a <__retarget_lock_acquire_recursive>
 800dade:	4628      	mov	r0, r5
 800dae0:	4621      	mov	r1, r4
 800dae2:	f7ff ff5f 	bl	800d9a4 <__sflush_r>
 800dae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dae8:	4605      	mov	r5, r0
 800daea:	07da      	lsls	r2, r3, #31
 800daec:	d4e4      	bmi.n	800dab8 <_fflush_r+0xc>
 800daee:	89a3      	ldrh	r3, [r4, #12]
 800daf0:	059b      	lsls	r3, r3, #22
 800daf2:	d4e1      	bmi.n	800dab8 <_fflush_r+0xc>
 800daf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800daf6:	f7ff ff09 	bl	800d90c <__retarget_lock_release_recursive>
 800dafa:	e7dd      	b.n	800dab8 <_fflush_r+0xc>

0800dafc <__swhatbuf_r>:
 800dafc:	b570      	push	{r4, r5, r6, lr}
 800dafe:	460c      	mov	r4, r1
 800db00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db04:	b096      	sub	sp, #88	@ 0x58
 800db06:	4615      	mov	r5, r2
 800db08:	2900      	cmp	r1, #0
 800db0a:	461e      	mov	r6, r3
 800db0c:	da0c      	bge.n	800db28 <__swhatbuf_r+0x2c>
 800db0e:	89a3      	ldrh	r3, [r4, #12]
 800db10:	2100      	movs	r1, #0
 800db12:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db16:	bf14      	ite	ne
 800db18:	2340      	movne	r3, #64	@ 0x40
 800db1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db1e:	2000      	movs	r0, #0
 800db20:	6031      	str	r1, [r6, #0]
 800db22:	602b      	str	r3, [r5, #0]
 800db24:	b016      	add	sp, #88	@ 0x58
 800db26:	bd70      	pop	{r4, r5, r6, pc}
 800db28:	466a      	mov	r2, sp
 800db2a:	f000 f849 	bl	800dbc0 <_fstat_r>
 800db2e:	2800      	cmp	r0, #0
 800db30:	dbed      	blt.n	800db0e <__swhatbuf_r+0x12>
 800db32:	9901      	ldr	r1, [sp, #4]
 800db34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db3c:	4259      	negs	r1, r3
 800db3e:	4159      	adcs	r1, r3
 800db40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db44:	e7eb      	b.n	800db1e <__swhatbuf_r+0x22>

0800db46 <__smakebuf_r>:
 800db46:	898b      	ldrh	r3, [r1, #12]
 800db48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db4a:	079d      	lsls	r5, r3, #30
 800db4c:	4606      	mov	r6, r0
 800db4e:	460c      	mov	r4, r1
 800db50:	d507      	bpl.n	800db62 <__smakebuf_r+0x1c>
 800db52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db56:	6023      	str	r3, [r4, #0]
 800db58:	6123      	str	r3, [r4, #16]
 800db5a:	2301      	movs	r3, #1
 800db5c:	6163      	str	r3, [r4, #20]
 800db5e:	b003      	add	sp, #12
 800db60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db62:	ab01      	add	r3, sp, #4
 800db64:	466a      	mov	r2, sp
 800db66:	f7ff ffc9 	bl	800dafc <__swhatbuf_r>
 800db6a:	9f00      	ldr	r7, [sp, #0]
 800db6c:	4605      	mov	r5, r0
 800db6e:	4630      	mov	r0, r6
 800db70:	4639      	mov	r1, r7
 800db72:	f7ff fbbd 	bl	800d2f0 <_malloc_r>
 800db76:	b948      	cbnz	r0, 800db8c <__smakebuf_r+0x46>
 800db78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db7c:	059a      	lsls	r2, r3, #22
 800db7e:	d4ee      	bmi.n	800db5e <__smakebuf_r+0x18>
 800db80:	f023 0303 	bic.w	r3, r3, #3
 800db84:	f043 0302 	orr.w	r3, r3, #2
 800db88:	81a3      	strh	r3, [r4, #12]
 800db8a:	e7e2      	b.n	800db52 <__smakebuf_r+0xc>
 800db8c:	89a3      	ldrh	r3, [r4, #12]
 800db8e:	6020      	str	r0, [r4, #0]
 800db90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db94:	81a3      	strh	r3, [r4, #12]
 800db96:	9b01      	ldr	r3, [sp, #4]
 800db98:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db9c:	b15b      	cbz	r3, 800dbb6 <__smakebuf_r+0x70>
 800db9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dba2:	4630      	mov	r0, r6
 800dba4:	f000 f81e 	bl	800dbe4 <_isatty_r>
 800dba8:	b128      	cbz	r0, 800dbb6 <__smakebuf_r+0x70>
 800dbaa:	89a3      	ldrh	r3, [r4, #12]
 800dbac:	f023 0303 	bic.w	r3, r3, #3
 800dbb0:	f043 0301 	orr.w	r3, r3, #1
 800dbb4:	81a3      	strh	r3, [r4, #12]
 800dbb6:	89a3      	ldrh	r3, [r4, #12]
 800dbb8:	431d      	orrs	r5, r3
 800dbba:	81a5      	strh	r5, [r4, #12]
 800dbbc:	e7cf      	b.n	800db5e <__smakebuf_r+0x18>
	...

0800dbc0 <_fstat_r>:
 800dbc0:	b538      	push	{r3, r4, r5, lr}
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	4d06      	ldr	r5, [pc, #24]	@ (800dbe0 <_fstat_r+0x20>)
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	4608      	mov	r0, r1
 800dbca:	4611      	mov	r1, r2
 800dbcc:	602b      	str	r3, [r5, #0]
 800dbce:	f7f6 f848 	bl	8003c62 <_fstat>
 800dbd2:	1c43      	adds	r3, r0, #1
 800dbd4:	d102      	bne.n	800dbdc <_fstat_r+0x1c>
 800dbd6:	682b      	ldr	r3, [r5, #0]
 800dbd8:	b103      	cbz	r3, 800dbdc <_fstat_r+0x1c>
 800dbda:	6023      	str	r3, [r4, #0]
 800dbdc:	bd38      	pop	{r3, r4, r5, pc}
 800dbde:	bf00      	nop
 800dbe0:	200008fc 	.word	0x200008fc

0800dbe4 <_isatty_r>:
 800dbe4:	b538      	push	{r3, r4, r5, lr}
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	4d05      	ldr	r5, [pc, #20]	@ (800dc00 <_isatty_r+0x1c>)
 800dbea:	4604      	mov	r4, r0
 800dbec:	4608      	mov	r0, r1
 800dbee:	602b      	str	r3, [r5, #0]
 800dbf0:	f7f6 f847 	bl	8003c82 <_isatty>
 800dbf4:	1c43      	adds	r3, r0, #1
 800dbf6:	d102      	bne.n	800dbfe <_isatty_r+0x1a>
 800dbf8:	682b      	ldr	r3, [r5, #0]
 800dbfa:	b103      	cbz	r3, 800dbfe <_isatty_r+0x1a>
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	bd38      	pop	{r3, r4, r5, pc}
 800dc00:	200008fc 	.word	0x200008fc
 800dc04:	00000000 	.word	0x00000000

0800dc08 <log>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	ec55 4b10 	vmov	r4, r5, d0
 800dc0e:	ed2d 8b02 	vpush	{d8}
 800dc12:	f000 fa09 	bl	800e028 <__ieee754_log>
 800dc16:	4622      	mov	r2, r4
 800dc18:	462b      	mov	r3, r5
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	eeb0 8a40 	vmov.f32	s16, s0
 800dc22:	eef0 8a60 	vmov.f32	s17, s1
 800dc26:	f7f2 ff89 	bl	8000b3c <__aeabi_dcmpun>
 800dc2a:	b998      	cbnz	r0, 800dc54 <log+0x4c>
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	2300      	movs	r3, #0
 800dc30:	4620      	mov	r0, r4
 800dc32:	4629      	mov	r1, r5
 800dc34:	f7f2 ff78 	bl	8000b28 <__aeabi_dcmpgt>
 800dc38:	b960      	cbnz	r0, 800dc54 <log+0x4c>
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	4620      	mov	r0, r4
 800dc40:	4629      	mov	r1, r5
 800dc42:	f7f2 ff49 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc46:	b160      	cbz	r0, 800dc62 <log+0x5a>
 800dc48:	f7ff fe34 	bl	800d8b4 <__errno>
 800dc4c:	2322      	movs	r3, #34	@ 0x22
 800dc4e:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800dc78 <log+0x70>
 800dc52:	6003      	str	r3, [r0, #0]
 800dc54:	eeb0 0a48 	vmov.f32	s0, s16
 800dc58:	eef0 0a68 	vmov.f32	s1, s17
 800dc5c:	ecbd 8b02 	vpop	{d8}
 800dc60:	bd38      	pop	{r3, r4, r5, pc}
 800dc62:	f7ff fe27 	bl	800d8b4 <__errno>
 800dc66:	2321      	movs	r3, #33	@ 0x21
 800dc68:	ecbd 8b02 	vpop	{d8}
 800dc6c:	6003      	str	r3, [r0, #0]
 800dc6e:	4804      	ldr	r0, [pc, #16]	@ (800dc80 <log+0x78>)
 800dc70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc74:	f000 b8f0 	b.w	800de58 <nan>
 800dc78:	00000000 	.word	0x00000000
 800dc7c:	fff00000 	.word	0xfff00000
 800dc80:	0800f1d8 	.word	0x0800f1d8
 800dc84:	00000000 	.word	0x00000000

0800dc88 <log10>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	ec55 4b10 	vmov	r4, r5, d0
 800dc8e:	ed2d 8b02 	vpush	{d8}
 800dc92:	f000 fb7d 	bl	800e390 <__ieee754_log10>
 800dc96:	4622      	mov	r2, r4
 800dc98:	462b      	mov	r3, r5
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	eeb0 8a40 	vmov.f32	s16, s0
 800dca2:	eef0 8a60 	vmov.f32	s17, s1
 800dca6:	f7f2 ff49 	bl	8000b3c <__aeabi_dcmpun>
 800dcaa:	b998      	cbnz	r0, 800dcd4 <log10+0x4c>
 800dcac:	2200      	movs	r2, #0
 800dcae:	2300      	movs	r3, #0
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	4629      	mov	r1, r5
 800dcb4:	f7f2 ff24 	bl	8000b00 <__aeabi_dcmple>
 800dcb8:	b160      	cbz	r0, 800dcd4 <log10+0x4c>
 800dcba:	2200      	movs	r2, #0
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	4629      	mov	r1, r5
 800dcc2:	f7f2 ff09 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcc6:	b160      	cbz	r0, 800dce2 <log10+0x5a>
 800dcc8:	f7ff fdf4 	bl	800d8b4 <__errno>
 800dccc:	2322      	movs	r3, #34	@ 0x22
 800dcce:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800dcf8 <log10+0x70>
 800dcd2:	6003      	str	r3, [r0, #0]
 800dcd4:	eeb0 0a48 	vmov.f32	s0, s16
 800dcd8:	eef0 0a68 	vmov.f32	s1, s17
 800dcdc:	ecbd 8b02 	vpop	{d8}
 800dce0:	bd38      	pop	{r3, r4, r5, pc}
 800dce2:	f7ff fde7 	bl	800d8b4 <__errno>
 800dce6:	2321      	movs	r3, #33	@ 0x21
 800dce8:	ecbd 8b02 	vpop	{d8}
 800dcec:	6003      	str	r3, [r0, #0]
 800dcee:	4804      	ldr	r0, [pc, #16]	@ (800dd00 <log10+0x78>)
 800dcf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcf4:	f000 b8b0 	b.w	800de58 <nan>
 800dcf8:	00000000 	.word	0x00000000
 800dcfc:	fff00000 	.word	0xfff00000
 800dd00:	0800f1d8 	.word	0x0800f1d8

0800dd04 <pow>:
 800dd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd06:	ec55 4b11 	vmov	r4, r5, d1
 800dd0a:	ed2d 8b02 	vpush	{d8}
 800dd0e:	eeb0 8a40 	vmov.f32	s16, s0
 800dd12:	eef0 8a60 	vmov.f32	s17, s1
 800dd16:	f000 fbc7 	bl	800e4a8 <__ieee754_pow>
 800dd1a:	4622      	mov	r2, r4
 800dd1c:	462b      	mov	r3, r5
 800dd1e:	4620      	mov	r0, r4
 800dd20:	4629      	mov	r1, r5
 800dd22:	ec57 6b10 	vmov	r6, r7, d0
 800dd26:	f7f2 ff09 	bl	8000b3c <__aeabi_dcmpun>
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d13b      	bne.n	800dda6 <pow+0xa2>
 800dd2e:	2200      	movs	r2, #0
 800dd30:	2300      	movs	r3, #0
 800dd32:	ec51 0b18 	vmov	r0, r1, d8
 800dd36:	f7f2 fecf 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd3a:	b1b8      	cbz	r0, 800dd6c <pow+0x68>
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	2300      	movs	r3, #0
 800dd40:	4620      	mov	r0, r4
 800dd42:	4629      	mov	r1, r5
 800dd44:	f7f2 fec8 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d146      	bne.n	800ddda <pow+0xd6>
 800dd4c:	ec45 4b10 	vmov	d0, r4, r5
 800dd50:	f000 f874 	bl	800de3c <finite>
 800dd54:	b338      	cbz	r0, 800dda6 <pow+0xa2>
 800dd56:	2200      	movs	r2, #0
 800dd58:	2300      	movs	r3, #0
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	4629      	mov	r1, r5
 800dd5e:	f7f2 fec5 	bl	8000aec <__aeabi_dcmplt>
 800dd62:	b300      	cbz	r0, 800dda6 <pow+0xa2>
 800dd64:	f7ff fda6 	bl	800d8b4 <__errno>
 800dd68:	2322      	movs	r3, #34	@ 0x22
 800dd6a:	e01b      	b.n	800dda4 <pow+0xa0>
 800dd6c:	ec47 6b10 	vmov	d0, r6, r7
 800dd70:	f000 f864 	bl	800de3c <finite>
 800dd74:	b9e0      	cbnz	r0, 800ddb0 <pow+0xac>
 800dd76:	eeb0 0a48 	vmov.f32	s0, s16
 800dd7a:	eef0 0a68 	vmov.f32	s1, s17
 800dd7e:	f000 f85d 	bl	800de3c <finite>
 800dd82:	b1a8      	cbz	r0, 800ddb0 <pow+0xac>
 800dd84:	ec45 4b10 	vmov	d0, r4, r5
 800dd88:	f000 f858 	bl	800de3c <finite>
 800dd8c:	b180      	cbz	r0, 800ddb0 <pow+0xac>
 800dd8e:	4632      	mov	r2, r6
 800dd90:	463b      	mov	r3, r7
 800dd92:	4630      	mov	r0, r6
 800dd94:	4639      	mov	r1, r7
 800dd96:	f7f2 fed1 	bl	8000b3c <__aeabi_dcmpun>
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	d0e2      	beq.n	800dd64 <pow+0x60>
 800dd9e:	f7ff fd89 	bl	800d8b4 <__errno>
 800dda2:	2321      	movs	r3, #33	@ 0x21
 800dda4:	6003      	str	r3, [r0, #0]
 800dda6:	ecbd 8b02 	vpop	{d8}
 800ddaa:	ec47 6b10 	vmov	d0, r6, r7
 800ddae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	4639      	mov	r1, r7
 800ddb8:	f7f2 fe8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	d0f2      	beq.n	800dda6 <pow+0xa2>
 800ddc0:	eeb0 0a48 	vmov.f32	s0, s16
 800ddc4:	eef0 0a68 	vmov.f32	s1, s17
 800ddc8:	f000 f838 	bl	800de3c <finite>
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	d0ea      	beq.n	800dda6 <pow+0xa2>
 800ddd0:	ec45 4b10 	vmov	d0, r4, r5
 800ddd4:	f000 f832 	bl	800de3c <finite>
 800ddd8:	e7c3      	b.n	800dd62 <pow+0x5e>
 800ddda:	2600      	movs	r6, #0
 800dddc:	4f00      	ldr	r7, [pc, #0]	@ (800dde0 <pow+0xdc>)
 800ddde:	e7e2      	b.n	800dda6 <pow+0xa2>
 800dde0:	3ff00000 	.word	0x3ff00000

0800dde4 <sqrt>:
 800dde4:	b538      	push	{r3, r4, r5, lr}
 800dde6:	ec55 4b10 	vmov	r4, r5, d0
 800ddea:	ed2d 8b02 	vpush	{d8}
 800ddee:	f000 f83b 	bl	800de68 <__ieee754_sqrt>
 800ddf2:	4622      	mov	r2, r4
 800ddf4:	462b      	mov	r3, r5
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	eeb0 8a40 	vmov.f32	s16, s0
 800ddfe:	eef0 8a60 	vmov.f32	s17, s1
 800de02:	f7f2 fe9b 	bl	8000b3c <__aeabi_dcmpun>
 800de06:	b990      	cbnz	r0, 800de2e <sqrt+0x4a>
 800de08:	2200      	movs	r2, #0
 800de0a:	2300      	movs	r3, #0
 800de0c:	4620      	mov	r0, r4
 800de0e:	4629      	mov	r1, r5
 800de10:	f7f2 fe6c 	bl	8000aec <__aeabi_dcmplt>
 800de14:	b158      	cbz	r0, 800de2e <sqrt+0x4a>
 800de16:	f7ff fd4d 	bl	800d8b4 <__errno>
 800de1a:	2321      	movs	r3, #33	@ 0x21
 800de1c:	2200      	movs	r2, #0
 800de1e:	6003      	str	r3, [r0, #0]
 800de20:	2300      	movs	r3, #0
 800de22:	4610      	mov	r0, r2
 800de24:	4619      	mov	r1, r3
 800de26:	f7f2 fd19 	bl	800085c <__aeabi_ddiv>
 800de2a:	ec41 0b18 	vmov	d8, r0, r1
 800de2e:	eeb0 0a48 	vmov.f32	s0, s16
 800de32:	eef0 0a68 	vmov.f32	s1, s17
 800de36:	ecbd 8b02 	vpop	{d8}
 800de3a:	bd38      	pop	{r3, r4, r5, pc}

0800de3c <finite>:
 800de3c:	b082      	sub	sp, #8
 800de3e:	ed8d 0b00 	vstr	d0, [sp]
 800de42:	9801      	ldr	r0, [sp, #4]
 800de44:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800de48:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800de4c:	0fc0      	lsrs	r0, r0, #31
 800de4e:	b002      	add	sp, #8
 800de50:	4770      	bx	lr
 800de52:	0000      	movs	r0, r0
 800de54:	0000      	movs	r0, r0
	...

0800de58 <nan>:
 800de58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de60 <nan+0x8>
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	00000000 	.word	0x00000000
 800de64:	7ff80000 	.word	0x7ff80000

0800de68 <__ieee754_sqrt>:
 800de68:	4a6b      	ldr	r2, [pc, #428]	@ (800e018 <__ieee754_sqrt+0x1b0>)
 800de6a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6e:	ec55 4b10 	vmov	r4, r5, d0
 800de72:	43aa      	bics	r2, r5
 800de74:	462b      	mov	r3, r5
 800de76:	4621      	mov	r1, r4
 800de78:	d110      	bne.n	800de9c <__ieee754_sqrt+0x34>
 800de7a:	4622      	mov	r2, r4
 800de7c:	4620      	mov	r0, r4
 800de7e:	4629      	mov	r1, r5
 800de80:	f7f2 fbc2 	bl	8000608 <__aeabi_dmul>
 800de84:	4602      	mov	r2, r0
 800de86:	460b      	mov	r3, r1
 800de88:	4620      	mov	r0, r4
 800de8a:	4629      	mov	r1, r5
 800de8c:	f7f2 fa06 	bl	800029c <__adddf3>
 800de90:	4604      	mov	r4, r0
 800de92:	460d      	mov	r5, r1
 800de94:	ec45 4b10 	vmov	d0, r4, r5
 800de98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9c:	2d00      	cmp	r5, #0
 800de9e:	dc0e      	bgt.n	800debe <__ieee754_sqrt+0x56>
 800dea0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800dea4:	4322      	orrs	r2, r4
 800dea6:	d0f5      	beq.n	800de94 <__ieee754_sqrt+0x2c>
 800dea8:	b19d      	cbz	r5, 800ded2 <__ieee754_sqrt+0x6a>
 800deaa:	4622      	mov	r2, r4
 800deac:	4620      	mov	r0, r4
 800deae:	4629      	mov	r1, r5
 800deb0:	f7f2 f9f2 	bl	8000298 <__aeabi_dsub>
 800deb4:	4602      	mov	r2, r0
 800deb6:	460b      	mov	r3, r1
 800deb8:	f7f2 fcd0 	bl	800085c <__aeabi_ddiv>
 800debc:	e7e8      	b.n	800de90 <__ieee754_sqrt+0x28>
 800debe:	152a      	asrs	r2, r5, #20
 800dec0:	d115      	bne.n	800deee <__ieee754_sqrt+0x86>
 800dec2:	2000      	movs	r0, #0
 800dec4:	e009      	b.n	800deda <__ieee754_sqrt+0x72>
 800dec6:	0acb      	lsrs	r3, r1, #11
 800dec8:	3a15      	subs	r2, #21
 800deca:	0549      	lsls	r1, r1, #21
 800decc:	2b00      	cmp	r3, #0
 800dece:	d0fa      	beq.n	800dec6 <__ieee754_sqrt+0x5e>
 800ded0:	e7f7      	b.n	800dec2 <__ieee754_sqrt+0x5a>
 800ded2:	462a      	mov	r2, r5
 800ded4:	e7fa      	b.n	800decc <__ieee754_sqrt+0x64>
 800ded6:	005b      	lsls	r3, r3, #1
 800ded8:	3001      	adds	r0, #1
 800deda:	02dc      	lsls	r4, r3, #11
 800dedc:	d5fb      	bpl.n	800ded6 <__ieee754_sqrt+0x6e>
 800dede:	1e44      	subs	r4, r0, #1
 800dee0:	1b12      	subs	r2, r2, r4
 800dee2:	f1c0 0420 	rsb	r4, r0, #32
 800dee6:	fa21 f404 	lsr.w	r4, r1, r4
 800deea:	4081      	lsls	r1, r0
 800deec:	4323      	orrs	r3, r4
 800deee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800def2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800def6:	07d2      	lsls	r2, r2, #31
 800def8:	f04f 0600 	mov.w	r6, #0
 800defc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df00:	ea4f 0565 	mov.w	r5, r5, asr #1
 800df04:	f04f 0016 	mov.w	r0, #22
 800df08:	4632      	mov	r2, r6
 800df0a:	bf58      	it	pl
 800df0c:	005b      	lslpl	r3, r3, #1
 800df0e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800df12:	bf5c      	itt	pl
 800df14:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800df18:	0049      	lslpl	r1, r1, #1
 800df1a:	005b      	lsls	r3, r3, #1
 800df1c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800df20:	0049      	lsls	r1, r1, #1
 800df22:	1917      	adds	r7, r2, r4
 800df24:	429f      	cmp	r7, r3
 800df26:	bfde      	ittt	le
 800df28:	193a      	addle	r2, r7, r4
 800df2a:	1bdb      	suble	r3, r3, r7
 800df2c:	1936      	addle	r6, r6, r4
 800df2e:	0fcf      	lsrs	r7, r1, #31
 800df30:	3801      	subs	r0, #1
 800df32:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800df36:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800df3a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800df3e:	d1f0      	bne.n	800df22 <__ieee754_sqrt+0xba>
 800df40:	4604      	mov	r4, r0
 800df42:	2720      	movs	r7, #32
 800df44:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800df48:	429a      	cmp	r2, r3
 800df4a:	eb00 0e0c 	add.w	lr, r0, ip
 800df4e:	db02      	blt.n	800df56 <__ieee754_sqrt+0xee>
 800df50:	d113      	bne.n	800df7a <__ieee754_sqrt+0x112>
 800df52:	458e      	cmp	lr, r1
 800df54:	d811      	bhi.n	800df7a <__ieee754_sqrt+0x112>
 800df56:	f1be 0f00 	cmp.w	lr, #0
 800df5a:	eb0e 000c 	add.w	r0, lr, ip
 800df5e:	da43      	bge.n	800dfe8 <__ieee754_sqrt+0x180>
 800df60:	2800      	cmp	r0, #0
 800df62:	db41      	blt.n	800dfe8 <__ieee754_sqrt+0x180>
 800df64:	f102 0801 	add.w	r8, r2, #1
 800df68:	1a9b      	subs	r3, r3, r2
 800df6a:	458e      	cmp	lr, r1
 800df6c:	4464      	add	r4, ip
 800df6e:	eba1 010e 	sub.w	r1, r1, lr
 800df72:	bf88      	it	hi
 800df74:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800df78:	4642      	mov	r2, r8
 800df7a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800df7e:	3f01      	subs	r7, #1
 800df80:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800df84:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800df88:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800df8c:	d1dc      	bne.n	800df48 <__ieee754_sqrt+0xe0>
 800df8e:	4319      	orrs	r1, r3
 800df90:	d01b      	beq.n	800dfca <__ieee754_sqrt+0x162>
 800df92:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800e01c <__ieee754_sqrt+0x1b4>
 800df96:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800e020 <__ieee754_sqrt+0x1b8>
 800df9a:	e9da 0100 	ldrd	r0, r1, [sl]
 800df9e:	e9db 2300 	ldrd	r2, r3, [fp]
 800dfa2:	e9da 8900 	ldrd	r8, r9, [sl]
 800dfa6:	f7f2 f977 	bl	8000298 <__aeabi_dsub>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	460b      	mov	r3, r1
 800dfae:	4640      	mov	r0, r8
 800dfb0:	4649      	mov	r1, r9
 800dfb2:	f7f2 fda5 	bl	8000b00 <__aeabi_dcmple>
 800dfb6:	b140      	cbz	r0, 800dfca <__ieee754_sqrt+0x162>
 800dfb8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dfbc:	e9da 0100 	ldrd	r0, r1, [sl]
 800dfc0:	e9db 2300 	ldrd	r2, r3, [fp]
 800dfc4:	d112      	bne.n	800dfec <__ieee754_sqrt+0x184>
 800dfc6:	3601      	adds	r6, #1
 800dfc8:	463c      	mov	r4, r7
 800dfca:	1072      	asrs	r2, r6, #1
 800dfcc:	07f1      	lsls	r1, r6, #31
 800dfce:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800dfd2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800dfd6:	bf48      	it	mi
 800dfd8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800dfdc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800dfe6:	e753      	b.n	800de90 <__ieee754_sqrt+0x28>
 800dfe8:	4690      	mov	r8, r2
 800dfea:	e7bd      	b.n	800df68 <__ieee754_sqrt+0x100>
 800dfec:	e9da 8900 	ldrd	r8, r9, [sl]
 800dff0:	f7f2 f954 	bl	800029c <__adddf3>
 800dff4:	4602      	mov	r2, r0
 800dff6:	460b      	mov	r3, r1
 800dff8:	4640      	mov	r0, r8
 800dffa:	4649      	mov	r1, r9
 800dffc:	f7f2 fd76 	bl	8000aec <__aeabi_dcmplt>
 800e000:	b128      	cbz	r0, 800e00e <__ieee754_sqrt+0x1a6>
 800e002:	1ca0      	adds	r0, r4, #2
 800e004:	f104 0402 	add.w	r4, r4, #2
 800e008:	bf08      	it	eq
 800e00a:	3601      	addeq	r6, #1
 800e00c:	e7dd      	b.n	800dfca <__ieee754_sqrt+0x162>
 800e00e:	1c63      	adds	r3, r4, #1
 800e010:	f023 0401 	bic.w	r4, r3, #1
 800e014:	e7d9      	b.n	800dfca <__ieee754_sqrt+0x162>
 800e016:	bf00      	nop
 800e018:	7ff00000 	.word	0x7ff00000
 800e01c:	20000080 	.word	0x20000080
 800e020:	20000078 	.word	0x20000078
 800e024:	00000000 	.word	0x00000000

0800e028 <__ieee754_log>:
 800e028:	ec51 0b10 	vmov	r0, r1, d0
 800e02c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	460d      	mov	r5, r1
 800e036:	b087      	sub	sp, #28
 800e038:	da26      	bge.n	800e088 <__ieee754_log+0x60>
 800e03a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e03e:	4602      	mov	r2, r0
 800e040:	4303      	orrs	r3, r0
 800e042:	d10a      	bne.n	800e05a <__ieee754_log+0x32>
 800e044:	2200      	movs	r2, #0
 800e046:	2300      	movs	r3, #0
 800e048:	2000      	movs	r0, #0
 800e04a:	49cb      	ldr	r1, [pc, #812]	@ (800e378 <__ieee754_log+0x350>)
 800e04c:	f7f2 fc06 	bl	800085c <__aeabi_ddiv>
 800e050:	ec41 0b10 	vmov	d0, r0, r1
 800e054:	b007      	add	sp, #28
 800e056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05a:	2900      	cmp	r1, #0
 800e05c:	da05      	bge.n	800e06a <__ieee754_log+0x42>
 800e05e:	460b      	mov	r3, r1
 800e060:	f7f2 f91a 	bl	8000298 <__aeabi_dsub>
 800e064:	2200      	movs	r2, #0
 800e066:	2300      	movs	r3, #0
 800e068:	e7f0      	b.n	800e04c <__ieee754_log+0x24>
 800e06a:	4bc4      	ldr	r3, [pc, #784]	@ (800e37c <__ieee754_log+0x354>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	f7f2 facb 	bl	8000608 <__aeabi_dmul>
 800e072:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800e076:	460d      	mov	r5, r1
 800e078:	4ac1      	ldr	r2, [pc, #772]	@ (800e380 <__ieee754_log+0x358>)
 800e07a:	4295      	cmp	r5, r2
 800e07c:	dd06      	ble.n	800e08c <__ieee754_log+0x64>
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	f7f2 f90b 	bl	800029c <__adddf3>
 800e086:	e7e3      	b.n	800e050 <__ieee754_log+0x28>
 800e088:	2300      	movs	r3, #0
 800e08a:	e7f5      	b.n	800e078 <__ieee754_log+0x50>
 800e08c:	152c      	asrs	r4, r5, #20
 800e08e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e092:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800e096:	441c      	add	r4, r3
 800e098:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800e09c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800e0a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e0a4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800e0a8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e0ac:	4bb5      	ldr	r3, [pc, #724]	@ (800e384 <__ieee754_log+0x35c>)
 800e0ae:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800e0b2:	ea42 0105 	orr.w	r1, r2, r5
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f7f2 f8ee 	bl	8000298 <__aeabi_dsub>
 800e0bc:	1cab      	adds	r3, r5, #2
 800e0be:	4682      	mov	sl, r0
 800e0c0:	468b      	mov	fp, r1
 800e0c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	dc53      	bgt.n	800e174 <__ieee754_log+0x14c>
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	f7f2 fd03 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0d2:	b1d0      	cbz	r0, 800e10a <__ieee754_log+0xe2>
 800e0d4:	2c00      	cmp	r4, #0
 800e0d6:	f000 8120 	beq.w	800e31a <__ieee754_log+0x2f2>
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f7f2 fa2a 	bl	8000534 <__aeabi_i2d>
 800e0e0:	4606      	mov	r6, r0
 800e0e2:	460f      	mov	r7, r1
 800e0e4:	a38e      	add	r3, pc, #568	@ (adr r3, 800e320 <__ieee754_log+0x2f8>)
 800e0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ea:	f7f2 fa8d 	bl	8000608 <__aeabi_dmul>
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	460d      	mov	r5, r1
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	4639      	mov	r1, r7
 800e0f6:	a38c      	add	r3, pc, #560	@ (adr r3, 800e328 <__ieee754_log+0x300>)
 800e0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fc:	f7f2 fa84 	bl	8000608 <__aeabi_dmul>
 800e100:	4602      	mov	r2, r0
 800e102:	460b      	mov	r3, r1
 800e104:	4620      	mov	r0, r4
 800e106:	4629      	mov	r1, r5
 800e108:	e7bb      	b.n	800e082 <__ieee754_log+0x5a>
 800e10a:	a389      	add	r3, pc, #548	@ (adr r3, 800e330 <__ieee754_log+0x308>)
 800e10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e110:	4650      	mov	r0, sl
 800e112:	4659      	mov	r1, fp
 800e114:	f7f2 fa78 	bl	8000608 <__aeabi_dmul>
 800e118:	4602      	mov	r2, r0
 800e11a:	460b      	mov	r3, r1
 800e11c:	2000      	movs	r0, #0
 800e11e:	499a      	ldr	r1, [pc, #616]	@ (800e388 <__ieee754_log+0x360>)
 800e120:	f7f2 f8ba 	bl	8000298 <__aeabi_dsub>
 800e124:	4606      	mov	r6, r0
 800e126:	460f      	mov	r7, r1
 800e128:	4652      	mov	r2, sl
 800e12a:	465b      	mov	r3, fp
 800e12c:	4650      	mov	r0, sl
 800e12e:	4659      	mov	r1, fp
 800e130:	f7f2 fa6a 	bl	8000608 <__aeabi_dmul>
 800e134:	4602      	mov	r2, r0
 800e136:	460b      	mov	r3, r1
 800e138:	4630      	mov	r0, r6
 800e13a:	4639      	mov	r1, r7
 800e13c:	f7f2 fa64 	bl	8000608 <__aeabi_dmul>
 800e140:	4606      	mov	r6, r0
 800e142:	460f      	mov	r7, r1
 800e144:	b914      	cbnz	r4, 800e14c <__ieee754_log+0x124>
 800e146:	4632      	mov	r2, r6
 800e148:	463b      	mov	r3, r7
 800e14a:	e0a0      	b.n	800e28e <__ieee754_log+0x266>
 800e14c:	4620      	mov	r0, r4
 800e14e:	f7f2 f9f1 	bl	8000534 <__aeabi_i2d>
 800e152:	4680      	mov	r8, r0
 800e154:	4689      	mov	r9, r1
 800e156:	a372      	add	r3, pc, #456	@ (adr r3, 800e320 <__ieee754_log+0x2f8>)
 800e158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15c:	f7f2 fa54 	bl	8000608 <__aeabi_dmul>
 800e160:	4604      	mov	r4, r0
 800e162:	460d      	mov	r5, r1
 800e164:	4640      	mov	r0, r8
 800e166:	4649      	mov	r1, r9
 800e168:	a36f      	add	r3, pc, #444	@ (adr r3, 800e328 <__ieee754_log+0x300>)
 800e16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16e:	f7f2 fa4b 	bl	8000608 <__aeabi_dmul>
 800e172:	e0a5      	b.n	800e2c0 <__ieee754_log+0x298>
 800e174:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e178:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800e17c:	f7f2 f88e 	bl	800029c <__adddf3>
 800e180:	4602      	mov	r2, r0
 800e182:	460b      	mov	r3, r1
 800e184:	4650      	mov	r0, sl
 800e186:	4659      	mov	r1, fp
 800e188:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800e18c:	f7f2 fb66 	bl	800085c <__aeabi_ddiv>
 800e190:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800e194:	3551      	adds	r5, #81	@ 0x51
 800e196:	e9cd 0100 	strd	r0, r1, [sp]
 800e19a:	4620      	mov	r0, r4
 800e19c:	4335      	orrs	r5, r6
 800e19e:	f7f2 f9c9 	bl	8000534 <__aeabi_i2d>
 800e1a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1aa:	4610      	mov	r0, r2
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	f7f2 fa2b 	bl	8000608 <__aeabi_dmul>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e1ba:	f7f2 fa25 	bl	8000608 <__aeabi_dmul>
 800e1be:	4680      	mov	r8, r0
 800e1c0:	4689      	mov	r9, r1
 800e1c2:	a35d      	add	r3, pc, #372	@ (adr r3, 800e338 <__ieee754_log+0x310>)
 800e1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c8:	f7f2 fa1e 	bl	8000608 <__aeabi_dmul>
 800e1cc:	a35c      	add	r3, pc, #368	@ (adr r3, 800e340 <__ieee754_log+0x318>)
 800e1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d2:	f7f2 f863 	bl	800029c <__adddf3>
 800e1d6:	4642      	mov	r2, r8
 800e1d8:	464b      	mov	r3, r9
 800e1da:	f7f2 fa15 	bl	8000608 <__aeabi_dmul>
 800e1de:	a35a      	add	r3, pc, #360	@ (adr r3, 800e348 <__ieee754_log+0x320>)
 800e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e4:	f7f2 f85a 	bl	800029c <__adddf3>
 800e1e8:	4642      	mov	r2, r8
 800e1ea:	464b      	mov	r3, r9
 800e1ec:	f7f2 fa0c 	bl	8000608 <__aeabi_dmul>
 800e1f0:	a357      	add	r3, pc, #348	@ (adr r3, 800e350 <__ieee754_log+0x328>)
 800e1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f6:	f7f2 f851 	bl	800029c <__adddf3>
 800e1fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1fe:	f7f2 fa03 	bl	8000608 <__aeabi_dmul>
 800e202:	a355      	add	r3, pc, #340	@ (adr r3, 800e358 <__ieee754_log+0x330>)
 800e204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e208:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e20c:	4640      	mov	r0, r8
 800e20e:	4649      	mov	r1, r9
 800e210:	f7f2 f9fa 	bl	8000608 <__aeabi_dmul>
 800e214:	a352      	add	r3, pc, #328	@ (adr r3, 800e360 <__ieee754_log+0x338>)
 800e216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21a:	f7f2 f83f 	bl	800029c <__adddf3>
 800e21e:	4642      	mov	r2, r8
 800e220:	464b      	mov	r3, r9
 800e222:	f7f2 f9f1 	bl	8000608 <__aeabi_dmul>
 800e226:	a350      	add	r3, pc, #320	@ (adr r3, 800e368 <__ieee754_log+0x340>)
 800e228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22c:	f7f2 f836 	bl	800029c <__adddf3>
 800e230:	4642      	mov	r2, r8
 800e232:	464b      	mov	r3, r9
 800e234:	f7f2 f9e8 	bl	8000608 <__aeabi_dmul>
 800e238:	4602      	mov	r2, r0
 800e23a:	460b      	mov	r3, r1
 800e23c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e240:	f7f2 f82c 	bl	800029c <__adddf3>
 800e244:	2d00      	cmp	r5, #0
 800e246:	4680      	mov	r8, r0
 800e248:	4689      	mov	r9, r1
 800e24a:	dd48      	ble.n	800e2de <__ieee754_log+0x2b6>
 800e24c:	2200      	movs	r2, #0
 800e24e:	4b4e      	ldr	r3, [pc, #312]	@ (800e388 <__ieee754_log+0x360>)
 800e250:	4650      	mov	r0, sl
 800e252:	4659      	mov	r1, fp
 800e254:	f7f2 f9d8 	bl	8000608 <__aeabi_dmul>
 800e258:	4652      	mov	r2, sl
 800e25a:	465b      	mov	r3, fp
 800e25c:	f7f2 f9d4 	bl	8000608 <__aeabi_dmul>
 800e260:	4602      	mov	r2, r0
 800e262:	460b      	mov	r3, r1
 800e264:	4606      	mov	r6, r0
 800e266:	460f      	mov	r7, r1
 800e268:	4640      	mov	r0, r8
 800e26a:	4649      	mov	r1, r9
 800e26c:	f7f2 f816 	bl	800029c <__adddf3>
 800e270:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e274:	f7f2 f9c8 	bl	8000608 <__aeabi_dmul>
 800e278:	4680      	mov	r8, r0
 800e27a:	4689      	mov	r9, r1
 800e27c:	b964      	cbnz	r4, 800e298 <__ieee754_log+0x270>
 800e27e:	4602      	mov	r2, r0
 800e280:	460b      	mov	r3, r1
 800e282:	4630      	mov	r0, r6
 800e284:	4639      	mov	r1, r7
 800e286:	f7f2 f807 	bl	8000298 <__aeabi_dsub>
 800e28a:	4602      	mov	r2, r0
 800e28c:	460b      	mov	r3, r1
 800e28e:	4650      	mov	r0, sl
 800e290:	4659      	mov	r1, fp
 800e292:	f7f2 f801 	bl	8000298 <__aeabi_dsub>
 800e296:	e6db      	b.n	800e050 <__ieee754_log+0x28>
 800e298:	a321      	add	r3, pc, #132	@ (adr r3, 800e320 <__ieee754_log+0x2f8>)
 800e29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2a2:	f7f2 f9b1 	bl	8000608 <__aeabi_dmul>
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	460d      	mov	r5, r1
 800e2aa:	a31f      	add	r3, pc, #124	@ (adr r3, 800e328 <__ieee754_log+0x300>)
 800e2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2b4:	f7f2 f9a8 	bl	8000608 <__aeabi_dmul>
 800e2b8:	4642      	mov	r2, r8
 800e2ba:	464b      	mov	r3, r9
 800e2bc:	f7f1 ffee 	bl	800029c <__adddf3>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	4639      	mov	r1, r7
 800e2c8:	f7f1 ffe6 	bl	8000298 <__aeabi_dsub>
 800e2cc:	4652      	mov	r2, sl
 800e2ce:	465b      	mov	r3, fp
 800e2d0:	f7f1 ffe2 	bl	8000298 <__aeabi_dsub>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	4620      	mov	r0, r4
 800e2da:	4629      	mov	r1, r5
 800e2dc:	e7d9      	b.n	800e292 <__ieee754_log+0x26a>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	4650      	mov	r0, sl
 800e2e4:	4659      	mov	r1, fp
 800e2e6:	f7f1 ffd7 	bl	8000298 <__aeabi_dsub>
 800e2ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2ee:	f7f2 f98b 	bl	8000608 <__aeabi_dmul>
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	460f      	mov	r7, r1
 800e2f6:	2c00      	cmp	r4, #0
 800e2f8:	f43f af25 	beq.w	800e146 <__ieee754_log+0x11e>
 800e2fc:	a308      	add	r3, pc, #32	@ (adr r3, 800e320 <__ieee754_log+0x2f8>)
 800e2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e306:	f7f2 f97f 	bl	8000608 <__aeabi_dmul>
 800e30a:	4604      	mov	r4, r0
 800e30c:	460d      	mov	r5, r1
 800e30e:	a306      	add	r3, pc, #24	@ (adr r3, 800e328 <__ieee754_log+0x300>)
 800e310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e318:	e729      	b.n	800e16e <__ieee754_log+0x146>
 800e31a:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 800e370 <__ieee754_log+0x348>
 800e31e:	e699      	b.n	800e054 <__ieee754_log+0x2c>
 800e320:	fee00000 	.word	0xfee00000
 800e324:	3fe62e42 	.word	0x3fe62e42
 800e328:	35793c76 	.word	0x35793c76
 800e32c:	3dea39ef 	.word	0x3dea39ef
 800e330:	55555555 	.word	0x55555555
 800e334:	3fd55555 	.word	0x3fd55555
 800e338:	df3e5244 	.word	0xdf3e5244
 800e33c:	3fc2f112 	.word	0x3fc2f112
 800e340:	96cb03de 	.word	0x96cb03de
 800e344:	3fc74664 	.word	0x3fc74664
 800e348:	94229359 	.word	0x94229359
 800e34c:	3fd24924 	.word	0x3fd24924
 800e350:	55555593 	.word	0x55555593
 800e354:	3fe55555 	.word	0x3fe55555
 800e358:	d078c69f 	.word	0xd078c69f
 800e35c:	3fc39a09 	.word	0x3fc39a09
 800e360:	1d8e78af 	.word	0x1d8e78af
 800e364:	3fcc71c5 	.word	0x3fcc71c5
 800e368:	9997fa04 	.word	0x9997fa04
 800e36c:	3fd99999 	.word	0x3fd99999
	...
 800e378:	c3500000 	.word	0xc3500000
 800e37c:	43500000 	.word	0x43500000
 800e380:	7fefffff 	.word	0x7fefffff
 800e384:	3ff00000 	.word	0x3ff00000
 800e388:	3fe00000 	.word	0x3fe00000
 800e38c:	00000000 	.word	0x00000000

0800e390 <__ieee754_log10>:
 800e390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e394:	ec55 4b10 	vmov	r4, r5, d0
 800e398:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800e39c:	462b      	mov	r3, r5
 800e39e:	ed2d 8b02 	vpush	{d8}
 800e3a2:	da2e      	bge.n	800e402 <__ieee754_log10+0x72>
 800e3a4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e3a8:	4322      	orrs	r2, r4
 800e3aa:	d10b      	bne.n	800e3c4 <__ieee754_log10+0x34>
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	4939      	ldr	r1, [pc, #228]	@ (800e498 <__ieee754_log10+0x108>)
 800e3b4:	f7f2 fa52 	bl	800085c <__aeabi_ddiv>
 800e3b8:	ecbd 8b02 	vpop	{d8}
 800e3bc:	ec41 0b10 	vmov	d0, r0, r1
 800e3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3c4:	2d00      	cmp	r5, #0
 800e3c6:	da07      	bge.n	800e3d8 <__ieee754_log10+0x48>
 800e3c8:	4622      	mov	r2, r4
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	4629      	mov	r1, r5
 800e3ce:	f7f1 ff63 	bl	8000298 <__aeabi_dsub>
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	e7ed      	b.n	800e3b4 <__ieee754_log10+0x24>
 800e3d8:	2200      	movs	r2, #0
 800e3da:	4b30      	ldr	r3, [pc, #192]	@ (800e49c <__ieee754_log10+0x10c>)
 800e3dc:	4620      	mov	r0, r4
 800e3de:	4629      	mov	r1, r5
 800e3e0:	f7f2 f912 	bl	8000608 <__aeabi_dmul>
 800e3e4:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	460d      	mov	r5, r1
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	492c      	ldr	r1, [pc, #176]	@ (800e4a0 <__ieee754_log10+0x110>)
 800e3f0:	428b      	cmp	r3, r1
 800e3f2:	dd08      	ble.n	800e406 <__ieee754_log10+0x76>
 800e3f4:	4622      	mov	r2, r4
 800e3f6:	462b      	mov	r3, r5
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	4629      	mov	r1, r5
 800e3fc:	f7f1 ff4e 	bl	800029c <__adddf3>
 800e400:	e7da      	b.n	800e3b8 <__ieee754_log10+0x28>
 800e402:	2200      	movs	r2, #0
 800e404:	e7f3      	b.n	800e3ee <__ieee754_log10+0x5e>
 800e406:	1518      	asrs	r0, r3, #20
 800e408:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800e40c:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800e410:	4410      	add	r0, r2
 800e412:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800e416:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800e41a:	f7f2 f88b 	bl	8000534 <__aeabi_i2d>
 800e41e:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 800e422:	4606      	mov	r6, r0
 800e424:	460f      	mov	r7, r1
 800e426:	3303      	adds	r3, #3
 800e428:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800e42c:	a314      	add	r3, pc, #80	@ (adr r3, 800e480 <__ieee754_log10+0xf0>)
 800e42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e432:	ec45 4b18 	vmov	d8, r4, r5
 800e436:	f7f2 f8e7 	bl	8000608 <__aeabi_dmul>
 800e43a:	eeb0 0a48 	vmov.f32	s0, s16
 800e43e:	eef0 0a68 	vmov.f32	s1, s17
 800e442:	4604      	mov	r4, r0
 800e444:	460d      	mov	r5, r1
 800e446:	f7ff fdef 	bl	800e028 <__ieee754_log>
 800e44a:	a30f      	add	r3, pc, #60	@ (adr r3, 800e488 <__ieee754_log10+0xf8>)
 800e44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e450:	ec51 0b10 	vmov	r0, r1, d0
 800e454:	f7f2 f8d8 	bl	8000608 <__aeabi_dmul>
 800e458:	4622      	mov	r2, r4
 800e45a:	462b      	mov	r3, r5
 800e45c:	f7f1 ff1e 	bl	800029c <__adddf3>
 800e460:	4604      	mov	r4, r0
 800e462:	460d      	mov	r5, r1
 800e464:	4630      	mov	r0, r6
 800e466:	4639      	mov	r1, r7
 800e468:	a309      	add	r3, pc, #36	@ (adr r3, 800e490 <__ieee754_log10+0x100>)
 800e46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46e:	f7f2 f8cb 	bl	8000608 <__aeabi_dmul>
 800e472:	4602      	mov	r2, r0
 800e474:	460b      	mov	r3, r1
 800e476:	4620      	mov	r0, r4
 800e478:	4629      	mov	r1, r5
 800e47a:	e7bf      	b.n	800e3fc <__ieee754_log10+0x6c>
 800e47c:	f3af 8000 	nop.w
 800e480:	11f12b36 	.word	0x11f12b36
 800e484:	3d59fef3 	.word	0x3d59fef3
 800e488:	1526e50e 	.word	0x1526e50e
 800e48c:	3fdbcb7b 	.word	0x3fdbcb7b
 800e490:	509f6000 	.word	0x509f6000
 800e494:	3fd34413 	.word	0x3fd34413
 800e498:	c3500000 	.word	0xc3500000
 800e49c:	43500000 	.word	0x43500000
 800e4a0:	7fefffff 	.word	0x7fefffff
 800e4a4:	00000000 	.word	0x00000000

0800e4a8 <__ieee754_pow>:
 800e4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ac:	b091      	sub	sp, #68	@ 0x44
 800e4ae:	ed8d 1b00 	vstr	d1, [sp]
 800e4b2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800e4b6:	ec57 6b10 	vmov	r6, r7, d0
 800e4ba:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800e4be:	ea5a 0001 	orrs.w	r0, sl, r1
 800e4c2:	d113      	bne.n	800e4ec <__ieee754_pow+0x44>
 800e4c4:	19b3      	adds	r3, r6, r6
 800e4c6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800e4ca:	4152      	adcs	r2, r2
 800e4cc:	4298      	cmp	r0, r3
 800e4ce:	4b96      	ldr	r3, [pc, #600]	@ (800e728 <__ieee754_pow+0x280>)
 800e4d0:	4193      	sbcs	r3, r2
 800e4d2:	f080 84e7 	bcs.w	800eea4 <__ieee754_pow+0x9fc>
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	4639      	mov	r1, r7
 800e4da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4de:	f7f1 fedd 	bl	800029c <__adddf3>
 800e4e2:	ec41 0b10 	vmov	d0, r0, r1
 800e4e6:	b011      	add	sp, #68	@ 0x44
 800e4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ec:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e4f0:	4a8e      	ldr	r2, [pc, #568]	@ (800e72c <__ieee754_pow+0x284>)
 800e4f2:	463d      	mov	r5, r7
 800e4f4:	4633      	mov	r3, r6
 800e4f6:	4590      	cmp	r8, r2
 800e4f8:	d806      	bhi.n	800e508 <__ieee754_pow+0x60>
 800e4fa:	d101      	bne.n	800e500 <__ieee754_pow+0x58>
 800e4fc:	2e00      	cmp	r6, #0
 800e4fe:	d1ea      	bne.n	800e4d6 <__ieee754_pow+0x2e>
 800e500:	4592      	cmp	sl, r2
 800e502:	d801      	bhi.n	800e508 <__ieee754_pow+0x60>
 800e504:	d10e      	bne.n	800e524 <__ieee754_pow+0x7c>
 800e506:	b169      	cbz	r1, 800e524 <__ieee754_pow+0x7c>
 800e508:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800e50c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800e510:	431d      	orrs	r5, r3
 800e512:	d1e0      	bne.n	800e4d6 <__ieee754_pow+0x2e>
 800e514:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e518:	18db      	adds	r3, r3, r3
 800e51a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800e51e:	4152      	adcs	r2, r2
 800e520:	429d      	cmp	r5, r3
 800e522:	e7d4      	b.n	800e4ce <__ieee754_pow+0x26>
 800e524:	2d00      	cmp	r5, #0
 800e526:	46c3      	mov	fp, r8
 800e528:	da3a      	bge.n	800e5a0 <__ieee754_pow+0xf8>
 800e52a:	4a81      	ldr	r2, [pc, #516]	@ (800e730 <__ieee754_pow+0x288>)
 800e52c:	4592      	cmp	sl, r2
 800e52e:	d84d      	bhi.n	800e5cc <__ieee754_pow+0x124>
 800e530:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800e534:	4592      	cmp	sl, r2
 800e536:	f240 84c4 	bls.w	800eec2 <__ieee754_pow+0xa1a>
 800e53a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800e53e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e542:	2a14      	cmp	r2, #20
 800e544:	dd0f      	ble.n	800e566 <__ieee754_pow+0xbe>
 800e546:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800e54a:	fa21 f402 	lsr.w	r4, r1, r2
 800e54e:	fa04 f202 	lsl.w	r2, r4, r2
 800e552:	428a      	cmp	r2, r1
 800e554:	f040 84b5 	bne.w	800eec2 <__ieee754_pow+0xa1a>
 800e558:	f004 0401 	and.w	r4, r4, #1
 800e55c:	f1c4 0402 	rsb	r4, r4, #2
 800e560:	2900      	cmp	r1, #0
 800e562:	d158      	bne.n	800e616 <__ieee754_pow+0x16e>
 800e564:	e00e      	b.n	800e584 <__ieee754_pow+0xdc>
 800e566:	2900      	cmp	r1, #0
 800e568:	d154      	bne.n	800e614 <__ieee754_pow+0x16c>
 800e56a:	f1c2 0214 	rsb	r2, r2, #20
 800e56e:	fa4a f402 	asr.w	r4, sl, r2
 800e572:	fa04 f202 	lsl.w	r2, r4, r2
 800e576:	4552      	cmp	r2, sl
 800e578:	f040 84a0 	bne.w	800eebc <__ieee754_pow+0xa14>
 800e57c:	f004 0401 	and.w	r4, r4, #1
 800e580:	f1c4 0402 	rsb	r4, r4, #2
 800e584:	4a6b      	ldr	r2, [pc, #428]	@ (800e734 <__ieee754_pow+0x28c>)
 800e586:	4592      	cmp	sl, r2
 800e588:	d12e      	bne.n	800e5e8 <__ieee754_pow+0x140>
 800e58a:	f1b9 0f00 	cmp.w	r9, #0
 800e58e:	f280 8491 	bge.w	800eeb4 <__ieee754_pow+0xa0c>
 800e592:	4632      	mov	r2, r6
 800e594:	463b      	mov	r3, r7
 800e596:	2000      	movs	r0, #0
 800e598:	4966      	ldr	r1, [pc, #408]	@ (800e734 <__ieee754_pow+0x28c>)
 800e59a:	f7f2 f95f 	bl	800085c <__aeabi_ddiv>
 800e59e:	e7a0      	b.n	800e4e2 <__ieee754_pow+0x3a>
 800e5a0:	2400      	movs	r4, #0
 800e5a2:	bbc1      	cbnz	r1, 800e616 <__ieee754_pow+0x16e>
 800e5a4:	4a61      	ldr	r2, [pc, #388]	@ (800e72c <__ieee754_pow+0x284>)
 800e5a6:	4592      	cmp	sl, r2
 800e5a8:	d1ec      	bne.n	800e584 <__ieee754_pow+0xdc>
 800e5aa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800e5ae:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800e5b2:	431a      	orrs	r2, r3
 800e5b4:	f000 8476 	beq.w	800eea4 <__ieee754_pow+0x9fc>
 800e5b8:	4b5f      	ldr	r3, [pc, #380]	@ (800e738 <__ieee754_pow+0x290>)
 800e5ba:	4598      	cmp	r8, r3
 800e5bc:	d908      	bls.n	800e5d0 <__ieee754_pow+0x128>
 800e5be:	f1b9 0f00 	cmp.w	r9, #0
 800e5c2:	f2c0 8473 	blt.w	800eeac <__ieee754_pow+0xa04>
 800e5c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5ca:	e78a      	b.n	800e4e2 <__ieee754_pow+0x3a>
 800e5cc:	2402      	movs	r4, #2
 800e5ce:	e7e8      	b.n	800e5a2 <__ieee754_pow+0xfa>
 800e5d0:	f1b9 0f00 	cmp.w	r9, #0
 800e5d4:	f04f 0000 	mov.w	r0, #0
 800e5d8:	f04f 0100 	mov.w	r1, #0
 800e5dc:	da81      	bge.n	800e4e2 <__ieee754_pow+0x3a>
 800e5de:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e5e2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e5e6:	e77c      	b.n	800e4e2 <__ieee754_pow+0x3a>
 800e5e8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800e5ec:	d106      	bne.n	800e5fc <__ieee754_pow+0x154>
 800e5ee:	4632      	mov	r2, r6
 800e5f0:	463b      	mov	r3, r7
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	4639      	mov	r1, r7
 800e5f6:	f7f2 f807 	bl	8000608 <__aeabi_dmul>
 800e5fa:	e772      	b.n	800e4e2 <__ieee754_pow+0x3a>
 800e5fc:	4a4f      	ldr	r2, [pc, #316]	@ (800e73c <__ieee754_pow+0x294>)
 800e5fe:	4591      	cmp	r9, r2
 800e600:	d109      	bne.n	800e616 <__ieee754_pow+0x16e>
 800e602:	2d00      	cmp	r5, #0
 800e604:	db07      	blt.n	800e616 <__ieee754_pow+0x16e>
 800e606:	ec47 6b10 	vmov	d0, r6, r7
 800e60a:	b011      	add	sp, #68	@ 0x44
 800e60c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e610:	f7ff bc2a 	b.w	800de68 <__ieee754_sqrt>
 800e614:	2400      	movs	r4, #0
 800e616:	9302      	str	r3, [sp, #8]
 800e618:	ec47 6b10 	vmov	d0, r6, r7
 800e61c:	f000 fc84 	bl	800ef28 <fabs>
 800e620:	9b02      	ldr	r3, [sp, #8]
 800e622:	ec51 0b10 	vmov	r0, r1, d0
 800e626:	bb53      	cbnz	r3, 800e67e <__ieee754_pow+0x1d6>
 800e628:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800e62c:	4b41      	ldr	r3, [pc, #260]	@ (800e734 <__ieee754_pow+0x28c>)
 800e62e:	429a      	cmp	r2, r3
 800e630:	d002      	beq.n	800e638 <__ieee754_pow+0x190>
 800e632:	f1b8 0f00 	cmp.w	r8, #0
 800e636:	d122      	bne.n	800e67e <__ieee754_pow+0x1d6>
 800e638:	f1b9 0f00 	cmp.w	r9, #0
 800e63c:	da05      	bge.n	800e64a <__ieee754_pow+0x1a2>
 800e63e:	4602      	mov	r2, r0
 800e640:	460b      	mov	r3, r1
 800e642:	2000      	movs	r0, #0
 800e644:	493b      	ldr	r1, [pc, #236]	@ (800e734 <__ieee754_pow+0x28c>)
 800e646:	f7f2 f909 	bl	800085c <__aeabi_ddiv>
 800e64a:	2d00      	cmp	r5, #0
 800e64c:	f6bf af49 	bge.w	800e4e2 <__ieee754_pow+0x3a>
 800e650:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800e654:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800e658:	ea58 0804 	orrs.w	r8, r8, r4
 800e65c:	d108      	bne.n	800e670 <__ieee754_pow+0x1c8>
 800e65e:	4602      	mov	r2, r0
 800e660:	460b      	mov	r3, r1
 800e662:	4610      	mov	r0, r2
 800e664:	4619      	mov	r1, r3
 800e666:	f7f1 fe17 	bl	8000298 <__aeabi_dsub>
 800e66a:	4602      	mov	r2, r0
 800e66c:	460b      	mov	r3, r1
 800e66e:	e794      	b.n	800e59a <__ieee754_pow+0xf2>
 800e670:	2c01      	cmp	r4, #1
 800e672:	f47f af36 	bne.w	800e4e2 <__ieee754_pow+0x3a>
 800e676:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e67a:	4619      	mov	r1, r3
 800e67c:	e731      	b.n	800e4e2 <__ieee754_pow+0x3a>
 800e67e:	0feb      	lsrs	r3, r5, #31
 800e680:	3b01      	subs	r3, #1
 800e682:	ea53 0204 	orrs.w	r2, r3, r4
 800e686:	d102      	bne.n	800e68e <__ieee754_pow+0x1e6>
 800e688:	4632      	mov	r2, r6
 800e68a:	463b      	mov	r3, r7
 800e68c:	e7e9      	b.n	800e662 <__ieee754_pow+0x1ba>
 800e68e:	3c01      	subs	r4, #1
 800e690:	431c      	orrs	r4, r3
 800e692:	d016      	beq.n	800e6c2 <__ieee754_pow+0x21a>
 800e694:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800e718 <__ieee754_pow+0x270>
 800e698:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e69c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e6a0:	f240 810e 	bls.w	800e8c0 <__ieee754_pow+0x418>
 800e6a4:	4b26      	ldr	r3, [pc, #152]	@ (800e740 <__ieee754_pow+0x298>)
 800e6a6:	459a      	cmp	sl, r3
 800e6a8:	4b23      	ldr	r3, [pc, #140]	@ (800e738 <__ieee754_pow+0x290>)
 800e6aa:	d916      	bls.n	800e6da <__ieee754_pow+0x232>
 800e6ac:	4598      	cmp	r8, r3
 800e6ae:	d80b      	bhi.n	800e6c8 <__ieee754_pow+0x220>
 800e6b0:	f1b9 0f00 	cmp.w	r9, #0
 800e6b4:	da0b      	bge.n	800e6ce <__ieee754_pow+0x226>
 800e6b6:	2000      	movs	r0, #0
 800e6b8:	b011      	add	sp, #68	@ 0x44
 800e6ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6be:	f000 bcef 	b.w	800f0a0 <__math_oflow>
 800e6c2:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 800e720 <__ieee754_pow+0x278>
 800e6c6:	e7e7      	b.n	800e698 <__ieee754_pow+0x1f0>
 800e6c8:	f1b9 0f00 	cmp.w	r9, #0
 800e6cc:	dcf3      	bgt.n	800e6b6 <__ieee754_pow+0x20e>
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	b011      	add	sp, #68	@ 0x44
 800e6d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d6:	f000 bcdb 	b.w	800f090 <__math_uflow>
 800e6da:	4598      	cmp	r8, r3
 800e6dc:	d20c      	bcs.n	800e6f8 <__ieee754_pow+0x250>
 800e6de:	2200      	movs	r2, #0
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6e6:	f7f2 fa01 	bl	8000aec <__aeabi_dcmplt>
 800e6ea:	3800      	subs	r0, #0
 800e6ec:	bf18      	it	ne
 800e6ee:	2001      	movne	r0, #1
 800e6f0:	f1b9 0f00 	cmp.w	r9, #0
 800e6f4:	daec      	bge.n	800e6d0 <__ieee754_pow+0x228>
 800e6f6:	e7df      	b.n	800e6b8 <__ieee754_pow+0x210>
 800e6f8:	4b0e      	ldr	r3, [pc, #56]	@ (800e734 <__ieee754_pow+0x28c>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	4598      	cmp	r8, r3
 800e6fe:	d921      	bls.n	800e744 <__ieee754_pow+0x29c>
 800e700:	2300      	movs	r3, #0
 800e702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e706:	f7f2 f9f1 	bl	8000aec <__aeabi_dcmplt>
 800e70a:	3800      	subs	r0, #0
 800e70c:	bf18      	it	ne
 800e70e:	2001      	movne	r0, #1
 800e710:	f1b9 0f00 	cmp.w	r9, #0
 800e714:	dcd0      	bgt.n	800e6b8 <__ieee754_pow+0x210>
 800e716:	e7db      	b.n	800e6d0 <__ieee754_pow+0x228>
 800e718:	00000000 	.word	0x00000000
 800e71c:	3ff00000 	.word	0x3ff00000
 800e720:	00000000 	.word	0x00000000
 800e724:	bff00000 	.word	0xbff00000
 800e728:	fff00000 	.word	0xfff00000
 800e72c:	7ff00000 	.word	0x7ff00000
 800e730:	433fffff 	.word	0x433fffff
 800e734:	3ff00000 	.word	0x3ff00000
 800e738:	3fefffff 	.word	0x3fefffff
 800e73c:	3fe00000 	.word	0x3fe00000
 800e740:	43f00000 	.word	0x43f00000
 800e744:	4b5a      	ldr	r3, [pc, #360]	@ (800e8b0 <__ieee754_pow+0x408>)
 800e746:	f7f1 fda7 	bl	8000298 <__aeabi_dsub>
 800e74a:	4604      	mov	r4, r0
 800e74c:	460d      	mov	r5, r1
 800e74e:	a350      	add	r3, pc, #320	@ (adr r3, 800e890 <__ieee754_pow+0x3e8>)
 800e750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e754:	f7f1 ff58 	bl	8000608 <__aeabi_dmul>
 800e758:	4606      	mov	r6, r0
 800e75a:	460f      	mov	r7, r1
 800e75c:	4620      	mov	r0, r4
 800e75e:	4629      	mov	r1, r5
 800e760:	a34d      	add	r3, pc, #308	@ (adr r3, 800e898 <__ieee754_pow+0x3f0>)
 800e762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e766:	f7f1 ff4f 	bl	8000608 <__aeabi_dmul>
 800e76a:	2200      	movs	r2, #0
 800e76c:	4682      	mov	sl, r0
 800e76e:	468b      	mov	fp, r1
 800e770:	4b50      	ldr	r3, [pc, #320]	@ (800e8b4 <__ieee754_pow+0x40c>)
 800e772:	4620      	mov	r0, r4
 800e774:	4629      	mov	r1, r5
 800e776:	f7f1 ff47 	bl	8000608 <__aeabi_dmul>
 800e77a:	4602      	mov	r2, r0
 800e77c:	460b      	mov	r3, r1
 800e77e:	a148      	add	r1, pc, #288	@ (adr r1, 800e8a0 <__ieee754_pow+0x3f8>)
 800e780:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e784:	f7f1 fd88 	bl	8000298 <__aeabi_dsub>
 800e788:	4622      	mov	r2, r4
 800e78a:	462b      	mov	r3, r5
 800e78c:	f7f1 ff3c 	bl	8000608 <__aeabi_dmul>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	2000      	movs	r0, #0
 800e796:	4948      	ldr	r1, [pc, #288]	@ (800e8b8 <__ieee754_pow+0x410>)
 800e798:	f7f1 fd7e 	bl	8000298 <__aeabi_dsub>
 800e79c:	4680      	mov	r8, r0
 800e79e:	4689      	mov	r9, r1
 800e7a0:	4622      	mov	r2, r4
 800e7a2:	462b      	mov	r3, r5
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	2400      	movs	r4, #0
 800e7aa:	f7f1 ff2d 	bl	8000608 <__aeabi_dmul>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	4640      	mov	r0, r8
 800e7b4:	4649      	mov	r1, r9
 800e7b6:	f7f1 ff27 	bl	8000608 <__aeabi_dmul>
 800e7ba:	a33b      	add	r3, pc, #236	@ (adr r3, 800e8a8 <__ieee754_pow+0x400>)
 800e7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c0:	f7f1 ff22 	bl	8000608 <__aeabi_dmul>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	4650      	mov	r0, sl
 800e7ca:	4659      	mov	r1, fp
 800e7cc:	f7f1 fd64 	bl	8000298 <__aeabi_dsub>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	4680      	mov	r8, r0
 800e7d6:	4689      	mov	r9, r1
 800e7d8:	4630      	mov	r0, r6
 800e7da:	4639      	mov	r1, r7
 800e7dc:	f7f1 fd5e 	bl	800029c <__adddf3>
 800e7e0:	4632      	mov	r2, r6
 800e7e2:	463b      	mov	r3, r7
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	460d      	mov	r5, r1
 800e7e8:	f7f1 fd56 	bl	8000298 <__aeabi_dsub>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	460b      	mov	r3, r1
 800e7f0:	4640      	mov	r0, r8
 800e7f2:	4649      	mov	r1, r9
 800e7f4:	f7f1 fd50 	bl	8000298 <__aeabi_dsub>
 800e7f8:	4606      	mov	r6, r0
 800e7fa:	460f      	mov	r7, r1
 800e7fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e800:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e804:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e808:	2300      	movs	r3, #0
 800e80a:	9304      	str	r3, [sp, #16]
 800e80c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e810:	4652      	mov	r2, sl
 800e812:	465b      	mov	r3, fp
 800e814:	f7f1 fd40 	bl	8000298 <__aeabi_dsub>
 800e818:	4622      	mov	r2, r4
 800e81a:	462b      	mov	r3, r5
 800e81c:	f7f1 fef4 	bl	8000608 <__aeabi_dmul>
 800e820:	4680      	mov	r8, r0
 800e822:	4689      	mov	r9, r1
 800e824:	4630      	mov	r0, r6
 800e826:	4639      	mov	r1, r7
 800e828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e82c:	f7f1 feec 	bl	8000608 <__aeabi_dmul>
 800e830:	4602      	mov	r2, r0
 800e832:	460b      	mov	r3, r1
 800e834:	4640      	mov	r0, r8
 800e836:	4649      	mov	r1, r9
 800e838:	f7f1 fd30 	bl	800029c <__adddf3>
 800e83c:	4606      	mov	r6, r0
 800e83e:	460f      	mov	r7, r1
 800e840:	4652      	mov	r2, sl
 800e842:	465b      	mov	r3, fp
 800e844:	4620      	mov	r0, r4
 800e846:	4629      	mov	r1, r5
 800e848:	f7f1 fede 	bl	8000608 <__aeabi_dmul>
 800e84c:	460b      	mov	r3, r1
 800e84e:	4602      	mov	r2, r0
 800e850:	4680      	mov	r8, r0
 800e852:	4689      	mov	r9, r1
 800e854:	4630      	mov	r0, r6
 800e856:	4639      	mov	r1, r7
 800e858:	f7f1 fd20 	bl	800029c <__adddf3>
 800e85c:	4b17      	ldr	r3, [pc, #92]	@ (800e8bc <__ieee754_pow+0x414>)
 800e85e:	4604      	mov	r4, r0
 800e860:	460d      	mov	r5, r1
 800e862:	4299      	cmp	r1, r3
 800e864:	468a      	mov	sl, r1
 800e866:	468b      	mov	fp, r1
 800e868:	f340 82f0 	ble.w	800ee4c <__ieee754_pow+0x9a4>
 800e86c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e870:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e874:	4303      	orrs	r3, r0
 800e876:	f000 81e8 	beq.w	800ec4a <__ieee754_pow+0x7a2>
 800e87a:	2200      	movs	r2, #0
 800e87c:	2300      	movs	r3, #0
 800e87e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e882:	f7f2 f933 	bl	8000aec <__aeabi_dcmplt>
 800e886:	3800      	subs	r0, #0
 800e888:	bf18      	it	ne
 800e88a:	2001      	movne	r0, #1
 800e88c:	e714      	b.n	800e6b8 <__ieee754_pow+0x210>
 800e88e:	bf00      	nop
 800e890:	60000000 	.word	0x60000000
 800e894:	3ff71547 	.word	0x3ff71547
 800e898:	f85ddf44 	.word	0xf85ddf44
 800e89c:	3e54ae0b 	.word	0x3e54ae0b
 800e8a0:	55555555 	.word	0x55555555
 800e8a4:	3fd55555 	.word	0x3fd55555
 800e8a8:	652b82fe 	.word	0x652b82fe
 800e8ac:	3ff71547 	.word	0x3ff71547
 800e8b0:	3ff00000 	.word	0x3ff00000
 800e8b4:	3fd00000 	.word	0x3fd00000
 800e8b8:	3fe00000 	.word	0x3fe00000
 800e8bc:	408fffff 	.word	0x408fffff
 800e8c0:	4bd5      	ldr	r3, [pc, #852]	@ (800ec18 <__ieee754_pow+0x770>)
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	402b      	ands	r3, r5
 800e8c6:	b92b      	cbnz	r3, 800e8d4 <__ieee754_pow+0x42c>
 800e8c8:	4bd4      	ldr	r3, [pc, #848]	@ (800ec1c <__ieee754_pow+0x774>)
 800e8ca:	f7f1 fe9d 	bl	8000608 <__aeabi_dmul>
 800e8ce:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800e8d2:	468b      	mov	fp, r1
 800e8d4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800e8d8:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800e8dc:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e8e0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800e8e4:	4413      	add	r3, r2
 800e8e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e8ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8ec:	4bcc      	ldr	r3, [pc, #816]	@ (800ec20 <__ieee754_pow+0x778>)
 800e8ee:	459b      	cmp	fp, r3
 800e8f0:	dd08      	ble.n	800e904 <__ieee754_pow+0x45c>
 800e8f2:	4bcc      	ldr	r3, [pc, #816]	@ (800ec24 <__ieee754_pow+0x77c>)
 800e8f4:	459b      	cmp	fp, r3
 800e8f6:	f340 81a5 	ble.w	800ec44 <__ieee754_pow+0x79c>
 800e8fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8fc:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e900:	3301      	adds	r3, #1
 800e902:	930a      	str	r3, [sp, #40]	@ 0x28
 800e904:	f04f 0a00 	mov.w	sl, #0
 800e908:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e90c:	4629      	mov	r1, r5
 800e90e:	106d      	asrs	r5, r5, #1
 800e910:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e912:	4bc5      	ldr	r3, [pc, #788]	@ (800ec28 <__ieee754_pow+0x780>)
 800e914:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e918:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e91c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e920:	ed93 7b00 	vldr	d7, [r3]
 800e924:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e928:	ec53 2b17 	vmov	r2, r3, d7
 800e92c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e930:	f7f1 fcb2 	bl	8000298 <__aeabi_dsub>
 800e934:	4606      	mov	r6, r0
 800e936:	460f      	mov	r7, r1
 800e938:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e93c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e940:	f7f1 fcac 	bl	800029c <__adddf3>
 800e944:	4602      	mov	r2, r0
 800e946:	460b      	mov	r3, r1
 800e948:	2000      	movs	r0, #0
 800e94a:	49b8      	ldr	r1, [pc, #736]	@ (800ec2c <__ieee754_pow+0x784>)
 800e94c:	f7f1 ff86 	bl	800085c <__aeabi_ddiv>
 800e950:	4602      	mov	r2, r0
 800e952:	460b      	mov	r3, r1
 800e954:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e958:	4630      	mov	r0, r6
 800e95a:	4639      	mov	r1, r7
 800e95c:	f7f1 fe54 	bl	8000608 <__aeabi_dmul>
 800e960:	2200      	movs	r2, #0
 800e962:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e966:	4614      	mov	r4, r2
 800e968:	461d      	mov	r5, r3
 800e96a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e96e:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e972:	f04f 0b00 	mov.w	fp, #0
 800e976:	4661      	mov	r1, ip
 800e978:	46e1      	mov	r9, ip
 800e97a:	4658      	mov	r0, fp
 800e97c:	46d8      	mov	r8, fp
 800e97e:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e982:	f7f1 fe41 	bl	8000608 <__aeabi_dmul>
 800e986:	4602      	mov	r2, r0
 800e988:	460b      	mov	r3, r1
 800e98a:	4630      	mov	r0, r6
 800e98c:	4639      	mov	r1, r7
 800e98e:	f7f1 fc83 	bl	8000298 <__aeabi_dsub>
 800e992:	4606      	mov	r6, r0
 800e994:	460f      	mov	r7, r1
 800e996:	4620      	mov	r0, r4
 800e998:	4629      	mov	r1, r5
 800e99a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e99e:	f7f1 fc7b 	bl	8000298 <__aeabi_dsub>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e9aa:	f7f1 fc75 	bl	8000298 <__aeabi_dsub>
 800e9ae:	465a      	mov	r2, fp
 800e9b0:	464b      	mov	r3, r9
 800e9b2:	f7f1 fe29 	bl	8000608 <__aeabi_dmul>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	4639      	mov	r1, r7
 800e9be:	f7f1 fc6b 	bl	8000298 <__aeabi_dsub>
 800e9c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e9c6:	f7f1 fe1f 	bl	8000608 <__aeabi_dmul>
 800e9ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e9d2:	4610      	mov	r0, r2
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	f7f1 fe17 	bl	8000608 <__aeabi_dmul>
 800e9da:	4604      	mov	r4, r0
 800e9dc:	460d      	mov	r5, r1
 800e9de:	a37c      	add	r3, pc, #496	@ (adr r3, 800ebd0 <__ieee754_pow+0x728>)
 800e9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e4:	f7f1 fe10 	bl	8000608 <__aeabi_dmul>
 800e9e8:	a37b      	add	r3, pc, #492	@ (adr r3, 800ebd8 <__ieee754_pow+0x730>)
 800e9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ee:	f7f1 fc55 	bl	800029c <__adddf3>
 800e9f2:	4622      	mov	r2, r4
 800e9f4:	462b      	mov	r3, r5
 800e9f6:	f7f1 fe07 	bl	8000608 <__aeabi_dmul>
 800e9fa:	a379      	add	r3, pc, #484	@ (adr r3, 800ebe0 <__ieee754_pow+0x738>)
 800e9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea00:	f7f1 fc4c 	bl	800029c <__adddf3>
 800ea04:	4622      	mov	r2, r4
 800ea06:	462b      	mov	r3, r5
 800ea08:	f7f1 fdfe 	bl	8000608 <__aeabi_dmul>
 800ea0c:	a376      	add	r3, pc, #472	@ (adr r3, 800ebe8 <__ieee754_pow+0x740>)
 800ea0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea12:	f7f1 fc43 	bl	800029c <__adddf3>
 800ea16:	4622      	mov	r2, r4
 800ea18:	462b      	mov	r3, r5
 800ea1a:	f7f1 fdf5 	bl	8000608 <__aeabi_dmul>
 800ea1e:	a374      	add	r3, pc, #464	@ (adr r3, 800ebf0 <__ieee754_pow+0x748>)
 800ea20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea24:	f7f1 fc3a 	bl	800029c <__adddf3>
 800ea28:	4622      	mov	r2, r4
 800ea2a:	462b      	mov	r3, r5
 800ea2c:	f7f1 fdec 	bl	8000608 <__aeabi_dmul>
 800ea30:	a371      	add	r3, pc, #452	@ (adr r3, 800ebf8 <__ieee754_pow+0x750>)
 800ea32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea36:	f7f1 fc31 	bl	800029c <__adddf3>
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	460f      	mov	r7, r1
 800ea3e:	4622      	mov	r2, r4
 800ea40:	462b      	mov	r3, r5
 800ea42:	4620      	mov	r0, r4
 800ea44:	4629      	mov	r1, r5
 800ea46:	f7f1 fddf 	bl	8000608 <__aeabi_dmul>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	4630      	mov	r0, r6
 800ea50:	4639      	mov	r1, r7
 800ea52:	f7f1 fdd9 	bl	8000608 <__aeabi_dmul>
 800ea56:	465a      	mov	r2, fp
 800ea58:	4604      	mov	r4, r0
 800ea5a:	460d      	mov	r5, r1
 800ea5c:	464b      	mov	r3, r9
 800ea5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea62:	f7f1 fc1b 	bl	800029c <__adddf3>
 800ea66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea6a:	f7f1 fdcd 	bl	8000608 <__aeabi_dmul>
 800ea6e:	4622      	mov	r2, r4
 800ea70:	462b      	mov	r3, r5
 800ea72:	f7f1 fc13 	bl	800029c <__adddf3>
 800ea76:	465a      	mov	r2, fp
 800ea78:	464b      	mov	r3, r9
 800ea7a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea7e:	4658      	mov	r0, fp
 800ea80:	4649      	mov	r1, r9
 800ea82:	f7f1 fdc1 	bl	8000608 <__aeabi_dmul>
 800ea86:	2200      	movs	r2, #0
 800ea88:	4b69      	ldr	r3, [pc, #420]	@ (800ec30 <__ieee754_pow+0x788>)
 800ea8a:	4606      	mov	r6, r0
 800ea8c:	460f      	mov	r7, r1
 800ea8e:	f7f1 fc05 	bl	800029c <__adddf3>
 800ea92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ea96:	f7f1 fc01 	bl	800029c <__adddf3>
 800ea9a:	460d      	mov	r5, r1
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	4640      	mov	r0, r8
 800eaa0:	4649      	mov	r1, r9
 800eaa2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800eaa6:	465c      	mov	r4, fp
 800eaa8:	465a      	mov	r2, fp
 800eaaa:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800eaae:	f7f1 fdab 	bl	8000608 <__aeabi_dmul>
 800eab2:	2200      	movs	r2, #0
 800eab4:	4680      	mov	r8, r0
 800eab6:	4689      	mov	r9, r1
 800eab8:	4b5d      	ldr	r3, [pc, #372]	@ (800ec30 <__ieee754_pow+0x788>)
 800eaba:	4620      	mov	r0, r4
 800eabc:	4629      	mov	r1, r5
 800eabe:	f7f1 fbeb 	bl	8000298 <__aeabi_dsub>
 800eac2:	4632      	mov	r2, r6
 800eac4:	463b      	mov	r3, r7
 800eac6:	f7f1 fbe7 	bl	8000298 <__aeabi_dsub>
 800eaca:	4602      	mov	r2, r0
 800eacc:	460b      	mov	r3, r1
 800eace:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ead2:	f7f1 fbe1 	bl	8000298 <__aeabi_dsub>
 800ead6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eada:	f7f1 fd95 	bl	8000608 <__aeabi_dmul>
 800eade:	4606      	mov	r6, r0
 800eae0:	460f      	mov	r7, r1
 800eae2:	4622      	mov	r2, r4
 800eae4:	462b      	mov	r3, r5
 800eae6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eaea:	f7f1 fd8d 	bl	8000608 <__aeabi_dmul>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	4639      	mov	r1, r7
 800eaf6:	f7f1 fbd1 	bl	800029c <__adddf3>
 800eafa:	4606      	mov	r6, r0
 800eafc:	460f      	mov	r7, r1
 800eafe:	4602      	mov	r2, r0
 800eb00:	460b      	mov	r3, r1
 800eb02:	4640      	mov	r0, r8
 800eb04:	4649      	mov	r1, r9
 800eb06:	f7f1 fbc9 	bl	800029c <__adddf3>
 800eb0a:	460d      	mov	r5, r1
 800eb0c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800eb10:	a33b      	add	r3, pc, #236	@ (adr r3, 800ec00 <__ieee754_pow+0x758>)
 800eb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb16:	465c      	mov	r4, fp
 800eb18:	4658      	mov	r0, fp
 800eb1a:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800eb1e:	f7f1 fd73 	bl	8000608 <__aeabi_dmul>
 800eb22:	4642      	mov	r2, r8
 800eb24:	464b      	mov	r3, r9
 800eb26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	f7f1 fbb3 	bl	8000298 <__aeabi_dsub>
 800eb32:	4602      	mov	r2, r0
 800eb34:	460b      	mov	r3, r1
 800eb36:	4630      	mov	r0, r6
 800eb38:	4639      	mov	r1, r7
 800eb3a:	f7f1 fbad 	bl	8000298 <__aeabi_dsub>
 800eb3e:	a332      	add	r3, pc, #200	@ (adr r3, 800ec08 <__ieee754_pow+0x760>)
 800eb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb44:	f7f1 fd60 	bl	8000608 <__aeabi_dmul>
 800eb48:	4606      	mov	r6, r0
 800eb4a:	460f      	mov	r7, r1
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	4629      	mov	r1, r5
 800eb50:	a32f      	add	r3, pc, #188	@ (adr r3, 800ec10 <__ieee754_pow+0x768>)
 800eb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb56:	f7f1 fd57 	bl	8000608 <__aeabi_dmul>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	4630      	mov	r0, r6
 800eb60:	4639      	mov	r1, r7
 800eb62:	f7f1 fb9b 	bl	800029c <__adddf3>
 800eb66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eb68:	4b32      	ldr	r3, [pc, #200]	@ (800ec34 <__ieee754_pow+0x78c>)
 800eb6a:	4413      	add	r3, r2
 800eb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb70:	f7f1 fb94 	bl	800029c <__adddf3>
 800eb74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800eb7a:	f7f1 fcdb 	bl	8000534 <__aeabi_i2d>
 800eb7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eb80:	4b2d      	ldr	r3, [pc, #180]	@ (800ec38 <__ieee754_pow+0x790>)
 800eb82:	4606      	mov	r6, r0
 800eb84:	460f      	mov	r7, r1
 800eb86:	4413      	add	r3, r2
 800eb88:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb94:	f7f1 fb82 	bl	800029c <__adddf3>
 800eb98:	4642      	mov	r2, r8
 800eb9a:	464b      	mov	r3, r9
 800eb9c:	f7f1 fb7e 	bl	800029c <__adddf3>
 800eba0:	4632      	mov	r2, r6
 800eba2:	463b      	mov	r3, r7
 800eba4:	f7f1 fb7a 	bl	800029c <__adddf3>
 800eba8:	4632      	mov	r2, r6
 800ebaa:	463b      	mov	r3, r7
 800ebac:	460d      	mov	r5, r1
 800ebae:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ebb2:	4658      	mov	r0, fp
 800ebb4:	465c      	mov	r4, fp
 800ebb6:	f7f1 fb6f 	bl	8000298 <__aeabi_dsub>
 800ebba:	4642      	mov	r2, r8
 800ebbc:	464b      	mov	r3, r9
 800ebbe:	f7f1 fb6b 	bl	8000298 <__aeabi_dsub>
 800ebc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebc6:	f7f1 fb67 	bl	8000298 <__aeabi_dsub>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	e036      	b.n	800ec3c <__ieee754_pow+0x794>
 800ebce:	bf00      	nop
 800ebd0:	4a454eef 	.word	0x4a454eef
 800ebd4:	3fca7e28 	.word	0x3fca7e28
 800ebd8:	93c9db65 	.word	0x93c9db65
 800ebdc:	3fcd864a 	.word	0x3fcd864a
 800ebe0:	a91d4101 	.word	0xa91d4101
 800ebe4:	3fd17460 	.word	0x3fd17460
 800ebe8:	518f264d 	.word	0x518f264d
 800ebec:	3fd55555 	.word	0x3fd55555
 800ebf0:	db6fabff 	.word	0xdb6fabff
 800ebf4:	3fdb6db6 	.word	0x3fdb6db6
 800ebf8:	33333303 	.word	0x33333303
 800ebfc:	3fe33333 	.word	0x3fe33333
 800ec00:	e0000000 	.word	0xe0000000
 800ec04:	3feec709 	.word	0x3feec709
 800ec08:	dc3a03fd 	.word	0xdc3a03fd
 800ec0c:	3feec709 	.word	0x3feec709
 800ec10:	145b01f5 	.word	0x145b01f5
 800ec14:	be3e2fe0 	.word	0xbe3e2fe0
 800ec18:	7ff00000 	.word	0x7ff00000
 800ec1c:	43400000 	.word	0x43400000
 800ec20:	0003988e 	.word	0x0003988e
 800ec24:	000bb679 	.word	0x000bb679
 800ec28:	0800f200 	.word	0x0800f200
 800ec2c:	3ff00000 	.word	0x3ff00000
 800ec30:	40080000 	.word	0x40080000
 800ec34:	0800f1e0 	.word	0x0800f1e0
 800ec38:	0800f1f0 	.word	0x0800f1f0
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec42:	e5d7      	b.n	800e7f4 <__ieee754_pow+0x34c>
 800ec44:	f04f 0a01 	mov.w	sl, #1
 800ec48:	e65e      	b.n	800e908 <__ieee754_pow+0x460>
 800ec4a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ef1c <__ieee754_pow+0xa74>)
 800ec4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec50:	4630      	mov	r0, r6
 800ec52:	4639      	mov	r1, r7
 800ec54:	f7f1 fb22 	bl	800029c <__adddf3>
 800ec58:	4642      	mov	r2, r8
 800ec5a:	464b      	mov	r3, r9
 800ec5c:	e9cd 0100 	strd	r0, r1, [sp]
 800ec60:	4620      	mov	r0, r4
 800ec62:	4629      	mov	r1, r5
 800ec64:	f7f1 fb18 	bl	8000298 <__aeabi_dsub>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec70:	f7f1 ff5a 	bl	8000b28 <__aeabi_dcmpgt>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	f47f ae00 	bne.w	800e87a <__ieee754_pow+0x3d2>
 800ec7a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ec7e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ec82:	48a1      	ldr	r0, [pc, #644]	@ (800ef08 <__ieee754_pow+0xa60>)
 800ec84:	f1bb 0f00 	cmp.w	fp, #0
 800ec88:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800ec8c:	f04f 0200 	mov.w	r2, #0
 800ec90:	fa43 fa0a 	asr.w	sl, r3, sl
 800ec94:	44da      	add	sl, fp
 800ec96:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ec9a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ec9e:	fa40 f001 	asr.w	r0, r0, r1
 800eca2:	f1c1 0114 	rsb	r1, r1, #20
 800eca6:	ea00 030a 	and.w	r3, r0, sl
 800ecaa:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ecae:	4640      	mov	r0, r8
 800ecb0:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800ecb4:	fa4a fa01 	asr.w	sl, sl, r1
 800ecb8:	4649      	mov	r1, r9
 800ecba:	bfb8      	it	lt
 800ecbc:	f1ca 0a00 	rsblt	sl, sl, #0
 800ecc0:	f7f1 faea 	bl	8000298 <__aeabi_dsub>
 800ecc4:	4680      	mov	r8, r0
 800ecc6:	4689      	mov	r9, r1
 800ecc8:	2400      	movs	r4, #0
 800ecca:	4632      	mov	r2, r6
 800eccc:	463b      	mov	r3, r7
 800ecce:	4640      	mov	r0, r8
 800ecd0:	4649      	mov	r1, r9
 800ecd2:	f7f1 fae3 	bl	800029c <__adddf3>
 800ecd6:	460d      	mov	r5, r1
 800ecd8:	4620      	mov	r0, r4
 800ecda:	a37b      	add	r3, pc, #492	@ (adr r3, 800eec8 <__ieee754_pow+0xa20>)
 800ecdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece0:	f7f1 fc92 	bl	8000608 <__aeabi_dmul>
 800ece4:	4642      	mov	r2, r8
 800ece6:	464b      	mov	r3, r9
 800ece8:	e9cd 0100 	strd	r0, r1, [sp]
 800ecec:	4620      	mov	r0, r4
 800ecee:	4629      	mov	r1, r5
 800ecf0:	f7f1 fad2 	bl	8000298 <__aeabi_dsub>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	4639      	mov	r1, r7
 800ecfc:	f7f1 facc 	bl	8000298 <__aeabi_dsub>
 800ed00:	a373      	add	r3, pc, #460	@ (adr r3, 800eed0 <__ieee754_pow+0xa28>)
 800ed02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed06:	f7f1 fc7f 	bl	8000608 <__aeabi_dmul>
 800ed0a:	4680      	mov	r8, r0
 800ed0c:	4689      	mov	r9, r1
 800ed0e:	4620      	mov	r0, r4
 800ed10:	4629      	mov	r1, r5
 800ed12:	a371      	add	r3, pc, #452	@ (adr r3, 800eed8 <__ieee754_pow+0xa30>)
 800ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed18:	f7f1 fc76 	bl	8000608 <__aeabi_dmul>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	460b      	mov	r3, r1
 800ed20:	4640      	mov	r0, r8
 800ed22:	4649      	mov	r1, r9
 800ed24:	f7f1 faba 	bl	800029c <__adddf3>
 800ed28:	4604      	mov	r4, r0
 800ed2a:	460d      	mov	r5, r1
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	460b      	mov	r3, r1
 800ed30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed34:	f7f1 fab2 	bl	800029c <__adddf3>
 800ed38:	4680      	mov	r8, r0
 800ed3a:	4689      	mov	r9, r1
 800ed3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed40:	f7f1 faaa 	bl	8000298 <__aeabi_dsub>
 800ed44:	4602      	mov	r2, r0
 800ed46:	460b      	mov	r3, r1
 800ed48:	4620      	mov	r0, r4
 800ed4a:	4629      	mov	r1, r5
 800ed4c:	f7f1 faa4 	bl	8000298 <__aeabi_dsub>
 800ed50:	4642      	mov	r2, r8
 800ed52:	4606      	mov	r6, r0
 800ed54:	460f      	mov	r7, r1
 800ed56:	464b      	mov	r3, r9
 800ed58:	4640      	mov	r0, r8
 800ed5a:	4649      	mov	r1, r9
 800ed5c:	f7f1 fc54 	bl	8000608 <__aeabi_dmul>
 800ed60:	4604      	mov	r4, r0
 800ed62:	460d      	mov	r5, r1
 800ed64:	a35e      	add	r3, pc, #376	@ (adr r3, 800eee0 <__ieee754_pow+0xa38>)
 800ed66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6a:	f7f1 fc4d 	bl	8000608 <__aeabi_dmul>
 800ed6e:	a35e      	add	r3, pc, #376	@ (adr r3, 800eee8 <__ieee754_pow+0xa40>)
 800ed70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed74:	f7f1 fa90 	bl	8000298 <__aeabi_dsub>
 800ed78:	4622      	mov	r2, r4
 800ed7a:	462b      	mov	r3, r5
 800ed7c:	f7f1 fc44 	bl	8000608 <__aeabi_dmul>
 800ed80:	a35b      	add	r3, pc, #364	@ (adr r3, 800eef0 <__ieee754_pow+0xa48>)
 800ed82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed86:	f7f1 fa89 	bl	800029c <__adddf3>
 800ed8a:	4622      	mov	r2, r4
 800ed8c:	462b      	mov	r3, r5
 800ed8e:	f7f1 fc3b 	bl	8000608 <__aeabi_dmul>
 800ed92:	a359      	add	r3, pc, #356	@ (adr r3, 800eef8 <__ieee754_pow+0xa50>)
 800ed94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed98:	f7f1 fa7e 	bl	8000298 <__aeabi_dsub>
 800ed9c:	4622      	mov	r2, r4
 800ed9e:	462b      	mov	r3, r5
 800eda0:	f7f1 fc32 	bl	8000608 <__aeabi_dmul>
 800eda4:	a356      	add	r3, pc, #344	@ (adr r3, 800ef00 <__ieee754_pow+0xa58>)
 800eda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edaa:	f7f1 fa77 	bl	800029c <__adddf3>
 800edae:	4622      	mov	r2, r4
 800edb0:	462b      	mov	r3, r5
 800edb2:	f7f1 fc29 	bl	8000608 <__aeabi_dmul>
 800edb6:	4602      	mov	r2, r0
 800edb8:	460b      	mov	r3, r1
 800edba:	4640      	mov	r0, r8
 800edbc:	4649      	mov	r1, r9
 800edbe:	f7f1 fa6b 	bl	8000298 <__aeabi_dsub>
 800edc2:	4604      	mov	r4, r0
 800edc4:	460d      	mov	r5, r1
 800edc6:	4602      	mov	r2, r0
 800edc8:	460b      	mov	r3, r1
 800edca:	4640      	mov	r0, r8
 800edcc:	4649      	mov	r1, r9
 800edce:	f7f1 fc1b 	bl	8000608 <__aeabi_dmul>
 800edd2:	2200      	movs	r2, #0
 800edd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800edd8:	e9cd 0100 	strd	r0, r1, [sp]
 800eddc:	4620      	mov	r0, r4
 800edde:	4629      	mov	r1, r5
 800ede0:	f7f1 fa5a 	bl	8000298 <__aeabi_dsub>
 800ede4:	4602      	mov	r2, r0
 800ede6:	460b      	mov	r3, r1
 800ede8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800edec:	f7f1 fd36 	bl	800085c <__aeabi_ddiv>
 800edf0:	4632      	mov	r2, r6
 800edf2:	4604      	mov	r4, r0
 800edf4:	460d      	mov	r5, r1
 800edf6:	463b      	mov	r3, r7
 800edf8:	4640      	mov	r0, r8
 800edfa:	4649      	mov	r1, r9
 800edfc:	f7f1 fc04 	bl	8000608 <__aeabi_dmul>
 800ee00:	4632      	mov	r2, r6
 800ee02:	463b      	mov	r3, r7
 800ee04:	f7f1 fa4a 	bl	800029c <__adddf3>
 800ee08:	4602      	mov	r2, r0
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	4629      	mov	r1, r5
 800ee10:	f7f1 fa42 	bl	8000298 <__aeabi_dsub>
 800ee14:	4642      	mov	r2, r8
 800ee16:	464b      	mov	r3, r9
 800ee18:	f7f1 fa3e 	bl	8000298 <__aeabi_dsub>
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	4602      	mov	r2, r0
 800ee20:	493a      	ldr	r1, [pc, #232]	@ (800ef0c <__ieee754_pow+0xa64>)
 800ee22:	2000      	movs	r0, #0
 800ee24:	f7f1 fa38 	bl	8000298 <__aeabi_dsub>
 800ee28:	ec41 0b10 	vmov	d0, r0, r1
 800ee2c:	ee10 3a90 	vmov	r3, s1
 800ee30:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ee34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ee38:	da30      	bge.n	800ee9c <__ieee754_pow+0x9f4>
 800ee3a:	4650      	mov	r0, sl
 800ee3c:	f000 f87c 	bl	800ef38 <scalbn>
 800ee40:	ec51 0b10 	vmov	r0, r1, d0
 800ee44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee48:	f7ff bbd5 	b.w	800e5f6 <__ieee754_pow+0x14e>
 800ee4c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ee50:	4c2f      	ldr	r4, [pc, #188]	@ (800ef10 <__ieee754_pow+0xa68>)
 800ee52:	42a3      	cmp	r3, r4
 800ee54:	d91a      	bls.n	800ee8c <__ieee754_pow+0x9e4>
 800ee56:	4b2f      	ldr	r3, [pc, #188]	@ (800ef14 <__ieee754_pow+0xa6c>)
 800ee58:	440b      	add	r3, r1
 800ee5a:	4303      	orrs	r3, r0
 800ee5c:	d009      	beq.n	800ee72 <__ieee754_pow+0x9ca>
 800ee5e:	2200      	movs	r2, #0
 800ee60:	2300      	movs	r3, #0
 800ee62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee66:	f7f1 fe41 	bl	8000aec <__aeabi_dcmplt>
 800ee6a:	3800      	subs	r0, #0
 800ee6c:	bf18      	it	ne
 800ee6e:	2001      	movne	r0, #1
 800ee70:	e42e      	b.n	800e6d0 <__ieee754_pow+0x228>
 800ee72:	4642      	mov	r2, r8
 800ee74:	464b      	mov	r3, r9
 800ee76:	f7f1 fa0f 	bl	8000298 <__aeabi_dsub>
 800ee7a:	4632      	mov	r2, r6
 800ee7c:	463b      	mov	r3, r7
 800ee7e:	f7f1 fe49 	bl	8000b14 <__aeabi_dcmpge>
 800ee82:	2800      	cmp	r0, #0
 800ee84:	d1eb      	bne.n	800ee5e <__ieee754_pow+0x9b6>
 800ee86:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ef24 <__ieee754_pow+0xa7c>
 800ee8a:	e6f6      	b.n	800ec7a <__ieee754_pow+0x7d2>
 800ee8c:	469a      	mov	sl, r3
 800ee8e:	4b22      	ldr	r3, [pc, #136]	@ (800ef18 <__ieee754_pow+0xa70>)
 800ee90:	459a      	cmp	sl, r3
 800ee92:	f63f aef2 	bhi.w	800ec7a <__ieee754_pow+0x7d2>
 800ee96:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ee9a:	e715      	b.n	800ecc8 <__ieee754_pow+0x820>
 800ee9c:	ec51 0b10 	vmov	r0, r1, d0
 800eea0:	4619      	mov	r1, r3
 800eea2:	e7cf      	b.n	800ee44 <__ieee754_pow+0x99c>
 800eea4:	2000      	movs	r0, #0
 800eea6:	4919      	ldr	r1, [pc, #100]	@ (800ef0c <__ieee754_pow+0xa64>)
 800eea8:	f7ff bb1b 	b.w	800e4e2 <__ieee754_pow+0x3a>
 800eeac:	2000      	movs	r0, #0
 800eeae:	2100      	movs	r1, #0
 800eeb0:	f7ff bb17 	b.w	800e4e2 <__ieee754_pow+0x3a>
 800eeb4:	4630      	mov	r0, r6
 800eeb6:	4639      	mov	r1, r7
 800eeb8:	f7ff bb13 	b.w	800e4e2 <__ieee754_pow+0x3a>
 800eebc:	460c      	mov	r4, r1
 800eebe:	f7ff bb61 	b.w	800e584 <__ieee754_pow+0xdc>
 800eec2:	2400      	movs	r4, #0
 800eec4:	f7ff bb4c 	b.w	800e560 <__ieee754_pow+0xb8>
 800eec8:	00000000 	.word	0x00000000
 800eecc:	3fe62e43 	.word	0x3fe62e43
 800eed0:	fefa39ef 	.word	0xfefa39ef
 800eed4:	3fe62e42 	.word	0x3fe62e42
 800eed8:	0ca86c39 	.word	0x0ca86c39
 800eedc:	be205c61 	.word	0xbe205c61
 800eee0:	72bea4d0 	.word	0x72bea4d0
 800eee4:	3e663769 	.word	0x3e663769
 800eee8:	c5d26bf1 	.word	0xc5d26bf1
 800eeec:	3ebbbd41 	.word	0x3ebbbd41
 800eef0:	af25de2c 	.word	0xaf25de2c
 800eef4:	3f11566a 	.word	0x3f11566a
 800eef8:	16bebd93 	.word	0x16bebd93
 800eefc:	3f66c16c 	.word	0x3f66c16c
 800ef00:	5555553e 	.word	0x5555553e
 800ef04:	3fc55555 	.word	0x3fc55555
 800ef08:	fff00000 	.word	0xfff00000
 800ef0c:	3ff00000 	.word	0x3ff00000
 800ef10:	4090cbff 	.word	0x4090cbff
 800ef14:	3f6f3400 	.word	0x3f6f3400
 800ef18:	3fe00000 	.word	0x3fe00000
 800ef1c:	652b82fe 	.word	0x652b82fe
 800ef20:	3c971547 	.word	0x3c971547
 800ef24:	4090cc00 	.word	0x4090cc00

0800ef28 <fabs>:
 800ef28:	ec51 0b10 	vmov	r0, r1, d0
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ef32:	ec43 2b10 	vmov	d0, r2, r3
 800ef36:	4770      	bx	lr

0800ef38 <scalbn>:
 800ef38:	b570      	push	{r4, r5, r6, lr}
 800ef3a:	ec55 4b10 	vmov	r4, r5, d0
 800ef3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ef42:	4606      	mov	r6, r0
 800ef44:	462b      	mov	r3, r5
 800ef46:	b991      	cbnz	r1, 800ef6e <scalbn+0x36>
 800ef48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ef4c:	4323      	orrs	r3, r4
 800ef4e:	d03d      	beq.n	800efcc <scalbn+0x94>
 800ef50:	4b35      	ldr	r3, [pc, #212]	@ (800f028 <scalbn+0xf0>)
 800ef52:	4620      	mov	r0, r4
 800ef54:	4629      	mov	r1, r5
 800ef56:	2200      	movs	r2, #0
 800ef58:	f7f1 fb56 	bl	8000608 <__aeabi_dmul>
 800ef5c:	4b33      	ldr	r3, [pc, #204]	@ (800f02c <scalbn+0xf4>)
 800ef5e:	4604      	mov	r4, r0
 800ef60:	460d      	mov	r5, r1
 800ef62:	429e      	cmp	r6, r3
 800ef64:	da0f      	bge.n	800ef86 <scalbn+0x4e>
 800ef66:	a328      	add	r3, pc, #160	@ (adr r3, 800f008 <scalbn+0xd0>)
 800ef68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6c:	e01e      	b.n	800efac <scalbn+0x74>
 800ef6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ef72:	4291      	cmp	r1, r2
 800ef74:	d10b      	bne.n	800ef8e <scalbn+0x56>
 800ef76:	4622      	mov	r2, r4
 800ef78:	4620      	mov	r0, r4
 800ef7a:	4629      	mov	r1, r5
 800ef7c:	f7f1 f98e 	bl	800029c <__adddf3>
 800ef80:	4604      	mov	r4, r0
 800ef82:	460d      	mov	r5, r1
 800ef84:	e022      	b.n	800efcc <scalbn+0x94>
 800ef86:	460b      	mov	r3, r1
 800ef88:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ef8c:	3936      	subs	r1, #54	@ 0x36
 800ef8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ef92:	4296      	cmp	r6, r2
 800ef94:	dd0d      	ble.n	800efb2 <scalbn+0x7a>
 800ef96:	2d00      	cmp	r5, #0
 800ef98:	a11d      	add	r1, pc, #116	@ (adr r1, 800f010 <scalbn+0xd8>)
 800ef9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef9e:	da02      	bge.n	800efa6 <scalbn+0x6e>
 800efa0:	a11d      	add	r1, pc, #116	@ (adr r1, 800f018 <scalbn+0xe0>)
 800efa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efa6:	a31a      	add	r3, pc, #104	@ (adr r3, 800f010 <scalbn+0xd8>)
 800efa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efac:	f7f1 fb2c 	bl	8000608 <__aeabi_dmul>
 800efb0:	e7e6      	b.n	800ef80 <scalbn+0x48>
 800efb2:	1872      	adds	r2, r6, r1
 800efb4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800efb8:	428a      	cmp	r2, r1
 800efba:	dcec      	bgt.n	800ef96 <scalbn+0x5e>
 800efbc:	2a00      	cmp	r2, #0
 800efbe:	dd08      	ble.n	800efd2 <scalbn+0x9a>
 800efc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800efc4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800efc8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800efcc:	ec45 4b10 	vmov	d0, r4, r5
 800efd0:	bd70      	pop	{r4, r5, r6, pc}
 800efd2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800efd6:	da08      	bge.n	800efea <scalbn+0xb2>
 800efd8:	2d00      	cmp	r5, #0
 800efda:	a10b      	add	r1, pc, #44	@ (adr r1, 800f008 <scalbn+0xd0>)
 800efdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efe0:	dac1      	bge.n	800ef66 <scalbn+0x2e>
 800efe2:	a10f      	add	r1, pc, #60	@ (adr r1, 800f020 <scalbn+0xe8>)
 800efe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efe8:	e7bd      	b.n	800ef66 <scalbn+0x2e>
 800efea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800efee:	3236      	adds	r2, #54	@ 0x36
 800eff0:	4620      	mov	r0, r4
 800eff2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800eff6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800effa:	2200      	movs	r2, #0
 800effc:	4b0c      	ldr	r3, [pc, #48]	@ (800f030 <scalbn+0xf8>)
 800effe:	4629      	mov	r1, r5
 800f000:	e7d4      	b.n	800efac <scalbn+0x74>
 800f002:	bf00      	nop
 800f004:	f3af 8000 	nop.w
 800f008:	c2f8f359 	.word	0xc2f8f359
 800f00c:	01a56e1f 	.word	0x01a56e1f
 800f010:	8800759c 	.word	0x8800759c
 800f014:	7e37e43c 	.word	0x7e37e43c
 800f018:	8800759c 	.word	0x8800759c
 800f01c:	fe37e43c 	.word	0xfe37e43c
 800f020:	c2f8f359 	.word	0xc2f8f359
 800f024:	81a56e1f 	.word	0x81a56e1f
 800f028:	43500000 	.word	0x43500000
 800f02c:	ffff3cb0 	.word	0xffff3cb0
 800f030:	3c900000 	.word	0x3c900000

0800f034 <with_errno>:
 800f034:	b510      	push	{r4, lr}
 800f036:	ed2d 8b02 	vpush	{d8}
 800f03a:	eeb0 8a40 	vmov.f32	s16, s0
 800f03e:	eef0 8a60 	vmov.f32	s17, s1
 800f042:	4604      	mov	r4, r0
 800f044:	f7fe fc36 	bl	800d8b4 <__errno>
 800f048:	6004      	str	r4, [r0, #0]
 800f04a:	eeb0 0a48 	vmov.f32	s0, s16
 800f04e:	eef0 0a68 	vmov.f32	s1, s17
 800f052:	ecbd 8b02 	vpop	{d8}
 800f056:	bd10      	pop	{r4, pc}

0800f058 <xflow>:
 800f058:	4603      	mov	r3, r0
 800f05a:	b507      	push	{r0, r1, r2, lr}
 800f05c:	ec51 0b10 	vmov	r0, r1, d0
 800f060:	b183      	cbz	r3, 800f084 <xflow+0x2c>
 800f062:	4602      	mov	r2, r0
 800f064:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f068:	e9cd 2300 	strd	r2, r3, [sp]
 800f06c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f070:	f7f1 faca 	bl	8000608 <__aeabi_dmul>
 800f074:	ec41 0b10 	vmov	d0, r0, r1
 800f078:	2022      	movs	r0, #34	@ 0x22
 800f07a:	b003      	add	sp, #12
 800f07c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f080:	f7ff bfd8 	b.w	800f034 <with_errno>
 800f084:	4602      	mov	r2, r0
 800f086:	460b      	mov	r3, r1
 800f088:	e7ee      	b.n	800f068 <xflow+0x10>
 800f08a:	0000      	movs	r0, r0
 800f08c:	0000      	movs	r0, r0
	...

0800f090 <__math_uflow>:
 800f090:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f098 <__math_uflow+0x8>
 800f094:	f7ff bfe0 	b.w	800f058 <xflow>
 800f098:	00000000 	.word	0x00000000
 800f09c:	10000000 	.word	0x10000000

0800f0a0 <__math_oflow>:
 800f0a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f0a8 <__math_oflow+0x8>
 800f0a4:	f7ff bfd8 	b.w	800f058 <xflow>
 800f0a8:	00000000 	.word	0x00000000
 800f0ac:	70000000 	.word	0x70000000

0800f0b0 <_init>:
 800f0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b2:	bf00      	nop
 800f0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0b6:	bc08      	pop	{r3}
 800f0b8:	469e      	mov	lr, r3
 800f0ba:	4770      	bx	lr

0800f0bc <_fini>:
 800f0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0be:	bf00      	nop
 800f0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0c2:	bc08      	pop	{r3}
 800f0c4:	469e      	mov	lr, r3
 800f0c6:	4770      	bx	lr
