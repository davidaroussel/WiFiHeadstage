# Coded by D. Roussel at BIOMEDICAL MICROSYSTEMS LABORATORY
# Original version 7/04/2023


import time
from threading import Thread

class Toolkit():
    def __init__(self, q_queue, p_buffer_size, p_frequency, p_port, p_host_addr=""):
        self.data_queue = q_queue
        self.toolkit_Flag = False
        self.toolkit_Thread = Thread(target=self.displayData, args=(self.data_queue,))
        self.data_test = b'\xde\xebH\x16"\xb4\x93\x01\x97\x00@\x80\x01\x00\x00\x00\xe5\xeb$\x16\x1e\xb4\xb0\x01K\xfcD\x80\x00\x00\x01\x00\xfb\xeb3\x164\xb4\xc9\x01\xea\xfeH\x80\xff\xbf\x01\x00\x0f\xecH\x16A\xb4\xb8\x01\xe8\xfeM\x80\x00\x00\x01\x00\x10\xec2\x16$\xb4\xaa\x01\xad\xfdP\x80\x00\x00\x00\x00\xf4\xebB\x16\x17\xb4\xa2\x01\xbd\xfdU\x80\xff\xbf\x00\x00\xfd\xeb1\x16\x18\xb4\xb2\x01,\xfeY\x80\x00\x00\x00\x00\xfe\xebM\x16*\xb4\xb8\x01\xc6\xfd\\\x80\x00\x00\x01\x00\x05\xec%\x16.\xb4\xa6\x01\xdc\xfd`\x80\x00\x00\x01\x00\x0f\xecC\x16#\xb4\xab\x01\xd7\xfde\x80\xff\xbf\x00\x00\x11\xec\x1b\x16?\xb4\xab\x01,\xfeh\x80\x00\x00\x00\x00\x08\xec9\x16>\xb4\xb9\x01\x97\xfdl\x80\xff\xbf\x00\x00\t\xec=\x16J\xb4\xa8\x01\x0f\xfeq\x80\xff\xbf\x01\x00\xf7\xeb%\x16D\xb4\xab\x01\xb8\xfdt\x80\xff\xbf\x00\x00\x07\xec+\x16K\xb4\xa8\x01\xc6\xfdw\x80\xff\xbf\x01\x00\x1a\xec9\x16N\xb4\xab\x01\xce\xfd|\x80\xff\xbf\x00\x00\x10\xec)\x16;\xb4\xab\x01\xbb\xfd\x7f\x80\xff\xbf\x00\x00\x12\xec+\x16C\xb4\xa8\x01\xb6\xfd\x83\x80\xff\xbf\x00\x00\x18\xec!\x16R\xb4\xb3\x01~\xfd\x87\x80\x00\x00\x01\x00\x05\xec\x1d\x167\xb4\x87\x01\xf0\xfc\x8b\x80\xff\xbf\x01\x00 \xec \x16J\xb4\x97\x01\xcc\xfd\x8f\x80\x00\x00\x01\x00*\xec;\x16T\xb4\xa7\x01B\xfd\x93\x80\x00\x00\x00\x00\x1a\xec\x16\x16L\xb4\xa2\x016\xfd\x97\x80\xff\xbf\x01\x00\r\xec%\x16X\xb4\xa2\x01g\xfd\x9b\x80\x00\x00\x00\x00+\xec\x19\x16Z\xb4\xa7\x010\xfd\xa0\x80\xff\xbf\x00\x00\x0c\xec$\x16R\xb4\xbe\x01V\xfd\xa3\x80\x00\x00\x00\x00.\xec\x1c\x16C\xb4\xa7\x01\x1f\xfd\xa8\x80\xff\xbf\x00\x00$\xec-\x16M\xb4\xa6\x01W\xfd\xac\x80\xff\xbf\x00\x00?\xec&\x16d\xb4\xc6\x01_\xfd\xaf\x80\x00\x00\x00\x00\'\xec\x19\x16b\xb4\x9a\x01\x17\xfd\xb4\x80\x00\x00\x00\x00*\xec!\x16h\xb4\xa5\x01\x04\xfd\xb7\x80\xff\xbf\x00\x00-\xec\x18\x16e\xb4\xa5\x01X\xfd\xbc\x80\x00\x00\x00\x009\xec\x1d\x16e\xb4\xa2\x01%\xfd\xbf\x80\x00\x00\x00\x00\x1b\xec\x19\x16x\xb4\xaa\x01X\xfd\xc4\x80\x00\x00\x00\x00"\xec\xff\x15c\xb4\xaf\x01b\xfd\xc8\x80\xff\xbf\x00\x00\x05\xec\x12\x16x\xb4\xa5\x01\xe5\xfd\xcb\x80\x00\x00\x01\x001\xec\x01\x16d\xb4\xa5\x01\x98\xfd\xd0\x80\x00\x00\x01\x00\'\xec\x10\x16\x82\xb4\xa9\x01\xab\xfd\xd3\x80\x00\x00\x00\x00#\xec\x00\x16\x86\xb4\xb5\x01\xef\xfd\xd7\x80\x00\x00\x00\x00\'\xec)\x16u\xb4\xa0\x01\xf8\xfd\xdc\x80\x00\x00\x01\x008\xec\x11\x16t\xb4\xa6\x01\x1d\xfe\xdf\x80\x00\x00\x00\x00B\xec\x0b\x16y\xb4\x9e\x01\x0e\xfe\xe4\x80\xff\xbf\x01\x00+\xec\xfd\x15^\xb4\xa6\x01n\xfe\xe8\x80\x00\x00\x01\x00)\xec\xfd\x15\x80\xb4\xa6\x014\xfe\xeb\x80\x00\x00\x00\x00-\xec\xfe\x15\x82\xb4\xa6\x01`\xfe\xf0\x80\x00\x00\x00\x00=\xec\x00\x16\x91\xb4\x91\x01^\xfe\xf3\x80\xff\xbf\x01\x008\xec\x10\x16\x8d\xb4\xa6\x01\xde\xfe\xf8\x80\x00\x00\x00\x00@\xec\xf5\x15\x84\xb4\xa6\x01\x9a\xfe\xfc\x80\x00\x00\x00\x00C\xec\xf9\x15o\xb4\x97\x01\xde\xfe\xff\x80\x00\x00\x01\x009\xec\xfb\x15\x8c\xb4\xaa\x01/\xff\x03\x81\xff\xbf\x01\x00'


    def startThread(self):
        self.toolkit_Thread.start()

    # Stop the server
    def stopThread(self):
        if self.toolkit_Flag:
            self.toolkit_Thread.join()

    def fillDataQueue(self):
        while True:
            self.data_queue.put(self.data_test)
            time.sleep(0.001)



